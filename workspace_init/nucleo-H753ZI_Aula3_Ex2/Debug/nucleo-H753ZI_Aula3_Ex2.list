
nucleo-H753ZI_Aula3_Ex2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008990  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008c28  08008c28  00009c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008c60  08008c60  00009c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008c68  08008c68  00009c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008c6c  08008c6c  00009c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08008c70  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08008c80  0000a010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08008ce0  0000a070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  240000d0  08008d40  0000a0d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000758  08008d40  0000a758  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a0d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001957f  00000000  00000000  0000a0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031bc  00000000  00000000  0002367d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  00026840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c99  00000000  00000000  000278a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000388aa  00000000  00000000  00028539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018345  00000000  00000000  00060de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00160ee4  00000000  00000000  00079128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001da00c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004450  00000000  00000000  001da050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001de4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008c10 	.word	0x08008c10

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08008c10 	.word	0x08008c10

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000648 <MX_ETH_Init+0x80>)
 80005ce:	4a1f      	ldr	r2, [pc, #124]	@ (800064c <MX_ETH_Init+0x84>)
 80005d0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000650 <MX_ETH_Init+0x88>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000650 <MX_ETH_Init+0x88>)
 80005da:	2280      	movs	r2, #128	@ 0x80
 80005dc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005de:	4b1c      	ldr	r3, [pc, #112]	@ (8000650 <MX_ETH_Init+0x88>)
 80005e0:	22e1      	movs	r2, #225	@ 0xe1
 80005e2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000650 <MX_ETH_Init+0x88>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005ea:	4b19      	ldr	r3, [pc, #100]	@ (8000650 <MX_ETH_Init+0x88>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80005f0:	4b17      	ldr	r3, [pc, #92]	@ (8000650 <MX_ETH_Init+0x88>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80005f6:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <MX_ETH_Init+0x80>)
 80005f8:	4a15      	ldr	r2, [pc, #84]	@ (8000650 <MX_ETH_Init+0x88>)
 80005fa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <MX_ETH_Init+0x80>)
 80005fe:	2201      	movs	r2, #1
 8000600:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000602:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <MX_ETH_Init+0x80>)
 8000604:	4a13      	ldr	r2, [pc, #76]	@ (8000654 <MX_ETH_Init+0x8c>)
 8000606:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000608:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <MX_ETH_Init+0x80>)
 800060a:	4a13      	ldr	r2, [pc, #76]	@ (8000658 <MX_ETH_Init+0x90>)
 800060c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800060e:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <MX_ETH_Init+0x80>)
 8000610:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000614:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000616:	480c      	ldr	r0, [pc, #48]	@ (8000648 <MX_ETH_Init+0x80>)
 8000618:	f001 fc4c 	bl	8001eb4 <HAL_ETH_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000622:	f000 fa85 	bl	8000b30 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000626:	2238      	movs	r2, #56	@ 0x38
 8000628:	2100      	movs	r1, #0
 800062a:	480c      	ldr	r0, [pc, #48]	@ (800065c <MX_ETH_Init+0x94>)
 800062c:	f008 fac3 	bl	8008bb6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000630:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <MX_ETH_Init+0x94>)
 8000632:	2221      	movs	r2, #33	@ 0x21
 8000634:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000636:	4b09      	ldr	r3, [pc, #36]	@ (800065c <MX_ETH_Init+0x94>)
 8000638:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800063c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800063e:	4b07      	ldr	r3, [pc, #28]	@ (800065c <MX_ETH_Init+0x94>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	24000124 	.word	0x24000124
 800064c:	40028000 	.word	0x40028000
 8000650:	240001d4 	.word	0x240001d4
 8000654:	24000070 	.word	0x24000070
 8000658:	24000010 	.word	0x24000010
 800065c:	240000ec 	.word	0x240000ec

08000660 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08e      	sub	sp, #56	@ 0x38
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a59      	ldr	r2, [pc, #356]	@ (80007e4 <HAL_ETH_MspInit+0x184>)
 800067e:	4293      	cmp	r3, r2
 8000680:	f040 80ab 	bne.w	80007da <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000684:	4b58      	ldr	r3, [pc, #352]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000686:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800068a:	4a57      	ldr	r2, [pc, #348]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800068c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000690:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000694:	4b54      	ldr	r3, [pc, #336]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000696:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800069a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800069e:	623b      	str	r3, [r7, #32]
 80006a0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80006a2:	4b51      	ldr	r3, [pc, #324]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006a8:	4a4f      	ldr	r2, [pc, #316]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006b2:	4b4d      	ldr	r3, [pc, #308]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006bc:	61fb      	str	r3, [r7, #28]
 80006be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80006c0:	4b49      	ldr	r3, [pc, #292]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006c6:	4a48      	ldr	r2, [pc, #288]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006cc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006d0:	4b45      	ldr	r3, [pc, #276]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006da:	61bb      	str	r3, [r7, #24]
 80006dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b42      	ldr	r3, [pc, #264]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e4:	4a40      	ldr	r2, [pc, #256]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006e6:	f043 0304 	orr.w	r3, r3, #4
 80006ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006ee:	4b3e      	ldr	r3, [pc, #248]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	4b3a      	ldr	r3, [pc, #232]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000702:	4a39      	ldr	r2, [pc, #228]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800070c:	4b36      	ldr	r3, [pc, #216]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800070e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	4b33      	ldr	r3, [pc, #204]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800071c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000720:	4a31      	ldr	r2, [pc, #196]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000722:	f043 0302 	orr.w	r3, r3, #2
 8000726:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800072a:	4b2f      	ldr	r3, [pc, #188]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000730:	f003 0302 	and.w	r3, r3, #2
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000738:	4b2b      	ldr	r3, [pc, #172]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800073a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073e:	4a2a      	ldr	r2, [pc, #168]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000740:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000744:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000748:	4b27      	ldr	r3, [pc, #156]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800074a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800074e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000756:	2332      	movs	r3, #50	@ 0x32
 8000758:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000766:	230b      	movs	r3, #11
 8000768:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076e:	4619      	mov	r1, r3
 8000770:	481e      	ldr	r0, [pc, #120]	@ (80007ec <HAL_ETH_MspInit+0x18c>)
 8000772:	f001 ffd3 	bl	800271c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000776:	2386      	movs	r3, #134	@ 0x86
 8000778:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000786:	230b      	movs	r3, #11
 8000788:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078e:	4619      	mov	r1, r3
 8000790:	4817      	ldr	r0, [pc, #92]	@ (80007f0 <HAL_ETH_MspInit+0x190>)
 8000792:	f001 ffc3 	bl	800271c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000796:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079c:	2302      	movs	r3, #2
 800079e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a8:	230b      	movs	r3, #11
 80007aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b0:	4619      	mov	r1, r3
 80007b2:	4810      	ldr	r0, [pc, #64]	@ (80007f4 <HAL_ETH_MspInit+0x194>)
 80007b4:	f001 ffb2 	bl	800271c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80007b8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	2302      	movs	r3, #2
 80007c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ca:	230b      	movs	r3, #11
 80007cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d2:	4619      	mov	r1, r3
 80007d4:	4808      	ldr	r0, [pc, #32]	@ (80007f8 <HAL_ETH_MspInit+0x198>)
 80007d6:	f001 ffa1 	bl	800271c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007da:	bf00      	nop
 80007dc:	3738      	adds	r7, #56	@ 0x38
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40028000 	.word	0x40028000
 80007e8:	58024400 	.word	0x58024400
 80007ec:	58020800 	.word	0x58020800
 80007f0:	58020000 	.word	0x58020000
 80007f4:	58020400 	.word	0x58020400
 80007f8:	58021800 	.word	0x58021800

080007fc <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	@ 0x30
 8000800:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b62      	ldr	r3, [pc, #392]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000818:	4a60      	ldr	r2, [pc, #384]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800081a:	f043 0304 	orr.w	r3, r3, #4
 800081e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000822:	4b5e      	ldr	r3, [pc, #376]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000828:	f003 0304 	and.w	r3, r3, #4
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000830:	4b5a      	ldr	r3, [pc, #360]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000836:	4a59      	ldr	r2, [pc, #356]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800083c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000840:	4b56      	ldr	r3, [pc, #344]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b53      	ldr	r3, [pc, #332]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000854:	4a51      	ldr	r2, [pc, #324]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800085e:	4b4f      	ldr	r3, [pc, #316]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086c:	4b4b      	ldr	r3, [pc, #300]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800086e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000872:	4a4a      	ldr	r2, [pc, #296]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800087c:	4b47      	ldr	r3, [pc, #284]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800087e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088a:	4b44      	ldr	r3, [pc, #272]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000890:	4a42      	ldr	r2, [pc, #264]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000892:	f043 0308 	orr.w	r3, r3, #8
 8000896:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800089a:	4b40      	ldr	r3, [pc, #256]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a0:	f003 0308 	and.w	r3, r3, #8
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a8:	4b3c      	ldr	r3, [pc, #240]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ae:	4a3b      	ldr	r2, [pc, #236]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008b8:	4b38      	ldr	r3, [pc, #224]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c6:	4b35      	ldr	r3, [pc, #212]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008cc:	4a33      	ldr	r2, [pc, #204]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008ce:	f043 0310 	orr.w	r3, r3, #16
 80008d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008d6:	4b31      	ldr	r3, [pc, #196]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008dc:	f003 0310 	and.w	r3, r3, #16
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f244 0101 	movw	r1, #16385	@ 0x4001
 80008ea:	482d      	ldr	r0, [pc, #180]	@ (80009a0 <MX_GPIO_Init+0x1a4>)
 80008ec:	f002 f8c6 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008f6:	482b      	ldr	r0, [pc, #172]	@ (80009a4 <MX_GPIO_Init+0x1a8>)
 80008f8:	f002 f8c0 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2102      	movs	r1, #2
 8000900:	4829      	ldr	r0, [pc, #164]	@ (80009a8 <MX_GPIO_Init+0x1ac>)
 8000902:	f002 f8bb 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000906:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4824      	ldr	r0, [pc, #144]	@ (80009ac <MX_GPIO_Init+0x1b0>)
 800091c:	f001 fefe 	bl	800271c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000920:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4819      	ldr	r0, [pc, #100]	@ (80009a0 <MX_GPIO_Init+0x1a4>)
 800093a:	f001 feef 	bl	800271c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800093e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4813      	ldr	r0, [pc, #76]	@ (80009a4 <MX_GPIO_Init+0x1a8>)
 8000958:	f001 fee0 	bl	800271c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800095c:	2380      	movs	r3, #128	@ 0x80
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000960:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	480f      	ldr	r0, [pc, #60]	@ (80009b0 <MX_GPIO_Init+0x1b4>)
 8000972:	f001 fed3 	bl	800271c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000976:	2302      	movs	r3, #2
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4806      	ldr	r0, [pc, #24]	@ (80009a8 <MX_GPIO_Init+0x1ac>)
 800098e:	f001 fec5 	bl	800271c <HAL_GPIO_Init>

}
 8000992:	bf00      	nop
 8000994:	3730      	adds	r7, #48	@ 0x30
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	58024400 	.word	0x58024400
 80009a0:	58020400 	.word	0x58020400
 80009a4:	58020c00 	.word	0x58020c00
 80009a8:	58021000 	.word	0x58021000
 80009ac:	58020800 	.word	0x58020800
 80009b0:	58021800 	.word	0x58021800

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b8:	f000 fb32 	bl	8001020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009bc:	f000 f81e 	bl	80009fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c0:	f7ff ff1c 	bl	80007fc <MX_GPIO_Init>
  MX_ETH_Init();
 80009c4:	f7ff fe00 	bl	80005c8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009c8:	f000 f994 	bl	8000cf4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009cc:	f000 fa50 	bl	8000e70 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, &ucMsgRx, 1);
 80009d0:	2201      	movs	r2, #1
 80009d2:	4907      	ldr	r1, [pc, #28]	@ (80009f0 <main+0x3c>)
 80009d4:	4807      	ldr	r0, [pc, #28]	@ (80009f4 <main+0x40>)
 80009d6:	f005 f8f5 	bl	8005bc4 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    // Blinking led with blocking for test interruption
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80009da:	2102      	movs	r1, #2
 80009dc:	4806      	ldr	r0, [pc, #24]	@ (80009f8 <main+0x44>)
 80009de:	f002 f866 	bl	8002aae <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80009e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009e6:	f000 fbad 	bl	8001144 <HAL_Delay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80009ea:	bf00      	nop
 80009ec:	e7f5      	b.n	80009da <main+0x26>
 80009ee:	bf00      	nop
 80009f0:	240001da 	.word	0x240001da
 80009f4:	240001dc 	.word	0x240001dc
 80009f8:	58021000 	.word	0x58021000

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b09c      	sub	sp, #112	@ 0x70
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a06:	224c      	movs	r2, #76	@ 0x4c
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f008 f8d3 	bl	8008bb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2220      	movs	r2, #32
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f008 f8cd 	bl	8008bb6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a1c:	2002      	movs	r0, #2
 8000a1e:	f002 f991 	bl	8002d44 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	4b33      	ldr	r3, [pc, #204]	@ (8000af4 <SystemClock_Config+0xf8>)
 8000a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a2a:	4a32      	ldr	r2, [pc, #200]	@ (8000af4 <SystemClock_Config+0xf8>)
 8000a2c:	f023 0301 	bic.w	r3, r3, #1
 8000a30:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a32:	4b30      	ldr	r3, [pc, #192]	@ (8000af4 <SystemClock_Config+0xf8>)
 8000a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000af8 <SystemClock_Config+0xfc>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a44:	4a2c      	ldr	r2, [pc, #176]	@ (8000af8 <SystemClock_Config+0xfc>)
 8000a46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a4a:	6193      	str	r3, [r2, #24]
 8000a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000af8 <SystemClock_Config+0xfc>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a58:	bf00      	nop
 8000a5a:	4b27      	ldr	r3, [pc, #156]	@ (8000af8 <SystemClock_Config+0xfc>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a66:	d1f8      	bne.n	8000a5a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a6c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a72:	2301      	movs	r3, #1
 8000a74:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a76:	2340      	movs	r3, #64	@ 0x40
 8000a78:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a82:	2301      	movs	r3, #1
 8000a84:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000a86:	2318      	movs	r3, #24
 8000a88:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a8e:	2304      	movs	r3, #4
 8000a90:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a92:	2302      	movs	r3, #2
 8000a94:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a96:	230c      	movs	r3, #12
 8000a98:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f002 f996 	bl	8002dd8 <HAL_RCC_OscConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000ab2:	f000 f83d 	bl	8000b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab6:	233f      	movs	r3, #63	@ 0x3f
 8000ab8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000aca:	2340      	movs	r3, #64	@ 0x40
 8000acc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2101      	movs	r1, #1
 8000ada:	4618      	mov	r0, r3
 8000adc:	f002 fdd6 	bl	800368c <HAL_RCC_ClockConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000ae6:	f000 f823 	bl	8000b30 <Error_Handler>
  }
}
 8000aea:	bf00      	nop
 8000aec:	3770      	adds	r7, #112	@ 0x70
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	58000400 	.word	0x58000400
 8000af8:	58024800 	.word	0x58024800

08000afc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if(huart == &huart3){
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a08      	ldr	r2, [pc, #32]	@ (8000b28 <HAL_UART_RxCpltCallback+0x2c>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d109      	bne.n	8000b20 <HAL_UART_RxCpltCallback+0x24>
    HAL_UART_Transmit_IT(&huart3, &ucMsgRx, 1);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	4907      	ldr	r1, [pc, #28]	@ (8000b2c <HAL_UART_RxCpltCallback+0x30>)
 8000b10:	4805      	ldr	r0, [pc, #20]	@ (8000b28 <HAL_UART_RxCpltCallback+0x2c>)
 8000b12:	f004 ffc3 	bl	8005a9c <HAL_UART_Transmit_IT>
    HAL_UART_Receive_IT(&huart3, &ucMsgRx, 1);
 8000b16:	2201      	movs	r2, #1
 8000b18:	4904      	ldr	r1, [pc, #16]	@ (8000b2c <HAL_UART_RxCpltCallback+0x30>)
 8000b1a:	4803      	ldr	r0, [pc, #12]	@ (8000b28 <HAL_UART_RxCpltCallback+0x2c>)
 8000b1c:	f005 f852 	bl	8005bc4 <HAL_UART_Receive_IT>
  }
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	240001dc 	.word	0x240001dc
 8000b2c:	240001da 	.word	0x240001da

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <Error_Handler+0x8>

08000b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <HAL_MspInit+0x30>)
 8000b44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b48:	4a08      	ldr	r2, [pc, #32]	@ (8000b6c <HAL_MspInit+0x30>)
 8000b4a:	f043 0302 	orr.w	r3, r3, #2
 8000b4e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b52:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <HAL_MspInit+0x30>)
 8000b54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b58:	f003 0302 	and.w	r3, r3, #2
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	58024400 	.word	0x58024400

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <NMI_Handler+0x4>

08000b78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <MemManage_Handler+0x4>

08000b88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc6:	f000 fa9d 	bl	8001104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bd4:	4802      	ldr	r0, [pc, #8]	@ (8000be0 <USART3_IRQHandler+0x10>)
 8000bd6:	f005 f841 	bl	8005c5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	240001dc 	.word	0x240001dc

08000be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000be8:	4b37      	ldr	r3, [pc, #220]	@ (8000cc8 <SystemInit+0xe4>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bee:	4a36      	ldr	r2, [pc, #216]	@ (8000cc8 <SystemInit+0xe4>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bf8:	4b34      	ldr	r3, [pc, #208]	@ (8000ccc <SystemInit+0xe8>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f003 030f 	and.w	r3, r3, #15
 8000c00:	2b06      	cmp	r3, #6
 8000c02:	d807      	bhi.n	8000c14 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c04:	4b31      	ldr	r3, [pc, #196]	@ (8000ccc <SystemInit+0xe8>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f023 030f 	bic.w	r3, r3, #15
 8000c0c:	4a2f      	ldr	r2, [pc, #188]	@ (8000ccc <SystemInit+0xe8>)
 8000c0e:	f043 0307 	orr.w	r3, r3, #7
 8000c12:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c14:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd0 <SystemInit+0xec>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a2d      	ldr	r2, [pc, #180]	@ (8000cd0 <SystemInit+0xec>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c20:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd0 <SystemInit+0xec>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c26:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd0 <SystemInit+0xec>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	4929      	ldr	r1, [pc, #164]	@ (8000cd0 <SystemInit+0xec>)
 8000c2c:	4b29      	ldr	r3, [pc, #164]	@ (8000cd4 <SystemInit+0xf0>)
 8000c2e:	4013      	ands	r3, r2
 8000c30:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c32:	4b26      	ldr	r3, [pc, #152]	@ (8000ccc <SystemInit+0xe8>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d007      	beq.n	8000c4e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c3e:	4b23      	ldr	r3, [pc, #140]	@ (8000ccc <SystemInit+0xe8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f023 030f 	bic.w	r3, r3, #15
 8000c46:	4a21      	ldr	r2, [pc, #132]	@ (8000ccc <SystemInit+0xe8>)
 8000c48:	f043 0307 	orr.w	r3, r3, #7
 8000c4c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c4e:	4b20      	ldr	r3, [pc, #128]	@ (8000cd0 <SystemInit+0xec>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c54:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd0 <SystemInit+0xec>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <SystemInit+0xec>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd0 <SystemInit+0xec>)
 8000c62:	4a1d      	ldr	r2, [pc, #116]	@ (8000cd8 <SystemInit+0xf4>)
 8000c64:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <SystemInit+0xec>)
 8000c68:	4a1c      	ldr	r2, [pc, #112]	@ (8000cdc <SystemInit+0xf8>)
 8000c6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <SystemInit+0xec>)
 8000c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce0 <SystemInit+0xfc>)
 8000c70:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c72:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <SystemInit+0xec>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c78:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <SystemInit+0xec>)
 8000c7a:	4a19      	ldr	r2, [pc, #100]	@ (8000ce0 <SystemInit+0xfc>)
 8000c7c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <SystemInit+0xec>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c84:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <SystemInit+0xec>)
 8000c86:	4a16      	ldr	r2, [pc, #88]	@ (8000ce0 <SystemInit+0xfc>)
 8000c88:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <SystemInit+0xec>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <SystemInit+0xec>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd0 <SystemInit+0xec>)
 8000c96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <SystemInit+0xec>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000ca2:	4b10      	ldr	r3, [pc, #64]	@ (8000ce4 <SystemInit+0x100>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <SystemInit+0x104>)
 8000ca8:	4013      	ands	r3, r2
 8000caa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000cae:	d202      	bcs.n	8000cb6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <SystemInit+0x108>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <SystemInit+0x10c>)
 8000cb8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000cbc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00
 8000ccc:	52002000 	.word	0x52002000
 8000cd0:	58024400 	.word	0x58024400
 8000cd4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cd8:	02020200 	.word	0x02020200
 8000cdc:	01ff0000 	.word	0x01ff0000
 8000ce0:	01010280 	.word	0x01010280
 8000ce4:	5c001000 	.word	0x5c001000
 8000ce8:	ffff0000 	.word	0xffff0000
 8000cec:	51008108 	.word	0x51008108
 8000cf0:	52004000 	.word	0x52004000

08000cf4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cf8:	4b22      	ldr	r3, [pc, #136]	@ (8000d84 <MX_USART3_UART_Init+0x90>)
 8000cfa:	4a23      	ldr	r2, [pc, #140]	@ (8000d88 <MX_USART3_UART_Init+0x94>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cfe:	4b21      	ldr	r3, [pc, #132]	@ (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b1f      	ldr	r3, [pc, #124]	@ (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b1c      	ldr	r3, [pc, #112]	@ (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b19      	ldr	r3, [pc, #100]	@ (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d2a:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d30:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d36:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d3c:	4811      	ldr	r0, [pc, #68]	@ (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d3e:	f004 fe5d 	bl	80059fc <HAL_UART_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d48:	f7ff fef2 	bl	8000b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	480d      	ldr	r0, [pc, #52]	@ (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d50:	f007 fb5f 	bl	8008412 <HAL_UARTEx_SetTxFifoThreshold>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d5a:	f7ff fee9 	bl	8000b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4808      	ldr	r0, [pc, #32]	@ (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d62:	f007 fb94 	bl	800848e <HAL_UARTEx_SetRxFifoThreshold>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d6c:	f7ff fee0 	bl	8000b30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d70:	4804      	ldr	r0, [pc, #16]	@ (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d72:	f007 fb15 	bl	80083a0 <HAL_UARTEx_DisableFifoMode>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d7c:	f7ff fed8 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	240001dc 	.word	0x240001dc
 8000d88:	40004800 	.word	0x40004800

08000d8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b0ba      	sub	sp, #232	@ 0xe8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	22c0      	movs	r2, #192	@ 0xc0
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f007 ff02 	bl	8008bb6 <memset>
  if(uartHandle->Instance==USART3)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a2b      	ldr	r2, [pc, #172]	@ (8000e64 <HAL_UART_MspInit+0xd8>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d14e      	bne.n	8000e5a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dbc:	f04f 0202 	mov.w	r2, #2
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dce:	f107 0310 	add.w	r3, r7, #16
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f002 ffe6 	bl	8003da4 <HAL_RCCEx_PeriphCLKConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000dde:	f7ff fea7 	bl	8000b30 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000de2:	4b21      	ldr	r3, [pc, #132]	@ (8000e68 <HAL_UART_MspInit+0xdc>)
 8000de4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000de8:	4a1f      	ldr	r2, [pc, #124]	@ (8000e68 <HAL_UART_MspInit+0xdc>)
 8000dea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000df2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e68 <HAL_UART_MspInit+0xdc>)
 8000df4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000df8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e00:	4b19      	ldr	r3, [pc, #100]	@ (8000e68 <HAL_UART_MspInit+0xdc>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e06:	4a18      	ldr	r2, [pc, #96]	@ (8000e68 <HAL_UART_MspInit+0xdc>)
 8000e08:	f043 0308 	orr.w	r3, r3, #8
 8000e0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e10:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <HAL_UART_MspInit+0xdc>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e16:	f003 0308 	and.w	r3, r3, #8
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e1e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e38:	2307      	movs	r3, #7
 8000e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e3e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e42:	4619      	mov	r1, r3
 8000e44:	4809      	ldr	r0, [pc, #36]	@ (8000e6c <HAL_UART_MspInit+0xe0>)
 8000e46:	f001 fc69 	bl	800271c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2027      	movs	r0, #39	@ 0x27
 8000e50:	f000 fa97 	bl	8001382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e54:	2027      	movs	r0, #39	@ 0x27
 8000e56:	f000 faae 	bl	80013b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	37e8      	adds	r7, #232	@ 0xe8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40004800 	.word	0x40004800
 8000e68:	58024400 	.word	0x58024400
 8000e6c:	58020c00 	.word	0x58020c00

08000e70 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e74:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e76:	4a16      	ldr	r2, [pc, #88]	@ (8000ed0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000e78:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000e7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ecc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e7c:	2209      	movs	r2, #9
 8000e7e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e80:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e82:	2202      	movs	r2, #2
 8000e84:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e86:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e8e:	2202      	movs	r2, #2
 8000e90:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ecc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ea4:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000eaa:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000eb6:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eb8:	f001 fe13 	bl	8002ae2 <HAL_PCD_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000ec2:	f7ff fe35 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	24000270 	.word	0x24000270
 8000ed0:	40080000 	.word	0x40080000

08000ed4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b0ba      	sub	sp, #232	@ 0xe8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	22c0      	movs	r2, #192	@ 0xc0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f007 fe5e 	bl	8008bb6 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a30      	ldr	r2, [pc, #192]	@ (8000fc0 <HAL_PCD_MspInit+0xec>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d159      	bne.n	8000fb8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f04:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f08:	f04f 0300 	mov.w	r3, #0
 8000f0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f10:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f002 ff41 	bl	8003da4 <HAL_RCCEx_PeriphCLKConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000f28:	f7ff fe02 	bl	8000b30 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f2c:	f001 ff44 	bl	8002db8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f30:	4b24      	ldr	r3, [pc, #144]	@ (8000fc4 <HAL_PCD_MspInit+0xf0>)
 8000f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f36:	4a23      	ldr	r2, [pc, #140]	@ (8000fc4 <HAL_PCD_MspInit+0xf0>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f40:	4b20      	ldr	r3, [pc, #128]	@ (8000fc4 <HAL_PCD_MspInit+0xf0>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f4e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000f52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f68:	230a      	movs	r3, #10
 8000f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f72:	4619      	mov	r1, r3
 8000f74:	4814      	ldr	r0, [pc, #80]	@ (8000fc8 <HAL_PCD_MspInit+0xf4>)
 8000f76:	f001 fbd1 	bl	800271c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f92:	4619      	mov	r1, r3
 8000f94:	480c      	ldr	r0, [pc, #48]	@ (8000fc8 <HAL_PCD_MspInit+0xf4>)
 8000f96:	f001 fbc1 	bl	800271c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <HAL_PCD_MspInit+0xf0>)
 8000f9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fa0:	4a08      	ldr	r2, [pc, #32]	@ (8000fc4 <HAL_PCD_MspInit+0xf0>)
 8000fa2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000fa6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <HAL_PCD_MspInit+0xf0>)
 8000fac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000fb8:	bf00      	nop
 8000fba:	37e8      	adds	r7, #232	@ 0xe8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40080000 	.word	0x40080000
 8000fc4:	58024400 	.word	0x58024400
 8000fc8:	58020000 	.word	0x58020000

08000fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001004 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fd0:	f7ff fe08 	bl	8000be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd4:	480c      	ldr	r0, [pc, #48]	@ (8001008 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fd6:	490d      	ldr	r1, [pc, #52]	@ (800100c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001010 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fea:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fec:	4c0a      	ldr	r4, [pc, #40]	@ (8001018 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ffa:	f007 fde5 	bl	8008bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffe:	f7ff fcd9 	bl	80009b4 <main>
  bx  lr
 8001002:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001004:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001008:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800100c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001010:	08008c70 	.word	0x08008c70
  ldr r2, =_sbss
 8001014:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001018:	24000758 	.word	0x24000758

0800101c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800101c:	e7fe      	b.n	800101c <ADC3_IRQHandler>
	...

08001020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001026:	2003      	movs	r0, #3
 8001028:	f000 f9a0 	bl	800136c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800102c:	f002 fce4 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 8001030:	4602      	mov	r2, r0
 8001032:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <HAL_Init+0x68>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	0a1b      	lsrs	r3, r3, #8
 8001038:	f003 030f 	and.w	r3, r3, #15
 800103c:	4913      	ldr	r1, [pc, #76]	@ (800108c <HAL_Init+0x6c>)
 800103e:	5ccb      	ldrb	r3, [r1, r3]
 8001040:	f003 031f 	and.w	r3, r3, #31
 8001044:	fa22 f303 	lsr.w	r3, r2, r3
 8001048:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800104a:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <HAL_Init+0x68>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	4a0e      	ldr	r2, [pc, #56]	@ (800108c <HAL_Init+0x6c>)
 8001054:	5cd3      	ldrb	r3, [r2, r3]
 8001056:	f003 031f 	and.w	r3, r3, #31
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	fa22 f303 	lsr.w	r3, r2, r3
 8001060:	4a0b      	ldr	r2, [pc, #44]	@ (8001090 <HAL_Init+0x70>)
 8001062:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001064:	4a0b      	ldr	r2, [pc, #44]	@ (8001094 <HAL_Init+0x74>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800106a:	2000      	movs	r0, #0
 800106c:	f000 f814 	bl	8001098 <HAL_InitTick>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e002      	b.n	8001080 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800107a:	f7ff fd5f 	bl	8000b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	58024400 	.word	0x58024400
 800108c:	08008c28 	.word	0x08008c28
 8001090:	24000004 	.word	0x24000004
 8001094:	24000000 	.word	0x24000000

08001098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010a0:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <HAL_InitTick+0x60>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e021      	b.n	80010f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010ac:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <HAL_InitTick+0x64>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <HAL_InitTick+0x60>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4619      	mov	r1, r3
 80010b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80010be:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f985 	bl	80013d2 <HAL_SYSTICK_Config>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00e      	b.n	80010f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b0f      	cmp	r3, #15
 80010d6:	d80a      	bhi.n	80010ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d8:	2200      	movs	r2, #0
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010e0:	f000 f94f 	bl	8001382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e4:	4a06      	ldr	r2, [pc, #24]	@ (8001100 <HAL_InitTick+0x68>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	e000      	b.n	80010f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	2400000c 	.word	0x2400000c
 80010fc:	24000000 	.word	0x24000000
 8001100:	24000008 	.word	0x24000008

08001104 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <HAL_IncTick+0x20>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <HAL_IncTick+0x24>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4413      	add	r3, r2
 8001114:	4a04      	ldr	r2, [pc, #16]	@ (8001128 <HAL_IncTick+0x24>)
 8001116:	6013      	str	r3, [r2, #0]
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	2400000c 	.word	0x2400000c
 8001128:	24000754 	.word	0x24000754

0800112c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return uwTick;
 8001130:	4b03      	ldr	r3, [pc, #12]	@ (8001140 <HAL_GetTick+0x14>)
 8001132:	681b      	ldr	r3, [r3, #0]
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	24000754 	.word	0x24000754

08001144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800114c:	f7ff ffee 	bl	800112c <HAL_GetTick>
 8001150:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800115c:	d005      	beq.n	800116a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800115e:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <HAL_Delay+0x44>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116a:	bf00      	nop
 800116c:	f7ff ffde 	bl	800112c <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	429a      	cmp	r2, r3
 800117a:	d8f7      	bhi.n	800116c <HAL_Delay+0x28>
  {
  }
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2400000c 	.word	0x2400000c

0800118c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001190:	4b03      	ldr	r3, [pc, #12]	@ (80011a0 <HAL_GetREVID+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	0c1b      	lsrs	r3, r3, #16
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	5c001000 	.word	0x5c001000

080011a4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80011ac:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80011b4:	4904      	ldr	r1, [pc, #16]	@ (80011c8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	604b      	str	r3, [r1, #4]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	58000400 	.word	0x58000400

080011cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <__NVIC_SetPriorityGrouping+0x40>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011f4:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fa:	4a04      	ldr	r2, [pc, #16]	@ (800120c <__NVIC_SetPriorityGrouping+0x40>)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	60d3      	str	r3, [r2, #12]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00
 8001210:	05fa0000 	.word	0x05fa0000

08001214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	@ (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800123a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db0b      	blt.n	800125a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	f003 021f 	and.w	r2, r3, #31
 8001248:	4907      	ldr	r1, [pc, #28]	@ (8001268 <__NVIC_EnableIRQ+0x38>)
 800124a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	2001      	movs	r0, #1
 8001252:	fa00 f202 	lsl.w	r2, r0, r2
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000e100 	.word	0xe000e100

0800126c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001278:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db0a      	blt.n	8001296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	490c      	ldr	r1, [pc, #48]	@ (80012b8 <__NVIC_SetPriority+0x4c>)
 8001286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800128a:	0112      	lsls	r2, r2, #4
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	440b      	add	r3, r1
 8001290:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001294:	e00a      	b.n	80012ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4908      	ldr	r1, [pc, #32]	@ (80012bc <__NVIC_SetPriority+0x50>)
 800129c:	88fb      	ldrh	r3, [r7, #6]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	3b04      	subs	r3, #4
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	440b      	add	r3, r1
 80012aa:	761a      	strb	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	@ 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f1c3 0307 	rsb	r3, r3, #7
 80012da:	2b04      	cmp	r3, #4
 80012dc:	bf28      	it	cs
 80012de:	2304      	movcs	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d902      	bls.n	80012f0 <NVIC_EncodePriority+0x30>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3b03      	subs	r3, #3
 80012ee:	e000      	b.n	80012f2 <NVIC_EncodePriority+0x32>
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001308:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43d9      	mvns	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
         );
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	@ 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001338:	d301      	bcc.n	800133e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133a:	2301      	movs	r3, #1
 800133c:	e00f      	b.n	800135e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133e:	4a0a      	ldr	r2, [pc, #40]	@ (8001368 <SysTick_Config+0x40>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001346:	210f      	movs	r1, #15
 8001348:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800134c:	f7ff ff8e 	bl	800126c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001350:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <SysTick_Config+0x40>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001356:	4b04      	ldr	r3, [pc, #16]	@ (8001368 <SysTick_Config+0x40>)
 8001358:	2207      	movs	r2, #7
 800135a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	e000e010 	.word	0xe000e010

0800136c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff29 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001390:	f7ff ff40 	bl	8001214 <__NVIC_GetPriorityGrouping>
 8001394:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f7ff ff90 	bl	80012c0 <NVIC_EncodePriority>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff5f 	bl	800126c <__NVIC_SetPriority>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff33 	bl	8001230 <__NVIC_EnableIRQ>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ffa4 	bl	8001328 <SysTick_Config>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80013f4:	f7ff fe9a 	bl	800112c <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e2dc      	b.n	80019be <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d008      	beq.n	8001422 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2280      	movs	r2, #128	@ 0x80
 8001414:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e2cd      	b.n	80019be <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a76      	ldr	r2, [pc, #472]	@ (8001600 <HAL_DMA_Abort+0x214>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d04a      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a74      	ldr	r2, [pc, #464]	@ (8001604 <HAL_DMA_Abort+0x218>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d045      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a73      	ldr	r2, [pc, #460]	@ (8001608 <HAL_DMA_Abort+0x21c>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d040      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a71      	ldr	r2, [pc, #452]	@ (800160c <HAL_DMA_Abort+0x220>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d03b      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a70      	ldr	r2, [pc, #448]	@ (8001610 <HAL_DMA_Abort+0x224>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d036      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a6e      	ldr	r2, [pc, #440]	@ (8001614 <HAL_DMA_Abort+0x228>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d031      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a6d      	ldr	r2, [pc, #436]	@ (8001618 <HAL_DMA_Abort+0x22c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d02c      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a6b      	ldr	r2, [pc, #428]	@ (800161c <HAL_DMA_Abort+0x230>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d027      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a6a      	ldr	r2, [pc, #424]	@ (8001620 <HAL_DMA_Abort+0x234>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d022      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a68      	ldr	r2, [pc, #416]	@ (8001624 <HAL_DMA_Abort+0x238>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d01d      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a67      	ldr	r2, [pc, #412]	@ (8001628 <HAL_DMA_Abort+0x23c>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d018      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a65      	ldr	r2, [pc, #404]	@ (800162c <HAL_DMA_Abort+0x240>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d013      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a64      	ldr	r2, [pc, #400]	@ (8001630 <HAL_DMA_Abort+0x244>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d00e      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a62      	ldr	r2, [pc, #392]	@ (8001634 <HAL_DMA_Abort+0x248>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d009      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a61      	ldr	r2, [pc, #388]	@ (8001638 <HAL_DMA_Abort+0x24c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d004      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a5f      	ldr	r2, [pc, #380]	@ (800163c <HAL_DMA_Abort+0x250>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d101      	bne.n	80014c6 <HAL_DMA_Abort+0xda>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <HAL_DMA_Abort+0xdc>
 80014c6:	2300      	movs	r3, #0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d013      	beq.n	80014f4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 021e 	bic.w	r2, r2, #30
 80014da:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	695a      	ldr	r2, [r3, #20]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014ea:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	e00a      	b.n	800150a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 020e 	bic.w	r2, r2, #14
 8001502:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a3c      	ldr	r2, [pc, #240]	@ (8001600 <HAL_DMA_Abort+0x214>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d072      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a3a      	ldr	r2, [pc, #232]	@ (8001604 <HAL_DMA_Abort+0x218>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d06d      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a39      	ldr	r2, [pc, #228]	@ (8001608 <HAL_DMA_Abort+0x21c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d068      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a37      	ldr	r2, [pc, #220]	@ (800160c <HAL_DMA_Abort+0x220>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d063      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a36      	ldr	r2, [pc, #216]	@ (8001610 <HAL_DMA_Abort+0x224>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d05e      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a34      	ldr	r2, [pc, #208]	@ (8001614 <HAL_DMA_Abort+0x228>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d059      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a33      	ldr	r2, [pc, #204]	@ (8001618 <HAL_DMA_Abort+0x22c>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d054      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a31      	ldr	r2, [pc, #196]	@ (800161c <HAL_DMA_Abort+0x230>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d04f      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a30      	ldr	r2, [pc, #192]	@ (8001620 <HAL_DMA_Abort+0x234>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d04a      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a2e      	ldr	r2, [pc, #184]	@ (8001624 <HAL_DMA_Abort+0x238>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d045      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a2d      	ldr	r2, [pc, #180]	@ (8001628 <HAL_DMA_Abort+0x23c>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d040      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a2b      	ldr	r2, [pc, #172]	@ (800162c <HAL_DMA_Abort+0x240>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d03b      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a2a      	ldr	r2, [pc, #168]	@ (8001630 <HAL_DMA_Abort+0x244>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d036      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a28      	ldr	r2, [pc, #160]	@ (8001634 <HAL_DMA_Abort+0x248>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d031      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a27      	ldr	r2, [pc, #156]	@ (8001638 <HAL_DMA_Abort+0x24c>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d02c      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a25      	ldr	r2, [pc, #148]	@ (800163c <HAL_DMA_Abort+0x250>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d027      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a24      	ldr	r2, [pc, #144]	@ (8001640 <HAL_DMA_Abort+0x254>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d022      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a22      	ldr	r2, [pc, #136]	@ (8001644 <HAL_DMA_Abort+0x258>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d01d      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a21      	ldr	r2, [pc, #132]	@ (8001648 <HAL_DMA_Abort+0x25c>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d018      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a1f      	ldr	r2, [pc, #124]	@ (800164c <HAL_DMA_Abort+0x260>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d013      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001650 <HAL_DMA_Abort+0x264>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d00e      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001654 <HAL_DMA_Abort+0x268>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d009      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001658 <HAL_DMA_Abort+0x26c>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d004      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a19      	ldr	r2, [pc, #100]	@ (800165c <HAL_DMA_Abort+0x270>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d132      	bne.n	8001660 <HAL_DMA_Abort+0x274>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e031      	b.n	8001662 <HAL_DMA_Abort+0x276>
 80015fe:	bf00      	nop
 8001600:	40020010 	.word	0x40020010
 8001604:	40020028 	.word	0x40020028
 8001608:	40020040 	.word	0x40020040
 800160c:	40020058 	.word	0x40020058
 8001610:	40020070 	.word	0x40020070
 8001614:	40020088 	.word	0x40020088
 8001618:	400200a0 	.word	0x400200a0
 800161c:	400200b8 	.word	0x400200b8
 8001620:	40020410 	.word	0x40020410
 8001624:	40020428 	.word	0x40020428
 8001628:	40020440 	.word	0x40020440
 800162c:	40020458 	.word	0x40020458
 8001630:	40020470 	.word	0x40020470
 8001634:	40020488 	.word	0x40020488
 8001638:	400204a0 	.word	0x400204a0
 800163c:	400204b8 	.word	0x400204b8
 8001640:	58025408 	.word	0x58025408
 8001644:	5802541c 	.word	0x5802541c
 8001648:	58025430 	.word	0x58025430
 800164c:	58025444 	.word	0x58025444
 8001650:	58025458 	.word	0x58025458
 8001654:	5802546c 	.word	0x5802546c
 8001658:	58025480 	.word	0x58025480
 800165c:	58025494 	.word	0x58025494
 8001660:	2300      	movs	r3, #0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d007      	beq.n	8001676 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001670:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001674:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a6d      	ldr	r2, [pc, #436]	@ (8001830 <HAL_DMA_Abort+0x444>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d04a      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a6b      	ldr	r2, [pc, #428]	@ (8001834 <HAL_DMA_Abort+0x448>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d045      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a6a      	ldr	r2, [pc, #424]	@ (8001838 <HAL_DMA_Abort+0x44c>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d040      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a68      	ldr	r2, [pc, #416]	@ (800183c <HAL_DMA_Abort+0x450>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d03b      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a67      	ldr	r2, [pc, #412]	@ (8001840 <HAL_DMA_Abort+0x454>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d036      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a65      	ldr	r2, [pc, #404]	@ (8001844 <HAL_DMA_Abort+0x458>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d031      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a64      	ldr	r2, [pc, #400]	@ (8001848 <HAL_DMA_Abort+0x45c>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d02c      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a62      	ldr	r2, [pc, #392]	@ (800184c <HAL_DMA_Abort+0x460>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d027      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a61      	ldr	r2, [pc, #388]	@ (8001850 <HAL_DMA_Abort+0x464>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d022      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a5f      	ldr	r2, [pc, #380]	@ (8001854 <HAL_DMA_Abort+0x468>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d01d      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a5e      	ldr	r2, [pc, #376]	@ (8001858 <HAL_DMA_Abort+0x46c>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d018      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a5c      	ldr	r2, [pc, #368]	@ (800185c <HAL_DMA_Abort+0x470>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d013      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a5b      	ldr	r2, [pc, #364]	@ (8001860 <HAL_DMA_Abort+0x474>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d00e      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a59      	ldr	r2, [pc, #356]	@ (8001864 <HAL_DMA_Abort+0x478>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d009      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a58      	ldr	r2, [pc, #352]	@ (8001868 <HAL_DMA_Abort+0x47c>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d004      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a56      	ldr	r2, [pc, #344]	@ (800186c <HAL_DMA_Abort+0x480>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d108      	bne.n	8001728 <HAL_DMA_Abort+0x33c>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0201 	bic.w	r2, r2, #1
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	e007      	b.n	8001738 <HAL_DMA_Abort+0x34c>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0201 	bic.w	r2, r2, #1
 8001736:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001738:	e013      	b.n	8001762 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800173a:	f7ff fcf7 	bl	800112c <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b05      	cmp	r3, #5
 8001746:	d90c      	bls.n	8001762 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2220      	movs	r2, #32
 800174c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2203      	movs	r2, #3
 8001752:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e12d      	b.n	80019be <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1e5      	bne.n	800173a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a2f      	ldr	r2, [pc, #188]	@ (8001830 <HAL_DMA_Abort+0x444>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d04a      	beq.n	800180e <HAL_DMA_Abort+0x422>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a2d      	ldr	r2, [pc, #180]	@ (8001834 <HAL_DMA_Abort+0x448>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d045      	beq.n	800180e <HAL_DMA_Abort+0x422>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a2c      	ldr	r2, [pc, #176]	@ (8001838 <HAL_DMA_Abort+0x44c>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d040      	beq.n	800180e <HAL_DMA_Abort+0x422>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a2a      	ldr	r2, [pc, #168]	@ (800183c <HAL_DMA_Abort+0x450>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d03b      	beq.n	800180e <HAL_DMA_Abort+0x422>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a29      	ldr	r2, [pc, #164]	@ (8001840 <HAL_DMA_Abort+0x454>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d036      	beq.n	800180e <HAL_DMA_Abort+0x422>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a27      	ldr	r2, [pc, #156]	@ (8001844 <HAL_DMA_Abort+0x458>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d031      	beq.n	800180e <HAL_DMA_Abort+0x422>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a26      	ldr	r2, [pc, #152]	@ (8001848 <HAL_DMA_Abort+0x45c>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d02c      	beq.n	800180e <HAL_DMA_Abort+0x422>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a24      	ldr	r2, [pc, #144]	@ (800184c <HAL_DMA_Abort+0x460>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d027      	beq.n	800180e <HAL_DMA_Abort+0x422>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a23      	ldr	r2, [pc, #140]	@ (8001850 <HAL_DMA_Abort+0x464>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d022      	beq.n	800180e <HAL_DMA_Abort+0x422>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a21      	ldr	r2, [pc, #132]	@ (8001854 <HAL_DMA_Abort+0x468>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d01d      	beq.n	800180e <HAL_DMA_Abort+0x422>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a20      	ldr	r2, [pc, #128]	@ (8001858 <HAL_DMA_Abort+0x46c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d018      	beq.n	800180e <HAL_DMA_Abort+0x422>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a1e      	ldr	r2, [pc, #120]	@ (800185c <HAL_DMA_Abort+0x470>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d013      	beq.n	800180e <HAL_DMA_Abort+0x422>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001860 <HAL_DMA_Abort+0x474>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d00e      	beq.n	800180e <HAL_DMA_Abort+0x422>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001864 <HAL_DMA_Abort+0x478>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d009      	beq.n	800180e <HAL_DMA_Abort+0x422>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001868 <HAL_DMA_Abort+0x47c>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d004      	beq.n	800180e <HAL_DMA_Abort+0x422>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a18      	ldr	r2, [pc, #96]	@ (800186c <HAL_DMA_Abort+0x480>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d101      	bne.n	8001812 <HAL_DMA_Abort+0x426>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <HAL_DMA_Abort+0x428>
 8001812:	2300      	movs	r3, #0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d02b      	beq.n	8001870 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001822:	f003 031f 	and.w	r3, r3, #31
 8001826:	223f      	movs	r2, #63	@ 0x3f
 8001828:	409a      	lsls	r2, r3
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	e02a      	b.n	8001886 <HAL_DMA_Abort+0x49a>
 8001830:	40020010 	.word	0x40020010
 8001834:	40020028 	.word	0x40020028
 8001838:	40020040 	.word	0x40020040
 800183c:	40020058 	.word	0x40020058
 8001840:	40020070 	.word	0x40020070
 8001844:	40020088 	.word	0x40020088
 8001848:	400200a0 	.word	0x400200a0
 800184c:	400200b8 	.word	0x400200b8
 8001850:	40020410 	.word	0x40020410
 8001854:	40020428 	.word	0x40020428
 8001858:	40020440 	.word	0x40020440
 800185c:	40020458 	.word	0x40020458
 8001860:	40020470 	.word	0x40020470
 8001864:	40020488 	.word	0x40020488
 8001868:	400204a0 	.word	0x400204a0
 800186c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001874:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800187a:	f003 031f 	and.w	r3, r3, #31
 800187e:	2201      	movs	r2, #1
 8001880:	409a      	lsls	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a4f      	ldr	r2, [pc, #316]	@ (80019c8 <HAL_DMA_Abort+0x5dc>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d072      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a4d      	ldr	r2, [pc, #308]	@ (80019cc <HAL_DMA_Abort+0x5e0>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d06d      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a4c      	ldr	r2, [pc, #304]	@ (80019d0 <HAL_DMA_Abort+0x5e4>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d068      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a4a      	ldr	r2, [pc, #296]	@ (80019d4 <HAL_DMA_Abort+0x5e8>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d063      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a49      	ldr	r2, [pc, #292]	@ (80019d8 <HAL_DMA_Abort+0x5ec>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d05e      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a47      	ldr	r2, [pc, #284]	@ (80019dc <HAL_DMA_Abort+0x5f0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d059      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a46      	ldr	r2, [pc, #280]	@ (80019e0 <HAL_DMA_Abort+0x5f4>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d054      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a44      	ldr	r2, [pc, #272]	@ (80019e4 <HAL_DMA_Abort+0x5f8>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d04f      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a43      	ldr	r2, [pc, #268]	@ (80019e8 <HAL_DMA_Abort+0x5fc>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d04a      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a41      	ldr	r2, [pc, #260]	@ (80019ec <HAL_DMA_Abort+0x600>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d045      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a40      	ldr	r2, [pc, #256]	@ (80019f0 <HAL_DMA_Abort+0x604>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d040      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a3e      	ldr	r2, [pc, #248]	@ (80019f4 <HAL_DMA_Abort+0x608>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d03b      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a3d      	ldr	r2, [pc, #244]	@ (80019f8 <HAL_DMA_Abort+0x60c>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d036      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a3b      	ldr	r2, [pc, #236]	@ (80019fc <HAL_DMA_Abort+0x610>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d031      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a3a      	ldr	r2, [pc, #232]	@ (8001a00 <HAL_DMA_Abort+0x614>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d02c      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a38      	ldr	r2, [pc, #224]	@ (8001a04 <HAL_DMA_Abort+0x618>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d027      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a37      	ldr	r2, [pc, #220]	@ (8001a08 <HAL_DMA_Abort+0x61c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d022      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a35      	ldr	r2, [pc, #212]	@ (8001a0c <HAL_DMA_Abort+0x620>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d01d      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a34      	ldr	r2, [pc, #208]	@ (8001a10 <HAL_DMA_Abort+0x624>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d018      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a32      	ldr	r2, [pc, #200]	@ (8001a14 <HAL_DMA_Abort+0x628>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d013      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a31      	ldr	r2, [pc, #196]	@ (8001a18 <HAL_DMA_Abort+0x62c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d00e      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a2f      	ldr	r2, [pc, #188]	@ (8001a1c <HAL_DMA_Abort+0x630>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d009      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a2e      	ldr	r2, [pc, #184]	@ (8001a20 <HAL_DMA_Abort+0x634>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d004      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a2c      	ldr	r2, [pc, #176]	@ (8001a24 <HAL_DMA_Abort+0x638>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d101      	bne.n	800197a <HAL_DMA_Abort+0x58e>
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <HAL_DMA_Abort+0x590>
 800197a:	2300      	movs	r3, #0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d015      	beq.n	80019ac <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001988:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00c      	beq.n	80019ac <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800199c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019a0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80019aa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40020010 	.word	0x40020010
 80019cc:	40020028 	.word	0x40020028
 80019d0:	40020040 	.word	0x40020040
 80019d4:	40020058 	.word	0x40020058
 80019d8:	40020070 	.word	0x40020070
 80019dc:	40020088 	.word	0x40020088
 80019e0:	400200a0 	.word	0x400200a0
 80019e4:	400200b8 	.word	0x400200b8
 80019e8:	40020410 	.word	0x40020410
 80019ec:	40020428 	.word	0x40020428
 80019f0:	40020440 	.word	0x40020440
 80019f4:	40020458 	.word	0x40020458
 80019f8:	40020470 	.word	0x40020470
 80019fc:	40020488 	.word	0x40020488
 8001a00:	400204a0 	.word	0x400204a0
 8001a04:	400204b8 	.word	0x400204b8
 8001a08:	58025408 	.word	0x58025408
 8001a0c:	5802541c 	.word	0x5802541c
 8001a10:	58025430 	.word	0x58025430
 8001a14:	58025444 	.word	0x58025444
 8001a18:	58025458 	.word	0x58025458
 8001a1c:	5802546c 	.word	0x5802546c
 8001a20:	58025480 	.word	0x58025480
 8001a24:	58025494 	.word	0x58025494

08001a28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e237      	b.n	8001eaa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d004      	beq.n	8001a50 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2280      	movs	r2, #128	@ 0x80
 8001a4a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e22c      	b.n	8001eaa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a5c      	ldr	r2, [pc, #368]	@ (8001bc8 <HAL_DMA_Abort_IT+0x1a0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d04a      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a5b      	ldr	r2, [pc, #364]	@ (8001bcc <HAL_DMA_Abort_IT+0x1a4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d045      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a59      	ldr	r2, [pc, #356]	@ (8001bd0 <HAL_DMA_Abort_IT+0x1a8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d040      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a58      	ldr	r2, [pc, #352]	@ (8001bd4 <HAL_DMA_Abort_IT+0x1ac>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d03b      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a56      	ldr	r2, [pc, #344]	@ (8001bd8 <HAL_DMA_Abort_IT+0x1b0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d036      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a55      	ldr	r2, [pc, #340]	@ (8001bdc <HAL_DMA_Abort_IT+0x1b4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d031      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a53      	ldr	r2, [pc, #332]	@ (8001be0 <HAL_DMA_Abort_IT+0x1b8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d02c      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a52      	ldr	r2, [pc, #328]	@ (8001be4 <HAL_DMA_Abort_IT+0x1bc>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d027      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a50      	ldr	r2, [pc, #320]	@ (8001be8 <HAL_DMA_Abort_IT+0x1c0>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d022      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a4f      	ldr	r2, [pc, #316]	@ (8001bec <HAL_DMA_Abort_IT+0x1c4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d01d      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a4d      	ldr	r2, [pc, #308]	@ (8001bf0 <HAL_DMA_Abort_IT+0x1c8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d018      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a4c      	ldr	r2, [pc, #304]	@ (8001bf4 <HAL_DMA_Abort_IT+0x1cc>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d013      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a4a      	ldr	r2, [pc, #296]	@ (8001bf8 <HAL_DMA_Abort_IT+0x1d0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d00e      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a49      	ldr	r2, [pc, #292]	@ (8001bfc <HAL_DMA_Abort_IT+0x1d4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d009      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a47      	ldr	r2, [pc, #284]	@ (8001c00 <HAL_DMA_Abort_IT+0x1d8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d004      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a46      	ldr	r2, [pc, #280]	@ (8001c04 <HAL_DMA_Abort_IT+0x1dc>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d101      	bne.n	8001af4 <HAL_DMA_Abort_IT+0xcc>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <HAL_DMA_Abort_IT+0xce>
 8001af4:	2300      	movs	r3, #0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 8086 	beq.w	8001c08 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2204      	movs	r2, #4
 8001b00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a2f      	ldr	r2, [pc, #188]	@ (8001bc8 <HAL_DMA_Abort_IT+0x1a0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d04a      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a2e      	ldr	r2, [pc, #184]	@ (8001bcc <HAL_DMA_Abort_IT+0x1a4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d045      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a2c      	ldr	r2, [pc, #176]	@ (8001bd0 <HAL_DMA_Abort_IT+0x1a8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d040      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a2b      	ldr	r2, [pc, #172]	@ (8001bd4 <HAL_DMA_Abort_IT+0x1ac>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d03b      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a29      	ldr	r2, [pc, #164]	@ (8001bd8 <HAL_DMA_Abort_IT+0x1b0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d036      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a28      	ldr	r2, [pc, #160]	@ (8001bdc <HAL_DMA_Abort_IT+0x1b4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d031      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a26      	ldr	r2, [pc, #152]	@ (8001be0 <HAL_DMA_Abort_IT+0x1b8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d02c      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a25      	ldr	r2, [pc, #148]	@ (8001be4 <HAL_DMA_Abort_IT+0x1bc>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d027      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a23      	ldr	r2, [pc, #140]	@ (8001be8 <HAL_DMA_Abort_IT+0x1c0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d022      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a22      	ldr	r2, [pc, #136]	@ (8001bec <HAL_DMA_Abort_IT+0x1c4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d01d      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a20      	ldr	r2, [pc, #128]	@ (8001bf0 <HAL_DMA_Abort_IT+0x1c8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d018      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a1f      	ldr	r2, [pc, #124]	@ (8001bf4 <HAL_DMA_Abort_IT+0x1cc>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d013      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a1d      	ldr	r2, [pc, #116]	@ (8001bf8 <HAL_DMA_Abort_IT+0x1d0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00e      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bfc <HAL_DMA_Abort_IT+0x1d4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d009      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a1a      	ldr	r2, [pc, #104]	@ (8001c00 <HAL_DMA_Abort_IT+0x1d8>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d004      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a19      	ldr	r2, [pc, #100]	@ (8001c04 <HAL_DMA_Abort_IT+0x1dc>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d108      	bne.n	8001bb6 <HAL_DMA_Abort_IT+0x18e>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0201 	bic.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	e178      	b.n	8001ea8 <HAL_DMA_Abort_IT+0x480>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0201 	bic.w	r2, r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	e16f      	b.n	8001ea8 <HAL_DMA_Abort_IT+0x480>
 8001bc8:	40020010 	.word	0x40020010
 8001bcc:	40020028 	.word	0x40020028
 8001bd0:	40020040 	.word	0x40020040
 8001bd4:	40020058 	.word	0x40020058
 8001bd8:	40020070 	.word	0x40020070
 8001bdc:	40020088 	.word	0x40020088
 8001be0:	400200a0 	.word	0x400200a0
 8001be4:	400200b8 	.word	0x400200b8
 8001be8:	40020410 	.word	0x40020410
 8001bec:	40020428 	.word	0x40020428
 8001bf0:	40020440 	.word	0x40020440
 8001bf4:	40020458 	.word	0x40020458
 8001bf8:	40020470 	.word	0x40020470
 8001bfc:	40020488 	.word	0x40020488
 8001c00:	400204a0 	.word	0x400204a0
 8001c04:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 020e 	bic.w	r2, r2, #14
 8001c16:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a6c      	ldr	r2, [pc, #432]	@ (8001dd0 <HAL_DMA_Abort_IT+0x3a8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d04a      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a6b      	ldr	r2, [pc, #428]	@ (8001dd4 <HAL_DMA_Abort_IT+0x3ac>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d045      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a69      	ldr	r2, [pc, #420]	@ (8001dd8 <HAL_DMA_Abort_IT+0x3b0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d040      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a68      	ldr	r2, [pc, #416]	@ (8001ddc <HAL_DMA_Abort_IT+0x3b4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d03b      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a66      	ldr	r2, [pc, #408]	@ (8001de0 <HAL_DMA_Abort_IT+0x3b8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d036      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a65      	ldr	r2, [pc, #404]	@ (8001de4 <HAL_DMA_Abort_IT+0x3bc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d031      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a63      	ldr	r2, [pc, #396]	@ (8001de8 <HAL_DMA_Abort_IT+0x3c0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d02c      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a62      	ldr	r2, [pc, #392]	@ (8001dec <HAL_DMA_Abort_IT+0x3c4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d027      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a60      	ldr	r2, [pc, #384]	@ (8001df0 <HAL_DMA_Abort_IT+0x3c8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d022      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a5f      	ldr	r2, [pc, #380]	@ (8001df4 <HAL_DMA_Abort_IT+0x3cc>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d01d      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a5d      	ldr	r2, [pc, #372]	@ (8001df8 <HAL_DMA_Abort_IT+0x3d0>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d018      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a5c      	ldr	r2, [pc, #368]	@ (8001dfc <HAL_DMA_Abort_IT+0x3d4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d013      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a5a      	ldr	r2, [pc, #360]	@ (8001e00 <HAL_DMA_Abort_IT+0x3d8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d00e      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a59      	ldr	r2, [pc, #356]	@ (8001e04 <HAL_DMA_Abort_IT+0x3dc>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d009      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a57      	ldr	r2, [pc, #348]	@ (8001e08 <HAL_DMA_Abort_IT+0x3e0>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d004      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a56      	ldr	r2, [pc, #344]	@ (8001e0c <HAL_DMA_Abort_IT+0x3e4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d108      	bne.n	8001cca <HAL_DMA_Abort_IT+0x2a2>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0201 	bic.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	e007      	b.n	8001cda <HAL_DMA_Abort_IT+0x2b2>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0201 	bic.w	r2, r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a3c      	ldr	r2, [pc, #240]	@ (8001dd0 <HAL_DMA_Abort_IT+0x3a8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d072      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a3a      	ldr	r2, [pc, #232]	@ (8001dd4 <HAL_DMA_Abort_IT+0x3ac>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d06d      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a39      	ldr	r2, [pc, #228]	@ (8001dd8 <HAL_DMA_Abort_IT+0x3b0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d068      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a37      	ldr	r2, [pc, #220]	@ (8001ddc <HAL_DMA_Abort_IT+0x3b4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d063      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a36      	ldr	r2, [pc, #216]	@ (8001de0 <HAL_DMA_Abort_IT+0x3b8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d05e      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a34      	ldr	r2, [pc, #208]	@ (8001de4 <HAL_DMA_Abort_IT+0x3bc>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d059      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a33      	ldr	r2, [pc, #204]	@ (8001de8 <HAL_DMA_Abort_IT+0x3c0>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d054      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a31      	ldr	r2, [pc, #196]	@ (8001dec <HAL_DMA_Abort_IT+0x3c4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d04f      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a30      	ldr	r2, [pc, #192]	@ (8001df0 <HAL_DMA_Abort_IT+0x3c8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d04a      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a2e      	ldr	r2, [pc, #184]	@ (8001df4 <HAL_DMA_Abort_IT+0x3cc>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d045      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a2d      	ldr	r2, [pc, #180]	@ (8001df8 <HAL_DMA_Abort_IT+0x3d0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d040      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a2b      	ldr	r2, [pc, #172]	@ (8001dfc <HAL_DMA_Abort_IT+0x3d4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d03b      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a2a      	ldr	r2, [pc, #168]	@ (8001e00 <HAL_DMA_Abort_IT+0x3d8>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d036      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a28      	ldr	r2, [pc, #160]	@ (8001e04 <HAL_DMA_Abort_IT+0x3dc>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d031      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a27      	ldr	r2, [pc, #156]	@ (8001e08 <HAL_DMA_Abort_IT+0x3e0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d02c      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a25      	ldr	r2, [pc, #148]	@ (8001e0c <HAL_DMA_Abort_IT+0x3e4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d027      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a24      	ldr	r2, [pc, #144]	@ (8001e10 <HAL_DMA_Abort_IT+0x3e8>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d022      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a22      	ldr	r2, [pc, #136]	@ (8001e14 <HAL_DMA_Abort_IT+0x3ec>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d01d      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a21      	ldr	r2, [pc, #132]	@ (8001e18 <HAL_DMA_Abort_IT+0x3f0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d018      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8001e1c <HAL_DMA_Abort_IT+0x3f4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d013      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e20 <HAL_DMA_Abort_IT+0x3f8>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d00e      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1c      	ldr	r2, [pc, #112]	@ (8001e24 <HAL_DMA_Abort_IT+0x3fc>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d009      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a1b      	ldr	r2, [pc, #108]	@ (8001e28 <HAL_DMA_Abort_IT+0x400>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d004      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a19      	ldr	r2, [pc, #100]	@ (8001e2c <HAL_DMA_Abort_IT+0x404>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d132      	bne.n	8001e30 <HAL_DMA_Abort_IT+0x408>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e031      	b.n	8001e32 <HAL_DMA_Abort_IT+0x40a>
 8001dce:	bf00      	nop
 8001dd0:	40020010 	.word	0x40020010
 8001dd4:	40020028 	.word	0x40020028
 8001dd8:	40020040 	.word	0x40020040
 8001ddc:	40020058 	.word	0x40020058
 8001de0:	40020070 	.word	0x40020070
 8001de4:	40020088 	.word	0x40020088
 8001de8:	400200a0 	.word	0x400200a0
 8001dec:	400200b8 	.word	0x400200b8
 8001df0:	40020410 	.word	0x40020410
 8001df4:	40020428 	.word	0x40020428
 8001df8:	40020440 	.word	0x40020440
 8001dfc:	40020458 	.word	0x40020458
 8001e00:	40020470 	.word	0x40020470
 8001e04:	40020488 	.word	0x40020488
 8001e08:	400204a0 	.word	0x400204a0
 8001e0c:	400204b8 	.word	0x400204b8
 8001e10:	58025408 	.word	0x58025408
 8001e14:	5802541c 	.word	0x5802541c
 8001e18:	58025430 	.word	0x58025430
 8001e1c:	58025444 	.word	0x58025444
 8001e20:	58025458 	.word	0x58025458
 8001e24:	5802546c 	.word	0x5802546c
 8001e28:	58025480 	.word	0x58025480
 8001e2c:	58025494 	.word	0x58025494
 8001e30:	2300      	movs	r3, #0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d028      	beq.n	8001e88 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e44:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	2201      	movs	r2, #1
 8001e56:	409a      	lsls	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e64:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00c      	beq.n	8001e88 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e7c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001e86:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop

08001eb4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e0e3      	b.n	800208e <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d106      	bne.n	8001ede <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2223      	movs	r2, #35	@ 0x23
 8001ed4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7fe fbc1 	bl	8000660 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ede:	4b6e      	ldr	r3, [pc, #440]	@ (8002098 <HAL_ETH_Init+0x1e4>)
 8001ee0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ee4:	4a6c      	ldr	r2, [pc, #432]	@ (8002098 <HAL_ETH_Init+0x1e4>)
 8001ee6:	f043 0302 	orr.w	r3, r3, #2
 8001eea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001eee:	4b6a      	ldr	r3, [pc, #424]	@ (8002098 <HAL_ETH_Init+0x1e4>)
 8001ef0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	7a1b      	ldrb	r3, [r3, #8]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d103      	bne.n	8001f0c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001f04:	2000      	movs	r0, #0
 8001f06:	f7ff f94d 	bl	80011a4 <HAL_SYSCFG_ETHInterfaceSelect>
 8001f0a:	e003      	b.n	8001f14 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001f0c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001f10:	f7ff f948 	bl	80011a4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001f14:	4b61      	ldr	r3, [pc, #388]	@ (800209c <HAL_ETH_Init+0x1e8>)
 8001f16:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f2e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f30:	f7ff f8fc 	bl	800112c <HAL_GetTick>
 8001f34:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001f36:	e011      	b.n	8001f5c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001f38:	f7ff f8f8 	bl	800112c <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001f46:	d909      	bls.n	8001f5c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2204      	movs	r2, #4
 8001f4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	22e0      	movs	r2, #224	@ 0xe0
 8001f54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e098      	b.n	800208e <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1e4      	bne.n	8001f38 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f89e 	bl	80020b0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001f74:	f001 feba 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4a49      	ldr	r2, [pc, #292]	@ (80020a0 <HAL_ETH_Init+0x1ec>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	0c9a      	lsrs	r2, r3, #18
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	3a01      	subs	r2, #1
 8001f88:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 fa81 	bl	8002494 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f9a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001f9e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001faa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fae:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d009      	beq.n	8001fd2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	22e0      	movs	r2, #224	@ 0xe0
 8001fca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e05d      	b.n	800208e <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fda:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001fde:	4b31      	ldr	r3, [pc, #196]	@ (80020a4 <HAL_ETH_Init+0x1f0>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6952      	ldr	r2, [r2, #20]
 8001fe6:	0051      	lsls	r1, r2, #1
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	430b      	orrs	r3, r1
 8001fee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ff2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 fae9 	bl	80025ce <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 fb2f 	bl	8002660 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	3305      	adds	r3, #5
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	021a      	lsls	r2, r3, #8
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	3304      	adds	r3, #4
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	4619      	mov	r1, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	3303      	adds	r3, #3
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	061a      	lsls	r2, r3, #24
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	3302      	adds	r3, #2
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	041b      	lsls	r3, r3, #16
 8002034:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	3301      	adds	r3, #1
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002040:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800204e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002050:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b11      	ldr	r3, [pc, #68]	@ (80020a8 <HAL_ETH_Init+0x1f4>)
 8002062:	430b      	orrs	r3, r1
 8002064:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b0d      	ldr	r3, [pc, #52]	@ (80020ac <HAL_ETH_Init+0x1f8>)
 8002076:	430b      	orrs	r3, r1
 8002078:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2210      	movs	r2, #16
 8002088:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	58024400 	.word	0x58024400
 800209c:	58000400 	.word	0x58000400
 80020a0:	431bde83 	.word	0x431bde83
 80020a4:	ffff8001 	.word	0xffff8001
 80020a8:	0c020060 	.word	0x0c020060
 80020ac:	0c20c000 	.word	0x0c20c000

080020b0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020c0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020c8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80020ca:	f001 fe0f 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 80020ce:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	4a1a      	ldr	r2, [pc, #104]	@ (800213c <HAL_ETH_SetMDIOClockRange+0x8c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d804      	bhi.n	80020e2 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	e022      	b.n	8002128 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	4a16      	ldr	r2, [pc, #88]	@ (8002140 <HAL_ETH_SetMDIOClockRange+0x90>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d204      	bcs.n	80020f4 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	e019      	b.n	8002128 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4a13      	ldr	r2, [pc, #76]	@ (8002144 <HAL_ETH_SetMDIOClockRange+0x94>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d915      	bls.n	8002128 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4a12      	ldr	r2, [pc, #72]	@ (8002148 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d804      	bhi.n	800210e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	e00c      	b.n	8002128 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	4a0e      	ldr	r2, [pc, #56]	@ (800214c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d804      	bhi.n	8002120 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	e003      	b.n	8002128 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002126:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	02160ebf 	.word	0x02160ebf
 8002140:	03938700 	.word	0x03938700
 8002144:	05f5e0ff 	.word	0x05f5e0ff
 8002148:	08f0d17f 	.word	0x08f0d17f
 800214c:	0ee6b27f 	.word	0x0ee6b27f

08002150 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002162:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	791b      	ldrb	r3, [r3, #4]
 8002168:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800216a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	7b1b      	ldrb	r3, [r3, #12]
 8002170:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002172:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	7b5b      	ldrb	r3, [r3, #13]
 8002178:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800217a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	7b9b      	ldrb	r3, [r3, #14]
 8002180:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002182:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	7bdb      	ldrb	r3, [r3, #15]
 8002188:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800218a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	7c12      	ldrb	r2, [r2, #16]
 8002190:	2a00      	cmp	r2, #0
 8002192:	d102      	bne.n	800219a <ETH_SetMACConfig+0x4a>
 8002194:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002198:	e000      	b.n	800219c <ETH_SetMACConfig+0x4c>
 800219a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800219c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	7c52      	ldrb	r2, [r2, #17]
 80021a2:	2a00      	cmp	r2, #0
 80021a4:	d102      	bne.n	80021ac <ETH_SetMACConfig+0x5c>
 80021a6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021aa:	e000      	b.n	80021ae <ETH_SetMACConfig+0x5e>
 80021ac:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80021ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	7c9b      	ldrb	r3, [r3, #18]
 80021b4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80021b6:	431a      	orrs	r2, r3
               macconf->Speed |
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80021bc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80021c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	7f1b      	ldrb	r3, [r3, #28]
 80021c8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80021ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	7f5b      	ldrb	r3, [r3, #29]
 80021d0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80021d2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	7f92      	ldrb	r2, [r2, #30]
 80021d8:	2a00      	cmp	r2, #0
 80021da:	d102      	bne.n	80021e2 <ETH_SetMACConfig+0x92>
 80021dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021e0:	e000      	b.n	80021e4 <ETH_SetMACConfig+0x94>
 80021e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80021e4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	7fdb      	ldrb	r3, [r3, #31]
 80021ea:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80021ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80021f4:	2a00      	cmp	r2, #0
 80021f6:	d102      	bne.n	80021fe <ETH_SetMACConfig+0xae>
 80021f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021fc:	e000      	b.n	8002200 <ETH_SetMACConfig+0xb0>
 80021fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002200:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002206:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800220e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002210:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b56      	ldr	r3, [pc, #344]	@ (800237c <ETH_SetMACConfig+0x22c>)
 8002222:	4013      	ands	r3, r2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	68f9      	ldr	r1, [r7, #12]
 800222a:	430b      	orrs	r3, r1
 800222c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002232:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800223a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800223c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002244:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002246:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800224e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002250:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002258:	2a00      	cmp	r2, #0
 800225a:	d102      	bne.n	8002262 <ETH_SetMACConfig+0x112>
 800225c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002260:	e000      	b.n	8002264 <ETH_SetMACConfig+0x114>
 8002262:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002264:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800226a:	4313      	orrs	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	4b42      	ldr	r3, [pc, #264]	@ (8002380 <ETH_SetMACConfig+0x230>)
 8002276:	4013      	ands	r3, r2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	68f9      	ldr	r1, [r7, #12]
 800227e:	430b      	orrs	r3, r1
 8002280:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002288:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800228e:	4313      	orrs	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	4b3a      	ldr	r3, [pc, #232]	@ (8002384 <ETH_SetMACConfig+0x234>)
 800229a:	4013      	ands	r3, r2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	68f9      	ldr	r1, [r7, #12]
 80022a2:	430b      	orrs	r3, r1
 80022a4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80022ac:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80022b2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80022ba:	2a00      	cmp	r2, #0
 80022bc:	d101      	bne.n	80022c2 <ETH_SetMACConfig+0x172>
 80022be:	2280      	movs	r2, #128	@ 0x80
 80022c0:	e000      	b.n	80022c4 <ETH_SetMACConfig+0x174>
 80022c2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80022c4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ca:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80022d6:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80022da:	4013      	ands	r3, r2
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	68f9      	ldr	r1, [r7, #12]
 80022e2:	430b      	orrs	r3, r1
 80022e4:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80022ec:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80022f4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80022f6:	4313      	orrs	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002302:	f023 0103 	bic.w	r1, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	430a      	orrs	r2, r1
 800230e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800231a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002336:	2a00      	cmp	r2, #0
 8002338:	d101      	bne.n	800233e <ETH_SetMACConfig+0x1ee>
 800233a:	2240      	movs	r2, #64	@ 0x40
 800233c:	e000      	b.n	8002340 <ETH_SetMACConfig+0x1f0>
 800233e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002340:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002348:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800234a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002352:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002354:	4313      	orrs	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002360:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	430a      	orrs	r2, r1
 800236c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	00048083 	.word	0x00048083
 8002380:	c0f88000 	.word	0xc0f88000
 8002384:	fffffef0 	.word	0xfffffef0

08002388 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b38      	ldr	r3, [pc, #224]	@ (8002480 <ETH_SetDMAConfig+0xf8>)
 800239e:	4013      	ands	r3, r2
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	6811      	ldr	r1, [r2, #0]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	430b      	orrs	r3, r1
 80023aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023ae:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	791b      	ldrb	r3, [r3, #4]
 80023b4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80023ba:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	7b1b      	ldrb	r3, [r3, #12]
 80023c0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002484 <ETH_SetDMAConfig+0xfc>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	68f9      	ldr	r1, [r7, #12]
 80023da:	430b      	orrs	r3, r1
 80023dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023e0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	7b5b      	ldrb	r3, [r3, #13]
 80023e6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023f8:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80023fc:	4b22      	ldr	r3, [pc, #136]	@ (8002488 <ETH_SetDMAConfig+0x100>)
 80023fe:	4013      	ands	r3, r2
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	68f9      	ldr	r1, [r7, #12]
 8002406:	430b      	orrs	r3, r1
 8002408:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800240c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	7d1b      	ldrb	r3, [r3, #20]
 8002418:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800241a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	7f5b      	ldrb	r3, [r3, #29]
 8002420:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002422:	4313      	orrs	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800242e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8002432:	4b16      	ldr	r3, [pc, #88]	@ (800248c <ETH_SetDMAConfig+0x104>)
 8002434:	4013      	ands	r3, r2
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	68f9      	ldr	r1, [r7, #12]
 800243c:	430b      	orrs	r3, r1
 800243e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002442:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	7f1b      	ldrb	r3, [r3, #28]
 800244a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002450:	4313      	orrs	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800245c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002460:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <ETH_SetDMAConfig+0x108>)
 8002462:	4013      	ands	r3, r2
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	68f9      	ldr	r1, [r7, #12]
 800246a:	430b      	orrs	r3, r1
 800246c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002470:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002474:	bf00      	nop
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	ffff87fd 	.word	0xffff87fd
 8002484:	ffff2ffe 	.word	0xffff2ffe
 8002488:	fffec000 	.word	0xfffec000
 800248c:	ffc0efef 	.word	0xffc0efef
 8002490:	7fc0ffff 	.word	0x7fc0ffff

08002494 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b0a4      	sub	sp, #144	@ 0x90
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800249c:	2301      	movs	r3, #1
 800249e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80024a2:	2300      	movs	r3, #0
 80024a4:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80024b2:	2301      	movs	r3, #1
 80024b4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80024b8:	2301      	movs	r3, #1
 80024ba:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80024be:	2301      	movs	r3, #1
 80024c0:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80024ca:	2301      	movs	r3, #1
 80024cc:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80024d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024d4:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80024e6:	2300      	movs	r3, #0
 80024e8:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80024ec:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80024f0:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80024f8:	2300      	movs	r3, #0
 80024fa:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80024fc:	2301      	movs	r3, #1
 80024fe:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800250e:	2300      	movs	r3, #0
 8002510:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002512:	2300      	movs	r3, #0
 8002514:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002516:	2300      	movs	r3, #0
 8002518:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800251a:	2300      	movs	r3, #0
 800251c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002520:	2300      	movs	r3, #0
 8002522:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002526:	2301      	movs	r3, #1
 8002528:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800252c:	2320      	movs	r3, #32
 800252e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002532:	2301      	movs	r3, #1
 8002534:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002538:	2300      	movs	r3, #0
 800253a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800253e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002544:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002548:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800254a:	2300      	movs	r3, #0
 800254c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002550:	2302      	movs	r3, #2
 8002552:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002556:	2300      	movs	r3, #0
 8002558:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800255c:	2300      	movs	r3, #0
 800255e:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002562:	2300      	movs	r3, #0
 8002564:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002568:	2301      	movs	r3, #1
 800256a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800256e:	2300      	movs	r3, #0
 8002570:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002572:	2301      	movs	r3, #1
 8002574:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002578:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800257c:	4619      	mov	r1, r3
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff fde6 	bl	8002150 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002584:	2301      	movs	r3, #1
 8002586:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002588:	2301      	movs	r3, #1
 800258a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800258c:	2300      	movs	r3, #0
 800258e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002590:	2300      	movs	r3, #0
 8002592:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002596:	2300      	movs	r3, #0
 8002598:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800259e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80025a2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80025a4:	2300      	movs	r3, #0
 80025a6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025a8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80025ac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80025b4:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80025b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80025ba:	f107 0308 	add.w	r3, r7, #8
 80025be:	4619      	mov	r1, r3
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff fee1 	bl	8002388 <ETH_SetDMAConfig>
}
 80025c6:	bf00      	nop
 80025c8:	3790      	adds	r7, #144	@ 0x90
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b085      	sub	sp, #20
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	e01d      	b.n	8002618 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68d9      	ldr	r1, [r3, #12]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4613      	mov	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4413      	add	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	440b      	add	r3, r1
 80025ec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2200      	movs	r2, #0
 80025f8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2200      	movs	r2, #0
 8002604:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002606:	68b9      	ldr	r1, [r7, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	3206      	adds	r2, #6
 800260e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	3301      	adds	r3, #1
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b03      	cmp	r3, #3
 800261c:	d9de      	bls.n	80025dc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800262c:	461a      	mov	r2, r3
 800262e:	2303      	movs	r3, #3
 8002630:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002640:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002650:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002654:	bf00      	nop
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	e023      	b.n	80026b6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6919      	ldr	r1, [r3, #16]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	4613      	mov	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4413      	add	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	440b      	add	r3, r1
 800267e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2200      	movs	r2, #0
 800268a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2200      	movs	r2, #0
 8002696:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2200      	movs	r2, #0
 800269c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2200      	movs	r2, #0
 80026a2:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	3212      	adds	r2, #18
 80026ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	3301      	adds	r3, #1
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d9d8      	bls.n	800266e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026e2:	461a      	mov	r2, r3
 80026e4:	2303      	movs	r3, #3
 80026e6:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026f6:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800270a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800270e:	bf00      	nop
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800271c:	b480      	push	{r7}
 800271e:	b089      	sub	sp, #36	@ 0x24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800272a:	4b89      	ldr	r3, [pc, #548]	@ (8002950 <HAL_GPIO_Init+0x234>)
 800272c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800272e:	e194      	b.n	8002a5a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	2101      	movs	r1, #1
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	fa01 f303 	lsl.w	r3, r1, r3
 800273c:	4013      	ands	r3, r2
 800273e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 8186 	beq.w	8002a54 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	2b01      	cmp	r3, #1
 8002752:	d005      	beq.n	8002760 <HAL_GPIO_Init+0x44>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d130      	bne.n	80027c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	2203      	movs	r2, #3
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002796:	2201      	movs	r2, #1
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	f003 0201 	and.w	r2, r3, #1
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d017      	beq.n	80027fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	2203      	movs	r2, #3
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d123      	bne.n	8002852 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	08da      	lsrs	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3208      	adds	r2, #8
 8002812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	220f      	movs	r2, #15
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	691a      	ldr	r2, [r3, #16]
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	08da      	lsrs	r2, r3, #3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3208      	adds	r2, #8
 800284c:	69b9      	ldr	r1, [r7, #24]
 800284e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	2203      	movs	r2, #3
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 0203 	and.w	r2, r3, #3
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 80e0 	beq.w	8002a54 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002894:	4b2f      	ldr	r3, [pc, #188]	@ (8002954 <HAL_GPIO_Init+0x238>)
 8002896:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800289a:	4a2e      	ldr	r2, [pc, #184]	@ (8002954 <HAL_GPIO_Init+0x238>)
 800289c:	f043 0302 	orr.w	r3, r3, #2
 80028a0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80028a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002954 <HAL_GPIO_Init+0x238>)
 80028a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028b2:	4a29      	ldr	r2, [pc, #164]	@ (8002958 <HAL_GPIO_Init+0x23c>)
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	089b      	lsrs	r3, r3, #2
 80028b8:	3302      	adds	r3, #2
 80028ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	220f      	movs	r2, #15
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43db      	mvns	r3, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4013      	ands	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a20      	ldr	r2, [pc, #128]	@ (800295c <HAL_GPIO_Init+0x240>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d052      	beq.n	8002984 <HAL_GPIO_Init+0x268>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002960 <HAL_GPIO_Init+0x244>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d031      	beq.n	800294a <HAL_GPIO_Init+0x22e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a1e      	ldr	r2, [pc, #120]	@ (8002964 <HAL_GPIO_Init+0x248>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d02b      	beq.n	8002946 <HAL_GPIO_Init+0x22a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002968 <HAL_GPIO_Init+0x24c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d025      	beq.n	8002942 <HAL_GPIO_Init+0x226>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a1c      	ldr	r2, [pc, #112]	@ (800296c <HAL_GPIO_Init+0x250>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d01f      	beq.n	800293e <HAL_GPIO_Init+0x222>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a1b      	ldr	r2, [pc, #108]	@ (8002970 <HAL_GPIO_Init+0x254>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d019      	beq.n	800293a <HAL_GPIO_Init+0x21e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a1a      	ldr	r2, [pc, #104]	@ (8002974 <HAL_GPIO_Init+0x258>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d013      	beq.n	8002936 <HAL_GPIO_Init+0x21a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a19      	ldr	r2, [pc, #100]	@ (8002978 <HAL_GPIO_Init+0x25c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00d      	beq.n	8002932 <HAL_GPIO_Init+0x216>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a18      	ldr	r2, [pc, #96]	@ (800297c <HAL_GPIO_Init+0x260>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d007      	beq.n	800292e <HAL_GPIO_Init+0x212>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a17      	ldr	r2, [pc, #92]	@ (8002980 <HAL_GPIO_Init+0x264>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d101      	bne.n	800292a <HAL_GPIO_Init+0x20e>
 8002926:	2309      	movs	r3, #9
 8002928:	e02d      	b.n	8002986 <HAL_GPIO_Init+0x26a>
 800292a:	230a      	movs	r3, #10
 800292c:	e02b      	b.n	8002986 <HAL_GPIO_Init+0x26a>
 800292e:	2308      	movs	r3, #8
 8002930:	e029      	b.n	8002986 <HAL_GPIO_Init+0x26a>
 8002932:	2307      	movs	r3, #7
 8002934:	e027      	b.n	8002986 <HAL_GPIO_Init+0x26a>
 8002936:	2306      	movs	r3, #6
 8002938:	e025      	b.n	8002986 <HAL_GPIO_Init+0x26a>
 800293a:	2305      	movs	r3, #5
 800293c:	e023      	b.n	8002986 <HAL_GPIO_Init+0x26a>
 800293e:	2304      	movs	r3, #4
 8002940:	e021      	b.n	8002986 <HAL_GPIO_Init+0x26a>
 8002942:	2303      	movs	r3, #3
 8002944:	e01f      	b.n	8002986 <HAL_GPIO_Init+0x26a>
 8002946:	2302      	movs	r3, #2
 8002948:	e01d      	b.n	8002986 <HAL_GPIO_Init+0x26a>
 800294a:	2301      	movs	r3, #1
 800294c:	e01b      	b.n	8002986 <HAL_GPIO_Init+0x26a>
 800294e:	bf00      	nop
 8002950:	58000080 	.word	0x58000080
 8002954:	58024400 	.word	0x58024400
 8002958:	58000400 	.word	0x58000400
 800295c:	58020000 	.word	0x58020000
 8002960:	58020400 	.word	0x58020400
 8002964:	58020800 	.word	0x58020800
 8002968:	58020c00 	.word	0x58020c00
 800296c:	58021000 	.word	0x58021000
 8002970:	58021400 	.word	0x58021400
 8002974:	58021800 	.word	0x58021800
 8002978:	58021c00 	.word	0x58021c00
 800297c:	58022000 	.word	0x58022000
 8002980:	58022400 	.word	0x58022400
 8002984:	2300      	movs	r3, #0
 8002986:	69fa      	ldr	r2, [r7, #28]
 8002988:	f002 0203 	and.w	r2, r2, #3
 800298c:	0092      	lsls	r2, r2, #2
 800298e:	4093      	lsls	r3, r2
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002996:	4938      	ldr	r1, [pc, #224]	@ (8002a78 <HAL_GPIO_Init+0x35c>)
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	089b      	lsrs	r3, r3, #2
 800299c:	3302      	adds	r3, #2
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80029ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80029f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	3301      	adds	r3, #1
 8002a58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f47f ae63 	bne.w	8002730 <HAL_GPIO_Init+0x14>
  }
}
 8002a6a:	bf00      	nop
 8002a6c:	bf00      	nop
 8002a6e:	3724      	adds	r7, #36	@ 0x24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	58000400 	.word	0x58000400

08002a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a8c:	787b      	ldrb	r3, [r7, #1]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002a98:	e003      	b.n	8002aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a9a:	887b      	ldrh	r3, [r7, #2]
 8002a9c:	041a      	lsls	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	619a      	str	r2, [r3, #24]
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b085      	sub	sp, #20
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ac0:	887a      	ldrh	r2, [r7, #2]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	041a      	lsls	r2, r3, #16
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	43d9      	mvns	r1, r3
 8002acc:	887b      	ldrh	r3, [r7, #2]
 8002ace:	400b      	ands	r3, r1
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	619a      	str	r2, [r3, #24]
}
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b086      	sub	sp, #24
 8002ae6:	af02      	add	r7, sp, #8
 8002ae8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0fe      	b.n	8002cf2 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d106      	bne.n	8002b0e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7fe f9e3 	bl	8000ed4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2203      	movs	r2, #3
 8002b12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f005 fdb6 	bl	800868c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6818      	ldr	r0, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	7c1a      	ldrb	r2, [r3, #16]
 8002b28:	f88d 2000 	strb.w	r2, [sp]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b30:	f005 fd3a 	bl	80085a8 <USB_CoreInit>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d005      	beq.n	8002b46 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e0d5      	b.n	8002cf2 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f005 fdae 	bl	80086ae <USB_SetCurrentMode>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0c6      	b.n	8002cf2 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b64:	2300      	movs	r3, #0
 8002b66:	73fb      	strb	r3, [r7, #15]
 8002b68:	e04a      	b.n	8002c00 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b6a:	7bfa      	ldrb	r2, [r7, #15]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4413      	add	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	3315      	adds	r3, #21
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b7e:	7bfa      	ldrb	r2, [r7, #15]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	3314      	adds	r3, #20
 8002b8e:	7bfa      	ldrb	r2, [r7, #15]
 8002b90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b92:	7bfa      	ldrb	r2, [r7, #15]
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	b298      	uxth	r0, r3
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	332e      	adds	r3, #46	@ 0x2e
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002baa:	7bfa      	ldrb	r2, [r7, #15]
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	3318      	adds	r3, #24
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bbe:	7bfa      	ldrb	r2, [r7, #15]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	331c      	adds	r3, #28
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bd2:	7bfa      	ldrb	r2, [r7, #15]
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	3320      	adds	r3, #32
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002be6:	7bfa      	ldrb	r2, [r7, #15]
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4413      	add	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	3324      	adds	r3, #36	@ 0x24
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	791b      	ldrb	r3, [r3, #4]
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d3af      	bcc.n	8002b6a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	73fb      	strb	r3, [r7, #15]
 8002c0e:	e044      	b.n	8002c9a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c10:	7bfa      	ldrb	r2, [r7, #15]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c26:	7bfa      	ldrb	r2, [r7, #15]
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4413      	add	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002c38:	7bfa      	ldrb	r2, [r7, #15]
 8002c3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c3c:	7bfa      	ldrb	r2, [r7, #15]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4413      	add	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002c4e:	2200      	movs	r2, #0
 8002c50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c52:	7bfa      	ldrb	r2, [r7, #15]
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c68:	7bfa      	ldrb	r2, [r7, #15]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c7e:	7bfa      	ldrb	r2, [r7, #15]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	4413      	add	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	3301      	adds	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	791b      	ldrb	r3, [r3, #4]
 8002c9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d3b5      	bcc.n	8002c10 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	7c1a      	ldrb	r2, [r3, #16]
 8002cac:	f88d 2000 	strb.w	r2, [sp]
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cb4:	f005 fd48 	bl	8008748 <USB_DevInit>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e013      	b.n	8002cf2 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	7b1b      	ldrb	r3, [r3, #12]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d102      	bne.n	8002ce6 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f80b 	bl	8002cfc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f005 ff03 	bl	8008af6 <USB_DevDisconnect>

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d2a:	4b05      	ldr	r3, [pc, #20]	@ (8002d40 <HAL_PCDEx_ActivateLPM+0x44>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	10000003 	.word	0x10000003

08002d44 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002d4c:	4b19      	ldr	r3, [pc, #100]	@ (8002db4 <HAL_PWREx_ConfigSupply+0x70>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d00a      	beq.n	8002d6e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002d58:	4b16      	ldr	r3, [pc, #88]	@ (8002db4 <HAL_PWREx_ConfigSupply+0x70>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d001      	beq.n	8002d6a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e01f      	b.n	8002daa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	e01d      	b.n	8002daa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002d6e:	4b11      	ldr	r3, [pc, #68]	@ (8002db4 <HAL_PWREx_ConfigSupply+0x70>)
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f023 0207 	bic.w	r2, r3, #7
 8002d76:	490f      	ldr	r1, [pc, #60]	@ (8002db4 <HAL_PWREx_ConfigSupply+0x70>)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002d7e:	f7fe f9d5 	bl	800112c <HAL_GetTick>
 8002d82:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d84:	e009      	b.n	8002d9a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d86:	f7fe f9d1 	bl	800112c <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d94:	d901      	bls.n	8002d9a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e007      	b.n	8002daa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d9a:	4b06      	ldr	r3, [pc, #24]	@ (8002db4 <HAL_PWREx_ConfigSupply+0x70>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002da6:	d1ee      	bne.n	8002d86 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	58024800 	.word	0x58024800

08002db8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002dbc:	4b05      	ldr	r3, [pc, #20]	@ (8002dd4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	4a04      	ldr	r2, [pc, #16]	@ (8002dd4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002dc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dc6:	60d3      	str	r3, [r2, #12]
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	58024800 	.word	0x58024800

08002dd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08c      	sub	sp, #48	@ 0x30
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d102      	bne.n	8002dec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	f000 bc48 	b.w	800367c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 8088 	beq.w	8002f0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dfa:	4b99      	ldr	r3, [pc, #612]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e04:	4b96      	ldr	r3, [pc, #600]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e08:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e0c:	2b10      	cmp	r3, #16
 8002e0e:	d007      	beq.n	8002e20 <HAL_RCC_OscConfig+0x48>
 8002e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e12:	2b18      	cmp	r3, #24
 8002e14:	d111      	bne.n	8002e3a <HAL_RCC_OscConfig+0x62>
 8002e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d10c      	bne.n	8002e3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e20:	4b8f      	ldr	r3, [pc, #572]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d06d      	beq.n	8002f08 <HAL_RCC_OscConfig+0x130>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d169      	bne.n	8002f08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	f000 bc21 	b.w	800367c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e42:	d106      	bne.n	8002e52 <HAL_RCC_OscConfig+0x7a>
 8002e44:	4b86      	ldr	r3, [pc, #536]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a85      	ldr	r2, [pc, #532]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	e02e      	b.n	8002eb0 <HAL_RCC_OscConfig+0xd8>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10c      	bne.n	8002e74 <HAL_RCC_OscConfig+0x9c>
 8002e5a:	4b81      	ldr	r3, [pc, #516]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a80      	ldr	r2, [pc, #512]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	4b7e      	ldr	r3, [pc, #504]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a7d      	ldr	r2, [pc, #500]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	e01d      	b.n	8002eb0 <HAL_RCC_OscConfig+0xd8>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCC_OscConfig+0xc0>
 8002e7e:	4b78      	ldr	r3, [pc, #480]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a77      	ldr	r2, [pc, #476]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	4b75      	ldr	r3, [pc, #468]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a74      	ldr	r2, [pc, #464]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e00b      	b.n	8002eb0 <HAL_RCC_OscConfig+0xd8>
 8002e98:	4b71      	ldr	r3, [pc, #452]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a70      	ldr	r2, [pc, #448]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ea2:	6013      	str	r3, [r2, #0]
 8002ea4:	4b6e      	ldr	r3, [pc, #440]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a6d      	ldr	r2, [pc, #436]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002eaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d013      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7fe f938 	bl	800112c <HAL_GetTick>
 8002ebc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec0:	f7fe f934 	bl	800112c <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	@ 0x64
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e3d4      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ed2:	4b63      	ldr	r3, [pc, #396]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0xe8>
 8002ede:	e014      	b.n	8002f0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7fe f924 	bl	800112c <HAL_GetTick>
 8002ee4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee8:	f7fe f920 	bl	800112c <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	@ 0x64
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e3c0      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002efa:	4b59      	ldr	r3, [pc, #356]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f0      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x110>
 8002f06:	e000      	b.n	8002f0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80ca 	beq.w	80030ac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f18:	4b51      	ldr	r3, [pc, #324]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f20:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f22:	4b4f      	ldr	r3, [pc, #316]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f26:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d007      	beq.n	8002f3e <HAL_RCC_OscConfig+0x166>
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	2b18      	cmp	r3, #24
 8002f32:	d156      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x20a>
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d151      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f3e:	4b48      	ldr	r3, [pc, #288]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <HAL_RCC_OscConfig+0x17e>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e392      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f56:	4b42      	ldr	r3, [pc, #264]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 0219 	bic.w	r2, r3, #25
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	493f      	ldr	r1, [pc, #252]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7fe f8e0 	bl	800112c <HAL_GetTick>
 8002f6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f70:	f7fe f8dc 	bl	800112c <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e37c      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f82:	4b37      	ldr	r3, [pc, #220]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8e:	f7fe f8fd 	bl	800118c <HAL_GetREVID>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d817      	bhi.n	8002fcc <HAL_RCC_OscConfig+0x1f4>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	2b40      	cmp	r3, #64	@ 0x40
 8002fa2:	d108      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x1de>
 8002fa4:	4b2e      	ldr	r3, [pc, #184]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002fac:	4a2c      	ldr	r2, [pc, #176]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002fae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fb2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fb4:	e07a      	b.n	80030ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb6:	4b2a      	ldr	r3, [pc, #168]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	031b      	lsls	r3, r3, #12
 8002fc4:	4926      	ldr	r1, [pc, #152]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fca:	e06f      	b.n	80030ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fcc:	4b24      	ldr	r3, [pc, #144]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	061b      	lsls	r3, r3, #24
 8002fda:	4921      	ldr	r1, [pc, #132]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fe0:	e064      	b.n	80030ac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d047      	beq.n	800307a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002fea:	4b1d      	ldr	r3, [pc, #116]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 0219 	bic.w	r2, r3, #25
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	491a      	ldr	r1, [pc, #104]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffc:	f7fe f896 	bl	800112c <HAL_GetTick>
 8003000:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003004:	f7fe f892 	bl	800112c <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e332      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003016:	4b12      	ldr	r3, [pc, #72]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f0      	beq.n	8003004 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003022:	f7fe f8b3 	bl	800118c <HAL_GetREVID>
 8003026:	4603      	mov	r3, r0
 8003028:	f241 0203 	movw	r2, #4099	@ 0x1003
 800302c:	4293      	cmp	r3, r2
 800302e:	d819      	bhi.n	8003064 <HAL_RCC_OscConfig+0x28c>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	2b40      	cmp	r3, #64	@ 0x40
 8003036:	d108      	bne.n	800304a <HAL_RCC_OscConfig+0x272>
 8003038:	4b09      	ldr	r3, [pc, #36]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003040:	4a07      	ldr	r2, [pc, #28]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 8003042:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003046:	6053      	str	r3, [r2, #4]
 8003048:	e030      	b.n	80030ac <HAL_RCC_OscConfig+0x2d4>
 800304a:	4b05      	ldr	r3, [pc, #20]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	031b      	lsls	r3, r3, #12
 8003058:	4901      	ldr	r1, [pc, #4]	@ (8003060 <HAL_RCC_OscConfig+0x288>)
 800305a:	4313      	orrs	r3, r2
 800305c:	604b      	str	r3, [r1, #4]
 800305e:	e025      	b.n	80030ac <HAL_RCC_OscConfig+0x2d4>
 8003060:	58024400 	.word	0x58024400
 8003064:	4b9a      	ldr	r3, [pc, #616]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	061b      	lsls	r3, r3, #24
 8003072:	4997      	ldr	r1, [pc, #604]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003074:	4313      	orrs	r3, r2
 8003076:	604b      	str	r3, [r1, #4]
 8003078:	e018      	b.n	80030ac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307a:	4b95      	ldr	r3, [pc, #596]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a94      	ldr	r2, [pc, #592]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003080:	f023 0301 	bic.w	r3, r3, #1
 8003084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003086:	f7fe f851 	bl	800112c <HAL_GetTick>
 800308a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800308e:	f7fe f84d 	bl	800112c <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e2ed      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030a0:	4b8b      	ldr	r3, [pc, #556]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1f0      	bne.n	800308e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80a9 	beq.w	800320c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ba:	4b85      	ldr	r3, [pc, #532]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030c4:	4b82      	ldr	r3, [pc, #520]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80030c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d007      	beq.n	80030e0 <HAL_RCC_OscConfig+0x308>
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	2b18      	cmp	r3, #24
 80030d4:	d13a      	bne.n	800314c <HAL_RCC_OscConfig+0x374>
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d135      	bne.n	800314c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030e0:	4b7b      	ldr	r3, [pc, #492]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <HAL_RCC_OscConfig+0x320>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	2b80      	cmp	r3, #128	@ 0x80
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e2c1      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030f8:	f7fe f848 	bl	800118c <HAL_GetREVID>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003102:	4293      	cmp	r3, r2
 8003104:	d817      	bhi.n	8003136 <HAL_RCC_OscConfig+0x35e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	2b20      	cmp	r3, #32
 800310c:	d108      	bne.n	8003120 <HAL_RCC_OscConfig+0x348>
 800310e:	4b70      	ldr	r3, [pc, #448]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003116:	4a6e      	ldr	r2, [pc, #440]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003118:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800311c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800311e:	e075      	b.n	800320c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003120:	4b6b      	ldr	r3, [pc, #428]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	069b      	lsls	r3, r3, #26
 800312e:	4968      	ldr	r1, [pc, #416]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003130:	4313      	orrs	r3, r2
 8003132:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003134:	e06a      	b.n	800320c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003136:	4b66      	ldr	r3, [pc, #408]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	061b      	lsls	r3, r3, #24
 8003144:	4962      	ldr	r1, [pc, #392]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003146:	4313      	orrs	r3, r2
 8003148:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800314a:	e05f      	b.n	800320c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d042      	beq.n	80031da <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003154:	4b5e      	ldr	r3, [pc, #376]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a5d      	ldr	r2, [pc, #372]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 800315a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800315e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fd ffe4 	bl	800112c <HAL_GetTick>
 8003164:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003168:	f7fd ffe0 	bl	800112c <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e280      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800317a:	4b55      	ldr	r3, [pc, #340]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003186:	f7fe f801 	bl	800118c <HAL_GetREVID>
 800318a:	4603      	mov	r3, r0
 800318c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003190:	4293      	cmp	r3, r2
 8003192:	d817      	bhi.n	80031c4 <HAL_RCC_OscConfig+0x3ec>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	2b20      	cmp	r3, #32
 800319a:	d108      	bne.n	80031ae <HAL_RCC_OscConfig+0x3d6>
 800319c:	4b4c      	ldr	r3, [pc, #304]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80031a4:	4a4a      	ldr	r2, [pc, #296]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80031a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80031aa:	6053      	str	r3, [r2, #4]
 80031ac:	e02e      	b.n	800320c <HAL_RCC_OscConfig+0x434>
 80031ae:	4b48      	ldr	r3, [pc, #288]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	069b      	lsls	r3, r3, #26
 80031bc:	4944      	ldr	r1, [pc, #272]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	604b      	str	r3, [r1, #4]
 80031c2:	e023      	b.n	800320c <HAL_RCC_OscConfig+0x434>
 80031c4:	4b42      	ldr	r3, [pc, #264]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	061b      	lsls	r3, r3, #24
 80031d2:	493f      	ldr	r1, [pc, #252]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60cb      	str	r3, [r1, #12]
 80031d8:	e018      	b.n	800320c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80031da:	4b3d      	ldr	r3, [pc, #244]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a3c      	ldr	r2, [pc, #240]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80031e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e6:	f7fd ffa1 	bl	800112c <HAL_GetTick>
 80031ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80031ee:	f7fd ff9d 	bl	800112c <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e23d      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003200:	4b33      	ldr	r3, [pc, #204]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1f0      	bne.n	80031ee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d036      	beq.n	8003286 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d019      	beq.n	8003254 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003220:	4b2b      	ldr	r3, [pc, #172]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003222:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003224:	4a2a      	ldr	r2, [pc, #168]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322c:	f7fd ff7e 	bl	800112c <HAL_GetTick>
 8003230:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003234:	f7fd ff7a 	bl	800112c <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e21a      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003246:	4b22      	ldr	r3, [pc, #136]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0f0      	beq.n	8003234 <HAL_RCC_OscConfig+0x45c>
 8003252:	e018      	b.n	8003286 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003254:	4b1e      	ldr	r3, [pc, #120]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003256:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003258:	4a1d      	ldr	r2, [pc, #116]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 800325a:	f023 0301 	bic.w	r3, r3, #1
 800325e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fd ff64 	bl	800112c <HAL_GetTick>
 8003264:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003268:	f7fd ff60 	bl	800112c <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e200      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800327a:	4b15      	ldr	r3, [pc, #84]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 800327c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b00      	cmp	r3, #0
 8003290:	d039      	beq.n	8003306 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d01c      	beq.n	80032d4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800329a:	4b0d      	ldr	r3, [pc, #52]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a0c      	ldr	r2, [pc, #48]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80032a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80032a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032a6:	f7fd ff41 	bl	800112c <HAL_GetTick>
 80032aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032ae:	f7fd ff3d 	bl	800112c <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e1dd      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032c0:	4b03      	ldr	r3, [pc, #12]	@ (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x4d6>
 80032cc:	e01b      	b.n	8003306 <HAL_RCC_OscConfig+0x52e>
 80032ce:	bf00      	nop
 80032d0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032d4:	4b9b      	ldr	r3, [pc, #620]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a9a      	ldr	r2, [pc, #616]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 80032da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032e0:	f7fd ff24 	bl	800112c <HAL_GetTick>
 80032e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032e8:	f7fd ff20 	bl	800112c <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e1c0      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032fa:	4b92      	ldr	r3, [pc, #584]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8081 	beq.w	8003416 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003314:	4b8c      	ldr	r3, [pc, #560]	@ (8003548 <HAL_RCC_OscConfig+0x770>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a8b      	ldr	r2, [pc, #556]	@ (8003548 <HAL_RCC_OscConfig+0x770>)
 800331a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800331e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003320:	f7fd ff04 	bl	800112c <HAL_GetTick>
 8003324:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003328:	f7fd ff00 	bl	800112c <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b64      	cmp	r3, #100	@ 0x64
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e1a0      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800333a:	4b83      	ldr	r3, [pc, #524]	@ (8003548 <HAL_RCC_OscConfig+0x770>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d106      	bne.n	800335c <HAL_RCC_OscConfig+0x584>
 800334e:	4b7d      	ldr	r3, [pc, #500]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003352:	4a7c      	ldr	r2, [pc, #496]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6713      	str	r3, [r2, #112]	@ 0x70
 800335a:	e02d      	b.n	80033b8 <HAL_RCC_OscConfig+0x5e0>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10c      	bne.n	800337e <HAL_RCC_OscConfig+0x5a6>
 8003364:	4b77      	ldr	r3, [pc, #476]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003368:	4a76      	ldr	r2, [pc, #472]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003370:	4b74      	ldr	r3, [pc, #464]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003374:	4a73      	ldr	r2, [pc, #460]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003376:	f023 0304 	bic.w	r3, r3, #4
 800337a:	6713      	str	r3, [r2, #112]	@ 0x70
 800337c:	e01c      	b.n	80033b8 <HAL_RCC_OscConfig+0x5e0>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b05      	cmp	r3, #5
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x5c8>
 8003386:	4b6f      	ldr	r3, [pc, #444]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338a:	4a6e      	ldr	r2, [pc, #440]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 800338c:	f043 0304 	orr.w	r3, r3, #4
 8003390:	6713      	str	r3, [r2, #112]	@ 0x70
 8003392:	4b6c      	ldr	r3, [pc, #432]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003396:	4a6b      	ldr	r2, [pc, #428]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	6713      	str	r3, [r2, #112]	@ 0x70
 800339e:	e00b      	b.n	80033b8 <HAL_RCC_OscConfig+0x5e0>
 80033a0:	4b68      	ldr	r3, [pc, #416]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a4:	4a67      	ldr	r2, [pc, #412]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 80033a6:	f023 0301 	bic.w	r3, r3, #1
 80033aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ac:	4b65      	ldr	r3, [pc, #404]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 80033ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b0:	4a64      	ldr	r2, [pc, #400]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 80033b2:	f023 0304 	bic.w	r3, r3, #4
 80033b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d015      	beq.n	80033ec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c0:	f7fd feb4 	bl	800112c <HAL_GetTick>
 80033c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033c6:	e00a      	b.n	80033de <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c8:	f7fd feb0 	bl	800112c <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e14e      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033de:	4b59      	ldr	r3, [pc, #356]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0ee      	beq.n	80033c8 <HAL_RCC_OscConfig+0x5f0>
 80033ea:	e014      	b.n	8003416 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ec:	f7fd fe9e 	bl	800112c <HAL_GetTick>
 80033f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033f2:	e00a      	b.n	800340a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f4:	f7fd fe9a 	bl	800112c <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003402:	4293      	cmp	r3, r2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e138      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800340a:	4b4e      	ldr	r3, [pc, #312]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 800340c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1ee      	bne.n	80033f4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 812d 	beq.w	800367a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003420:	4b48      	ldr	r3, [pc, #288]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003428:	2b18      	cmp	r3, #24
 800342a:	f000 80bd 	beq.w	80035a8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003432:	2b02      	cmp	r3, #2
 8003434:	f040 809e 	bne.w	8003574 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003438:	4b42      	ldr	r3, [pc, #264]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a41      	ldr	r2, [pc, #260]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 800343e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003444:	f7fd fe72 	bl	800112c <HAL_GetTick>
 8003448:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344c:	f7fd fe6e 	bl	800112c <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e10e      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800345e:	4b39      	ldr	r3, [pc, #228]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800346a:	4b36      	ldr	r3, [pc, #216]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 800346c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800346e:	4b37      	ldr	r3, [pc, #220]	@ (800354c <HAL_RCC_OscConfig+0x774>)
 8003470:	4013      	ands	r3, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800347a:	0112      	lsls	r2, r2, #4
 800347c:	430a      	orrs	r2, r1
 800347e:	4931      	ldr	r1, [pc, #196]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003480:	4313      	orrs	r3, r2
 8003482:	628b      	str	r3, [r1, #40]	@ 0x28
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003488:	3b01      	subs	r3, #1
 800348a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003492:	3b01      	subs	r3, #1
 8003494:	025b      	lsls	r3, r3, #9
 8003496:	b29b      	uxth	r3, r3
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349e:	3b01      	subs	r3, #1
 80034a0:	041b      	lsls	r3, r3, #16
 80034a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ac:	3b01      	subs	r3, #1
 80034ae:	061b      	lsls	r3, r3, #24
 80034b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80034b4:	4923      	ldr	r1, [pc, #140]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80034ba:	4b22      	ldr	r3, [pc, #136]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 80034bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034be:	4a21      	ldr	r2, [pc, #132]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 80034c0:	f023 0301 	bic.w	r3, r3, #1
 80034c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 80034c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034ca:	4b21      	ldr	r3, [pc, #132]	@ (8003550 <HAL_RCC_OscConfig+0x778>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034d2:	00d2      	lsls	r2, r2, #3
 80034d4:	491b      	ldr	r1, [pc, #108]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80034da:	4b1a      	ldr	r3, [pc, #104]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 80034dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034de:	f023 020c 	bic.w	r2, r3, #12
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e6:	4917      	ldr	r1, [pc, #92]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80034ec:	4b15      	ldr	r3, [pc, #84]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 80034ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f0:	f023 0202 	bic.w	r2, r3, #2
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f8:	4912      	ldr	r1, [pc, #72]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80034fe:	4b11      	ldr	r3, [pc, #68]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003502:	4a10      	ldr	r2, [pc, #64]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003508:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800350a:	4b0e      	ldr	r3, [pc, #56]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 800350c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350e:	4a0d      	ldr	r2, [pc, #52]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003510:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003514:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003516:	4b0b      	ldr	r3, [pc, #44]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351a:	4a0a      	ldr	r2, [pc, #40]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 800351c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003520:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003522:	4b08      	ldr	r3, [pc, #32]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003526:	4a07      	ldr	r2, [pc, #28]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003528:	f043 0301 	orr.w	r3, r3, #1
 800352c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800352e:	4b05      	ldr	r3, [pc, #20]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a04      	ldr	r2, [pc, #16]	@ (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003534:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353a:	f7fd fdf7 	bl	800112c <HAL_GetTick>
 800353e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003540:	e011      	b.n	8003566 <HAL_RCC_OscConfig+0x78e>
 8003542:	bf00      	nop
 8003544:	58024400 	.word	0x58024400
 8003548:	58024800 	.word	0x58024800
 800354c:	fffffc0c 	.word	0xfffffc0c
 8003550:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003554:	f7fd fdea 	bl	800112c <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e08a      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003566:	4b47      	ldr	r3, [pc, #284]	@ (8003684 <HAL_RCC_OscConfig+0x8ac>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x77c>
 8003572:	e082      	b.n	800367a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003574:	4b43      	ldr	r3, [pc, #268]	@ (8003684 <HAL_RCC_OscConfig+0x8ac>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a42      	ldr	r2, [pc, #264]	@ (8003684 <HAL_RCC_OscConfig+0x8ac>)
 800357a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800357e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003580:	f7fd fdd4 	bl	800112c <HAL_GetTick>
 8003584:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003588:	f7fd fdd0 	bl	800112c <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e070      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800359a:	4b3a      	ldr	r3, [pc, #232]	@ (8003684 <HAL_RCC_OscConfig+0x8ac>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f0      	bne.n	8003588 <HAL_RCC_OscConfig+0x7b0>
 80035a6:	e068      	b.n	800367a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80035a8:	4b36      	ldr	r3, [pc, #216]	@ (8003684 <HAL_RCC_OscConfig+0x8ac>)
 80035aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80035ae:	4b35      	ldr	r3, [pc, #212]	@ (8003684 <HAL_RCC_OscConfig+0x8ac>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d031      	beq.n	8003620 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f003 0203 	and.w	r2, r3, #3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d12a      	bne.n	8003620 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	091b      	lsrs	r3, r3, #4
 80035ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d122      	bne.n	8003620 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d11a      	bne.n	8003620 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	0a5b      	lsrs	r3, r3, #9
 80035ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d111      	bne.n	8003620 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	0c1b      	lsrs	r3, r3, #16
 8003600:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003608:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800360a:	429a      	cmp	r2, r3
 800360c:	d108      	bne.n	8003620 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	0e1b      	lsrs	r3, r3, #24
 8003612:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800361a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800361c:	429a      	cmp	r2, r3
 800361e:	d001      	beq.n	8003624 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e02b      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003624:	4b17      	ldr	r3, [pc, #92]	@ (8003684 <HAL_RCC_OscConfig+0x8ac>)
 8003626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003628:	08db      	lsrs	r3, r3, #3
 800362a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800362e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	429a      	cmp	r2, r3
 8003638:	d01f      	beq.n	800367a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800363a:	4b12      	ldr	r3, [pc, #72]	@ (8003684 <HAL_RCC_OscConfig+0x8ac>)
 800363c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363e:	4a11      	ldr	r2, [pc, #68]	@ (8003684 <HAL_RCC_OscConfig+0x8ac>)
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003646:	f7fd fd71 	bl	800112c <HAL_GetTick>
 800364a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800364c:	bf00      	nop
 800364e:	f7fd fd6d 	bl	800112c <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003656:	4293      	cmp	r3, r2
 8003658:	d0f9      	beq.n	800364e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800365a:	4b0a      	ldr	r3, [pc, #40]	@ (8003684 <HAL_RCC_OscConfig+0x8ac>)
 800365c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800365e:	4b0a      	ldr	r3, [pc, #40]	@ (8003688 <HAL_RCC_OscConfig+0x8b0>)
 8003660:	4013      	ands	r3, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003666:	00d2      	lsls	r2, r2, #3
 8003668:	4906      	ldr	r1, [pc, #24]	@ (8003684 <HAL_RCC_OscConfig+0x8ac>)
 800366a:	4313      	orrs	r3, r2
 800366c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800366e:	4b05      	ldr	r3, [pc, #20]	@ (8003684 <HAL_RCC_OscConfig+0x8ac>)
 8003670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003672:	4a04      	ldr	r2, [pc, #16]	@ (8003684 <HAL_RCC_OscConfig+0x8ac>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3730      	adds	r7, #48	@ 0x30
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	58024400 	.word	0x58024400
 8003688:	ffff0007 	.word	0xffff0007

0800368c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e19c      	b.n	80039da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036a0:	4b8a      	ldr	r3, [pc, #552]	@ (80038cc <HAL_RCC_ClockConfig+0x240>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d910      	bls.n	80036d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	4b87      	ldr	r3, [pc, #540]	@ (80038cc <HAL_RCC_ClockConfig+0x240>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 020f 	bic.w	r2, r3, #15
 80036b6:	4985      	ldr	r1, [pc, #532]	@ (80038cc <HAL_RCC_ClockConfig+0x240>)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036be:	4b83      	ldr	r3, [pc, #524]	@ (80038cc <HAL_RCC_ClockConfig+0x240>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e184      	b.n	80039da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d010      	beq.n	80036fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	4b7b      	ldr	r3, [pc, #492]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d908      	bls.n	80036fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036ec:	4b78      	ldr	r3, [pc, #480]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	4975      	ldr	r1, [pc, #468]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b00      	cmp	r3, #0
 8003708:	d010      	beq.n	800372c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695a      	ldr	r2, [r3, #20]
 800370e:	4b70      	ldr	r3, [pc, #448]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003716:	429a      	cmp	r2, r3
 8003718:	d908      	bls.n	800372c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800371a:	4b6d      	ldr	r3, [pc, #436]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	496a      	ldr	r1, [pc, #424]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 8003728:	4313      	orrs	r3, r2
 800372a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	2b00      	cmp	r3, #0
 8003736:	d010      	beq.n	800375a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699a      	ldr	r2, [r3, #24]
 800373c:	4b64      	ldr	r3, [pc, #400]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003744:	429a      	cmp	r2, r3
 8003746:	d908      	bls.n	800375a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003748:	4b61      	ldr	r3, [pc, #388]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	495e      	ldr	r1, [pc, #376]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 8003756:	4313      	orrs	r3, r2
 8003758:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b00      	cmp	r3, #0
 8003764:	d010      	beq.n	8003788 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69da      	ldr	r2, [r3, #28]
 800376a:	4b59      	ldr	r3, [pc, #356]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003772:	429a      	cmp	r2, r3
 8003774:	d908      	bls.n	8003788 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003776:	4b56      	ldr	r3, [pc, #344]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	4953      	ldr	r1, [pc, #332]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 8003784:	4313      	orrs	r3, r2
 8003786:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d010      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	4b4d      	ldr	r3, [pc, #308]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	f003 030f 	and.w	r3, r3, #15
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d908      	bls.n	80037b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a4:	4b4a      	ldr	r3, [pc, #296]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	f023 020f 	bic.w	r2, r3, #15
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4947      	ldr	r1, [pc, #284]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d055      	beq.n	800386e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80037c2:	4b43      	ldr	r3, [pc, #268]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	4940      	ldr	r1, [pc, #256]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d107      	bne.n	80037ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037dc:	4b3c      	ldr	r3, [pc, #240]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d121      	bne.n	800382c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0f6      	b.n	80039da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d107      	bne.n	8003804 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037f4:	4b36      	ldr	r3, [pc, #216]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d115      	bne.n	800382c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0ea      	b.n	80039da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d107      	bne.n	800381c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800380c:	4b30      	ldr	r3, [pc, #192]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d109      	bne.n	800382c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0de      	b.n	80039da <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800381c:	4b2c      	ldr	r3, [pc, #176]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0d6      	b.n	80039da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800382c:	4b28      	ldr	r3, [pc, #160]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	f023 0207 	bic.w	r2, r3, #7
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	4925      	ldr	r1, [pc, #148]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800383a:	4313      	orrs	r3, r2
 800383c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800383e:	f7fd fc75 	bl	800112c <HAL_GetTick>
 8003842:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003844:	e00a      	b.n	800385c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003846:	f7fd fc71 	bl	800112c <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003854:	4293      	cmp	r3, r2
 8003856:	d901      	bls.n	800385c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e0be      	b.n	80039da <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385c:	4b1c      	ldr	r3, [pc, #112]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	429a      	cmp	r2, r3
 800386c:	d1eb      	bne.n	8003846 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d010      	beq.n	800389c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	4b14      	ldr	r3, [pc, #80]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	429a      	cmp	r2, r3
 8003888:	d208      	bcs.n	800389c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800388a:	4b11      	ldr	r3, [pc, #68]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	f023 020f 	bic.w	r2, r3, #15
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	490e      	ldr	r1, [pc, #56]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 8003898:	4313      	orrs	r3, r2
 800389a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800389c:	4b0b      	ldr	r3, [pc, #44]	@ (80038cc <HAL_RCC_ClockConfig+0x240>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d214      	bcs.n	80038d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038aa:	4b08      	ldr	r3, [pc, #32]	@ (80038cc <HAL_RCC_ClockConfig+0x240>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f023 020f 	bic.w	r2, r3, #15
 80038b2:	4906      	ldr	r1, [pc, #24]	@ (80038cc <HAL_RCC_ClockConfig+0x240>)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ba:	4b04      	ldr	r3, [pc, #16]	@ (80038cc <HAL_RCC_ClockConfig+0x240>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e086      	b.n	80039da <HAL_RCC_ClockConfig+0x34e>
 80038cc:	52002000 	.word	0x52002000
 80038d0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d010      	beq.n	8003902 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	4b3f      	ldr	r3, [pc, #252]	@ (80039e4 <HAL_RCC_ClockConfig+0x358>)
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d208      	bcs.n	8003902 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038f0:	4b3c      	ldr	r3, [pc, #240]	@ (80039e4 <HAL_RCC_ClockConfig+0x358>)
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	4939      	ldr	r1, [pc, #228]	@ (80039e4 <HAL_RCC_ClockConfig+0x358>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d010      	beq.n	8003930 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	695a      	ldr	r2, [r3, #20]
 8003912:	4b34      	ldr	r3, [pc, #208]	@ (80039e4 <HAL_RCC_ClockConfig+0x358>)
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800391a:	429a      	cmp	r2, r3
 800391c:	d208      	bcs.n	8003930 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800391e:	4b31      	ldr	r3, [pc, #196]	@ (80039e4 <HAL_RCC_ClockConfig+0x358>)
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	492e      	ldr	r1, [pc, #184]	@ (80039e4 <HAL_RCC_ClockConfig+0x358>)
 800392c:	4313      	orrs	r3, r2
 800392e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b00      	cmp	r3, #0
 800393a:	d010      	beq.n	800395e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699a      	ldr	r2, [r3, #24]
 8003940:	4b28      	ldr	r3, [pc, #160]	@ (80039e4 <HAL_RCC_ClockConfig+0x358>)
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003948:	429a      	cmp	r2, r3
 800394a:	d208      	bcs.n	800395e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800394c:	4b25      	ldr	r3, [pc, #148]	@ (80039e4 <HAL_RCC_ClockConfig+0x358>)
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	4922      	ldr	r1, [pc, #136]	@ (80039e4 <HAL_RCC_ClockConfig+0x358>)
 800395a:	4313      	orrs	r3, r2
 800395c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0320 	and.w	r3, r3, #32
 8003966:	2b00      	cmp	r3, #0
 8003968:	d010      	beq.n	800398c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69da      	ldr	r2, [r3, #28]
 800396e:	4b1d      	ldr	r3, [pc, #116]	@ (80039e4 <HAL_RCC_ClockConfig+0x358>)
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003976:	429a      	cmp	r2, r3
 8003978:	d208      	bcs.n	800398c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800397a:	4b1a      	ldr	r3, [pc, #104]	@ (80039e4 <HAL_RCC_ClockConfig+0x358>)
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	4917      	ldr	r1, [pc, #92]	@ (80039e4 <HAL_RCC_ClockConfig+0x358>)
 8003988:	4313      	orrs	r3, r2
 800398a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800398c:	f000 f834 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 8003990:	4602      	mov	r2, r0
 8003992:	4b14      	ldr	r3, [pc, #80]	@ (80039e4 <HAL_RCC_ClockConfig+0x358>)
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	0a1b      	lsrs	r3, r3, #8
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	4912      	ldr	r1, [pc, #72]	@ (80039e8 <HAL_RCC_ClockConfig+0x35c>)
 800399e:	5ccb      	ldrb	r3, [r1, r3]
 80039a0:	f003 031f 	and.w	r3, r3, #31
 80039a4:	fa22 f303 	lsr.w	r3, r2, r3
 80039a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039aa:	4b0e      	ldr	r3, [pc, #56]	@ (80039e4 <HAL_RCC_ClockConfig+0x358>)
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	4a0d      	ldr	r2, [pc, #52]	@ (80039e8 <HAL_RCC_ClockConfig+0x35c>)
 80039b4:	5cd3      	ldrb	r3, [r2, r3]
 80039b6:	f003 031f 	and.w	r3, r3, #31
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
 80039c0:	4a0a      	ldr	r2, [pc, #40]	@ (80039ec <HAL_RCC_ClockConfig+0x360>)
 80039c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039c4:	4a0a      	ldr	r2, [pc, #40]	@ (80039f0 <HAL_RCC_ClockConfig+0x364>)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80039ca:	4b0a      	ldr	r3, [pc, #40]	@ (80039f4 <HAL_RCC_ClockConfig+0x368>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fd fb62 	bl	8001098 <HAL_InitTick>
 80039d4:	4603      	mov	r3, r0
 80039d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	58024400 	.word	0x58024400
 80039e8:	08008c28 	.word	0x08008c28
 80039ec:	24000004 	.word	0x24000004
 80039f0:	24000000 	.word	0x24000000
 80039f4:	24000008 	.word	0x24000008

080039f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b089      	sub	sp, #36	@ 0x24
 80039fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039fe:	4bb3      	ldr	r3, [pc, #716]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a06:	2b18      	cmp	r3, #24
 8003a08:	f200 8155 	bhi.w	8003cb6 <HAL_RCC_GetSysClockFreq+0x2be>
 8003a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a12:	bf00      	nop
 8003a14:	08003a79 	.word	0x08003a79
 8003a18:	08003cb7 	.word	0x08003cb7
 8003a1c:	08003cb7 	.word	0x08003cb7
 8003a20:	08003cb7 	.word	0x08003cb7
 8003a24:	08003cb7 	.word	0x08003cb7
 8003a28:	08003cb7 	.word	0x08003cb7
 8003a2c:	08003cb7 	.word	0x08003cb7
 8003a30:	08003cb7 	.word	0x08003cb7
 8003a34:	08003a9f 	.word	0x08003a9f
 8003a38:	08003cb7 	.word	0x08003cb7
 8003a3c:	08003cb7 	.word	0x08003cb7
 8003a40:	08003cb7 	.word	0x08003cb7
 8003a44:	08003cb7 	.word	0x08003cb7
 8003a48:	08003cb7 	.word	0x08003cb7
 8003a4c:	08003cb7 	.word	0x08003cb7
 8003a50:	08003cb7 	.word	0x08003cb7
 8003a54:	08003aa5 	.word	0x08003aa5
 8003a58:	08003cb7 	.word	0x08003cb7
 8003a5c:	08003cb7 	.word	0x08003cb7
 8003a60:	08003cb7 	.word	0x08003cb7
 8003a64:	08003cb7 	.word	0x08003cb7
 8003a68:	08003cb7 	.word	0x08003cb7
 8003a6c:	08003cb7 	.word	0x08003cb7
 8003a70:	08003cb7 	.word	0x08003cb7
 8003a74:	08003aab 	.word	0x08003aab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a78:	4b94      	ldr	r3, [pc, #592]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d009      	beq.n	8003a98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a84:	4b91      	ldr	r3, [pc, #580]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	08db      	lsrs	r3, r3, #3
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	4a90      	ldr	r2, [pc, #576]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a90:	fa22 f303 	lsr.w	r3, r2, r3
 8003a94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003a96:	e111      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a98:	4b8d      	ldr	r3, [pc, #564]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a9a:	61bb      	str	r3, [r7, #24]
      break;
 8003a9c:	e10e      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003a9e:	4b8d      	ldr	r3, [pc, #564]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003aa0:	61bb      	str	r3, [r7, #24]
      break;
 8003aa2:	e10b      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003aa4:	4b8c      	ldr	r3, [pc, #560]	@ (8003cd8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003aa6:	61bb      	str	r3, [r7, #24]
      break;
 8003aa8:	e108      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003aaa:	4b88      	ldr	r3, [pc, #544]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003ab4:	4b85      	ldr	r3, [pc, #532]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab8:	091b      	lsrs	r3, r3, #4
 8003aba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003abe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003ac0:	4b82      	ldr	r3, [pc, #520]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003aca:	4b80      	ldr	r3, [pc, #512]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ace:	08db      	lsrs	r3, r3, #3
 8003ad0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	fb02 f303 	mul.w	r3, r2, r3
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ae2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 80e1 	beq.w	8003cb0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	f000 8083 	beq.w	8003bfc <HAL_RCC_GetSysClockFreq+0x204>
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	f200 80a1 	bhi.w	8003c40 <HAL_RCC_GetSysClockFreq+0x248>
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_RCC_GetSysClockFreq+0x114>
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d056      	beq.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003b0a:	e099      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b0c:	4b6f      	ldr	r3, [pc, #444]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0320 	and.w	r3, r3, #32
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d02d      	beq.n	8003b74 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b18:	4b6c      	ldr	r3, [pc, #432]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	08db      	lsrs	r3, r3, #3
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	4a6b      	ldr	r2, [pc, #428]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b24:	fa22 f303 	lsr.w	r3, r2, r3
 8003b28:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	ee07 3a90 	vmov	s15, r3
 8003b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	ee07 3a90 	vmov	s15, r3
 8003b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b42:	4b62      	ldr	r3, [pc, #392]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b52:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b56:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b6e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003b72:	e087      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	ee07 3a90 	vmov	s15, r3
 8003b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b7e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003ce0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b86:	4b51      	ldr	r3, [pc, #324]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b96:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b9a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bb6:	e065      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	ee07 3a90 	vmov	s15, r3
 8003bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003ce4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bca:	4b40      	ldr	r3, [pc, #256]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd2:	ee07 3a90 	vmov	s15, r3
 8003bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bda:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bde:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bfa:	e043      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c06:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003ce8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c16:	ee07 3a90 	vmov	s15, r3
 8003c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c22:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c3e:	e021      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	ee07 3a90 	vmov	s15, r3
 8003c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003ce4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c52:	4b1e      	ldr	r3, [pc, #120]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c5a:	ee07 3a90 	vmov	s15, r3
 8003c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c62:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c66:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c82:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003c84:	4b11      	ldr	r3, [pc, #68]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c88:	0a5b      	lsrs	r3, r3, #9
 8003c8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c8e:	3301      	adds	r3, #1
 8003c90:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	ee07 3a90 	vmov	s15, r3
 8003c98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ca8:	ee17 3a90 	vmov	r3, s15
 8003cac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003cae:	e005      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61bb      	str	r3, [r7, #24]
      break;
 8003cb4:	e002      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003cb6:	4b07      	ldr	r3, [pc, #28]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003cb8:	61bb      	str	r3, [r7, #24]
      break;
 8003cba:	bf00      	nop
  }

  return sysclockfreq;
 8003cbc:	69bb      	ldr	r3, [r7, #24]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3724      	adds	r7, #36	@ 0x24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	58024400 	.word	0x58024400
 8003cd0:	03d09000 	.word	0x03d09000
 8003cd4:	003d0900 	.word	0x003d0900
 8003cd8:	007a1200 	.word	0x007a1200
 8003cdc:	46000000 	.word	0x46000000
 8003ce0:	4c742400 	.word	0x4c742400
 8003ce4:	4a742400 	.word	0x4a742400
 8003ce8:	4af42400 	.word	0x4af42400

08003cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003cf2:	f7ff fe81 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	4b10      	ldr	r3, [pc, #64]	@ (8003d3c <HAL_RCC_GetHCLKFreq+0x50>)
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	0a1b      	lsrs	r3, r3, #8
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	490f      	ldr	r1, [pc, #60]	@ (8003d40 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d04:	5ccb      	ldrb	r3, [r1, r3]
 8003d06:	f003 031f 	and.w	r3, r3, #31
 8003d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d10:	4b0a      	ldr	r3, [pc, #40]	@ (8003d3c <HAL_RCC_GetHCLKFreq+0x50>)
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	f003 030f 	and.w	r3, r3, #15
 8003d18:	4a09      	ldr	r2, [pc, #36]	@ (8003d40 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d1a:	5cd3      	ldrb	r3, [r2, r3]
 8003d1c:	f003 031f 	and.w	r3, r3, #31
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	fa22 f303 	lsr.w	r3, r2, r3
 8003d26:	4a07      	ldr	r2, [pc, #28]	@ (8003d44 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d28:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d2a:	4a07      	ldr	r2, [pc, #28]	@ (8003d48 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003d30:	4b04      	ldr	r3, [pc, #16]	@ (8003d44 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d32:	681b      	ldr	r3, [r3, #0]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	58024400 	.word	0x58024400
 8003d40:	08008c28 	.word	0x08008c28
 8003d44:	24000004 	.word	0x24000004
 8003d48:	24000000 	.word	0x24000000

08003d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003d50:	f7ff ffcc 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d54:	4602      	mov	r2, r0
 8003d56:	4b06      	ldr	r3, [pc, #24]	@ (8003d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	091b      	lsrs	r3, r3, #4
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	4904      	ldr	r1, [pc, #16]	@ (8003d74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d62:	5ccb      	ldrb	r3, [r1, r3]
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	58024400 	.word	0x58024400
 8003d74:	08008c28 	.word	0x08008c28

08003d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003d7c:	f7ff ffb6 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d80:	4602      	mov	r2, r0
 8003d82:	4b06      	ldr	r3, [pc, #24]	@ (8003d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	0a1b      	lsrs	r3, r3, #8
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	4904      	ldr	r1, [pc, #16]	@ (8003da0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d8e:	5ccb      	ldrb	r3, [r1, r3]
 8003d90:	f003 031f 	and.w	r3, r3, #31
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	58024400 	.word	0x58024400
 8003da0:	08008c28 	.word	0x08008c28

08003da4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003da8:	b0ca      	sub	sp, #296	@ 0x128
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003db0:	2300      	movs	r3, #0
 8003db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003db6:	2300      	movs	r3, #0
 8003db8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003dc8:	2500      	movs	r5, #0
 8003dca:	ea54 0305 	orrs.w	r3, r4, r5
 8003dce:	d049      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dd6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003dda:	d02f      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003ddc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003de0:	d828      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003de2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003de6:	d01a      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003de8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dec:	d822      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003df2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003df6:	d007      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003df8:	e01c      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dfa:	4bb8      	ldr	r3, [pc, #736]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfe:	4ab7      	ldr	r2, [pc, #732]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e06:	e01a      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0c:	3308      	adds	r3, #8
 8003e0e:	2102      	movs	r1, #2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f001 fc8f 	bl	8005734 <RCCEx_PLL2_Config>
 8003e16:	4603      	mov	r3, r0
 8003e18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e1c:	e00f      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e22:	3328      	adds	r3, #40	@ 0x28
 8003e24:	2102      	movs	r1, #2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f001 fd36 	bl	8005898 <RCCEx_PLL3_Config>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e32:	e004      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e3a:	e000      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10a      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003e46:	4ba5      	ldr	r3, [pc, #660]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e4a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e54:	4aa1      	ldr	r2, [pc, #644]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e56:	430b      	orrs	r3, r1
 8003e58:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e5a:	e003      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003e70:	f04f 0900 	mov.w	r9, #0
 8003e74:	ea58 0309 	orrs.w	r3, r8, r9
 8003e78:	d047      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	d82a      	bhi.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003e84:	a201      	add	r2, pc, #4	@ (adr r2, 8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8a:	bf00      	nop
 8003e8c:	08003ea1 	.word	0x08003ea1
 8003e90:	08003eaf 	.word	0x08003eaf
 8003e94:	08003ec5 	.word	0x08003ec5
 8003e98:	08003ee3 	.word	0x08003ee3
 8003e9c:	08003ee3 	.word	0x08003ee3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea0:	4b8e      	ldr	r3, [pc, #568]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea4:	4a8d      	ldr	r2, [pc, #564]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ea6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003eac:	e01a      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f001 fc3c 	bl	8005734 <RCCEx_PLL2_Config>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ec2:	e00f      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec8:	3328      	adds	r3, #40	@ 0x28
 8003eca:	2100      	movs	r1, #0
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f001 fce3 	bl	8005898 <RCCEx_PLL3_Config>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ed8:	e004      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ee0:	e000      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10a      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003eec:	4b7b      	ldr	r3, [pc, #492]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ef0:	f023 0107 	bic.w	r1, r3, #7
 8003ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efa:	4a78      	ldr	r2, [pc, #480]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003efc:	430b      	orrs	r3, r1
 8003efe:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f00:	e003      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f12:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003f16:	f04f 0b00 	mov.w	fp, #0
 8003f1a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003f1e:	d04c      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f2a:	d030      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003f2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f30:	d829      	bhi.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003f32:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f34:	d02d      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003f36:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f38:	d825      	bhi.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003f3a:	2b80      	cmp	r3, #128	@ 0x80
 8003f3c:	d018      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003f3e:	2b80      	cmp	r3, #128	@ 0x80
 8003f40:	d821      	bhi.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003f46:	2b40      	cmp	r3, #64	@ 0x40
 8003f48:	d007      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003f4a:	e01c      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f4c:	4b63      	ldr	r3, [pc, #396]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f50:	4a62      	ldr	r2, [pc, #392]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003f58:	e01c      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5e:	3308      	adds	r3, #8
 8003f60:	2100      	movs	r1, #0
 8003f62:	4618      	mov	r0, r3
 8003f64:	f001 fbe6 	bl	8005734 <RCCEx_PLL2_Config>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003f6e:	e011      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f74:	3328      	adds	r3, #40	@ 0x28
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f001 fc8d 	bl	8005898 <RCCEx_PLL3_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003f84:	e006      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f8c:	e002      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003f8e:	bf00      	nop
 8003f90:	e000      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10a      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003f9c:	4b4f      	ldr	r3, [pc, #316]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003faa:	4a4c      	ldr	r2, [pc, #304]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fac:	430b      	orrs	r3, r1
 8003fae:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fb0:	e003      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003fc6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003fd0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	d053      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003fe2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fe6:	d035      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003fe8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fec:	d82e      	bhi.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003fee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003ff2:	d031      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003ff4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003ff8:	d828      	bhi.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003ffa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ffe:	d01a      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004000:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004004:	d822      	bhi.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800400a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800400e:	d007      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004010:	e01c      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004012:	4b32      	ldr	r3, [pc, #200]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004016:	4a31      	ldr	r2, [pc, #196]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004018:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800401c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800401e:	e01c      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004024:	3308      	adds	r3, #8
 8004026:	2100      	movs	r1, #0
 8004028:	4618      	mov	r0, r3
 800402a:	f001 fb83 	bl	8005734 <RCCEx_PLL2_Config>
 800402e:	4603      	mov	r3, r0
 8004030:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004034:	e011      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403a:	3328      	adds	r3, #40	@ 0x28
 800403c:	2100      	movs	r1, #0
 800403e:	4618      	mov	r0, r3
 8004040:	f001 fc2a 	bl	8005898 <RCCEx_PLL3_Config>
 8004044:	4603      	mov	r3, r0
 8004046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800404a:	e006      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004052:	e002      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004054:	bf00      	nop
 8004056:	e000      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800405a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10b      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004062:	4b1e      	ldr	r3, [pc, #120]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004066:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800406a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004072:	4a1a      	ldr	r2, [pc, #104]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004074:	430b      	orrs	r3, r1
 8004076:	6593      	str	r3, [r2, #88]	@ 0x58
 8004078:	e003      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800407e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800408e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004092:	2300      	movs	r3, #0
 8004094:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004098:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800409c:	460b      	mov	r3, r1
 800409e:	4313      	orrs	r3, r2
 80040a0:	d056      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80040a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80040aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040ae:	d038      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80040b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040b4:	d831      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80040b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80040ba:	d034      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80040bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80040c0:	d82b      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80040c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040c6:	d01d      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80040c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040cc:	d825      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d006      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80040d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040d6:	d00a      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80040d8:	e01f      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80040da:	bf00      	nop
 80040dc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040e0:	4ba2      	ldr	r3, [pc, #648]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e4:	4aa1      	ldr	r2, [pc, #644]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040ec:	e01c      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f2:	3308      	adds	r3, #8
 80040f4:	2100      	movs	r1, #0
 80040f6:	4618      	mov	r0, r3
 80040f8:	f001 fb1c 	bl	8005734 <RCCEx_PLL2_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004102:	e011      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004108:	3328      	adds	r3, #40	@ 0x28
 800410a:	2100      	movs	r1, #0
 800410c:	4618      	mov	r0, r3
 800410e:	f001 fbc3 	bl	8005898 <RCCEx_PLL3_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004118:	e006      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004120:	e002      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004122:	bf00      	nop
 8004124:	e000      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004128:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10b      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004130:	4b8e      	ldr	r3, [pc, #568]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004134:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004140:	4a8a      	ldr	r2, [pc, #552]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004142:	430b      	orrs	r3, r1
 8004144:	6593      	str	r3, [r2, #88]	@ 0x58
 8004146:	e003      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004148:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800414c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004158:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800415c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004160:	2300      	movs	r3, #0
 8004162:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004166:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800416a:	460b      	mov	r3, r1
 800416c:	4313      	orrs	r3, r2
 800416e:	d03a      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004176:	2b30      	cmp	r3, #48	@ 0x30
 8004178:	d01f      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x416>
 800417a:	2b30      	cmp	r3, #48	@ 0x30
 800417c:	d819      	bhi.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800417e:	2b20      	cmp	r3, #32
 8004180:	d00c      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004182:	2b20      	cmp	r3, #32
 8004184:	d815      	bhi.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004186:	2b00      	cmp	r3, #0
 8004188:	d019      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800418a:	2b10      	cmp	r3, #16
 800418c:	d111      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800418e:	4b77      	ldr	r3, [pc, #476]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004192:	4a76      	ldr	r2, [pc, #472]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004198:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800419a:	e011      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800419c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a0:	3308      	adds	r3, #8
 80041a2:	2102      	movs	r1, #2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f001 fac5 	bl	8005734 <RCCEx_PLL2_Config>
 80041aa:	4603      	mov	r3, r0
 80041ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80041b0:	e006      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041b8:	e002      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80041ba:	bf00      	nop
 80041bc:	e000      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80041be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80041c8:	4b68      	ldr	r3, [pc, #416]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041cc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80041d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041d6:	4a65      	ldr	r2, [pc, #404]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041d8:	430b      	orrs	r3, r1
 80041da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041dc:	e003      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80041e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ee:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80041f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80041f6:	2300      	movs	r3, #0
 80041f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80041fc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004200:	460b      	mov	r3, r1
 8004202:	4313      	orrs	r3, r2
 8004204:	d051      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800420c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004210:	d035      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004212:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004216:	d82e      	bhi.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004218:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800421c:	d031      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800421e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004222:	d828      	bhi.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004224:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004228:	d01a      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800422a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800422e:	d822      	bhi.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004234:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004238:	d007      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800423a:	e01c      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800423c:	4b4b      	ldr	r3, [pc, #300]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800423e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004240:	4a4a      	ldr	r2, [pc, #296]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004248:	e01c      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800424a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424e:	3308      	adds	r3, #8
 8004250:	2100      	movs	r1, #0
 8004252:	4618      	mov	r0, r3
 8004254:	f001 fa6e 	bl	8005734 <RCCEx_PLL2_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800425e:	e011      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004264:	3328      	adds	r3, #40	@ 0x28
 8004266:	2100      	movs	r1, #0
 8004268:	4618      	mov	r0, r3
 800426a:	f001 fb15 	bl	8005898 <RCCEx_PLL3_Config>
 800426e:	4603      	mov	r3, r0
 8004270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004274:	e006      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800427c:	e002      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800427e:	bf00      	nop
 8004280:	e000      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004282:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004284:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10a      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800428c:	4b37      	ldr	r3, [pc, #220]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800428e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004290:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800429a:	4a34      	ldr	r2, [pc, #208]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800429c:	430b      	orrs	r3, r1
 800429e:	6513      	str	r3, [r2, #80]	@ 0x50
 80042a0:	e003      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80042aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80042b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80042ba:	2300      	movs	r3, #0
 80042bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80042c0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80042c4:	460b      	mov	r3, r1
 80042c6:	4313      	orrs	r3, r2
 80042c8:	d056      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80042ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042d4:	d033      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80042d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042da:	d82c      	bhi.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80042dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042e0:	d02f      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80042e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042e6:	d826      	bhi.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80042e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80042ec:	d02b      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80042ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80042f2:	d820      	bhi.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80042f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042f8:	d012      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80042fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042fe:	d81a      	bhi.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004300:	2b00      	cmp	r3, #0
 8004302:	d022      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004308:	d115      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800430a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430e:	3308      	adds	r3, #8
 8004310:	2101      	movs	r1, #1
 8004312:	4618      	mov	r0, r3
 8004314:	f001 fa0e 	bl	8005734 <RCCEx_PLL2_Config>
 8004318:	4603      	mov	r3, r0
 800431a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800431e:	e015      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004324:	3328      	adds	r3, #40	@ 0x28
 8004326:	2101      	movs	r1, #1
 8004328:	4618      	mov	r0, r3
 800432a:	f001 fab5 	bl	8005898 <RCCEx_PLL3_Config>
 800432e:	4603      	mov	r3, r0
 8004330:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004334:	e00a      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800433c:	e006      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800433e:	bf00      	nop
 8004340:	e004      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004342:	bf00      	nop
 8004344:	e002      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004346:	bf00      	nop
 8004348:	e000      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800434a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800434c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10d      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004354:	4b05      	ldr	r3, [pc, #20]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004358:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800435c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004360:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004362:	4a02      	ldr	r2, [pc, #8]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004364:	430b      	orrs	r3, r1
 8004366:	6513      	str	r3, [r2, #80]	@ 0x50
 8004368:	e006      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800436a:	bf00      	nop
 800436c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004370:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004374:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004384:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004388:	2300      	movs	r3, #0
 800438a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800438e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004392:	460b      	mov	r3, r1
 8004394:	4313      	orrs	r3, r2
 8004396:	d055      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80043a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043a4:	d033      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80043a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043aa:	d82c      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80043ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043b0:	d02f      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80043b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043b6:	d826      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80043b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80043bc:	d02b      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80043be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80043c2:	d820      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80043c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043c8:	d012      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80043ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043ce:	d81a      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d022      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80043d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043d8:	d115      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043de:	3308      	adds	r3, #8
 80043e0:	2101      	movs	r1, #1
 80043e2:	4618      	mov	r0, r3
 80043e4:	f001 f9a6 	bl	8005734 <RCCEx_PLL2_Config>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80043ee:	e015      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f4:	3328      	adds	r3, #40	@ 0x28
 80043f6:	2101      	movs	r1, #1
 80043f8:	4618      	mov	r0, r3
 80043fa:	f001 fa4d 	bl	8005898 <RCCEx_PLL3_Config>
 80043fe:	4603      	mov	r3, r0
 8004400:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004404:	e00a      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800440c:	e006      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800440e:	bf00      	nop
 8004410:	e004      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004412:	bf00      	nop
 8004414:	e002      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004416:	bf00      	nop
 8004418:	e000      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800441a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800441c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10b      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004424:	4ba3      	ldr	r3, [pc, #652]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004428:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800442c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004430:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004434:	4a9f      	ldr	r2, [pc, #636]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004436:	430b      	orrs	r3, r1
 8004438:	6593      	str	r3, [r2, #88]	@ 0x58
 800443a:	e003      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004440:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004450:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004454:	2300      	movs	r3, #0
 8004456:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800445a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800445e:	460b      	mov	r3, r1
 8004460:	4313      	orrs	r3, r2
 8004462:	d037      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800446e:	d00e      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004474:	d816      	bhi.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004476:	2b00      	cmp	r3, #0
 8004478:	d018      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x708>
 800447a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800447e:	d111      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004480:	4b8c      	ldr	r3, [pc, #560]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004484:	4a8b      	ldr	r2, [pc, #556]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004486:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800448a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800448c:	e00f      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800448e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004492:	3308      	adds	r3, #8
 8004494:	2101      	movs	r1, #1
 8004496:	4618      	mov	r0, r3
 8004498:	f001 f94c 	bl	8005734 <RCCEx_PLL2_Config>
 800449c:	4603      	mov	r3, r0
 800449e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80044a2:	e004      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044aa:	e000      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80044ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10a      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80044b6:	4b7f      	ldr	r3, [pc, #508]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80044be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c4:	4a7b      	ldr	r2, [pc, #492]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044c6:	430b      	orrs	r3, r1
 80044c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80044ca:	e003      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80044d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044dc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80044e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044e4:	2300      	movs	r3, #0
 80044e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80044ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4313      	orrs	r3, r2
 80044f2:	d039      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80044f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	d81c      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80044fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004504 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004504:	08004541 	.word	0x08004541
 8004508:	08004515 	.word	0x08004515
 800450c:	08004523 	.word	0x08004523
 8004510:	08004541 	.word	0x08004541
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004514:	4b67      	ldr	r3, [pc, #412]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004518:	4a66      	ldr	r2, [pc, #408]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800451a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800451e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004520:	e00f      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004526:	3308      	adds	r3, #8
 8004528:	2102      	movs	r1, #2
 800452a:	4618      	mov	r0, r3
 800452c:	f001 f902 	bl	8005734 <RCCEx_PLL2_Config>
 8004530:	4603      	mov	r3, r0
 8004532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004536:	e004      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800453e:	e000      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10a      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800454a:	4b5a      	ldr	r3, [pc, #360]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800454c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800454e:	f023 0103 	bic.w	r1, r3, #3
 8004552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004558:	4a56      	ldr	r2, [pc, #344]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800455a:	430b      	orrs	r3, r1
 800455c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800455e:	e003      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004560:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004564:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004570:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004574:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004578:	2300      	movs	r3, #0
 800457a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800457e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004582:	460b      	mov	r3, r1
 8004584:	4313      	orrs	r3, r2
 8004586:	f000 809f 	beq.w	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800458a:	4b4b      	ldr	r3, [pc, #300]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a4a      	ldr	r2, [pc, #296]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004594:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004596:	f7fc fdc9 	bl	800112c <HAL_GetTick>
 800459a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800459e:	e00b      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a0:	f7fc fdc4 	bl	800112c <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b64      	cmp	r3, #100	@ 0x64
 80045ae:	d903      	bls.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045b6:	e005      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045b8:	4b3f      	ldr	r3, [pc, #252]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0ed      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80045c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d179      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80045cc:	4b39      	ldr	r3, [pc, #228]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80045d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80045d8:	4053      	eors	r3, r2
 80045da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d015      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045e2:	4b34      	ldr	r3, [pc, #208]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045ee:	4b31      	ldr	r3, [pc, #196]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f2:	4a30      	ldr	r2, [pc, #192]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045f8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045fa:	4b2e      	ldr	r3, [pc, #184]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045fe:	4a2d      	ldr	r2, [pc, #180]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004600:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004604:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004606:	4a2b      	ldr	r2, [pc, #172]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004608:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800460c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800460e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004612:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004616:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800461a:	d118      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461c:	f7fc fd86 	bl	800112c <HAL_GetTick>
 8004620:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004624:	e00d      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004626:	f7fc fd81 	bl	800112c <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004630:	1ad2      	subs	r2, r2, r3
 8004632:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004636:	429a      	cmp	r2, r3
 8004638:	d903      	bls.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004640:	e005      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004642:	4b1c      	ldr	r3, [pc, #112]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0eb      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800464e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004652:	2b00      	cmp	r3, #0
 8004654:	d129      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800465a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800465e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004662:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004666:	d10e      	bne.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004668:	4b12      	ldr	r3, [pc, #72]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004674:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004678:	091a      	lsrs	r2, r3, #4
 800467a:	4b10      	ldr	r3, [pc, #64]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800467c:	4013      	ands	r3, r2
 800467e:	4a0d      	ldr	r2, [pc, #52]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004680:	430b      	orrs	r3, r1
 8004682:	6113      	str	r3, [r2, #16]
 8004684:	e005      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004686:	4b0b      	ldr	r3, [pc, #44]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	4a0a      	ldr	r2, [pc, #40]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800468c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004690:	6113      	str	r3, [r2, #16]
 8004692:	4b08      	ldr	r3, [pc, #32]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004694:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800469e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a2:	4a04      	ldr	r2, [pc, #16]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046a4:	430b      	orrs	r3, r1
 80046a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80046a8:	e00e      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80046b2:	e009      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80046b4:	58024400 	.word	0x58024400
 80046b8:	58024800 	.word	0x58024800
 80046bc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80046c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d0:	f002 0301 	and.w	r3, r2, #1
 80046d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046d8:	2300      	movs	r3, #0
 80046da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80046e2:	460b      	mov	r3, r1
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f000 8089 	beq.w	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80046ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046f0:	2b28      	cmp	r3, #40	@ 0x28
 80046f2:	d86b      	bhi.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80046f4:	a201      	add	r2, pc, #4	@ (adr r2, 80046fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80046f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fa:	bf00      	nop
 80046fc:	080047d5 	.word	0x080047d5
 8004700:	080047cd 	.word	0x080047cd
 8004704:	080047cd 	.word	0x080047cd
 8004708:	080047cd 	.word	0x080047cd
 800470c:	080047cd 	.word	0x080047cd
 8004710:	080047cd 	.word	0x080047cd
 8004714:	080047cd 	.word	0x080047cd
 8004718:	080047cd 	.word	0x080047cd
 800471c:	080047a1 	.word	0x080047a1
 8004720:	080047cd 	.word	0x080047cd
 8004724:	080047cd 	.word	0x080047cd
 8004728:	080047cd 	.word	0x080047cd
 800472c:	080047cd 	.word	0x080047cd
 8004730:	080047cd 	.word	0x080047cd
 8004734:	080047cd 	.word	0x080047cd
 8004738:	080047cd 	.word	0x080047cd
 800473c:	080047b7 	.word	0x080047b7
 8004740:	080047cd 	.word	0x080047cd
 8004744:	080047cd 	.word	0x080047cd
 8004748:	080047cd 	.word	0x080047cd
 800474c:	080047cd 	.word	0x080047cd
 8004750:	080047cd 	.word	0x080047cd
 8004754:	080047cd 	.word	0x080047cd
 8004758:	080047cd 	.word	0x080047cd
 800475c:	080047d5 	.word	0x080047d5
 8004760:	080047cd 	.word	0x080047cd
 8004764:	080047cd 	.word	0x080047cd
 8004768:	080047cd 	.word	0x080047cd
 800476c:	080047cd 	.word	0x080047cd
 8004770:	080047cd 	.word	0x080047cd
 8004774:	080047cd 	.word	0x080047cd
 8004778:	080047cd 	.word	0x080047cd
 800477c:	080047d5 	.word	0x080047d5
 8004780:	080047cd 	.word	0x080047cd
 8004784:	080047cd 	.word	0x080047cd
 8004788:	080047cd 	.word	0x080047cd
 800478c:	080047cd 	.word	0x080047cd
 8004790:	080047cd 	.word	0x080047cd
 8004794:	080047cd 	.word	0x080047cd
 8004798:	080047cd 	.word	0x080047cd
 800479c:	080047d5 	.word	0x080047d5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a4:	3308      	adds	r3, #8
 80047a6:	2101      	movs	r1, #1
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 ffc3 	bl	8005734 <RCCEx_PLL2_Config>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80047b4:	e00f      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ba:	3328      	adds	r3, #40	@ 0x28
 80047bc:	2101      	movs	r1, #1
 80047be:	4618      	mov	r0, r3
 80047c0:	f001 f86a 	bl	8005898 <RCCEx_PLL3_Config>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80047ca:	e004      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047d2:	e000      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80047d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10a      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80047de:	4bbf      	ldr	r3, [pc, #764]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80047e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047ec:	4abb      	ldr	r2, [pc, #748]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047ee:	430b      	orrs	r3, r1
 80047f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80047f2:	e003      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80047fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004804:	f002 0302 	and.w	r3, r2, #2
 8004808:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800480c:	2300      	movs	r3, #0
 800480e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004812:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004816:	460b      	mov	r3, r1
 8004818:	4313      	orrs	r3, r2
 800481a:	d041      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800481c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004820:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004822:	2b05      	cmp	r3, #5
 8004824:	d824      	bhi.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004826:	a201      	add	r2, pc, #4	@ (adr r2, 800482c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482c:	08004879 	.word	0x08004879
 8004830:	08004845 	.word	0x08004845
 8004834:	0800485b 	.word	0x0800485b
 8004838:	08004879 	.word	0x08004879
 800483c:	08004879 	.word	0x08004879
 8004840:	08004879 	.word	0x08004879
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004848:	3308      	adds	r3, #8
 800484a:	2101      	movs	r1, #1
 800484c:	4618      	mov	r0, r3
 800484e:	f000 ff71 	bl	8005734 <RCCEx_PLL2_Config>
 8004852:	4603      	mov	r3, r0
 8004854:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004858:	e00f      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800485a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485e:	3328      	adds	r3, #40	@ 0x28
 8004860:	2101      	movs	r1, #1
 8004862:	4618      	mov	r0, r3
 8004864:	f001 f818 	bl	8005898 <RCCEx_PLL3_Config>
 8004868:	4603      	mov	r3, r0
 800486a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800486e:	e004      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004876:	e000      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800487a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10a      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004882:	4b96      	ldr	r3, [pc, #600]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004886:	f023 0107 	bic.w	r1, r3, #7
 800488a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004890:	4a92      	ldr	r2, [pc, #584]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004892:	430b      	orrs	r3, r1
 8004894:	6553      	str	r3, [r2, #84]	@ 0x54
 8004896:	e003      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004898:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800489c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a8:	f002 0304 	and.w	r3, r2, #4
 80048ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048b0:	2300      	movs	r3, #0
 80048b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4313      	orrs	r3, r2
 80048be:	d044      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80048c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048c8:	2b05      	cmp	r3, #5
 80048ca:	d825      	bhi.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80048cc:	a201      	add	r2, pc, #4	@ (adr r2, 80048d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80048ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d2:	bf00      	nop
 80048d4:	08004921 	.word	0x08004921
 80048d8:	080048ed 	.word	0x080048ed
 80048dc:	08004903 	.word	0x08004903
 80048e0:	08004921 	.word	0x08004921
 80048e4:	08004921 	.word	0x08004921
 80048e8:	08004921 	.word	0x08004921
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f0:	3308      	adds	r3, #8
 80048f2:	2101      	movs	r1, #1
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 ff1d 	bl	8005734 <RCCEx_PLL2_Config>
 80048fa:	4603      	mov	r3, r0
 80048fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004900:	e00f      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004906:	3328      	adds	r3, #40	@ 0x28
 8004908:	2101      	movs	r1, #1
 800490a:	4618      	mov	r0, r3
 800490c:	f000 ffc4 	bl	8005898 <RCCEx_PLL3_Config>
 8004910:	4603      	mov	r3, r0
 8004912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004916:	e004      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800491e:	e000      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004920:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10b      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800492a:	4b6c      	ldr	r3, [pc, #432]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800492c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800492e:	f023 0107 	bic.w	r1, r3, #7
 8004932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004936:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800493a:	4a68      	ldr	r2, [pc, #416]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800493c:	430b      	orrs	r3, r1
 800493e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004940:	e003      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004946:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800494a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004952:	f002 0320 	and.w	r3, r2, #32
 8004956:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800495a:	2300      	movs	r3, #0
 800495c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004960:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004964:	460b      	mov	r3, r1
 8004966:	4313      	orrs	r3, r2
 8004968:	d055      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800496a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800496e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004972:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004976:	d033      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004978:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800497c:	d82c      	bhi.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800497e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004982:	d02f      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004988:	d826      	bhi.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800498a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800498e:	d02b      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004990:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004994:	d820      	bhi.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004996:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800499a:	d012      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800499c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049a0:	d81a      	bhi.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d022      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80049a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049aa:	d115      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b0:	3308      	adds	r3, #8
 80049b2:	2100      	movs	r1, #0
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 febd 	bl	8005734 <RCCEx_PLL2_Config>
 80049ba:	4603      	mov	r3, r0
 80049bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80049c0:	e015      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c6:	3328      	adds	r3, #40	@ 0x28
 80049c8:	2102      	movs	r1, #2
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 ff64 	bl	8005898 <RCCEx_PLL3_Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80049d6:	e00a      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049de:	e006      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80049e0:	bf00      	nop
 80049e2:	e004      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80049e4:	bf00      	nop
 80049e6:	e002      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80049e8:	bf00      	nop
 80049ea:	e000      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80049ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10b      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049f6:	4b39      	ldr	r3, [pc, #228]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80049fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a06:	4a35      	ldr	r2, [pc, #212]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a08:	430b      	orrs	r3, r1
 8004a0a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a0c:	e003      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004a22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a26:	2300      	movs	r3, #0
 8004a28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004a2c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004a30:	460b      	mov	r3, r1
 8004a32:	4313      	orrs	r3, r2
 8004a34:	d058      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a3e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004a42:	d033      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004a44:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004a48:	d82c      	bhi.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a4e:	d02f      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a54:	d826      	bhi.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a5a:	d02b      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004a5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a60:	d820      	bhi.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a66:	d012      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004a68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a6c:	d81a      	bhi.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d022      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a76:	d115      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a7c:	3308      	adds	r3, #8
 8004a7e:	2100      	movs	r1, #0
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fe57 	bl	8005734 <RCCEx_PLL2_Config>
 8004a86:	4603      	mov	r3, r0
 8004a88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a8c:	e015      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a92:	3328      	adds	r3, #40	@ 0x28
 8004a94:	2102      	movs	r1, #2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fefe 	bl	8005898 <RCCEx_PLL3_Config>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004aa2:	e00a      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004aaa:	e006      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004aac:	bf00      	nop
 8004aae:	e004      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004ab0:	bf00      	nop
 8004ab2:	e002      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004ab4:	bf00      	nop
 8004ab6:	e000      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10e      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ac2:	4b06      	ldr	r3, [pc, #24]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ac6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ace:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ad2:	4a02      	ldr	r2, [pc, #8]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ad8:	e006      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004ada:	bf00      	nop
 8004adc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ae4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004af4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004af8:	2300      	movs	r3, #0
 8004afa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004afe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004b02:	460b      	mov	r3, r1
 8004b04:	4313      	orrs	r3, r2
 8004b06:	d055      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004b10:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004b14:	d033      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004b16:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004b1a:	d82c      	bhi.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004b1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b20:	d02f      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004b22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b26:	d826      	bhi.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004b28:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004b2c:	d02b      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004b2e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004b32:	d820      	bhi.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004b34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b38:	d012      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004b3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b3e:	d81a      	bhi.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d022      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004b44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b48:	d115      	bne.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4e:	3308      	adds	r3, #8
 8004b50:	2100      	movs	r1, #0
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fdee 	bl	8005734 <RCCEx_PLL2_Config>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b5e:	e015      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b64:	3328      	adds	r3, #40	@ 0x28
 8004b66:	2102      	movs	r1, #2
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fe95 	bl	8005898 <RCCEx_PLL3_Config>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b74:	e00a      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b7c:	e006      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b7e:	bf00      	nop
 8004b80:	e004      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b82:	bf00      	nop
 8004b84:	e002      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b86:	bf00      	nop
 8004b88:	e000      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10b      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b94:	4ba1      	ldr	r3, [pc, #644]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b98:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004ba4:	4a9d      	ldr	r2, [pc, #628]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ba6:	430b      	orrs	r3, r1
 8004ba8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004baa:	e003      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbc:	f002 0308 	and.w	r3, r2, #8
 8004bc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004bca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	d01e      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004be0:	d10c      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be6:	3328      	adds	r3, #40	@ 0x28
 8004be8:	2102      	movs	r1, #2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fe54 	bl	8005898 <RCCEx_PLL3_Config>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004bfc:	4b87      	ldr	r3, [pc, #540]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c00:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c0c:	4a83      	ldr	r2, [pc, #524]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c0e:	430b      	orrs	r3, r1
 8004c10:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1a:	f002 0310 	and.w	r3, r2, #16
 8004c1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c22:	2300      	movs	r3, #0
 8004c24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004c28:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	d01e      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c3e:	d10c      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c44:	3328      	adds	r3, #40	@ 0x28
 8004c46:	2102      	movs	r1, #2
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 fe25 	bl	8005898 <RCCEx_PLL3_Config>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c5a:	4b70      	ldr	r3, [pc, #448]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c6a:	4a6c      	ldr	r2, [pc, #432]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c78:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004c7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c80:	2300      	movs	r3, #0
 8004c82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c86:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	d03e      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c9c:	d022      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004c9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ca2:	d81b      	bhi.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d003      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cac:	d00b      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004cae:	e015      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb4:	3308      	adds	r3, #8
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 fd3b 	bl	8005734 <RCCEx_PLL2_Config>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004cc4:	e00f      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cca:	3328      	adds	r3, #40	@ 0x28
 8004ccc:	2102      	movs	r1, #2
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fde2 	bl	8005898 <RCCEx_PLL3_Config>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004cda:	e004      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ce2:	e000      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10b      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cee:	4b4b      	ldr	r3, [pc, #300]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cfa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004cfe:	4a47      	ldr	r2, [pc, #284]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d00:	430b      	orrs	r3, r1
 8004d02:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d04:	e003      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d16:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004d1a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004d20:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004d24:	460b      	mov	r3, r1
 8004d26:	4313      	orrs	r3, r2
 8004d28:	d03b      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d32:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d36:	d01f      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004d38:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d3c:	d818      	bhi.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004d3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d42:	d003      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004d44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d48:	d007      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004d4a:	e011      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d4c:	4b33      	ldr	r3, [pc, #204]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d50:	4a32      	ldr	r2, [pc, #200]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d58:	e00f      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d5e:	3328      	adds	r3, #40	@ 0x28
 8004d60:	2101      	movs	r1, #1
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fd98 	bl	8005898 <RCCEx_PLL3_Config>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d6e:	e004      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d76:	e000      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10b      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d82:	4b26      	ldr	r3, [pc, #152]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d86:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d92:	4a22      	ldr	r2, [pc, #136]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d94:	430b      	orrs	r3, r1
 8004d96:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d98:	e003      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004daa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004dae:	673b      	str	r3, [r7, #112]	@ 0x70
 8004db0:	2300      	movs	r3, #0
 8004db2:	677b      	str	r3, [r7, #116]	@ 0x74
 8004db4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004db8:	460b      	mov	r3, r1
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	d034      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dcc:	d007      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004dce:	e011      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dd0:	4b12      	ldr	r3, [pc, #72]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd4:	4a11      	ldr	r2, [pc, #68]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004dd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ddc:	e00e      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de2:	3308      	adds	r3, #8
 8004de4:	2102      	movs	r1, #2
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fca4 	bl	8005734 <RCCEx_PLL2_Config>
 8004dec:	4603      	mov	r3, r0
 8004dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004df2:	e003      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10d      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004e04:	4b05      	ldr	r3, [pc, #20]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e08:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e12:	4a02      	ldr	r2, [pc, #8]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e14:	430b      	orrs	r3, r1
 8004e16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e18:	e006      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004e1a:	bf00      	nop
 8004e1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e30:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004e34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e36:	2300      	movs	r3, #0
 8004e38:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e3a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4313      	orrs	r3, r2
 8004e42:	d00c      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e48:	3328      	adds	r3, #40	@ 0x28
 8004e4a:	2102      	movs	r1, #2
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fd23 	bl	8005898 <RCCEx_PLL3_Config>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004e6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e70:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004e74:	460b      	mov	r3, r1
 8004e76:	4313      	orrs	r3, r2
 8004e78:	d038      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e86:	d018      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004e88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e8c:	d811      	bhi.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004e8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e92:	d014      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004e94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e98:	d80b      	bhi.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d011      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004e9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ea2:	d106      	bne.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ea4:	4bc3      	ldr	r3, [pc, #780]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea8:	4ac2      	ldr	r2, [pc, #776]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004eae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004eb8:	e004      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004eba:	bf00      	nop
 8004ebc:	e002      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004ebe:	bf00      	nop
 8004ec0:	e000      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004ec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10b      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ecc:	4bb9      	ldr	r3, [pc, #740]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ed0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004edc:	4ab5      	ldr	r2, [pc, #724]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ede:	430b      	orrs	r3, r1
 8004ee0:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ee2:	e003      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ee8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004ef8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004efa:	2300      	movs	r3, #0
 8004efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004efe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004f02:	460b      	mov	r3, r1
 8004f04:	4313      	orrs	r3, r2
 8004f06:	d009      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f08:	4baa      	ldr	r3, [pc, #680]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f0c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f16:	4aa7      	ldr	r2, [pc, #668]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004f28:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f2e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004f32:	460b      	mov	r3, r1
 8004f34:	4313      	orrs	r3, r2
 8004f36:	d00a      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004f38:	4b9e      	ldr	r3, [pc, #632]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f44:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004f48:	4a9a      	ldr	r2, [pc, #616]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f4a:	430b      	orrs	r3, r1
 8004f4c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f56:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f60:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004f64:	460b      	mov	r3, r1
 8004f66:	4313      	orrs	r3, r2
 8004f68:	d009      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f6a:	4b92      	ldr	r3, [pc, #584]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f6e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f78:	4a8e      	ldr	r2, [pc, #568]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f7a:	430b      	orrs	r3, r1
 8004f7c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004f8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f90:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004f94:	460b      	mov	r3, r1
 8004f96:	4313      	orrs	r3, r2
 8004f98:	d00e      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f9a:	4b86      	ldr	r3, [pc, #536]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	4a85      	ldr	r2, [pc, #532]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fa0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004fa4:	6113      	str	r3, [r2, #16]
 8004fa6:	4b83      	ldr	r3, [pc, #524]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fa8:	6919      	ldr	r1, [r3, #16]
 8004faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004fb2:	4a80      	ldr	r2, [pc, #512]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	d009      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004fd4:	4b77      	ldr	r3, [pc, #476]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fd8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe2:	4a74      	ldr	r2, [pc, #464]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fe4:	430b      	orrs	r3, r1
 8004fe6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004ff4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ffa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004ffe:	460b      	mov	r3, r1
 8005000:	4313      	orrs	r3, r2
 8005002:	d00a      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005004:	4b6b      	ldr	r3, [pc, #428]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005008:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800500c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005010:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005014:	4a67      	ldr	r2, [pc, #412]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005016:	430b      	orrs	r3, r1
 8005018:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800501a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800501e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005022:	2100      	movs	r1, #0
 8005024:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800502c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005030:	460b      	mov	r3, r1
 8005032:	4313      	orrs	r3, r2
 8005034:	d011      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800503a:	3308      	adds	r3, #8
 800503c:	2100      	movs	r1, #0
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fb78 	bl	8005734 <RCCEx_PLL2_Config>
 8005044:	4603      	mov	r3, r0
 8005046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800504a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005056:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800505a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800505e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005062:	2100      	movs	r1, #0
 8005064:	6239      	str	r1, [r7, #32]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	627b      	str	r3, [r7, #36]	@ 0x24
 800506c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005070:	460b      	mov	r3, r1
 8005072:	4313      	orrs	r3, r2
 8005074:	d011      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800507a:	3308      	adds	r3, #8
 800507c:	2101      	movs	r1, #1
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fb58 	bl	8005734 <RCCEx_PLL2_Config>
 8005084:	4603      	mov	r3, r0
 8005086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800508a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005096:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800509a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800509e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a2:	2100      	movs	r1, #0
 80050a4:	61b9      	str	r1, [r7, #24]
 80050a6:	f003 0304 	and.w	r3, r3, #4
 80050aa:	61fb      	str	r3, [r7, #28]
 80050ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80050b0:	460b      	mov	r3, r1
 80050b2:	4313      	orrs	r3, r2
 80050b4:	d011      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ba:	3308      	adds	r3, #8
 80050bc:	2102      	movs	r1, #2
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fb38 	bl	8005734 <RCCEx_PLL2_Config>
 80050c4:	4603      	mov	r3, r0
 80050c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80050ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80050da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e2:	2100      	movs	r1, #0
 80050e4:	6139      	str	r1, [r7, #16]
 80050e6:	f003 0308 	and.w	r3, r3, #8
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80050f0:	460b      	mov	r3, r1
 80050f2:	4313      	orrs	r3, r2
 80050f4:	d011      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050fa:	3328      	adds	r3, #40	@ 0x28
 80050fc:	2100      	movs	r1, #0
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fbca 	bl	8005898 <RCCEx_PLL3_Config>
 8005104:	4603      	mov	r3, r0
 8005106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800510a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005116:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800511a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800511e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005122:	2100      	movs	r1, #0
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	f003 0310 	and.w	r3, r3, #16
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005130:	460b      	mov	r3, r1
 8005132:	4313      	orrs	r3, r2
 8005134:	d011      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800513a:	3328      	adds	r3, #40	@ 0x28
 800513c:	2101      	movs	r1, #1
 800513e:	4618      	mov	r0, r3
 8005140:	f000 fbaa 	bl	8005898 <RCCEx_PLL3_Config>
 8005144:	4603      	mov	r3, r0
 8005146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800514a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005152:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005156:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800515a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005162:	2100      	movs	r1, #0
 8005164:	6039      	str	r1, [r7, #0]
 8005166:	f003 0320 	and.w	r3, r3, #32
 800516a:	607b      	str	r3, [r7, #4]
 800516c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005170:	460b      	mov	r3, r1
 8005172:	4313      	orrs	r3, r2
 8005174:	d011      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800517a:	3328      	adds	r3, #40	@ 0x28
 800517c:	2102      	movs	r1, #2
 800517e:	4618      	mov	r0, r3
 8005180:	f000 fb8a 	bl	8005898 <RCCEx_PLL3_Config>
 8005184:	4603      	mov	r3, r0
 8005186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800518a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005196:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800519a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	e000      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80051ae:	46bd      	mov	sp, r7
 80051b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051b4:	58024400 	.word	0x58024400

080051b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80051bc:	f7fe fd96 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 80051c0:	4602      	mov	r2, r0
 80051c2:	4b06      	ldr	r3, [pc, #24]	@ (80051dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	091b      	lsrs	r3, r3, #4
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	4904      	ldr	r1, [pc, #16]	@ (80051e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80051ce:	5ccb      	ldrb	r3, [r1, r3]
 80051d0:	f003 031f 	and.w	r3, r3, #31
 80051d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80051d8:	4618      	mov	r0, r3
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	58024400 	.word	0x58024400
 80051e0:	08008c28 	.word	0x08008c28

080051e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b089      	sub	sp, #36	@ 0x24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051ec:	4ba1      	ldr	r3, [pc, #644]	@ (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f0:	f003 0303 	and.w	r3, r3, #3
 80051f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80051f6:	4b9f      	ldr	r3, [pc, #636]	@ (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fa:	0b1b      	lsrs	r3, r3, #12
 80051fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005200:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005202:	4b9c      	ldr	r3, [pc, #624]	@ (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005206:	091b      	lsrs	r3, r3, #4
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800520e:	4b99      	ldr	r3, [pc, #612]	@ (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005212:	08db      	lsrs	r3, r3, #3
 8005214:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	fb02 f303 	mul.w	r3, r2, r3
 800521e:	ee07 3a90 	vmov	s15, r3
 8005222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005226:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 8111 	beq.w	8005454 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	2b02      	cmp	r3, #2
 8005236:	f000 8083 	beq.w	8005340 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	2b02      	cmp	r3, #2
 800523e:	f200 80a1 	bhi.w	8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d056      	beq.n	80052fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800524e:	e099      	b.n	8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005250:	4b88      	ldr	r3, [pc, #544]	@ (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0320 	and.w	r3, r3, #32
 8005258:	2b00      	cmp	r3, #0
 800525a:	d02d      	beq.n	80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800525c:	4b85      	ldr	r3, [pc, #532]	@ (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	08db      	lsrs	r3, r3, #3
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	4a84      	ldr	r2, [pc, #528]	@ (8005478 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005268:	fa22 f303 	lsr.w	r3, r2, r3
 800526c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	ee07 3a90 	vmov	s15, r3
 8005274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	ee07 3a90 	vmov	s15, r3
 800527e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005286:	4b7b      	ldr	r3, [pc, #492]	@ (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800528e:	ee07 3a90 	vmov	s15, r3
 8005292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005296:	ed97 6a03 	vldr	s12, [r7, #12]
 800529a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800547c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800529e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80052b6:	e087      	b.n	80053c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	ee07 3a90 	vmov	s15, r3
 80052be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80052c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ca:	4b6a      	ldr	r3, [pc, #424]	@ (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d2:	ee07 3a90 	vmov	s15, r3
 80052d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052da:	ed97 6a03 	vldr	s12, [r7, #12]
 80052de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800547c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052fa:	e065      	b.n	80053c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	ee07 3a90 	vmov	s15, r3
 8005302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005306:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005484 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800530a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800530e:	4b59      	ldr	r3, [pc, #356]	@ (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005316:	ee07 3a90 	vmov	s15, r3
 800531a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800531e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005322:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800547c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800532a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800532e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800533a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800533e:	e043      	b.n	80053c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	ee07 3a90 	vmov	s15, r3
 8005346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800534a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800534e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005352:	4b48      	ldr	r3, [pc, #288]	@ (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800535a:	ee07 3a90 	vmov	s15, r3
 800535e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005362:	ed97 6a03 	vldr	s12, [r7, #12]
 8005366:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800547c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800536a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800536e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800537a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800537e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005382:	e021      	b.n	80053c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	ee07 3a90 	vmov	s15, r3
 800538a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800538e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005484 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005396:	4b37      	ldr	r3, [pc, #220]	@ (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800539e:	ee07 3a90 	vmov	s15, r3
 80053a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80053aa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800547c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80053c8:	4b2a      	ldr	r3, [pc, #168]	@ (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053cc:	0a5b      	lsrs	r3, r3, #9
 80053ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053d2:	ee07 3a90 	vmov	s15, r3
 80053d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80053e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053ee:	ee17 2a90 	vmov	r2, s15
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80053f6:	4b1f      	ldr	r3, [pc, #124]	@ (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fa:	0c1b      	lsrs	r3, r3, #16
 80053fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005400:	ee07 3a90 	vmov	s15, r3
 8005404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005408:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800540c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005410:	edd7 6a07 	vldr	s13, [r7, #28]
 8005414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800541c:	ee17 2a90 	vmov	r2, s15
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005424:	4b13      	ldr	r3, [pc, #76]	@ (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005428:	0e1b      	lsrs	r3, r3, #24
 800542a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800542e:	ee07 3a90 	vmov	s15, r3
 8005432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005436:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800543a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800543e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800544a:	ee17 2a90 	vmov	r2, s15
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005452:	e008      	b.n	8005466 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	609a      	str	r2, [r3, #8]
}
 8005466:	bf00      	nop
 8005468:	3724      	adds	r7, #36	@ 0x24
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	58024400 	.word	0x58024400
 8005478:	03d09000 	.word	0x03d09000
 800547c:	46000000 	.word	0x46000000
 8005480:	4c742400 	.word	0x4c742400
 8005484:	4a742400 	.word	0x4a742400
 8005488:	4af42400 	.word	0x4af42400

0800548c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800548c:	b480      	push	{r7}
 800548e:	b089      	sub	sp, #36	@ 0x24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005494:	4ba1      	ldr	r3, [pc, #644]	@ (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005498:	f003 0303 	and.w	r3, r3, #3
 800549c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800549e:	4b9f      	ldr	r3, [pc, #636]	@ (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a2:	0d1b      	lsrs	r3, r3, #20
 80054a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80054aa:	4b9c      	ldr	r3, [pc, #624]	@ (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ae:	0a1b      	lsrs	r3, r3, #8
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80054b6:	4b99      	ldr	r3, [pc, #612]	@ (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ba:	08db      	lsrs	r3, r3, #3
 80054bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	fb02 f303 	mul.w	r3, r2, r3
 80054c6:	ee07 3a90 	vmov	s15, r3
 80054ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 8111 	beq.w	80056fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	f000 8083 	beq.w	80055e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	f200 80a1 	bhi.w	800562c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d056      	beq.n	80055a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80054f6:	e099      	b.n	800562c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054f8:	4b88      	ldr	r3, [pc, #544]	@ (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b00      	cmp	r3, #0
 8005502:	d02d      	beq.n	8005560 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005504:	4b85      	ldr	r3, [pc, #532]	@ (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	08db      	lsrs	r3, r3, #3
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	4a84      	ldr	r2, [pc, #528]	@ (8005720 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005510:	fa22 f303 	lsr.w	r3, r2, r3
 8005514:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	ee07 3a90 	vmov	s15, r3
 800551c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	ee07 3a90 	vmov	s15, r3
 8005526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800552a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800552e:	4b7b      	ldr	r3, [pc, #492]	@ (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800553e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005542:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800554a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800554e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800555a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800555e:	e087      	b.n	8005670 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	ee07 3a90 	vmov	s15, r3
 8005566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005728 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800556e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005572:	4b6a      	ldr	r3, [pc, #424]	@ (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800557a:	ee07 3a90 	vmov	s15, r3
 800557e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005582:	ed97 6a03 	vldr	s12, [r7, #12]
 8005586:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800558a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800558e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800559a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800559e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055a2:	e065      	b.n	8005670 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	ee07 3a90 	vmov	s15, r3
 80055aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800572c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80055b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055b6:	4b59      	ldr	r3, [pc, #356]	@ (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055be:	ee07 3a90 	vmov	s15, r3
 80055c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80055ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055e6:	e043      	b.n	8005670 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005730 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80055f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055fa:	4b48      	ldr	r3, [pc, #288]	@ (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800560a:	ed97 6a03 	vldr	s12, [r7, #12]
 800560e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800561a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800561e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800562a:	e021      	b.n	8005670 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	ee07 3a90 	vmov	s15, r3
 8005632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005636:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800572c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800563a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800563e:	4b37      	ldr	r3, [pc, #220]	@ (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005646:	ee07 3a90 	vmov	s15, r3
 800564a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800564e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005652:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800565a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800565e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800566a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800566e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005670:	4b2a      	ldr	r3, [pc, #168]	@ (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005674:	0a5b      	lsrs	r3, r3, #9
 8005676:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800567a:	ee07 3a90 	vmov	s15, r3
 800567e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005682:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005686:	ee37 7a87 	vadd.f32	s14, s15, s14
 800568a:	edd7 6a07 	vldr	s13, [r7, #28]
 800568e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005696:	ee17 2a90 	vmov	r2, s15
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800569e:	4b1f      	ldr	r3, [pc, #124]	@ (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a2:	0c1b      	lsrs	r3, r3, #16
 80056a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056a8:	ee07 3a90 	vmov	s15, r3
 80056ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80056b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80056bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056c4:	ee17 2a90 	vmov	r2, s15
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80056cc:	4b13      	ldr	r3, [pc, #76]	@ (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d0:	0e1b      	lsrs	r3, r3, #24
 80056d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056d6:	ee07 3a90 	vmov	s15, r3
 80056da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80056e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80056ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056f2:	ee17 2a90 	vmov	r2, s15
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80056fa:	e008      	b.n	800570e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	609a      	str	r2, [r3, #8]
}
 800570e:	bf00      	nop
 8005710:	3724      	adds	r7, #36	@ 0x24
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	58024400 	.word	0x58024400
 8005720:	03d09000 	.word	0x03d09000
 8005724:	46000000 	.word	0x46000000
 8005728:	4c742400 	.word	0x4c742400
 800572c:	4a742400 	.word	0x4a742400
 8005730:	4af42400 	.word	0x4af42400

08005734 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005742:	4b53      	ldr	r3, [pc, #332]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 8005744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005746:	f003 0303 	and.w	r3, r3, #3
 800574a:	2b03      	cmp	r3, #3
 800574c:	d101      	bne.n	8005752 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e099      	b.n	8005886 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005752:	4b4f      	ldr	r3, [pc, #316]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a4e      	ldr	r2, [pc, #312]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 8005758:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800575c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800575e:	f7fb fce5 	bl	800112c <HAL_GetTick>
 8005762:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005764:	e008      	b.n	8005778 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005766:	f7fb fce1 	bl	800112c <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e086      	b.n	8005886 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005778:	4b45      	ldr	r3, [pc, #276]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1f0      	bne.n	8005766 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005784:	4b42      	ldr	r3, [pc, #264]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 8005786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005788:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	031b      	lsls	r3, r3, #12
 8005792:	493f      	ldr	r1, [pc, #252]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 8005794:	4313      	orrs	r3, r2
 8005796:	628b      	str	r3, [r1, #40]	@ 0x28
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	3b01      	subs	r3, #1
 800579e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	025b      	lsls	r3, r3, #9
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	431a      	orrs	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	3b01      	subs	r3, #1
 80057b4:	041b      	lsls	r3, r3, #16
 80057b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80057ba:	431a      	orrs	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	061b      	lsls	r3, r3, #24
 80057c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80057c8:	4931      	ldr	r1, [pc, #196]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80057ce:	4b30      	ldr	r3, [pc, #192]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 80057d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	492d      	ldr	r1, [pc, #180]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80057e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 80057e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e4:	f023 0220 	bic.w	r2, r3, #32
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	4928      	ldr	r1, [pc, #160]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80057f2:	4b27      	ldr	r3, [pc, #156]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 80057f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f6:	4a26      	ldr	r2, [pc, #152]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 80057f8:	f023 0310 	bic.w	r3, r3, #16
 80057fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80057fe:	4b24      	ldr	r3, [pc, #144]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 8005800:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005802:	4b24      	ldr	r3, [pc, #144]	@ (8005894 <RCCEx_PLL2_Config+0x160>)
 8005804:	4013      	ands	r3, r2
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	69d2      	ldr	r2, [r2, #28]
 800580a:	00d2      	lsls	r2, r2, #3
 800580c:	4920      	ldr	r1, [pc, #128]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 800580e:	4313      	orrs	r3, r2
 8005810:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005812:	4b1f      	ldr	r3, [pc, #124]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 8005814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005816:	4a1e      	ldr	r2, [pc, #120]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 8005818:	f043 0310 	orr.w	r3, r3, #16
 800581c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d106      	bne.n	8005832 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005824:	4b1a      	ldr	r3, [pc, #104]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 8005826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005828:	4a19      	ldr	r2, [pc, #100]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 800582a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800582e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005830:	e00f      	b.n	8005852 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d106      	bne.n	8005846 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005838:	4b15      	ldr	r3, [pc, #84]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 800583a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583c:	4a14      	ldr	r2, [pc, #80]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 800583e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005842:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005844:	e005      	b.n	8005852 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005846:	4b12      	ldr	r3, [pc, #72]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 8005848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800584a:	4a11      	ldr	r2, [pc, #68]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 800584c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005850:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005852:	4b0f      	ldr	r3, [pc, #60]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a0e      	ldr	r2, [pc, #56]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 8005858:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800585c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800585e:	f7fb fc65 	bl	800112c <HAL_GetTick>
 8005862:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005864:	e008      	b.n	8005878 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005866:	f7fb fc61 	bl	800112c <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d901      	bls.n	8005878 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e006      	b.n	8005886 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005878:	4b05      	ldr	r3, [pc, #20]	@ (8005890 <RCCEx_PLL2_Config+0x15c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0f0      	beq.n	8005866 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005884:	7bfb      	ldrb	r3, [r7, #15]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	58024400 	.word	0x58024400
 8005894:	ffff0007 	.word	0xffff0007

08005898 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058a2:	2300      	movs	r3, #0
 80058a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80058a6:	4b53      	ldr	r3, [pc, #332]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 80058a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058aa:	f003 0303 	and.w	r3, r3, #3
 80058ae:	2b03      	cmp	r3, #3
 80058b0:	d101      	bne.n	80058b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e099      	b.n	80059ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80058b6:	4b4f      	ldr	r3, [pc, #316]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a4e      	ldr	r2, [pc, #312]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 80058bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058c2:	f7fb fc33 	bl	800112c <HAL_GetTick>
 80058c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80058c8:	e008      	b.n	80058dc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80058ca:	f7fb fc2f 	bl	800112c <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d901      	bls.n	80058dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e086      	b.n	80059ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80058dc:	4b45      	ldr	r3, [pc, #276]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1f0      	bne.n	80058ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80058e8:	4b42      	ldr	r3, [pc, #264]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 80058ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ec:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	051b      	lsls	r3, r3, #20
 80058f6:	493f      	ldr	r1, [pc, #252]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	3b01      	subs	r3, #1
 8005902:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	3b01      	subs	r3, #1
 800590c:	025b      	lsls	r3, r3, #9
 800590e:	b29b      	uxth	r3, r3
 8005910:	431a      	orrs	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	3b01      	subs	r3, #1
 8005918:	041b      	lsls	r3, r3, #16
 800591a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	3b01      	subs	r3, #1
 8005926:	061b      	lsls	r3, r3, #24
 8005928:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800592c:	4931      	ldr	r1, [pc, #196]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 800592e:	4313      	orrs	r3, r2
 8005930:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005932:	4b30      	ldr	r3, [pc, #192]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 8005934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005936:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	492d      	ldr	r1, [pc, #180]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 8005940:	4313      	orrs	r3, r2
 8005942:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005944:	4b2b      	ldr	r3, [pc, #172]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 8005946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005948:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	4928      	ldr	r1, [pc, #160]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 8005952:	4313      	orrs	r3, r2
 8005954:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005956:	4b27      	ldr	r3, [pc, #156]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 8005958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595a:	4a26      	ldr	r2, [pc, #152]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 800595c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005960:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005962:	4b24      	ldr	r3, [pc, #144]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 8005964:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005966:	4b24      	ldr	r3, [pc, #144]	@ (80059f8 <RCCEx_PLL3_Config+0x160>)
 8005968:	4013      	ands	r3, r2
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	69d2      	ldr	r2, [r2, #28]
 800596e:	00d2      	lsls	r2, r2, #3
 8005970:	4920      	ldr	r1, [pc, #128]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 8005972:	4313      	orrs	r3, r2
 8005974:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005976:	4b1f      	ldr	r3, [pc, #124]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 8005978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597a:	4a1e      	ldr	r2, [pc, #120]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 800597c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005980:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d106      	bne.n	8005996 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005988:	4b1a      	ldr	r3, [pc, #104]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 800598a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598c:	4a19      	ldr	r2, [pc, #100]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 800598e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005992:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005994:	e00f      	b.n	80059b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d106      	bne.n	80059aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800599c:	4b15      	ldr	r3, [pc, #84]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 800599e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a0:	4a14      	ldr	r2, [pc, #80]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 80059a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80059a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80059a8:	e005      	b.n	80059b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80059aa:	4b12      	ldr	r3, [pc, #72]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 80059ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ae:	4a11      	ldr	r2, [pc, #68]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 80059b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80059b6:	4b0f      	ldr	r3, [pc, #60]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a0e      	ldr	r2, [pc, #56]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 80059bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059c2:	f7fb fbb3 	bl	800112c <HAL_GetTick>
 80059c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80059c8:	e008      	b.n	80059dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80059ca:	f7fb fbaf 	bl	800112c <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e006      	b.n	80059ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80059dc:	4b05      	ldr	r3, [pc, #20]	@ (80059f4 <RCCEx_PLL3_Config+0x15c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0f0      	beq.n	80059ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	58024400 	.word	0x58024400
 80059f8:	ffff0007 	.word	0xffff0007

080059fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e042      	b.n	8005a94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d106      	bne.n	8005a26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7fb f9b3 	bl	8000d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2224      	movs	r2, #36	@ 0x24
 8005a2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 0201 	bic.w	r2, r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f001 fa4a 	bl	8006ee0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fcdf 	bl	8006410 <UART_SetConfig>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d101      	bne.n	8005a5c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e01b      	b.n	8005a94 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689a      	ldr	r2, [r3, #8]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0201 	orr.w	r2, r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f001 fac9 	bl	8007024 <UART_CheckIdleState>
 8005a92:	4603      	mov	r3, r0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3708      	adds	r7, #8
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b091      	sub	sp, #68	@ 0x44
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab0:	2b20      	cmp	r3, #32
 8005ab2:	d178      	bne.n	8005ba6 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <HAL_UART_Transmit_IT+0x24>
 8005aba:	88fb      	ldrh	r3, [r7, #6]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e071      	b.n	8005ba8 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	88fa      	ldrh	r2, [r7, #6]
 8005ace:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	88fa      	ldrh	r2, [r7, #6]
 8005ad6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2221      	movs	r2, #33	@ 0x21
 8005aec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005af4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005af8:	d12a      	bne.n	8005b50 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b02:	d107      	bne.n	8005b14 <HAL_UART_Transmit_IT+0x78>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d103      	bne.n	8005b14 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4a29      	ldr	r2, [pc, #164]	@ (8005bb4 <HAL_UART_Transmit_IT+0x118>)
 8005b10:	679a      	str	r2, [r3, #120]	@ 0x78
 8005b12:	e002      	b.n	8005b1a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4a28      	ldr	r2, [pc, #160]	@ (8005bb8 <HAL_UART_Transmit_IT+0x11c>)
 8005b18:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3308      	adds	r3, #8
 8005b20:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b24:	e853 3f00 	ldrex	r3, [r3]
 8005b28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005b30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3308      	adds	r3, #8
 8005b38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b3a:	637a      	str	r2, [r7, #52]	@ 0x34
 8005b3c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e5      	bne.n	8005b1a <HAL_UART_Transmit_IT+0x7e>
 8005b4e:	e028      	b.n	8005ba2 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b58:	d107      	bne.n	8005b6a <HAL_UART_Transmit_IT+0xce>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d103      	bne.n	8005b6a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	4a15      	ldr	r2, [pc, #84]	@ (8005bbc <HAL_UART_Transmit_IT+0x120>)
 8005b66:	679a      	str	r2, [r3, #120]	@ 0x78
 8005b68:	e002      	b.n	8005b70 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	4a14      	ldr	r2, [pc, #80]	@ (8005bc0 <HAL_UART_Transmit_IT+0x124>)
 8005b6e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b8e:	623b      	str	r3, [r7, #32]
 8005b90:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b92:	69f9      	ldr	r1, [r7, #28]
 8005b94:	6a3a      	ldr	r2, [r7, #32]
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e6      	bne.n	8005b70 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	e000      	b.n	8005ba8 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005ba6:	2302      	movs	r3, #2
  }
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3744      	adds	r7, #68	@ 0x44
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	080077eb 	.word	0x080077eb
 8005bb8:	0800770b 	.word	0x0800770b
 8005bbc:	08007649 	.word	0x08007649
 8005bc0:	08007591 	.word	0x08007591

08005bc4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b08a      	sub	sp, #40	@ 0x28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bd8:	2b20      	cmp	r3, #32
 8005bda:	d137      	bne.n	8005c4c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d002      	beq.n	8005be8 <HAL_UART_Receive_IT+0x24>
 8005be2:	88fb      	ldrh	r3, [r7, #6]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e030      	b.n	8005c4e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a18      	ldr	r2, [pc, #96]	@ (8005c58 <HAL_UART_Receive_IT+0x94>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d01f      	beq.n	8005c3c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d018      	beq.n	8005c3c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	e853 3f00 	ldrex	r3, [r3]
 8005c16:	613b      	str	r3, [r7, #16]
   return(result);
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	461a      	mov	r2, r3
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	623b      	str	r3, [r7, #32]
 8005c2a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2c:	69f9      	ldr	r1, [r7, #28]
 8005c2e:	6a3a      	ldr	r2, [r7, #32]
 8005c30:	e841 2300 	strex	r3, r2, [r1]
 8005c34:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1e6      	bne.n	8005c0a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c3c:	88fb      	ldrh	r3, [r7, #6]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f001 fb06 	bl	8007254 <UART_Start_Receive_IT>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	e000      	b.n	8005c4e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c4c:	2302      	movs	r3, #2
  }
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3728      	adds	r7, #40	@ 0x28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	58000c00 	.word	0x58000c00

08005c5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b0ba      	sub	sp, #232	@ 0xe8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005c86:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005c90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d11b      	bne.n	8005cd0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c9c:	f003 0320 	and.w	r3, r3, #32
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d015      	beq.n	8005cd0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ca8:	f003 0320 	and.w	r3, r3, #32
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d105      	bne.n	8005cbc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d009      	beq.n	8005cd0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 8377 	beq.w	80063b4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	4798      	blx	r3
      }
      return;
 8005cce:	e371      	b.n	80063b4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005cd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 8123 	beq.w	8005f20 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005cda:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005cde:	4b8d      	ldr	r3, [pc, #564]	@ (8005f14 <HAL_UART_IRQHandler+0x2b8>)
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d106      	bne.n	8005cf4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005ce6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005cea:	4b8b      	ldr	r3, [pc, #556]	@ (8005f18 <HAL_UART_IRQHandler+0x2bc>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 8116 	beq.w	8005f20 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d011      	beq.n	8005d24 <HAL_UART_IRQHandler+0xc8>
 8005d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00b      	beq.n	8005d24 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2201      	movs	r2, #1
 8005d12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d1a:	f043 0201 	orr.w	r2, r3, #1
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d011      	beq.n	8005d54 <HAL_UART_IRQHandler+0xf8>
 8005d30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00b      	beq.n	8005d54 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2202      	movs	r2, #2
 8005d42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d4a:	f043 0204 	orr.w	r2, r3, #4
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d011      	beq.n	8005d84 <HAL_UART_IRQHandler+0x128>
 8005d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00b      	beq.n	8005d84 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2204      	movs	r2, #4
 8005d72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d7a:	f043 0202 	orr.w	r2, r3, #2
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d88:	f003 0308 	and.w	r3, r3, #8
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d017      	beq.n	8005dc0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d94:	f003 0320 	and.w	r3, r3, #32
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d105      	bne.n	8005da8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005d9c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005da0:	4b5c      	ldr	r3, [pc, #368]	@ (8005f14 <HAL_UART_IRQHandler+0x2b8>)
 8005da2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00b      	beq.n	8005dc0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2208      	movs	r2, #8
 8005dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005db6:	f043 0208 	orr.w	r2, r3, #8
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d012      	beq.n	8005df2 <HAL_UART_IRQHandler+0x196>
 8005dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00c      	beq.n	8005df2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005de0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005de8:	f043 0220 	orr.w	r2, r3, #32
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 82dd 	beq.w	80063b8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e02:	f003 0320 	and.w	r3, r3, #32
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d013      	beq.n	8005e32 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d105      	bne.n	8005e22 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d007      	beq.n	8005e32 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e46:	2b40      	cmp	r3, #64	@ 0x40
 8005e48:	d005      	beq.n	8005e56 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e4e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d054      	beq.n	8005f00 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f001 fb1e 	bl	8007498 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e66:	2b40      	cmp	r3, #64	@ 0x40
 8005e68:	d146      	bne.n	8005ef8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3308      	adds	r3, #8
 8005e70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e78:	e853 3f00 	ldrex	r3, [r3]
 8005e7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005e80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3308      	adds	r3, #8
 8005e92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005e96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005ea2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005ea6:	e841 2300 	strex	r3, r2, [r1]
 8005eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005eae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1d9      	bne.n	8005e6a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d017      	beq.n	8005ef0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ec6:	4a15      	ldr	r2, [pc, #84]	@ (8005f1c <HAL_UART_IRQHandler+0x2c0>)
 8005ec8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7fb fda9 	bl	8001a28 <HAL_DMA_Abort_IT>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d019      	beq.n	8005f10 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005eea:	4610      	mov	r0, r2
 8005eec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eee:	e00f      	b.n	8005f10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fa77 	bl	80063e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef6:	e00b      	b.n	8005f10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fa73 	bl	80063e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005efe:	e007      	b.n	8005f10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fa6f 	bl	80063e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005f0e:	e253      	b.n	80063b8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f10:	bf00      	nop
    return;
 8005f12:	e251      	b.n	80063b8 <HAL_UART_IRQHandler+0x75c>
 8005f14:	10000001 	.word	0x10000001
 8005f18:	04000120 	.word	0x04000120
 8005f1c:	08007565 	.word	0x08007565

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	f040 81e7 	bne.w	80062f8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f2e:	f003 0310 	and.w	r3, r3, #16
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 81e0 	beq.w	80062f8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f3c:	f003 0310 	and.w	r3, r3, #16
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 81d9 	beq.w	80062f8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2210      	movs	r2, #16
 8005f4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f58:	2b40      	cmp	r3, #64	@ 0x40
 8005f5a:	f040 8151 	bne.w	8006200 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a96      	ldr	r2, [pc, #600]	@ (80061c0 <HAL_UART_IRQHandler+0x564>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d068      	beq.n	800603e <HAL_UART_IRQHandler+0x3e2>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a93      	ldr	r2, [pc, #588]	@ (80061c4 <HAL_UART_IRQHandler+0x568>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d061      	beq.n	800603e <HAL_UART_IRQHandler+0x3e2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a91      	ldr	r2, [pc, #580]	@ (80061c8 <HAL_UART_IRQHandler+0x56c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d05a      	beq.n	800603e <HAL_UART_IRQHandler+0x3e2>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a8e      	ldr	r2, [pc, #568]	@ (80061cc <HAL_UART_IRQHandler+0x570>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d053      	beq.n	800603e <HAL_UART_IRQHandler+0x3e2>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a8c      	ldr	r2, [pc, #560]	@ (80061d0 <HAL_UART_IRQHandler+0x574>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d04c      	beq.n	800603e <HAL_UART_IRQHandler+0x3e2>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a89      	ldr	r2, [pc, #548]	@ (80061d4 <HAL_UART_IRQHandler+0x578>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d045      	beq.n	800603e <HAL_UART_IRQHandler+0x3e2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a87      	ldr	r2, [pc, #540]	@ (80061d8 <HAL_UART_IRQHandler+0x57c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d03e      	beq.n	800603e <HAL_UART_IRQHandler+0x3e2>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a84      	ldr	r2, [pc, #528]	@ (80061dc <HAL_UART_IRQHandler+0x580>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d037      	beq.n	800603e <HAL_UART_IRQHandler+0x3e2>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a82      	ldr	r2, [pc, #520]	@ (80061e0 <HAL_UART_IRQHandler+0x584>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d030      	beq.n	800603e <HAL_UART_IRQHandler+0x3e2>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a7f      	ldr	r2, [pc, #508]	@ (80061e4 <HAL_UART_IRQHandler+0x588>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d029      	beq.n	800603e <HAL_UART_IRQHandler+0x3e2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a7d      	ldr	r2, [pc, #500]	@ (80061e8 <HAL_UART_IRQHandler+0x58c>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d022      	beq.n	800603e <HAL_UART_IRQHandler+0x3e2>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a7a      	ldr	r2, [pc, #488]	@ (80061ec <HAL_UART_IRQHandler+0x590>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d01b      	beq.n	800603e <HAL_UART_IRQHandler+0x3e2>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a78      	ldr	r2, [pc, #480]	@ (80061f0 <HAL_UART_IRQHandler+0x594>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d014      	beq.n	800603e <HAL_UART_IRQHandler+0x3e2>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a75      	ldr	r2, [pc, #468]	@ (80061f4 <HAL_UART_IRQHandler+0x598>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d00d      	beq.n	800603e <HAL_UART_IRQHandler+0x3e2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a73      	ldr	r2, [pc, #460]	@ (80061f8 <HAL_UART_IRQHandler+0x59c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d006      	beq.n	800603e <HAL_UART_IRQHandler+0x3e2>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a70      	ldr	r2, [pc, #448]	@ (80061fc <HAL_UART_IRQHandler+0x5a0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d106      	bne.n	800604c <HAL_UART_IRQHandler+0x3f0>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	b29b      	uxth	r3, r3
 800604a:	e005      	b.n	8006058 <HAL_UART_IRQHandler+0x3fc>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	b29b      	uxth	r3, r3
 8006058:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800605c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 81ab 	beq.w	80063bc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800606c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006070:	429a      	cmp	r2, r3
 8006072:	f080 81a3 	bcs.w	80063bc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800607c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800608c:	f000 8087 	beq.w	800619e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006098:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800609c:	e853 3f00 	ldrex	r3, [r3]
 80060a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80060a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	461a      	mov	r2, r3
 80060b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80060ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80060be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80060c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80060ca:	e841 2300 	strex	r3, r2, [r1]
 80060ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80060d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1da      	bne.n	8006090 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3308      	adds	r3, #8
 80060e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060e4:	e853 3f00 	ldrex	r3, [r3]
 80060e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80060ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060ec:	f023 0301 	bic.w	r3, r3, #1
 80060f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3308      	adds	r3, #8
 80060fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80060fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006102:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006104:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006106:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800610a:	e841 2300 	strex	r3, r2, [r1]
 800610e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006110:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1e1      	bne.n	80060da <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3308      	adds	r3, #8
 800611c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006126:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006128:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800612c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3308      	adds	r3, #8
 8006136:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800613a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800613c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006140:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006142:	e841 2300 	strex	r3, r2, [r1]
 8006146:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006148:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e3      	bne.n	8006116 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2220      	movs	r2, #32
 8006152:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006164:	e853 3f00 	ldrex	r3, [r3]
 8006168:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800616a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800616c:	f023 0310 	bic.w	r3, r3, #16
 8006170:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	461a      	mov	r2, r3
 800617a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800617e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006180:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006182:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006184:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006186:	e841 2300 	strex	r3, r2, [r1]
 800618a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800618c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e4      	bne.n	800615c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006198:	4618      	mov	r0, r3
 800619a:	f7fb f927 	bl	80013ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2202      	movs	r2, #2
 80061a2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	4619      	mov	r1, r3
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f91d 	bl	80063f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061be:	e0fd      	b.n	80063bc <HAL_UART_IRQHandler+0x760>
 80061c0:	40020010 	.word	0x40020010
 80061c4:	40020028 	.word	0x40020028
 80061c8:	40020040 	.word	0x40020040
 80061cc:	40020058 	.word	0x40020058
 80061d0:	40020070 	.word	0x40020070
 80061d4:	40020088 	.word	0x40020088
 80061d8:	400200a0 	.word	0x400200a0
 80061dc:	400200b8 	.word	0x400200b8
 80061e0:	40020410 	.word	0x40020410
 80061e4:	40020428 	.word	0x40020428
 80061e8:	40020440 	.word	0x40020440
 80061ec:	40020458 	.word	0x40020458
 80061f0:	40020470 	.word	0x40020470
 80061f4:	40020488 	.word	0x40020488
 80061f8:	400204a0 	.word	0x400204a0
 80061fc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800620c:	b29b      	uxth	r3, r3
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800621a:	b29b      	uxth	r3, r3
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 80cf 	beq.w	80063c0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006222:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 80ca 	beq.w	80063c0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006234:	e853 3f00 	ldrex	r3, [r3]
 8006238:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800623a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800623c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006240:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	461a      	mov	r2, r3
 800624a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800624e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006250:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006252:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006254:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006256:	e841 2300 	strex	r3, r2, [r1]
 800625a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800625c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1e4      	bne.n	800622c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	3308      	adds	r3, #8
 8006268:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	e853 3f00 	ldrex	r3, [r3]
 8006270:	623b      	str	r3, [r7, #32]
   return(result);
 8006272:	6a3a      	ldr	r2, [r7, #32]
 8006274:	4b55      	ldr	r3, [pc, #340]	@ (80063cc <HAL_UART_IRQHandler+0x770>)
 8006276:	4013      	ands	r3, r2
 8006278:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3308      	adds	r3, #8
 8006282:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006286:	633a      	str	r2, [r7, #48]	@ 0x30
 8006288:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800628c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800628e:	e841 2300 	strex	r3, r2, [r1]
 8006292:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1e3      	bne.n	8006262 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2220      	movs	r2, #32
 800629e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	e853 3f00 	ldrex	r3, [r3]
 80062ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 0310 	bic.w	r3, r3, #16
 80062c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	461a      	mov	r2, r3
 80062cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80062d0:	61fb      	str	r3, [r7, #28]
 80062d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d4:	69b9      	ldr	r1, [r7, #24]
 80062d6:	69fa      	ldr	r2, [r7, #28]
 80062d8:	e841 2300 	strex	r3, r2, [r1]
 80062dc:	617b      	str	r3, [r7, #20]
   return(result);
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1e4      	bne.n	80062ae <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 f881 	bl	80063f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062f6:	e063      	b.n	80063c0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80062f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00e      	beq.n	8006322 <HAL_UART_IRQHandler+0x6c6>
 8006304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006308:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d008      	beq.n	8006322 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006318:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f002 f822 	bl	8008364 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006320:	e051      	b.n	80063c6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800632a:	2b00      	cmp	r3, #0
 800632c:	d014      	beq.n	8006358 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800632e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006336:	2b00      	cmp	r3, #0
 8006338:	d105      	bne.n	8006346 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800633a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800633e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d008      	beq.n	8006358 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800634a:	2b00      	cmp	r3, #0
 800634c:	d03a      	beq.n	80063c4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	4798      	blx	r3
    }
    return;
 8006356:	e035      	b.n	80063c4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800635c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006360:	2b00      	cmp	r3, #0
 8006362:	d009      	beq.n	8006378 <HAL_UART_IRQHandler+0x71c>
 8006364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800636c:	2b00      	cmp	r3, #0
 800636e:	d003      	beq.n	8006378 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f001 faaf 	bl	80078d4 <UART_EndTransmit_IT>
    return;
 8006376:	e026      	b.n	80063c6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800637c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d009      	beq.n	8006398 <HAL_UART_IRQHandler+0x73c>
 8006384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006388:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d003      	beq.n	8006398 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f001 fffb 	bl	800838c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006396:	e016      	b.n	80063c6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800639c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d010      	beq.n	80063c6 <HAL_UART_IRQHandler+0x76a>
 80063a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	da0c      	bge.n	80063c6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f001 ffe3 	bl	8008378 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063b2:	e008      	b.n	80063c6 <HAL_UART_IRQHandler+0x76a>
      return;
 80063b4:	bf00      	nop
 80063b6:	e006      	b.n	80063c6 <HAL_UART_IRQHandler+0x76a>
    return;
 80063b8:	bf00      	nop
 80063ba:	e004      	b.n	80063c6 <HAL_UART_IRQHandler+0x76a>
      return;
 80063bc:	bf00      	nop
 80063be:	e002      	b.n	80063c6 <HAL_UART_IRQHandler+0x76a>
      return;
 80063c0:	bf00      	nop
 80063c2:	e000      	b.n	80063c6 <HAL_UART_IRQHandler+0x76a>
    return;
 80063c4:	bf00      	nop
  }
}
 80063c6:	37e8      	adds	r7, #232	@ 0xe8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	effffffe 	.word	0xeffffffe

080063d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	460b      	mov	r3, r1
 8006402:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006414:	b092      	sub	sp, #72	@ 0x48
 8006416:	af00      	add	r7, sp, #0
 8006418:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	431a      	orrs	r2, r3
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	431a      	orrs	r2, r3
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	4313      	orrs	r3, r2
 8006436:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	4bbe      	ldr	r3, [pc, #760]	@ (8006738 <UART_SetConfig+0x328>)
 8006440:	4013      	ands	r3, r2
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	6812      	ldr	r2, [r2, #0]
 8006446:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006448:	430b      	orrs	r3, r1
 800644a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4ab3      	ldr	r2, [pc, #716]	@ (800673c <UART_SetConfig+0x32c>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d004      	beq.n	800647c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006478:	4313      	orrs	r3, r2
 800647a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689a      	ldr	r2, [r3, #8]
 8006482:	4baf      	ldr	r3, [pc, #700]	@ (8006740 <UART_SetConfig+0x330>)
 8006484:	4013      	ands	r3, r2
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	6812      	ldr	r2, [r2, #0]
 800648a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800648c:	430b      	orrs	r3, r1
 800648e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006496:	f023 010f 	bic.w	r1, r3, #15
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4aa6      	ldr	r2, [pc, #664]	@ (8006744 <UART_SetConfig+0x334>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d177      	bne.n	80065a0 <UART_SetConfig+0x190>
 80064b0:	4ba5      	ldr	r3, [pc, #660]	@ (8006748 <UART_SetConfig+0x338>)
 80064b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064b8:	2b28      	cmp	r3, #40	@ 0x28
 80064ba:	d86d      	bhi.n	8006598 <UART_SetConfig+0x188>
 80064bc:	a201      	add	r2, pc, #4	@ (adr r2, 80064c4 <UART_SetConfig+0xb4>)
 80064be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c2:	bf00      	nop
 80064c4:	08006569 	.word	0x08006569
 80064c8:	08006599 	.word	0x08006599
 80064cc:	08006599 	.word	0x08006599
 80064d0:	08006599 	.word	0x08006599
 80064d4:	08006599 	.word	0x08006599
 80064d8:	08006599 	.word	0x08006599
 80064dc:	08006599 	.word	0x08006599
 80064e0:	08006599 	.word	0x08006599
 80064e4:	08006571 	.word	0x08006571
 80064e8:	08006599 	.word	0x08006599
 80064ec:	08006599 	.word	0x08006599
 80064f0:	08006599 	.word	0x08006599
 80064f4:	08006599 	.word	0x08006599
 80064f8:	08006599 	.word	0x08006599
 80064fc:	08006599 	.word	0x08006599
 8006500:	08006599 	.word	0x08006599
 8006504:	08006579 	.word	0x08006579
 8006508:	08006599 	.word	0x08006599
 800650c:	08006599 	.word	0x08006599
 8006510:	08006599 	.word	0x08006599
 8006514:	08006599 	.word	0x08006599
 8006518:	08006599 	.word	0x08006599
 800651c:	08006599 	.word	0x08006599
 8006520:	08006599 	.word	0x08006599
 8006524:	08006581 	.word	0x08006581
 8006528:	08006599 	.word	0x08006599
 800652c:	08006599 	.word	0x08006599
 8006530:	08006599 	.word	0x08006599
 8006534:	08006599 	.word	0x08006599
 8006538:	08006599 	.word	0x08006599
 800653c:	08006599 	.word	0x08006599
 8006540:	08006599 	.word	0x08006599
 8006544:	08006589 	.word	0x08006589
 8006548:	08006599 	.word	0x08006599
 800654c:	08006599 	.word	0x08006599
 8006550:	08006599 	.word	0x08006599
 8006554:	08006599 	.word	0x08006599
 8006558:	08006599 	.word	0x08006599
 800655c:	08006599 	.word	0x08006599
 8006560:	08006599 	.word	0x08006599
 8006564:	08006591 	.word	0x08006591
 8006568:	2301      	movs	r3, #1
 800656a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800656e:	e222      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006570:	2304      	movs	r3, #4
 8006572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006576:	e21e      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006578:	2308      	movs	r3, #8
 800657a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800657e:	e21a      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006580:	2310      	movs	r3, #16
 8006582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006586:	e216      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006588:	2320      	movs	r3, #32
 800658a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800658e:	e212      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006590:	2340      	movs	r3, #64	@ 0x40
 8006592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006596:	e20e      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006598:	2380      	movs	r3, #128	@ 0x80
 800659a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800659e:	e20a      	b.n	80069b6 <UART_SetConfig+0x5a6>
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a69      	ldr	r2, [pc, #420]	@ (800674c <UART_SetConfig+0x33c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d130      	bne.n	800660c <UART_SetConfig+0x1fc>
 80065aa:	4b67      	ldr	r3, [pc, #412]	@ (8006748 <UART_SetConfig+0x338>)
 80065ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ae:	f003 0307 	and.w	r3, r3, #7
 80065b2:	2b05      	cmp	r3, #5
 80065b4:	d826      	bhi.n	8006604 <UART_SetConfig+0x1f4>
 80065b6:	a201      	add	r2, pc, #4	@ (adr r2, 80065bc <UART_SetConfig+0x1ac>)
 80065b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065bc:	080065d5 	.word	0x080065d5
 80065c0:	080065dd 	.word	0x080065dd
 80065c4:	080065e5 	.word	0x080065e5
 80065c8:	080065ed 	.word	0x080065ed
 80065cc:	080065f5 	.word	0x080065f5
 80065d0:	080065fd 	.word	0x080065fd
 80065d4:	2300      	movs	r3, #0
 80065d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065da:	e1ec      	b.n	80069b6 <UART_SetConfig+0x5a6>
 80065dc:	2304      	movs	r3, #4
 80065de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065e2:	e1e8      	b.n	80069b6 <UART_SetConfig+0x5a6>
 80065e4:	2308      	movs	r3, #8
 80065e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ea:	e1e4      	b.n	80069b6 <UART_SetConfig+0x5a6>
 80065ec:	2310      	movs	r3, #16
 80065ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065f2:	e1e0      	b.n	80069b6 <UART_SetConfig+0x5a6>
 80065f4:	2320      	movs	r3, #32
 80065f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065fa:	e1dc      	b.n	80069b6 <UART_SetConfig+0x5a6>
 80065fc:	2340      	movs	r3, #64	@ 0x40
 80065fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006602:	e1d8      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006604:	2380      	movs	r3, #128	@ 0x80
 8006606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800660a:	e1d4      	b.n	80069b6 <UART_SetConfig+0x5a6>
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a4f      	ldr	r2, [pc, #316]	@ (8006750 <UART_SetConfig+0x340>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d130      	bne.n	8006678 <UART_SetConfig+0x268>
 8006616:	4b4c      	ldr	r3, [pc, #304]	@ (8006748 <UART_SetConfig+0x338>)
 8006618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800661a:	f003 0307 	and.w	r3, r3, #7
 800661e:	2b05      	cmp	r3, #5
 8006620:	d826      	bhi.n	8006670 <UART_SetConfig+0x260>
 8006622:	a201      	add	r2, pc, #4	@ (adr r2, 8006628 <UART_SetConfig+0x218>)
 8006624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006628:	08006641 	.word	0x08006641
 800662c:	08006649 	.word	0x08006649
 8006630:	08006651 	.word	0x08006651
 8006634:	08006659 	.word	0x08006659
 8006638:	08006661 	.word	0x08006661
 800663c:	08006669 	.word	0x08006669
 8006640:	2300      	movs	r3, #0
 8006642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006646:	e1b6      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006648:	2304      	movs	r3, #4
 800664a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800664e:	e1b2      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006650:	2308      	movs	r3, #8
 8006652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006656:	e1ae      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006658:	2310      	movs	r3, #16
 800665a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800665e:	e1aa      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006660:	2320      	movs	r3, #32
 8006662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006666:	e1a6      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006668:	2340      	movs	r3, #64	@ 0x40
 800666a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800666e:	e1a2      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006670:	2380      	movs	r3, #128	@ 0x80
 8006672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006676:	e19e      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a35      	ldr	r2, [pc, #212]	@ (8006754 <UART_SetConfig+0x344>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d130      	bne.n	80066e4 <UART_SetConfig+0x2d4>
 8006682:	4b31      	ldr	r3, [pc, #196]	@ (8006748 <UART_SetConfig+0x338>)
 8006684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006686:	f003 0307 	and.w	r3, r3, #7
 800668a:	2b05      	cmp	r3, #5
 800668c:	d826      	bhi.n	80066dc <UART_SetConfig+0x2cc>
 800668e:	a201      	add	r2, pc, #4	@ (adr r2, 8006694 <UART_SetConfig+0x284>)
 8006690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006694:	080066ad 	.word	0x080066ad
 8006698:	080066b5 	.word	0x080066b5
 800669c:	080066bd 	.word	0x080066bd
 80066a0:	080066c5 	.word	0x080066c5
 80066a4:	080066cd 	.word	0x080066cd
 80066a8:	080066d5 	.word	0x080066d5
 80066ac:	2300      	movs	r3, #0
 80066ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066b2:	e180      	b.n	80069b6 <UART_SetConfig+0x5a6>
 80066b4:	2304      	movs	r3, #4
 80066b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ba:	e17c      	b.n	80069b6 <UART_SetConfig+0x5a6>
 80066bc:	2308      	movs	r3, #8
 80066be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066c2:	e178      	b.n	80069b6 <UART_SetConfig+0x5a6>
 80066c4:	2310      	movs	r3, #16
 80066c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ca:	e174      	b.n	80069b6 <UART_SetConfig+0x5a6>
 80066cc:	2320      	movs	r3, #32
 80066ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066d2:	e170      	b.n	80069b6 <UART_SetConfig+0x5a6>
 80066d4:	2340      	movs	r3, #64	@ 0x40
 80066d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066da:	e16c      	b.n	80069b6 <UART_SetConfig+0x5a6>
 80066dc:	2380      	movs	r3, #128	@ 0x80
 80066de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e2:	e168      	b.n	80069b6 <UART_SetConfig+0x5a6>
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006758 <UART_SetConfig+0x348>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d142      	bne.n	8006774 <UART_SetConfig+0x364>
 80066ee:	4b16      	ldr	r3, [pc, #88]	@ (8006748 <UART_SetConfig+0x338>)
 80066f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066f2:	f003 0307 	and.w	r3, r3, #7
 80066f6:	2b05      	cmp	r3, #5
 80066f8:	d838      	bhi.n	800676c <UART_SetConfig+0x35c>
 80066fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006700 <UART_SetConfig+0x2f0>)
 80066fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006700:	08006719 	.word	0x08006719
 8006704:	08006721 	.word	0x08006721
 8006708:	08006729 	.word	0x08006729
 800670c:	08006731 	.word	0x08006731
 8006710:	0800675d 	.word	0x0800675d
 8006714:	08006765 	.word	0x08006765
 8006718:	2300      	movs	r3, #0
 800671a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800671e:	e14a      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006720:	2304      	movs	r3, #4
 8006722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006726:	e146      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006728:	2308      	movs	r3, #8
 800672a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800672e:	e142      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006730:	2310      	movs	r3, #16
 8006732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006736:	e13e      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006738:	cfff69f3 	.word	0xcfff69f3
 800673c:	58000c00 	.word	0x58000c00
 8006740:	11fff4ff 	.word	0x11fff4ff
 8006744:	40011000 	.word	0x40011000
 8006748:	58024400 	.word	0x58024400
 800674c:	40004400 	.word	0x40004400
 8006750:	40004800 	.word	0x40004800
 8006754:	40004c00 	.word	0x40004c00
 8006758:	40005000 	.word	0x40005000
 800675c:	2320      	movs	r3, #32
 800675e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006762:	e128      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006764:	2340      	movs	r3, #64	@ 0x40
 8006766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800676a:	e124      	b.n	80069b6 <UART_SetConfig+0x5a6>
 800676c:	2380      	movs	r3, #128	@ 0x80
 800676e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006772:	e120      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4acb      	ldr	r2, [pc, #812]	@ (8006aa8 <UART_SetConfig+0x698>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d176      	bne.n	800686c <UART_SetConfig+0x45c>
 800677e:	4bcb      	ldr	r3, [pc, #812]	@ (8006aac <UART_SetConfig+0x69c>)
 8006780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006782:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006786:	2b28      	cmp	r3, #40	@ 0x28
 8006788:	d86c      	bhi.n	8006864 <UART_SetConfig+0x454>
 800678a:	a201      	add	r2, pc, #4	@ (adr r2, 8006790 <UART_SetConfig+0x380>)
 800678c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006790:	08006835 	.word	0x08006835
 8006794:	08006865 	.word	0x08006865
 8006798:	08006865 	.word	0x08006865
 800679c:	08006865 	.word	0x08006865
 80067a0:	08006865 	.word	0x08006865
 80067a4:	08006865 	.word	0x08006865
 80067a8:	08006865 	.word	0x08006865
 80067ac:	08006865 	.word	0x08006865
 80067b0:	0800683d 	.word	0x0800683d
 80067b4:	08006865 	.word	0x08006865
 80067b8:	08006865 	.word	0x08006865
 80067bc:	08006865 	.word	0x08006865
 80067c0:	08006865 	.word	0x08006865
 80067c4:	08006865 	.word	0x08006865
 80067c8:	08006865 	.word	0x08006865
 80067cc:	08006865 	.word	0x08006865
 80067d0:	08006845 	.word	0x08006845
 80067d4:	08006865 	.word	0x08006865
 80067d8:	08006865 	.word	0x08006865
 80067dc:	08006865 	.word	0x08006865
 80067e0:	08006865 	.word	0x08006865
 80067e4:	08006865 	.word	0x08006865
 80067e8:	08006865 	.word	0x08006865
 80067ec:	08006865 	.word	0x08006865
 80067f0:	0800684d 	.word	0x0800684d
 80067f4:	08006865 	.word	0x08006865
 80067f8:	08006865 	.word	0x08006865
 80067fc:	08006865 	.word	0x08006865
 8006800:	08006865 	.word	0x08006865
 8006804:	08006865 	.word	0x08006865
 8006808:	08006865 	.word	0x08006865
 800680c:	08006865 	.word	0x08006865
 8006810:	08006855 	.word	0x08006855
 8006814:	08006865 	.word	0x08006865
 8006818:	08006865 	.word	0x08006865
 800681c:	08006865 	.word	0x08006865
 8006820:	08006865 	.word	0x08006865
 8006824:	08006865 	.word	0x08006865
 8006828:	08006865 	.word	0x08006865
 800682c:	08006865 	.word	0x08006865
 8006830:	0800685d 	.word	0x0800685d
 8006834:	2301      	movs	r3, #1
 8006836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800683a:	e0bc      	b.n	80069b6 <UART_SetConfig+0x5a6>
 800683c:	2304      	movs	r3, #4
 800683e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006842:	e0b8      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006844:	2308      	movs	r3, #8
 8006846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800684a:	e0b4      	b.n	80069b6 <UART_SetConfig+0x5a6>
 800684c:	2310      	movs	r3, #16
 800684e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006852:	e0b0      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006854:	2320      	movs	r3, #32
 8006856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800685a:	e0ac      	b.n	80069b6 <UART_SetConfig+0x5a6>
 800685c:	2340      	movs	r3, #64	@ 0x40
 800685e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006862:	e0a8      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006864:	2380      	movs	r3, #128	@ 0x80
 8006866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800686a:	e0a4      	b.n	80069b6 <UART_SetConfig+0x5a6>
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a8f      	ldr	r2, [pc, #572]	@ (8006ab0 <UART_SetConfig+0x6a0>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d130      	bne.n	80068d8 <UART_SetConfig+0x4c8>
 8006876:	4b8d      	ldr	r3, [pc, #564]	@ (8006aac <UART_SetConfig+0x69c>)
 8006878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800687a:	f003 0307 	and.w	r3, r3, #7
 800687e:	2b05      	cmp	r3, #5
 8006880:	d826      	bhi.n	80068d0 <UART_SetConfig+0x4c0>
 8006882:	a201      	add	r2, pc, #4	@ (adr r2, 8006888 <UART_SetConfig+0x478>)
 8006884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006888:	080068a1 	.word	0x080068a1
 800688c:	080068a9 	.word	0x080068a9
 8006890:	080068b1 	.word	0x080068b1
 8006894:	080068b9 	.word	0x080068b9
 8006898:	080068c1 	.word	0x080068c1
 800689c:	080068c9 	.word	0x080068c9
 80068a0:	2300      	movs	r3, #0
 80068a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068a6:	e086      	b.n	80069b6 <UART_SetConfig+0x5a6>
 80068a8:	2304      	movs	r3, #4
 80068aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ae:	e082      	b.n	80069b6 <UART_SetConfig+0x5a6>
 80068b0:	2308      	movs	r3, #8
 80068b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068b6:	e07e      	b.n	80069b6 <UART_SetConfig+0x5a6>
 80068b8:	2310      	movs	r3, #16
 80068ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068be:	e07a      	b.n	80069b6 <UART_SetConfig+0x5a6>
 80068c0:	2320      	movs	r3, #32
 80068c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068c6:	e076      	b.n	80069b6 <UART_SetConfig+0x5a6>
 80068c8:	2340      	movs	r3, #64	@ 0x40
 80068ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ce:	e072      	b.n	80069b6 <UART_SetConfig+0x5a6>
 80068d0:	2380      	movs	r3, #128	@ 0x80
 80068d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068d6:	e06e      	b.n	80069b6 <UART_SetConfig+0x5a6>
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a75      	ldr	r2, [pc, #468]	@ (8006ab4 <UART_SetConfig+0x6a4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d130      	bne.n	8006944 <UART_SetConfig+0x534>
 80068e2:	4b72      	ldr	r3, [pc, #456]	@ (8006aac <UART_SetConfig+0x69c>)
 80068e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068e6:	f003 0307 	and.w	r3, r3, #7
 80068ea:	2b05      	cmp	r3, #5
 80068ec:	d826      	bhi.n	800693c <UART_SetConfig+0x52c>
 80068ee:	a201      	add	r2, pc, #4	@ (adr r2, 80068f4 <UART_SetConfig+0x4e4>)
 80068f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f4:	0800690d 	.word	0x0800690d
 80068f8:	08006915 	.word	0x08006915
 80068fc:	0800691d 	.word	0x0800691d
 8006900:	08006925 	.word	0x08006925
 8006904:	0800692d 	.word	0x0800692d
 8006908:	08006935 	.word	0x08006935
 800690c:	2300      	movs	r3, #0
 800690e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006912:	e050      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006914:	2304      	movs	r3, #4
 8006916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800691a:	e04c      	b.n	80069b6 <UART_SetConfig+0x5a6>
 800691c:	2308      	movs	r3, #8
 800691e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006922:	e048      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006924:	2310      	movs	r3, #16
 8006926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800692a:	e044      	b.n	80069b6 <UART_SetConfig+0x5a6>
 800692c:	2320      	movs	r3, #32
 800692e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006932:	e040      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006934:	2340      	movs	r3, #64	@ 0x40
 8006936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800693a:	e03c      	b.n	80069b6 <UART_SetConfig+0x5a6>
 800693c:	2380      	movs	r3, #128	@ 0x80
 800693e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006942:	e038      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a5b      	ldr	r2, [pc, #364]	@ (8006ab8 <UART_SetConfig+0x6a8>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d130      	bne.n	80069b0 <UART_SetConfig+0x5a0>
 800694e:	4b57      	ldr	r3, [pc, #348]	@ (8006aac <UART_SetConfig+0x69c>)
 8006950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006952:	f003 0307 	and.w	r3, r3, #7
 8006956:	2b05      	cmp	r3, #5
 8006958:	d826      	bhi.n	80069a8 <UART_SetConfig+0x598>
 800695a:	a201      	add	r2, pc, #4	@ (adr r2, 8006960 <UART_SetConfig+0x550>)
 800695c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006960:	08006979 	.word	0x08006979
 8006964:	08006981 	.word	0x08006981
 8006968:	08006989 	.word	0x08006989
 800696c:	08006991 	.word	0x08006991
 8006970:	08006999 	.word	0x08006999
 8006974:	080069a1 	.word	0x080069a1
 8006978:	2302      	movs	r3, #2
 800697a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800697e:	e01a      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006980:	2304      	movs	r3, #4
 8006982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006986:	e016      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006988:	2308      	movs	r3, #8
 800698a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800698e:	e012      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006990:	2310      	movs	r3, #16
 8006992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006996:	e00e      	b.n	80069b6 <UART_SetConfig+0x5a6>
 8006998:	2320      	movs	r3, #32
 800699a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800699e:	e00a      	b.n	80069b6 <UART_SetConfig+0x5a6>
 80069a0:	2340      	movs	r3, #64	@ 0x40
 80069a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069a6:	e006      	b.n	80069b6 <UART_SetConfig+0x5a6>
 80069a8:	2380      	movs	r3, #128	@ 0x80
 80069aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ae:	e002      	b.n	80069b6 <UART_SetConfig+0x5a6>
 80069b0:	2380      	movs	r3, #128	@ 0x80
 80069b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a3f      	ldr	r2, [pc, #252]	@ (8006ab8 <UART_SetConfig+0x6a8>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	f040 80f8 	bne.w	8006bb2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80069c6:	2b20      	cmp	r3, #32
 80069c8:	dc46      	bgt.n	8006a58 <UART_SetConfig+0x648>
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	f2c0 8082 	blt.w	8006ad4 <UART_SetConfig+0x6c4>
 80069d0:	3b02      	subs	r3, #2
 80069d2:	2b1e      	cmp	r3, #30
 80069d4:	d87e      	bhi.n	8006ad4 <UART_SetConfig+0x6c4>
 80069d6:	a201      	add	r2, pc, #4	@ (adr r2, 80069dc <UART_SetConfig+0x5cc>)
 80069d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069dc:	08006a5f 	.word	0x08006a5f
 80069e0:	08006ad5 	.word	0x08006ad5
 80069e4:	08006a67 	.word	0x08006a67
 80069e8:	08006ad5 	.word	0x08006ad5
 80069ec:	08006ad5 	.word	0x08006ad5
 80069f0:	08006ad5 	.word	0x08006ad5
 80069f4:	08006a77 	.word	0x08006a77
 80069f8:	08006ad5 	.word	0x08006ad5
 80069fc:	08006ad5 	.word	0x08006ad5
 8006a00:	08006ad5 	.word	0x08006ad5
 8006a04:	08006ad5 	.word	0x08006ad5
 8006a08:	08006ad5 	.word	0x08006ad5
 8006a0c:	08006ad5 	.word	0x08006ad5
 8006a10:	08006ad5 	.word	0x08006ad5
 8006a14:	08006a87 	.word	0x08006a87
 8006a18:	08006ad5 	.word	0x08006ad5
 8006a1c:	08006ad5 	.word	0x08006ad5
 8006a20:	08006ad5 	.word	0x08006ad5
 8006a24:	08006ad5 	.word	0x08006ad5
 8006a28:	08006ad5 	.word	0x08006ad5
 8006a2c:	08006ad5 	.word	0x08006ad5
 8006a30:	08006ad5 	.word	0x08006ad5
 8006a34:	08006ad5 	.word	0x08006ad5
 8006a38:	08006ad5 	.word	0x08006ad5
 8006a3c:	08006ad5 	.word	0x08006ad5
 8006a40:	08006ad5 	.word	0x08006ad5
 8006a44:	08006ad5 	.word	0x08006ad5
 8006a48:	08006ad5 	.word	0x08006ad5
 8006a4c:	08006ad5 	.word	0x08006ad5
 8006a50:	08006ad5 	.word	0x08006ad5
 8006a54:	08006ac7 	.word	0x08006ac7
 8006a58:	2b40      	cmp	r3, #64	@ 0x40
 8006a5a:	d037      	beq.n	8006acc <UART_SetConfig+0x6bc>
 8006a5c:	e03a      	b.n	8006ad4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006a5e:	f7fe fbab 	bl	80051b8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006a62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a64:	e03c      	b.n	8006ae0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fe fbba 	bl	80051e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a74:	e034      	b.n	8006ae0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a76:	f107 0318 	add.w	r3, r7, #24
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7fe fd06 	bl	800548c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a84:	e02c      	b.n	8006ae0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a86:	4b09      	ldr	r3, [pc, #36]	@ (8006aac <UART_SetConfig+0x69c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0320 	and.w	r3, r3, #32
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d016      	beq.n	8006ac0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a92:	4b06      	ldr	r3, [pc, #24]	@ (8006aac <UART_SetConfig+0x69c>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	08db      	lsrs	r3, r3, #3
 8006a98:	f003 0303 	and.w	r3, r3, #3
 8006a9c:	4a07      	ldr	r2, [pc, #28]	@ (8006abc <UART_SetConfig+0x6ac>)
 8006a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006aa4:	e01c      	b.n	8006ae0 <UART_SetConfig+0x6d0>
 8006aa6:	bf00      	nop
 8006aa8:	40011400 	.word	0x40011400
 8006aac:	58024400 	.word	0x58024400
 8006ab0:	40007800 	.word	0x40007800
 8006ab4:	40007c00 	.word	0x40007c00
 8006ab8:	58000c00 	.word	0x58000c00
 8006abc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006ac0:	4b9d      	ldr	r3, [pc, #628]	@ (8006d38 <UART_SetConfig+0x928>)
 8006ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ac4:	e00c      	b.n	8006ae0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ac6:	4b9d      	ldr	r3, [pc, #628]	@ (8006d3c <UART_SetConfig+0x92c>)
 8006ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aca:	e009      	b.n	8006ae0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006acc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ad2:	e005      	b.n	8006ae0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006ade:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f000 81de 	beq.w	8006ea4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aec:	4a94      	ldr	r2, [pc, #592]	@ (8006d40 <UART_SetConfig+0x930>)
 8006aee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006af2:	461a      	mov	r2, r3
 8006af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006af6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006afa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	4613      	mov	r3, r2
 8006b02:	005b      	lsls	r3, r3, #1
 8006b04:	4413      	add	r3, r2
 8006b06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d305      	bcc.n	8006b18 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d903      	bls.n	8006b20 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006b1e:	e1c1      	b.n	8006ea4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b22:	2200      	movs	r2, #0
 8006b24:	60bb      	str	r3, [r7, #8]
 8006b26:	60fa      	str	r2, [r7, #12]
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2c:	4a84      	ldr	r2, [pc, #528]	@ (8006d40 <UART_SetConfig+0x930>)
 8006b2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	2200      	movs	r2, #0
 8006b36:	603b      	str	r3, [r7, #0]
 8006b38:	607a      	str	r2, [r7, #4]
 8006b3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b42:	f7f9 fbc9 	bl	80002d8 <__aeabi_uldivmod>
 8006b46:	4602      	mov	r2, r0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	4610      	mov	r0, r2
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	f04f 0200 	mov.w	r2, #0
 8006b52:	f04f 0300 	mov.w	r3, #0
 8006b56:	020b      	lsls	r3, r1, #8
 8006b58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b5c:	0202      	lsls	r2, r0, #8
 8006b5e:	6979      	ldr	r1, [r7, #20]
 8006b60:	6849      	ldr	r1, [r1, #4]
 8006b62:	0849      	lsrs	r1, r1, #1
 8006b64:	2000      	movs	r0, #0
 8006b66:	460c      	mov	r4, r1
 8006b68:	4605      	mov	r5, r0
 8006b6a:	eb12 0804 	adds.w	r8, r2, r4
 8006b6e:	eb43 0905 	adc.w	r9, r3, r5
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	469a      	mov	sl, r3
 8006b7a:	4693      	mov	fp, r2
 8006b7c:	4652      	mov	r2, sl
 8006b7e:	465b      	mov	r3, fp
 8006b80:	4640      	mov	r0, r8
 8006b82:	4649      	mov	r1, r9
 8006b84:	f7f9 fba8 	bl	80002d8 <__aeabi_uldivmod>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b96:	d308      	bcc.n	8006baa <UART_SetConfig+0x79a>
 8006b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b9e:	d204      	bcs.n	8006baa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ba6:	60da      	str	r2, [r3, #12]
 8006ba8:	e17c      	b.n	8006ea4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006bb0:	e178      	b.n	8006ea4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bba:	f040 80c5 	bne.w	8006d48 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006bbe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006bc2:	2b20      	cmp	r3, #32
 8006bc4:	dc48      	bgt.n	8006c58 <UART_SetConfig+0x848>
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	db7b      	blt.n	8006cc2 <UART_SetConfig+0x8b2>
 8006bca:	2b20      	cmp	r3, #32
 8006bcc:	d879      	bhi.n	8006cc2 <UART_SetConfig+0x8b2>
 8006bce:	a201      	add	r2, pc, #4	@ (adr r2, 8006bd4 <UART_SetConfig+0x7c4>)
 8006bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd4:	08006c5f 	.word	0x08006c5f
 8006bd8:	08006c67 	.word	0x08006c67
 8006bdc:	08006cc3 	.word	0x08006cc3
 8006be0:	08006cc3 	.word	0x08006cc3
 8006be4:	08006c6f 	.word	0x08006c6f
 8006be8:	08006cc3 	.word	0x08006cc3
 8006bec:	08006cc3 	.word	0x08006cc3
 8006bf0:	08006cc3 	.word	0x08006cc3
 8006bf4:	08006c7f 	.word	0x08006c7f
 8006bf8:	08006cc3 	.word	0x08006cc3
 8006bfc:	08006cc3 	.word	0x08006cc3
 8006c00:	08006cc3 	.word	0x08006cc3
 8006c04:	08006cc3 	.word	0x08006cc3
 8006c08:	08006cc3 	.word	0x08006cc3
 8006c0c:	08006cc3 	.word	0x08006cc3
 8006c10:	08006cc3 	.word	0x08006cc3
 8006c14:	08006c8f 	.word	0x08006c8f
 8006c18:	08006cc3 	.word	0x08006cc3
 8006c1c:	08006cc3 	.word	0x08006cc3
 8006c20:	08006cc3 	.word	0x08006cc3
 8006c24:	08006cc3 	.word	0x08006cc3
 8006c28:	08006cc3 	.word	0x08006cc3
 8006c2c:	08006cc3 	.word	0x08006cc3
 8006c30:	08006cc3 	.word	0x08006cc3
 8006c34:	08006cc3 	.word	0x08006cc3
 8006c38:	08006cc3 	.word	0x08006cc3
 8006c3c:	08006cc3 	.word	0x08006cc3
 8006c40:	08006cc3 	.word	0x08006cc3
 8006c44:	08006cc3 	.word	0x08006cc3
 8006c48:	08006cc3 	.word	0x08006cc3
 8006c4c:	08006cc3 	.word	0x08006cc3
 8006c50:	08006cc3 	.word	0x08006cc3
 8006c54:	08006cb5 	.word	0x08006cb5
 8006c58:	2b40      	cmp	r3, #64	@ 0x40
 8006c5a:	d02e      	beq.n	8006cba <UART_SetConfig+0x8aa>
 8006c5c:	e031      	b.n	8006cc2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c5e:	f7fd f875 	bl	8003d4c <HAL_RCC_GetPCLK1Freq>
 8006c62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c64:	e033      	b.n	8006cce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c66:	f7fd f887 	bl	8003d78 <HAL_RCC_GetPCLK2Freq>
 8006c6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c6c:	e02f      	b.n	8006cce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fe fab6 	bl	80051e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c7c:	e027      	b.n	8006cce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c7e:	f107 0318 	add.w	r3, r7, #24
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fe fc02 	bl	800548c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c8c:	e01f      	b.n	8006cce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c8e:	4b2d      	ldr	r3, [pc, #180]	@ (8006d44 <UART_SetConfig+0x934>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0320 	and.w	r3, r3, #32
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d009      	beq.n	8006cae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8006d44 <UART_SetConfig+0x934>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	08db      	lsrs	r3, r3, #3
 8006ca0:	f003 0303 	and.w	r3, r3, #3
 8006ca4:	4a24      	ldr	r2, [pc, #144]	@ (8006d38 <UART_SetConfig+0x928>)
 8006ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8006caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006cac:	e00f      	b.n	8006cce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006cae:	4b22      	ldr	r3, [pc, #136]	@ (8006d38 <UART_SetConfig+0x928>)
 8006cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cb2:	e00c      	b.n	8006cce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006cb4:	4b21      	ldr	r3, [pc, #132]	@ (8006d3c <UART_SetConfig+0x92c>)
 8006cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cb8:	e009      	b.n	8006cce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cc0:	e005      	b.n	8006cce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006ccc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 80e7 	beq.w	8006ea4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cda:	4a19      	ldr	r2, [pc, #100]	@ (8006d40 <UART_SetConfig+0x930>)
 8006cdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ce4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ce8:	005a      	lsls	r2, r3, #1
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	085b      	lsrs	r3, r3, #1
 8006cf0:	441a      	add	r2, r3
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cfe:	2b0f      	cmp	r3, #15
 8006d00:	d916      	bls.n	8006d30 <UART_SetConfig+0x920>
 8006d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d08:	d212      	bcs.n	8006d30 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	f023 030f 	bic.w	r3, r3, #15
 8006d12:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d16:	085b      	lsrs	r3, r3, #1
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	f003 0307 	and.w	r3, r3, #7
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006d22:	4313      	orrs	r3, r2
 8006d24:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006d2c:	60da      	str	r2, [r3, #12]
 8006d2e:	e0b9      	b.n	8006ea4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006d36:	e0b5      	b.n	8006ea4 <UART_SetConfig+0xa94>
 8006d38:	03d09000 	.word	0x03d09000
 8006d3c:	003d0900 	.word	0x003d0900
 8006d40:	08008c38 	.word	0x08008c38
 8006d44:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d48:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006d4c:	2b20      	cmp	r3, #32
 8006d4e:	dc49      	bgt.n	8006de4 <UART_SetConfig+0x9d4>
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	db7c      	blt.n	8006e4e <UART_SetConfig+0xa3e>
 8006d54:	2b20      	cmp	r3, #32
 8006d56:	d87a      	bhi.n	8006e4e <UART_SetConfig+0xa3e>
 8006d58:	a201      	add	r2, pc, #4	@ (adr r2, 8006d60 <UART_SetConfig+0x950>)
 8006d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5e:	bf00      	nop
 8006d60:	08006deb 	.word	0x08006deb
 8006d64:	08006df3 	.word	0x08006df3
 8006d68:	08006e4f 	.word	0x08006e4f
 8006d6c:	08006e4f 	.word	0x08006e4f
 8006d70:	08006dfb 	.word	0x08006dfb
 8006d74:	08006e4f 	.word	0x08006e4f
 8006d78:	08006e4f 	.word	0x08006e4f
 8006d7c:	08006e4f 	.word	0x08006e4f
 8006d80:	08006e0b 	.word	0x08006e0b
 8006d84:	08006e4f 	.word	0x08006e4f
 8006d88:	08006e4f 	.word	0x08006e4f
 8006d8c:	08006e4f 	.word	0x08006e4f
 8006d90:	08006e4f 	.word	0x08006e4f
 8006d94:	08006e4f 	.word	0x08006e4f
 8006d98:	08006e4f 	.word	0x08006e4f
 8006d9c:	08006e4f 	.word	0x08006e4f
 8006da0:	08006e1b 	.word	0x08006e1b
 8006da4:	08006e4f 	.word	0x08006e4f
 8006da8:	08006e4f 	.word	0x08006e4f
 8006dac:	08006e4f 	.word	0x08006e4f
 8006db0:	08006e4f 	.word	0x08006e4f
 8006db4:	08006e4f 	.word	0x08006e4f
 8006db8:	08006e4f 	.word	0x08006e4f
 8006dbc:	08006e4f 	.word	0x08006e4f
 8006dc0:	08006e4f 	.word	0x08006e4f
 8006dc4:	08006e4f 	.word	0x08006e4f
 8006dc8:	08006e4f 	.word	0x08006e4f
 8006dcc:	08006e4f 	.word	0x08006e4f
 8006dd0:	08006e4f 	.word	0x08006e4f
 8006dd4:	08006e4f 	.word	0x08006e4f
 8006dd8:	08006e4f 	.word	0x08006e4f
 8006ddc:	08006e4f 	.word	0x08006e4f
 8006de0:	08006e41 	.word	0x08006e41
 8006de4:	2b40      	cmp	r3, #64	@ 0x40
 8006de6:	d02e      	beq.n	8006e46 <UART_SetConfig+0xa36>
 8006de8:	e031      	b.n	8006e4e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dea:	f7fc ffaf 	bl	8003d4c <HAL_RCC_GetPCLK1Freq>
 8006dee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006df0:	e033      	b.n	8006e5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006df2:	f7fc ffc1 	bl	8003d78 <HAL_RCC_GetPCLK2Freq>
 8006df6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006df8:	e02f      	b.n	8006e5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fe f9f0 	bl	80051e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e08:	e027      	b.n	8006e5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e0a:	f107 0318 	add.w	r3, r7, #24
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fe fb3c 	bl	800548c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e18:	e01f      	b.n	8006e5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e1a:	4b2d      	ldr	r3, [pc, #180]	@ (8006ed0 <UART_SetConfig+0xac0>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d009      	beq.n	8006e3a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e26:	4b2a      	ldr	r3, [pc, #168]	@ (8006ed0 <UART_SetConfig+0xac0>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	08db      	lsrs	r3, r3, #3
 8006e2c:	f003 0303 	and.w	r3, r3, #3
 8006e30:	4a28      	ldr	r2, [pc, #160]	@ (8006ed4 <UART_SetConfig+0xac4>)
 8006e32:	fa22 f303 	lsr.w	r3, r2, r3
 8006e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e38:	e00f      	b.n	8006e5a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006e3a:	4b26      	ldr	r3, [pc, #152]	@ (8006ed4 <UART_SetConfig+0xac4>)
 8006e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e3e:	e00c      	b.n	8006e5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e40:	4b25      	ldr	r3, [pc, #148]	@ (8006ed8 <UART_SetConfig+0xac8>)
 8006e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e44:	e009      	b.n	8006e5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e4c:	e005      	b.n	8006e5a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006e58:	bf00      	nop
    }

    if (pclk != 0U)
 8006e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d021      	beq.n	8006ea4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e64:	4a1d      	ldr	r2, [pc, #116]	@ (8006edc <UART_SetConfig+0xacc>)
 8006e66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	085b      	lsrs	r3, r3, #1
 8006e78:	441a      	add	r2, r3
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e82:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e86:	2b0f      	cmp	r3, #15
 8006e88:	d909      	bls.n	8006e9e <UART_SetConfig+0xa8e>
 8006e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e90:	d205      	bcs.n	8006e9e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	60da      	str	r2, [r3, #12]
 8006e9c:	e002      	b.n	8006ea4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006ec0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3748      	adds	r7, #72	@ 0x48
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ece:	bf00      	nop
 8006ed0:	58024400 	.word	0x58024400
 8006ed4:	03d09000 	.word	0x03d09000
 8006ed8:	003d0900 	.word	0x003d0900
 8006edc:	08008c38 	.word	0x08008c38

08006ee0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eec:	f003 0308 	and.w	r3, r3, #8
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00a      	beq.n	8006f0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00a      	beq.n	8006f4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f52:	f003 0304 	and.w	r3, r3, #4
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00a      	beq.n	8006f70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f74:	f003 0310 	and.w	r3, r3, #16
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00a      	beq.n	8006f92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f96:	f003 0320 	and.w	r3, r3, #32
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00a      	beq.n	8006fb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d01a      	beq.n	8006ff6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	430a      	orrs	r2, r1
 8006fd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fde:	d10a      	bne.n	8006ff6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00a      	beq.n	8007018 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	430a      	orrs	r2, r1
 8007016:	605a      	str	r2, [r3, #4]
  }
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b098      	sub	sp, #96	@ 0x60
 8007028:	af02      	add	r7, sp, #8
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007034:	f7fa f87a 	bl	800112c <HAL_GetTick>
 8007038:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0308 	and.w	r3, r3, #8
 8007044:	2b08      	cmp	r3, #8
 8007046:	d12f      	bne.n	80070a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007048:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007050:	2200      	movs	r2, #0
 8007052:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f88e 	bl	8007178 <UART_WaitOnFlagUntilTimeout>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d022      	beq.n	80070a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007072:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007076:	653b      	str	r3, [r7, #80]	@ 0x50
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	461a      	mov	r2, r3
 800707e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007080:	647b      	str	r3, [r7, #68]	@ 0x44
 8007082:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007084:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007086:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007088:	e841 2300 	strex	r3, r2, [r1]
 800708c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800708e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1e6      	bne.n	8007062 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2220      	movs	r2, #32
 8007098:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e063      	b.n	8007170 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0304 	and.w	r3, r3, #4
 80070b2:	2b04      	cmp	r3, #4
 80070b4:	d149      	bne.n	800714a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070be:	2200      	movs	r2, #0
 80070c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 f857 	bl	8007178 <UART_WaitOnFlagUntilTimeout>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d03c      	beq.n	800714a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d8:	e853 3f00 	ldrex	r3, [r3]
 80070dc:	623b      	str	r3, [r7, #32]
   return(result);
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80070f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070f6:	e841 2300 	strex	r3, r2, [r1]
 80070fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1e6      	bne.n	80070d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3308      	adds	r3, #8
 8007108:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	e853 3f00 	ldrex	r3, [r3]
 8007110:	60fb      	str	r3, [r7, #12]
   return(result);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f023 0301 	bic.w	r3, r3, #1
 8007118:	64bb      	str	r3, [r7, #72]	@ 0x48
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	3308      	adds	r3, #8
 8007120:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007122:	61fa      	str	r2, [r7, #28]
 8007124:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007126:	69b9      	ldr	r1, [r7, #24]
 8007128:	69fa      	ldr	r2, [r7, #28]
 800712a:	e841 2300 	strex	r3, r2, [r1]
 800712e:	617b      	str	r3, [r7, #20]
   return(result);
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1e5      	bne.n	8007102 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2220      	movs	r2, #32
 800713a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e012      	b.n	8007170 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2220      	movs	r2, #32
 800714e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2220      	movs	r2, #32
 8007156:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3758      	adds	r7, #88	@ 0x58
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	603b      	str	r3, [r7, #0]
 8007184:	4613      	mov	r3, r2
 8007186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007188:	e04f      	b.n	800722a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007190:	d04b      	beq.n	800722a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007192:	f7f9 ffcb 	bl	800112c <HAL_GetTick>
 8007196:	4602      	mov	r2, r0
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d302      	bcc.n	80071a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d101      	bne.n	80071ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e04e      	b.n	800724a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0304 	and.w	r3, r3, #4
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d037      	beq.n	800722a <UART_WaitOnFlagUntilTimeout+0xb2>
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2b80      	cmp	r3, #128	@ 0x80
 80071be:	d034      	beq.n	800722a <UART_WaitOnFlagUntilTimeout+0xb2>
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	2b40      	cmp	r3, #64	@ 0x40
 80071c4:	d031      	beq.n	800722a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	69db      	ldr	r3, [r3, #28]
 80071cc:	f003 0308 	and.w	r3, r3, #8
 80071d0:	2b08      	cmp	r3, #8
 80071d2:	d110      	bne.n	80071f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2208      	movs	r2, #8
 80071da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 f95b 	bl	8007498 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2208      	movs	r2, #8
 80071e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e029      	b.n	800724a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	69db      	ldr	r3, [r3, #28]
 80071fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007200:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007204:	d111      	bne.n	800722a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800720e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 f941 	bl	8007498 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2220      	movs	r2, #32
 800721a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e00f      	b.n	800724a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69da      	ldr	r2, [r3, #28]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	4013      	ands	r3, r2
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	429a      	cmp	r2, r3
 8007238:	bf0c      	ite	eq
 800723a:	2301      	moveq	r3, #1
 800723c:	2300      	movne	r3, #0
 800723e:	b2db      	uxtb	r3, r3
 8007240:	461a      	mov	r2, r3
 8007242:	79fb      	ldrb	r3, [r7, #7]
 8007244:	429a      	cmp	r2, r3
 8007246:	d0a0      	beq.n	800718a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
	...

08007254 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007254:	b480      	push	{r7}
 8007256:	b0a3      	sub	sp, #140	@ 0x8c
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	4613      	mov	r3, r2
 8007260:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	88fa      	ldrh	r2, [r7, #6]
 800726c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	88fa      	ldrh	r2, [r7, #6]
 8007274:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007286:	d10e      	bne.n	80072a6 <UART_Start_Receive_IT+0x52>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d105      	bne.n	800729c <UART_Start_Receive_IT+0x48>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007296:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800729a:	e02d      	b.n	80072f8 <UART_Start_Receive_IT+0xa4>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	22ff      	movs	r2, #255	@ 0xff
 80072a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80072a4:	e028      	b.n	80072f8 <UART_Start_Receive_IT+0xa4>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10d      	bne.n	80072ca <UART_Start_Receive_IT+0x76>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d104      	bne.n	80072c0 <UART_Start_Receive_IT+0x6c>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	22ff      	movs	r2, #255	@ 0xff
 80072ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80072be:	e01b      	b.n	80072f8 <UART_Start_Receive_IT+0xa4>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	227f      	movs	r2, #127	@ 0x7f
 80072c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80072c8:	e016      	b.n	80072f8 <UART_Start_Receive_IT+0xa4>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072d2:	d10d      	bne.n	80072f0 <UART_Start_Receive_IT+0x9c>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d104      	bne.n	80072e6 <UART_Start_Receive_IT+0x92>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	227f      	movs	r2, #127	@ 0x7f
 80072e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80072e4:	e008      	b.n	80072f8 <UART_Start_Receive_IT+0xa4>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	223f      	movs	r2, #63	@ 0x3f
 80072ea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80072ee:	e003      	b.n	80072f8 <UART_Start_Receive_IT+0xa4>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2222      	movs	r2, #34	@ 0x22
 8007304:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3308      	adds	r3, #8
 800730e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007310:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007312:	e853 3f00 	ldrex	r3, [r3]
 8007316:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007318:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800731a:	f043 0301 	orr.w	r3, r3, #1
 800731e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	3308      	adds	r3, #8
 8007328:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800732c:	673a      	str	r2, [r7, #112]	@ 0x70
 800732e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007330:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007332:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007334:	e841 2300 	strex	r3, r2, [r1]
 8007338:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800733a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1e3      	bne.n	8007308 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007344:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007348:	d14f      	bne.n	80073ea <UART_Start_Receive_IT+0x196>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007350:	88fa      	ldrh	r2, [r7, #6]
 8007352:	429a      	cmp	r2, r3
 8007354:	d349      	bcc.n	80073ea <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800735e:	d107      	bne.n	8007370 <UART_Start_Receive_IT+0x11c>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d103      	bne.n	8007370 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4a47      	ldr	r2, [pc, #284]	@ (8007488 <UART_Start_Receive_IT+0x234>)
 800736c:	675a      	str	r2, [r3, #116]	@ 0x74
 800736e:	e002      	b.n	8007376 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4a46      	ldr	r2, [pc, #280]	@ (800748c <UART_Start_Receive_IT+0x238>)
 8007374:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d01a      	beq.n	80073b4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007384:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007386:	e853 3f00 	ldrex	r3, [r3]
 800738a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800738c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800738e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007392:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80073a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073a2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80073a6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80073a8:	e841 2300 	strex	r3, r2, [r1]
 80073ac:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80073ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1e4      	bne.n	800737e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	3308      	adds	r3, #8
 80073ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073be:	e853 3f00 	ldrex	r3, [r3]
 80073c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	3308      	adds	r3, #8
 80073d2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80073d4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80073d6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80073da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073dc:	e841 2300 	strex	r3, r2, [r1]
 80073e0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80073e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1e5      	bne.n	80073b4 <UART_Start_Receive_IT+0x160>
 80073e8:	e046      	b.n	8007478 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073f2:	d107      	bne.n	8007404 <UART_Start_Receive_IT+0x1b0>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d103      	bne.n	8007404 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	4a24      	ldr	r2, [pc, #144]	@ (8007490 <UART_Start_Receive_IT+0x23c>)
 8007400:	675a      	str	r2, [r3, #116]	@ 0x74
 8007402:	e002      	b.n	800740a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	4a23      	ldr	r2, [pc, #140]	@ (8007494 <UART_Start_Receive_IT+0x240>)
 8007408:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d019      	beq.n	8007446 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800741a:	e853 3f00 	ldrex	r3, [r3]
 800741e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007422:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007426:	677b      	str	r3, [r7, #116]	@ 0x74
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	461a      	mov	r2, r3
 800742e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007430:	637b      	str	r3, [r7, #52]	@ 0x34
 8007432:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007434:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007436:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007438:	e841 2300 	strex	r3, r2, [r1]
 800743c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800743e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1e6      	bne.n	8007412 <UART_Start_Receive_IT+0x1be>
 8007444:	e018      	b.n	8007478 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	e853 3f00 	ldrex	r3, [r3]
 8007452:	613b      	str	r3, [r7, #16]
   return(result);
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	f043 0320 	orr.w	r3, r3, #32
 800745a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	461a      	mov	r2, r3
 8007462:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007464:	623b      	str	r3, [r7, #32]
 8007466:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007468:	69f9      	ldr	r1, [r7, #28]
 800746a:	6a3a      	ldr	r2, [r7, #32]
 800746c:	e841 2300 	strex	r3, r2, [r1]
 8007470:	61bb      	str	r3, [r7, #24]
   return(result);
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1e6      	bne.n	8007446 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	378c      	adds	r7, #140	@ 0x8c
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	08007ffd 	.word	0x08007ffd
 800748c:	08007c9d 	.word	0x08007c9d
 8007490:	08007ae5 	.word	0x08007ae5
 8007494:	0800792d 	.word	0x0800792d

08007498 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007498:	b480      	push	{r7}
 800749a:	b095      	sub	sp, #84	@ 0x54
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80074ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	461a      	mov	r2, r3
 80074bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074be:	643b      	str	r3, [r7, #64]	@ 0x40
 80074c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80074c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80074cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e6      	bne.n	80074a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3308      	adds	r3, #8
 80074d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	e853 3f00 	ldrex	r3, [r3]
 80074e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80074e2:	69fa      	ldr	r2, [r7, #28]
 80074e4:	4b1e      	ldr	r3, [pc, #120]	@ (8007560 <UART_EndRxTransfer+0xc8>)
 80074e6:	4013      	ands	r3, r2
 80074e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3308      	adds	r3, #8
 80074f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1e5      	bne.n	80074d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800750a:	2b01      	cmp	r3, #1
 800750c:	d118      	bne.n	8007540 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	e853 3f00 	ldrex	r3, [r3]
 800751a:	60bb      	str	r3, [r7, #8]
   return(result);
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f023 0310 	bic.w	r3, r3, #16
 8007522:	647b      	str	r3, [r7, #68]	@ 0x44
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	461a      	mov	r2, r3
 800752a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800752c:	61bb      	str	r3, [r7, #24]
 800752e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007530:	6979      	ldr	r1, [r7, #20]
 8007532:	69ba      	ldr	r2, [r7, #24]
 8007534:	e841 2300 	strex	r3, r2, [r1]
 8007538:	613b      	str	r3, [r7, #16]
   return(result);
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1e6      	bne.n	800750e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2220      	movs	r2, #32
 8007544:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007554:	bf00      	nop
 8007556:	3754      	adds	r7, #84	@ 0x54
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	effffffe 	.word	0xeffffffe

08007564 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007570:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f7fe ff2e 	bl	80063e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007588:	bf00      	nop
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007590:	b480      	push	{r7}
 8007592:	b08f      	sub	sp, #60	@ 0x3c
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800759e:	2b21      	cmp	r3, #33	@ 0x21
 80075a0:	d14c      	bne.n	800763c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d132      	bne.n	8007614 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	e853 3f00 	ldrex	r3, [r3]
 80075ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	461a      	mov	r2, r3
 80075ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075ce:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075d4:	e841 2300 	strex	r3, r2, [r1]
 80075d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1e6      	bne.n	80075ae <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	e853 3f00 	ldrex	r3, [r3]
 80075ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	461a      	mov	r2, r3
 80075fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fe:	61bb      	str	r3, [r7, #24]
 8007600:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007602:	6979      	ldr	r1, [r7, #20]
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	e841 2300 	strex	r3, r2, [r1]
 800760a:	613b      	str	r3, [r7, #16]
   return(result);
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1e6      	bne.n	80075e0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007612:	e013      	b.n	800763c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007618:	781a      	ldrb	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007630:	b29b      	uxth	r3, r3
 8007632:	3b01      	subs	r3, #1
 8007634:	b29a      	uxth	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800763c:	bf00      	nop
 800763e:	373c      	adds	r7, #60	@ 0x3c
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007648:	b480      	push	{r7}
 800764a:	b091      	sub	sp, #68	@ 0x44
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007656:	2b21      	cmp	r3, #33	@ 0x21
 8007658:	d151      	bne.n	80076fe <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007660:	b29b      	uxth	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d132      	bne.n	80076cc <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766e:	e853 3f00 	ldrex	r3, [r3]
 8007672:	623b      	str	r3, [r7, #32]
   return(result);
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800767a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	461a      	mov	r2, r3
 8007682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007684:	633b      	str	r3, [r7, #48]	@ 0x30
 8007686:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007688:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800768a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800768c:	e841 2300 	strex	r3, r2, [r1]
 8007690:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1e6      	bne.n	8007666 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	461a      	mov	r2, r3
 80076b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076b6:	61fb      	str	r3, [r7, #28]
 80076b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ba:	69b9      	ldr	r1, [r7, #24]
 80076bc:	69fa      	ldr	r2, [r7, #28]
 80076be:	e841 2300 	strex	r3, r2, [r1]
 80076c2:	617b      	str	r3, [r7, #20]
   return(result);
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1e6      	bne.n	8007698 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80076ca:	e018      	b.n	80076fe <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80076d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	461a      	mov	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076e0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076e6:	1c9a      	adds	r2, r3, #2
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	3b01      	subs	r3, #1
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80076fe:	bf00      	nop
 8007700:	3744      	adds	r7, #68	@ 0x44
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800770a:	b480      	push	{r7}
 800770c:	b091      	sub	sp, #68	@ 0x44
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007718:	2b21      	cmp	r3, #33	@ 0x21
 800771a:	d160      	bne.n	80077de <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007722:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007724:	e057      	b.n	80077d6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800772c:	b29b      	uxth	r3, r3
 800772e:	2b00      	cmp	r3, #0
 8007730:	d133      	bne.n	800779a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	3308      	adds	r3, #8
 8007738:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773c:	e853 3f00 	ldrex	r3, [r3]
 8007740:	623b      	str	r3, [r7, #32]
   return(result);
 8007742:	6a3b      	ldr	r3, [r7, #32]
 8007744:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007748:	63bb      	str	r3, [r7, #56]	@ 0x38
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	3308      	adds	r3, #8
 8007750:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007752:	633a      	str	r2, [r7, #48]	@ 0x30
 8007754:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007756:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007758:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800775a:	e841 2300 	strex	r3, r2, [r1]
 800775e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1e5      	bne.n	8007732 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	e853 3f00 	ldrex	r3, [r3]
 8007772:	60fb      	str	r3, [r7, #12]
   return(result);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800777a:	637b      	str	r3, [r7, #52]	@ 0x34
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	461a      	mov	r2, r3
 8007782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007784:	61fb      	str	r3, [r7, #28]
 8007786:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007788:	69b9      	ldr	r1, [r7, #24]
 800778a:	69fa      	ldr	r2, [r7, #28]
 800778c:	e841 2300 	strex	r3, r2, [r1]
 8007790:	617b      	str	r3, [r7, #20]
   return(result);
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1e6      	bne.n	8007766 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007798:	e021      	b.n	80077de <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69db      	ldr	r3, [r3, #28]
 80077a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d013      	beq.n	80077d0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077ac:	781a      	ldrb	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077b8:	1c5a      	adds	r2, r3, #1
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	3b01      	subs	r3, #1
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80077d0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80077d2:	3b01      	subs	r3, #1
 80077d4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80077d6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1a4      	bne.n	8007726 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80077dc:	e7ff      	b.n	80077de <UART_TxISR_8BIT_FIFOEN+0xd4>
 80077de:	bf00      	nop
 80077e0:	3744      	adds	r7, #68	@ 0x44
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b091      	sub	sp, #68	@ 0x44
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077f8:	2b21      	cmp	r3, #33	@ 0x21
 80077fa:	d165      	bne.n	80078c8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007802:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007804:	e05c      	b.n	80078c0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800780c:	b29b      	uxth	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	d133      	bne.n	800787a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	3308      	adds	r3, #8
 8007818:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781a:	6a3b      	ldr	r3, [r7, #32]
 800781c:	e853 3f00 	ldrex	r3, [r3]
 8007820:	61fb      	str	r3, [r7, #28]
   return(result);
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007828:	637b      	str	r3, [r7, #52]	@ 0x34
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3308      	adds	r3, #8
 8007830:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007832:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007834:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007836:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007838:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e5      	bne.n	8007812 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	e853 3f00 	ldrex	r3, [r3]
 8007852:	60bb      	str	r3, [r7, #8]
   return(result);
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800785a:	633b      	str	r3, [r7, #48]	@ 0x30
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	461a      	mov	r2, r3
 8007862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007864:	61bb      	str	r3, [r7, #24]
 8007866:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007868:	6979      	ldr	r1, [r7, #20]
 800786a:	69ba      	ldr	r2, [r7, #24]
 800786c:	e841 2300 	strex	r3, r2, [r1]
 8007870:	613b      	str	r3, [r7, #16]
   return(result);
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1e6      	bne.n	8007846 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007878:	e026      	b.n	80078c8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	69db      	ldr	r3, [r3, #28]
 8007880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007884:	2b00      	cmp	r3, #0
 8007886:	d018      	beq.n	80078ba <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800788c:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800788e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007890:	881b      	ldrh	r3, [r3, #0]
 8007892:	461a      	mov	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800789c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078a2:	1c9a      	adds	r2, r3, #2
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	3b01      	subs	r3, #1
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80078ba:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80078bc:	3b01      	subs	r3, #1
 80078be:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80078c0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d19f      	bne.n	8007806 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80078c6:	e7ff      	b.n	80078c8 <UART_TxISR_16BIT_FIFOEN+0xde>
 80078c8:	bf00      	nop
 80078ca:	3744      	adds	r7, #68	@ 0x44
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b088      	sub	sp, #32
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	e853 3f00 	ldrex	r3, [r3]
 80078e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078f0:	61fb      	str	r3, [r7, #28]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	461a      	mov	r2, r3
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	61bb      	str	r3, [r7, #24]
 80078fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fe:	6979      	ldr	r1, [r7, #20]
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	e841 2300 	strex	r3, r2, [r1]
 8007906:	613b      	str	r3, [r7, #16]
   return(result);
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1e6      	bne.n	80078dc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2220      	movs	r2, #32
 8007912:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7fe fd57 	bl	80063d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007922:	bf00      	nop
 8007924:	3720      	adds	r7, #32
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
	...

0800792c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b09c      	sub	sp, #112	@ 0x70
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800793a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007944:	2b22      	cmp	r3, #34	@ 0x22
 8007946:	f040 80be 	bne.w	8007ac6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007950:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007954:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007958:	b2d9      	uxtb	r1, r3
 800795a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800795e:	b2da      	uxtb	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007964:	400a      	ands	r2, r1
 8007966:	b2d2      	uxtb	r2, r2
 8007968:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800796e:	1c5a      	adds	r2, r3, #1
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800797a:	b29b      	uxth	r3, r3
 800797c:	3b01      	subs	r3, #1
 800797e:	b29a      	uxth	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800798c:	b29b      	uxth	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	f040 80a1 	bne.w	8007ad6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800799c:	e853 3f00 	ldrex	r3, [r3]
 80079a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80079a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	461a      	mov	r2, r3
 80079b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80079b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80079b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80079ba:	e841 2300 	strex	r3, r2, [r1]
 80079be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80079c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1e6      	bne.n	8007994 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	3308      	adds	r3, #8
 80079cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d0:	e853 3f00 	ldrex	r3, [r3]
 80079d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079d8:	f023 0301 	bic.w	r3, r3, #1
 80079dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	3308      	adds	r3, #8
 80079e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80079e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80079e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1e5      	bne.n	80079c6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2220      	movs	r2, #32
 80079fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a33      	ldr	r2, [pc, #204]	@ (8007ae0 <UART_RxISR_8BIT+0x1b4>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d01f      	beq.n	8007a58 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d018      	beq.n	8007a58 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	623b      	str	r3, [r7, #32]
   return(result);
 8007a34:	6a3b      	ldr	r3, [r7, #32]
 8007a36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	461a      	mov	r2, r3
 8007a42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a44:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a46:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a4c:	e841 2300 	strex	r3, r2, [r1]
 8007a50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e6      	bne.n	8007a26 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d12e      	bne.n	8007abe <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	e853 3f00 	ldrex	r3, [r3]
 8007a72:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f023 0310 	bic.w	r3, r3, #16
 8007a7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	461a      	mov	r2, r3
 8007a82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a84:	61fb      	str	r3, [r7, #28]
 8007a86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	69b9      	ldr	r1, [r7, #24]
 8007a8a:	69fa      	ldr	r2, [r7, #28]
 8007a8c:	e841 2300 	strex	r3, r2, [r1]
 8007a90:	617b      	str	r3, [r7, #20]
   return(result);
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1e6      	bne.n	8007a66 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	f003 0310 	and.w	r3, r3, #16
 8007aa2:	2b10      	cmp	r3, #16
 8007aa4:	d103      	bne.n	8007aae <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2210      	movs	r2, #16
 8007aac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f7fe fc9e 	bl	80063f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007abc:	e00b      	b.n	8007ad6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7f9 f81c 	bl	8000afc <HAL_UART_RxCpltCallback>
}
 8007ac4:	e007      	b.n	8007ad6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	699a      	ldr	r2, [r3, #24]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f042 0208 	orr.w	r2, r2, #8
 8007ad4:	619a      	str	r2, [r3, #24]
}
 8007ad6:	bf00      	nop
 8007ad8:	3770      	adds	r7, #112	@ 0x70
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	58000c00 	.word	0x58000c00

08007ae4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b09c      	sub	sp, #112	@ 0x70
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007af2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007afc:	2b22      	cmp	r3, #34	@ 0x22
 8007afe:	f040 80be 	bne.w	8007c7e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b08:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b10:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007b12:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007b16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b20:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b26:	1c9a      	adds	r2, r3, #2
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	3b01      	subs	r3, #1
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f040 80a1 	bne.w	8007c8e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b54:	e853 3f00 	ldrex	r3, [r3]
 8007b58:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007b5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b60:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	461a      	mov	r2, r3
 8007b68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b6c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007b72:	e841 2300 	strex	r3, r2, [r1]
 8007b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007b78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1e6      	bne.n	8007b4c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3308      	adds	r3, #8
 8007b84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b88:	e853 3f00 	ldrex	r3, [r3]
 8007b8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b90:	f023 0301 	bic.w	r3, r3, #1
 8007b94:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3308      	adds	r3, #8
 8007b9c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007b9e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ba4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ba6:	e841 2300 	strex	r3, r2, [r1]
 8007baa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1e5      	bne.n	8007b7e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2220      	movs	r2, #32
 8007bb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a33      	ldr	r2, [pc, #204]	@ (8007c98 <UART_RxISR_16BIT+0x1b4>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d01f      	beq.n	8007c10 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d018      	beq.n	8007c10 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be4:	6a3b      	ldr	r3, [r7, #32]
 8007be6:	e853 3f00 	ldrex	r3, [r3]
 8007bea:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007bf2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bfe:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c04:	e841 2300 	strex	r3, r2, [r1]
 8007c08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1e6      	bne.n	8007bde <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d12e      	bne.n	8007c76 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	e853 3f00 	ldrex	r3, [r3]
 8007c2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	f023 0310 	bic.w	r3, r3, #16
 8007c32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	461a      	mov	r2, r3
 8007c3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c3c:	61bb      	str	r3, [r7, #24]
 8007c3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c40:	6979      	ldr	r1, [r7, #20]
 8007c42:	69ba      	ldr	r2, [r7, #24]
 8007c44:	e841 2300 	strex	r3, r2, [r1]
 8007c48:	613b      	str	r3, [r7, #16]
   return(result);
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1e6      	bne.n	8007c1e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	f003 0310 	and.w	r3, r3, #16
 8007c5a:	2b10      	cmp	r3, #16
 8007c5c:	d103      	bne.n	8007c66 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2210      	movs	r2, #16
 8007c64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7fe fbc2 	bl	80063f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c74:	e00b      	b.n	8007c8e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f7f8 ff40 	bl	8000afc <HAL_UART_RxCpltCallback>
}
 8007c7c:	e007      	b.n	8007c8e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	699a      	ldr	r2, [r3, #24]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f042 0208 	orr.w	r2, r2, #8
 8007c8c:	619a      	str	r2, [r3, #24]
}
 8007c8e:	bf00      	nop
 8007c90:	3770      	adds	r7, #112	@ 0x70
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	58000c00 	.word	0x58000c00

08007c9c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b0ac      	sub	sp, #176	@ 0xb0
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007caa:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	69db      	ldr	r3, [r3, #28]
 8007cb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cd2:	2b22      	cmp	r3, #34	@ 0x22
 8007cd4:	f040 8180 	bne.w	8007fd8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007cde:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ce2:	e123      	b.n	8007f2c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cea:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007cee:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007cf2:	b2d9      	uxtb	r1, r3
 8007cf4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007cf8:	b2da      	uxtb	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cfe:	400a      	ands	r2, r1
 8007d00:	b2d2      	uxtb	r2, r2
 8007d02:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d08:	1c5a      	adds	r2, r3, #1
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	3b01      	subs	r3, #1
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	69db      	ldr	r3, [r3, #28]
 8007d26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007d2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d2e:	f003 0307 	and.w	r3, r3, #7
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d053      	beq.n	8007dde <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d011      	beq.n	8007d66 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007d42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00b      	beq.n	8007d66 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2201      	movs	r2, #1
 8007d54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d5c:	f043 0201 	orr.w	r2, r3, #1
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d6a:	f003 0302 	and.w	r3, r3, #2
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d011      	beq.n	8007d96 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007d72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00b      	beq.n	8007d96 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2202      	movs	r2, #2
 8007d84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d8c:	f043 0204 	orr.w	r2, r3, #4
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d9a:	f003 0304 	and.w	r3, r3, #4
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d011      	beq.n	8007dc6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007da2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00b      	beq.n	8007dc6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2204      	movs	r2, #4
 8007db4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dbc:	f043 0202 	orr.w	r2, r3, #2
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d006      	beq.n	8007dde <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7fe fb07 	bl	80063e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f040 80a0 	bne.w	8007f2c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007df4:	e853 3f00 	ldrex	r3, [r3]
 8007df8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007dfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007dfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e10:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e12:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007e14:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007e16:	e841 2300 	strex	r3, r2, [r1]
 8007e1a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007e1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1e4      	bne.n	8007dec <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	3308      	adds	r3, #8
 8007e28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e2c:	e853 3f00 	ldrex	r3, [r3]
 8007e30:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007e32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e34:	4b6e      	ldr	r3, [pc, #440]	@ (8007ff0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8007e36:	4013      	ands	r3, r2
 8007e38:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	3308      	adds	r3, #8
 8007e42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007e46:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007e48:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007e4c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007e4e:	e841 2300 	strex	r3, r2, [r1]
 8007e52:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007e54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1e3      	bne.n	8007e22 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a60      	ldr	r2, [pc, #384]	@ (8007ff4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d021      	beq.n	8007ebc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d01a      	beq.n	8007ebc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e8e:	e853 3f00 	ldrex	r3, [r3]
 8007e92:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ea8:	657b      	str	r3, [r7, #84]	@ 0x54
 8007eaa:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007eae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007eb0:	e841 2300 	strex	r3, r2, [r1]
 8007eb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007eb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1e4      	bne.n	8007e86 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d130      	bne.n	8007f26 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed2:	e853 3f00 	ldrex	r3, [r3]
 8007ed6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eda:	f023 0310 	bic.w	r3, r3, #16
 8007ede:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007eec:	643b      	str	r3, [r7, #64]	@ 0x40
 8007eee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ef2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ef4:	e841 2300 	strex	r3, r2, [r1]
 8007ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1e4      	bne.n	8007eca <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	69db      	ldr	r3, [r3, #28]
 8007f06:	f003 0310 	and.w	r3, r3, #16
 8007f0a:	2b10      	cmp	r3, #16
 8007f0c:	d103      	bne.n	8007f16 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2210      	movs	r2, #16
 8007f14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7fe fa6a 	bl	80063f8 <HAL_UARTEx_RxEventCallback>
 8007f24:	e002      	b.n	8007f2c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7f8 fde8 	bl	8000afc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f2c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d006      	beq.n	8007f42 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8007f34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f38:	f003 0320 	and.w	r3, r3, #32
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f47f aed1 	bne.w	8007ce4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f48:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007f4c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d049      	beq.n	8007fe8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007f5a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d242      	bcs.n	8007fe8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3308      	adds	r3, #8
 8007f68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6a:	6a3b      	ldr	r3, [r7, #32]
 8007f6c:	e853 3f00 	ldrex	r3, [r3]
 8007f70:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3308      	adds	r3, #8
 8007f82:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007f86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f8e:	e841 2300 	strex	r3, r2, [r1]
 8007f92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1e3      	bne.n	8007f62 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a16      	ldr	r2, [pc, #88]	@ (8007ff8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007f9e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	e853 3f00 	ldrex	r3, [r3]
 8007fac:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	f043 0320 	orr.w	r3, r3, #32
 8007fb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007fc2:	61bb      	str	r3, [r7, #24]
 8007fc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc6:	6979      	ldr	r1, [r7, #20]
 8007fc8:	69ba      	ldr	r2, [r7, #24]
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	613b      	str	r3, [r7, #16]
   return(result);
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1e4      	bne.n	8007fa0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fd6:	e007      	b.n	8007fe8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	699a      	ldr	r2, [r3, #24]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f042 0208 	orr.w	r2, r2, #8
 8007fe6:	619a      	str	r2, [r3, #24]
}
 8007fe8:	bf00      	nop
 8007fea:	37b0      	adds	r7, #176	@ 0xb0
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	effffffe 	.word	0xeffffffe
 8007ff4:	58000c00 	.word	0x58000c00
 8007ff8:	0800792d 	.word	0x0800792d

08007ffc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b0ae      	sub	sp, #184	@ 0xb8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800800a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	69db      	ldr	r3, [r3, #28]
 8008014:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008032:	2b22      	cmp	r3, #34	@ 0x22
 8008034:	f040 8184 	bne.w	8008340 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800803e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008042:	e127      	b.n	8008294 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800804a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008052:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008056:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800805a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800805e:	4013      	ands	r3, r2
 8008060:	b29a      	uxth	r2, r3
 8008062:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008066:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800806c:	1c9a      	adds	r2, r3, #2
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008078:	b29b      	uxth	r3, r3
 800807a:	3b01      	subs	r3, #1
 800807c:	b29a      	uxth	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800808e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008092:	f003 0307 	and.w	r3, r3, #7
 8008096:	2b00      	cmp	r3, #0
 8008098:	d053      	beq.n	8008142 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800809a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d011      	beq.n	80080ca <UART_RxISR_16BIT_FIFOEN+0xce>
 80080a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00b      	beq.n	80080ca <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2201      	movs	r2, #1
 80080b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080c0:	f043 0201 	orr.w	r2, r3, #1
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80080ce:	f003 0302 	and.w	r3, r3, #2
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d011      	beq.n	80080fa <UART_RxISR_16BIT_FIFOEN+0xfe>
 80080d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00b      	beq.n	80080fa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2202      	movs	r2, #2
 80080e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080f0:	f043 0204 	orr.w	r2, r3, #4
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80080fe:	f003 0304 	and.w	r3, r3, #4
 8008102:	2b00      	cmp	r3, #0
 8008104:	d011      	beq.n	800812a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008106:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00b      	beq.n	800812a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2204      	movs	r2, #4
 8008118:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008120:	f043 0202 	orr.w	r2, r3, #2
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008130:	2b00      	cmp	r3, #0
 8008132:	d006      	beq.n	8008142 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f7fe f955 	bl	80063e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008148:	b29b      	uxth	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	f040 80a2 	bne.w	8008294 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008156:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008158:	e853 3f00 	ldrex	r3, [r3]
 800815c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800815e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008160:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008164:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	461a      	mov	r2, r3
 800816e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008172:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008176:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008178:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800817a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800817e:	e841 2300 	strex	r3, r2, [r1]
 8008182:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008184:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1e2      	bne.n	8008150 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	3308      	adds	r3, #8
 8008190:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008192:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008194:	e853 3f00 	ldrex	r3, [r3]
 8008198:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800819a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800819c:	4b6e      	ldr	r3, [pc, #440]	@ (8008358 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800819e:	4013      	ands	r3, r2
 80081a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3308      	adds	r3, #8
 80081aa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80081ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80081b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80081b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80081b6:	e841 2300 	strex	r3, r2, [r1]
 80081ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80081bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1e3      	bne.n	800818a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2220      	movs	r2, #32
 80081c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a60      	ldr	r2, [pc, #384]	@ (800835c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d021      	beq.n	8008224 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d01a      	beq.n	8008224 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081f6:	e853 3f00 	ldrex	r3, [r3]
 80081fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80081fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008202:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	461a      	mov	r2, r3
 800820c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008210:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008212:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008214:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008216:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008218:	e841 2300 	strex	r3, r2, [r1]
 800821c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800821e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1e4      	bne.n	80081ee <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008228:	2b01      	cmp	r3, #1
 800822a:	d130      	bne.n	800828e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800823a:	e853 3f00 	ldrex	r3, [r3]
 800823e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008242:	f023 0310 	bic.w	r3, r3, #16
 8008246:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	461a      	mov	r2, r3
 8008250:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008254:	647b      	str	r3, [r7, #68]	@ 0x44
 8008256:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008258:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800825a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800825c:	e841 2300 	strex	r3, r2, [r1]
 8008260:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1e4      	bne.n	8008232 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	f003 0310 	and.w	r3, r3, #16
 8008272:	2b10      	cmp	r3, #16
 8008274:	d103      	bne.n	800827e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2210      	movs	r2, #16
 800827c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008284:	4619      	mov	r1, r3
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7fe f8b6 	bl	80063f8 <HAL_UARTEx_RxEventCallback>
 800828c:	e002      	b.n	8008294 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f7f8 fc34 	bl	8000afc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008294:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008298:	2b00      	cmp	r3, #0
 800829a:	d006      	beq.n	80082aa <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800829c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80082a0:	f003 0320 	and.w	r3, r3, #32
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f47f aecd 	bne.w	8008044 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082b0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80082b4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d049      	beq.n	8008350 <UART_RxISR_16BIT_FIFOEN+0x354>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80082c2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d242      	bcs.n	8008350 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	3308      	adds	r3, #8
 80082d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d4:	e853 3f00 	ldrex	r3, [r3]
 80082d8:	623b      	str	r3, [r7, #32]
   return(result);
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	3308      	adds	r3, #8
 80082ea:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80082ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80082f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082f6:	e841 2300 	strex	r3, r2, [r1]
 80082fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80082fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1e3      	bne.n	80082ca <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a16      	ldr	r2, [pc, #88]	@ (8008360 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008306:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	e853 3f00 	ldrex	r3, [r3]
 8008314:	60fb      	str	r3, [r7, #12]
   return(result);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f043 0320 	orr.w	r3, r3, #32
 800831c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	461a      	mov	r2, r3
 8008326:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800832a:	61fb      	str	r3, [r7, #28]
 800832c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832e:	69b9      	ldr	r1, [r7, #24]
 8008330:	69fa      	ldr	r2, [r7, #28]
 8008332:	e841 2300 	strex	r3, r2, [r1]
 8008336:	617b      	str	r3, [r7, #20]
   return(result);
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1e4      	bne.n	8008308 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800833e:	e007      	b.n	8008350 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	699a      	ldr	r2, [r3, #24]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f042 0208 	orr.w	r2, r2, #8
 800834e:	619a      	str	r2, [r3, #24]
}
 8008350:	bf00      	nop
 8008352:	37b8      	adds	r7, #184	@ 0xb8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	effffffe 	.word	0xeffffffe
 800835c:	58000c00 	.word	0x58000c00
 8008360:	08007ae5 	.word	0x08007ae5

08008364 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008394:	bf00      	nop
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d101      	bne.n	80083b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80083b2:	2302      	movs	r3, #2
 80083b4:	e027      	b.n	8008406 <HAL_UARTEx_DisableFifoMode+0x66>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2224      	movs	r2, #36	@ 0x24
 80083c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 0201 	bic.w	r2, r2, #1
 80083dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80083e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2220      	movs	r2, #32
 80083f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3714      	adds	r7, #20
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr

08008412 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b084      	sub	sp, #16
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008422:	2b01      	cmp	r3, #1
 8008424:	d101      	bne.n	800842a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008426:	2302      	movs	r3, #2
 8008428:	e02d      	b.n	8008486 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2224      	movs	r2, #36	@ 0x24
 8008436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f022 0201 	bic.w	r2, r2, #1
 8008450:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	683a      	ldr	r2, [r7, #0]
 8008462:	430a      	orrs	r2, r1
 8008464:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f850 	bl	800850c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2220      	movs	r2, #32
 8008478:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b084      	sub	sp, #16
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d101      	bne.n	80084a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80084a2:	2302      	movs	r3, #2
 80084a4:	e02d      	b.n	8008502 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2201      	movs	r2, #1
 80084aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2224      	movs	r2, #36	@ 0x24
 80084b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f022 0201 	bic.w	r2, r2, #1
 80084cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	683a      	ldr	r2, [r7, #0]
 80084de:	430a      	orrs	r2, r1
 80084e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f812 	bl	800850c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2220      	movs	r2, #32
 80084f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
	...

0800850c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008518:	2b00      	cmp	r3, #0
 800851a:	d108      	bne.n	800852e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800852c:	e031      	b.n	8008592 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800852e:	2310      	movs	r3, #16
 8008530:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008532:	2310      	movs	r3, #16
 8008534:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	0e5b      	lsrs	r3, r3, #25
 800853e:	b2db      	uxtb	r3, r3
 8008540:	f003 0307 	and.w	r3, r3, #7
 8008544:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	0f5b      	lsrs	r3, r3, #29
 800854e:	b2db      	uxtb	r3, r3
 8008550:	f003 0307 	and.w	r3, r3, #7
 8008554:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008556:	7bbb      	ldrb	r3, [r7, #14]
 8008558:	7b3a      	ldrb	r2, [r7, #12]
 800855a:	4911      	ldr	r1, [pc, #68]	@ (80085a0 <UARTEx_SetNbDataToProcess+0x94>)
 800855c:	5c8a      	ldrb	r2, [r1, r2]
 800855e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008562:	7b3a      	ldrb	r2, [r7, #12]
 8008564:	490f      	ldr	r1, [pc, #60]	@ (80085a4 <UARTEx_SetNbDataToProcess+0x98>)
 8008566:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008568:	fb93 f3f2 	sdiv	r3, r3, r2
 800856c:	b29a      	uxth	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008574:	7bfb      	ldrb	r3, [r7, #15]
 8008576:	7b7a      	ldrb	r2, [r7, #13]
 8008578:	4909      	ldr	r1, [pc, #36]	@ (80085a0 <UARTEx_SetNbDataToProcess+0x94>)
 800857a:	5c8a      	ldrb	r2, [r1, r2]
 800857c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008580:	7b7a      	ldrb	r2, [r7, #13]
 8008582:	4908      	ldr	r1, [pc, #32]	@ (80085a4 <UARTEx_SetNbDataToProcess+0x98>)
 8008584:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008586:	fb93 f3f2 	sdiv	r3, r3, r2
 800858a:	b29a      	uxth	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008592:	bf00      	nop
 8008594:	3714      	adds	r7, #20
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	08008c50 	.word	0x08008c50
 80085a4:	08008c58 	.word	0x08008c58

080085a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085a8:	b084      	sub	sp, #16
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b084      	sub	sp, #16
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
 80085b2:	f107 001c 	add.w	r0, r7, #28
 80085b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80085ba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d121      	bne.n	8008606 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68da      	ldr	r2, [r3, #12]
 80085d2:	4b2c      	ldr	r3, [pc, #176]	@ (8008684 <USB_CoreInit+0xdc>)
 80085d4:	4013      	ands	r3, r2
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80085e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d105      	bne.n	80085fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 faaa 	bl	8008b54 <USB_CoreReset>
 8008600:	4603      	mov	r3, r0
 8008602:	73fb      	strb	r3, [r7, #15]
 8008604:	e01b      	b.n	800863e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fa9e 	bl	8008b54 <USB_CoreReset>
 8008618:	4603      	mov	r3, r0
 800861a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800861c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008620:	2b00      	cmp	r3, #0
 8008622:	d106      	bne.n	8008632 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008628:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008630:	e005      	b.n	800863e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008636:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800863e:	7fbb      	ldrb	r3, [r7, #30]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d116      	bne.n	8008672 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008648:	b29a      	uxth	r2, r3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008652:	4b0d      	ldr	r3, [pc, #52]	@ (8008688 <USB_CoreInit+0xe0>)
 8008654:	4313      	orrs	r3, r2
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f043 0206 	orr.w	r2, r3, #6
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	f043 0220 	orr.w	r2, r3, #32
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008672:	7bfb      	ldrb	r3, [r7, #15]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800867e:	b004      	add	sp, #16
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	ffbdffbf 	.word	0xffbdffbf
 8008688:	03ee0000 	.word	0x03ee0000

0800868c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	f023 0201 	bic.w	r2, r3, #1
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b084      	sub	sp, #16
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	460b      	mov	r3, r1
 80086b8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80086ba:	2300      	movs	r3, #0
 80086bc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80086ca:	78fb      	ldrb	r3, [r7, #3]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d115      	bne.n	80086fc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80086dc:	200a      	movs	r0, #10
 80086de:	f7f8 fd31 	bl	8001144 <HAL_Delay>
      ms += 10U;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	330a      	adds	r3, #10
 80086e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fa25 	bl	8008b38 <USB_GetMode>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d01e      	beq.n	8008732 <USB_SetCurrentMode+0x84>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2bc7      	cmp	r3, #199	@ 0xc7
 80086f8:	d9f0      	bls.n	80086dc <USB_SetCurrentMode+0x2e>
 80086fa:	e01a      	b.n	8008732 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80086fc:	78fb      	ldrb	r3, [r7, #3]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d115      	bne.n	800872e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800870e:	200a      	movs	r0, #10
 8008710:	f7f8 fd18 	bl	8001144 <HAL_Delay>
      ms += 10U;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	330a      	adds	r3, #10
 8008718:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fa0c 	bl	8008b38 <USB_GetMode>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d005      	beq.n	8008732 <USB_SetCurrentMode+0x84>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2bc7      	cmp	r3, #199	@ 0xc7
 800872a:	d9f0      	bls.n	800870e <USB_SetCurrentMode+0x60>
 800872c:	e001      	b.n	8008732 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e005      	b.n	800873e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2bc8      	cmp	r3, #200	@ 0xc8
 8008736:	d101      	bne.n	800873c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e000      	b.n	800873e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
	...

08008748 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008748:	b084      	sub	sp, #16
 800874a:	b580      	push	{r7, lr}
 800874c:	b086      	sub	sp, #24
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008756:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008762:	2300      	movs	r3, #0
 8008764:	613b      	str	r3, [r7, #16]
 8008766:	e009      	b.n	800877c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	3340      	adds	r3, #64	@ 0x40
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4413      	add	r3, r2
 8008772:	2200      	movs	r2, #0
 8008774:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	3301      	adds	r3, #1
 800877a:	613b      	str	r3, [r7, #16]
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	2b0e      	cmp	r3, #14
 8008780:	d9f2      	bls.n	8008768 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008782:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008786:	2b00      	cmp	r3, #0
 8008788:	d11c      	bne.n	80087c4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008798:	f043 0302 	orr.w	r3, r3, #2
 800879c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087a2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	601a      	str	r2, [r3, #0]
 80087c2:	e005      	b.n	80087d0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087c8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80087d6:	461a      	mov	r2, r3
 80087d8:	2300      	movs	r3, #0
 80087da:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087dc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d10d      	bne.n	8008800 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80087e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d104      	bne.n	80087f6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80087ec:	2100      	movs	r1, #0
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f968 	bl	8008ac4 <USB_SetDevSpeed>
 80087f4:	e008      	b.n	8008808 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80087f6:	2101      	movs	r1, #1
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f963 	bl	8008ac4 <USB_SetDevSpeed>
 80087fe:	e003      	b.n	8008808 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008800:	2103      	movs	r1, #3
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f95e 	bl	8008ac4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008808:	2110      	movs	r1, #16
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f8fa 	bl	8008a04 <USB_FlushTxFifo>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f924 	bl	8008a68 <USB_FlushRxFifo>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008830:	461a      	mov	r2, r3
 8008832:	2300      	movs	r3, #0
 8008834:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800883c:	461a      	mov	r2, r3
 800883e:	2300      	movs	r3, #0
 8008840:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008848:	461a      	mov	r2, r3
 800884a:	2300      	movs	r3, #0
 800884c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800884e:	2300      	movs	r3, #0
 8008850:	613b      	str	r3, [r7, #16]
 8008852:	e043      	b.n	80088dc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	015a      	lsls	r2, r3, #5
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	4413      	add	r3, r2
 800885c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008866:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800886a:	d118      	bne.n	800889e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10a      	bne.n	8008888 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	015a      	lsls	r2, r3, #5
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	4413      	add	r3, r2
 800887a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800887e:	461a      	mov	r2, r3
 8008880:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008884:	6013      	str	r3, [r2, #0]
 8008886:	e013      	b.n	80088b0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	4413      	add	r3, r2
 8008890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008894:	461a      	mov	r2, r3
 8008896:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800889a:	6013      	str	r3, [r2, #0]
 800889c:	e008      	b.n	80088b0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	015a      	lsls	r2, r3, #5
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	4413      	add	r3, r2
 80088a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088aa:	461a      	mov	r2, r3
 80088ac:	2300      	movs	r3, #0
 80088ae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	015a      	lsls	r2, r3, #5
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	4413      	add	r3, r2
 80088b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088bc:	461a      	mov	r2, r3
 80088be:	2300      	movs	r3, #0
 80088c0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	015a      	lsls	r2, r3, #5
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	4413      	add	r3, r2
 80088ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088ce:	461a      	mov	r2, r3
 80088d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80088d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	3301      	adds	r3, #1
 80088da:	613b      	str	r3, [r7, #16]
 80088dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80088e0:	461a      	mov	r2, r3
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d3b5      	bcc.n	8008854 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088e8:	2300      	movs	r3, #0
 80088ea:	613b      	str	r3, [r7, #16]
 80088ec:	e043      	b.n	8008976 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	015a      	lsls	r2, r3, #5
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	4413      	add	r3, r2
 80088f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008900:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008904:	d118      	bne.n	8008938 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10a      	bne.n	8008922 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	015a      	lsls	r2, r3, #5
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	4413      	add	r3, r2
 8008914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008918:	461a      	mov	r2, r3
 800891a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800891e:	6013      	str	r3, [r2, #0]
 8008920:	e013      	b.n	800894a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	015a      	lsls	r2, r3, #5
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	4413      	add	r3, r2
 800892a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800892e:	461a      	mov	r2, r3
 8008930:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008934:	6013      	str	r3, [r2, #0]
 8008936:	e008      	b.n	800894a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	015a      	lsls	r2, r3, #5
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	4413      	add	r3, r2
 8008940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008944:	461a      	mov	r2, r3
 8008946:	2300      	movs	r3, #0
 8008948:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	4413      	add	r3, r2
 8008952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008956:	461a      	mov	r2, r3
 8008958:	2300      	movs	r3, #0
 800895a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	015a      	lsls	r2, r3, #5
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	4413      	add	r3, r2
 8008964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008968:	461a      	mov	r2, r3
 800896a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800896e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	3301      	adds	r3, #1
 8008974:	613b      	str	r3, [r7, #16]
 8008976:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800897a:	461a      	mov	r2, r3
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	4293      	cmp	r3, r2
 8008980:	d3b5      	bcc.n	80088ee <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008990:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008994:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80089a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80089a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d105      	bne.n	80089b8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	f043 0210 	orr.w	r2, r3, #16
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	699a      	ldr	r2, [r3, #24]
 80089bc:	4b0f      	ldr	r3, [pc, #60]	@ (80089fc <USB_DevInit+0x2b4>)
 80089be:	4313      	orrs	r3, r2
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80089c4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d005      	beq.n	80089d8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	699b      	ldr	r3, [r3, #24]
 80089d0:	f043 0208 	orr.w	r2, r3, #8
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80089d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d105      	bne.n	80089ec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	699a      	ldr	r2, [r3, #24]
 80089e4:	4b06      	ldr	r3, [pc, #24]	@ (8008a00 <USB_DevInit+0x2b8>)
 80089e6:	4313      	orrs	r3, r2
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80089ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3718      	adds	r7, #24
 80089f2:	46bd      	mov	sp, r7
 80089f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089f8:	b004      	add	sp, #16
 80089fa:	4770      	bx	lr
 80089fc:	803c3800 	.word	0x803c3800
 8008a00:	40000004 	.word	0x40000004

08008a04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	3301      	adds	r3, #1
 8008a16:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a1e:	d901      	bls.n	8008a24 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008a20:	2303      	movs	r3, #3
 8008a22:	e01b      	b.n	8008a5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	daf2      	bge.n	8008a12 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	019b      	lsls	r3, r3, #6
 8008a34:	f043 0220 	orr.w	r2, r3, #32
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a48:	d901      	bls.n	8008a4e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e006      	b.n	8008a5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	f003 0320 	and.w	r3, r3, #32
 8008a56:	2b20      	cmp	r3, #32
 8008a58:	d0f0      	beq.n	8008a3c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3714      	adds	r7, #20
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a70:	2300      	movs	r3, #0
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	3301      	adds	r3, #1
 8008a78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a80:	d901      	bls.n	8008a86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e018      	b.n	8008ab8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	daf2      	bge.n	8008a74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2210      	movs	r2, #16
 8008a96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008aa4:	d901      	bls.n	8008aaa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	e006      	b.n	8008ab8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	f003 0310 	and.w	r3, r3, #16
 8008ab2:	2b10      	cmp	r3, #16
 8008ab4:	d0f0      	beq.n	8008a98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3714      	adds	r7, #20
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	460b      	mov	r3, r1
 8008ace:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	78fb      	ldrb	r3, [r7, #3]
 8008ade:	68f9      	ldr	r1, [r7, #12]
 8008ae0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3714      	adds	r7, #20
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr

08008af6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008af6:	b480      	push	{r7}
 8008af8:	b085      	sub	sp, #20
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008b10:	f023 0303 	bic.w	r3, r3, #3
 8008b14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b24:	f043 0302 	orr.w	r3, r3, #2
 8008b28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	f003 0301 	and.w	r3, r3, #1
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	3301      	adds	r3, #1
 8008b64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b6c:	d901      	bls.n	8008b72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e01b      	b.n	8008baa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	daf2      	bge.n	8008b60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	f043 0201 	orr.w	r2, r3, #1
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b96:	d901      	bls.n	8008b9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	e006      	b.n	8008baa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	691b      	ldr	r3, [r3, #16]
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d0f0      	beq.n	8008b8a <USB_CoreReset+0x36>

  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <memset>:
 8008bb6:	4402      	add	r2, r0
 8008bb8:	4603      	mov	r3, r0
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d100      	bne.n	8008bc0 <memset+0xa>
 8008bbe:	4770      	bx	lr
 8008bc0:	f803 1b01 	strb.w	r1, [r3], #1
 8008bc4:	e7f9      	b.n	8008bba <memset+0x4>
	...

08008bc8 <__libc_init_array>:
 8008bc8:	b570      	push	{r4, r5, r6, lr}
 8008bca:	4d0d      	ldr	r5, [pc, #52]	@ (8008c00 <__libc_init_array+0x38>)
 8008bcc:	4c0d      	ldr	r4, [pc, #52]	@ (8008c04 <__libc_init_array+0x3c>)
 8008bce:	1b64      	subs	r4, r4, r5
 8008bd0:	10a4      	asrs	r4, r4, #2
 8008bd2:	2600      	movs	r6, #0
 8008bd4:	42a6      	cmp	r6, r4
 8008bd6:	d109      	bne.n	8008bec <__libc_init_array+0x24>
 8008bd8:	4d0b      	ldr	r5, [pc, #44]	@ (8008c08 <__libc_init_array+0x40>)
 8008bda:	4c0c      	ldr	r4, [pc, #48]	@ (8008c0c <__libc_init_array+0x44>)
 8008bdc:	f000 f818 	bl	8008c10 <_init>
 8008be0:	1b64      	subs	r4, r4, r5
 8008be2:	10a4      	asrs	r4, r4, #2
 8008be4:	2600      	movs	r6, #0
 8008be6:	42a6      	cmp	r6, r4
 8008be8:	d105      	bne.n	8008bf6 <__libc_init_array+0x2e>
 8008bea:	bd70      	pop	{r4, r5, r6, pc}
 8008bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bf0:	4798      	blx	r3
 8008bf2:	3601      	adds	r6, #1
 8008bf4:	e7ee      	b.n	8008bd4 <__libc_init_array+0xc>
 8008bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bfa:	4798      	blx	r3
 8008bfc:	3601      	adds	r6, #1
 8008bfe:	e7f2      	b.n	8008be6 <__libc_init_array+0x1e>
 8008c00:	08008c68 	.word	0x08008c68
 8008c04:	08008c68 	.word	0x08008c68
 8008c08:	08008c68 	.word	0x08008c68
 8008c0c:	08008c6c 	.word	0x08008c6c

08008c10 <_init>:
 8008c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c12:	bf00      	nop
 8008c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c16:	bc08      	pop	{r3}
 8008c18:	469e      	mov	lr, r3
 8008c1a:	4770      	bx	lr

08008c1c <_fini>:
 8008c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1e:	bf00      	nop
 8008c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c22:	bc08      	pop	{r3}
 8008c24:	469e      	mov	lr, r3
 8008c26:	4770      	bx	lr
