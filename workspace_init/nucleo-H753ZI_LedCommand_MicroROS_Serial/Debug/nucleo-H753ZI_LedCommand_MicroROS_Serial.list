
nucleo-H753ZI_LedCommand_MicroROS_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bfd4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed0  0801c278  0801c278  0001d278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801d148  0801d148  0001e148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801d150  0801d150  0001e150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801d158  0801d158  0001e158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002e4  24000000  0801d15c  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240002e4  0801d440  0001f2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000344  0801d4a0  0001f344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000684b8  240003a8  0801d500  0001f3a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24068860  0801d500  0001f860  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001f3a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f1f0  00000000  00000000  0001f3d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d73  00000000  00000000  0004e5c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002040  00000000  00000000  00054338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018dc  00000000  00000000  00056378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004083b  00000000  00000000  00057c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d583  00000000  00000000  0009848f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00183d98  00000000  00000000  000c5a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  002497aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009560  00000000  00000000  00249820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  00252d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240003a8 	.word	0x240003a8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801c25c 	.word	0x0801c25c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240003ac 	.word	0x240003ac
 80002dc:	0801c25c 	.word	0x0801c25c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <vLedCallback>:
// Input paramens:     xMsgIn <std_msgs__msg__UInt8MultiArray>                      //
//					   Message received by the subscriber.                          //
// Output paramens:    null                                                         //
//**********************************************************************************//
void vLedCallback(std_msgs__msg__UInt8MultiArray * xMsgIn)
  {
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]

    const std_msgs__msg__UInt8MultiArray * xMsg = (const std_msgs__msg__UInt8MultiArray *)xMsgIn;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	60fb      	str	r3, [r7, #12]

    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, xMsg->data.data[1]); // Settind LD1 state by the first position of the data vector in the message.
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	691b      	ldr	r3, [r3, #16]
 8000750:	3301      	adds	r3, #1
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	2101      	movs	r1, #1
 8000758:	480c      	ldr	r0, [pc, #48]	@ (800078c <vLedCallback+0x4c>)
 800075a:	f005 fa59 	bl	8005c10 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, xMsg->data.data[2]); // Settind LD2 state by the first position of the data vector in the message.
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	691b      	ldr	r3, [r3, #16]
 8000762:	3302      	adds	r3, #2
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	461a      	mov	r2, r3
 8000768:	2102      	movs	r1, #2
 800076a:	4809      	ldr	r0, [pc, #36]	@ (8000790 <vLedCallback+0x50>)
 800076c:	f005 fa50 	bl	8005c10 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, xMsg->data.data[3]); // Settind LD3 state by the first position of the data vector in the message.
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	691b      	ldr	r3, [r3, #16]
 8000774:	3303      	adds	r3, #3
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	461a      	mov	r2, r3
 800077a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800077e:	4803      	ldr	r0, [pc, #12]	@ (800078c <vLedCallback+0x4c>)
 8000780:	f005 fa46 	bl	8005c10 <HAL_GPIO_WritePin>

  }
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	58020400 	.word	0x58020400
 8000790:	58021000 	.word	0x58021000

08000794 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	@ 0x28
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80007a0:	f00c fa3e 	bl	800cc20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80007a4:	4b5a      	ldr	r3, [pc, #360]	@ (8000910 <pvPortMallocMicroROS+0x17c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80007ac:	f000 f986 	bl	8000abc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80007b0:	4b58      	ldr	r3, [pc, #352]	@ (8000914 <pvPortMallocMicroROS+0x180>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4013      	ands	r3, r2
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	f040 8090 	bne.w	80008de <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d01e      	beq.n	8000802 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80007c4:	2208      	movs	r2, #8
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4413      	add	r3, r2
 80007ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d015      	beq.n	8000802 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	f023 0307 	bic.w	r3, r3, #7
 80007dc:	3308      	adds	r3, #8
 80007de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d00b      	beq.n	8000802 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80007ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007ee:	f383 8811 	msr	BASEPRI, r3
 80007f2:	f3bf 8f6f 	isb	sy
 80007f6:	f3bf 8f4f 	dsb	sy
 80007fa:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80007fc:	bf00      	nop
 80007fe:	bf00      	nop
 8000800:	e7fd      	b.n	80007fe <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d06a      	beq.n	80008de <pvPortMallocMicroROS+0x14a>
 8000808:	4b43      	ldr	r3, [pc, #268]	@ (8000918 <pvPortMallocMicroROS+0x184>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	429a      	cmp	r2, r3
 8000810:	d865      	bhi.n	80008de <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000812:	4b42      	ldr	r3, [pc, #264]	@ (800091c <pvPortMallocMicroROS+0x188>)
 8000814:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000816:	4b41      	ldr	r3, [pc, #260]	@ (800091c <pvPortMallocMicroROS+0x188>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800081c:	e004      	b.n	8000828 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 800081e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000820:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	429a      	cmp	r2, r3
 8000830:	d903      	bls.n	800083a <pvPortMallocMicroROS+0xa6>
 8000832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d1f1      	bne.n	800081e <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800083a:	4b35      	ldr	r3, [pc, #212]	@ (8000910 <pvPortMallocMicroROS+0x17c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000840:	429a      	cmp	r2, r3
 8000842:	d04c      	beq.n	80008de <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000844:	6a3b      	ldr	r3, [r7, #32]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2208      	movs	r2, #8
 800084a:	4413      	add	r3, r2
 800084c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800084e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	6a3b      	ldr	r3, [r7, #32]
 8000854:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000858:	685a      	ldr	r2, [r3, #4]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	1ad2      	subs	r2, r2, r3
 800085e:	2308      	movs	r3, #8
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	429a      	cmp	r2, r3
 8000864:	d920      	bls.n	80008a8 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4413      	add	r3, r2
 800086c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	f003 0307 	and.w	r3, r3, #7
 8000874:	2b00      	cmp	r3, #0
 8000876:	d00b      	beq.n	8000890 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800087c:	f383 8811 	msr	BASEPRI, r3
 8000880:	f3bf 8f6f 	isb	sy
 8000884:	f3bf 8f4f 	dsb	sy
 8000888:	613b      	str	r3, [r7, #16]
}
 800088a:	bf00      	nop
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000892:	685a      	ldr	r2, [r3, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	1ad2      	subs	r2, r2, r3
 8000898:	69bb      	ldr	r3, [r7, #24]
 800089a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800089c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80008a2:	69b8      	ldr	r0, [r7, #24]
 80008a4:	f000 f96e 	bl	8000b84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80008a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000918 <pvPortMallocMicroROS+0x184>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	4a19      	ldr	r2, [pc, #100]	@ (8000918 <pvPortMallocMicroROS+0x184>)
 80008b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80008b6:	4b18      	ldr	r3, [pc, #96]	@ (8000918 <pvPortMallocMicroROS+0x184>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <pvPortMallocMicroROS+0x18c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	429a      	cmp	r2, r3
 80008c0:	d203      	bcs.n	80008ca <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80008c2:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <pvPortMallocMicroROS+0x184>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a16      	ldr	r2, [pc, #88]	@ (8000920 <pvPortMallocMicroROS+0x18c>)
 80008c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80008ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008cc:	685a      	ldr	r2, [r3, #4]
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <pvPortMallocMicroROS+0x180>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	431a      	orrs	r2, r3
 80008d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80008d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80008de:	f00c f9ad 	bl	800cc3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	f003 0307 	and.w	r3, r3, #7
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d00b      	beq.n	8000904 <pvPortMallocMicroROS+0x170>
	__asm volatile
 80008ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008f0:	f383 8811 	msr	BASEPRI, r3
 80008f4:	f3bf 8f6f 	isb	sy
 80008f8:	f3bf 8f4f 	dsb	sy
 80008fc:	60fb      	str	r3, [r7, #12]
}
 80008fe:	bf00      	nop
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000904:	69fb      	ldr	r3, [r7, #28]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3728      	adds	r7, #40	@ 0x28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2403110c 	.word	0x2403110c
 8000914:	24031118 	.word	0x24031118
 8000918:	24031110 	.word	0x24031110
 800091c:	24031104 	.word	0x24031104
 8000920:	24031114 	.word	0x24031114

08000924 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d04a      	beq.n	80009cc <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000936:	2308      	movs	r3, #8
 8000938:	425b      	negs	r3, r3
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	4413      	add	r3, r2
 800093e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	685a      	ldr	r2, [r3, #4]
 8000948:	4b22      	ldr	r3, [pc, #136]	@ (80009d4 <vPortFreeMicroROS+0xb0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4013      	ands	r3, r2
 800094e:	2b00      	cmp	r3, #0
 8000950:	d10b      	bne.n	800096a <vPortFreeMicroROS+0x46>
	__asm volatile
 8000952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000956:	f383 8811 	msr	BASEPRI, r3
 800095a:	f3bf 8f6f 	isb	sy
 800095e:	f3bf 8f4f 	dsb	sy
 8000962:	60fb      	str	r3, [r7, #12]
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	e7fd      	b.n	8000966 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d00b      	beq.n	800098a <vPortFreeMicroROS+0x66>
	__asm volatile
 8000972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000976:	f383 8811 	msr	BASEPRI, r3
 800097a:	f3bf 8f6f 	isb	sy
 800097e:	f3bf 8f4f 	dsb	sy
 8000982:	60bb      	str	r3, [r7, #8]
}
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	e7fd      	b.n	8000986 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	685a      	ldr	r2, [r3, #4]
 800098e:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <vPortFreeMicroROS+0xb0>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4013      	ands	r3, r2
 8000994:	2b00      	cmp	r3, #0
 8000996:	d019      	beq.n	80009cc <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d115      	bne.n	80009cc <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	685a      	ldr	r2, [r3, #4]
 80009a4:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <vPortFreeMicroROS+0xb0>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	43db      	mvns	r3, r3
 80009aa:	401a      	ands	r2, r3
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80009b0:	f00c f936 	bl	800cc20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	685a      	ldr	r2, [r3, #4]
 80009b8:	4b07      	ldr	r3, [pc, #28]	@ (80009d8 <vPortFreeMicroROS+0xb4>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4413      	add	r3, r2
 80009be:	4a06      	ldr	r2, [pc, #24]	@ (80009d8 <vPortFreeMicroROS+0xb4>)
 80009c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80009c2:	6938      	ldr	r0, [r7, #16]
 80009c4:	f000 f8de 	bl	8000b84 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80009c8:	f00c f938 	bl	800cc3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80009cc:	bf00      	nop
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	24031118 	.word	0x24031118
 80009d8:	24031110 	.word	0x24031110

080009dc <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80009dc:	b480      	push	{r7}
 80009de:	b087      	sub	sp, #28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80009e8:	2308      	movs	r3, #8
 80009ea:	425b      	negs	r3, r3
 80009ec:	697a      	ldr	r2, [r7, #20]
 80009ee:	4413      	add	r3, r2
 80009f0:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	685a      	ldr	r2, [r3, #4]
 80009fa:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <getBlockSize+0x38>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	43db      	mvns	r3, r3
 8000a00:	4013      	ands	r3, r2
 8000a02:	60fb      	str	r3, [r7, #12]

	return count;
 8000a04:	68fb      	ldr	r3, [r7, #12]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	371c      	adds	r7, #28
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	24031118 	.word	0x24031118

08000a18 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000a22:	f00c f8fd 	bl	800cc20 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000a26:	6838      	ldr	r0, [r7, #0]
 8000a28:	f7ff feb4 	bl	8000794 <pvPortMallocMicroROS>
 8000a2c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d017      	beq.n	8000a64 <pvPortReallocMicroROS+0x4c>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d014      	beq.n	8000a64 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff ffce 	bl	80009dc <getBlockSize>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2208      	movs	r2, #8
 8000a44:	1a9b      	subs	r3, r3, r2
 8000a46:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000a48:	683a      	ldr	r2, [r7, #0]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d201      	bcs.n	8000a54 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	68b8      	ldr	r0, [r7, #8]
 8000a5a:	f01a fdc0 	bl	801b5de <memcpy>

		vPortFreeMicroROS(pv);
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff ff60 	bl	8000924 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000a64:	f00c f8ea 	bl	800cc3c <xTaskResumeAll>

	return newmem;
 8000a68:	68bb      	ldr	r3, [r7, #8]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000a7c:	f00c f8d0 	bl	800cc20 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	fb02 f303 	mul.w	r3, r2, r3
 8000a88:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000a8a:	6978      	ldr	r0, [r7, #20]
 8000a8c:	f7ff fe82 	bl	8000794 <pvPortMallocMicroROS>
 8000a90:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000a96:	e004      	b.n	8000aa2 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	1c5a      	adds	r2, r3, #1
 8000a9c:	613a      	str	r2, [r7, #16]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	1e5a      	subs	r2, r3, #1
 8000aa6:	617a      	str	r2, [r7, #20]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d1f5      	bne.n	8000a98 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000aac:	f00c f8c6 	bl	800cc3c <xTaskResumeAll>
  	return mem;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <prvHeapInit+0xac>)
 8000ac4:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000ac6:	4b29      	ldr	r3, [pc, #164]	@ (8000b6c <prvHeapInit+0xb0>)
 8000ac8:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	f003 0307 	and.w	r3, r3, #7
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d00c      	beq.n	8000aee <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	3307      	adds	r3, #7
 8000ad8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	f023 0307 	bic.w	r3, r3, #7
 8000ae0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	4a20      	ldr	r2, [pc, #128]	@ (8000b6c <prvHeapInit+0xb0>)
 8000aea:	4413      	add	r3, r2
 8000aec:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000af2:	4a1f      	ldr	r2, [pc, #124]	@ (8000b70 <prvHeapInit+0xb4>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000af8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b70 <prvHeapInit+0xb4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	68ba      	ldr	r2, [r7, #8]
 8000b02:	4413      	add	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000b06:	2208      	movs	r2, #8
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	1a9b      	subs	r3, r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	f023 0307 	bic.w	r3, r3, #7
 8000b14:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	4a16      	ldr	r2, [pc, #88]	@ (8000b74 <prvHeapInit+0xb8>)
 8000b1a:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000b1c:	4b15      	ldr	r3, [pc, #84]	@ (8000b74 <prvHeapInit+0xb8>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000b24:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <prvHeapInit+0xb8>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	1ad2      	subs	r2, r2, r3
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <prvHeapInit+0xb8>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	@ (8000b78 <prvHeapInit+0xbc>)
 8000b48:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b7c <prvHeapInit+0xc0>)
 8000b50:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000b52:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <prvHeapInit+0xc4>)
 8000b54:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000b58:	601a      	str	r2, [r3, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	00030d40 	.word	0x00030d40
 8000b6c:	240003c4 	.word	0x240003c4
 8000b70:	24031104 	.word	0x24031104
 8000b74:	2403110c 	.word	0x2403110c
 8000b78:	24031114 	.word	0x24031114
 8000b7c:	24031110 	.word	0x24031110
 8000b80:	24031118 	.word	0x24031118

08000b84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000b8c:	4b28      	ldr	r3, [pc, #160]	@ (8000c30 <prvInsertBlockIntoFreeList+0xac>)
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	e002      	b.n	8000b98 <prvInsertBlockIntoFreeList+0x14>
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d8f7      	bhi.n	8000b92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	4413      	add	r3, r2
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d108      	bne.n	8000bc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	441a      	add	r2, r3
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	441a      	add	r2, r3
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d118      	bne.n	8000c0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <prvInsertBlockIntoFreeList+0xb0>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d00d      	beq.n	8000c02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	441a      	add	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	e008      	b.n	8000c14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <prvInsertBlockIntoFreeList+0xb0>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	e003      	b.n	8000c14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000c14:	68fa      	ldr	r2, [r7, #12]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d002      	beq.n	8000c22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000c22:	bf00      	nop
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	24031104 	.word	0x24031104
 8000c34:	2403110c 	.word	0x2403110c

08000c38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c3e:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <MX_DMA_Init+0x4c>)
 8000c40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c44:	4a0f      	ldr	r2, [pc, #60]	@ (8000c84 <MX_DMA_Init+0x4c>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c84 <MX_DMA_Init+0x4c>)
 8000c50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2105      	movs	r1, #5
 8000c60:	200b      	movs	r0, #11
 8000c62:	f001 fb81 	bl	8002368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c66:	200b      	movs	r0, #11
 8000c68:	f001 fb98 	bl	800239c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2105      	movs	r1, #5
 8000c70:	200c      	movs	r0, #12
 8000c72:	f001 fb79 	bl	8002368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c76:	200c      	movs	r0, #12
 8000c78:	f001 fb90 	bl	800239c <HAL_NVIC_EnableIRQ>

}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	58024400 	.word	0x58024400

08000c88 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c96:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000c98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c9c:	4904      	ldr	r1, [pc, #16]	@ (8000cb0 <cubemx_transport_open+0x28>)
 8000c9e:	68f8      	ldr	r0, [r7, #12]
 8000ca0:	f008 fb3c 	bl	800931c <HAL_UART_Receive_DMA>
    return true;
 8000ca4:	2301      	movs	r3, #1
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	2403111c 	.word	0x2403111c

08000cb4 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000cc2:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000cc4:	68f8      	ldr	r0, [r7, #12]
 8000cc6:	f008 fb75 	bl	80093b4 <HAL_UART_DMAStop>
    return true;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
 8000ce0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000ce8:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cf0:	2b20      	cmp	r3, #32
 8000cf2:	d11b      	bne.n	8000d2c <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	68b9      	ldr	r1, [r7, #8]
 8000cfc:	6978      	ldr	r0, [r7, #20]
 8000cfe:	f008 fa8d 	bl	800921c <HAL_UART_Transmit_DMA>
 8000d02:	4603      	mov	r3, r0
 8000d04:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000d06:	e002      	b.n	8000d0e <cubemx_transport_write+0x3a>
            osDelay(1);
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f00a ff27 	bl	800bb5c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000d0e:	7cfb      	ldrb	r3, [r7, #19]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d104      	bne.n	8000d1e <cubemx_transport_write+0x4a>
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d1a:	2b20      	cmp	r3, #32
 8000d1c:	d1f4      	bne.n	8000d08 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000d1e:	7cfb      	ldrb	r3, [r7, #19]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d101      	bne.n	8000d28 <cubemx_transport_write+0x54>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	e002      	b.n	8000d2e <cubemx_transport_write+0x5a>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e000      	b.n	8000d2e <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000d2c:	2300      	movs	r3, #0
    }
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
 8000d44:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000d4c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d52:	b672      	cpsid	i
}
 8000d54:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a5a      	ldr	r2, [pc, #360]	@ (8000ec8 <cubemx_transport_read+0x190>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d068      	beq.n	8000e36 <cubemx_transport_read+0xfe>
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a57      	ldr	r2, [pc, #348]	@ (8000ecc <cubemx_transport_read+0x194>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d061      	beq.n	8000e36 <cubemx_transport_read+0xfe>
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a55      	ldr	r2, [pc, #340]	@ (8000ed0 <cubemx_transport_read+0x198>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d05a      	beq.n	8000e36 <cubemx_transport_read+0xfe>
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a52      	ldr	r2, [pc, #328]	@ (8000ed4 <cubemx_transport_read+0x19c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d053      	beq.n	8000e36 <cubemx_transport_read+0xfe>
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a50      	ldr	r2, [pc, #320]	@ (8000ed8 <cubemx_transport_read+0x1a0>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d04c      	beq.n	8000e36 <cubemx_transport_read+0xfe>
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a4d      	ldr	r2, [pc, #308]	@ (8000edc <cubemx_transport_read+0x1a4>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d045      	beq.n	8000e36 <cubemx_transport_read+0xfe>
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a4b      	ldr	r2, [pc, #300]	@ (8000ee0 <cubemx_transport_read+0x1a8>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d03e      	beq.n	8000e36 <cubemx_transport_read+0xfe>
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a48      	ldr	r2, [pc, #288]	@ (8000ee4 <cubemx_transport_read+0x1ac>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d037      	beq.n	8000e36 <cubemx_transport_read+0xfe>
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a46      	ldr	r2, [pc, #280]	@ (8000ee8 <cubemx_transport_read+0x1b0>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d030      	beq.n	8000e36 <cubemx_transport_read+0xfe>
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a43      	ldr	r2, [pc, #268]	@ (8000eec <cubemx_transport_read+0x1b4>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d029      	beq.n	8000e36 <cubemx_transport_read+0xfe>
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a41      	ldr	r2, [pc, #260]	@ (8000ef0 <cubemx_transport_read+0x1b8>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d022      	beq.n	8000e36 <cubemx_transport_read+0xfe>
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a3e      	ldr	r2, [pc, #248]	@ (8000ef4 <cubemx_transport_read+0x1bc>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d01b      	beq.n	8000e36 <cubemx_transport_read+0xfe>
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a3c      	ldr	r2, [pc, #240]	@ (8000ef8 <cubemx_transport_read+0x1c0>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d014      	beq.n	8000e36 <cubemx_transport_read+0xfe>
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a39      	ldr	r2, [pc, #228]	@ (8000efc <cubemx_transport_read+0x1c4>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d00d      	beq.n	8000e36 <cubemx_transport_read+0xfe>
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a37      	ldr	r2, [pc, #220]	@ (8000f00 <cubemx_transport_read+0x1c8>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d006      	beq.n	8000e36 <cubemx_transport_read+0xfe>
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a34      	ldr	r2, [pc, #208]	@ (8000f04 <cubemx_transport_read+0x1cc>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d107      	bne.n	8000e46 <cubemx_transport_read+0x10e>
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000e44:	e006      	b.n	8000e54 <cubemx_transport_read+0x11c>
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000e54:	4a2c      	ldr	r2, [pc, #176]	@ (8000f08 <cubemx_transport_read+0x1d0>)
 8000e56:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000e58:	b662      	cpsie	i
}
 8000e5a:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000e62:	2001      	movs	r0, #1
 8000e64:	f00a fe7a 	bl	800bb5c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000e68:	4b28      	ldr	r3, [pc, #160]	@ (8000f0c <cubemx_transport_read+0x1d4>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b26      	ldr	r3, [pc, #152]	@ (8000f08 <cubemx_transport_read+0x1d0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d104      	bne.n	8000e7e <cubemx_transport_read+0x146>
 8000e74:	69fa      	ldr	r2, [r7, #28]
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	f6ff af6a 	blt.w	8000d52 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000e82:	e011      	b.n	8000ea8 <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 8000e84:	4b21      	ldr	r3, [pc, #132]	@ (8000f0c <cubemx_transport_read+0x1d4>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	68b9      	ldr	r1, [r7, #8]
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	440b      	add	r3, r1
 8000e8e:	4920      	ldr	r1, [pc, #128]	@ (8000f10 <cubemx_transport_read+0x1d8>)
 8000e90:	5c8a      	ldrb	r2, [r1, r2]
 8000e92:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000e94:	4b1d      	ldr	r3, [pc, #116]	@ (8000f0c <cubemx_transport_read+0x1d4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8000f0c <cubemx_transport_read+0x1d4>)
 8000ea0:	6013      	str	r3, [r2, #0]
        wrote++;
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000ea8:	4b18      	ldr	r3, [pc, #96]	@ (8000f0c <cubemx_transport_read+0x1d4>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <cubemx_transport_read+0x1d0>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d003      	beq.n	8000ebc <cubemx_transport_read+0x184>
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d3e3      	bcc.n	8000e84 <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 8000ebc:	69bb      	ldr	r3, [r7, #24]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3720      	adds	r7, #32
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40020010 	.word	0x40020010
 8000ecc:	40020028 	.word	0x40020028
 8000ed0:	40020040 	.word	0x40020040
 8000ed4:	40020058 	.word	0x40020058
 8000ed8:	40020070 	.word	0x40020070
 8000edc:	40020088 	.word	0x40020088
 8000ee0:	400200a0 	.word	0x400200a0
 8000ee4:	400200b8 	.word	0x400200b8
 8000ee8:	40020410 	.word	0x40020410
 8000eec:	40020428 	.word	0x40020428
 8000ef0:	40020440 	.word	0x40020440
 8000ef4:	40020458 	.word	0x40020458
 8000ef8:	40020470 	.word	0x40020470
 8000efc:	40020488 	.word	0x40020488
 8000f00:	400204a0 	.word	0x400204a0
 8000f04:	400204b8 	.word	0x400204b8
 8000f08:	24031920 	.word	0x24031920
 8000f0c:	2403191c 	.word	0x2403191c
 8000f10:	2403111c 	.word	0x2403111c

08000f14 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000f18:	4b1e      	ldr	r3, [pc, #120]	@ (8000f94 <MX_ETH_Init+0x80>)
 8000f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8000f98 <MX_ETH_Init+0x84>)
 8000f1c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000f9c <MX_ETH_Init+0x88>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000f24:	4b1d      	ldr	r3, [pc, #116]	@ (8000f9c <MX_ETH_Init+0x88>)
 8000f26:	2280      	movs	r2, #128	@ 0x80
 8000f28:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f9c <MX_ETH_Init+0x88>)
 8000f2c:	22e1      	movs	r2, #225	@ 0xe1
 8000f2e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000f30:	4b1a      	ldr	r3, [pc, #104]	@ (8000f9c <MX_ETH_Init+0x88>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000f36:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <MX_ETH_Init+0x88>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000f3c:	4b17      	ldr	r3, [pc, #92]	@ (8000f9c <MX_ETH_Init+0x88>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000f42:	4b14      	ldr	r3, [pc, #80]	@ (8000f94 <MX_ETH_Init+0x80>)
 8000f44:	4a15      	ldr	r2, [pc, #84]	@ (8000f9c <MX_ETH_Init+0x88>)
 8000f46:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <MX_ETH_Init+0x80>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <MX_ETH_Init+0x80>)
 8000f50:	4a13      	ldr	r2, [pc, #76]	@ (8000fa0 <MX_ETH_Init+0x8c>)
 8000f52:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <MX_ETH_Init+0x80>)
 8000f56:	4a13      	ldr	r2, [pc, #76]	@ (8000fa4 <MX_ETH_Init+0x90>)
 8000f58:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <MX_ETH_Init+0x80>)
 8000f5c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000f60:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f62:	480c      	ldr	r0, [pc, #48]	@ (8000f94 <MX_ETH_Init+0x80>)
 8000f64:	f004 f870 	bl	8005048 <HAL_ETH_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000f6e:	f000 fb21 	bl	80015b4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000f72:	2238      	movs	r2, #56	@ 0x38
 8000f74:	2100      	movs	r1, #0
 8000f76:	480c      	ldr	r0, [pc, #48]	@ (8000fa8 <MX_ETH_Init+0x94>)
 8000f78:	f01a fa12 	bl	801b3a0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <MX_ETH_Init+0x94>)
 8000f7e:	2221      	movs	r2, #33	@ 0x21
 8000f80:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f82:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <MX_ETH_Init+0x94>)
 8000f84:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f88:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <MX_ETH_Init+0x94>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	2403195c 	.word	0x2403195c
 8000f98:	40028000 	.word	0x40028000
 8000f9c:	24031a0c 	.word	0x24031a0c
 8000fa0:	24000344 	.word	0x24000344
 8000fa4:	240002e4 	.word	0x240002e4
 8000fa8:	24031924 	.word	0x24031924

08000fac <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08e      	sub	sp, #56	@ 0x38
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a59      	ldr	r2, [pc, #356]	@ (8001130 <HAL_ETH_MspInit+0x184>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	f040 80ab 	bne.w	8001126 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000fd0:	4b58      	ldr	r3, [pc, #352]	@ (8001134 <HAL_ETH_MspInit+0x188>)
 8000fd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fd6:	4a57      	ldr	r2, [pc, #348]	@ (8001134 <HAL_ETH_MspInit+0x188>)
 8000fd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fdc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000fe0:	4b54      	ldr	r3, [pc, #336]	@ (8001134 <HAL_ETH_MspInit+0x188>)
 8000fe2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fe6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fea:	623b      	str	r3, [r7, #32]
 8000fec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000fee:	4b51      	ldr	r3, [pc, #324]	@ (8001134 <HAL_ETH_MspInit+0x188>)
 8000ff0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ff4:	4a4f      	ldr	r2, [pc, #316]	@ (8001134 <HAL_ETH_MspInit+0x188>)
 8000ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ffa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ffe:	4b4d      	ldr	r3, [pc, #308]	@ (8001134 <HAL_ETH_MspInit+0x188>)
 8001000:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001008:	61fb      	str	r3, [r7, #28]
 800100a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800100c:	4b49      	ldr	r3, [pc, #292]	@ (8001134 <HAL_ETH_MspInit+0x188>)
 800100e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001012:	4a48      	ldr	r2, [pc, #288]	@ (8001134 <HAL_ETH_MspInit+0x188>)
 8001014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001018:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800101c:	4b45      	ldr	r3, [pc, #276]	@ (8001134 <HAL_ETH_MspInit+0x188>)
 800101e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001026:	61bb      	str	r3, [r7, #24]
 8001028:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800102a:	4b42      	ldr	r3, [pc, #264]	@ (8001134 <HAL_ETH_MspInit+0x188>)
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001030:	4a40      	ldr	r2, [pc, #256]	@ (8001134 <HAL_ETH_MspInit+0x188>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800103a:	4b3e      	ldr	r3, [pc, #248]	@ (8001134 <HAL_ETH_MspInit+0x188>)
 800103c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001048:	4b3a      	ldr	r3, [pc, #232]	@ (8001134 <HAL_ETH_MspInit+0x188>)
 800104a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104e:	4a39      	ldr	r2, [pc, #228]	@ (8001134 <HAL_ETH_MspInit+0x188>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001058:	4b36      	ldr	r3, [pc, #216]	@ (8001134 <HAL_ETH_MspInit+0x188>)
 800105a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	4b33      	ldr	r3, [pc, #204]	@ (8001134 <HAL_ETH_MspInit+0x188>)
 8001068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106c:	4a31      	ldr	r2, [pc, #196]	@ (8001134 <HAL_ETH_MspInit+0x188>)
 800106e:	f043 0302 	orr.w	r3, r3, #2
 8001072:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001076:	4b2f      	ldr	r3, [pc, #188]	@ (8001134 <HAL_ETH_MspInit+0x188>)
 8001078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001084:	4b2b      	ldr	r3, [pc, #172]	@ (8001134 <HAL_ETH_MspInit+0x188>)
 8001086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108a:	4a2a      	ldr	r2, [pc, #168]	@ (8001134 <HAL_ETH_MspInit+0x188>)
 800108c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001090:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001094:	4b27      	ldr	r3, [pc, #156]	@ (8001134 <HAL_ETH_MspInit+0x188>)
 8001096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80010a2:	2332      	movs	r3, #50	@ 0x32
 80010a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010b2:	230b      	movs	r3, #11
 80010b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ba:	4619      	mov	r1, r3
 80010bc:	481e      	ldr	r0, [pc, #120]	@ (8001138 <HAL_ETH_MspInit+0x18c>)
 80010be:	f004 fbf7 	bl	80058b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80010c2:	2386      	movs	r3, #134	@ 0x86
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010d2:	230b      	movs	r3, #11
 80010d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010da:	4619      	mov	r1, r3
 80010dc:	4817      	ldr	r0, [pc, #92]	@ (800113c <HAL_ETH_MspInit+0x190>)
 80010de:	f004 fbe7 	bl	80058b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010f4:	230b      	movs	r3, #11
 80010f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010fc:	4619      	mov	r1, r3
 80010fe:	4810      	ldr	r0, [pc, #64]	@ (8001140 <HAL_ETH_MspInit+0x194>)
 8001100:	f004 fbd6 	bl	80058b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001104:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001116:	230b      	movs	r3, #11
 8001118:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800111a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800111e:	4619      	mov	r1, r3
 8001120:	4808      	ldr	r0, [pc, #32]	@ (8001144 <HAL_ETH_MspInit+0x198>)
 8001122:	f004 fbc5 	bl	80058b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001126:	bf00      	nop
 8001128:	3738      	adds	r7, #56	@ 0x38
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40028000 	.word	0x40028000
 8001134:	58024400 	.word	0x58024400
 8001138:	58020800 	.word	0x58020800
 800113c:	58020000 	.word	0x58020000
 8001140:	58020400 	.word	0x58020400
 8001144:	58021800 	.word	0x58021800

08001148 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskMicroROS */
  TaskMicroROSHandle = osThreadNew(StartTaskMicroROS, NULL, &TaskMicroROS_attributes);
 800114c:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <MX_FREERTOS_Init+0x18>)
 800114e:	2100      	movs	r1, #0
 8001150:	4804      	ldr	r0, [pc, #16]	@ (8001164 <MX_FREERTOS_Init+0x1c>)
 8001152:	f00a fc71 	bl	800ba38 <osThreadNew>
 8001156:	4603      	mov	r3, r0
 8001158:	4a03      	ldr	r2, [pc, #12]	@ (8001168 <MX_FREERTOS_Init+0x20>)
 800115a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	0801c2d4 	.word	0x0801c2d4
 8001164:	0800116d 	.word	0x0800116d
 8001168:	24031a14 	.word	0x24031a14

0800116c <StartTaskMicroROS>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskMicroROS */
void StartTaskMicroROS(void *argument)
{
 800116c:	b5b0      	push	{r4, r5, r7, lr}
 800116e:	b0f0      	sub	sp, #448	@ 0x1c0
 8001170:	af02      	add	r7, sp, #8
 8001172:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001176:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800117a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTaskMicroROS */

  // micro-ROS configuration

  // Transport layer configuration
  rmw_uros_set_custom_transport(
 800117c:	4b3d      	ldr	r3, [pc, #244]	@ (8001274 <StartTaskMicroROS+0x108>)
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	4b3d      	ldr	r3, [pc, #244]	@ (8001278 <StartTaskMicroROS+0x10c>)
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	4b3d      	ldr	r3, [pc, #244]	@ (800127c <StartTaskMicroROS+0x110>)
 8001186:	4a3e      	ldr	r2, [pc, #248]	@ (8001280 <StartTaskMicroROS+0x114>)
 8001188:	493e      	ldr	r1, [pc, #248]	@ (8001284 <StartTaskMicroROS+0x118>)
 800118a:	2001      	movs	r0, #1
 800118c:	f00e f998 	bl	800f4c0 <rmw_uros_set_custom_transport>
	cubemx_transport_close,
	cubemx_transport_write,
	cubemx_transport_read);

  // Memory management configuration
  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001190:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8001194:	4618      	mov	r0, r3
 8001196:	f00e f8e9 	bl	800f36c <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 800119a:	4b3b      	ldr	r3, [pc, #236]	@ (8001288 <StartTaskMicroROS+0x11c>)
 800119c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
  freeRTOS_allocator.deallocate = microros_deallocate;
 80011a0:	4b3a      	ldr	r3, [pc, #232]	@ (800128c <StartTaskMicroROS+0x120>)
 80011a2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
  freeRTOS_allocator.reallocate = microros_reallocate;
 80011a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001290 <StartTaskMicroROS+0x124>)
 80011a8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80011ac:	4b39      	ldr	r3, [pc, #228]	@ (8001294 <StartTaskMicroROS+0x128>)
 80011ae:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0

  // Subscriber message declaration
  std_msgs__msg__UInt8MultiArray xCommand;

  // Subscriber message memory allocation
  xCommand.data.data = (uint8_t*) malloc(4 * sizeof(uint8_t));
 80011b2:	2004      	movs	r0, #4
 80011b4:	f019 fc92 	bl	801aadc <malloc>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80011c0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80011c4:	611a      	str	r2, [r3, #16]

  // Allocator initialization
  xAllocator = rcl_get_default_allocator();
 80011c6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80011ca:	4618      	mov	r0, r3
 80011cc:	f00e f8dc 	bl	800f388 <rcutils_get_default_allocator>
 80011d0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80011d4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80011d8:	f507 74ae 	add.w	r4, r7, #348	@ 0x15c
 80011dc:	461d      	mov	r5, r3
 80011de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e2:	682b      	ldr	r3, [r5, #0]
 80011e4:	6023      	str	r3, [r4, #0]

  // Callback executor initialization
  xExecutor = rclc_executor_get_zero_initialized_executor();
 80011e6:	463b      	mov	r3, r7
 80011e8:	4618      	mov	r0, r3
 80011ea:	f00d fcff 	bl	800ebec <rclc_executor_get_zero_initialized_executor>
 80011ee:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80011f2:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 80011f6:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80011fa:	4611      	mov	r1, r2
 80011fc:	2288      	movs	r2, #136	@ 0x88
 80011fe:	4618      	mov	r0, r3
 8001200:	f01a f9ed 	bl	801b5de <memcpy>

  // Creating init_options
  rclc_support_init(&xSupport, 0, NULL, &xAllocator);
 8001204:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8001208:	f507 70b8 	add.w	r0, r7, #368	@ 0x170
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	f00d ffde 	bl	800f1d0 <rclc_support_init>

  // Creating node
  rclc_node_init_default(&xNode, "stm32", "", &xSupport);
 8001214:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001218:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 800121c:	4a1e      	ldr	r2, [pc, #120]	@ (8001298 <StartTaskMicroROS+0x12c>)
 800121e:	491f      	ldr	r1, [pc, #124]	@ (800129c <StartTaskMicroROS+0x130>)
 8001220:	f00e f820 	bl	800f264 <rclc_node_init_default>

  // Creating subscriber
  rclc_subscription_init_default(
 8001224:	f00e f962 	bl	800f4ec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray>
 8001228:	4602      	mov	r2, r0
 800122a:	f507 71aa 	add.w	r1, r7, #340	@ 0x154
 800122e:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8001232:	4b1b      	ldr	r3, [pc, #108]	@ (80012a0 <StartTaskMicroROS+0x134>)
 8001234:	f00e f858 	bl	800f2e8 <rclc_subscription_init_default>
    &xNode,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, UInt8MultiArray),
    "led_control");

  // Create callback executor
  rclc_executor_init(&xExecutor, &xSupport.context, 1, &xAllocator);
 8001238:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 800123c:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 8001240:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 8001244:	2201      	movs	r2, #1
 8001246:	f00d fcdb 	bl	800ec00 <rclc_executor_init>

  // Add callback to executor. Callback header described in callbacks.h
  rclc_executor_add_subscription(&xExecutor, &xLedSub, &xCommand, &vLedCallback, ON_NEW_DATA);
 800124a:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800124e:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8001252:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 8001256:	2300      	movs	r3, #0
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <StartTaskMicroROS+0x138>)
 800125c:	f00d fd4c 	bl	800ecf8 <rclc_executor_add_subscription>

  // Starting executor
  rclc_executor_spin(&xExecutor);
 8001260:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001264:	4618      	mov	r0, r3
 8001266:	f00d ff71 	bl	800f14c <rclc_executor_spin>

  // **Code never gets here, now the executor is controlling the task**

  /* USER CODE END StartTaskMicroROS */
}
 800126a:	bf00      	nop
 800126c:	f507 77dc 	add.w	r7, r7, #440	@ 0x1b8
 8001270:	46bd      	mov	sp, r7
 8001272:	bdb0      	pop	{r4, r5, r7, pc}
 8001274:	08000d39 	.word	0x08000d39
 8001278:	08000cd5 	.word	0x08000cd5
 800127c:	08000cb5 	.word	0x08000cb5
 8001280:	08000c89 	.word	0x08000c89
 8001284:	24031a74 	.word	0x24031a74
 8001288:	080015c1 	.word	0x080015c1
 800128c:	08001605 	.word	0x08001605
 8001290:	0800163d 	.word	0x0800163d
 8001294:	080016a9 	.word	0x080016a9
 8001298:	0801c288 	.word	0x0801c288
 800129c:	0801c28c 	.word	0x0801c28c
 80012a0:	0801c294 	.word	0x0801c294
 80012a4:	08000741 	.word	0x08000741

080012a8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08c      	sub	sp, #48	@ 0x30
 80012ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	4b62      	ldr	r3, [pc, #392]	@ (8001448 <MX_GPIO_Init+0x1a0>)
 80012c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c4:	4a60      	ldr	r2, [pc, #384]	@ (8001448 <MX_GPIO_Init+0x1a0>)
 80012c6:	f043 0304 	orr.w	r3, r3, #4
 80012ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ce:	4b5e      	ldr	r3, [pc, #376]	@ (8001448 <MX_GPIO_Init+0x1a0>)
 80012d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	61bb      	str	r3, [r7, #24]
 80012da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012dc:	4b5a      	ldr	r3, [pc, #360]	@ (8001448 <MX_GPIO_Init+0x1a0>)
 80012de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e2:	4a59      	ldr	r2, [pc, #356]	@ (8001448 <MX_GPIO_Init+0x1a0>)
 80012e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ec:	4b56      	ldr	r3, [pc, #344]	@ (8001448 <MX_GPIO_Init+0x1a0>)
 80012ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	4b53      	ldr	r3, [pc, #332]	@ (8001448 <MX_GPIO_Init+0x1a0>)
 80012fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001300:	4a51      	ldr	r2, [pc, #324]	@ (8001448 <MX_GPIO_Init+0x1a0>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800130a:	4b4f      	ldr	r3, [pc, #316]	@ (8001448 <MX_GPIO_Init+0x1a0>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001318:	4b4b      	ldr	r3, [pc, #300]	@ (8001448 <MX_GPIO_Init+0x1a0>)
 800131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131e:	4a4a      	ldr	r2, [pc, #296]	@ (8001448 <MX_GPIO_Init+0x1a0>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001328:	4b47      	ldr	r3, [pc, #284]	@ (8001448 <MX_GPIO_Init+0x1a0>)
 800132a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001336:	4b44      	ldr	r3, [pc, #272]	@ (8001448 <MX_GPIO_Init+0x1a0>)
 8001338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133c:	4a42      	ldr	r2, [pc, #264]	@ (8001448 <MX_GPIO_Init+0x1a0>)
 800133e:	f043 0308 	orr.w	r3, r3, #8
 8001342:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001346:	4b40      	ldr	r3, [pc, #256]	@ (8001448 <MX_GPIO_Init+0x1a0>)
 8001348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001354:	4b3c      	ldr	r3, [pc, #240]	@ (8001448 <MX_GPIO_Init+0x1a0>)
 8001356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800135a:	4a3b      	ldr	r2, [pc, #236]	@ (8001448 <MX_GPIO_Init+0x1a0>)
 800135c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001360:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001364:	4b38      	ldr	r3, [pc, #224]	@ (8001448 <MX_GPIO_Init+0x1a0>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800136a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001372:	4b35      	ldr	r3, [pc, #212]	@ (8001448 <MX_GPIO_Init+0x1a0>)
 8001374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001378:	4a33      	ldr	r2, [pc, #204]	@ (8001448 <MX_GPIO_Init+0x1a0>)
 800137a:	f043 0310 	orr.w	r3, r3, #16
 800137e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001382:	4b31      	ldr	r3, [pc, #196]	@ (8001448 <MX_GPIO_Init+0x1a0>)
 8001384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001388:	f003 0310 	and.w	r3, r3, #16
 800138c:	603b      	str	r3, [r7, #0]
 800138e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001396:	482d      	ldr	r0, [pc, #180]	@ (800144c <MX_GPIO_Init+0x1a4>)
 8001398:	f004 fc3a 	bl	8005c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013a2:	482b      	ldr	r0, [pc, #172]	@ (8001450 <MX_GPIO_Init+0x1a8>)
 80013a4:	f004 fc34 	bl	8005c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2102      	movs	r1, #2
 80013ac:	4829      	ldr	r0, [pc, #164]	@ (8001454 <MX_GPIO_Init+0x1ac>)
 80013ae:	f004 fc2f 	bl	8005c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	4619      	mov	r1, r3
 80013c6:	4824      	ldr	r0, [pc, #144]	@ (8001458 <MX_GPIO_Init+0x1b0>)
 80013c8:	f004 fa72 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80013cc:	f244 0301 	movw	r3, #16385	@ 0x4001
 80013d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	4619      	mov	r1, r3
 80013e4:	4819      	ldr	r0, [pc, #100]	@ (800144c <MX_GPIO_Init+0x1a4>)
 80013e6:	f004 fa63 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80013ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4619      	mov	r1, r3
 8001402:	4813      	ldr	r0, [pc, #76]	@ (8001450 <MX_GPIO_Init+0x1a8>)
 8001404:	f004 fa54 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001408:	2380      	movs	r3, #128	@ 0x80
 800140a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800140c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001410:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001416:	f107 031c 	add.w	r3, r7, #28
 800141a:	4619      	mov	r1, r3
 800141c:	480f      	ldr	r0, [pc, #60]	@ (800145c <MX_GPIO_Init+0x1b4>)
 800141e:	f004 fa47 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001422:	2302      	movs	r3, #2
 8001424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001426:	2301      	movs	r3, #1
 8001428:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	4619      	mov	r1, r3
 8001438:	4806      	ldr	r0, [pc, #24]	@ (8001454 <MX_GPIO_Init+0x1ac>)
 800143a:	f004 fa39 	bl	80058b0 <HAL_GPIO_Init>

}
 800143e:	bf00      	nop
 8001440:	3730      	adds	r7, #48	@ 0x30
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	58024400 	.word	0x58024400
 800144c:	58020400 	.word	0x58020400
 8001450:	58020c00 	.word	0x58020c00
 8001454:	58021000 	.word	0x58021000
 8001458:	58020800 	.word	0x58020800
 800145c:	58021800 	.word	0x58021800

08001460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001464:	f000 fe28 	bl	80020b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001468:	f000 f812 	bl	8001490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800146c:	f7ff ff1c 	bl	80012a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001470:	f7ff fbe2 	bl	8000c38 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001474:	f000 fc24 	bl	8001cc0 <MX_USART3_UART_Init>
  MX_ETH_Init();
 8001478:	f7ff fd4c 	bl	8000f14 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 800147c:	f000 fd44 	bl	8001f08 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001480:	f00a fa90 	bl	800b9a4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001484:	f7ff fe60 	bl	8001148 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001488:	f00a fab0 	bl	800b9ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <main+0x2c>

08001490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b09c      	sub	sp, #112	@ 0x70
 8001494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001496:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800149a:	224c      	movs	r2, #76	@ 0x4c
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f019 ff7e 	bl	801b3a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	2220      	movs	r2, #32
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f019 ff78 	bl	801b3a0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80014b0:	2002      	movs	r0, #2
 80014b2:	f004 fcf7 	bl	8005ea4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014b6:	2300      	movs	r3, #0
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	4b33      	ldr	r3, [pc, #204]	@ (8001588 <SystemClock_Config+0xf8>)
 80014bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014be:	4a32      	ldr	r2, [pc, #200]	@ (8001588 <SystemClock_Config+0xf8>)
 80014c0:	f023 0301 	bic.w	r3, r3, #1
 80014c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80014c6:	4b30      	ldr	r3, [pc, #192]	@ (8001588 <SystemClock_Config+0xf8>)
 80014c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	4b2e      	ldr	r3, [pc, #184]	@ (800158c <SystemClock_Config+0xfc>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014d8:	4a2c      	ldr	r2, [pc, #176]	@ (800158c <SystemClock_Config+0xfc>)
 80014da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014de:	6193      	str	r3, [r2, #24]
 80014e0:	4b2a      	ldr	r3, [pc, #168]	@ (800158c <SystemClock_Config+0xfc>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014ec:	bf00      	nop
 80014ee:	4b27      	ldr	r3, [pc, #156]	@ (800158c <SystemClock_Config+0xfc>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014fa:	d1f8      	bne.n	80014ee <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80014fc:	2303      	movs	r3, #3
 80014fe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001500:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001504:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001506:	2301      	movs	r3, #1
 8001508:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800150a:	2340      	movs	r3, #64	@ 0x40
 800150c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150e:	2302      	movs	r3, #2
 8001510:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001512:	2302      	movs	r3, #2
 8001514:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001516:	2301      	movs	r3, #1
 8001518:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800151a:	2318      	movs	r3, #24
 800151c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800151e:	2302      	movs	r3, #2
 8001520:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001522:	2304      	movs	r3, #4
 8001524:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001526:	2302      	movs	r3, #2
 8001528:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800152a:	230c      	movs	r3, #12
 800152c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800152e:	2300      	movs	r3, #0
 8001530:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001536:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800153a:	4618      	mov	r0, r3
 800153c:	f004 fcfc 	bl	8005f38 <HAL_RCC_OscConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001546:	f000 f835 	bl	80015b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154a:	233f      	movs	r3, #63	@ 0x3f
 800154c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2101      	movs	r1, #1
 800156e:	4618      	mov	r0, r3
 8001570:	f005 f93c 	bl	80067ec <HAL_RCC_ClockConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800157a:	f000 f81b 	bl	80015b4 <Error_Handler>
  }
}
 800157e:	bf00      	nop
 8001580:	3770      	adds	r7, #112	@ 0x70
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	58000400 	.word	0x58000400
 800158c:	58024800 	.word	0x58024800

08001590 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a04      	ldr	r2, [pc, #16]	@ (80015b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d101      	bne.n	80015a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015a2:	f000 fdc5 	bl	8002130 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40001000 	.word	0x40001000

080015b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015b8:	b672      	cpsid	i
}
 80015ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <Error_Handler+0x8>

080015c0 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80015ca:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <microros_allocate+0x3c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4413      	add	r3, r2
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <microros_allocate+0x3c>)
 80015d8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80015da:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <microros_allocate+0x40>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4413      	add	r3, r2
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <microros_allocate+0x40>)
 80015e8:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff f8d2 	bl	8000794 <pvPortMallocMicroROS>
 80015f0:	4603      	mov	r3, r0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	24031a18 	.word	0x24031a18
 8001600:	24031a1c 	.word	0x24031a1c

08001604 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d00c      	beq.n	800162e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff f9e1 	bl	80009dc <getBlockSize>
 800161a:	4603      	mov	r3, r0
 800161c:	4a06      	ldr	r2, [pc, #24]	@ (8001638 <microros_deallocate+0x34>)
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	461a      	mov	r2, r3
 8001624:	4b04      	ldr	r3, [pc, #16]	@ (8001638 <microros_deallocate+0x34>)
 8001626:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff f97b 	bl	8000924 <vPortFreeMicroROS>
  }
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	24031a1c 	.word	0x24031a1c

0800163c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001648:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <microros_reallocate+0x64>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	4413      	add	r3, r2
 8001652:	461a      	mov	r2, r3
 8001654:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <microros_reallocate+0x64>)
 8001656:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <microros_reallocate+0x68>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	4413      	add	r3, r2
 8001662:	461a      	mov	r2, r3
 8001664:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <microros_reallocate+0x68>)
 8001666:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d104      	bne.n	8001678 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800166e:	68b8      	ldr	r0, [r7, #8]
 8001670:	f7ff f890 	bl	8000794 <pvPortMallocMicroROS>
 8001674:	4603      	mov	r3, r0
 8001676:	e00e      	b.n	8001696 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f7ff f9af 	bl	80009dc <getBlockSize>
 800167e:	4603      	mov	r3, r0
 8001680:	4a08      	ldr	r2, [pc, #32]	@ (80016a4 <microros_reallocate+0x68>)
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	461a      	mov	r2, r3
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <microros_reallocate+0x68>)
 800168a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f7ff f9c2 	bl	8000a18 <pvPortReallocMicroROS>
 8001694:	4603      	mov	r3, r0
  }
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	24031a18 	.word	0x24031a18
 80016a4:	24031a1c 	.word	0x24031a1c

080016a8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	fb02 f303 	mul.w	r3, r2, r3
 80016bc:	4a0c      	ldr	r2, [pc, #48]	@ (80016f0 <microros_zero_allocate+0x48>)
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	4413      	add	r3, r2
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b0a      	ldr	r3, [pc, #40]	@ (80016f0 <microros_zero_allocate+0x48>)
 80016c6:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	fb02 f303 	mul.w	r3, r2, r3
 80016d0:	4a08      	ldr	r2, [pc, #32]	@ (80016f4 <microros_zero_allocate+0x4c>)
 80016d2:	6812      	ldr	r2, [r2, #0]
 80016d4:	4413      	add	r3, r2
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <microros_zero_allocate+0x4c>)
 80016da:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f7ff f9c7 	bl	8000a72 <pvPortCallocMicroROS>
 80016e4:	4603      	mov	r3, r0
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	24031a18 	.word	0x24031a18
 80016f4:	24031a1c 	.word	0x24031a1c

080016f8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80016f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800170a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800170e:	a320      	add	r3, pc, #128	@ (adr r3, 8001790 <UTILS_NanosecondsToTimespec+0x98>)
 8001710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001714:	f7fe fe4c 	bl	80003b0 <__aeabi_ldivmod>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001722:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001726:	a31a      	add	r3, pc, #104	@ (adr r3, 8001790 <UTILS_NanosecondsToTimespec+0x98>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7fe fe40 	bl	80003b0 <__aeabi_ldivmod>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b00      	cmp	r3, #0
 800173a:	da20      	bge.n	800177e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	4a11      	ldr	r2, [pc, #68]	@ (8001788 <UTILS_NanosecondsToTimespec+0x90>)
 8001742:	fb82 1203 	smull	r1, r2, r2, r3
 8001746:	1712      	asrs	r2, r2, #28
 8001748:	17db      	asrs	r3, r3, #31
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	3301      	adds	r3, #1
 800174e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001756:	6979      	ldr	r1, [r7, #20]
 8001758:	17c8      	asrs	r0, r1, #31
 800175a:	460c      	mov	r4, r1
 800175c:	4605      	mov	r5, r0
 800175e:	ebb2 0804 	subs.w	r8, r2, r4
 8001762:	eb63 0905 	sbc.w	r9, r3, r5
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	4906      	ldr	r1, [pc, #24]	@ (800178c <UTILS_NanosecondsToTimespec+0x94>)
 8001774:	fb01 f303 	mul.w	r3, r1, r3
 8001778:	441a      	add	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	609a      	str	r2, [r3, #8]
    }
}
 800177e:	bf00      	nop
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001788:	44b82fa1 	.word	0x44b82fa1
 800178c:	3b9aca00 	.word	0x3b9aca00
 8001790:	3b9aca00 	.word	0x3b9aca00
 8001794:	00000000 	.word	0x00000000

08001798 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800179c:	b08e      	sub	sp, #56	@ 0x38
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80017a2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80017a4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80017a8:	2300      	movs	r3, #0
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80017ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017be:	4618      	mov	r0, r3
 80017c0:	f00b fcc0 	bl	800d144 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80017c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c6:	17da      	asrs	r2, r3, #31
 80017c8:	61bb      	str	r3, [r7, #24]
 80017ca:	61fa      	str	r2, [r7, #28]
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	69b9      	ldr	r1, [r7, #24]
 80017d6:	000b      	movs	r3, r1
 80017d8:	2200      	movs	r2, #0
 80017da:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80017de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e0:	2200      	movs	r2, #0
 80017e2:	461c      	mov	r4, r3
 80017e4:	4615      	mov	r5, r2
 80017e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80017ea:	1911      	adds	r1, r2, r4
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	416b      	adcs	r3, r5
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80017f6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80017fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	f04f 0400 	mov.w	r4, #0
 8001806:	f04f 0500 	mov.w	r5, #0
 800180a:	015d      	lsls	r5, r3, #5
 800180c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001810:	0154      	lsls	r4, r2, #5
 8001812:	4622      	mov	r2, r4
 8001814:	462b      	mov	r3, r5
 8001816:	ebb2 0800 	subs.w	r8, r2, r0
 800181a:	eb63 0901 	sbc.w	r9, r3, r1
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800182a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800182e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001832:	4690      	mov	r8, r2
 8001834:	4699      	mov	r9, r3
 8001836:	eb18 0a00 	adds.w	sl, r8, r0
 800183a:	eb49 0b01 	adc.w	fp, r9, r1
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800184a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800184e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001852:	ebb2 040a 	subs.w	r4, r2, sl
 8001856:	603c      	str	r4, [r7, #0]
 8001858:	eb63 030b 	sbc.w	r3, r3, fp
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001862:	4623      	mov	r3, r4
 8001864:	181b      	adds	r3, r3, r0
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	462b      	mov	r3, r5
 800186a:	eb41 0303 	adc.w	r3, r1, r3
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	6a3a      	ldr	r2, [r7, #32]
 8001872:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001876:	f7ff ff3f 	bl	80016f8 <UTILS_NanosecondsToTimespec>

    return 0;
 800187a:	2300      	movs	r3, #0
 800187c:	4618      	mov	r0, r3
 800187e:	3738      	adds	r7, #56	@ 0x38
 8001880:	46bd      	mov	sp, r7
 8001882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <HAL_MspInit+0x38>)
 8001890:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001894:	4a0a      	ldr	r2, [pc, #40]	@ (80018c0 <HAL_MspInit+0x38>)
 8001896:	f043 0302 	orr.w	r3, r3, #2
 800189a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800189e:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <HAL_MspInit+0x38>)
 80018a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	210f      	movs	r1, #15
 80018b0:	f06f 0001 	mvn.w	r0, #1
 80018b4:	f000 fd58 	bl	8002368 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	58024400 	.word	0x58024400

080018c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b090      	sub	sp, #64	@ 0x40
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b0f      	cmp	r3, #15
 80018d0:	d827      	bhi.n	8001922 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80018d2:	2200      	movs	r2, #0
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	2036      	movs	r0, #54	@ 0x36
 80018d8:	f000 fd46 	bl	8002368 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018dc:	2036      	movs	r0, #54	@ 0x36
 80018de:	f000 fd5d 	bl	800239c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80018e2:	4a29      	ldr	r2, [pc, #164]	@ (8001988 <HAL_InitTick+0xc4>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018e8:	4b28      	ldr	r3, [pc, #160]	@ (800198c <HAL_InitTick+0xc8>)
 80018ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018ee:	4a27      	ldr	r2, [pc, #156]	@ (800198c <HAL_InitTick+0xc8>)
 80018f0:	f043 0310 	orr.w	r3, r3, #16
 80018f4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018f8:	4b24      	ldr	r3, [pc, #144]	@ (800198c <HAL_InitTick+0xc8>)
 80018fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001906:	f107 0210 	add.w	r2, r7, #16
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f005 faf7 	bl	8006f04 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001918:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800191a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800191c:	2b00      	cmp	r3, #0
 800191e:	d106      	bne.n	800192e <HAL_InitTick+0x6a>
 8001920:	e001      	b.n	8001926 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e02b      	b.n	800197e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001926:	f005 fac1 	bl	8006eac <HAL_RCC_GetPCLK1Freq>
 800192a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800192c:	e004      	b.n	8001938 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800192e:	f005 fabd 	bl	8006eac <HAL_RCC_GetPCLK1Freq>
 8001932:	4603      	mov	r3, r0
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800193a:	4a15      	ldr	r2, [pc, #84]	@ (8001990 <HAL_InitTick+0xcc>)
 800193c:	fba2 2303 	umull	r2, r3, r2, r3
 8001940:	0c9b      	lsrs	r3, r3, #18
 8001942:	3b01      	subs	r3, #1
 8001944:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001946:	4b13      	ldr	r3, [pc, #76]	@ (8001994 <HAL_InitTick+0xd0>)
 8001948:	4a13      	ldr	r2, [pc, #76]	@ (8001998 <HAL_InitTick+0xd4>)
 800194a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800194c:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <HAL_InitTick+0xd0>)
 800194e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001952:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001954:	4a0f      	ldr	r2, [pc, #60]	@ (8001994 <HAL_InitTick+0xd0>)
 8001956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001958:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800195a:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <HAL_InitTick+0xd0>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001960:	4b0c      	ldr	r3, [pc, #48]	@ (8001994 <HAL_InitTick+0xd0>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001966:	480b      	ldr	r0, [pc, #44]	@ (8001994 <HAL_InitTick+0xd0>)
 8001968:	f007 f93a 	bl	8008be0 <HAL_TIM_Base_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d104      	bne.n	800197c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001972:	4808      	ldr	r0, [pc, #32]	@ (8001994 <HAL_InitTick+0xd0>)
 8001974:	f007 f996 	bl	8008ca4 <HAL_TIM_Base_Start_IT>
 8001978:	4603      	mov	r3, r0
 800197a:	e000      	b.n	800197e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
}
 800197e:	4618      	mov	r0, r3
 8001980:	3740      	adds	r7, #64	@ 0x40
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	2400000c 	.word	0x2400000c
 800198c:	58024400 	.word	0x58024400
 8001990:	431bde83 	.word	0x431bde83
 8001994:	24031a20 	.word	0x24031a20
 8001998:	40001000 	.word	0x40001000

0800199c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <NMI_Handler+0x4>

080019a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <HardFault_Handler+0x4>

080019ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <MemManage_Handler+0x4>

080019b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80019d8:	4802      	ldr	r0, [pc, #8]	@ (80019e4 <DMA1_Stream0_IRQHandler+0x10>)
 80019da:	f002 f817 	bl	8003a0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	24031b08 	.word	0x24031b08

080019e8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80019ec:	4802      	ldr	r0, [pc, #8]	@ (80019f8 <DMA1_Stream1_IRQHandler+0x10>)
 80019ee:	f002 f80d 	bl	8003a0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	24031b80 	.word	0x24031b80

080019fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a00:	4802      	ldr	r0, [pc, #8]	@ (8001a0c <USART3_IRQHandler+0x10>)
 8001a02:	f007 fd6d 	bl	80094e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	24031a74 	.word	0x24031a74

08001a10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a14:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <TIM6_DAC_IRQHandler+0x10>)
 8001a16:	f007 f9bd 	bl	8008d94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	24031a20 	.word	0x24031a20

08001a24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return 1;
 8001a28:	2301      	movs	r3, #1
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <_kill>:

int _kill(int pid, int sig)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a3e:	f019 fd99 	bl	801b574 <__errno>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2216      	movs	r2, #22
 8001a46:	601a      	str	r2, [r3, #0]
  return -1;
 8001a48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <_exit>:

void _exit (int status)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ffe7 	bl	8001a34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a66:	bf00      	nop
 8001a68:	e7fd      	b.n	8001a66 <_exit+0x12>

08001a6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	60f8      	str	r0, [r7, #12]
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	e00a      	b.n	8001a92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a7c:	f3af 8000 	nop.w
 8001a80:	4601      	mov	r1, r0
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	60ba      	str	r2, [r7, #8]
 8001a88:	b2ca      	uxtb	r2, r1
 8001a8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	dbf0      	blt.n	8001a7c <_read+0x12>
  }

  return len;
 8001a9a:	687b      	ldr	r3, [r7, #4]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	e009      	b.n	8001aca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	60ba      	str	r2, [r7, #8]
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	dbf1      	blt.n	8001ab6 <_write+0x12>
  }
  return len;
 8001ad2:	687b      	ldr	r3, [r7, #4]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <_close>:

int _close(int file)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b04:	605a      	str	r2, [r3, #4]
  return 0;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <_isatty>:

int _isatty(int file)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b1c:	2301      	movs	r3, #1
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b085      	sub	sp, #20
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	60f8      	str	r0, [r7, #12]
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b4c:	4a14      	ldr	r2, [pc, #80]	@ (8001ba0 <_sbrk+0x5c>)
 8001b4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ba4 <_sbrk+0x60>)
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b58:	4b13      	ldr	r3, [pc, #76]	@ (8001ba8 <_sbrk+0x64>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d102      	bne.n	8001b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b60:	4b11      	ldr	r3, [pc, #68]	@ (8001ba8 <_sbrk+0x64>)
 8001b62:	4a12      	ldr	r2, [pc, #72]	@ (8001bac <_sbrk+0x68>)
 8001b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b66:	4b10      	ldr	r3, [pc, #64]	@ (8001ba8 <_sbrk+0x64>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d207      	bcs.n	8001b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b74:	f019 fcfe 	bl	801b574 <__errno>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b82:	e009      	b.n	8001b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b84:	4b08      	ldr	r3, [pc, #32]	@ (8001ba8 <_sbrk+0x64>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ba8 <_sbrk+0x64>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	4a05      	ldr	r2, [pc, #20]	@ (8001ba8 <_sbrk+0x64>)
 8001b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b96:	68fb      	ldr	r3, [r7, #12]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	24080000 	.word	0x24080000
 8001ba4:	00000400 	.word	0x00000400
 8001ba8:	24031a70 	.word	0x24031a70
 8001bac:	24068860 	.word	0x24068860

08001bb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bb4:	4b37      	ldr	r3, [pc, #220]	@ (8001c94 <SystemInit+0xe4>)
 8001bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bba:	4a36      	ldr	r2, [pc, #216]	@ (8001c94 <SystemInit+0xe4>)
 8001bbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bc4:	4b34      	ldr	r3, [pc, #208]	@ (8001c98 <SystemInit+0xe8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	2b06      	cmp	r3, #6
 8001bce:	d807      	bhi.n	8001be0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bd0:	4b31      	ldr	r3, [pc, #196]	@ (8001c98 <SystemInit+0xe8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f023 030f 	bic.w	r3, r3, #15
 8001bd8:	4a2f      	ldr	r2, [pc, #188]	@ (8001c98 <SystemInit+0xe8>)
 8001bda:	f043 0307 	orr.w	r3, r3, #7
 8001bde:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001be0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c9c <SystemInit+0xec>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a2d      	ldr	r2, [pc, #180]	@ (8001c9c <SystemInit+0xec>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bec:	4b2b      	ldr	r3, [pc, #172]	@ (8001c9c <SystemInit+0xec>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c9c <SystemInit+0xec>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	4929      	ldr	r1, [pc, #164]	@ (8001c9c <SystemInit+0xec>)
 8001bf8:	4b29      	ldr	r3, [pc, #164]	@ (8001ca0 <SystemInit+0xf0>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bfe:	4b26      	ldr	r3, [pc, #152]	@ (8001c98 <SystemInit+0xe8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c0a:	4b23      	ldr	r3, [pc, #140]	@ (8001c98 <SystemInit+0xe8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 030f 	bic.w	r3, r3, #15
 8001c12:	4a21      	ldr	r2, [pc, #132]	@ (8001c98 <SystemInit+0xe8>)
 8001c14:	f043 0307 	orr.w	r3, r3, #7
 8001c18:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001c1a:	4b20      	ldr	r3, [pc, #128]	@ (8001c9c <SystemInit+0xec>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001c20:	4b1e      	ldr	r3, [pc, #120]	@ (8001c9c <SystemInit+0xec>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001c26:	4b1d      	ldr	r3, [pc, #116]	@ (8001c9c <SystemInit+0xec>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c9c <SystemInit+0xec>)
 8001c2e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca4 <SystemInit+0xf4>)
 8001c30:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c32:	4b1a      	ldr	r3, [pc, #104]	@ (8001c9c <SystemInit+0xec>)
 8001c34:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca8 <SystemInit+0xf8>)
 8001c36:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c38:	4b18      	ldr	r3, [pc, #96]	@ (8001c9c <SystemInit+0xec>)
 8001c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cac <SystemInit+0xfc>)
 8001c3c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c3e:	4b17      	ldr	r3, [pc, #92]	@ (8001c9c <SystemInit+0xec>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c44:	4b15      	ldr	r3, [pc, #84]	@ (8001c9c <SystemInit+0xec>)
 8001c46:	4a19      	ldr	r2, [pc, #100]	@ (8001cac <SystemInit+0xfc>)
 8001c48:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c4a:	4b14      	ldr	r3, [pc, #80]	@ (8001c9c <SystemInit+0xec>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c50:	4b12      	ldr	r3, [pc, #72]	@ (8001c9c <SystemInit+0xec>)
 8001c52:	4a16      	ldr	r2, [pc, #88]	@ (8001cac <SystemInit+0xfc>)
 8001c54:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c56:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <SystemInit+0xec>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c9c <SystemInit+0xec>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0e      	ldr	r2, [pc, #56]	@ (8001c9c <SystemInit+0xec>)
 8001c62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	@ (8001c9c <SystemInit+0xec>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001c6e:	4b10      	ldr	r3, [pc, #64]	@ (8001cb0 <SystemInit+0x100>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <SystemInit+0x104>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c7a:	d202      	bcs.n	8001c82 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb8 <SystemInit+0x108>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	@ (8001cbc <SystemInit+0x10c>)
 8001c84:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001c88:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00
 8001c98:	52002000 	.word	0x52002000
 8001c9c:	58024400 	.word	0x58024400
 8001ca0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ca4:	02020200 	.word	0x02020200
 8001ca8:	01ff0000 	.word	0x01ff0000
 8001cac:	01010280 	.word	0x01010280
 8001cb0:	5c001000 	.word	0x5c001000
 8001cb4:	ffff0000 	.word	0xffff0000
 8001cb8:	51008108 	.word	0x51008108
 8001cbc:	52004000 	.word	0x52004000

08001cc0 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cc4:	4b22      	ldr	r3, [pc, #136]	@ (8001d50 <MX_USART3_UART_Init+0x90>)
 8001cc6:	4a23      	ldr	r2, [pc, #140]	@ (8001d54 <MX_USART3_UART_Init+0x94>)
 8001cc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001cca:	4b21      	ldr	r3, [pc, #132]	@ (8001d50 <MX_USART3_UART_Init+0x90>)
 8001ccc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d50 <MX_USART3_UART_Init+0x90>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d50 <MX_USART3_UART_Init+0x90>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cde:	4b1c      	ldr	r3, [pc, #112]	@ (8001d50 <MX_USART3_UART_Init+0x90>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <MX_USART3_UART_Init+0x90>)
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cea:	4b19      	ldr	r3, [pc, #100]	@ (8001d50 <MX_USART3_UART_Init+0x90>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf0:	4b17      	ldr	r3, [pc, #92]	@ (8001d50 <MX_USART3_UART_Init+0x90>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cf6:	4b16      	ldr	r3, [pc, #88]	@ (8001d50 <MX_USART3_UART_Init+0x90>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cfc:	4b14      	ldr	r3, [pc, #80]	@ (8001d50 <MX_USART3_UART_Init+0x90>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d02:	4b13      	ldr	r3, [pc, #76]	@ (8001d50 <MX_USART3_UART_Init+0x90>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d08:	4811      	ldr	r0, [pc, #68]	@ (8001d50 <MX_USART3_UART_Init+0x90>)
 8001d0a:	f007 fa37 	bl	800917c <HAL_UART_Init>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001d14:	f7ff fc4e 	bl	80015b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d18:	2100      	movs	r1, #0
 8001d1a:	480d      	ldr	r0, [pc, #52]	@ (8001d50 <MX_USART3_UART_Init+0x90>)
 8001d1c:	f009 fa2c 	bl	800b178 <HAL_UARTEx_SetTxFifoThreshold>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001d26:	f7ff fc45 	bl	80015b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4808      	ldr	r0, [pc, #32]	@ (8001d50 <MX_USART3_UART_Init+0x90>)
 8001d2e:	f009 fa61 	bl	800b1f4 <HAL_UARTEx_SetRxFifoThreshold>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001d38:	f7ff fc3c 	bl	80015b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001d3c:	4804      	ldr	r0, [pc, #16]	@ (8001d50 <MX_USART3_UART_Init+0x90>)
 8001d3e:	f009 f9e2 	bl	800b106 <HAL_UARTEx_DisableFifoMode>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001d48:	f7ff fc34 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	24031a74 	.word	0x24031a74
 8001d54:	40004800 	.word	0x40004800

08001d58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b0ba      	sub	sp, #232	@ 0xe8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	22c0      	movs	r2, #192	@ 0xc0
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f019 fb11 	bl	801b3a0 <memset>
  if(uartHandle->Instance==USART3)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a5a      	ldr	r2, [pc, #360]	@ (8001eec <HAL_UART_MspInit+0x194>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	f040 80ad 	bne.w	8001ee4 <HAL_UART_MspInit+0x18c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d8a:	f04f 0202 	mov.w	r2, #2
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	4618      	mov	r0, r3
 8001da2:	f005 f8f1 	bl	8006f88 <HAL_RCCEx_PeriphCLKConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001dac:	f7ff fc02 	bl	80015b4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001db0:	4b4f      	ldr	r3, [pc, #316]	@ (8001ef0 <HAL_UART_MspInit+0x198>)
 8001db2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001db6:	4a4e      	ldr	r2, [pc, #312]	@ (8001ef0 <HAL_UART_MspInit+0x198>)
 8001db8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dbc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001dc0:	4b4b      	ldr	r3, [pc, #300]	@ (8001ef0 <HAL_UART_MspInit+0x198>)
 8001dc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dce:	4b48      	ldr	r3, [pc, #288]	@ (8001ef0 <HAL_UART_MspInit+0x198>)
 8001dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd4:	4a46      	ldr	r2, [pc, #280]	@ (8001ef0 <HAL_UART_MspInit+0x198>)
 8001dd6:	f043 0308 	orr.w	r3, r3, #8
 8001dda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dde:	4b44      	ldr	r3, [pc, #272]	@ (8001ef0 <HAL_UART_MspInit+0x198>)
 8001de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001dec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001df0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2300      	movs	r3, #0
 8001e02:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e06:	2307      	movs	r3, #7
 8001e08:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e0c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e10:	4619      	mov	r1, r3
 8001e12:	4838      	ldr	r0, [pc, #224]	@ (8001ef4 <HAL_UART_MspInit+0x19c>)
 8001e14:	f003 fd4c 	bl	80058b0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001e18:	4b37      	ldr	r3, [pc, #220]	@ (8001ef8 <HAL_UART_MspInit+0x1a0>)
 8001e1a:	4a38      	ldr	r2, [pc, #224]	@ (8001efc <HAL_UART_MspInit+0x1a4>)
 8001e1c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001e1e:	4b36      	ldr	r3, [pc, #216]	@ (8001ef8 <HAL_UART_MspInit+0x1a0>)
 8001e20:	222d      	movs	r2, #45	@ 0x2d
 8001e22:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e24:	4b34      	ldr	r3, [pc, #208]	@ (8001ef8 <HAL_UART_MspInit+0x1a0>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e2a:	4b33      	ldr	r3, [pc, #204]	@ (8001ef8 <HAL_UART_MspInit+0x1a0>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e30:	4b31      	ldr	r3, [pc, #196]	@ (8001ef8 <HAL_UART_MspInit+0x1a0>)
 8001e32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e36:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e38:	4b2f      	ldr	r3, [pc, #188]	@ (8001ef8 <HAL_UART_MspInit+0x1a0>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef8 <HAL_UART_MspInit+0x1a0>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001e44:	4b2c      	ldr	r3, [pc, #176]	@ (8001ef8 <HAL_UART_MspInit+0x1a0>)
 8001e46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e4a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef8 <HAL_UART_MspInit+0x1a0>)
 8001e4e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e52:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e54:	4b28      	ldr	r3, [pc, #160]	@ (8001ef8 <HAL_UART_MspInit+0x1a0>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001e5a:	4827      	ldr	r0, [pc, #156]	@ (8001ef8 <HAL_UART_MspInit+0x1a0>)
 8001e5c:	f000 faac 	bl	80023b8 <HAL_DMA_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001e66:	f7ff fba5 	bl	80015b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a22      	ldr	r2, [pc, #136]	@ (8001ef8 <HAL_UART_MspInit+0x1a0>)
 8001e6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001e72:	4a21      	ldr	r2, [pc, #132]	@ (8001ef8 <HAL_UART_MspInit+0x1a0>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001e78:	4b21      	ldr	r3, [pc, #132]	@ (8001f00 <HAL_UART_MspInit+0x1a8>)
 8001e7a:	4a22      	ldr	r2, [pc, #136]	@ (8001f04 <HAL_UART_MspInit+0x1ac>)
 8001e7c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001e7e:	4b20      	ldr	r3, [pc, #128]	@ (8001f00 <HAL_UART_MspInit+0x1a8>)
 8001e80:	222e      	movs	r2, #46	@ 0x2e
 8001e82:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e84:	4b1e      	ldr	r3, [pc, #120]	@ (8001f00 <HAL_UART_MspInit+0x1a8>)
 8001e86:	2240      	movs	r2, #64	@ 0x40
 8001e88:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001f00 <HAL_UART_MspInit+0x1a8>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e90:	4b1b      	ldr	r3, [pc, #108]	@ (8001f00 <HAL_UART_MspInit+0x1a8>)
 8001e92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e96:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e98:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <HAL_UART_MspInit+0x1a8>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e9e:	4b18      	ldr	r3, [pc, #96]	@ (8001f00 <HAL_UART_MspInit+0x1a8>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001ea4:	4b16      	ldr	r3, [pc, #88]	@ (8001f00 <HAL_UART_MspInit+0x1a8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001eaa:	4b15      	ldr	r3, [pc, #84]	@ (8001f00 <HAL_UART_MspInit+0x1a8>)
 8001eac:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001eb0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eb2:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <HAL_UART_MspInit+0x1a8>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001eb8:	4811      	ldr	r0, [pc, #68]	@ (8001f00 <HAL_UART_MspInit+0x1a8>)
 8001eba:	f000 fa7d 	bl	80023b8 <HAL_DMA_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 8001ec4:	f7ff fb76 	bl	80015b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a0d      	ldr	r2, [pc, #52]	@ (8001f00 <HAL_UART_MspInit+0x1a8>)
 8001ecc:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001ece:	4a0c      	ldr	r2, [pc, #48]	@ (8001f00 <HAL_UART_MspInit+0x1a8>)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2105      	movs	r1, #5
 8001ed8:	2027      	movs	r0, #39	@ 0x27
 8001eda:	f000 fa45 	bl	8002368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ede:	2027      	movs	r0, #39	@ 0x27
 8001ee0:	f000 fa5c 	bl	800239c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	37e8      	adds	r7, #232	@ 0xe8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40004800 	.word	0x40004800
 8001ef0:	58024400 	.word	0x58024400
 8001ef4:	58020c00 	.word	0x58020c00
 8001ef8:	24031b08 	.word	0x24031b08
 8001efc:	40020010 	.word	0x40020010
 8001f00:	24031b80 	.word	0x24031b80
 8001f04:	40020028 	.word	0x40020028

08001f08 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001f0c:	4b15      	ldr	r3, [pc, #84]	@ (8001f64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f0e:	4a16      	ldr	r2, [pc, #88]	@ (8001f68 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001f10:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001f12:	4b14      	ldr	r3, [pc, #80]	@ (8001f64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f14:	2209      	movs	r2, #9
 8001f16:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001f18:	4b12      	ldr	r3, [pc, #72]	@ (8001f64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001f1e:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001f24:	4b0f      	ldr	r3, [pc, #60]	@ (8001f64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f26:	2202      	movs	r2, #2
 8001f28:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001f30:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001f36:	4b0b      	ldr	r3, [pc, #44]	@ (8001f64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001f3c:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001f42:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001f48:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001f4e:	4805      	ldr	r0, [pc, #20]	@ (8001f64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f50:	f003 fe77 	bl	8005c42 <HAL_PCD_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001f5a:	f7ff fb2b 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	24031bf8 	.word	0x24031bf8
 8001f68:	40080000 	.word	0x40080000

08001f6c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b0ba      	sub	sp, #232	@ 0xe8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f84:	f107 0310 	add.w	r3, r7, #16
 8001f88:	22c0      	movs	r2, #192	@ 0xc0
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f019 fa07 	bl	801b3a0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a30      	ldr	r2, [pc, #192]	@ (8002058 <HAL_PCD_MspInit+0xec>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d159      	bne.n	8002050 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001f9c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001fa8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001fac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fb0:	f107 0310 	add.w	r3, r7, #16
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f004 ffe7 	bl	8006f88 <HAL_RCCEx_PeriphCLKConfig>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001fc0:	f7ff faf8 	bl	80015b4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001fc4:	f003 ffa8 	bl	8005f18 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc8:	4b24      	ldr	r3, [pc, #144]	@ (800205c <HAL_PCD_MspInit+0xf0>)
 8001fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fce:	4a23      	ldr	r2, [pc, #140]	@ (800205c <HAL_PCD_MspInit+0xf0>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fd8:	4b20      	ldr	r3, [pc, #128]	@ (800205c <HAL_PCD_MspInit+0xf0>)
 8001fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001fe6:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001fea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002000:	230a      	movs	r3, #10
 8002002:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002006:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800200a:	4619      	mov	r1, r3
 800200c:	4814      	ldr	r0, [pc, #80]	@ (8002060 <HAL_PCD_MspInit+0xf4>)
 800200e:	f003 fc4f 	bl	80058b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002012:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002016:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800201a:	2300      	movs	r3, #0
 800201c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002026:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800202a:	4619      	mov	r1, r3
 800202c:	480c      	ldr	r0, [pc, #48]	@ (8002060 <HAL_PCD_MspInit+0xf4>)
 800202e:	f003 fc3f 	bl	80058b0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002032:	4b0a      	ldr	r3, [pc, #40]	@ (800205c <HAL_PCD_MspInit+0xf0>)
 8002034:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002038:	4a08      	ldr	r2, [pc, #32]	@ (800205c <HAL_PCD_MspInit+0xf0>)
 800203a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800203e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002042:	4b06      	ldr	r3, [pc, #24]	@ (800205c <HAL_PCD_MspInit+0xf0>)
 8002044:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002048:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002050:	bf00      	nop
 8002052:	37e8      	adds	r7, #232	@ 0xe8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40080000 	.word	0x40080000
 800205c:	58024400 	.word	0x58024400
 8002060:	58020000 	.word	0x58020000

08002064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002064:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800209c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002068:	f7ff fda2 	bl	8001bb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800206c:	480c      	ldr	r0, [pc, #48]	@ (80020a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800206e:	490d      	ldr	r1, [pc, #52]	@ (80020a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002070:	4a0d      	ldr	r2, [pc, #52]	@ (80020a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002074:	e002      	b.n	800207c <LoopCopyDataInit>

08002076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800207a:	3304      	adds	r3, #4

0800207c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800207c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800207e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002080:	d3f9      	bcc.n	8002076 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002082:	4a0a      	ldr	r2, [pc, #40]	@ (80020ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002084:	4c0a      	ldr	r4, [pc, #40]	@ (80020b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002088:	e001      	b.n	800208e <LoopFillZerobss>

0800208a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800208a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800208c:	3204      	adds	r2, #4

0800208e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800208e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002090:	d3fb      	bcc.n	800208a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002092:	f019 fa75 	bl	801b580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002096:	f7ff f9e3 	bl	8001460 <main>
  bx  lr
 800209a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800209c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80020a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80020a4:	240002e4 	.word	0x240002e4
  ldr r2, =_sidata
 80020a8:	0801d15c 	.word	0x0801d15c
  ldr r2, =_sbss
 80020ac:	240003a8 	.word	0x240003a8
  ldr r4, =_ebss
 80020b0:	24068860 	.word	0x24068860

080020b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020b4:	e7fe      	b.n	80020b4 <ADC3_IRQHandler>
	...

080020b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020be:	2003      	movs	r0, #3
 80020c0:	f000 f947 	bl	8002352 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80020c4:	f004 fd48 	bl	8006b58 <HAL_RCC_GetSysClockFreq>
 80020c8:	4602      	mov	r2, r0
 80020ca:	4b15      	ldr	r3, [pc, #84]	@ (8002120 <HAL_Init+0x68>)
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	4913      	ldr	r1, [pc, #76]	@ (8002124 <HAL_Init+0x6c>)
 80020d6:	5ccb      	ldrb	r3, [r1, r3]
 80020d8:	f003 031f 	and.w	r3, r3, #31
 80020dc:	fa22 f303 	lsr.w	r3, r2, r3
 80020e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002120 <HAL_Init+0x68>)
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002124 <HAL_Init+0x6c>)
 80020ec:	5cd3      	ldrb	r3, [r2, r3]
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
 80020f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002128 <HAL_Init+0x70>)
 80020fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020fc:	4a0b      	ldr	r2, [pc, #44]	@ (800212c <HAL_Init+0x74>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002102:	200f      	movs	r0, #15
 8002104:	f7ff fbde 	bl	80018c4 <HAL_InitTick>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e002      	b.n	8002118 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002112:	f7ff fbb9 	bl	8001888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	58024400 	.word	0x58024400
 8002124:	0801c2f8 	.word	0x0801c2f8
 8002128:	24000008 	.word	0x24000008
 800212c:	24000004 	.word	0x24000004

08002130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002134:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <HAL_IncTick+0x20>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <HAL_IncTick+0x24>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4413      	add	r3, r2
 8002140:	4a04      	ldr	r2, [pc, #16]	@ (8002154 <HAL_IncTick+0x24>)
 8002142:	6013      	str	r3, [r2, #0]
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	24000010 	.word	0x24000010
 8002154:	240320dc 	.word	0x240320dc

08002158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return uwTick;
 800215c:	4b03      	ldr	r3, [pc, #12]	@ (800216c <HAL_GetTick+0x14>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	240320dc 	.word	0x240320dc

08002170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002178:	f7ff ffee 	bl	8002158 <HAL_GetTick>
 800217c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002188:	d005      	beq.n	8002196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800218a:	4b0a      	ldr	r3, [pc, #40]	@ (80021b4 <HAL_Delay+0x44>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4413      	add	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002196:	bf00      	nop
 8002198:	f7ff ffde 	bl	8002158 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d8f7      	bhi.n	8002198 <HAL_Delay+0x28>
  {
  }
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	24000010 	.word	0x24000010

080021b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80021bc:	4b03      	ldr	r3, [pc, #12]	@ (80021cc <HAL_GetREVID+0x14>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	0c1b      	lsrs	r3, r3, #16
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	5c001000 	.word	0x5c001000

080021d0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80021d8:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80021e0:	4904      	ldr	r1, [pc, #16]	@ (80021f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	604b      	str	r3, [r1, #4]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	58000400 	.word	0x58000400

080021f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002208:	4b0b      	ldr	r3, [pc, #44]	@ (8002238 <__NVIC_SetPriorityGrouping+0x40>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002214:	4013      	ands	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002220:	4b06      	ldr	r3, [pc, #24]	@ (800223c <__NVIC_SetPriorityGrouping+0x44>)
 8002222:	4313      	orrs	r3, r2
 8002224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002226:	4a04      	ldr	r2, [pc, #16]	@ (8002238 <__NVIC_SetPriorityGrouping+0x40>)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	60d3      	str	r3, [r2, #12]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000ed00 	.word	0xe000ed00
 800223c:	05fa0000 	.word	0x05fa0000

08002240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002244:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <__NVIC_GetPriorityGrouping+0x18>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	0a1b      	lsrs	r3, r3, #8
 800224a:	f003 0307 	and.w	r3, r3, #7
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800226a:	2b00      	cmp	r3, #0
 800226c:	db0b      	blt.n	8002286 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	f003 021f 	and.w	r2, r3, #31
 8002274:	4907      	ldr	r1, [pc, #28]	@ (8002294 <__NVIC_EnableIRQ+0x38>)
 8002276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	2001      	movs	r0, #1
 800227e:	fa00 f202 	lsl.w	r2, r0, r2
 8002282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000e100 	.word	0xe000e100

08002298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db0a      	blt.n	80022c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	490c      	ldr	r1, [pc, #48]	@ (80022e4 <__NVIC_SetPriority+0x4c>)
 80022b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022b6:	0112      	lsls	r2, r2, #4
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	440b      	add	r3, r1
 80022bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c0:	e00a      	b.n	80022d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4908      	ldr	r1, [pc, #32]	@ (80022e8 <__NVIC_SetPriority+0x50>)
 80022c8:	88fb      	ldrh	r3, [r7, #6]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	3b04      	subs	r3, #4
 80022d0:	0112      	lsls	r2, r2, #4
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	440b      	add	r3, r1
 80022d6:	761a      	strb	r2, [r3, #24]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000e100 	.word	0xe000e100
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	@ 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f1c3 0307 	rsb	r3, r3, #7
 8002306:	2b04      	cmp	r3, #4
 8002308:	bf28      	it	cs
 800230a:	2304      	movcs	r3, #4
 800230c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3304      	adds	r3, #4
 8002312:	2b06      	cmp	r3, #6
 8002314:	d902      	bls.n	800231c <NVIC_EncodePriority+0x30>
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3b03      	subs	r3, #3
 800231a:	e000      	b.n	800231e <NVIC_EncodePriority+0x32>
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43da      	mvns	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	401a      	ands	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002334:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	43d9      	mvns	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	4313      	orrs	r3, r2
         );
}
 8002346:	4618      	mov	r0, r3
 8002348:	3724      	adds	r7, #36	@ 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff ff4c 	bl	80021f8 <__NVIC_SetPriorityGrouping>
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002376:	f7ff ff63 	bl	8002240 <__NVIC_GetPriorityGrouping>
 800237a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	68b9      	ldr	r1, [r7, #8]
 8002380:	6978      	ldr	r0, [r7, #20]
 8002382:	f7ff ffb3 	bl	80022ec <NVIC_EncodePriority>
 8002386:	4602      	mov	r2, r0
 8002388:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800238c:	4611      	mov	r1, r2
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff ff82 	bl	8002298 <__NVIC_SetPriority>
}
 8002394:	bf00      	nop
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff ff56 	bl	800225c <__NVIC_EnableIRQ>
}
 80023b0:	bf00      	nop
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80023c0:	f7ff feca 	bl	8002158 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e316      	b.n	80029fe <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a66      	ldr	r2, [pc, #408]	@ (8002570 <HAL_DMA_Init+0x1b8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d04a      	beq.n	8002470 <HAL_DMA_Init+0xb8>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a65      	ldr	r2, [pc, #404]	@ (8002574 <HAL_DMA_Init+0x1bc>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d045      	beq.n	8002470 <HAL_DMA_Init+0xb8>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a63      	ldr	r2, [pc, #396]	@ (8002578 <HAL_DMA_Init+0x1c0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d040      	beq.n	8002470 <HAL_DMA_Init+0xb8>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a62      	ldr	r2, [pc, #392]	@ (800257c <HAL_DMA_Init+0x1c4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d03b      	beq.n	8002470 <HAL_DMA_Init+0xb8>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a60      	ldr	r2, [pc, #384]	@ (8002580 <HAL_DMA_Init+0x1c8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d036      	beq.n	8002470 <HAL_DMA_Init+0xb8>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a5f      	ldr	r2, [pc, #380]	@ (8002584 <HAL_DMA_Init+0x1cc>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d031      	beq.n	8002470 <HAL_DMA_Init+0xb8>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a5d      	ldr	r2, [pc, #372]	@ (8002588 <HAL_DMA_Init+0x1d0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d02c      	beq.n	8002470 <HAL_DMA_Init+0xb8>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a5c      	ldr	r2, [pc, #368]	@ (800258c <HAL_DMA_Init+0x1d4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d027      	beq.n	8002470 <HAL_DMA_Init+0xb8>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a5a      	ldr	r2, [pc, #360]	@ (8002590 <HAL_DMA_Init+0x1d8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d022      	beq.n	8002470 <HAL_DMA_Init+0xb8>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a59      	ldr	r2, [pc, #356]	@ (8002594 <HAL_DMA_Init+0x1dc>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d01d      	beq.n	8002470 <HAL_DMA_Init+0xb8>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a57      	ldr	r2, [pc, #348]	@ (8002598 <HAL_DMA_Init+0x1e0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d018      	beq.n	8002470 <HAL_DMA_Init+0xb8>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a56      	ldr	r2, [pc, #344]	@ (800259c <HAL_DMA_Init+0x1e4>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d013      	beq.n	8002470 <HAL_DMA_Init+0xb8>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a54      	ldr	r2, [pc, #336]	@ (80025a0 <HAL_DMA_Init+0x1e8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00e      	beq.n	8002470 <HAL_DMA_Init+0xb8>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a53      	ldr	r2, [pc, #332]	@ (80025a4 <HAL_DMA_Init+0x1ec>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d009      	beq.n	8002470 <HAL_DMA_Init+0xb8>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a51      	ldr	r2, [pc, #324]	@ (80025a8 <HAL_DMA_Init+0x1f0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d004      	beq.n	8002470 <HAL_DMA_Init+0xb8>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a50      	ldr	r2, [pc, #320]	@ (80025ac <HAL_DMA_Init+0x1f4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d101      	bne.n	8002474 <HAL_DMA_Init+0xbc>
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <HAL_DMA_Init+0xbe>
 8002474:	2300      	movs	r3, #0
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 813b 	beq.w	80026f2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a37      	ldr	r2, [pc, #220]	@ (8002570 <HAL_DMA_Init+0x1b8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d04a      	beq.n	800252c <HAL_DMA_Init+0x174>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a36      	ldr	r2, [pc, #216]	@ (8002574 <HAL_DMA_Init+0x1bc>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d045      	beq.n	800252c <HAL_DMA_Init+0x174>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a34      	ldr	r2, [pc, #208]	@ (8002578 <HAL_DMA_Init+0x1c0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d040      	beq.n	800252c <HAL_DMA_Init+0x174>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a33      	ldr	r2, [pc, #204]	@ (800257c <HAL_DMA_Init+0x1c4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d03b      	beq.n	800252c <HAL_DMA_Init+0x174>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a31      	ldr	r2, [pc, #196]	@ (8002580 <HAL_DMA_Init+0x1c8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d036      	beq.n	800252c <HAL_DMA_Init+0x174>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a30      	ldr	r2, [pc, #192]	@ (8002584 <HAL_DMA_Init+0x1cc>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d031      	beq.n	800252c <HAL_DMA_Init+0x174>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002588 <HAL_DMA_Init+0x1d0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d02c      	beq.n	800252c <HAL_DMA_Init+0x174>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a2d      	ldr	r2, [pc, #180]	@ (800258c <HAL_DMA_Init+0x1d4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d027      	beq.n	800252c <HAL_DMA_Init+0x174>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002590 <HAL_DMA_Init+0x1d8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d022      	beq.n	800252c <HAL_DMA_Init+0x174>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a2a      	ldr	r2, [pc, #168]	@ (8002594 <HAL_DMA_Init+0x1dc>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d01d      	beq.n	800252c <HAL_DMA_Init+0x174>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a28      	ldr	r2, [pc, #160]	@ (8002598 <HAL_DMA_Init+0x1e0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d018      	beq.n	800252c <HAL_DMA_Init+0x174>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a27      	ldr	r2, [pc, #156]	@ (800259c <HAL_DMA_Init+0x1e4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d013      	beq.n	800252c <HAL_DMA_Init+0x174>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a25      	ldr	r2, [pc, #148]	@ (80025a0 <HAL_DMA_Init+0x1e8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d00e      	beq.n	800252c <HAL_DMA_Init+0x174>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a24      	ldr	r2, [pc, #144]	@ (80025a4 <HAL_DMA_Init+0x1ec>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d009      	beq.n	800252c <HAL_DMA_Init+0x174>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a22      	ldr	r2, [pc, #136]	@ (80025a8 <HAL_DMA_Init+0x1f0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d004      	beq.n	800252c <HAL_DMA_Init+0x174>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a21      	ldr	r2, [pc, #132]	@ (80025ac <HAL_DMA_Init+0x1f4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d108      	bne.n	800253e <HAL_DMA_Init+0x186>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0201 	bic.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	e007      	b.n	800254e <HAL_DMA_Init+0x196>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0201 	bic.w	r2, r2, #1
 800254c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800254e:	e02f      	b.n	80025b0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002550:	f7ff fe02 	bl	8002158 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b05      	cmp	r3, #5
 800255c:	d928      	bls.n	80025b0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2220      	movs	r2, #32
 8002562:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2203      	movs	r2, #3
 8002568:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e246      	b.n	80029fe <HAL_DMA_Init+0x646>
 8002570:	40020010 	.word	0x40020010
 8002574:	40020028 	.word	0x40020028
 8002578:	40020040 	.word	0x40020040
 800257c:	40020058 	.word	0x40020058
 8002580:	40020070 	.word	0x40020070
 8002584:	40020088 	.word	0x40020088
 8002588:	400200a0 	.word	0x400200a0
 800258c:	400200b8 	.word	0x400200b8
 8002590:	40020410 	.word	0x40020410
 8002594:	40020428 	.word	0x40020428
 8002598:	40020440 	.word	0x40020440
 800259c:	40020458 	.word	0x40020458
 80025a0:	40020470 	.word	0x40020470
 80025a4:	40020488 	.word	0x40020488
 80025a8:	400204a0 	.word	0x400204a0
 80025ac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1c8      	bne.n	8002550 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	4b83      	ldr	r3, [pc, #524]	@ (80027d8 <HAL_DMA_Init+0x420>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80025d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002600:	2b04      	cmp	r3, #4
 8002602:	d107      	bne.n	8002614 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260c:	4313      	orrs	r3, r2
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002614:	4b71      	ldr	r3, [pc, #452]	@ (80027dc <HAL_DMA_Init+0x424>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4b71      	ldr	r3, [pc, #452]	@ (80027e0 <HAL_DMA_Init+0x428>)
 800261a:	4013      	ands	r3, r2
 800261c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002620:	d328      	bcc.n	8002674 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b28      	cmp	r3, #40	@ 0x28
 8002628:	d903      	bls.n	8002632 <HAL_DMA_Init+0x27a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002630:	d917      	bls.n	8002662 <HAL_DMA_Init+0x2aa>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b3e      	cmp	r3, #62	@ 0x3e
 8002638:	d903      	bls.n	8002642 <HAL_DMA_Init+0x28a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b42      	cmp	r3, #66	@ 0x42
 8002640:	d90f      	bls.n	8002662 <HAL_DMA_Init+0x2aa>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b46      	cmp	r3, #70	@ 0x46
 8002648:	d903      	bls.n	8002652 <HAL_DMA_Init+0x29a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b48      	cmp	r3, #72	@ 0x48
 8002650:	d907      	bls.n	8002662 <HAL_DMA_Init+0x2aa>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b4e      	cmp	r3, #78	@ 0x4e
 8002658:	d905      	bls.n	8002666 <HAL_DMA_Init+0x2ae>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b52      	cmp	r3, #82	@ 0x52
 8002660:	d801      	bhi.n	8002666 <HAL_DMA_Init+0x2ae>
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <HAL_DMA_Init+0x2b0>
 8002666:	2300      	movs	r3, #0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002672:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f023 0307 	bic.w	r3, r3, #7
 800268a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	4313      	orrs	r3, r2
 8002694:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269a:	2b04      	cmp	r3, #4
 800269c:	d117      	bne.n	80026ce <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00e      	beq.n	80026ce <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f002 fb3f 	bl	8004d34 <DMA_CheckFifoParam>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2240      	movs	r2, #64	@ 0x40
 80026c0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e197      	b.n	80029fe <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f002 fa7a 	bl	8004bd0 <DMA_CalcBaseAndBitshift>
 80026dc:	4603      	mov	r3, r0
 80026de:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	223f      	movs	r2, #63	@ 0x3f
 80026ea:	409a      	lsls	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	e0cd      	b.n	800288e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a3b      	ldr	r2, [pc, #236]	@ (80027e4 <HAL_DMA_Init+0x42c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d022      	beq.n	8002742 <HAL_DMA_Init+0x38a>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a39      	ldr	r2, [pc, #228]	@ (80027e8 <HAL_DMA_Init+0x430>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d01d      	beq.n	8002742 <HAL_DMA_Init+0x38a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a38      	ldr	r2, [pc, #224]	@ (80027ec <HAL_DMA_Init+0x434>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d018      	beq.n	8002742 <HAL_DMA_Init+0x38a>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a36      	ldr	r2, [pc, #216]	@ (80027f0 <HAL_DMA_Init+0x438>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d013      	beq.n	8002742 <HAL_DMA_Init+0x38a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a35      	ldr	r2, [pc, #212]	@ (80027f4 <HAL_DMA_Init+0x43c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d00e      	beq.n	8002742 <HAL_DMA_Init+0x38a>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a33      	ldr	r2, [pc, #204]	@ (80027f8 <HAL_DMA_Init+0x440>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d009      	beq.n	8002742 <HAL_DMA_Init+0x38a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a32      	ldr	r2, [pc, #200]	@ (80027fc <HAL_DMA_Init+0x444>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d004      	beq.n	8002742 <HAL_DMA_Init+0x38a>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a30      	ldr	r2, [pc, #192]	@ (8002800 <HAL_DMA_Init+0x448>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d101      	bne.n	8002746 <HAL_DMA_Init+0x38e>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <HAL_DMA_Init+0x390>
 8002746:	2300      	movs	r3, #0
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 8097 	beq.w	800287c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a24      	ldr	r2, [pc, #144]	@ (80027e4 <HAL_DMA_Init+0x42c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d021      	beq.n	800279c <HAL_DMA_Init+0x3e4>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a22      	ldr	r2, [pc, #136]	@ (80027e8 <HAL_DMA_Init+0x430>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d01c      	beq.n	800279c <HAL_DMA_Init+0x3e4>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a21      	ldr	r2, [pc, #132]	@ (80027ec <HAL_DMA_Init+0x434>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d017      	beq.n	800279c <HAL_DMA_Init+0x3e4>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1f      	ldr	r2, [pc, #124]	@ (80027f0 <HAL_DMA_Init+0x438>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d012      	beq.n	800279c <HAL_DMA_Init+0x3e4>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a1e      	ldr	r2, [pc, #120]	@ (80027f4 <HAL_DMA_Init+0x43c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d00d      	beq.n	800279c <HAL_DMA_Init+0x3e4>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a1c      	ldr	r2, [pc, #112]	@ (80027f8 <HAL_DMA_Init+0x440>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d008      	beq.n	800279c <HAL_DMA_Init+0x3e4>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a1b      	ldr	r2, [pc, #108]	@ (80027fc <HAL_DMA_Init+0x444>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d003      	beq.n	800279c <HAL_DMA_Init+0x3e4>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a19      	ldr	r2, [pc, #100]	@ (8002800 <HAL_DMA_Init+0x448>)
 800279a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	4b13      	ldr	r3, [pc, #76]	@ (8002804 <HAL_DMA_Init+0x44c>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b40      	cmp	r3, #64	@ 0x40
 80027c2:	d021      	beq.n	8002808 <HAL_DMA_Init+0x450>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b80      	cmp	r3, #128	@ 0x80
 80027ca:	d102      	bne.n	80027d2 <HAL_DMA_Init+0x41a>
 80027cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80027d0:	e01b      	b.n	800280a <HAL_DMA_Init+0x452>
 80027d2:	2300      	movs	r3, #0
 80027d4:	e019      	b.n	800280a <HAL_DMA_Init+0x452>
 80027d6:	bf00      	nop
 80027d8:	fe10803f 	.word	0xfe10803f
 80027dc:	5c001000 	.word	0x5c001000
 80027e0:	ffff0000 	.word	0xffff0000
 80027e4:	58025408 	.word	0x58025408
 80027e8:	5802541c 	.word	0x5802541c
 80027ec:	58025430 	.word	0x58025430
 80027f0:	58025444 	.word	0x58025444
 80027f4:	58025458 	.word	0x58025458
 80027f8:	5802546c 	.word	0x5802546c
 80027fc:	58025480 	.word	0x58025480
 8002800:	58025494 	.word	0x58025494
 8002804:	fffe000f 	.word	0xfffe000f
 8002808:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68d2      	ldr	r2, [r2, #12]
 800280e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002810:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002818:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002820:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002828:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002830:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002838:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	461a      	mov	r2, r3
 800284e:	4b6e      	ldr	r3, [pc, #440]	@ (8002a08 <HAL_DMA_Init+0x650>)
 8002850:	4413      	add	r3, r2
 8002852:	4a6e      	ldr	r2, [pc, #440]	@ (8002a0c <HAL_DMA_Init+0x654>)
 8002854:	fba2 2303 	umull	r2, r3, r2, r3
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	009a      	lsls	r2, r3, #2
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f002 f9b5 	bl	8004bd0 <DMA_CalcBaseAndBitshift>
 8002866:	4603      	mov	r3, r0
 8002868:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	2201      	movs	r2, #1
 8002874:	409a      	lsls	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	e008      	b.n	800288e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2240      	movs	r2, #64	@ 0x40
 8002880:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2203      	movs	r2, #3
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e0b7      	b.n	80029fe <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a5f      	ldr	r2, [pc, #380]	@ (8002a10 <HAL_DMA_Init+0x658>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d072      	beq.n	800297e <HAL_DMA_Init+0x5c6>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a5d      	ldr	r2, [pc, #372]	@ (8002a14 <HAL_DMA_Init+0x65c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d06d      	beq.n	800297e <HAL_DMA_Init+0x5c6>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002a18 <HAL_DMA_Init+0x660>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d068      	beq.n	800297e <HAL_DMA_Init+0x5c6>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a5a      	ldr	r2, [pc, #360]	@ (8002a1c <HAL_DMA_Init+0x664>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d063      	beq.n	800297e <HAL_DMA_Init+0x5c6>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a59      	ldr	r2, [pc, #356]	@ (8002a20 <HAL_DMA_Init+0x668>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d05e      	beq.n	800297e <HAL_DMA_Init+0x5c6>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a57      	ldr	r2, [pc, #348]	@ (8002a24 <HAL_DMA_Init+0x66c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d059      	beq.n	800297e <HAL_DMA_Init+0x5c6>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a56      	ldr	r2, [pc, #344]	@ (8002a28 <HAL_DMA_Init+0x670>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d054      	beq.n	800297e <HAL_DMA_Init+0x5c6>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a54      	ldr	r2, [pc, #336]	@ (8002a2c <HAL_DMA_Init+0x674>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d04f      	beq.n	800297e <HAL_DMA_Init+0x5c6>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a53      	ldr	r2, [pc, #332]	@ (8002a30 <HAL_DMA_Init+0x678>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d04a      	beq.n	800297e <HAL_DMA_Init+0x5c6>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a51      	ldr	r2, [pc, #324]	@ (8002a34 <HAL_DMA_Init+0x67c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d045      	beq.n	800297e <HAL_DMA_Init+0x5c6>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a50      	ldr	r2, [pc, #320]	@ (8002a38 <HAL_DMA_Init+0x680>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d040      	beq.n	800297e <HAL_DMA_Init+0x5c6>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a4e      	ldr	r2, [pc, #312]	@ (8002a3c <HAL_DMA_Init+0x684>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d03b      	beq.n	800297e <HAL_DMA_Init+0x5c6>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a4d      	ldr	r2, [pc, #308]	@ (8002a40 <HAL_DMA_Init+0x688>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d036      	beq.n	800297e <HAL_DMA_Init+0x5c6>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a4b      	ldr	r2, [pc, #300]	@ (8002a44 <HAL_DMA_Init+0x68c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d031      	beq.n	800297e <HAL_DMA_Init+0x5c6>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a4a      	ldr	r2, [pc, #296]	@ (8002a48 <HAL_DMA_Init+0x690>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d02c      	beq.n	800297e <HAL_DMA_Init+0x5c6>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a48      	ldr	r2, [pc, #288]	@ (8002a4c <HAL_DMA_Init+0x694>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d027      	beq.n	800297e <HAL_DMA_Init+0x5c6>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a47      	ldr	r2, [pc, #284]	@ (8002a50 <HAL_DMA_Init+0x698>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d022      	beq.n	800297e <HAL_DMA_Init+0x5c6>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a45      	ldr	r2, [pc, #276]	@ (8002a54 <HAL_DMA_Init+0x69c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d01d      	beq.n	800297e <HAL_DMA_Init+0x5c6>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a44      	ldr	r2, [pc, #272]	@ (8002a58 <HAL_DMA_Init+0x6a0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d018      	beq.n	800297e <HAL_DMA_Init+0x5c6>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a42      	ldr	r2, [pc, #264]	@ (8002a5c <HAL_DMA_Init+0x6a4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d013      	beq.n	800297e <HAL_DMA_Init+0x5c6>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a41      	ldr	r2, [pc, #260]	@ (8002a60 <HAL_DMA_Init+0x6a8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d00e      	beq.n	800297e <HAL_DMA_Init+0x5c6>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a3f      	ldr	r2, [pc, #252]	@ (8002a64 <HAL_DMA_Init+0x6ac>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d009      	beq.n	800297e <HAL_DMA_Init+0x5c6>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a3e      	ldr	r2, [pc, #248]	@ (8002a68 <HAL_DMA_Init+0x6b0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d004      	beq.n	800297e <HAL_DMA_Init+0x5c6>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a3c      	ldr	r2, [pc, #240]	@ (8002a6c <HAL_DMA_Init+0x6b4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d101      	bne.n	8002982 <HAL_DMA_Init+0x5ca>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_DMA_Init+0x5cc>
 8002982:	2300      	movs	r3, #0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d032      	beq.n	80029ee <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f002 fa4f 	bl	8004e2c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b80      	cmp	r3, #128	@ 0x80
 8002994:	d102      	bne.n	800299c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80029b0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d010      	beq.n	80029dc <HAL_DMA_Init+0x624>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d80c      	bhi.n	80029dc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f002 facc 	bl	8004f60 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	e008      	b.n	80029ee <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	a7fdabf8 	.word	0xa7fdabf8
 8002a0c:	cccccccd 	.word	0xcccccccd
 8002a10:	40020010 	.word	0x40020010
 8002a14:	40020028 	.word	0x40020028
 8002a18:	40020040 	.word	0x40020040
 8002a1c:	40020058 	.word	0x40020058
 8002a20:	40020070 	.word	0x40020070
 8002a24:	40020088 	.word	0x40020088
 8002a28:	400200a0 	.word	0x400200a0
 8002a2c:	400200b8 	.word	0x400200b8
 8002a30:	40020410 	.word	0x40020410
 8002a34:	40020428 	.word	0x40020428
 8002a38:	40020440 	.word	0x40020440
 8002a3c:	40020458 	.word	0x40020458
 8002a40:	40020470 	.word	0x40020470
 8002a44:	40020488 	.word	0x40020488
 8002a48:	400204a0 	.word	0x400204a0
 8002a4c:	400204b8 	.word	0x400204b8
 8002a50:	58025408 	.word	0x58025408
 8002a54:	5802541c 	.word	0x5802541c
 8002a58:	58025430 	.word	0x58025430
 8002a5c:	58025444 	.word	0x58025444
 8002a60:	58025458 	.word	0x58025458
 8002a64:	5802546c 	.word	0x5802546c
 8002a68:	58025480 	.word	0x58025480
 8002a6c:	58025494 	.word	0x58025494

08002a70 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
 8002a7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e226      	b.n	8002eda <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_DMA_Start_IT+0x2a>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e21f      	b.n	8002eda <HAL_DMA_Start_IT+0x46a>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	f040 820a 	bne.w	8002ec4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a68      	ldr	r2, [pc, #416]	@ (8002c64 <HAL_DMA_Start_IT+0x1f4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d04a      	beq.n	8002b5e <HAL_DMA_Start_IT+0xee>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a66      	ldr	r2, [pc, #408]	@ (8002c68 <HAL_DMA_Start_IT+0x1f8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d045      	beq.n	8002b5e <HAL_DMA_Start_IT+0xee>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a65      	ldr	r2, [pc, #404]	@ (8002c6c <HAL_DMA_Start_IT+0x1fc>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d040      	beq.n	8002b5e <HAL_DMA_Start_IT+0xee>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a63      	ldr	r2, [pc, #396]	@ (8002c70 <HAL_DMA_Start_IT+0x200>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d03b      	beq.n	8002b5e <HAL_DMA_Start_IT+0xee>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a62      	ldr	r2, [pc, #392]	@ (8002c74 <HAL_DMA_Start_IT+0x204>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d036      	beq.n	8002b5e <HAL_DMA_Start_IT+0xee>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a60      	ldr	r2, [pc, #384]	@ (8002c78 <HAL_DMA_Start_IT+0x208>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d031      	beq.n	8002b5e <HAL_DMA_Start_IT+0xee>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a5f      	ldr	r2, [pc, #380]	@ (8002c7c <HAL_DMA_Start_IT+0x20c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d02c      	beq.n	8002b5e <HAL_DMA_Start_IT+0xee>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a5d      	ldr	r2, [pc, #372]	@ (8002c80 <HAL_DMA_Start_IT+0x210>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d027      	beq.n	8002b5e <HAL_DMA_Start_IT+0xee>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a5c      	ldr	r2, [pc, #368]	@ (8002c84 <HAL_DMA_Start_IT+0x214>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d022      	beq.n	8002b5e <HAL_DMA_Start_IT+0xee>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a5a      	ldr	r2, [pc, #360]	@ (8002c88 <HAL_DMA_Start_IT+0x218>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d01d      	beq.n	8002b5e <HAL_DMA_Start_IT+0xee>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a59      	ldr	r2, [pc, #356]	@ (8002c8c <HAL_DMA_Start_IT+0x21c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d018      	beq.n	8002b5e <HAL_DMA_Start_IT+0xee>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a57      	ldr	r2, [pc, #348]	@ (8002c90 <HAL_DMA_Start_IT+0x220>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d013      	beq.n	8002b5e <HAL_DMA_Start_IT+0xee>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a56      	ldr	r2, [pc, #344]	@ (8002c94 <HAL_DMA_Start_IT+0x224>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d00e      	beq.n	8002b5e <HAL_DMA_Start_IT+0xee>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a54      	ldr	r2, [pc, #336]	@ (8002c98 <HAL_DMA_Start_IT+0x228>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d009      	beq.n	8002b5e <HAL_DMA_Start_IT+0xee>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a53      	ldr	r2, [pc, #332]	@ (8002c9c <HAL_DMA_Start_IT+0x22c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d004      	beq.n	8002b5e <HAL_DMA_Start_IT+0xee>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a51      	ldr	r2, [pc, #324]	@ (8002ca0 <HAL_DMA_Start_IT+0x230>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d108      	bne.n	8002b70 <HAL_DMA_Start_IT+0x100>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0201 	bic.w	r2, r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	e007      	b.n	8002b80 <HAL_DMA_Start_IT+0x110>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	68b9      	ldr	r1, [r7, #8]
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f001 fe76 	bl	8004878 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a34      	ldr	r2, [pc, #208]	@ (8002c64 <HAL_DMA_Start_IT+0x1f4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d04a      	beq.n	8002c2c <HAL_DMA_Start_IT+0x1bc>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a33      	ldr	r2, [pc, #204]	@ (8002c68 <HAL_DMA_Start_IT+0x1f8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d045      	beq.n	8002c2c <HAL_DMA_Start_IT+0x1bc>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a31      	ldr	r2, [pc, #196]	@ (8002c6c <HAL_DMA_Start_IT+0x1fc>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d040      	beq.n	8002c2c <HAL_DMA_Start_IT+0x1bc>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a30      	ldr	r2, [pc, #192]	@ (8002c70 <HAL_DMA_Start_IT+0x200>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d03b      	beq.n	8002c2c <HAL_DMA_Start_IT+0x1bc>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a2e      	ldr	r2, [pc, #184]	@ (8002c74 <HAL_DMA_Start_IT+0x204>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d036      	beq.n	8002c2c <HAL_DMA_Start_IT+0x1bc>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a2d      	ldr	r2, [pc, #180]	@ (8002c78 <HAL_DMA_Start_IT+0x208>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d031      	beq.n	8002c2c <HAL_DMA_Start_IT+0x1bc>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a2b      	ldr	r2, [pc, #172]	@ (8002c7c <HAL_DMA_Start_IT+0x20c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d02c      	beq.n	8002c2c <HAL_DMA_Start_IT+0x1bc>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a2a      	ldr	r2, [pc, #168]	@ (8002c80 <HAL_DMA_Start_IT+0x210>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d027      	beq.n	8002c2c <HAL_DMA_Start_IT+0x1bc>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a28      	ldr	r2, [pc, #160]	@ (8002c84 <HAL_DMA_Start_IT+0x214>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d022      	beq.n	8002c2c <HAL_DMA_Start_IT+0x1bc>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a27      	ldr	r2, [pc, #156]	@ (8002c88 <HAL_DMA_Start_IT+0x218>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d01d      	beq.n	8002c2c <HAL_DMA_Start_IT+0x1bc>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a25      	ldr	r2, [pc, #148]	@ (8002c8c <HAL_DMA_Start_IT+0x21c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d018      	beq.n	8002c2c <HAL_DMA_Start_IT+0x1bc>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a24      	ldr	r2, [pc, #144]	@ (8002c90 <HAL_DMA_Start_IT+0x220>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d013      	beq.n	8002c2c <HAL_DMA_Start_IT+0x1bc>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a22      	ldr	r2, [pc, #136]	@ (8002c94 <HAL_DMA_Start_IT+0x224>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00e      	beq.n	8002c2c <HAL_DMA_Start_IT+0x1bc>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a21      	ldr	r2, [pc, #132]	@ (8002c98 <HAL_DMA_Start_IT+0x228>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d009      	beq.n	8002c2c <HAL_DMA_Start_IT+0x1bc>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a1f      	ldr	r2, [pc, #124]	@ (8002c9c <HAL_DMA_Start_IT+0x22c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d004      	beq.n	8002c2c <HAL_DMA_Start_IT+0x1bc>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1e      	ldr	r2, [pc, #120]	@ (8002ca0 <HAL_DMA_Start_IT+0x230>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d101      	bne.n	8002c30 <HAL_DMA_Start_IT+0x1c0>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <HAL_DMA_Start_IT+0x1c2>
 8002c30:	2300      	movs	r3, #0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d036      	beq.n	8002ca4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f023 021e 	bic.w	r2, r3, #30
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f042 0216 	orr.w	r2, r2, #22
 8002c48:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d03e      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0208 	orr.w	r2, r2, #8
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	e035      	b.n	8002cd0 <HAL_DMA_Start_IT+0x260>
 8002c64:	40020010 	.word	0x40020010
 8002c68:	40020028 	.word	0x40020028
 8002c6c:	40020040 	.word	0x40020040
 8002c70:	40020058 	.word	0x40020058
 8002c74:	40020070 	.word	0x40020070
 8002c78:	40020088 	.word	0x40020088
 8002c7c:	400200a0 	.word	0x400200a0
 8002c80:	400200b8 	.word	0x400200b8
 8002c84:	40020410 	.word	0x40020410
 8002c88:	40020428 	.word	0x40020428
 8002c8c:	40020440 	.word	0x40020440
 8002c90:	40020458 	.word	0x40020458
 8002c94:	40020470 	.word	0x40020470
 8002c98:	40020488 	.word	0x40020488
 8002c9c:	400204a0 	.word	0x400204a0
 8002ca0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 020e 	bic.w	r2, r3, #14
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 020a 	orr.w	r2, r2, #10
 8002cb6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d007      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0204 	orr.w	r2, r2, #4
 8002cce:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a83      	ldr	r2, [pc, #524]	@ (8002ee4 <HAL_DMA_Start_IT+0x474>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d072      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x350>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a82      	ldr	r2, [pc, #520]	@ (8002ee8 <HAL_DMA_Start_IT+0x478>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d06d      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x350>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a80      	ldr	r2, [pc, #512]	@ (8002eec <HAL_DMA_Start_IT+0x47c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d068      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x350>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a7f      	ldr	r2, [pc, #508]	@ (8002ef0 <HAL_DMA_Start_IT+0x480>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d063      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x350>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a7d      	ldr	r2, [pc, #500]	@ (8002ef4 <HAL_DMA_Start_IT+0x484>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d05e      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x350>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a7c      	ldr	r2, [pc, #496]	@ (8002ef8 <HAL_DMA_Start_IT+0x488>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d059      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x350>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a7a      	ldr	r2, [pc, #488]	@ (8002efc <HAL_DMA_Start_IT+0x48c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d054      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x350>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a79      	ldr	r2, [pc, #484]	@ (8002f00 <HAL_DMA_Start_IT+0x490>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d04f      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x350>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a77      	ldr	r2, [pc, #476]	@ (8002f04 <HAL_DMA_Start_IT+0x494>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d04a      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x350>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a76      	ldr	r2, [pc, #472]	@ (8002f08 <HAL_DMA_Start_IT+0x498>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d045      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x350>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a74      	ldr	r2, [pc, #464]	@ (8002f0c <HAL_DMA_Start_IT+0x49c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d040      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x350>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a73      	ldr	r2, [pc, #460]	@ (8002f10 <HAL_DMA_Start_IT+0x4a0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d03b      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x350>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a71      	ldr	r2, [pc, #452]	@ (8002f14 <HAL_DMA_Start_IT+0x4a4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d036      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x350>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a70      	ldr	r2, [pc, #448]	@ (8002f18 <HAL_DMA_Start_IT+0x4a8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d031      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x350>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a6e      	ldr	r2, [pc, #440]	@ (8002f1c <HAL_DMA_Start_IT+0x4ac>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d02c      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x350>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a6d      	ldr	r2, [pc, #436]	@ (8002f20 <HAL_DMA_Start_IT+0x4b0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d027      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x350>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a6b      	ldr	r2, [pc, #428]	@ (8002f24 <HAL_DMA_Start_IT+0x4b4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d022      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x350>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a6a      	ldr	r2, [pc, #424]	@ (8002f28 <HAL_DMA_Start_IT+0x4b8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d01d      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x350>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a68      	ldr	r2, [pc, #416]	@ (8002f2c <HAL_DMA_Start_IT+0x4bc>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d018      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x350>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a67      	ldr	r2, [pc, #412]	@ (8002f30 <HAL_DMA_Start_IT+0x4c0>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d013      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x350>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a65      	ldr	r2, [pc, #404]	@ (8002f34 <HAL_DMA_Start_IT+0x4c4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d00e      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x350>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a64      	ldr	r2, [pc, #400]	@ (8002f38 <HAL_DMA_Start_IT+0x4c8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d009      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x350>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a62      	ldr	r2, [pc, #392]	@ (8002f3c <HAL_DMA_Start_IT+0x4cc>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d004      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x350>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a61      	ldr	r2, [pc, #388]	@ (8002f40 <HAL_DMA_Start_IT+0x4d0>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d101      	bne.n	8002dc4 <HAL_DMA_Start_IT+0x354>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <HAL_DMA_Start_IT+0x356>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d01a      	beq.n	8002e00 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d007      	beq.n	8002de8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002de6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d007      	beq.n	8002e00 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dfa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dfe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a37      	ldr	r2, [pc, #220]	@ (8002ee4 <HAL_DMA_Start_IT+0x474>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d04a      	beq.n	8002ea0 <HAL_DMA_Start_IT+0x430>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a36      	ldr	r2, [pc, #216]	@ (8002ee8 <HAL_DMA_Start_IT+0x478>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d045      	beq.n	8002ea0 <HAL_DMA_Start_IT+0x430>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a34      	ldr	r2, [pc, #208]	@ (8002eec <HAL_DMA_Start_IT+0x47c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d040      	beq.n	8002ea0 <HAL_DMA_Start_IT+0x430>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a33      	ldr	r2, [pc, #204]	@ (8002ef0 <HAL_DMA_Start_IT+0x480>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d03b      	beq.n	8002ea0 <HAL_DMA_Start_IT+0x430>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a31      	ldr	r2, [pc, #196]	@ (8002ef4 <HAL_DMA_Start_IT+0x484>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d036      	beq.n	8002ea0 <HAL_DMA_Start_IT+0x430>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a30      	ldr	r2, [pc, #192]	@ (8002ef8 <HAL_DMA_Start_IT+0x488>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d031      	beq.n	8002ea0 <HAL_DMA_Start_IT+0x430>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a2e      	ldr	r2, [pc, #184]	@ (8002efc <HAL_DMA_Start_IT+0x48c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d02c      	beq.n	8002ea0 <HAL_DMA_Start_IT+0x430>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a2d      	ldr	r2, [pc, #180]	@ (8002f00 <HAL_DMA_Start_IT+0x490>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d027      	beq.n	8002ea0 <HAL_DMA_Start_IT+0x430>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a2b      	ldr	r2, [pc, #172]	@ (8002f04 <HAL_DMA_Start_IT+0x494>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d022      	beq.n	8002ea0 <HAL_DMA_Start_IT+0x430>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8002f08 <HAL_DMA_Start_IT+0x498>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d01d      	beq.n	8002ea0 <HAL_DMA_Start_IT+0x430>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a28      	ldr	r2, [pc, #160]	@ (8002f0c <HAL_DMA_Start_IT+0x49c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d018      	beq.n	8002ea0 <HAL_DMA_Start_IT+0x430>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a27      	ldr	r2, [pc, #156]	@ (8002f10 <HAL_DMA_Start_IT+0x4a0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d013      	beq.n	8002ea0 <HAL_DMA_Start_IT+0x430>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a25      	ldr	r2, [pc, #148]	@ (8002f14 <HAL_DMA_Start_IT+0x4a4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00e      	beq.n	8002ea0 <HAL_DMA_Start_IT+0x430>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a24      	ldr	r2, [pc, #144]	@ (8002f18 <HAL_DMA_Start_IT+0x4a8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d009      	beq.n	8002ea0 <HAL_DMA_Start_IT+0x430>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a22      	ldr	r2, [pc, #136]	@ (8002f1c <HAL_DMA_Start_IT+0x4ac>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d004      	beq.n	8002ea0 <HAL_DMA_Start_IT+0x430>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a21      	ldr	r2, [pc, #132]	@ (8002f20 <HAL_DMA_Start_IT+0x4b0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d108      	bne.n	8002eb2 <HAL_DMA_Start_IT+0x442>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	e012      	b.n	8002ed8 <HAL_DMA_Start_IT+0x468>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f042 0201 	orr.w	r2, r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	e009      	b.n	8002ed8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002eca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40020010 	.word	0x40020010
 8002ee8:	40020028 	.word	0x40020028
 8002eec:	40020040 	.word	0x40020040
 8002ef0:	40020058 	.word	0x40020058
 8002ef4:	40020070 	.word	0x40020070
 8002ef8:	40020088 	.word	0x40020088
 8002efc:	400200a0 	.word	0x400200a0
 8002f00:	400200b8 	.word	0x400200b8
 8002f04:	40020410 	.word	0x40020410
 8002f08:	40020428 	.word	0x40020428
 8002f0c:	40020440 	.word	0x40020440
 8002f10:	40020458 	.word	0x40020458
 8002f14:	40020470 	.word	0x40020470
 8002f18:	40020488 	.word	0x40020488
 8002f1c:	400204a0 	.word	0x400204a0
 8002f20:	400204b8 	.word	0x400204b8
 8002f24:	58025408 	.word	0x58025408
 8002f28:	5802541c 	.word	0x5802541c
 8002f2c:	58025430 	.word	0x58025430
 8002f30:	58025444 	.word	0x58025444
 8002f34:	58025458 	.word	0x58025458
 8002f38:	5802546c 	.word	0x5802546c
 8002f3c:	58025480 	.word	0x58025480
 8002f40:	58025494 	.word	0x58025494

08002f44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002f4c:	f7ff f904 	bl	8002158 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e2dc      	b.n	8003516 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d008      	beq.n	8002f7a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2280      	movs	r2, #128	@ 0x80
 8002f6c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e2cd      	b.n	8003516 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a76      	ldr	r2, [pc, #472]	@ (8003158 <HAL_DMA_Abort+0x214>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d04a      	beq.n	800301a <HAL_DMA_Abort+0xd6>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a74      	ldr	r2, [pc, #464]	@ (800315c <HAL_DMA_Abort+0x218>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d045      	beq.n	800301a <HAL_DMA_Abort+0xd6>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a73      	ldr	r2, [pc, #460]	@ (8003160 <HAL_DMA_Abort+0x21c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d040      	beq.n	800301a <HAL_DMA_Abort+0xd6>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a71      	ldr	r2, [pc, #452]	@ (8003164 <HAL_DMA_Abort+0x220>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d03b      	beq.n	800301a <HAL_DMA_Abort+0xd6>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a70      	ldr	r2, [pc, #448]	@ (8003168 <HAL_DMA_Abort+0x224>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d036      	beq.n	800301a <HAL_DMA_Abort+0xd6>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a6e      	ldr	r2, [pc, #440]	@ (800316c <HAL_DMA_Abort+0x228>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d031      	beq.n	800301a <HAL_DMA_Abort+0xd6>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a6d      	ldr	r2, [pc, #436]	@ (8003170 <HAL_DMA_Abort+0x22c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d02c      	beq.n	800301a <HAL_DMA_Abort+0xd6>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a6b      	ldr	r2, [pc, #428]	@ (8003174 <HAL_DMA_Abort+0x230>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d027      	beq.n	800301a <HAL_DMA_Abort+0xd6>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a6a      	ldr	r2, [pc, #424]	@ (8003178 <HAL_DMA_Abort+0x234>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d022      	beq.n	800301a <HAL_DMA_Abort+0xd6>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a68      	ldr	r2, [pc, #416]	@ (800317c <HAL_DMA_Abort+0x238>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d01d      	beq.n	800301a <HAL_DMA_Abort+0xd6>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a67      	ldr	r2, [pc, #412]	@ (8003180 <HAL_DMA_Abort+0x23c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d018      	beq.n	800301a <HAL_DMA_Abort+0xd6>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a65      	ldr	r2, [pc, #404]	@ (8003184 <HAL_DMA_Abort+0x240>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d013      	beq.n	800301a <HAL_DMA_Abort+0xd6>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a64      	ldr	r2, [pc, #400]	@ (8003188 <HAL_DMA_Abort+0x244>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d00e      	beq.n	800301a <HAL_DMA_Abort+0xd6>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a62      	ldr	r2, [pc, #392]	@ (800318c <HAL_DMA_Abort+0x248>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d009      	beq.n	800301a <HAL_DMA_Abort+0xd6>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a61      	ldr	r2, [pc, #388]	@ (8003190 <HAL_DMA_Abort+0x24c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d004      	beq.n	800301a <HAL_DMA_Abort+0xd6>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a5f      	ldr	r2, [pc, #380]	@ (8003194 <HAL_DMA_Abort+0x250>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d101      	bne.n	800301e <HAL_DMA_Abort+0xda>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <HAL_DMA_Abort+0xdc>
 800301e:	2300      	movs	r3, #0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d013      	beq.n	800304c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 021e 	bic.w	r2, r2, #30
 8003032:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003042:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	e00a      	b.n	8003062 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 020e 	bic.w	r2, r2, #14
 800305a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a3c      	ldr	r2, [pc, #240]	@ (8003158 <HAL_DMA_Abort+0x214>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d072      	beq.n	8003152 <HAL_DMA_Abort+0x20e>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a3a      	ldr	r2, [pc, #232]	@ (800315c <HAL_DMA_Abort+0x218>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d06d      	beq.n	8003152 <HAL_DMA_Abort+0x20e>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a39      	ldr	r2, [pc, #228]	@ (8003160 <HAL_DMA_Abort+0x21c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d068      	beq.n	8003152 <HAL_DMA_Abort+0x20e>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a37      	ldr	r2, [pc, #220]	@ (8003164 <HAL_DMA_Abort+0x220>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d063      	beq.n	8003152 <HAL_DMA_Abort+0x20e>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a36      	ldr	r2, [pc, #216]	@ (8003168 <HAL_DMA_Abort+0x224>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d05e      	beq.n	8003152 <HAL_DMA_Abort+0x20e>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a34      	ldr	r2, [pc, #208]	@ (800316c <HAL_DMA_Abort+0x228>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d059      	beq.n	8003152 <HAL_DMA_Abort+0x20e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a33      	ldr	r2, [pc, #204]	@ (8003170 <HAL_DMA_Abort+0x22c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d054      	beq.n	8003152 <HAL_DMA_Abort+0x20e>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a31      	ldr	r2, [pc, #196]	@ (8003174 <HAL_DMA_Abort+0x230>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d04f      	beq.n	8003152 <HAL_DMA_Abort+0x20e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a30      	ldr	r2, [pc, #192]	@ (8003178 <HAL_DMA_Abort+0x234>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d04a      	beq.n	8003152 <HAL_DMA_Abort+0x20e>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a2e      	ldr	r2, [pc, #184]	@ (800317c <HAL_DMA_Abort+0x238>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d045      	beq.n	8003152 <HAL_DMA_Abort+0x20e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a2d      	ldr	r2, [pc, #180]	@ (8003180 <HAL_DMA_Abort+0x23c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d040      	beq.n	8003152 <HAL_DMA_Abort+0x20e>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003184 <HAL_DMA_Abort+0x240>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d03b      	beq.n	8003152 <HAL_DMA_Abort+0x20e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a2a      	ldr	r2, [pc, #168]	@ (8003188 <HAL_DMA_Abort+0x244>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d036      	beq.n	8003152 <HAL_DMA_Abort+0x20e>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a28      	ldr	r2, [pc, #160]	@ (800318c <HAL_DMA_Abort+0x248>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d031      	beq.n	8003152 <HAL_DMA_Abort+0x20e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a27      	ldr	r2, [pc, #156]	@ (8003190 <HAL_DMA_Abort+0x24c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d02c      	beq.n	8003152 <HAL_DMA_Abort+0x20e>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a25      	ldr	r2, [pc, #148]	@ (8003194 <HAL_DMA_Abort+0x250>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d027      	beq.n	8003152 <HAL_DMA_Abort+0x20e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a24      	ldr	r2, [pc, #144]	@ (8003198 <HAL_DMA_Abort+0x254>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d022      	beq.n	8003152 <HAL_DMA_Abort+0x20e>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a22      	ldr	r2, [pc, #136]	@ (800319c <HAL_DMA_Abort+0x258>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d01d      	beq.n	8003152 <HAL_DMA_Abort+0x20e>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a21      	ldr	r2, [pc, #132]	@ (80031a0 <HAL_DMA_Abort+0x25c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d018      	beq.n	8003152 <HAL_DMA_Abort+0x20e>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a1f      	ldr	r2, [pc, #124]	@ (80031a4 <HAL_DMA_Abort+0x260>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d013      	beq.n	8003152 <HAL_DMA_Abort+0x20e>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1e      	ldr	r2, [pc, #120]	@ (80031a8 <HAL_DMA_Abort+0x264>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d00e      	beq.n	8003152 <HAL_DMA_Abort+0x20e>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a1c      	ldr	r2, [pc, #112]	@ (80031ac <HAL_DMA_Abort+0x268>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d009      	beq.n	8003152 <HAL_DMA_Abort+0x20e>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a1b      	ldr	r2, [pc, #108]	@ (80031b0 <HAL_DMA_Abort+0x26c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d004      	beq.n	8003152 <HAL_DMA_Abort+0x20e>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a19      	ldr	r2, [pc, #100]	@ (80031b4 <HAL_DMA_Abort+0x270>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d132      	bne.n	80031b8 <HAL_DMA_Abort+0x274>
 8003152:	2301      	movs	r3, #1
 8003154:	e031      	b.n	80031ba <HAL_DMA_Abort+0x276>
 8003156:	bf00      	nop
 8003158:	40020010 	.word	0x40020010
 800315c:	40020028 	.word	0x40020028
 8003160:	40020040 	.word	0x40020040
 8003164:	40020058 	.word	0x40020058
 8003168:	40020070 	.word	0x40020070
 800316c:	40020088 	.word	0x40020088
 8003170:	400200a0 	.word	0x400200a0
 8003174:	400200b8 	.word	0x400200b8
 8003178:	40020410 	.word	0x40020410
 800317c:	40020428 	.word	0x40020428
 8003180:	40020440 	.word	0x40020440
 8003184:	40020458 	.word	0x40020458
 8003188:	40020470 	.word	0x40020470
 800318c:	40020488 	.word	0x40020488
 8003190:	400204a0 	.word	0x400204a0
 8003194:	400204b8 	.word	0x400204b8
 8003198:	58025408 	.word	0x58025408
 800319c:	5802541c 	.word	0x5802541c
 80031a0:	58025430 	.word	0x58025430
 80031a4:	58025444 	.word	0x58025444
 80031a8:	58025458 	.word	0x58025458
 80031ac:	5802546c 	.word	0x5802546c
 80031b0:	58025480 	.word	0x58025480
 80031b4:	58025494 	.word	0x58025494
 80031b8:	2300      	movs	r3, #0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d007      	beq.n	80031ce <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a6d      	ldr	r2, [pc, #436]	@ (8003388 <HAL_DMA_Abort+0x444>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d04a      	beq.n	800326e <HAL_DMA_Abort+0x32a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a6b      	ldr	r2, [pc, #428]	@ (800338c <HAL_DMA_Abort+0x448>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d045      	beq.n	800326e <HAL_DMA_Abort+0x32a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a6a      	ldr	r2, [pc, #424]	@ (8003390 <HAL_DMA_Abort+0x44c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d040      	beq.n	800326e <HAL_DMA_Abort+0x32a>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a68      	ldr	r2, [pc, #416]	@ (8003394 <HAL_DMA_Abort+0x450>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d03b      	beq.n	800326e <HAL_DMA_Abort+0x32a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a67      	ldr	r2, [pc, #412]	@ (8003398 <HAL_DMA_Abort+0x454>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d036      	beq.n	800326e <HAL_DMA_Abort+0x32a>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a65      	ldr	r2, [pc, #404]	@ (800339c <HAL_DMA_Abort+0x458>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d031      	beq.n	800326e <HAL_DMA_Abort+0x32a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a64      	ldr	r2, [pc, #400]	@ (80033a0 <HAL_DMA_Abort+0x45c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d02c      	beq.n	800326e <HAL_DMA_Abort+0x32a>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a62      	ldr	r2, [pc, #392]	@ (80033a4 <HAL_DMA_Abort+0x460>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d027      	beq.n	800326e <HAL_DMA_Abort+0x32a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a61      	ldr	r2, [pc, #388]	@ (80033a8 <HAL_DMA_Abort+0x464>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d022      	beq.n	800326e <HAL_DMA_Abort+0x32a>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a5f      	ldr	r2, [pc, #380]	@ (80033ac <HAL_DMA_Abort+0x468>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d01d      	beq.n	800326e <HAL_DMA_Abort+0x32a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a5e      	ldr	r2, [pc, #376]	@ (80033b0 <HAL_DMA_Abort+0x46c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d018      	beq.n	800326e <HAL_DMA_Abort+0x32a>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a5c      	ldr	r2, [pc, #368]	@ (80033b4 <HAL_DMA_Abort+0x470>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d013      	beq.n	800326e <HAL_DMA_Abort+0x32a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a5b      	ldr	r2, [pc, #364]	@ (80033b8 <HAL_DMA_Abort+0x474>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00e      	beq.n	800326e <HAL_DMA_Abort+0x32a>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a59      	ldr	r2, [pc, #356]	@ (80033bc <HAL_DMA_Abort+0x478>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d009      	beq.n	800326e <HAL_DMA_Abort+0x32a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a58      	ldr	r2, [pc, #352]	@ (80033c0 <HAL_DMA_Abort+0x47c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d004      	beq.n	800326e <HAL_DMA_Abort+0x32a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a56      	ldr	r2, [pc, #344]	@ (80033c4 <HAL_DMA_Abort+0x480>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d108      	bne.n	8003280 <HAL_DMA_Abort+0x33c>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0201 	bic.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	e007      	b.n	8003290 <HAL_DMA_Abort+0x34c>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0201 	bic.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003290:	e013      	b.n	80032ba <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003292:	f7fe ff61 	bl	8002158 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b05      	cmp	r3, #5
 800329e:	d90c      	bls.n	80032ba <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2220      	movs	r2, #32
 80032a4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2203      	movs	r2, #3
 80032aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e12d      	b.n	8003516 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1e5      	bne.n	8003292 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a2f      	ldr	r2, [pc, #188]	@ (8003388 <HAL_DMA_Abort+0x444>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d04a      	beq.n	8003366 <HAL_DMA_Abort+0x422>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a2d      	ldr	r2, [pc, #180]	@ (800338c <HAL_DMA_Abort+0x448>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d045      	beq.n	8003366 <HAL_DMA_Abort+0x422>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a2c      	ldr	r2, [pc, #176]	@ (8003390 <HAL_DMA_Abort+0x44c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d040      	beq.n	8003366 <HAL_DMA_Abort+0x422>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003394 <HAL_DMA_Abort+0x450>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d03b      	beq.n	8003366 <HAL_DMA_Abort+0x422>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a29      	ldr	r2, [pc, #164]	@ (8003398 <HAL_DMA_Abort+0x454>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d036      	beq.n	8003366 <HAL_DMA_Abort+0x422>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a27      	ldr	r2, [pc, #156]	@ (800339c <HAL_DMA_Abort+0x458>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d031      	beq.n	8003366 <HAL_DMA_Abort+0x422>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a26      	ldr	r2, [pc, #152]	@ (80033a0 <HAL_DMA_Abort+0x45c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d02c      	beq.n	8003366 <HAL_DMA_Abort+0x422>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a24      	ldr	r2, [pc, #144]	@ (80033a4 <HAL_DMA_Abort+0x460>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d027      	beq.n	8003366 <HAL_DMA_Abort+0x422>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a23      	ldr	r2, [pc, #140]	@ (80033a8 <HAL_DMA_Abort+0x464>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d022      	beq.n	8003366 <HAL_DMA_Abort+0x422>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a21      	ldr	r2, [pc, #132]	@ (80033ac <HAL_DMA_Abort+0x468>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d01d      	beq.n	8003366 <HAL_DMA_Abort+0x422>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a20      	ldr	r2, [pc, #128]	@ (80033b0 <HAL_DMA_Abort+0x46c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d018      	beq.n	8003366 <HAL_DMA_Abort+0x422>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1e      	ldr	r2, [pc, #120]	@ (80033b4 <HAL_DMA_Abort+0x470>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d013      	beq.n	8003366 <HAL_DMA_Abort+0x422>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a1d      	ldr	r2, [pc, #116]	@ (80033b8 <HAL_DMA_Abort+0x474>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00e      	beq.n	8003366 <HAL_DMA_Abort+0x422>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1b      	ldr	r2, [pc, #108]	@ (80033bc <HAL_DMA_Abort+0x478>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d009      	beq.n	8003366 <HAL_DMA_Abort+0x422>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1a      	ldr	r2, [pc, #104]	@ (80033c0 <HAL_DMA_Abort+0x47c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d004      	beq.n	8003366 <HAL_DMA_Abort+0x422>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a18      	ldr	r2, [pc, #96]	@ (80033c4 <HAL_DMA_Abort+0x480>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d101      	bne.n	800336a <HAL_DMA_Abort+0x426>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <HAL_DMA_Abort+0x428>
 800336a:	2300      	movs	r3, #0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d02b      	beq.n	80033c8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003374:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337a:	f003 031f 	and.w	r3, r3, #31
 800337e:	223f      	movs	r2, #63	@ 0x3f
 8003380:	409a      	lsls	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	609a      	str	r2, [r3, #8]
 8003386:	e02a      	b.n	80033de <HAL_DMA_Abort+0x49a>
 8003388:	40020010 	.word	0x40020010
 800338c:	40020028 	.word	0x40020028
 8003390:	40020040 	.word	0x40020040
 8003394:	40020058 	.word	0x40020058
 8003398:	40020070 	.word	0x40020070
 800339c:	40020088 	.word	0x40020088
 80033a0:	400200a0 	.word	0x400200a0
 80033a4:	400200b8 	.word	0x400200b8
 80033a8:	40020410 	.word	0x40020410
 80033ac:	40020428 	.word	0x40020428
 80033b0:	40020440 	.word	0x40020440
 80033b4:	40020458 	.word	0x40020458
 80033b8:	40020470 	.word	0x40020470
 80033bc:	40020488 	.word	0x40020488
 80033c0:	400204a0 	.word	0x400204a0
 80033c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033cc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	2201      	movs	r2, #1
 80033d8:	409a      	lsls	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a4f      	ldr	r2, [pc, #316]	@ (8003520 <HAL_DMA_Abort+0x5dc>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d072      	beq.n	80034ce <HAL_DMA_Abort+0x58a>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a4d      	ldr	r2, [pc, #308]	@ (8003524 <HAL_DMA_Abort+0x5e0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d06d      	beq.n	80034ce <HAL_DMA_Abort+0x58a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a4c      	ldr	r2, [pc, #304]	@ (8003528 <HAL_DMA_Abort+0x5e4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d068      	beq.n	80034ce <HAL_DMA_Abort+0x58a>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a4a      	ldr	r2, [pc, #296]	@ (800352c <HAL_DMA_Abort+0x5e8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d063      	beq.n	80034ce <HAL_DMA_Abort+0x58a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a49      	ldr	r2, [pc, #292]	@ (8003530 <HAL_DMA_Abort+0x5ec>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d05e      	beq.n	80034ce <HAL_DMA_Abort+0x58a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a47      	ldr	r2, [pc, #284]	@ (8003534 <HAL_DMA_Abort+0x5f0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d059      	beq.n	80034ce <HAL_DMA_Abort+0x58a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a46      	ldr	r2, [pc, #280]	@ (8003538 <HAL_DMA_Abort+0x5f4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d054      	beq.n	80034ce <HAL_DMA_Abort+0x58a>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a44      	ldr	r2, [pc, #272]	@ (800353c <HAL_DMA_Abort+0x5f8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d04f      	beq.n	80034ce <HAL_DMA_Abort+0x58a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a43      	ldr	r2, [pc, #268]	@ (8003540 <HAL_DMA_Abort+0x5fc>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d04a      	beq.n	80034ce <HAL_DMA_Abort+0x58a>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a41      	ldr	r2, [pc, #260]	@ (8003544 <HAL_DMA_Abort+0x600>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d045      	beq.n	80034ce <HAL_DMA_Abort+0x58a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a40      	ldr	r2, [pc, #256]	@ (8003548 <HAL_DMA_Abort+0x604>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d040      	beq.n	80034ce <HAL_DMA_Abort+0x58a>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a3e      	ldr	r2, [pc, #248]	@ (800354c <HAL_DMA_Abort+0x608>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d03b      	beq.n	80034ce <HAL_DMA_Abort+0x58a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a3d      	ldr	r2, [pc, #244]	@ (8003550 <HAL_DMA_Abort+0x60c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d036      	beq.n	80034ce <HAL_DMA_Abort+0x58a>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a3b      	ldr	r2, [pc, #236]	@ (8003554 <HAL_DMA_Abort+0x610>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d031      	beq.n	80034ce <HAL_DMA_Abort+0x58a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a3a      	ldr	r2, [pc, #232]	@ (8003558 <HAL_DMA_Abort+0x614>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d02c      	beq.n	80034ce <HAL_DMA_Abort+0x58a>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a38      	ldr	r2, [pc, #224]	@ (800355c <HAL_DMA_Abort+0x618>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d027      	beq.n	80034ce <HAL_DMA_Abort+0x58a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a37      	ldr	r2, [pc, #220]	@ (8003560 <HAL_DMA_Abort+0x61c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d022      	beq.n	80034ce <HAL_DMA_Abort+0x58a>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a35      	ldr	r2, [pc, #212]	@ (8003564 <HAL_DMA_Abort+0x620>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d01d      	beq.n	80034ce <HAL_DMA_Abort+0x58a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a34      	ldr	r2, [pc, #208]	@ (8003568 <HAL_DMA_Abort+0x624>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d018      	beq.n	80034ce <HAL_DMA_Abort+0x58a>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a32      	ldr	r2, [pc, #200]	@ (800356c <HAL_DMA_Abort+0x628>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d013      	beq.n	80034ce <HAL_DMA_Abort+0x58a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a31      	ldr	r2, [pc, #196]	@ (8003570 <HAL_DMA_Abort+0x62c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d00e      	beq.n	80034ce <HAL_DMA_Abort+0x58a>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a2f      	ldr	r2, [pc, #188]	@ (8003574 <HAL_DMA_Abort+0x630>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d009      	beq.n	80034ce <HAL_DMA_Abort+0x58a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a2e      	ldr	r2, [pc, #184]	@ (8003578 <HAL_DMA_Abort+0x634>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d004      	beq.n	80034ce <HAL_DMA_Abort+0x58a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a2c      	ldr	r2, [pc, #176]	@ (800357c <HAL_DMA_Abort+0x638>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d101      	bne.n	80034d2 <HAL_DMA_Abort+0x58e>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <HAL_DMA_Abort+0x590>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d015      	beq.n	8003504 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80034e0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00c      	beq.n	8003504 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034f8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003502:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40020010 	.word	0x40020010
 8003524:	40020028 	.word	0x40020028
 8003528:	40020040 	.word	0x40020040
 800352c:	40020058 	.word	0x40020058
 8003530:	40020070 	.word	0x40020070
 8003534:	40020088 	.word	0x40020088
 8003538:	400200a0 	.word	0x400200a0
 800353c:	400200b8 	.word	0x400200b8
 8003540:	40020410 	.word	0x40020410
 8003544:	40020428 	.word	0x40020428
 8003548:	40020440 	.word	0x40020440
 800354c:	40020458 	.word	0x40020458
 8003550:	40020470 	.word	0x40020470
 8003554:	40020488 	.word	0x40020488
 8003558:	400204a0 	.word	0x400204a0
 800355c:	400204b8 	.word	0x400204b8
 8003560:	58025408 	.word	0x58025408
 8003564:	5802541c 	.word	0x5802541c
 8003568:	58025430 	.word	0x58025430
 800356c:	58025444 	.word	0x58025444
 8003570:	58025458 	.word	0x58025458
 8003574:	5802546c 	.word	0x5802546c
 8003578:	58025480 	.word	0x58025480
 800357c:	58025494 	.word	0x58025494

08003580 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e237      	b.n	8003a02 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d004      	beq.n	80035a8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2280      	movs	r2, #128	@ 0x80
 80035a2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e22c      	b.n	8003a02 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a5c      	ldr	r2, [pc, #368]	@ (8003720 <HAL_DMA_Abort_IT+0x1a0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d04a      	beq.n	8003648 <HAL_DMA_Abort_IT+0xc8>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a5b      	ldr	r2, [pc, #364]	@ (8003724 <HAL_DMA_Abort_IT+0x1a4>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d045      	beq.n	8003648 <HAL_DMA_Abort_IT+0xc8>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a59      	ldr	r2, [pc, #356]	@ (8003728 <HAL_DMA_Abort_IT+0x1a8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d040      	beq.n	8003648 <HAL_DMA_Abort_IT+0xc8>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a58      	ldr	r2, [pc, #352]	@ (800372c <HAL_DMA_Abort_IT+0x1ac>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d03b      	beq.n	8003648 <HAL_DMA_Abort_IT+0xc8>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a56      	ldr	r2, [pc, #344]	@ (8003730 <HAL_DMA_Abort_IT+0x1b0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d036      	beq.n	8003648 <HAL_DMA_Abort_IT+0xc8>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a55      	ldr	r2, [pc, #340]	@ (8003734 <HAL_DMA_Abort_IT+0x1b4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d031      	beq.n	8003648 <HAL_DMA_Abort_IT+0xc8>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a53      	ldr	r2, [pc, #332]	@ (8003738 <HAL_DMA_Abort_IT+0x1b8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d02c      	beq.n	8003648 <HAL_DMA_Abort_IT+0xc8>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a52      	ldr	r2, [pc, #328]	@ (800373c <HAL_DMA_Abort_IT+0x1bc>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d027      	beq.n	8003648 <HAL_DMA_Abort_IT+0xc8>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a50      	ldr	r2, [pc, #320]	@ (8003740 <HAL_DMA_Abort_IT+0x1c0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d022      	beq.n	8003648 <HAL_DMA_Abort_IT+0xc8>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a4f      	ldr	r2, [pc, #316]	@ (8003744 <HAL_DMA_Abort_IT+0x1c4>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d01d      	beq.n	8003648 <HAL_DMA_Abort_IT+0xc8>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a4d      	ldr	r2, [pc, #308]	@ (8003748 <HAL_DMA_Abort_IT+0x1c8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d018      	beq.n	8003648 <HAL_DMA_Abort_IT+0xc8>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a4c      	ldr	r2, [pc, #304]	@ (800374c <HAL_DMA_Abort_IT+0x1cc>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d013      	beq.n	8003648 <HAL_DMA_Abort_IT+0xc8>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a4a      	ldr	r2, [pc, #296]	@ (8003750 <HAL_DMA_Abort_IT+0x1d0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00e      	beq.n	8003648 <HAL_DMA_Abort_IT+0xc8>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a49      	ldr	r2, [pc, #292]	@ (8003754 <HAL_DMA_Abort_IT+0x1d4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d009      	beq.n	8003648 <HAL_DMA_Abort_IT+0xc8>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a47      	ldr	r2, [pc, #284]	@ (8003758 <HAL_DMA_Abort_IT+0x1d8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d004      	beq.n	8003648 <HAL_DMA_Abort_IT+0xc8>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a46      	ldr	r2, [pc, #280]	@ (800375c <HAL_DMA_Abort_IT+0x1dc>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d101      	bne.n	800364c <HAL_DMA_Abort_IT+0xcc>
 8003648:	2301      	movs	r3, #1
 800364a:	e000      	b.n	800364e <HAL_DMA_Abort_IT+0xce>
 800364c:	2300      	movs	r3, #0
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 8086 	beq.w	8003760 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2204      	movs	r2, #4
 8003658:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a2f      	ldr	r2, [pc, #188]	@ (8003720 <HAL_DMA_Abort_IT+0x1a0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d04a      	beq.n	80036fc <HAL_DMA_Abort_IT+0x17c>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a2e      	ldr	r2, [pc, #184]	@ (8003724 <HAL_DMA_Abort_IT+0x1a4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d045      	beq.n	80036fc <HAL_DMA_Abort_IT+0x17c>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a2c      	ldr	r2, [pc, #176]	@ (8003728 <HAL_DMA_Abort_IT+0x1a8>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d040      	beq.n	80036fc <HAL_DMA_Abort_IT+0x17c>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a2b      	ldr	r2, [pc, #172]	@ (800372c <HAL_DMA_Abort_IT+0x1ac>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d03b      	beq.n	80036fc <HAL_DMA_Abort_IT+0x17c>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a29      	ldr	r2, [pc, #164]	@ (8003730 <HAL_DMA_Abort_IT+0x1b0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d036      	beq.n	80036fc <HAL_DMA_Abort_IT+0x17c>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a28      	ldr	r2, [pc, #160]	@ (8003734 <HAL_DMA_Abort_IT+0x1b4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d031      	beq.n	80036fc <HAL_DMA_Abort_IT+0x17c>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a26      	ldr	r2, [pc, #152]	@ (8003738 <HAL_DMA_Abort_IT+0x1b8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d02c      	beq.n	80036fc <HAL_DMA_Abort_IT+0x17c>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a25      	ldr	r2, [pc, #148]	@ (800373c <HAL_DMA_Abort_IT+0x1bc>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d027      	beq.n	80036fc <HAL_DMA_Abort_IT+0x17c>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a23      	ldr	r2, [pc, #140]	@ (8003740 <HAL_DMA_Abort_IT+0x1c0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d022      	beq.n	80036fc <HAL_DMA_Abort_IT+0x17c>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a22      	ldr	r2, [pc, #136]	@ (8003744 <HAL_DMA_Abort_IT+0x1c4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d01d      	beq.n	80036fc <HAL_DMA_Abort_IT+0x17c>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a20      	ldr	r2, [pc, #128]	@ (8003748 <HAL_DMA_Abort_IT+0x1c8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d018      	beq.n	80036fc <HAL_DMA_Abort_IT+0x17c>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1f      	ldr	r2, [pc, #124]	@ (800374c <HAL_DMA_Abort_IT+0x1cc>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d013      	beq.n	80036fc <HAL_DMA_Abort_IT+0x17c>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003750 <HAL_DMA_Abort_IT+0x1d0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00e      	beq.n	80036fc <HAL_DMA_Abort_IT+0x17c>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003754 <HAL_DMA_Abort_IT+0x1d4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d009      	beq.n	80036fc <HAL_DMA_Abort_IT+0x17c>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003758 <HAL_DMA_Abort_IT+0x1d8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d004      	beq.n	80036fc <HAL_DMA_Abort_IT+0x17c>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a19      	ldr	r2, [pc, #100]	@ (800375c <HAL_DMA_Abort_IT+0x1dc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d108      	bne.n	800370e <HAL_DMA_Abort_IT+0x18e>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0201 	bic.w	r2, r2, #1
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	e178      	b.n	8003a00 <HAL_DMA_Abort_IT+0x480>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0201 	bic.w	r2, r2, #1
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	e16f      	b.n	8003a00 <HAL_DMA_Abort_IT+0x480>
 8003720:	40020010 	.word	0x40020010
 8003724:	40020028 	.word	0x40020028
 8003728:	40020040 	.word	0x40020040
 800372c:	40020058 	.word	0x40020058
 8003730:	40020070 	.word	0x40020070
 8003734:	40020088 	.word	0x40020088
 8003738:	400200a0 	.word	0x400200a0
 800373c:	400200b8 	.word	0x400200b8
 8003740:	40020410 	.word	0x40020410
 8003744:	40020428 	.word	0x40020428
 8003748:	40020440 	.word	0x40020440
 800374c:	40020458 	.word	0x40020458
 8003750:	40020470 	.word	0x40020470
 8003754:	40020488 	.word	0x40020488
 8003758:	400204a0 	.word	0x400204a0
 800375c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 020e 	bic.w	r2, r2, #14
 800376e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a6c      	ldr	r2, [pc, #432]	@ (8003928 <HAL_DMA_Abort_IT+0x3a8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d04a      	beq.n	8003810 <HAL_DMA_Abort_IT+0x290>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a6b      	ldr	r2, [pc, #428]	@ (800392c <HAL_DMA_Abort_IT+0x3ac>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d045      	beq.n	8003810 <HAL_DMA_Abort_IT+0x290>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a69      	ldr	r2, [pc, #420]	@ (8003930 <HAL_DMA_Abort_IT+0x3b0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d040      	beq.n	8003810 <HAL_DMA_Abort_IT+0x290>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a68      	ldr	r2, [pc, #416]	@ (8003934 <HAL_DMA_Abort_IT+0x3b4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d03b      	beq.n	8003810 <HAL_DMA_Abort_IT+0x290>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a66      	ldr	r2, [pc, #408]	@ (8003938 <HAL_DMA_Abort_IT+0x3b8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d036      	beq.n	8003810 <HAL_DMA_Abort_IT+0x290>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a65      	ldr	r2, [pc, #404]	@ (800393c <HAL_DMA_Abort_IT+0x3bc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d031      	beq.n	8003810 <HAL_DMA_Abort_IT+0x290>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a63      	ldr	r2, [pc, #396]	@ (8003940 <HAL_DMA_Abort_IT+0x3c0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d02c      	beq.n	8003810 <HAL_DMA_Abort_IT+0x290>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a62      	ldr	r2, [pc, #392]	@ (8003944 <HAL_DMA_Abort_IT+0x3c4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d027      	beq.n	8003810 <HAL_DMA_Abort_IT+0x290>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a60      	ldr	r2, [pc, #384]	@ (8003948 <HAL_DMA_Abort_IT+0x3c8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d022      	beq.n	8003810 <HAL_DMA_Abort_IT+0x290>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a5f      	ldr	r2, [pc, #380]	@ (800394c <HAL_DMA_Abort_IT+0x3cc>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d01d      	beq.n	8003810 <HAL_DMA_Abort_IT+0x290>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003950 <HAL_DMA_Abort_IT+0x3d0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d018      	beq.n	8003810 <HAL_DMA_Abort_IT+0x290>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a5c      	ldr	r2, [pc, #368]	@ (8003954 <HAL_DMA_Abort_IT+0x3d4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d013      	beq.n	8003810 <HAL_DMA_Abort_IT+0x290>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a5a      	ldr	r2, [pc, #360]	@ (8003958 <HAL_DMA_Abort_IT+0x3d8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00e      	beq.n	8003810 <HAL_DMA_Abort_IT+0x290>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a59      	ldr	r2, [pc, #356]	@ (800395c <HAL_DMA_Abort_IT+0x3dc>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d009      	beq.n	8003810 <HAL_DMA_Abort_IT+0x290>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a57      	ldr	r2, [pc, #348]	@ (8003960 <HAL_DMA_Abort_IT+0x3e0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d004      	beq.n	8003810 <HAL_DMA_Abort_IT+0x290>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a56      	ldr	r2, [pc, #344]	@ (8003964 <HAL_DMA_Abort_IT+0x3e4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d108      	bne.n	8003822 <HAL_DMA_Abort_IT+0x2a2>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0201 	bic.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	e007      	b.n	8003832 <HAL_DMA_Abort_IT+0x2b2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0201 	bic.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a3c      	ldr	r2, [pc, #240]	@ (8003928 <HAL_DMA_Abort_IT+0x3a8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d072      	beq.n	8003922 <HAL_DMA_Abort_IT+0x3a2>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a3a      	ldr	r2, [pc, #232]	@ (800392c <HAL_DMA_Abort_IT+0x3ac>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d06d      	beq.n	8003922 <HAL_DMA_Abort_IT+0x3a2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a39      	ldr	r2, [pc, #228]	@ (8003930 <HAL_DMA_Abort_IT+0x3b0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d068      	beq.n	8003922 <HAL_DMA_Abort_IT+0x3a2>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a37      	ldr	r2, [pc, #220]	@ (8003934 <HAL_DMA_Abort_IT+0x3b4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d063      	beq.n	8003922 <HAL_DMA_Abort_IT+0x3a2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a36      	ldr	r2, [pc, #216]	@ (8003938 <HAL_DMA_Abort_IT+0x3b8>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d05e      	beq.n	8003922 <HAL_DMA_Abort_IT+0x3a2>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a34      	ldr	r2, [pc, #208]	@ (800393c <HAL_DMA_Abort_IT+0x3bc>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d059      	beq.n	8003922 <HAL_DMA_Abort_IT+0x3a2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a33      	ldr	r2, [pc, #204]	@ (8003940 <HAL_DMA_Abort_IT+0x3c0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d054      	beq.n	8003922 <HAL_DMA_Abort_IT+0x3a2>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a31      	ldr	r2, [pc, #196]	@ (8003944 <HAL_DMA_Abort_IT+0x3c4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d04f      	beq.n	8003922 <HAL_DMA_Abort_IT+0x3a2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a30      	ldr	r2, [pc, #192]	@ (8003948 <HAL_DMA_Abort_IT+0x3c8>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d04a      	beq.n	8003922 <HAL_DMA_Abort_IT+0x3a2>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a2e      	ldr	r2, [pc, #184]	@ (800394c <HAL_DMA_Abort_IT+0x3cc>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d045      	beq.n	8003922 <HAL_DMA_Abort_IT+0x3a2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a2d      	ldr	r2, [pc, #180]	@ (8003950 <HAL_DMA_Abort_IT+0x3d0>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d040      	beq.n	8003922 <HAL_DMA_Abort_IT+0x3a2>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a2b      	ldr	r2, [pc, #172]	@ (8003954 <HAL_DMA_Abort_IT+0x3d4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d03b      	beq.n	8003922 <HAL_DMA_Abort_IT+0x3a2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a2a      	ldr	r2, [pc, #168]	@ (8003958 <HAL_DMA_Abort_IT+0x3d8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d036      	beq.n	8003922 <HAL_DMA_Abort_IT+0x3a2>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a28      	ldr	r2, [pc, #160]	@ (800395c <HAL_DMA_Abort_IT+0x3dc>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d031      	beq.n	8003922 <HAL_DMA_Abort_IT+0x3a2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a27      	ldr	r2, [pc, #156]	@ (8003960 <HAL_DMA_Abort_IT+0x3e0>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d02c      	beq.n	8003922 <HAL_DMA_Abort_IT+0x3a2>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a25      	ldr	r2, [pc, #148]	@ (8003964 <HAL_DMA_Abort_IT+0x3e4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d027      	beq.n	8003922 <HAL_DMA_Abort_IT+0x3a2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a24      	ldr	r2, [pc, #144]	@ (8003968 <HAL_DMA_Abort_IT+0x3e8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d022      	beq.n	8003922 <HAL_DMA_Abort_IT+0x3a2>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a22      	ldr	r2, [pc, #136]	@ (800396c <HAL_DMA_Abort_IT+0x3ec>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d01d      	beq.n	8003922 <HAL_DMA_Abort_IT+0x3a2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a21      	ldr	r2, [pc, #132]	@ (8003970 <HAL_DMA_Abort_IT+0x3f0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d018      	beq.n	8003922 <HAL_DMA_Abort_IT+0x3a2>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003974 <HAL_DMA_Abort_IT+0x3f4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <HAL_DMA_Abort_IT+0x3a2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003978 <HAL_DMA_Abort_IT+0x3f8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00e      	beq.n	8003922 <HAL_DMA_Abort_IT+0x3a2>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a1c      	ldr	r2, [pc, #112]	@ (800397c <HAL_DMA_Abort_IT+0x3fc>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d009      	beq.n	8003922 <HAL_DMA_Abort_IT+0x3a2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a1b      	ldr	r2, [pc, #108]	@ (8003980 <HAL_DMA_Abort_IT+0x400>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d004      	beq.n	8003922 <HAL_DMA_Abort_IT+0x3a2>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a19      	ldr	r2, [pc, #100]	@ (8003984 <HAL_DMA_Abort_IT+0x404>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d132      	bne.n	8003988 <HAL_DMA_Abort_IT+0x408>
 8003922:	2301      	movs	r3, #1
 8003924:	e031      	b.n	800398a <HAL_DMA_Abort_IT+0x40a>
 8003926:	bf00      	nop
 8003928:	40020010 	.word	0x40020010
 800392c:	40020028 	.word	0x40020028
 8003930:	40020040 	.word	0x40020040
 8003934:	40020058 	.word	0x40020058
 8003938:	40020070 	.word	0x40020070
 800393c:	40020088 	.word	0x40020088
 8003940:	400200a0 	.word	0x400200a0
 8003944:	400200b8 	.word	0x400200b8
 8003948:	40020410 	.word	0x40020410
 800394c:	40020428 	.word	0x40020428
 8003950:	40020440 	.word	0x40020440
 8003954:	40020458 	.word	0x40020458
 8003958:	40020470 	.word	0x40020470
 800395c:	40020488 	.word	0x40020488
 8003960:	400204a0 	.word	0x400204a0
 8003964:	400204b8 	.word	0x400204b8
 8003968:	58025408 	.word	0x58025408
 800396c:	5802541c 	.word	0x5802541c
 8003970:	58025430 	.word	0x58025430
 8003974:	58025444 	.word	0x58025444
 8003978:	58025458 	.word	0x58025458
 800397c:	5802546c 	.word	0x5802546c
 8003980:	58025480 	.word	0x58025480
 8003984:	58025494 	.word	0x58025494
 8003988:	2300      	movs	r3, #0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d028      	beq.n	80039e0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003998:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800399c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a8:	f003 031f 	and.w	r3, r3, #31
 80039ac:	2201      	movs	r2, #1
 80039ae:	409a      	lsls	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80039bc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00c      	beq.n	80039e0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039d4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80039de:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop

08003a0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08a      	sub	sp, #40	@ 0x28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a18:	4b67      	ldr	r3, [pc, #412]	@ (8003bb8 <HAL_DMA_IRQHandler+0x1ac>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a67      	ldr	r2, [pc, #412]	@ (8003bbc <HAL_DMA_IRQHandler+0x1b0>)
 8003a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a22:	0a9b      	lsrs	r3, r3, #10
 8003a24:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a30:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a5f      	ldr	r2, [pc, #380]	@ (8003bc0 <HAL_DMA_IRQHandler+0x1b4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d04a      	beq.n	8003ade <HAL_DMA_IRQHandler+0xd2>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a5d      	ldr	r2, [pc, #372]	@ (8003bc4 <HAL_DMA_IRQHandler+0x1b8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d045      	beq.n	8003ade <HAL_DMA_IRQHandler+0xd2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a5c      	ldr	r2, [pc, #368]	@ (8003bc8 <HAL_DMA_IRQHandler+0x1bc>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d040      	beq.n	8003ade <HAL_DMA_IRQHandler+0xd2>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a5a      	ldr	r2, [pc, #360]	@ (8003bcc <HAL_DMA_IRQHandler+0x1c0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d03b      	beq.n	8003ade <HAL_DMA_IRQHandler+0xd2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a59      	ldr	r2, [pc, #356]	@ (8003bd0 <HAL_DMA_IRQHandler+0x1c4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d036      	beq.n	8003ade <HAL_DMA_IRQHandler+0xd2>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a57      	ldr	r2, [pc, #348]	@ (8003bd4 <HAL_DMA_IRQHandler+0x1c8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d031      	beq.n	8003ade <HAL_DMA_IRQHandler+0xd2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a56      	ldr	r2, [pc, #344]	@ (8003bd8 <HAL_DMA_IRQHandler+0x1cc>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d02c      	beq.n	8003ade <HAL_DMA_IRQHandler+0xd2>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a54      	ldr	r2, [pc, #336]	@ (8003bdc <HAL_DMA_IRQHandler+0x1d0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d027      	beq.n	8003ade <HAL_DMA_IRQHandler+0xd2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a53      	ldr	r2, [pc, #332]	@ (8003be0 <HAL_DMA_IRQHandler+0x1d4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d022      	beq.n	8003ade <HAL_DMA_IRQHandler+0xd2>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a51      	ldr	r2, [pc, #324]	@ (8003be4 <HAL_DMA_IRQHandler+0x1d8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d01d      	beq.n	8003ade <HAL_DMA_IRQHandler+0xd2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a50      	ldr	r2, [pc, #320]	@ (8003be8 <HAL_DMA_IRQHandler+0x1dc>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d018      	beq.n	8003ade <HAL_DMA_IRQHandler+0xd2>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a4e      	ldr	r2, [pc, #312]	@ (8003bec <HAL_DMA_IRQHandler+0x1e0>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d013      	beq.n	8003ade <HAL_DMA_IRQHandler+0xd2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a4d      	ldr	r2, [pc, #308]	@ (8003bf0 <HAL_DMA_IRQHandler+0x1e4>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d00e      	beq.n	8003ade <HAL_DMA_IRQHandler+0xd2>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a4b      	ldr	r2, [pc, #300]	@ (8003bf4 <HAL_DMA_IRQHandler+0x1e8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d009      	beq.n	8003ade <HAL_DMA_IRQHandler+0xd2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a4a      	ldr	r2, [pc, #296]	@ (8003bf8 <HAL_DMA_IRQHandler+0x1ec>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d004      	beq.n	8003ade <HAL_DMA_IRQHandler+0xd2>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a48      	ldr	r2, [pc, #288]	@ (8003bfc <HAL_DMA_IRQHandler+0x1f0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d101      	bne.n	8003ae2 <HAL_DMA_IRQHandler+0xd6>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <HAL_DMA_IRQHandler+0xd8>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 842b 	beq.w	8004340 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aee:	f003 031f 	and.w	r3, r3, #31
 8003af2:	2208      	movs	r2, #8
 8003af4:	409a      	lsls	r2, r3
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	4013      	ands	r3, r2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 80a2 	beq.w	8003c44 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a2e      	ldr	r2, [pc, #184]	@ (8003bc0 <HAL_DMA_IRQHandler+0x1b4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d04a      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x194>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a2d      	ldr	r2, [pc, #180]	@ (8003bc4 <HAL_DMA_IRQHandler+0x1b8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d045      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x194>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a2b      	ldr	r2, [pc, #172]	@ (8003bc8 <HAL_DMA_IRQHandler+0x1bc>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d040      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x194>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a2a      	ldr	r2, [pc, #168]	@ (8003bcc <HAL_DMA_IRQHandler+0x1c0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d03b      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x194>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a28      	ldr	r2, [pc, #160]	@ (8003bd0 <HAL_DMA_IRQHandler+0x1c4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d036      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x194>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a27      	ldr	r2, [pc, #156]	@ (8003bd4 <HAL_DMA_IRQHandler+0x1c8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d031      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x194>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a25      	ldr	r2, [pc, #148]	@ (8003bd8 <HAL_DMA_IRQHandler+0x1cc>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d02c      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x194>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a24      	ldr	r2, [pc, #144]	@ (8003bdc <HAL_DMA_IRQHandler+0x1d0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d027      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x194>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a22      	ldr	r2, [pc, #136]	@ (8003be0 <HAL_DMA_IRQHandler+0x1d4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d022      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x194>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a21      	ldr	r2, [pc, #132]	@ (8003be4 <HAL_DMA_IRQHandler+0x1d8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d01d      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x194>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a1f      	ldr	r2, [pc, #124]	@ (8003be8 <HAL_DMA_IRQHandler+0x1dc>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d018      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x194>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a1e      	ldr	r2, [pc, #120]	@ (8003bec <HAL_DMA_IRQHandler+0x1e0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d013      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x194>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8003bf0 <HAL_DMA_IRQHandler+0x1e4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00e      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x194>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a1b      	ldr	r2, [pc, #108]	@ (8003bf4 <HAL_DMA_IRQHandler+0x1e8>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d009      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x194>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a19      	ldr	r2, [pc, #100]	@ (8003bf8 <HAL_DMA_IRQHandler+0x1ec>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d004      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x194>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a18      	ldr	r2, [pc, #96]	@ (8003bfc <HAL_DMA_IRQHandler+0x1f0>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d12f      	bne.n	8003c00 <HAL_DMA_IRQHandler+0x1f4>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	bf14      	ite	ne
 8003bae:	2301      	movne	r3, #1
 8003bb0:	2300      	moveq	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	e02e      	b.n	8003c14 <HAL_DMA_IRQHandler+0x208>
 8003bb6:	bf00      	nop
 8003bb8:	24000004 	.word	0x24000004
 8003bbc:	1b4e81b5 	.word	0x1b4e81b5
 8003bc0:	40020010 	.word	0x40020010
 8003bc4:	40020028 	.word	0x40020028
 8003bc8:	40020040 	.word	0x40020040
 8003bcc:	40020058 	.word	0x40020058
 8003bd0:	40020070 	.word	0x40020070
 8003bd4:	40020088 	.word	0x40020088
 8003bd8:	400200a0 	.word	0x400200a0
 8003bdc:	400200b8 	.word	0x400200b8
 8003be0:	40020410 	.word	0x40020410
 8003be4:	40020428 	.word	0x40020428
 8003be8:	40020440 	.word	0x40020440
 8003bec:	40020458 	.word	0x40020458
 8003bf0:	40020470 	.word	0x40020470
 8003bf4:	40020488 	.word	0x40020488
 8003bf8:	400204a0 	.word	0x400204a0
 8003bfc:	400204b8 	.word	0x400204b8
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	bf14      	ite	ne
 8003c0e:	2301      	movne	r3, #1
 8003c10:	2300      	moveq	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d015      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0204 	bic.w	r2, r2, #4
 8003c26:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2c:	f003 031f 	and.w	r3, r3, #31
 8003c30:	2208      	movs	r2, #8
 8003c32:	409a      	lsls	r2, r3
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c3c:	f043 0201 	orr.w	r2, r3, #1
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c48:	f003 031f 	and.w	r3, r3, #31
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d06e      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a69      	ldr	r2, [pc, #420]	@ (8003e04 <HAL_DMA_IRQHandler+0x3f8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d04a      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x2ee>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a67      	ldr	r2, [pc, #412]	@ (8003e08 <HAL_DMA_IRQHandler+0x3fc>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d045      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x2ee>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a66      	ldr	r2, [pc, #408]	@ (8003e0c <HAL_DMA_IRQHandler+0x400>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d040      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x2ee>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a64      	ldr	r2, [pc, #400]	@ (8003e10 <HAL_DMA_IRQHandler+0x404>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d03b      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x2ee>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a63      	ldr	r2, [pc, #396]	@ (8003e14 <HAL_DMA_IRQHandler+0x408>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d036      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x2ee>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a61      	ldr	r2, [pc, #388]	@ (8003e18 <HAL_DMA_IRQHandler+0x40c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d031      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x2ee>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a60      	ldr	r2, [pc, #384]	@ (8003e1c <HAL_DMA_IRQHandler+0x410>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d02c      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x2ee>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a5e      	ldr	r2, [pc, #376]	@ (8003e20 <HAL_DMA_IRQHandler+0x414>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d027      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x2ee>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a5d      	ldr	r2, [pc, #372]	@ (8003e24 <HAL_DMA_IRQHandler+0x418>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d022      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x2ee>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a5b      	ldr	r2, [pc, #364]	@ (8003e28 <HAL_DMA_IRQHandler+0x41c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d01d      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x2ee>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a5a      	ldr	r2, [pc, #360]	@ (8003e2c <HAL_DMA_IRQHandler+0x420>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d018      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x2ee>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a58      	ldr	r2, [pc, #352]	@ (8003e30 <HAL_DMA_IRQHandler+0x424>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d013      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x2ee>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a57      	ldr	r2, [pc, #348]	@ (8003e34 <HAL_DMA_IRQHandler+0x428>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00e      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x2ee>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a55      	ldr	r2, [pc, #340]	@ (8003e38 <HAL_DMA_IRQHandler+0x42c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d009      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x2ee>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a54      	ldr	r2, [pc, #336]	@ (8003e3c <HAL_DMA_IRQHandler+0x430>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d004      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x2ee>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a52      	ldr	r2, [pc, #328]	@ (8003e40 <HAL_DMA_IRQHandler+0x434>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d10a      	bne.n	8003d10 <HAL_DMA_IRQHandler+0x304>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bf14      	ite	ne
 8003d08:	2301      	movne	r3, #1
 8003d0a:	2300      	moveq	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	e003      	b.n	8003d18 <HAL_DMA_IRQHandler+0x30c>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2300      	movs	r3, #0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00d      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d20:	f003 031f 	and.w	r3, r3, #31
 8003d24:	2201      	movs	r2, #1
 8003d26:	409a      	lsls	r2, r3
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d30:	f043 0202 	orr.w	r2, r3, #2
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d3c:	f003 031f 	and.w	r3, r3, #31
 8003d40:	2204      	movs	r2, #4
 8003d42:	409a      	lsls	r2, r3
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 808f 	beq.w	8003e6c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a2c      	ldr	r2, [pc, #176]	@ (8003e04 <HAL_DMA_IRQHandler+0x3f8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d04a      	beq.n	8003dee <HAL_DMA_IRQHandler+0x3e2>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a2a      	ldr	r2, [pc, #168]	@ (8003e08 <HAL_DMA_IRQHandler+0x3fc>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d045      	beq.n	8003dee <HAL_DMA_IRQHandler+0x3e2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a29      	ldr	r2, [pc, #164]	@ (8003e0c <HAL_DMA_IRQHandler+0x400>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d040      	beq.n	8003dee <HAL_DMA_IRQHandler+0x3e2>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a27      	ldr	r2, [pc, #156]	@ (8003e10 <HAL_DMA_IRQHandler+0x404>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d03b      	beq.n	8003dee <HAL_DMA_IRQHandler+0x3e2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a26      	ldr	r2, [pc, #152]	@ (8003e14 <HAL_DMA_IRQHandler+0x408>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d036      	beq.n	8003dee <HAL_DMA_IRQHandler+0x3e2>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a24      	ldr	r2, [pc, #144]	@ (8003e18 <HAL_DMA_IRQHandler+0x40c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d031      	beq.n	8003dee <HAL_DMA_IRQHandler+0x3e2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a23      	ldr	r2, [pc, #140]	@ (8003e1c <HAL_DMA_IRQHandler+0x410>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d02c      	beq.n	8003dee <HAL_DMA_IRQHandler+0x3e2>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a21      	ldr	r2, [pc, #132]	@ (8003e20 <HAL_DMA_IRQHandler+0x414>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d027      	beq.n	8003dee <HAL_DMA_IRQHandler+0x3e2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a20      	ldr	r2, [pc, #128]	@ (8003e24 <HAL_DMA_IRQHandler+0x418>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d022      	beq.n	8003dee <HAL_DMA_IRQHandler+0x3e2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a1e      	ldr	r2, [pc, #120]	@ (8003e28 <HAL_DMA_IRQHandler+0x41c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d01d      	beq.n	8003dee <HAL_DMA_IRQHandler+0x3e2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a1d      	ldr	r2, [pc, #116]	@ (8003e2c <HAL_DMA_IRQHandler+0x420>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d018      	beq.n	8003dee <HAL_DMA_IRQHandler+0x3e2>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8003e30 <HAL_DMA_IRQHandler+0x424>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d013      	beq.n	8003dee <HAL_DMA_IRQHandler+0x3e2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1a      	ldr	r2, [pc, #104]	@ (8003e34 <HAL_DMA_IRQHandler+0x428>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00e      	beq.n	8003dee <HAL_DMA_IRQHandler+0x3e2>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a18      	ldr	r2, [pc, #96]	@ (8003e38 <HAL_DMA_IRQHandler+0x42c>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d009      	beq.n	8003dee <HAL_DMA_IRQHandler+0x3e2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a17      	ldr	r2, [pc, #92]	@ (8003e3c <HAL_DMA_IRQHandler+0x430>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d004      	beq.n	8003dee <HAL_DMA_IRQHandler+0x3e2>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a15      	ldr	r2, [pc, #84]	@ (8003e40 <HAL_DMA_IRQHandler+0x434>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d12a      	bne.n	8003e44 <HAL_DMA_IRQHandler+0x438>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	bf14      	ite	ne
 8003dfc:	2301      	movne	r3, #1
 8003dfe:	2300      	moveq	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	e023      	b.n	8003e4c <HAL_DMA_IRQHandler+0x440>
 8003e04:	40020010 	.word	0x40020010
 8003e08:	40020028 	.word	0x40020028
 8003e0c:	40020040 	.word	0x40020040
 8003e10:	40020058 	.word	0x40020058
 8003e14:	40020070 	.word	0x40020070
 8003e18:	40020088 	.word	0x40020088
 8003e1c:	400200a0 	.word	0x400200a0
 8003e20:	400200b8 	.word	0x400200b8
 8003e24:	40020410 	.word	0x40020410
 8003e28:	40020428 	.word	0x40020428
 8003e2c:	40020440 	.word	0x40020440
 8003e30:	40020458 	.word	0x40020458
 8003e34:	40020470 	.word	0x40020470
 8003e38:	40020488 	.word	0x40020488
 8003e3c:	400204a0 	.word	0x400204a0
 8003e40:	400204b8 	.word	0x400204b8
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00d      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	2204      	movs	r2, #4
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e64:	f043 0204 	orr.w	r2, r3, #4
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e70:	f003 031f 	and.w	r3, r3, #31
 8003e74:	2210      	movs	r2, #16
 8003e76:	409a      	lsls	r2, r3
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 80a6 	beq.w	8003fce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a85      	ldr	r2, [pc, #532]	@ (800409c <HAL_DMA_IRQHandler+0x690>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d04a      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x516>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a83      	ldr	r2, [pc, #524]	@ (80040a0 <HAL_DMA_IRQHandler+0x694>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d045      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x516>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a82      	ldr	r2, [pc, #520]	@ (80040a4 <HAL_DMA_IRQHandler+0x698>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d040      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x516>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a80      	ldr	r2, [pc, #512]	@ (80040a8 <HAL_DMA_IRQHandler+0x69c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d03b      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x516>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a7f      	ldr	r2, [pc, #508]	@ (80040ac <HAL_DMA_IRQHandler+0x6a0>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d036      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x516>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a7d      	ldr	r2, [pc, #500]	@ (80040b0 <HAL_DMA_IRQHandler+0x6a4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d031      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x516>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a7c      	ldr	r2, [pc, #496]	@ (80040b4 <HAL_DMA_IRQHandler+0x6a8>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d02c      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x516>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a7a      	ldr	r2, [pc, #488]	@ (80040b8 <HAL_DMA_IRQHandler+0x6ac>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d027      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x516>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a79      	ldr	r2, [pc, #484]	@ (80040bc <HAL_DMA_IRQHandler+0x6b0>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d022      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x516>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a77      	ldr	r2, [pc, #476]	@ (80040c0 <HAL_DMA_IRQHandler+0x6b4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01d      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x516>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a76      	ldr	r2, [pc, #472]	@ (80040c4 <HAL_DMA_IRQHandler+0x6b8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d018      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x516>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a74      	ldr	r2, [pc, #464]	@ (80040c8 <HAL_DMA_IRQHandler+0x6bc>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x516>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a73      	ldr	r2, [pc, #460]	@ (80040cc <HAL_DMA_IRQHandler+0x6c0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00e      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x516>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a71      	ldr	r2, [pc, #452]	@ (80040d0 <HAL_DMA_IRQHandler+0x6c4>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d009      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x516>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a70      	ldr	r2, [pc, #448]	@ (80040d4 <HAL_DMA_IRQHandler+0x6c8>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d004      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x516>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a6e      	ldr	r2, [pc, #440]	@ (80040d8 <HAL_DMA_IRQHandler+0x6cc>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d10a      	bne.n	8003f38 <HAL_DMA_IRQHandler+0x52c>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf14      	ite	ne
 8003f30:	2301      	movne	r3, #1
 8003f32:	2300      	moveq	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	e009      	b.n	8003f4c <HAL_DMA_IRQHandler+0x540>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	bf14      	ite	ne
 8003f46:	2301      	movne	r3, #1
 8003f48:	2300      	moveq	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d03e      	beq.n	8003fce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f54:	f003 031f 	and.w	r3, r3, #31
 8003f58:	2210      	movs	r2, #16
 8003f5a:	409a      	lsls	r2, r3
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d018      	beq.n	8003fa0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d108      	bne.n	8003f8e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d024      	beq.n	8003fce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	4798      	blx	r3
 8003f8c:	e01f      	b.n	8003fce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d01b      	beq.n	8003fce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	4798      	blx	r3
 8003f9e:	e016      	b.n	8003fce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d107      	bne.n	8003fbe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0208 	bic.w	r2, r2, #8
 8003fbc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd2:	f003 031f 	and.w	r3, r3, #31
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	409a      	lsls	r2, r3
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 8110 	beq.w	8004204 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a2c      	ldr	r2, [pc, #176]	@ (800409c <HAL_DMA_IRQHandler+0x690>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d04a      	beq.n	8004084 <HAL_DMA_IRQHandler+0x678>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a2b      	ldr	r2, [pc, #172]	@ (80040a0 <HAL_DMA_IRQHandler+0x694>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d045      	beq.n	8004084 <HAL_DMA_IRQHandler+0x678>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a29      	ldr	r2, [pc, #164]	@ (80040a4 <HAL_DMA_IRQHandler+0x698>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d040      	beq.n	8004084 <HAL_DMA_IRQHandler+0x678>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a28      	ldr	r2, [pc, #160]	@ (80040a8 <HAL_DMA_IRQHandler+0x69c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d03b      	beq.n	8004084 <HAL_DMA_IRQHandler+0x678>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a26      	ldr	r2, [pc, #152]	@ (80040ac <HAL_DMA_IRQHandler+0x6a0>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d036      	beq.n	8004084 <HAL_DMA_IRQHandler+0x678>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a25      	ldr	r2, [pc, #148]	@ (80040b0 <HAL_DMA_IRQHandler+0x6a4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d031      	beq.n	8004084 <HAL_DMA_IRQHandler+0x678>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a23      	ldr	r2, [pc, #140]	@ (80040b4 <HAL_DMA_IRQHandler+0x6a8>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d02c      	beq.n	8004084 <HAL_DMA_IRQHandler+0x678>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a22      	ldr	r2, [pc, #136]	@ (80040b8 <HAL_DMA_IRQHandler+0x6ac>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d027      	beq.n	8004084 <HAL_DMA_IRQHandler+0x678>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a20      	ldr	r2, [pc, #128]	@ (80040bc <HAL_DMA_IRQHandler+0x6b0>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d022      	beq.n	8004084 <HAL_DMA_IRQHandler+0x678>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a1f      	ldr	r2, [pc, #124]	@ (80040c0 <HAL_DMA_IRQHandler+0x6b4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d01d      	beq.n	8004084 <HAL_DMA_IRQHandler+0x678>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a1d      	ldr	r2, [pc, #116]	@ (80040c4 <HAL_DMA_IRQHandler+0x6b8>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d018      	beq.n	8004084 <HAL_DMA_IRQHandler+0x678>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a1c      	ldr	r2, [pc, #112]	@ (80040c8 <HAL_DMA_IRQHandler+0x6bc>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d013      	beq.n	8004084 <HAL_DMA_IRQHandler+0x678>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a1a      	ldr	r2, [pc, #104]	@ (80040cc <HAL_DMA_IRQHandler+0x6c0>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00e      	beq.n	8004084 <HAL_DMA_IRQHandler+0x678>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a19      	ldr	r2, [pc, #100]	@ (80040d0 <HAL_DMA_IRQHandler+0x6c4>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d009      	beq.n	8004084 <HAL_DMA_IRQHandler+0x678>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a17      	ldr	r2, [pc, #92]	@ (80040d4 <HAL_DMA_IRQHandler+0x6c8>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d004      	beq.n	8004084 <HAL_DMA_IRQHandler+0x678>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a16      	ldr	r2, [pc, #88]	@ (80040d8 <HAL_DMA_IRQHandler+0x6cc>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d12b      	bne.n	80040dc <HAL_DMA_IRQHandler+0x6d0>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0310 	and.w	r3, r3, #16
 800408e:	2b00      	cmp	r3, #0
 8004090:	bf14      	ite	ne
 8004092:	2301      	movne	r3, #1
 8004094:	2300      	moveq	r3, #0
 8004096:	b2db      	uxtb	r3, r3
 8004098:	e02a      	b.n	80040f0 <HAL_DMA_IRQHandler+0x6e4>
 800409a:	bf00      	nop
 800409c:	40020010 	.word	0x40020010
 80040a0:	40020028 	.word	0x40020028
 80040a4:	40020040 	.word	0x40020040
 80040a8:	40020058 	.word	0x40020058
 80040ac:	40020070 	.word	0x40020070
 80040b0:	40020088 	.word	0x40020088
 80040b4:	400200a0 	.word	0x400200a0
 80040b8:	400200b8 	.word	0x400200b8
 80040bc:	40020410 	.word	0x40020410
 80040c0:	40020428 	.word	0x40020428
 80040c4:	40020440 	.word	0x40020440
 80040c8:	40020458 	.word	0x40020458
 80040cc:	40020470 	.word	0x40020470
 80040d0:	40020488 	.word	0x40020488
 80040d4:	400204a0 	.word	0x400204a0
 80040d8:	400204b8 	.word	0x400204b8
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	bf14      	ite	ne
 80040ea:	2301      	movne	r3, #1
 80040ec:	2300      	moveq	r3, #0
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 8087 	beq.w	8004204 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040fa:	f003 031f 	and.w	r3, r3, #31
 80040fe:	2220      	movs	r2, #32
 8004100:	409a      	lsls	r2, r3
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b04      	cmp	r3, #4
 8004110:	d139      	bne.n	8004186 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0216 	bic.w	r2, r2, #22
 8004120:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004130:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004136:	2b00      	cmp	r3, #0
 8004138:	d103      	bne.n	8004142 <HAL_DMA_IRQHandler+0x736>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800413e:	2b00      	cmp	r3, #0
 8004140:	d007      	beq.n	8004152 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0208 	bic.w	r2, r2, #8
 8004150:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004156:	f003 031f 	and.w	r3, r3, #31
 800415a:	223f      	movs	r2, #63	@ 0x3f
 800415c:	409a      	lsls	r2, r3
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 834a 	beq.w	8004810 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	4798      	blx	r3
          }
          return;
 8004184:	e344      	b.n	8004810 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d018      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d108      	bne.n	80041b4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d02c      	beq.n	8004204 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	4798      	blx	r3
 80041b2:	e027      	b.n	8004204 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d023      	beq.n	8004204 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	4798      	blx	r3
 80041c4:	e01e      	b.n	8004204 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10f      	bne.n	80041f4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0210 	bic.w	r2, r2, #16
 80041e2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8306 	beq.w	800481a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 8088 	beq.w	800432c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2204      	movs	r2, #4
 8004220:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a7a      	ldr	r2, [pc, #488]	@ (8004414 <HAL_DMA_IRQHandler+0xa08>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d04a      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x8b8>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a79      	ldr	r2, [pc, #484]	@ (8004418 <HAL_DMA_IRQHandler+0xa0c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d045      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x8b8>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a77      	ldr	r2, [pc, #476]	@ (800441c <HAL_DMA_IRQHandler+0xa10>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d040      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x8b8>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a76      	ldr	r2, [pc, #472]	@ (8004420 <HAL_DMA_IRQHandler+0xa14>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d03b      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x8b8>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a74      	ldr	r2, [pc, #464]	@ (8004424 <HAL_DMA_IRQHandler+0xa18>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d036      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x8b8>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a73      	ldr	r2, [pc, #460]	@ (8004428 <HAL_DMA_IRQHandler+0xa1c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d031      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x8b8>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a71      	ldr	r2, [pc, #452]	@ (800442c <HAL_DMA_IRQHandler+0xa20>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d02c      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x8b8>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a70      	ldr	r2, [pc, #448]	@ (8004430 <HAL_DMA_IRQHandler+0xa24>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d027      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x8b8>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a6e      	ldr	r2, [pc, #440]	@ (8004434 <HAL_DMA_IRQHandler+0xa28>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d022      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x8b8>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a6d      	ldr	r2, [pc, #436]	@ (8004438 <HAL_DMA_IRQHandler+0xa2c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d01d      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x8b8>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a6b      	ldr	r2, [pc, #428]	@ (800443c <HAL_DMA_IRQHandler+0xa30>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d018      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x8b8>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a6a      	ldr	r2, [pc, #424]	@ (8004440 <HAL_DMA_IRQHandler+0xa34>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d013      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x8b8>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a68      	ldr	r2, [pc, #416]	@ (8004444 <HAL_DMA_IRQHandler+0xa38>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d00e      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x8b8>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a67      	ldr	r2, [pc, #412]	@ (8004448 <HAL_DMA_IRQHandler+0xa3c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d009      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x8b8>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a65      	ldr	r2, [pc, #404]	@ (800444c <HAL_DMA_IRQHandler+0xa40>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d004      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x8b8>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a64      	ldr	r2, [pc, #400]	@ (8004450 <HAL_DMA_IRQHandler+0xa44>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d108      	bne.n	80042d6 <HAL_DMA_IRQHandler+0x8ca>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0201 	bic.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	e007      	b.n	80042e6 <HAL_DMA_IRQHandler+0x8da>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0201 	bic.w	r2, r2, #1
 80042e4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3301      	adds	r3, #1
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d307      	bcc.n	8004302 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1f2      	bne.n	80042e6 <HAL_DMA_IRQHandler+0x8da>
 8004300:	e000      	b.n	8004304 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004302:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d004      	beq.n	800431c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2203      	movs	r2, #3
 8004316:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800431a:	e003      	b.n	8004324 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 8272 	beq.w	800481a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	4798      	blx	r3
 800433e:	e26c      	b.n	800481a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a43      	ldr	r2, [pc, #268]	@ (8004454 <HAL_DMA_IRQHandler+0xa48>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d022      	beq.n	8004390 <HAL_DMA_IRQHandler+0x984>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a42      	ldr	r2, [pc, #264]	@ (8004458 <HAL_DMA_IRQHandler+0xa4c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d01d      	beq.n	8004390 <HAL_DMA_IRQHandler+0x984>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a40      	ldr	r2, [pc, #256]	@ (800445c <HAL_DMA_IRQHandler+0xa50>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d018      	beq.n	8004390 <HAL_DMA_IRQHandler+0x984>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a3f      	ldr	r2, [pc, #252]	@ (8004460 <HAL_DMA_IRQHandler+0xa54>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d013      	beq.n	8004390 <HAL_DMA_IRQHandler+0x984>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a3d      	ldr	r2, [pc, #244]	@ (8004464 <HAL_DMA_IRQHandler+0xa58>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d00e      	beq.n	8004390 <HAL_DMA_IRQHandler+0x984>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a3c      	ldr	r2, [pc, #240]	@ (8004468 <HAL_DMA_IRQHandler+0xa5c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d009      	beq.n	8004390 <HAL_DMA_IRQHandler+0x984>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a3a      	ldr	r2, [pc, #232]	@ (800446c <HAL_DMA_IRQHandler+0xa60>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d004      	beq.n	8004390 <HAL_DMA_IRQHandler+0x984>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a39      	ldr	r2, [pc, #228]	@ (8004470 <HAL_DMA_IRQHandler+0xa64>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d101      	bne.n	8004394 <HAL_DMA_IRQHandler+0x988>
 8004390:	2301      	movs	r3, #1
 8004392:	e000      	b.n	8004396 <HAL_DMA_IRQHandler+0x98a>
 8004394:	2300      	movs	r3, #0
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 823f 	beq.w	800481a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	2204      	movs	r2, #4
 80043ae:	409a      	lsls	r2, r3
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 80cd 	beq.w	8004554 <HAL_DMA_IRQHandler+0xb48>
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 80c7 	beq.w	8004554 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ca:	f003 031f 	and.w	r3, r3, #31
 80043ce:	2204      	movs	r2, #4
 80043d0:	409a      	lsls	r2, r3
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d049      	beq.n	8004474 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d109      	bne.n	80043fe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 8210 	beq.w	8004814 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043fc:	e20a      	b.n	8004814 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 8206 	beq.w	8004814 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004410:	e200      	b.n	8004814 <HAL_DMA_IRQHandler+0xe08>
 8004412:	bf00      	nop
 8004414:	40020010 	.word	0x40020010
 8004418:	40020028 	.word	0x40020028
 800441c:	40020040 	.word	0x40020040
 8004420:	40020058 	.word	0x40020058
 8004424:	40020070 	.word	0x40020070
 8004428:	40020088 	.word	0x40020088
 800442c:	400200a0 	.word	0x400200a0
 8004430:	400200b8 	.word	0x400200b8
 8004434:	40020410 	.word	0x40020410
 8004438:	40020428 	.word	0x40020428
 800443c:	40020440 	.word	0x40020440
 8004440:	40020458 	.word	0x40020458
 8004444:	40020470 	.word	0x40020470
 8004448:	40020488 	.word	0x40020488
 800444c:	400204a0 	.word	0x400204a0
 8004450:	400204b8 	.word	0x400204b8
 8004454:	58025408 	.word	0x58025408
 8004458:	5802541c 	.word	0x5802541c
 800445c:	58025430 	.word	0x58025430
 8004460:	58025444 	.word	0x58025444
 8004464:	58025458 	.word	0x58025458
 8004468:	5802546c 	.word	0x5802546c
 800446c:	58025480 	.word	0x58025480
 8004470:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f003 0320 	and.w	r3, r3, #32
 800447a:	2b00      	cmp	r3, #0
 800447c:	d160      	bne.n	8004540 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a7f      	ldr	r2, [pc, #508]	@ (8004680 <HAL_DMA_IRQHandler+0xc74>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d04a      	beq.n	800451e <HAL_DMA_IRQHandler+0xb12>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a7d      	ldr	r2, [pc, #500]	@ (8004684 <HAL_DMA_IRQHandler+0xc78>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d045      	beq.n	800451e <HAL_DMA_IRQHandler+0xb12>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a7c      	ldr	r2, [pc, #496]	@ (8004688 <HAL_DMA_IRQHandler+0xc7c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d040      	beq.n	800451e <HAL_DMA_IRQHandler+0xb12>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a7a      	ldr	r2, [pc, #488]	@ (800468c <HAL_DMA_IRQHandler+0xc80>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d03b      	beq.n	800451e <HAL_DMA_IRQHandler+0xb12>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a79      	ldr	r2, [pc, #484]	@ (8004690 <HAL_DMA_IRQHandler+0xc84>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d036      	beq.n	800451e <HAL_DMA_IRQHandler+0xb12>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a77      	ldr	r2, [pc, #476]	@ (8004694 <HAL_DMA_IRQHandler+0xc88>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d031      	beq.n	800451e <HAL_DMA_IRQHandler+0xb12>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a76      	ldr	r2, [pc, #472]	@ (8004698 <HAL_DMA_IRQHandler+0xc8c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d02c      	beq.n	800451e <HAL_DMA_IRQHandler+0xb12>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a74      	ldr	r2, [pc, #464]	@ (800469c <HAL_DMA_IRQHandler+0xc90>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d027      	beq.n	800451e <HAL_DMA_IRQHandler+0xb12>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a73      	ldr	r2, [pc, #460]	@ (80046a0 <HAL_DMA_IRQHandler+0xc94>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d022      	beq.n	800451e <HAL_DMA_IRQHandler+0xb12>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a71      	ldr	r2, [pc, #452]	@ (80046a4 <HAL_DMA_IRQHandler+0xc98>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d01d      	beq.n	800451e <HAL_DMA_IRQHandler+0xb12>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a70      	ldr	r2, [pc, #448]	@ (80046a8 <HAL_DMA_IRQHandler+0xc9c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d018      	beq.n	800451e <HAL_DMA_IRQHandler+0xb12>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a6e      	ldr	r2, [pc, #440]	@ (80046ac <HAL_DMA_IRQHandler+0xca0>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <HAL_DMA_IRQHandler+0xb12>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a6d      	ldr	r2, [pc, #436]	@ (80046b0 <HAL_DMA_IRQHandler+0xca4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00e      	beq.n	800451e <HAL_DMA_IRQHandler+0xb12>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a6b      	ldr	r2, [pc, #428]	@ (80046b4 <HAL_DMA_IRQHandler+0xca8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d009      	beq.n	800451e <HAL_DMA_IRQHandler+0xb12>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a6a      	ldr	r2, [pc, #424]	@ (80046b8 <HAL_DMA_IRQHandler+0xcac>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d004      	beq.n	800451e <HAL_DMA_IRQHandler+0xb12>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a68      	ldr	r2, [pc, #416]	@ (80046bc <HAL_DMA_IRQHandler+0xcb0>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d108      	bne.n	8004530 <HAL_DMA_IRQHandler+0xb24>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0208 	bic.w	r2, r2, #8
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	e007      	b.n	8004540 <HAL_DMA_IRQHandler+0xb34>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0204 	bic.w	r2, r2, #4
 800453e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 8165 	beq.w	8004814 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004552:	e15f      	b.n	8004814 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004558:	f003 031f 	and.w	r3, r3, #31
 800455c:	2202      	movs	r2, #2
 800455e:	409a      	lsls	r2, r3
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	4013      	ands	r3, r2
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 80c5 	beq.w	80046f4 <HAL_DMA_IRQHandler+0xce8>
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 80bf 	beq.w	80046f4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800457a:	f003 031f 	and.w	r3, r3, #31
 800457e:	2202      	movs	r2, #2
 8004580:	409a      	lsls	r2, r3
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d018      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d109      	bne.n	80045ae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 813a 	beq.w	8004818 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045ac:	e134      	b.n	8004818 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 8130 	beq.w	8004818 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045c0:	e12a      	b.n	8004818 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f040 8089 	bne.w	80046e0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a2b      	ldr	r2, [pc, #172]	@ (8004680 <HAL_DMA_IRQHandler+0xc74>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d04a      	beq.n	800466e <HAL_DMA_IRQHandler+0xc62>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a29      	ldr	r2, [pc, #164]	@ (8004684 <HAL_DMA_IRQHandler+0xc78>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d045      	beq.n	800466e <HAL_DMA_IRQHandler+0xc62>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a28      	ldr	r2, [pc, #160]	@ (8004688 <HAL_DMA_IRQHandler+0xc7c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d040      	beq.n	800466e <HAL_DMA_IRQHandler+0xc62>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a26      	ldr	r2, [pc, #152]	@ (800468c <HAL_DMA_IRQHandler+0xc80>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d03b      	beq.n	800466e <HAL_DMA_IRQHandler+0xc62>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a25      	ldr	r2, [pc, #148]	@ (8004690 <HAL_DMA_IRQHandler+0xc84>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d036      	beq.n	800466e <HAL_DMA_IRQHandler+0xc62>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a23      	ldr	r2, [pc, #140]	@ (8004694 <HAL_DMA_IRQHandler+0xc88>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d031      	beq.n	800466e <HAL_DMA_IRQHandler+0xc62>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a22      	ldr	r2, [pc, #136]	@ (8004698 <HAL_DMA_IRQHandler+0xc8c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d02c      	beq.n	800466e <HAL_DMA_IRQHandler+0xc62>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a20      	ldr	r2, [pc, #128]	@ (800469c <HAL_DMA_IRQHandler+0xc90>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d027      	beq.n	800466e <HAL_DMA_IRQHandler+0xc62>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a1f      	ldr	r2, [pc, #124]	@ (80046a0 <HAL_DMA_IRQHandler+0xc94>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d022      	beq.n	800466e <HAL_DMA_IRQHandler+0xc62>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a1d      	ldr	r2, [pc, #116]	@ (80046a4 <HAL_DMA_IRQHandler+0xc98>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d01d      	beq.n	800466e <HAL_DMA_IRQHandler+0xc62>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a1c      	ldr	r2, [pc, #112]	@ (80046a8 <HAL_DMA_IRQHandler+0xc9c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d018      	beq.n	800466e <HAL_DMA_IRQHandler+0xc62>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a1a      	ldr	r2, [pc, #104]	@ (80046ac <HAL_DMA_IRQHandler+0xca0>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d013      	beq.n	800466e <HAL_DMA_IRQHandler+0xc62>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a19      	ldr	r2, [pc, #100]	@ (80046b0 <HAL_DMA_IRQHandler+0xca4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d00e      	beq.n	800466e <HAL_DMA_IRQHandler+0xc62>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a17      	ldr	r2, [pc, #92]	@ (80046b4 <HAL_DMA_IRQHandler+0xca8>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d009      	beq.n	800466e <HAL_DMA_IRQHandler+0xc62>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a16      	ldr	r2, [pc, #88]	@ (80046b8 <HAL_DMA_IRQHandler+0xcac>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d004      	beq.n	800466e <HAL_DMA_IRQHandler+0xc62>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a14      	ldr	r2, [pc, #80]	@ (80046bc <HAL_DMA_IRQHandler+0xcb0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d128      	bne.n	80046c0 <HAL_DMA_IRQHandler+0xcb4>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0214 	bic.w	r2, r2, #20
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	e027      	b.n	80046d0 <HAL_DMA_IRQHandler+0xcc4>
 8004680:	40020010 	.word	0x40020010
 8004684:	40020028 	.word	0x40020028
 8004688:	40020040 	.word	0x40020040
 800468c:	40020058 	.word	0x40020058
 8004690:	40020070 	.word	0x40020070
 8004694:	40020088 	.word	0x40020088
 8004698:	400200a0 	.word	0x400200a0
 800469c:	400200b8 	.word	0x400200b8
 80046a0:	40020410 	.word	0x40020410
 80046a4:	40020428 	.word	0x40020428
 80046a8:	40020440 	.word	0x40020440
 80046ac:	40020458 	.word	0x40020458
 80046b0:	40020470 	.word	0x40020470
 80046b4:	40020488 	.word	0x40020488
 80046b8:	400204a0 	.word	0x400204a0
 80046bc:	400204b8 	.word	0x400204b8
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 020a 	bic.w	r2, r2, #10
 80046ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 8097 	beq.w	8004818 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046f2:	e091      	b.n	8004818 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046f8:	f003 031f 	and.w	r3, r3, #31
 80046fc:	2208      	movs	r2, #8
 80046fe:	409a      	lsls	r2, r3
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	4013      	ands	r3, r2
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 8088 	beq.w	800481a <HAL_DMA_IRQHandler+0xe0e>
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 8082 	beq.w	800481a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a41      	ldr	r2, [pc, #260]	@ (8004820 <HAL_DMA_IRQHandler+0xe14>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d04a      	beq.n	80047b6 <HAL_DMA_IRQHandler+0xdaa>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a3f      	ldr	r2, [pc, #252]	@ (8004824 <HAL_DMA_IRQHandler+0xe18>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d045      	beq.n	80047b6 <HAL_DMA_IRQHandler+0xdaa>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a3e      	ldr	r2, [pc, #248]	@ (8004828 <HAL_DMA_IRQHandler+0xe1c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d040      	beq.n	80047b6 <HAL_DMA_IRQHandler+0xdaa>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a3c      	ldr	r2, [pc, #240]	@ (800482c <HAL_DMA_IRQHandler+0xe20>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d03b      	beq.n	80047b6 <HAL_DMA_IRQHandler+0xdaa>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a3b      	ldr	r2, [pc, #236]	@ (8004830 <HAL_DMA_IRQHandler+0xe24>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d036      	beq.n	80047b6 <HAL_DMA_IRQHandler+0xdaa>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a39      	ldr	r2, [pc, #228]	@ (8004834 <HAL_DMA_IRQHandler+0xe28>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d031      	beq.n	80047b6 <HAL_DMA_IRQHandler+0xdaa>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a38      	ldr	r2, [pc, #224]	@ (8004838 <HAL_DMA_IRQHandler+0xe2c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d02c      	beq.n	80047b6 <HAL_DMA_IRQHandler+0xdaa>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a36      	ldr	r2, [pc, #216]	@ (800483c <HAL_DMA_IRQHandler+0xe30>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d027      	beq.n	80047b6 <HAL_DMA_IRQHandler+0xdaa>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a35      	ldr	r2, [pc, #212]	@ (8004840 <HAL_DMA_IRQHandler+0xe34>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d022      	beq.n	80047b6 <HAL_DMA_IRQHandler+0xdaa>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a33      	ldr	r2, [pc, #204]	@ (8004844 <HAL_DMA_IRQHandler+0xe38>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d01d      	beq.n	80047b6 <HAL_DMA_IRQHandler+0xdaa>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a32      	ldr	r2, [pc, #200]	@ (8004848 <HAL_DMA_IRQHandler+0xe3c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d018      	beq.n	80047b6 <HAL_DMA_IRQHandler+0xdaa>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a30      	ldr	r2, [pc, #192]	@ (800484c <HAL_DMA_IRQHandler+0xe40>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d013      	beq.n	80047b6 <HAL_DMA_IRQHandler+0xdaa>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a2f      	ldr	r2, [pc, #188]	@ (8004850 <HAL_DMA_IRQHandler+0xe44>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d00e      	beq.n	80047b6 <HAL_DMA_IRQHandler+0xdaa>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a2d      	ldr	r2, [pc, #180]	@ (8004854 <HAL_DMA_IRQHandler+0xe48>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d009      	beq.n	80047b6 <HAL_DMA_IRQHandler+0xdaa>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a2c      	ldr	r2, [pc, #176]	@ (8004858 <HAL_DMA_IRQHandler+0xe4c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d004      	beq.n	80047b6 <HAL_DMA_IRQHandler+0xdaa>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a2a      	ldr	r2, [pc, #168]	@ (800485c <HAL_DMA_IRQHandler+0xe50>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d108      	bne.n	80047c8 <HAL_DMA_IRQHandler+0xdbc>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 021c 	bic.w	r2, r2, #28
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	e007      	b.n	80047d8 <HAL_DMA_IRQHandler+0xdcc>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 020e 	bic.w	r2, r2, #14
 80047d6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047dc:	f003 031f 	and.w	r3, r3, #31
 80047e0:	2201      	movs	r2, #1
 80047e2:	409a      	lsls	r2, r3
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004802:	2b00      	cmp	r3, #0
 8004804:	d009      	beq.n	800481a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	4798      	blx	r3
 800480e:	e004      	b.n	800481a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004810:	bf00      	nop
 8004812:	e002      	b.n	800481a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004814:	bf00      	nop
 8004816:	e000      	b.n	800481a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004818:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800481a:	3728      	adds	r7, #40	@ 0x28
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40020010 	.word	0x40020010
 8004824:	40020028 	.word	0x40020028
 8004828:	40020040 	.word	0x40020040
 800482c:	40020058 	.word	0x40020058
 8004830:	40020070 	.word	0x40020070
 8004834:	40020088 	.word	0x40020088
 8004838:	400200a0 	.word	0x400200a0
 800483c:	400200b8 	.word	0x400200b8
 8004840:	40020410 	.word	0x40020410
 8004844:	40020428 	.word	0x40020428
 8004848:	40020440 	.word	0x40020440
 800484c:	40020458 	.word	0x40020458
 8004850:	40020470 	.word	0x40020470
 8004854:	40020488 	.word	0x40020488
 8004858:	400204a0 	.word	0x400204a0
 800485c:	400204b8 	.word	0x400204b8

08004860 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800486c:	4618      	mov	r0, r3
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800488a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004890:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a7f      	ldr	r2, [pc, #508]	@ (8004a94 <DMA_SetConfig+0x21c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d072      	beq.n	8004982 <DMA_SetConfig+0x10a>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a7d      	ldr	r2, [pc, #500]	@ (8004a98 <DMA_SetConfig+0x220>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d06d      	beq.n	8004982 <DMA_SetConfig+0x10a>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a7c      	ldr	r2, [pc, #496]	@ (8004a9c <DMA_SetConfig+0x224>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d068      	beq.n	8004982 <DMA_SetConfig+0x10a>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a7a      	ldr	r2, [pc, #488]	@ (8004aa0 <DMA_SetConfig+0x228>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d063      	beq.n	8004982 <DMA_SetConfig+0x10a>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a79      	ldr	r2, [pc, #484]	@ (8004aa4 <DMA_SetConfig+0x22c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d05e      	beq.n	8004982 <DMA_SetConfig+0x10a>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a77      	ldr	r2, [pc, #476]	@ (8004aa8 <DMA_SetConfig+0x230>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d059      	beq.n	8004982 <DMA_SetConfig+0x10a>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a76      	ldr	r2, [pc, #472]	@ (8004aac <DMA_SetConfig+0x234>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d054      	beq.n	8004982 <DMA_SetConfig+0x10a>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a74      	ldr	r2, [pc, #464]	@ (8004ab0 <DMA_SetConfig+0x238>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d04f      	beq.n	8004982 <DMA_SetConfig+0x10a>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a73      	ldr	r2, [pc, #460]	@ (8004ab4 <DMA_SetConfig+0x23c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d04a      	beq.n	8004982 <DMA_SetConfig+0x10a>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a71      	ldr	r2, [pc, #452]	@ (8004ab8 <DMA_SetConfig+0x240>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d045      	beq.n	8004982 <DMA_SetConfig+0x10a>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a70      	ldr	r2, [pc, #448]	@ (8004abc <DMA_SetConfig+0x244>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d040      	beq.n	8004982 <DMA_SetConfig+0x10a>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a6e      	ldr	r2, [pc, #440]	@ (8004ac0 <DMA_SetConfig+0x248>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d03b      	beq.n	8004982 <DMA_SetConfig+0x10a>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a6d      	ldr	r2, [pc, #436]	@ (8004ac4 <DMA_SetConfig+0x24c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d036      	beq.n	8004982 <DMA_SetConfig+0x10a>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a6b      	ldr	r2, [pc, #428]	@ (8004ac8 <DMA_SetConfig+0x250>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d031      	beq.n	8004982 <DMA_SetConfig+0x10a>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a6a      	ldr	r2, [pc, #424]	@ (8004acc <DMA_SetConfig+0x254>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d02c      	beq.n	8004982 <DMA_SetConfig+0x10a>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a68      	ldr	r2, [pc, #416]	@ (8004ad0 <DMA_SetConfig+0x258>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d027      	beq.n	8004982 <DMA_SetConfig+0x10a>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a67      	ldr	r2, [pc, #412]	@ (8004ad4 <DMA_SetConfig+0x25c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d022      	beq.n	8004982 <DMA_SetConfig+0x10a>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a65      	ldr	r2, [pc, #404]	@ (8004ad8 <DMA_SetConfig+0x260>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d01d      	beq.n	8004982 <DMA_SetConfig+0x10a>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a64      	ldr	r2, [pc, #400]	@ (8004adc <DMA_SetConfig+0x264>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d018      	beq.n	8004982 <DMA_SetConfig+0x10a>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a62      	ldr	r2, [pc, #392]	@ (8004ae0 <DMA_SetConfig+0x268>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d013      	beq.n	8004982 <DMA_SetConfig+0x10a>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a61      	ldr	r2, [pc, #388]	@ (8004ae4 <DMA_SetConfig+0x26c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00e      	beq.n	8004982 <DMA_SetConfig+0x10a>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a5f      	ldr	r2, [pc, #380]	@ (8004ae8 <DMA_SetConfig+0x270>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d009      	beq.n	8004982 <DMA_SetConfig+0x10a>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a5e      	ldr	r2, [pc, #376]	@ (8004aec <DMA_SetConfig+0x274>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d004      	beq.n	8004982 <DMA_SetConfig+0x10a>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a5c      	ldr	r2, [pc, #368]	@ (8004af0 <DMA_SetConfig+0x278>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d101      	bne.n	8004986 <DMA_SetConfig+0x10e>
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <DMA_SetConfig+0x110>
 8004986:	2300      	movs	r3, #0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00d      	beq.n	80049a8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004994:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800499a:	2b00      	cmp	r3, #0
 800499c:	d004      	beq.n	80049a8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80049a6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a39      	ldr	r2, [pc, #228]	@ (8004a94 <DMA_SetConfig+0x21c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d04a      	beq.n	8004a48 <DMA_SetConfig+0x1d0>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a38      	ldr	r2, [pc, #224]	@ (8004a98 <DMA_SetConfig+0x220>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d045      	beq.n	8004a48 <DMA_SetConfig+0x1d0>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a36      	ldr	r2, [pc, #216]	@ (8004a9c <DMA_SetConfig+0x224>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d040      	beq.n	8004a48 <DMA_SetConfig+0x1d0>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a35      	ldr	r2, [pc, #212]	@ (8004aa0 <DMA_SetConfig+0x228>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d03b      	beq.n	8004a48 <DMA_SetConfig+0x1d0>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a33      	ldr	r2, [pc, #204]	@ (8004aa4 <DMA_SetConfig+0x22c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d036      	beq.n	8004a48 <DMA_SetConfig+0x1d0>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a32      	ldr	r2, [pc, #200]	@ (8004aa8 <DMA_SetConfig+0x230>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d031      	beq.n	8004a48 <DMA_SetConfig+0x1d0>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a30      	ldr	r2, [pc, #192]	@ (8004aac <DMA_SetConfig+0x234>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d02c      	beq.n	8004a48 <DMA_SetConfig+0x1d0>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a2f      	ldr	r2, [pc, #188]	@ (8004ab0 <DMA_SetConfig+0x238>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d027      	beq.n	8004a48 <DMA_SetConfig+0x1d0>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a2d      	ldr	r2, [pc, #180]	@ (8004ab4 <DMA_SetConfig+0x23c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d022      	beq.n	8004a48 <DMA_SetConfig+0x1d0>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a2c      	ldr	r2, [pc, #176]	@ (8004ab8 <DMA_SetConfig+0x240>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d01d      	beq.n	8004a48 <DMA_SetConfig+0x1d0>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a2a      	ldr	r2, [pc, #168]	@ (8004abc <DMA_SetConfig+0x244>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d018      	beq.n	8004a48 <DMA_SetConfig+0x1d0>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a29      	ldr	r2, [pc, #164]	@ (8004ac0 <DMA_SetConfig+0x248>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d013      	beq.n	8004a48 <DMA_SetConfig+0x1d0>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a27      	ldr	r2, [pc, #156]	@ (8004ac4 <DMA_SetConfig+0x24c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d00e      	beq.n	8004a48 <DMA_SetConfig+0x1d0>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a26      	ldr	r2, [pc, #152]	@ (8004ac8 <DMA_SetConfig+0x250>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d009      	beq.n	8004a48 <DMA_SetConfig+0x1d0>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a24      	ldr	r2, [pc, #144]	@ (8004acc <DMA_SetConfig+0x254>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d004      	beq.n	8004a48 <DMA_SetConfig+0x1d0>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a23      	ldr	r2, [pc, #140]	@ (8004ad0 <DMA_SetConfig+0x258>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d101      	bne.n	8004a4c <DMA_SetConfig+0x1d4>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e000      	b.n	8004a4e <DMA_SetConfig+0x1d6>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d059      	beq.n	8004b06 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a56:	f003 031f 	and.w	r3, r3, #31
 8004a5a:	223f      	movs	r2, #63	@ 0x3f
 8004a5c:	409a      	lsls	r2, r3
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a70:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	2b40      	cmp	r3, #64	@ 0x40
 8004a80:	d138      	bne.n	8004af4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a92:	e086      	b.n	8004ba2 <DMA_SetConfig+0x32a>
 8004a94:	40020010 	.word	0x40020010
 8004a98:	40020028 	.word	0x40020028
 8004a9c:	40020040 	.word	0x40020040
 8004aa0:	40020058 	.word	0x40020058
 8004aa4:	40020070 	.word	0x40020070
 8004aa8:	40020088 	.word	0x40020088
 8004aac:	400200a0 	.word	0x400200a0
 8004ab0:	400200b8 	.word	0x400200b8
 8004ab4:	40020410 	.word	0x40020410
 8004ab8:	40020428 	.word	0x40020428
 8004abc:	40020440 	.word	0x40020440
 8004ac0:	40020458 	.word	0x40020458
 8004ac4:	40020470 	.word	0x40020470
 8004ac8:	40020488 	.word	0x40020488
 8004acc:	400204a0 	.word	0x400204a0
 8004ad0:	400204b8 	.word	0x400204b8
 8004ad4:	58025408 	.word	0x58025408
 8004ad8:	5802541c 	.word	0x5802541c
 8004adc:	58025430 	.word	0x58025430
 8004ae0:	58025444 	.word	0x58025444
 8004ae4:	58025458 	.word	0x58025458
 8004ae8:	5802546c 	.word	0x5802546c
 8004aec:	58025480 	.word	0x58025480
 8004af0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	60da      	str	r2, [r3, #12]
}
 8004b04:	e04d      	b.n	8004ba2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a29      	ldr	r2, [pc, #164]	@ (8004bb0 <DMA_SetConfig+0x338>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d022      	beq.n	8004b56 <DMA_SetConfig+0x2de>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a27      	ldr	r2, [pc, #156]	@ (8004bb4 <DMA_SetConfig+0x33c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d01d      	beq.n	8004b56 <DMA_SetConfig+0x2de>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a26      	ldr	r2, [pc, #152]	@ (8004bb8 <DMA_SetConfig+0x340>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d018      	beq.n	8004b56 <DMA_SetConfig+0x2de>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a24      	ldr	r2, [pc, #144]	@ (8004bbc <DMA_SetConfig+0x344>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d013      	beq.n	8004b56 <DMA_SetConfig+0x2de>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a23      	ldr	r2, [pc, #140]	@ (8004bc0 <DMA_SetConfig+0x348>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d00e      	beq.n	8004b56 <DMA_SetConfig+0x2de>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a21      	ldr	r2, [pc, #132]	@ (8004bc4 <DMA_SetConfig+0x34c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d009      	beq.n	8004b56 <DMA_SetConfig+0x2de>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a20      	ldr	r2, [pc, #128]	@ (8004bc8 <DMA_SetConfig+0x350>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d004      	beq.n	8004b56 <DMA_SetConfig+0x2de>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a1e      	ldr	r2, [pc, #120]	@ (8004bcc <DMA_SetConfig+0x354>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d101      	bne.n	8004b5a <DMA_SetConfig+0x2e2>
 8004b56:	2301      	movs	r3, #1
 8004b58:	e000      	b.n	8004b5c <DMA_SetConfig+0x2e4>
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d020      	beq.n	8004ba2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b64:	f003 031f 	and.w	r3, r3, #31
 8004b68:	2201      	movs	r2, #1
 8004b6a:	409a      	lsls	r2, r3
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	2b40      	cmp	r3, #64	@ 0x40
 8004b7e:	d108      	bne.n	8004b92 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	60da      	str	r2, [r3, #12]
}
 8004b90:	e007      	b.n	8004ba2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	60da      	str	r2, [r3, #12]
}
 8004ba2:	bf00      	nop
 8004ba4:	371c      	adds	r7, #28
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	58025408 	.word	0x58025408
 8004bb4:	5802541c 	.word	0x5802541c
 8004bb8:	58025430 	.word	0x58025430
 8004bbc:	58025444 	.word	0x58025444
 8004bc0:	58025458 	.word	0x58025458
 8004bc4:	5802546c 	.word	0x5802546c
 8004bc8:	58025480 	.word	0x58025480
 8004bcc:	58025494 	.word	0x58025494

08004bd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a42      	ldr	r2, [pc, #264]	@ (8004ce8 <DMA_CalcBaseAndBitshift+0x118>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d04a      	beq.n	8004c78 <DMA_CalcBaseAndBitshift+0xa8>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a41      	ldr	r2, [pc, #260]	@ (8004cec <DMA_CalcBaseAndBitshift+0x11c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d045      	beq.n	8004c78 <DMA_CalcBaseAndBitshift+0xa8>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a3f      	ldr	r2, [pc, #252]	@ (8004cf0 <DMA_CalcBaseAndBitshift+0x120>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d040      	beq.n	8004c78 <DMA_CalcBaseAndBitshift+0xa8>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a3e      	ldr	r2, [pc, #248]	@ (8004cf4 <DMA_CalcBaseAndBitshift+0x124>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d03b      	beq.n	8004c78 <DMA_CalcBaseAndBitshift+0xa8>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a3c      	ldr	r2, [pc, #240]	@ (8004cf8 <DMA_CalcBaseAndBitshift+0x128>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d036      	beq.n	8004c78 <DMA_CalcBaseAndBitshift+0xa8>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a3b      	ldr	r2, [pc, #236]	@ (8004cfc <DMA_CalcBaseAndBitshift+0x12c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d031      	beq.n	8004c78 <DMA_CalcBaseAndBitshift+0xa8>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a39      	ldr	r2, [pc, #228]	@ (8004d00 <DMA_CalcBaseAndBitshift+0x130>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d02c      	beq.n	8004c78 <DMA_CalcBaseAndBitshift+0xa8>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a38      	ldr	r2, [pc, #224]	@ (8004d04 <DMA_CalcBaseAndBitshift+0x134>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d027      	beq.n	8004c78 <DMA_CalcBaseAndBitshift+0xa8>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a36      	ldr	r2, [pc, #216]	@ (8004d08 <DMA_CalcBaseAndBitshift+0x138>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d022      	beq.n	8004c78 <DMA_CalcBaseAndBitshift+0xa8>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a35      	ldr	r2, [pc, #212]	@ (8004d0c <DMA_CalcBaseAndBitshift+0x13c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d01d      	beq.n	8004c78 <DMA_CalcBaseAndBitshift+0xa8>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a33      	ldr	r2, [pc, #204]	@ (8004d10 <DMA_CalcBaseAndBitshift+0x140>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d018      	beq.n	8004c78 <DMA_CalcBaseAndBitshift+0xa8>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a32      	ldr	r2, [pc, #200]	@ (8004d14 <DMA_CalcBaseAndBitshift+0x144>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d013      	beq.n	8004c78 <DMA_CalcBaseAndBitshift+0xa8>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a30      	ldr	r2, [pc, #192]	@ (8004d18 <DMA_CalcBaseAndBitshift+0x148>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d00e      	beq.n	8004c78 <DMA_CalcBaseAndBitshift+0xa8>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a2f      	ldr	r2, [pc, #188]	@ (8004d1c <DMA_CalcBaseAndBitshift+0x14c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d009      	beq.n	8004c78 <DMA_CalcBaseAndBitshift+0xa8>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a2d      	ldr	r2, [pc, #180]	@ (8004d20 <DMA_CalcBaseAndBitshift+0x150>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d004      	beq.n	8004c78 <DMA_CalcBaseAndBitshift+0xa8>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a2c      	ldr	r2, [pc, #176]	@ (8004d24 <DMA_CalcBaseAndBitshift+0x154>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d101      	bne.n	8004c7c <DMA_CalcBaseAndBitshift+0xac>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e000      	b.n	8004c7e <DMA_CalcBaseAndBitshift+0xae>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d024      	beq.n	8004ccc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	3b10      	subs	r3, #16
 8004c8a:	4a27      	ldr	r2, [pc, #156]	@ (8004d28 <DMA_CalcBaseAndBitshift+0x158>)
 8004c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c90:	091b      	lsrs	r3, r3, #4
 8004c92:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	4a24      	ldr	r2, [pc, #144]	@ (8004d2c <DMA_CalcBaseAndBitshift+0x15c>)
 8004c9c:	5cd3      	ldrb	r3, [r2, r3]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d908      	bls.n	8004cbc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8004d30 <DMA_CalcBaseAndBitshift+0x160>)
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	1d1a      	adds	r2, r3, #4
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	659a      	str	r2, [r3, #88]	@ 0x58
 8004cba:	e00d      	b.n	8004cd8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8004d30 <DMA_CalcBaseAndBitshift+0x160>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cca:	e005      	b.n	8004cd8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	40020010 	.word	0x40020010
 8004cec:	40020028 	.word	0x40020028
 8004cf0:	40020040 	.word	0x40020040
 8004cf4:	40020058 	.word	0x40020058
 8004cf8:	40020070 	.word	0x40020070
 8004cfc:	40020088 	.word	0x40020088
 8004d00:	400200a0 	.word	0x400200a0
 8004d04:	400200b8 	.word	0x400200b8
 8004d08:	40020410 	.word	0x40020410
 8004d0c:	40020428 	.word	0x40020428
 8004d10:	40020440 	.word	0x40020440
 8004d14:	40020458 	.word	0x40020458
 8004d18:	40020470 	.word	0x40020470
 8004d1c:	40020488 	.word	0x40020488
 8004d20:	400204a0 	.word	0x400204a0
 8004d24:	400204b8 	.word	0x400204b8
 8004d28:	aaaaaaab 	.word	0xaaaaaaab
 8004d2c:	0801c308 	.word	0x0801c308
 8004d30:	fffffc00 	.word	0xfffffc00

08004d34 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d120      	bne.n	8004d8a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	d858      	bhi.n	8004e02 <DMA_CheckFifoParam+0xce>
 8004d50:	a201      	add	r2, pc, #4	@ (adr r2, 8004d58 <DMA_CheckFifoParam+0x24>)
 8004d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d56:	bf00      	nop
 8004d58:	08004d69 	.word	0x08004d69
 8004d5c:	08004d7b 	.word	0x08004d7b
 8004d60:	08004d69 	.word	0x08004d69
 8004d64:	08004e03 	.word	0x08004e03
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d048      	beq.n	8004e06 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d78:	e045      	b.n	8004e06 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d82:	d142      	bne.n	8004e0a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d88:	e03f      	b.n	8004e0a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d92:	d123      	bne.n	8004ddc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d838      	bhi.n	8004e0e <DMA_CheckFifoParam+0xda>
 8004d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8004da4 <DMA_CheckFifoParam+0x70>)
 8004d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da2:	bf00      	nop
 8004da4:	08004db5 	.word	0x08004db5
 8004da8:	08004dbb 	.word	0x08004dbb
 8004dac:	08004db5 	.word	0x08004db5
 8004db0:	08004dcd 	.word	0x08004dcd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	73fb      	strb	r3, [r7, #15]
        break;
 8004db8:	e030      	b.n	8004e1c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d025      	beq.n	8004e12 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dca:	e022      	b.n	8004e12 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004dd4:	d11f      	bne.n	8004e16 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dda:	e01c      	b.n	8004e16 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d902      	bls.n	8004dea <DMA_CheckFifoParam+0xb6>
 8004de4:	2b03      	cmp	r3, #3
 8004de6:	d003      	beq.n	8004df0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004de8:	e018      	b.n	8004e1c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	73fb      	strb	r3, [r7, #15]
        break;
 8004dee:	e015      	b.n	8004e1c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00e      	beq.n	8004e1a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	73fb      	strb	r3, [r7, #15]
    break;
 8004e00:	e00b      	b.n	8004e1a <DMA_CheckFifoParam+0xe6>
        break;
 8004e02:	bf00      	nop
 8004e04:	e00a      	b.n	8004e1c <DMA_CheckFifoParam+0xe8>
        break;
 8004e06:	bf00      	nop
 8004e08:	e008      	b.n	8004e1c <DMA_CheckFifoParam+0xe8>
        break;
 8004e0a:	bf00      	nop
 8004e0c:	e006      	b.n	8004e1c <DMA_CheckFifoParam+0xe8>
        break;
 8004e0e:	bf00      	nop
 8004e10:	e004      	b.n	8004e1c <DMA_CheckFifoParam+0xe8>
        break;
 8004e12:	bf00      	nop
 8004e14:	e002      	b.n	8004e1c <DMA_CheckFifoParam+0xe8>
        break;
 8004e16:	bf00      	nop
 8004e18:	e000      	b.n	8004e1c <DMA_CheckFifoParam+0xe8>
    break;
 8004e1a:	bf00      	nop
    }
  }

  return status;
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop

08004e2c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a38      	ldr	r2, [pc, #224]	@ (8004f20 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d022      	beq.n	8004e8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a36      	ldr	r2, [pc, #216]	@ (8004f24 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d01d      	beq.n	8004e8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a35      	ldr	r2, [pc, #212]	@ (8004f28 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d018      	beq.n	8004e8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a33      	ldr	r2, [pc, #204]	@ (8004f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d013      	beq.n	8004e8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a32      	ldr	r2, [pc, #200]	@ (8004f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00e      	beq.n	8004e8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a30      	ldr	r2, [pc, #192]	@ (8004f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d009      	beq.n	8004e8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a2f      	ldr	r2, [pc, #188]	@ (8004f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d004      	beq.n	8004e8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a2d      	ldr	r2, [pc, #180]	@ (8004f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d101      	bne.n	8004e8e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d01a      	beq.n	8004eca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	3b08      	subs	r3, #8
 8004e9c:	4a28      	ldr	r2, [pc, #160]	@ (8004f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea2:	091b      	lsrs	r3, r3, #4
 8004ea4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4b26      	ldr	r3, [pc, #152]	@ (8004f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004eaa:	4413      	add	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	461a      	mov	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a24      	ldr	r2, [pc, #144]	@ (8004f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004eb8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f003 031f 	and.w	r3, r3, #31
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	409a      	lsls	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004ec8:	e024      	b.n	8004f14 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	3b10      	subs	r3, #16
 8004ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed8:	091b      	lsrs	r3, r3, #4
 8004eda:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4a1c      	ldr	r2, [pc, #112]	@ (8004f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d806      	bhi.n	8004ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8004f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d902      	bls.n	8004ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	3308      	adds	r3, #8
 8004ef0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4b18      	ldr	r3, [pc, #96]	@ (8004f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004ef6:	4413      	add	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	461a      	mov	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a16      	ldr	r2, [pc, #88]	@ (8004f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004f04:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f003 031f 	and.w	r3, r3, #31
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	409a      	lsls	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f14:	bf00      	nop
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	58025408 	.word	0x58025408
 8004f24:	5802541c 	.word	0x5802541c
 8004f28:	58025430 	.word	0x58025430
 8004f2c:	58025444 	.word	0x58025444
 8004f30:	58025458 	.word	0x58025458
 8004f34:	5802546c 	.word	0x5802546c
 8004f38:	58025480 	.word	0x58025480
 8004f3c:	58025494 	.word	0x58025494
 8004f40:	cccccccd 	.word	0xcccccccd
 8004f44:	16009600 	.word	0x16009600
 8004f48:	58025880 	.word	0x58025880
 8004f4c:	aaaaaaab 	.word	0xaaaaaaab
 8004f50:	400204b8 	.word	0x400204b8
 8004f54:	4002040f 	.word	0x4002040f
 8004f58:	10008200 	.word	0x10008200
 8004f5c:	40020880 	.word	0x40020880

08004f60 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d04a      	beq.n	800500c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d847      	bhi.n	800500c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a25      	ldr	r2, [pc, #148]	@ (8005018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d022      	beq.n	8004fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a24      	ldr	r2, [pc, #144]	@ (800501c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d01d      	beq.n	8004fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a22      	ldr	r2, [pc, #136]	@ (8005020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d018      	beq.n	8004fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a21      	ldr	r2, [pc, #132]	@ (8005024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d013      	beq.n	8004fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a1f      	ldr	r2, [pc, #124]	@ (8005028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d00e      	beq.n	8004fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a1e      	ldr	r2, [pc, #120]	@ (800502c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d009      	beq.n	8004fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a1c      	ldr	r2, [pc, #112]	@ (8005030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d004      	beq.n	8004fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a1b      	ldr	r2, [pc, #108]	@ (8005034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d101      	bne.n	8004fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e000      	b.n	8004fd2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4b17      	ldr	r3, [pc, #92]	@ (8005038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004fda:	4413      	add	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	461a      	mov	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a15      	ldr	r2, [pc, #84]	@ (800503c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004fe8:	671a      	str	r2, [r3, #112]	@ 0x70
 8004fea:	e009      	b.n	8005000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4b14      	ldr	r3, [pc, #80]	@ (8005040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a11      	ldr	r2, [pc, #68]	@ (8005044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004ffe:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	3b01      	subs	r3, #1
 8005004:	2201      	movs	r2, #1
 8005006:	409a      	lsls	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800500c:	bf00      	nop
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	58025408 	.word	0x58025408
 800501c:	5802541c 	.word	0x5802541c
 8005020:	58025430 	.word	0x58025430
 8005024:	58025444 	.word	0x58025444
 8005028:	58025458 	.word	0x58025458
 800502c:	5802546c 	.word	0x5802546c
 8005030:	58025480 	.word	0x58025480
 8005034:	58025494 	.word	0x58025494
 8005038:	1600963f 	.word	0x1600963f
 800503c:	58025940 	.word	0x58025940
 8005040:	1000823f 	.word	0x1000823f
 8005044:	40020940 	.word	0x40020940

08005048 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e0e3      	b.n	8005222 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005060:	2b00      	cmp	r3, #0
 8005062:	d106      	bne.n	8005072 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2223      	movs	r2, #35	@ 0x23
 8005068:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7fb ff9d 	bl	8000fac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005072:	4b6e      	ldr	r3, [pc, #440]	@ (800522c <HAL_ETH_Init+0x1e4>)
 8005074:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005078:	4a6c      	ldr	r2, [pc, #432]	@ (800522c <HAL_ETH_Init+0x1e4>)
 800507a:	f043 0302 	orr.w	r3, r3, #2
 800507e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005082:	4b6a      	ldr	r3, [pc, #424]	@ (800522c <HAL_ETH_Init+0x1e4>)
 8005084:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	60bb      	str	r3, [r7, #8]
 800508e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	7a1b      	ldrb	r3, [r3, #8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d103      	bne.n	80050a0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005098:	2000      	movs	r0, #0
 800509a:	f7fd f899 	bl	80021d0 <HAL_SYSCFG_ETHInterfaceSelect>
 800509e:	e003      	b.n	80050a8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80050a0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80050a4:	f7fd f894 	bl	80021d0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80050a8:	4b61      	ldr	r3, [pc, #388]	@ (8005230 <HAL_ETH_Init+0x1e8>)
 80050aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6812      	ldr	r2, [r2, #0]
 80050ba:	f043 0301 	orr.w	r3, r3, #1
 80050be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80050c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050c4:	f7fd f848 	bl	8002158 <HAL_GetTick>
 80050c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80050ca:	e011      	b.n	80050f0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80050cc:	f7fd f844 	bl	8002158 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80050da:	d909      	bls.n	80050f0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2204      	movs	r2, #4
 80050e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	22e0      	movs	r2, #224	@ 0xe0
 80050e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e098      	b.n	8005222 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1e4      	bne.n	80050cc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f89e 	bl	8005244 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005108:	f001 fea0 	bl	8006e4c <HAL_RCC_GetHCLKFreq>
 800510c:	4603      	mov	r3, r0
 800510e:	4a49      	ldr	r2, [pc, #292]	@ (8005234 <HAL_ETH_Init+0x1ec>)
 8005110:	fba2 2303 	umull	r2, r3, r2, r3
 8005114:	0c9a      	lsrs	r2, r3, #18
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3a01      	subs	r2, #1
 800511c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 fa81 	bl	8005628 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800512e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005132:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6812      	ldr	r2, [r2, #0]
 800513a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800513e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005142:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d009      	beq.n	8005166 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	22e0      	movs	r2, #224	@ 0xe0
 800515e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e05d      	b.n	8005222 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800516e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8005172:	4b31      	ldr	r3, [pc, #196]	@ (8005238 <HAL_ETH_Init+0x1f0>)
 8005174:	4013      	ands	r3, r2
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6952      	ldr	r2, [r2, #20]
 800517a:	0051      	lsls	r1, r2, #1
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6812      	ldr	r2, [r2, #0]
 8005180:	430b      	orrs	r3, r1
 8005182:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005186:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fae9 	bl	8005762 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 fb2f 	bl	80057f4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	3305      	adds	r3, #5
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	021a      	lsls	r2, r3, #8
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	3304      	adds	r3, #4
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	4619      	mov	r1, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	3303      	adds	r3, #3
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	061a      	lsls	r2, r3, #24
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	3302      	adds	r3, #2
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	041b      	lsls	r3, r3, #16
 80051c8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	3301      	adds	r3, #1
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80051d4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80051e2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80051e4:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	4b11      	ldr	r3, [pc, #68]	@ (800523c <HAL_ETH_Init+0x1f4>)
 80051f6:	430b      	orrs	r3, r1
 80051f8:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	4b0d      	ldr	r3, [pc, #52]	@ (8005240 <HAL_ETH_Init+0x1f8>)
 800520a:	430b      	orrs	r3, r1
 800520c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2210      	movs	r2, #16
 800521c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	58024400 	.word	0x58024400
 8005230:	58000400 	.word	0x58000400
 8005234:	431bde83 	.word	0x431bde83
 8005238:	ffff8001 	.word	0xffff8001
 800523c:	0c020060 	.word	0x0c020060
 8005240:	0c20c000 	.word	0x0c20c000

08005244 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005254:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800525c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800525e:	f001 fdf5 	bl	8006e4c <HAL_RCC_GetHCLKFreq>
 8005262:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	4a1a      	ldr	r2, [pc, #104]	@ (80052d0 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d804      	bhi.n	8005276 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	e022      	b.n	80052bc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	4a16      	ldr	r2, [pc, #88]	@ (80052d4 <HAL_ETH_SetMDIOClockRange+0x90>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d204      	bcs.n	8005288 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	e019      	b.n	80052bc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4a13      	ldr	r2, [pc, #76]	@ (80052d8 <HAL_ETH_SetMDIOClockRange+0x94>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d915      	bls.n	80052bc <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	4a12      	ldr	r2, [pc, #72]	@ (80052dc <HAL_ETH_SetMDIOClockRange+0x98>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d804      	bhi.n	80052a2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	e00c      	b.n	80052bc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	4a0e      	ldr	r2, [pc, #56]	@ (80052e0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d804      	bhi.n	80052b4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	e003      	b.n	80052bc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80052ba:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80052c6:	bf00      	nop
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	02160ebf 	.word	0x02160ebf
 80052d4:	03938700 	.word	0x03938700
 80052d8:	05f5e0ff 	.word	0x05f5e0ff
 80052dc:	08f0d17f 	.word	0x08f0d17f
 80052e0:	0ee6b27f 	.word	0x0ee6b27f

080052e4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80052f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	791b      	ldrb	r3, [r3, #4]
 80052fc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80052fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	7b1b      	ldrb	r3, [r3, #12]
 8005304:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005306:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	7b5b      	ldrb	r3, [r3, #13]
 800530c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800530e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	7b9b      	ldrb	r3, [r3, #14]
 8005314:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005316:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	7bdb      	ldrb	r3, [r3, #15]
 800531c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800531e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	7c12      	ldrb	r2, [r2, #16]
 8005324:	2a00      	cmp	r2, #0
 8005326:	d102      	bne.n	800532e <ETH_SetMACConfig+0x4a>
 8005328:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800532c:	e000      	b.n	8005330 <ETH_SetMACConfig+0x4c>
 800532e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005330:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	7c52      	ldrb	r2, [r2, #17]
 8005336:	2a00      	cmp	r2, #0
 8005338:	d102      	bne.n	8005340 <ETH_SetMACConfig+0x5c>
 800533a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800533e:	e000      	b.n	8005342 <ETH_SetMACConfig+0x5e>
 8005340:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005342:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	7c9b      	ldrb	r3, [r3, #18]
 8005348:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800534a:	431a      	orrs	r2, r3
               macconf->Speed |
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005350:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8005356:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	7f1b      	ldrb	r3, [r3, #28]
 800535c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800535e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	7f5b      	ldrb	r3, [r3, #29]
 8005364:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005366:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	7f92      	ldrb	r2, [r2, #30]
 800536c:	2a00      	cmp	r2, #0
 800536e:	d102      	bne.n	8005376 <ETH_SetMACConfig+0x92>
 8005370:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005374:	e000      	b.n	8005378 <ETH_SetMACConfig+0x94>
 8005376:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005378:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	7fdb      	ldrb	r3, [r3, #31]
 800537e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005380:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005388:	2a00      	cmp	r2, #0
 800538a:	d102      	bne.n	8005392 <ETH_SetMACConfig+0xae>
 800538c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005390:	e000      	b.n	8005394 <ETH_SetMACConfig+0xb0>
 8005392:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005394:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800539a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053a2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80053a4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	4b56      	ldr	r3, [pc, #344]	@ (8005510 <ETH_SetMACConfig+0x22c>)
 80053b6:	4013      	ands	r3, r2
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6812      	ldr	r2, [r2, #0]
 80053bc:	68f9      	ldr	r1, [r7, #12]
 80053be:	430b      	orrs	r3, r1
 80053c0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80053ce:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80053d0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80053d8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80053da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80053e2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80053e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80053ec:	2a00      	cmp	r2, #0
 80053ee:	d102      	bne.n	80053f6 <ETH_SetMACConfig+0x112>
 80053f0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80053f4:	e000      	b.n	80053f8 <ETH_SetMACConfig+0x114>
 80053f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80053f8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	4b42      	ldr	r3, [pc, #264]	@ (8005514 <ETH_SetMACConfig+0x230>)
 800540a:	4013      	ands	r3, r2
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6812      	ldr	r2, [r2, #0]
 8005410:	68f9      	ldr	r1, [r7, #12]
 8005412:	430b      	orrs	r3, r1
 8005414:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800541c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68da      	ldr	r2, [r3, #12]
 800542c:	4b3a      	ldr	r3, [pc, #232]	@ (8005518 <ETH_SetMACConfig+0x234>)
 800542e:	4013      	ands	r3, r2
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	6812      	ldr	r2, [r2, #0]
 8005434:	68f9      	ldr	r1, [r7, #12]
 8005436:	430b      	orrs	r3, r1
 8005438:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005440:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005446:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800544e:	2a00      	cmp	r2, #0
 8005450:	d101      	bne.n	8005456 <ETH_SetMACConfig+0x172>
 8005452:	2280      	movs	r2, #128	@ 0x80
 8005454:	e000      	b.n	8005458 <ETH_SetMACConfig+0x174>
 8005456:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005458:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800545e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005460:	4313      	orrs	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800546a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800546e:	4013      	ands	r3, r2
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6812      	ldr	r2, [r2, #0]
 8005474:	68f9      	ldr	r1, [r7, #12]
 8005476:	430b      	orrs	r3, r1
 8005478:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8005480:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8005488:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005496:	f023 0103 	bic.w	r1, r3, #3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80054ae:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80054ca:	2a00      	cmp	r2, #0
 80054cc:	d101      	bne.n	80054d2 <ETH_SetMACConfig+0x1ee>
 80054ce:	2240      	movs	r2, #64	@ 0x40
 80054d0:	e000      	b.n	80054d4 <ETH_SetMACConfig+0x1f0>
 80054d2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80054d4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80054dc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80054de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80054e6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80054f4:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	430a      	orrs	r2, r1
 8005500:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8005504:	bf00      	nop
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	00048083 	.word	0x00048083
 8005514:	c0f88000 	.word	0xc0f88000
 8005518:	fffffef0 	.word	0xfffffef0

0800551c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	4b38      	ldr	r3, [pc, #224]	@ (8005614 <ETH_SetDMAConfig+0xf8>)
 8005532:	4013      	ands	r3, r2
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	6811      	ldr	r1, [r2, #0]
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6812      	ldr	r2, [r2, #0]
 800553c:	430b      	orrs	r3, r1
 800553e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005542:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	791b      	ldrb	r3, [r3, #4]
 8005548:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800554e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	7b1b      	ldrb	r3, [r3, #12]
 8005554:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	4b2c      	ldr	r3, [pc, #176]	@ (8005618 <ETH_SetDMAConfig+0xfc>)
 8005566:	4013      	ands	r3, r2
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6812      	ldr	r2, [r2, #0]
 800556c:	68f9      	ldr	r1, [r7, #12]
 800556e:	430b      	orrs	r3, r1
 8005570:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005574:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	7b5b      	ldrb	r3, [r3, #13]
 800557a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005580:	4313      	orrs	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800558c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8005590:	4b22      	ldr	r3, [pc, #136]	@ (800561c <ETH_SetDMAConfig+0x100>)
 8005592:	4013      	ands	r3, r2
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	6812      	ldr	r2, [r2, #0]
 8005598:	68f9      	ldr	r1, [r7, #12]
 800559a:	430b      	orrs	r3, r1
 800559c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80055a0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	7d1b      	ldrb	r3, [r3, #20]
 80055ac:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80055ae:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	7f5b      	ldrb	r3, [r3, #29]
 80055b4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055c2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80055c6:	4b16      	ldr	r3, [pc, #88]	@ (8005620 <ETH_SetDMAConfig+0x104>)
 80055c8:	4013      	ands	r3, r2
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	6812      	ldr	r2, [r2, #0]
 80055ce:	68f9      	ldr	r1, [r7, #12]
 80055d0:	430b      	orrs	r3, r1
 80055d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80055d6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	7f1b      	ldrb	r3, [r3, #28]
 80055de:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055f0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80055f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005624 <ETH_SetDMAConfig+0x108>)
 80055f6:	4013      	ands	r3, r2
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6812      	ldr	r2, [r2, #0]
 80055fc:	68f9      	ldr	r1, [r7, #12]
 80055fe:	430b      	orrs	r3, r1
 8005600:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005604:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8005608:	bf00      	nop
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	ffff87fd 	.word	0xffff87fd
 8005618:	ffff2ffe 	.word	0xffff2ffe
 800561c:	fffec000 	.word	0xfffec000
 8005620:	ffc0efef 	.word	0xffc0efef
 8005624:	7fc0ffff 	.word	0x7fc0ffff

08005628 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b0a4      	sub	sp, #144	@ 0x90
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005630:	2301      	movs	r3, #1
 8005632:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005636:	2300      	movs	r3, #0
 8005638:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800563a:	2300      	movs	r3, #0
 800563c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005640:	2300      	movs	r3, #0
 8005642:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005646:	2301      	movs	r3, #1
 8005648:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800564c:	2301      	movs	r3, #1
 800564e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005652:	2301      	movs	r3, #1
 8005654:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005658:	2300      	movs	r3, #0
 800565a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800565e:	2301      	movs	r3, #1
 8005660:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005664:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005668:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800566a:	2300      	movs	r3, #0
 800566c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8005670:	2300      	movs	r3, #0
 8005672:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005674:	2300      	movs	r3, #0
 8005676:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800567a:	2300      	movs	r3, #0
 800567c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8005680:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8005684:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005686:	2300      	movs	r3, #0
 8005688:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800568c:	2300      	movs	r3, #0
 800568e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8005690:	2301      	movs	r3, #1
 8005692:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005696:	2300      	movs	r3, #0
 8005698:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800569c:	2300      	movs	r3, #0
 800569e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80056a2:	2300      	movs	r3, #0
 80056a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80056a6:	2300      	movs	r3, #0
 80056a8:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80056aa:	2300      	movs	r3, #0
 80056ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80056ae:	2300      	movs	r3, #0
 80056b0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80056b4:	2300      	movs	r3, #0
 80056b6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80056ba:	2301      	movs	r3, #1
 80056bc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80056c0:	2320      	movs	r3, #32
 80056c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80056c6:	2301      	movs	r3, #1
 80056c8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80056cc:	2300      	movs	r3, #0
 80056ce:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80056d2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80056d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80056d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80056dc:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80056de:	2300      	movs	r3, #0
 80056e0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80056e4:	2302      	movs	r3, #2
 80056e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80056ea:	2300      	movs	r3, #0
 80056ec:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80056f0:	2300      	movs	r3, #0
 80056f2:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80056f6:	2300      	movs	r3, #0
 80056f8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80056fc:	2301      	movs	r3, #1
 80056fe:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005702:	2300      	movs	r3, #0
 8005704:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005706:	2301      	movs	r3, #1
 8005708:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800570c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005710:	4619      	mov	r1, r3
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7ff fde6 	bl	80052e4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005718:	2301      	movs	r3, #1
 800571a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800571c:	2301      	movs	r3, #1
 800571e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005720:	2300      	movs	r3, #0
 8005722:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005724:	2300      	movs	r3, #0
 8005726:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800572a:	2300      	movs	r3, #0
 800572c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800572e:	2300      	movs	r3, #0
 8005730:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005732:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005736:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005738:	2300      	movs	r3, #0
 800573a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800573c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005740:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005742:	2300      	movs	r3, #0
 8005744:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005748:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800574c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800574e:	f107 0308 	add.w	r3, r7, #8
 8005752:	4619      	mov	r1, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7ff fee1 	bl	800551c <ETH_SetDMAConfig>
}
 800575a:	bf00      	nop
 800575c:	3790      	adds	r7, #144	@ 0x90
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005762:	b480      	push	{r7}
 8005764:	b085      	sub	sp, #20
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800576a:	2300      	movs	r3, #0
 800576c:	60fb      	str	r3, [r7, #12]
 800576e:	e01d      	b.n	80057ac <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68d9      	ldr	r1, [r3, #12]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4613      	mov	r3, r2
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	4413      	add	r3, r2
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	440b      	add	r3, r1
 8005780:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2200      	movs	r2, #0
 8005786:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2200      	movs	r2, #0
 800578c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2200      	movs	r2, #0
 8005792:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2200      	movs	r2, #0
 8005798:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800579a:	68b9      	ldr	r1, [r7, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	3206      	adds	r2, #6
 80057a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	3301      	adds	r3, #1
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d9de      	bls.n	8005770 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057c0:	461a      	mov	r2, r3
 80057c2:	2303      	movs	r3, #3
 80057c4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057d4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68da      	ldr	r2, [r3, #12]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057e4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80057e8:	bf00      	nop
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	e023      	b.n	800584a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6919      	ldr	r1, [r3, #16]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4613      	mov	r3, r2
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	4413      	add	r3, r2
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	440b      	add	r3, r1
 8005812:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2200      	movs	r2, #0
 800581e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2200      	movs	r2, #0
 8005824:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2200      	movs	r2, #0
 800582a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2200      	movs	r2, #0
 8005830:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	2200      	movs	r2, #0
 8005836:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005838:	68b9      	ldr	r1, [r7, #8]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	3212      	adds	r2, #18
 8005840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	3301      	adds	r3, #1
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b03      	cmp	r3, #3
 800584e:	d9d8      	bls.n	8005802 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005876:	461a      	mov	r2, r3
 8005878:	2303      	movs	r3, #3
 800587a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691a      	ldr	r2, [r3, #16]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800588a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800589e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80058a2:	bf00      	nop
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
	...

080058b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b089      	sub	sp, #36	@ 0x24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80058be:	4b89      	ldr	r3, [pc, #548]	@ (8005ae4 <HAL_GPIO_Init+0x234>)
 80058c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80058c2:	e194      	b.n	8005bee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	2101      	movs	r1, #1
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	fa01 f303 	lsl.w	r3, r1, r3
 80058d0:	4013      	ands	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 8186 	beq.w	8005be8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f003 0303 	and.w	r3, r3, #3
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d005      	beq.n	80058f4 <HAL_GPIO_Init+0x44>
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f003 0303 	and.w	r3, r3, #3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d130      	bne.n	8005956 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	2203      	movs	r2, #3
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	43db      	mvns	r3, r3
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	4013      	ands	r3, r2
 800590a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	68da      	ldr	r2, [r3, #12]
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	fa02 f303 	lsl.w	r3, r2, r3
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	4313      	orrs	r3, r2
 800591c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800592a:	2201      	movs	r2, #1
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	fa02 f303 	lsl.w	r3, r2, r3
 8005932:	43db      	mvns	r3, r3
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	4013      	ands	r3, r2
 8005938:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	091b      	lsrs	r3, r3, #4
 8005940:	f003 0201 	and.w	r2, r3, #1
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	4313      	orrs	r3, r2
 800594e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	2b03      	cmp	r3, #3
 8005960:	d017      	beq.n	8005992 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	2203      	movs	r2, #3
 800596e:	fa02 f303 	lsl.w	r3, r2, r3
 8005972:	43db      	mvns	r3, r3
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	4013      	ands	r3, r2
 8005978:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	fa02 f303 	lsl.w	r3, r2, r3
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	4313      	orrs	r3, r2
 800598a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d123      	bne.n	80059e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	08da      	lsrs	r2, r3, #3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	3208      	adds	r2, #8
 80059a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	f003 0307 	and.w	r3, r3, #7
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	220f      	movs	r2, #15
 80059b6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ba:	43db      	mvns	r3, r3
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	4013      	ands	r3, r2
 80059c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	691a      	ldr	r2, [r3, #16]
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	08da      	lsrs	r2, r3, #3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3208      	adds	r2, #8
 80059e0:	69b9      	ldr	r1, [r7, #24]
 80059e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	2203      	movs	r2, #3
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	43db      	mvns	r3, r3
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	4013      	ands	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f003 0203 	and.w	r2, r3, #3
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 80e0 	beq.w	8005be8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a28:	4b2f      	ldr	r3, [pc, #188]	@ (8005ae8 <HAL_GPIO_Init+0x238>)
 8005a2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a2e:	4a2e      	ldr	r2, [pc, #184]	@ (8005ae8 <HAL_GPIO_Init+0x238>)
 8005a30:	f043 0302 	orr.w	r3, r3, #2
 8005a34:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005a38:	4b2b      	ldr	r3, [pc, #172]	@ (8005ae8 <HAL_GPIO_Init+0x238>)
 8005a3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a46:	4a29      	ldr	r2, [pc, #164]	@ (8005aec <HAL_GPIO_Init+0x23c>)
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	089b      	lsrs	r3, r3, #2
 8005a4c:	3302      	adds	r3, #2
 8005a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	220f      	movs	r2, #15
 8005a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a62:	43db      	mvns	r3, r3
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	4013      	ands	r3, r2
 8005a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a20      	ldr	r2, [pc, #128]	@ (8005af0 <HAL_GPIO_Init+0x240>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d052      	beq.n	8005b18 <HAL_GPIO_Init+0x268>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a1f      	ldr	r2, [pc, #124]	@ (8005af4 <HAL_GPIO_Init+0x244>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d031      	beq.n	8005ade <HAL_GPIO_Init+0x22e>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a1e      	ldr	r2, [pc, #120]	@ (8005af8 <HAL_GPIO_Init+0x248>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d02b      	beq.n	8005ada <HAL_GPIO_Init+0x22a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a1d      	ldr	r2, [pc, #116]	@ (8005afc <HAL_GPIO_Init+0x24c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d025      	beq.n	8005ad6 <HAL_GPIO_Init+0x226>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8005b00 <HAL_GPIO_Init+0x250>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d01f      	beq.n	8005ad2 <HAL_GPIO_Init+0x222>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a1b      	ldr	r2, [pc, #108]	@ (8005b04 <HAL_GPIO_Init+0x254>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d019      	beq.n	8005ace <HAL_GPIO_Init+0x21e>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8005b08 <HAL_GPIO_Init+0x258>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d013      	beq.n	8005aca <HAL_GPIO_Init+0x21a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a19      	ldr	r2, [pc, #100]	@ (8005b0c <HAL_GPIO_Init+0x25c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d00d      	beq.n	8005ac6 <HAL_GPIO_Init+0x216>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a18      	ldr	r2, [pc, #96]	@ (8005b10 <HAL_GPIO_Init+0x260>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d007      	beq.n	8005ac2 <HAL_GPIO_Init+0x212>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a17      	ldr	r2, [pc, #92]	@ (8005b14 <HAL_GPIO_Init+0x264>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d101      	bne.n	8005abe <HAL_GPIO_Init+0x20e>
 8005aba:	2309      	movs	r3, #9
 8005abc:	e02d      	b.n	8005b1a <HAL_GPIO_Init+0x26a>
 8005abe:	230a      	movs	r3, #10
 8005ac0:	e02b      	b.n	8005b1a <HAL_GPIO_Init+0x26a>
 8005ac2:	2308      	movs	r3, #8
 8005ac4:	e029      	b.n	8005b1a <HAL_GPIO_Init+0x26a>
 8005ac6:	2307      	movs	r3, #7
 8005ac8:	e027      	b.n	8005b1a <HAL_GPIO_Init+0x26a>
 8005aca:	2306      	movs	r3, #6
 8005acc:	e025      	b.n	8005b1a <HAL_GPIO_Init+0x26a>
 8005ace:	2305      	movs	r3, #5
 8005ad0:	e023      	b.n	8005b1a <HAL_GPIO_Init+0x26a>
 8005ad2:	2304      	movs	r3, #4
 8005ad4:	e021      	b.n	8005b1a <HAL_GPIO_Init+0x26a>
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e01f      	b.n	8005b1a <HAL_GPIO_Init+0x26a>
 8005ada:	2302      	movs	r3, #2
 8005adc:	e01d      	b.n	8005b1a <HAL_GPIO_Init+0x26a>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e01b      	b.n	8005b1a <HAL_GPIO_Init+0x26a>
 8005ae2:	bf00      	nop
 8005ae4:	58000080 	.word	0x58000080
 8005ae8:	58024400 	.word	0x58024400
 8005aec:	58000400 	.word	0x58000400
 8005af0:	58020000 	.word	0x58020000
 8005af4:	58020400 	.word	0x58020400
 8005af8:	58020800 	.word	0x58020800
 8005afc:	58020c00 	.word	0x58020c00
 8005b00:	58021000 	.word	0x58021000
 8005b04:	58021400 	.word	0x58021400
 8005b08:	58021800 	.word	0x58021800
 8005b0c:	58021c00 	.word	0x58021c00
 8005b10:	58022000 	.word	0x58022000
 8005b14:	58022400 	.word	0x58022400
 8005b18:	2300      	movs	r3, #0
 8005b1a:	69fa      	ldr	r2, [r7, #28]
 8005b1c:	f002 0203 	and.w	r2, r2, #3
 8005b20:	0092      	lsls	r2, r2, #2
 8005b22:	4093      	lsls	r3, r2
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b2a:	4938      	ldr	r1, [pc, #224]	@ (8005c0c <HAL_GPIO_Init+0x35c>)
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	089b      	lsrs	r3, r3, #2
 8005b30:	3302      	adds	r3, #2
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	43db      	mvns	r3, r3
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	4013      	ands	r3, r2
 8005b48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005b5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005b66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	43db      	mvns	r3, r3
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	4013      	ands	r3, r2
 8005b76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005b8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d003      	beq.n	8005bb8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	43db      	mvns	r3, r3
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	4013      	ands	r3, r2
 8005bcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005bda:	69ba      	ldr	r2, [r7, #24]
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	3301      	adds	r3, #1
 8005bec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f47f ae63 	bne.w	80058c4 <HAL_GPIO_Init+0x14>
  }
}
 8005bfe:	bf00      	nop
 8005c00:	bf00      	nop
 8005c02:	3724      	adds	r7, #36	@ 0x24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	58000400 	.word	0x58000400

08005c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	807b      	strh	r3, [r7, #2]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c20:	787b      	ldrb	r3, [r7, #1]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c26:	887a      	ldrh	r2, [r7, #2]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005c2c:	e003      	b.n	8005c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005c2e:	887b      	ldrh	r3, [r7, #2]
 8005c30:	041a      	lsls	r2, r3, #16
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	619a      	str	r2, [r3, #24]
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b086      	sub	sp, #24
 8005c46:	af02      	add	r7, sp, #8
 8005c48:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e0fe      	b.n	8005e52 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d106      	bne.n	8005c6e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7fc f97f 	bl	8001f6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2203      	movs	r2, #3
 8005c72:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f005 fbb8 	bl	800b3f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6818      	ldr	r0, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	7c1a      	ldrb	r2, [r3, #16]
 8005c88:	f88d 2000 	strb.w	r2, [sp]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c90:	f005 fb3c 	bl	800b30c <USB_CoreInit>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d005      	beq.n	8005ca6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e0d5      	b.n	8005e52 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2100      	movs	r1, #0
 8005cac:	4618      	mov	r0, r3
 8005cae:	f005 fbb0 	bl	800b412 <USB_SetCurrentMode>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d005      	beq.n	8005cc4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e0c6      	b.n	8005e52 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	73fb      	strb	r3, [r7, #15]
 8005cc8:	e04a      	b.n	8005d60 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005cca:	7bfa      	ldrb	r2, [r7, #15]
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	3315      	adds	r3, #21
 8005cda:	2201      	movs	r2, #1
 8005cdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005cde:	7bfa      	ldrb	r2, [r7, #15]
 8005ce0:	6879      	ldr	r1, [r7, #4]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	4413      	add	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	440b      	add	r3, r1
 8005cec:	3314      	adds	r3, #20
 8005cee:	7bfa      	ldrb	r2, [r7, #15]
 8005cf0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005cf2:	7bfa      	ldrb	r2, [r7, #15]
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	b298      	uxth	r0, r3
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	4413      	add	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	440b      	add	r3, r1
 8005d04:	332e      	adds	r3, #46	@ 0x2e
 8005d06:	4602      	mov	r2, r0
 8005d08:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005d0a:	7bfa      	ldrb	r2, [r7, #15]
 8005d0c:	6879      	ldr	r1, [r7, #4]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	4413      	add	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	440b      	add	r3, r1
 8005d18:	3318      	adds	r3, #24
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005d1e:	7bfa      	ldrb	r2, [r7, #15]
 8005d20:	6879      	ldr	r1, [r7, #4]
 8005d22:	4613      	mov	r3, r2
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	4413      	add	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	440b      	add	r3, r1
 8005d2c:	331c      	adds	r3, #28
 8005d2e:	2200      	movs	r2, #0
 8005d30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005d32:	7bfa      	ldrb	r2, [r7, #15]
 8005d34:	6879      	ldr	r1, [r7, #4]
 8005d36:	4613      	mov	r3, r2
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	4413      	add	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	440b      	add	r3, r1
 8005d40:	3320      	adds	r3, #32
 8005d42:	2200      	movs	r2, #0
 8005d44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005d46:	7bfa      	ldrb	r2, [r7, #15]
 8005d48:	6879      	ldr	r1, [r7, #4]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	4413      	add	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	440b      	add	r3, r1
 8005d54:	3324      	adds	r3, #36	@ 0x24
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	73fb      	strb	r3, [r7, #15]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	791b      	ldrb	r3, [r3, #4]
 8005d64:	7bfa      	ldrb	r2, [r7, #15]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d3af      	bcc.n	8005cca <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	73fb      	strb	r3, [r7, #15]
 8005d6e:	e044      	b.n	8005dfa <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d70:	7bfa      	ldrb	r2, [r7, #15]
 8005d72:	6879      	ldr	r1, [r7, #4]
 8005d74:	4613      	mov	r3, r2
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005d82:	2200      	movs	r2, #0
 8005d84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d86:	7bfa      	ldrb	r2, [r7, #15]
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	4413      	add	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	440b      	add	r3, r1
 8005d94:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005d98:	7bfa      	ldrb	r2, [r7, #15]
 8005d9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005d9c:	7bfa      	ldrb	r2, [r7, #15]
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	4613      	mov	r3, r2
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	4413      	add	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	440b      	add	r3, r1
 8005daa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005dae:	2200      	movs	r2, #0
 8005db0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005db2:	7bfa      	ldrb	r2, [r7, #15]
 8005db4:	6879      	ldr	r1, [r7, #4]
 8005db6:	4613      	mov	r3, r2
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	4413      	add	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	440b      	add	r3, r1
 8005dc0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005dc8:	7bfa      	ldrb	r2, [r7, #15]
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	4413      	add	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	440b      	add	r3, r1
 8005dd6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005dde:	7bfa      	ldrb	r2, [r7, #15]
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	4613      	mov	r3, r2
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	440b      	add	r3, r1
 8005dec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005df0:	2200      	movs	r2, #0
 8005df2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
 8005df6:	3301      	adds	r3, #1
 8005df8:	73fb      	strb	r3, [r7, #15]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	791b      	ldrb	r3, [r3, #4]
 8005dfe:	7bfa      	ldrb	r2, [r7, #15]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d3b5      	bcc.n	8005d70 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6818      	ldr	r0, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	7c1a      	ldrb	r2, [r3, #16]
 8005e0c:	f88d 2000 	strb.w	r2, [sp]
 8005e10:	3304      	adds	r3, #4
 8005e12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e14:	f005 fb4a 	bl	800b4ac <USB_DevInit>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d005      	beq.n	8005e2a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2202      	movs	r2, #2
 8005e22:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e013      	b.n	8005e52 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	7b1b      	ldrb	r3, [r3, #12]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d102      	bne.n	8005e46 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f80b 	bl	8005e5c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f005 fd05 	bl	800b85a <USB_DevDisconnect>

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e8a:	4b05      	ldr	r3, [pc, #20]	@ (8005ea0 <HAL_PCDEx_ActivateLPM+0x44>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	10000003 	.word	0x10000003

08005ea4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005eac:	4b19      	ldr	r3, [pc, #100]	@ (8005f14 <HAL_PWREx_ConfigSupply+0x70>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	d00a      	beq.n	8005ece <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005eb8:	4b16      	ldr	r3, [pc, #88]	@ (8005f14 <HAL_PWREx_ConfigSupply+0x70>)
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f003 0307 	and.w	r3, r3, #7
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d001      	beq.n	8005eca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e01f      	b.n	8005f0a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	e01d      	b.n	8005f0a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005ece:	4b11      	ldr	r3, [pc, #68]	@ (8005f14 <HAL_PWREx_ConfigSupply+0x70>)
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f023 0207 	bic.w	r2, r3, #7
 8005ed6:	490f      	ldr	r1, [pc, #60]	@ (8005f14 <HAL_PWREx_ConfigSupply+0x70>)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005ede:	f7fc f93b 	bl	8002158 <HAL_GetTick>
 8005ee2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ee4:	e009      	b.n	8005efa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ee6:	f7fc f937 	bl	8002158 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ef4:	d901      	bls.n	8005efa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e007      	b.n	8005f0a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005efa:	4b06      	ldr	r3, [pc, #24]	@ (8005f14 <HAL_PWREx_ConfigSupply+0x70>)
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f06:	d1ee      	bne.n	8005ee6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	58024800 	.word	0x58024800

08005f18 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005f1c:	4b05      	ldr	r3, [pc, #20]	@ (8005f34 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	4a04      	ldr	r2, [pc, #16]	@ (8005f34 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005f22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f26:	60d3      	str	r3, [r2, #12]
}
 8005f28:	bf00      	nop
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	58024800 	.word	0x58024800

08005f38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b08c      	sub	sp, #48	@ 0x30
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d102      	bne.n	8005f4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	f000 bc48 	b.w	80067dc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 8088 	beq.w	800606a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f5a:	4b99      	ldr	r3, [pc, #612]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f64:	4b96      	ldr	r3, [pc, #600]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f68:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f6c:	2b10      	cmp	r3, #16
 8005f6e:	d007      	beq.n	8005f80 <HAL_RCC_OscConfig+0x48>
 8005f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f72:	2b18      	cmp	r3, #24
 8005f74:	d111      	bne.n	8005f9a <HAL_RCC_OscConfig+0x62>
 8005f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f78:	f003 0303 	and.w	r3, r3, #3
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d10c      	bne.n	8005f9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f80:	4b8f      	ldr	r3, [pc, #572]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d06d      	beq.n	8006068 <HAL_RCC_OscConfig+0x130>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d169      	bne.n	8006068 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	f000 bc21 	b.w	80067dc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fa2:	d106      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x7a>
 8005fa4:	4b86      	ldr	r3, [pc, #536]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a85      	ldr	r2, [pc, #532]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005faa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fae:	6013      	str	r3, [r2, #0]
 8005fb0:	e02e      	b.n	8006010 <HAL_RCC_OscConfig+0xd8>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10c      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x9c>
 8005fba:	4b81      	ldr	r3, [pc, #516]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a80      	ldr	r2, [pc, #512]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005fc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fc4:	6013      	str	r3, [r2, #0]
 8005fc6:	4b7e      	ldr	r3, [pc, #504]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a7d      	ldr	r2, [pc, #500]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005fcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fd0:	6013      	str	r3, [r2, #0]
 8005fd2:	e01d      	b.n	8006010 <HAL_RCC_OscConfig+0xd8>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fdc:	d10c      	bne.n	8005ff8 <HAL_RCC_OscConfig+0xc0>
 8005fde:	4b78      	ldr	r3, [pc, #480]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a77      	ldr	r2, [pc, #476]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	4b75      	ldr	r3, [pc, #468]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a74      	ldr	r2, [pc, #464]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	e00b      	b.n	8006010 <HAL_RCC_OscConfig+0xd8>
 8005ff8:	4b71      	ldr	r3, [pc, #452]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a70      	ldr	r2, [pc, #448]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006002:	6013      	str	r3, [r2, #0]
 8006004:	4b6e      	ldr	r3, [pc, #440]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a6d      	ldr	r2, [pc, #436]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 800600a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800600e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d013      	beq.n	8006040 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006018:	f7fc f89e 	bl	8002158 <HAL_GetTick>
 800601c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800601e:	e008      	b.n	8006032 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006020:	f7fc f89a 	bl	8002158 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b64      	cmp	r3, #100	@ 0x64
 800602c:	d901      	bls.n	8006032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e3d4      	b.n	80067dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006032:	4b63      	ldr	r3, [pc, #396]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d0f0      	beq.n	8006020 <HAL_RCC_OscConfig+0xe8>
 800603e:	e014      	b.n	800606a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006040:	f7fc f88a 	bl	8002158 <HAL_GetTick>
 8006044:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006046:	e008      	b.n	800605a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006048:	f7fc f886 	bl	8002158 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b64      	cmp	r3, #100	@ 0x64
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e3c0      	b.n	80067dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800605a:	4b59      	ldr	r3, [pc, #356]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1f0      	bne.n	8006048 <HAL_RCC_OscConfig+0x110>
 8006066:	e000      	b.n	800606a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 80ca 	beq.w	800620c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006078:	4b51      	ldr	r3, [pc, #324]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006080:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006082:	4b4f      	ldr	r3, [pc, #316]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 8006084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006086:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d007      	beq.n	800609e <HAL_RCC_OscConfig+0x166>
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	2b18      	cmp	r3, #24
 8006092:	d156      	bne.n	8006142 <HAL_RCC_OscConfig+0x20a>
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	f003 0303 	and.w	r3, r3, #3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d151      	bne.n	8006142 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800609e:	4b48      	ldr	r3, [pc, #288]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0304 	and.w	r3, r3, #4
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d005      	beq.n	80060b6 <HAL_RCC_OscConfig+0x17e>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e392      	b.n	80067dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80060b6:	4b42      	ldr	r3, [pc, #264]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f023 0219 	bic.w	r2, r3, #25
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	493f      	ldr	r1, [pc, #252]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c8:	f7fc f846 	bl	8002158 <HAL_GetTick>
 80060cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060ce:	e008      	b.n	80060e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060d0:	f7fc f842 	bl	8002158 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d901      	bls.n	80060e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e37c      	b.n	80067dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060e2:	4b37      	ldr	r3, [pc, #220]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0304 	and.w	r3, r3, #4
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d0f0      	beq.n	80060d0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ee:	f7fc f863 	bl	80021b8 <HAL_GetREVID>
 80060f2:	4603      	mov	r3, r0
 80060f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d817      	bhi.n	800612c <HAL_RCC_OscConfig+0x1f4>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	2b40      	cmp	r3, #64	@ 0x40
 8006102:	d108      	bne.n	8006116 <HAL_RCC_OscConfig+0x1de>
 8006104:	4b2e      	ldr	r3, [pc, #184]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800610c:	4a2c      	ldr	r2, [pc, #176]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 800610e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006112:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006114:	e07a      	b.n	800620c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006116:	4b2a      	ldr	r3, [pc, #168]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	031b      	lsls	r3, r3, #12
 8006124:	4926      	ldr	r1, [pc, #152]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 8006126:	4313      	orrs	r3, r2
 8006128:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800612a:	e06f      	b.n	800620c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800612c:	4b24      	ldr	r3, [pc, #144]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	061b      	lsls	r3, r3, #24
 800613a:	4921      	ldr	r1, [pc, #132]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 800613c:	4313      	orrs	r3, r2
 800613e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006140:	e064      	b.n	800620c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d047      	beq.n	80061da <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800614a:	4b1d      	ldr	r3, [pc, #116]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f023 0219 	bic.w	r2, r3, #25
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	491a      	ldr	r1, [pc, #104]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 8006158:	4313      	orrs	r3, r2
 800615a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615c:	f7fb fffc 	bl	8002158 <HAL_GetTick>
 8006160:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006162:	e008      	b.n	8006176 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006164:	f7fb fff8 	bl	8002158 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	2b02      	cmp	r3, #2
 8006170:	d901      	bls.n	8006176 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e332      	b.n	80067dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006176:	4b12      	ldr	r3, [pc, #72]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0304 	and.w	r3, r3, #4
 800617e:	2b00      	cmp	r3, #0
 8006180:	d0f0      	beq.n	8006164 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006182:	f7fc f819 	bl	80021b8 <HAL_GetREVID>
 8006186:	4603      	mov	r3, r0
 8006188:	f241 0203 	movw	r2, #4099	@ 0x1003
 800618c:	4293      	cmp	r3, r2
 800618e:	d819      	bhi.n	80061c4 <HAL_RCC_OscConfig+0x28c>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	2b40      	cmp	r3, #64	@ 0x40
 8006196:	d108      	bne.n	80061aa <HAL_RCC_OscConfig+0x272>
 8006198:	4b09      	ldr	r3, [pc, #36]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80061a0:	4a07      	ldr	r2, [pc, #28]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 80061a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061a6:	6053      	str	r3, [r2, #4]
 80061a8:	e030      	b.n	800620c <HAL_RCC_OscConfig+0x2d4>
 80061aa:	4b05      	ldr	r3, [pc, #20]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	031b      	lsls	r3, r3, #12
 80061b8:	4901      	ldr	r1, [pc, #4]	@ (80061c0 <HAL_RCC_OscConfig+0x288>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	604b      	str	r3, [r1, #4]
 80061be:	e025      	b.n	800620c <HAL_RCC_OscConfig+0x2d4>
 80061c0:	58024400 	.word	0x58024400
 80061c4:	4b9a      	ldr	r3, [pc, #616]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	061b      	lsls	r3, r3, #24
 80061d2:	4997      	ldr	r1, [pc, #604]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	604b      	str	r3, [r1, #4]
 80061d8:	e018      	b.n	800620c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061da:	4b95      	ldr	r3, [pc, #596]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a94      	ldr	r2, [pc, #592]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 80061e0:	f023 0301 	bic.w	r3, r3, #1
 80061e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e6:	f7fb ffb7 	bl	8002158 <HAL_GetTick>
 80061ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061ec:	e008      	b.n	8006200 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061ee:	f7fb ffb3 	bl	8002158 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d901      	bls.n	8006200 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e2ed      	b.n	80067dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006200:	4b8b      	ldr	r3, [pc, #556]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1f0      	bne.n	80061ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0310 	and.w	r3, r3, #16
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 80a9 	beq.w	800636c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800621a:	4b85      	ldr	r3, [pc, #532]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006222:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006224:	4b82      	ldr	r3, [pc, #520]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 8006226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006228:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	2b08      	cmp	r3, #8
 800622e:	d007      	beq.n	8006240 <HAL_RCC_OscConfig+0x308>
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	2b18      	cmp	r3, #24
 8006234:	d13a      	bne.n	80062ac <HAL_RCC_OscConfig+0x374>
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f003 0303 	and.w	r3, r3, #3
 800623c:	2b01      	cmp	r3, #1
 800623e:	d135      	bne.n	80062ac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006240:	4b7b      	ldr	r3, [pc, #492]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <HAL_RCC_OscConfig+0x320>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	69db      	ldr	r3, [r3, #28]
 8006250:	2b80      	cmp	r3, #128	@ 0x80
 8006252:	d001      	beq.n	8006258 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e2c1      	b.n	80067dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006258:	f7fb ffae 	bl	80021b8 <HAL_GetREVID>
 800625c:	4603      	mov	r3, r0
 800625e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006262:	4293      	cmp	r3, r2
 8006264:	d817      	bhi.n	8006296 <HAL_RCC_OscConfig+0x35e>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	2b20      	cmp	r3, #32
 800626c:	d108      	bne.n	8006280 <HAL_RCC_OscConfig+0x348>
 800626e:	4b70      	ldr	r3, [pc, #448]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006276:	4a6e      	ldr	r2, [pc, #440]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 8006278:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800627c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800627e:	e075      	b.n	800636c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006280:	4b6b      	ldr	r3, [pc, #428]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	069b      	lsls	r3, r3, #26
 800628e:	4968      	ldr	r1, [pc, #416]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 8006290:	4313      	orrs	r3, r2
 8006292:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006294:	e06a      	b.n	800636c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006296:	4b66      	ldr	r3, [pc, #408]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	061b      	lsls	r3, r3, #24
 80062a4:	4962      	ldr	r1, [pc, #392]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062aa:	e05f      	b.n	800636c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	69db      	ldr	r3, [r3, #28]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d042      	beq.n	800633a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80062b4:	4b5e      	ldr	r3, [pc, #376]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a5d      	ldr	r2, [pc, #372]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 80062ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c0:	f7fb ff4a 	bl	8002158 <HAL_GetTick>
 80062c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062c6:	e008      	b.n	80062da <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80062c8:	f7fb ff46 	bl	8002158 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e280      	b.n	80067dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062da:	4b55      	ldr	r3, [pc, #340]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0f0      	beq.n	80062c8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062e6:	f7fb ff67 	bl	80021b8 <HAL_GetREVID>
 80062ea:	4603      	mov	r3, r0
 80062ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d817      	bhi.n	8006324 <HAL_RCC_OscConfig+0x3ec>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	2b20      	cmp	r3, #32
 80062fa:	d108      	bne.n	800630e <HAL_RCC_OscConfig+0x3d6>
 80062fc:	4b4c      	ldr	r3, [pc, #304]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006304:	4a4a      	ldr	r2, [pc, #296]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 8006306:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800630a:	6053      	str	r3, [r2, #4]
 800630c:	e02e      	b.n	800636c <HAL_RCC_OscConfig+0x434>
 800630e:	4b48      	ldr	r3, [pc, #288]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	069b      	lsls	r3, r3, #26
 800631c:	4944      	ldr	r1, [pc, #272]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 800631e:	4313      	orrs	r3, r2
 8006320:	604b      	str	r3, [r1, #4]
 8006322:	e023      	b.n	800636c <HAL_RCC_OscConfig+0x434>
 8006324:	4b42      	ldr	r3, [pc, #264]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	061b      	lsls	r3, r3, #24
 8006332:	493f      	ldr	r1, [pc, #252]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 8006334:	4313      	orrs	r3, r2
 8006336:	60cb      	str	r3, [r1, #12]
 8006338:	e018      	b.n	800636c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800633a:	4b3d      	ldr	r3, [pc, #244]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a3c      	ldr	r2, [pc, #240]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 8006340:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006346:	f7fb ff07 	bl	8002158 <HAL_GetTick>
 800634a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800634c:	e008      	b.n	8006360 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800634e:	f7fb ff03 	bl	8002158 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d901      	bls.n	8006360 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e23d      	b.n	80067dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006360:	4b33      	ldr	r3, [pc, #204]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1f0      	bne.n	800634e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0308 	and.w	r3, r3, #8
 8006374:	2b00      	cmp	r3, #0
 8006376:	d036      	beq.n	80063e6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d019      	beq.n	80063b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006380:	4b2b      	ldr	r3, [pc, #172]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 8006382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006384:	4a2a      	ldr	r2, [pc, #168]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 8006386:	f043 0301 	orr.w	r3, r3, #1
 800638a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800638c:	f7fb fee4 	bl	8002158 <HAL_GetTick>
 8006390:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006394:	f7fb fee0 	bl	8002158 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e21a      	b.n	80067dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80063a6:	4b22      	ldr	r3, [pc, #136]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 80063a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d0f0      	beq.n	8006394 <HAL_RCC_OscConfig+0x45c>
 80063b2:	e018      	b.n	80063e6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063b4:	4b1e      	ldr	r3, [pc, #120]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 80063b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 80063ba:	f023 0301 	bic.w	r3, r3, #1
 80063be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063c0:	f7fb feca 	bl	8002158 <HAL_GetTick>
 80063c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063c6:	e008      	b.n	80063da <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063c8:	f7fb fec6 	bl	8002158 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e200      	b.n	80067dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063da:	4b15      	ldr	r3, [pc, #84]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 80063dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1f0      	bne.n	80063c8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0320 	and.w	r3, r3, #32
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d039      	beq.n	8006466 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d01c      	beq.n	8006434 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80063fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a0c      	ldr	r2, [pc, #48]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 8006400:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006404:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006406:	f7fb fea7 	bl	8002158 <HAL_GetTick>
 800640a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800640c:	e008      	b.n	8006420 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800640e:	f7fb fea3 	bl	8002158 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d901      	bls.n	8006420 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e1dd      	b.n	80067dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006420:	4b03      	ldr	r3, [pc, #12]	@ (8006430 <HAL_RCC_OscConfig+0x4f8>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d0f0      	beq.n	800640e <HAL_RCC_OscConfig+0x4d6>
 800642c:	e01b      	b.n	8006466 <HAL_RCC_OscConfig+0x52e>
 800642e:	bf00      	nop
 8006430:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006434:	4b9b      	ldr	r3, [pc, #620]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a9a      	ldr	r2, [pc, #616]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 800643a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800643e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006440:	f7fb fe8a 	bl	8002158 <HAL_GetTick>
 8006444:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006446:	e008      	b.n	800645a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006448:	f7fb fe86 	bl	8002158 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b02      	cmp	r3, #2
 8006454:	d901      	bls.n	800645a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e1c0      	b.n	80067dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800645a:	4b92      	ldr	r3, [pc, #584]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1f0      	bne.n	8006448 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0304 	and.w	r3, r3, #4
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 8081 	beq.w	8006576 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006474:	4b8c      	ldr	r3, [pc, #560]	@ (80066a8 <HAL_RCC_OscConfig+0x770>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a8b      	ldr	r2, [pc, #556]	@ (80066a8 <HAL_RCC_OscConfig+0x770>)
 800647a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800647e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006480:	f7fb fe6a 	bl	8002158 <HAL_GetTick>
 8006484:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006486:	e008      	b.n	800649a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006488:	f7fb fe66 	bl	8002158 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b64      	cmp	r3, #100	@ 0x64
 8006494:	d901      	bls.n	800649a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e1a0      	b.n	80067dc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800649a:	4b83      	ldr	r3, [pc, #524]	@ (80066a8 <HAL_RCC_OscConfig+0x770>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d0f0      	beq.n	8006488 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d106      	bne.n	80064bc <HAL_RCC_OscConfig+0x584>
 80064ae:	4b7d      	ldr	r3, [pc, #500]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 80064b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064b2:	4a7c      	ldr	r2, [pc, #496]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 80064b4:	f043 0301 	orr.w	r3, r3, #1
 80064b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80064ba:	e02d      	b.n	8006518 <HAL_RCC_OscConfig+0x5e0>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10c      	bne.n	80064de <HAL_RCC_OscConfig+0x5a6>
 80064c4:	4b77      	ldr	r3, [pc, #476]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 80064c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064c8:	4a76      	ldr	r2, [pc, #472]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 80064ca:	f023 0301 	bic.w	r3, r3, #1
 80064ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80064d0:	4b74      	ldr	r3, [pc, #464]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 80064d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d4:	4a73      	ldr	r2, [pc, #460]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 80064d6:	f023 0304 	bic.w	r3, r3, #4
 80064da:	6713      	str	r3, [r2, #112]	@ 0x70
 80064dc:	e01c      	b.n	8006518 <HAL_RCC_OscConfig+0x5e0>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	2b05      	cmp	r3, #5
 80064e4:	d10c      	bne.n	8006500 <HAL_RCC_OscConfig+0x5c8>
 80064e6:	4b6f      	ldr	r3, [pc, #444]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 80064e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ea:	4a6e      	ldr	r2, [pc, #440]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 80064ec:	f043 0304 	orr.w	r3, r3, #4
 80064f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80064f2:	4b6c      	ldr	r3, [pc, #432]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 80064f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064f6:	4a6b      	ldr	r2, [pc, #428]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 80064f8:	f043 0301 	orr.w	r3, r3, #1
 80064fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80064fe:	e00b      	b.n	8006518 <HAL_RCC_OscConfig+0x5e0>
 8006500:	4b68      	ldr	r3, [pc, #416]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 8006502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006504:	4a67      	ldr	r2, [pc, #412]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 8006506:	f023 0301 	bic.w	r3, r3, #1
 800650a:	6713      	str	r3, [r2, #112]	@ 0x70
 800650c:	4b65      	ldr	r3, [pc, #404]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 800650e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006510:	4a64      	ldr	r2, [pc, #400]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 8006512:	f023 0304 	bic.w	r3, r3, #4
 8006516:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d015      	beq.n	800654c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006520:	f7fb fe1a 	bl	8002158 <HAL_GetTick>
 8006524:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006526:	e00a      	b.n	800653e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006528:	f7fb fe16 	bl	8002158 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006536:	4293      	cmp	r3, r2
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e14e      	b.n	80067dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800653e:	4b59      	ldr	r3, [pc, #356]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 8006540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006542:	f003 0302 	and.w	r3, r3, #2
 8006546:	2b00      	cmp	r3, #0
 8006548:	d0ee      	beq.n	8006528 <HAL_RCC_OscConfig+0x5f0>
 800654a:	e014      	b.n	8006576 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800654c:	f7fb fe04 	bl	8002158 <HAL_GetTick>
 8006550:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006552:	e00a      	b.n	800656a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006554:	f7fb fe00 	bl	8002158 <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006562:	4293      	cmp	r3, r2
 8006564:	d901      	bls.n	800656a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e138      	b.n	80067dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800656a:	4b4e      	ldr	r3, [pc, #312]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 800656c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1ee      	bne.n	8006554 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657a:	2b00      	cmp	r3, #0
 800657c:	f000 812d 	beq.w	80067da <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006580:	4b48      	ldr	r3, [pc, #288]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006588:	2b18      	cmp	r3, #24
 800658a:	f000 80bd 	beq.w	8006708 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006592:	2b02      	cmp	r3, #2
 8006594:	f040 809e 	bne.w	80066d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006598:	4b42      	ldr	r3, [pc, #264]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a41      	ldr	r2, [pc, #260]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 800659e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a4:	f7fb fdd8 	bl	8002158 <HAL_GetTick>
 80065a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065aa:	e008      	b.n	80065be <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065ac:	f7fb fdd4 	bl	8002158 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d901      	bls.n	80065be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e10e      	b.n	80067dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065be:	4b39      	ldr	r3, [pc, #228]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1f0      	bne.n	80065ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065ca:	4b36      	ldr	r3, [pc, #216]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 80065cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065ce:	4b37      	ldr	r3, [pc, #220]	@ (80066ac <HAL_RCC_OscConfig+0x774>)
 80065d0:	4013      	ands	r3, r2
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80065da:	0112      	lsls	r2, r2, #4
 80065dc:	430a      	orrs	r2, r1
 80065de:	4931      	ldr	r1, [pc, #196]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e8:	3b01      	subs	r3, #1
 80065ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065f2:	3b01      	subs	r3, #1
 80065f4:	025b      	lsls	r3, r3, #9
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	431a      	orrs	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065fe:	3b01      	subs	r3, #1
 8006600:	041b      	lsls	r3, r3, #16
 8006602:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006606:	431a      	orrs	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800660c:	3b01      	subs	r3, #1
 800660e:	061b      	lsls	r3, r3, #24
 8006610:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006614:	4923      	ldr	r1, [pc, #140]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 8006616:	4313      	orrs	r3, r2
 8006618:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800661a:	4b22      	ldr	r3, [pc, #136]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 800661c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661e:	4a21      	ldr	r2, [pc, #132]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 8006620:	f023 0301 	bic.w	r3, r3, #1
 8006624:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006626:	4b1f      	ldr	r3, [pc, #124]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 8006628:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800662a:	4b21      	ldr	r3, [pc, #132]	@ (80066b0 <HAL_RCC_OscConfig+0x778>)
 800662c:	4013      	ands	r3, r2
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006632:	00d2      	lsls	r2, r2, #3
 8006634:	491b      	ldr	r1, [pc, #108]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 8006636:	4313      	orrs	r3, r2
 8006638:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800663a:	4b1a      	ldr	r3, [pc, #104]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 800663c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663e:	f023 020c 	bic.w	r2, r3, #12
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006646:	4917      	ldr	r1, [pc, #92]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 8006648:	4313      	orrs	r3, r2
 800664a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800664c:	4b15      	ldr	r3, [pc, #84]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 800664e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006650:	f023 0202 	bic.w	r2, r3, #2
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006658:	4912      	ldr	r1, [pc, #72]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 800665a:	4313      	orrs	r3, r2
 800665c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800665e:	4b11      	ldr	r3, [pc, #68]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 8006660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006662:	4a10      	ldr	r2, [pc, #64]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 8006664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006668:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800666a:	4b0e      	ldr	r3, [pc, #56]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 800666c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800666e:	4a0d      	ldr	r2, [pc, #52]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 8006670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006674:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006676:	4b0b      	ldr	r3, [pc, #44]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 8006678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667a:	4a0a      	ldr	r2, [pc, #40]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 800667c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006680:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006682:	4b08      	ldr	r3, [pc, #32]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 8006684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006686:	4a07      	ldr	r2, [pc, #28]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 8006688:	f043 0301 	orr.w	r3, r3, #1
 800668c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800668e:	4b05      	ldr	r3, [pc, #20]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a04      	ldr	r2, [pc, #16]	@ (80066a4 <HAL_RCC_OscConfig+0x76c>)
 8006694:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800669a:	f7fb fd5d 	bl	8002158 <HAL_GetTick>
 800669e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066a0:	e011      	b.n	80066c6 <HAL_RCC_OscConfig+0x78e>
 80066a2:	bf00      	nop
 80066a4:	58024400 	.word	0x58024400
 80066a8:	58024800 	.word	0x58024800
 80066ac:	fffffc0c 	.word	0xfffffc0c
 80066b0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066b4:	f7fb fd50 	bl	8002158 <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d901      	bls.n	80066c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e08a      	b.n	80067dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066c6:	4b47      	ldr	r3, [pc, #284]	@ (80067e4 <HAL_RCC_OscConfig+0x8ac>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0f0      	beq.n	80066b4 <HAL_RCC_OscConfig+0x77c>
 80066d2:	e082      	b.n	80067da <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066d4:	4b43      	ldr	r3, [pc, #268]	@ (80067e4 <HAL_RCC_OscConfig+0x8ac>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a42      	ldr	r2, [pc, #264]	@ (80067e4 <HAL_RCC_OscConfig+0x8ac>)
 80066da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e0:	f7fb fd3a 	bl	8002158 <HAL_GetTick>
 80066e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066e6:	e008      	b.n	80066fa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066e8:	f7fb fd36 	bl	8002158 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e070      	b.n	80067dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066fa:	4b3a      	ldr	r3, [pc, #232]	@ (80067e4 <HAL_RCC_OscConfig+0x8ac>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1f0      	bne.n	80066e8 <HAL_RCC_OscConfig+0x7b0>
 8006706:	e068      	b.n	80067da <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006708:	4b36      	ldr	r3, [pc, #216]	@ (80067e4 <HAL_RCC_OscConfig+0x8ac>)
 800670a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800670e:	4b35      	ldr	r3, [pc, #212]	@ (80067e4 <HAL_RCC_OscConfig+0x8ac>)
 8006710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006712:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006718:	2b01      	cmp	r3, #1
 800671a:	d031      	beq.n	8006780 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f003 0203 	and.w	r2, r3, #3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006726:	429a      	cmp	r2, r3
 8006728:	d12a      	bne.n	8006780 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	091b      	lsrs	r3, r3, #4
 800672e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006736:	429a      	cmp	r2, r3
 8006738:	d122      	bne.n	8006780 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006744:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006746:	429a      	cmp	r2, r3
 8006748:	d11a      	bne.n	8006780 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	0a5b      	lsrs	r3, r3, #9
 800674e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006756:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006758:	429a      	cmp	r2, r3
 800675a:	d111      	bne.n	8006780 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	0c1b      	lsrs	r3, r3, #16
 8006760:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006768:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800676a:	429a      	cmp	r2, r3
 800676c:	d108      	bne.n	8006780 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	0e1b      	lsrs	r3, r3, #24
 8006772:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800677a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800677c:	429a      	cmp	r2, r3
 800677e:	d001      	beq.n	8006784 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e02b      	b.n	80067dc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006784:	4b17      	ldr	r3, [pc, #92]	@ (80067e4 <HAL_RCC_OscConfig+0x8ac>)
 8006786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006788:	08db      	lsrs	r3, r3, #3
 800678a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800678e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	429a      	cmp	r2, r3
 8006798:	d01f      	beq.n	80067da <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800679a:	4b12      	ldr	r3, [pc, #72]	@ (80067e4 <HAL_RCC_OscConfig+0x8ac>)
 800679c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679e:	4a11      	ldr	r2, [pc, #68]	@ (80067e4 <HAL_RCC_OscConfig+0x8ac>)
 80067a0:	f023 0301 	bic.w	r3, r3, #1
 80067a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80067a6:	f7fb fcd7 	bl	8002158 <HAL_GetTick>
 80067aa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80067ac:	bf00      	nop
 80067ae:	f7fb fcd3 	bl	8002158 <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d0f9      	beq.n	80067ae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80067ba:	4b0a      	ldr	r3, [pc, #40]	@ (80067e4 <HAL_RCC_OscConfig+0x8ac>)
 80067bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067be:	4b0a      	ldr	r3, [pc, #40]	@ (80067e8 <HAL_RCC_OscConfig+0x8b0>)
 80067c0:	4013      	ands	r3, r2
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80067c6:	00d2      	lsls	r2, r2, #3
 80067c8:	4906      	ldr	r1, [pc, #24]	@ (80067e4 <HAL_RCC_OscConfig+0x8ac>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80067ce:	4b05      	ldr	r3, [pc, #20]	@ (80067e4 <HAL_RCC_OscConfig+0x8ac>)
 80067d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d2:	4a04      	ldr	r2, [pc, #16]	@ (80067e4 <HAL_RCC_OscConfig+0x8ac>)
 80067d4:	f043 0301 	orr.w	r3, r3, #1
 80067d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3730      	adds	r7, #48	@ 0x30
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	58024400 	.word	0x58024400
 80067e8:	ffff0007 	.word	0xffff0007

080067ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e19c      	b.n	8006b3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006800:	4b8a      	ldr	r3, [pc, #552]	@ (8006a2c <HAL_RCC_ClockConfig+0x240>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 030f 	and.w	r3, r3, #15
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d910      	bls.n	8006830 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800680e:	4b87      	ldr	r3, [pc, #540]	@ (8006a2c <HAL_RCC_ClockConfig+0x240>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f023 020f 	bic.w	r2, r3, #15
 8006816:	4985      	ldr	r1, [pc, #532]	@ (8006a2c <HAL_RCC_ClockConfig+0x240>)
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	4313      	orrs	r3, r2
 800681c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800681e:	4b83      	ldr	r3, [pc, #524]	@ (8006a2c <HAL_RCC_ClockConfig+0x240>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	429a      	cmp	r2, r3
 800682a:	d001      	beq.n	8006830 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e184      	b.n	8006b3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0304 	and.w	r3, r3, #4
 8006838:	2b00      	cmp	r3, #0
 800683a:	d010      	beq.n	800685e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	691a      	ldr	r2, [r3, #16]
 8006840:	4b7b      	ldr	r3, [pc, #492]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006848:	429a      	cmp	r2, r3
 800684a:	d908      	bls.n	800685e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800684c:	4b78      	ldr	r3, [pc, #480]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	4975      	ldr	r1, [pc, #468]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 800685a:	4313      	orrs	r3, r2
 800685c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0308 	and.w	r3, r3, #8
 8006866:	2b00      	cmp	r3, #0
 8006868:	d010      	beq.n	800688c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	695a      	ldr	r2, [r3, #20]
 800686e:	4b70      	ldr	r3, [pc, #448]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006876:	429a      	cmp	r2, r3
 8006878:	d908      	bls.n	800688c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800687a:	4b6d      	ldr	r3, [pc, #436]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	496a      	ldr	r1, [pc, #424]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 8006888:	4313      	orrs	r3, r2
 800688a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0310 	and.w	r3, r3, #16
 8006894:	2b00      	cmp	r3, #0
 8006896:	d010      	beq.n	80068ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	699a      	ldr	r2, [r3, #24]
 800689c:	4b64      	ldr	r3, [pc, #400]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 800689e:	69db      	ldr	r3, [r3, #28]
 80068a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d908      	bls.n	80068ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80068a8:	4b61      	ldr	r3, [pc, #388]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 80068aa:	69db      	ldr	r3, [r3, #28]
 80068ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	495e      	ldr	r1, [pc, #376]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0320 	and.w	r3, r3, #32
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d010      	beq.n	80068e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	69da      	ldr	r2, [r3, #28]
 80068ca:	4b59      	ldr	r3, [pc, #356]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d908      	bls.n	80068e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80068d6:	4b56      	ldr	r3, [pc, #344]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	4953      	ldr	r1, [pc, #332]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d010      	beq.n	8006916 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	4b4d      	ldr	r3, [pc, #308]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	f003 030f 	and.w	r3, r3, #15
 8006900:	429a      	cmp	r2, r3
 8006902:	d908      	bls.n	8006916 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006904:	4b4a      	ldr	r3, [pc, #296]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	f023 020f 	bic.w	r2, r3, #15
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	4947      	ldr	r1, [pc, #284]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 8006912:	4313      	orrs	r3, r2
 8006914:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d055      	beq.n	80069ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006922:	4b43      	ldr	r3, [pc, #268]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	4940      	ldr	r1, [pc, #256]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 8006930:	4313      	orrs	r3, r2
 8006932:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	2b02      	cmp	r3, #2
 800693a:	d107      	bne.n	800694c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800693c:	4b3c      	ldr	r3, [pc, #240]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d121      	bne.n	800698c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e0f6      	b.n	8006b3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	2b03      	cmp	r3, #3
 8006952:	d107      	bne.n	8006964 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006954:	4b36      	ldr	r3, [pc, #216]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d115      	bne.n	800698c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e0ea      	b.n	8006b3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d107      	bne.n	800697c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800696c:	4b30      	ldr	r3, [pc, #192]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006974:	2b00      	cmp	r3, #0
 8006976:	d109      	bne.n	800698c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e0de      	b.n	8006b3a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800697c:	4b2c      	ldr	r3, [pc, #176]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b00      	cmp	r3, #0
 8006986:	d101      	bne.n	800698c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e0d6      	b.n	8006b3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800698c:	4b28      	ldr	r3, [pc, #160]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	f023 0207 	bic.w	r2, r3, #7
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	4925      	ldr	r1, [pc, #148]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 800699a:	4313      	orrs	r3, r2
 800699c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800699e:	f7fb fbdb 	bl	8002158 <HAL_GetTick>
 80069a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069a4:	e00a      	b.n	80069bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069a6:	f7fb fbd7 	bl	8002158 <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d901      	bls.n	80069bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e0be      	b.n	8006b3a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	00db      	lsls	r3, r3, #3
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d1eb      	bne.n	80069a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d010      	beq.n	80069fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68da      	ldr	r2, [r3, #12]
 80069de:	4b14      	ldr	r3, [pc, #80]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	f003 030f 	and.w	r3, r3, #15
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d208      	bcs.n	80069fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069ea:	4b11      	ldr	r3, [pc, #68]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	f023 020f 	bic.w	r2, r3, #15
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	490e      	ldr	r1, [pc, #56]	@ (8006a30 <HAL_RCC_ClockConfig+0x244>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069fc:	4b0b      	ldr	r3, [pc, #44]	@ (8006a2c <HAL_RCC_ClockConfig+0x240>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 030f 	and.w	r3, r3, #15
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d214      	bcs.n	8006a34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a0a:	4b08      	ldr	r3, [pc, #32]	@ (8006a2c <HAL_RCC_ClockConfig+0x240>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f023 020f 	bic.w	r2, r3, #15
 8006a12:	4906      	ldr	r1, [pc, #24]	@ (8006a2c <HAL_RCC_ClockConfig+0x240>)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a1a:	4b04      	ldr	r3, [pc, #16]	@ (8006a2c <HAL_RCC_ClockConfig+0x240>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 030f 	and.w	r3, r3, #15
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d005      	beq.n	8006a34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e086      	b.n	8006b3a <HAL_RCC_ClockConfig+0x34e>
 8006a2c:	52002000 	.word	0x52002000
 8006a30:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0304 	and.w	r3, r3, #4
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d010      	beq.n	8006a62 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	691a      	ldr	r2, [r3, #16]
 8006a44:	4b3f      	ldr	r3, [pc, #252]	@ (8006b44 <HAL_RCC_ClockConfig+0x358>)
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d208      	bcs.n	8006a62 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a50:	4b3c      	ldr	r3, [pc, #240]	@ (8006b44 <HAL_RCC_ClockConfig+0x358>)
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	4939      	ldr	r1, [pc, #228]	@ (8006b44 <HAL_RCC_ClockConfig+0x358>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0308 	and.w	r3, r3, #8
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d010      	beq.n	8006a90 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	695a      	ldr	r2, [r3, #20]
 8006a72:	4b34      	ldr	r3, [pc, #208]	@ (8006b44 <HAL_RCC_ClockConfig+0x358>)
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d208      	bcs.n	8006a90 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a7e:	4b31      	ldr	r3, [pc, #196]	@ (8006b44 <HAL_RCC_ClockConfig+0x358>)
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	492e      	ldr	r1, [pc, #184]	@ (8006b44 <HAL_RCC_ClockConfig+0x358>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0310 	and.w	r3, r3, #16
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d010      	beq.n	8006abe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	699a      	ldr	r2, [r3, #24]
 8006aa0:	4b28      	ldr	r3, [pc, #160]	@ (8006b44 <HAL_RCC_ClockConfig+0x358>)
 8006aa2:	69db      	ldr	r3, [r3, #28]
 8006aa4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d208      	bcs.n	8006abe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006aac:	4b25      	ldr	r3, [pc, #148]	@ (8006b44 <HAL_RCC_ClockConfig+0x358>)
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	4922      	ldr	r1, [pc, #136]	@ (8006b44 <HAL_RCC_ClockConfig+0x358>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0320 	and.w	r3, r3, #32
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d010      	beq.n	8006aec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	69da      	ldr	r2, [r3, #28]
 8006ace:	4b1d      	ldr	r3, [pc, #116]	@ (8006b44 <HAL_RCC_ClockConfig+0x358>)
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d208      	bcs.n	8006aec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006ada:	4b1a      	ldr	r3, [pc, #104]	@ (8006b44 <HAL_RCC_ClockConfig+0x358>)
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	4917      	ldr	r1, [pc, #92]	@ (8006b44 <HAL_RCC_ClockConfig+0x358>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006aec:	f000 f834 	bl	8006b58 <HAL_RCC_GetSysClockFreq>
 8006af0:	4602      	mov	r2, r0
 8006af2:	4b14      	ldr	r3, [pc, #80]	@ (8006b44 <HAL_RCC_ClockConfig+0x358>)
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	0a1b      	lsrs	r3, r3, #8
 8006af8:	f003 030f 	and.w	r3, r3, #15
 8006afc:	4912      	ldr	r1, [pc, #72]	@ (8006b48 <HAL_RCC_ClockConfig+0x35c>)
 8006afe:	5ccb      	ldrb	r3, [r1, r3]
 8006b00:	f003 031f 	and.w	r3, r3, #31
 8006b04:	fa22 f303 	lsr.w	r3, r2, r3
 8006b08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8006b44 <HAL_RCC_ClockConfig+0x358>)
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	f003 030f 	and.w	r3, r3, #15
 8006b12:	4a0d      	ldr	r2, [pc, #52]	@ (8006b48 <HAL_RCC_ClockConfig+0x35c>)
 8006b14:	5cd3      	ldrb	r3, [r2, r3]
 8006b16:	f003 031f 	and.w	r3, r3, #31
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b20:	4a0a      	ldr	r2, [pc, #40]	@ (8006b4c <HAL_RCC_ClockConfig+0x360>)
 8006b22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b24:	4a0a      	ldr	r2, [pc, #40]	@ (8006b50 <HAL_RCC_ClockConfig+0x364>)
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8006b54 <HAL_RCC_ClockConfig+0x368>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7fa fec8 	bl	80018c4 <HAL_InitTick>
 8006b34:	4603      	mov	r3, r0
 8006b36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3718      	adds	r7, #24
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	58024400 	.word	0x58024400
 8006b48:	0801c2f8 	.word	0x0801c2f8
 8006b4c:	24000008 	.word	0x24000008
 8006b50:	24000004 	.word	0x24000004
 8006b54:	2400000c 	.word	0x2400000c

08006b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b089      	sub	sp, #36	@ 0x24
 8006b5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b5e:	4bb3      	ldr	r3, [pc, #716]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b66:	2b18      	cmp	r3, #24
 8006b68:	f200 8155 	bhi.w	8006e16 <HAL_RCC_GetSysClockFreq+0x2be>
 8006b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b72:	bf00      	nop
 8006b74:	08006bd9 	.word	0x08006bd9
 8006b78:	08006e17 	.word	0x08006e17
 8006b7c:	08006e17 	.word	0x08006e17
 8006b80:	08006e17 	.word	0x08006e17
 8006b84:	08006e17 	.word	0x08006e17
 8006b88:	08006e17 	.word	0x08006e17
 8006b8c:	08006e17 	.word	0x08006e17
 8006b90:	08006e17 	.word	0x08006e17
 8006b94:	08006bff 	.word	0x08006bff
 8006b98:	08006e17 	.word	0x08006e17
 8006b9c:	08006e17 	.word	0x08006e17
 8006ba0:	08006e17 	.word	0x08006e17
 8006ba4:	08006e17 	.word	0x08006e17
 8006ba8:	08006e17 	.word	0x08006e17
 8006bac:	08006e17 	.word	0x08006e17
 8006bb0:	08006e17 	.word	0x08006e17
 8006bb4:	08006c05 	.word	0x08006c05
 8006bb8:	08006e17 	.word	0x08006e17
 8006bbc:	08006e17 	.word	0x08006e17
 8006bc0:	08006e17 	.word	0x08006e17
 8006bc4:	08006e17 	.word	0x08006e17
 8006bc8:	08006e17 	.word	0x08006e17
 8006bcc:	08006e17 	.word	0x08006e17
 8006bd0:	08006e17 	.word	0x08006e17
 8006bd4:	08006c0b 	.word	0x08006c0b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bd8:	4b94      	ldr	r3, [pc, #592]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0320 	and.w	r3, r3, #32
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d009      	beq.n	8006bf8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006be4:	4b91      	ldr	r3, [pc, #580]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	08db      	lsrs	r3, r3, #3
 8006bea:	f003 0303 	and.w	r3, r3, #3
 8006bee:	4a90      	ldr	r2, [pc, #576]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bf4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006bf6:	e111      	b.n	8006e1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006bf8:	4b8d      	ldr	r3, [pc, #564]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bfa:	61bb      	str	r3, [r7, #24]
      break;
 8006bfc:	e10e      	b.n	8006e1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006bfe:	4b8d      	ldr	r3, [pc, #564]	@ (8006e34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c00:	61bb      	str	r3, [r7, #24]
      break;
 8006c02:	e10b      	b.n	8006e1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006c04:	4b8c      	ldr	r3, [pc, #560]	@ (8006e38 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006c06:	61bb      	str	r3, [r7, #24]
      break;
 8006c08:	e108      	b.n	8006e1c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c0a:	4b88      	ldr	r3, [pc, #544]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c0e:	f003 0303 	and.w	r3, r3, #3
 8006c12:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006c14:	4b85      	ldr	r3, [pc, #532]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c18:	091b      	lsrs	r3, r3, #4
 8006c1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c1e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006c20:	4b82      	ldr	r3, [pc, #520]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006c2a:	4b80      	ldr	r3, [pc, #512]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c2e:	08db      	lsrs	r3, r3, #3
 8006c30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	fb02 f303 	mul.w	r3, r2, r3
 8006c3a:	ee07 3a90 	vmov	s15, r3
 8006c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c42:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 80e1 	beq.w	8006e10 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	f000 8083 	beq.w	8006d5c <HAL_RCC_GetSysClockFreq+0x204>
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	f200 80a1 	bhi.w	8006da0 <HAL_RCC_GetSysClockFreq+0x248>
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d003      	beq.n	8006c6c <HAL_RCC_GetSysClockFreq+0x114>
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d056      	beq.n	8006d18 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006c6a:	e099      	b.n	8006da0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c6c:	4b6f      	ldr	r3, [pc, #444]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0320 	and.w	r3, r3, #32
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d02d      	beq.n	8006cd4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c78:	4b6c      	ldr	r3, [pc, #432]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	08db      	lsrs	r3, r3, #3
 8006c7e:	f003 0303 	and.w	r3, r3, #3
 8006c82:	4a6b      	ldr	r2, [pc, #428]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c84:	fa22 f303 	lsr.w	r3, r2, r3
 8006c88:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	ee07 3a90 	vmov	s15, r3
 8006c90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	ee07 3a90 	vmov	s15, r3
 8006c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ca2:	4b62      	ldr	r3, [pc, #392]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006caa:	ee07 3a90 	vmov	s15, r3
 8006cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cb6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006cd2:	e087      	b.n	8006de4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	ee07 3a90 	vmov	s15, r3
 8006cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cde:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006e40 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ce6:	4b51      	ldr	r3, [pc, #324]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cee:	ee07 3a90 	vmov	s15, r3
 8006cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cfa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d16:	e065      	b.n	8006de4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	ee07 3a90 	vmov	s15, r3
 8006d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d22:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006e44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d2a:	4b40      	ldr	r3, [pc, #256]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d32:	ee07 3a90 	vmov	s15, r3
 8006d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d3e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d5a:	e043      	b.n	8006de4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	ee07 3a90 	vmov	s15, r3
 8006d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d66:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006e48 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d76:	ee07 3a90 	vmov	s15, r3
 8006d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d82:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d9e:	e021      	b.n	8006de4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006daa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006e44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006db2:	4b1e      	ldr	r3, [pc, #120]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dba:	ee07 3a90 	vmov	s15, r3
 8006dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dc6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006de2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006de4:	4b11      	ldr	r3, [pc, #68]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006de8:	0a5b      	lsrs	r3, r3, #9
 8006dea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dee:	3301      	adds	r3, #1
 8006df0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	ee07 3a90 	vmov	s15, r3
 8006df8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006dfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e08:	ee17 3a90 	vmov	r3, s15
 8006e0c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006e0e:	e005      	b.n	8006e1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	61bb      	str	r3, [r7, #24]
      break;
 8006e14:	e002      	b.n	8006e1c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006e16:	4b07      	ldr	r3, [pc, #28]	@ (8006e34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e18:	61bb      	str	r3, [r7, #24]
      break;
 8006e1a:	bf00      	nop
  }

  return sysclockfreq;
 8006e1c:	69bb      	ldr	r3, [r7, #24]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3724      	adds	r7, #36	@ 0x24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	58024400 	.word	0x58024400
 8006e30:	03d09000 	.word	0x03d09000
 8006e34:	003d0900 	.word	0x003d0900
 8006e38:	007a1200 	.word	0x007a1200
 8006e3c:	46000000 	.word	0x46000000
 8006e40:	4c742400 	.word	0x4c742400
 8006e44:	4a742400 	.word	0x4a742400
 8006e48:	4af42400 	.word	0x4af42400

08006e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006e52:	f7ff fe81 	bl	8006b58 <HAL_RCC_GetSysClockFreq>
 8006e56:	4602      	mov	r2, r0
 8006e58:	4b10      	ldr	r3, [pc, #64]	@ (8006e9c <HAL_RCC_GetHCLKFreq+0x50>)
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	0a1b      	lsrs	r3, r3, #8
 8006e5e:	f003 030f 	and.w	r3, r3, #15
 8006e62:	490f      	ldr	r1, [pc, #60]	@ (8006ea0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e64:	5ccb      	ldrb	r3, [r1, r3]
 8006e66:	f003 031f 	and.w	r3, r3, #31
 8006e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e70:	4b0a      	ldr	r3, [pc, #40]	@ (8006e9c <HAL_RCC_GetHCLKFreq+0x50>)
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	f003 030f 	and.w	r3, r3, #15
 8006e78:	4a09      	ldr	r2, [pc, #36]	@ (8006ea0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e7a:	5cd3      	ldrb	r3, [r2, r3]
 8006e7c:	f003 031f 	and.w	r3, r3, #31
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	fa22 f303 	lsr.w	r3, r2, r3
 8006e86:	4a07      	ldr	r2, [pc, #28]	@ (8006ea4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006e88:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e8a:	4a07      	ldr	r2, [pc, #28]	@ (8006ea8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006e90:	4b04      	ldr	r3, [pc, #16]	@ (8006ea4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006e92:	681b      	ldr	r3, [r3, #0]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	58024400 	.word	0x58024400
 8006ea0:	0801c2f8 	.word	0x0801c2f8
 8006ea4:	24000008 	.word	0x24000008
 8006ea8:	24000004 	.word	0x24000004

08006eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006eb0:	f7ff ffcc 	bl	8006e4c <HAL_RCC_GetHCLKFreq>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	4b06      	ldr	r3, [pc, #24]	@ (8006ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	091b      	lsrs	r3, r3, #4
 8006ebc:	f003 0307 	and.w	r3, r3, #7
 8006ec0:	4904      	ldr	r1, [pc, #16]	@ (8006ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ec2:	5ccb      	ldrb	r3, [r1, r3]
 8006ec4:	f003 031f 	and.w	r3, r3, #31
 8006ec8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	58024400 	.word	0x58024400
 8006ed4:	0801c2f8 	.word	0x0801c2f8

08006ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006edc:	f7ff ffb6 	bl	8006e4c <HAL_RCC_GetHCLKFreq>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	4b06      	ldr	r3, [pc, #24]	@ (8006efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ee4:	69db      	ldr	r3, [r3, #28]
 8006ee6:	0a1b      	lsrs	r3, r3, #8
 8006ee8:	f003 0307 	and.w	r3, r3, #7
 8006eec:	4904      	ldr	r1, [pc, #16]	@ (8006f00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006eee:	5ccb      	ldrb	r3, [r1, r3]
 8006ef0:	f003 031f 	and.w	r3, r3, #31
 8006ef4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	58024400 	.word	0x58024400
 8006f00:	0801c2f8 	.word	0x0801c2f8

08006f04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	223f      	movs	r2, #63	@ 0x3f
 8006f12:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f14:	4b1a      	ldr	r3, [pc, #104]	@ (8006f80 <HAL_RCC_GetClockConfig+0x7c>)
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	f003 0207 	and.w	r2, r3, #7
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006f20:	4b17      	ldr	r3, [pc, #92]	@ (8006f80 <HAL_RCC_GetClockConfig+0x7c>)
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006f2c:	4b14      	ldr	r3, [pc, #80]	@ (8006f80 <HAL_RCC_GetClockConfig+0x7c>)
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	f003 020f 	and.w	r2, r3, #15
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006f38:	4b11      	ldr	r3, [pc, #68]	@ (8006f80 <HAL_RCC_GetClockConfig+0x7c>)
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006f44:	4b0e      	ldr	r3, [pc, #56]	@ (8006f80 <HAL_RCC_GetClockConfig+0x7c>)
 8006f46:	69db      	ldr	r3, [r3, #28]
 8006f48:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006f50:	4b0b      	ldr	r3, [pc, #44]	@ (8006f80 <HAL_RCC_GetClockConfig+0x7c>)
 8006f52:	69db      	ldr	r3, [r3, #28]
 8006f54:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006f5c:	4b08      	ldr	r3, [pc, #32]	@ (8006f80 <HAL_RCC_GetClockConfig+0x7c>)
 8006f5e:	6a1b      	ldr	r3, [r3, #32]
 8006f60:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f68:	4b06      	ldr	r3, [pc, #24]	@ (8006f84 <HAL_RCC_GetClockConfig+0x80>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 020f 	and.w	r2, r3, #15
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	601a      	str	r2, [r3, #0]
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr
 8006f80:	58024400 	.word	0x58024400
 8006f84:	52002000 	.word	0x52002000

08006f88 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f8c:	b0ca      	sub	sp, #296	@ 0x128
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f94:	2300      	movs	r3, #0
 8006f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006fac:	2500      	movs	r5, #0
 8006fae:	ea54 0305 	orrs.w	r3, r4, r5
 8006fb2:	d049      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006fba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fbe:	d02f      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006fc0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fc4:	d828      	bhi.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006fc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fca:	d01a      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006fcc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fd0:	d822      	bhi.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006fd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fda:	d007      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006fdc:	e01c      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fde:	4bb8      	ldr	r3, [pc, #736]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe2:	4ab7      	ldr	r2, [pc, #732]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fe8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006fea:	e01a      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff0:	3308      	adds	r3, #8
 8006ff2:	2102      	movs	r1, #2
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f001 fc8f 	bl	8008918 <RCCEx_PLL2_Config>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007000:	e00f      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007006:	3328      	adds	r3, #40	@ 0x28
 8007008:	2102      	movs	r1, #2
 800700a:	4618      	mov	r0, r3
 800700c:	f001 fd36 	bl	8008a7c <RCCEx_PLL3_Config>
 8007010:	4603      	mov	r3, r0
 8007012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007016:	e004      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800701e:	e000      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10a      	bne.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800702a:	4ba5      	ldr	r3, [pc, #660]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800702c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800702e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007036:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007038:	4aa1      	ldr	r2, [pc, #644]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800703a:	430b      	orrs	r3, r1
 800703c:	6513      	str	r3, [r2, #80]	@ 0x50
 800703e:	e003      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007040:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007044:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800704c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007050:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007054:	f04f 0900 	mov.w	r9, #0
 8007058:	ea58 0309 	orrs.w	r3, r8, r9
 800705c:	d047      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800705e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007064:	2b04      	cmp	r3, #4
 8007066:	d82a      	bhi.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007068:	a201      	add	r2, pc, #4	@ (adr r2, 8007070 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800706a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706e:	bf00      	nop
 8007070:	08007085 	.word	0x08007085
 8007074:	08007093 	.word	0x08007093
 8007078:	080070a9 	.word	0x080070a9
 800707c:	080070c7 	.word	0x080070c7
 8007080:	080070c7 	.word	0x080070c7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007084:	4b8e      	ldr	r3, [pc, #568]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007088:	4a8d      	ldr	r2, [pc, #564]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800708a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800708e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007090:	e01a      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007096:	3308      	adds	r3, #8
 8007098:	2100      	movs	r1, #0
 800709a:	4618      	mov	r0, r3
 800709c:	f001 fc3c 	bl	8008918 <RCCEx_PLL2_Config>
 80070a0:	4603      	mov	r3, r0
 80070a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070a6:	e00f      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ac:	3328      	adds	r3, #40	@ 0x28
 80070ae:	2100      	movs	r1, #0
 80070b0:	4618      	mov	r0, r3
 80070b2:	f001 fce3 	bl	8008a7c <RCCEx_PLL3_Config>
 80070b6:	4603      	mov	r3, r0
 80070b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070bc:	e004      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070c4:	e000      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80070c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10a      	bne.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070d0:	4b7b      	ldr	r3, [pc, #492]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070d4:	f023 0107 	bic.w	r1, r3, #7
 80070d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070de:	4a78      	ldr	r2, [pc, #480]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070e0:	430b      	orrs	r3, r1
 80070e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80070e4:	e003      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80070ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80070fa:	f04f 0b00 	mov.w	fp, #0
 80070fe:	ea5a 030b 	orrs.w	r3, sl, fp
 8007102:	d04c      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800710a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800710e:	d030      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007110:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007114:	d829      	bhi.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007116:	2bc0      	cmp	r3, #192	@ 0xc0
 8007118:	d02d      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800711a:	2bc0      	cmp	r3, #192	@ 0xc0
 800711c:	d825      	bhi.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800711e:	2b80      	cmp	r3, #128	@ 0x80
 8007120:	d018      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007122:	2b80      	cmp	r3, #128	@ 0x80
 8007124:	d821      	bhi.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007126:	2b00      	cmp	r3, #0
 8007128:	d002      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800712a:	2b40      	cmp	r3, #64	@ 0x40
 800712c:	d007      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800712e:	e01c      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007130:	4b63      	ldr	r3, [pc, #396]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007134:	4a62      	ldr	r2, [pc, #392]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007136:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800713a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800713c:	e01c      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800713e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007142:	3308      	adds	r3, #8
 8007144:	2100      	movs	r1, #0
 8007146:	4618      	mov	r0, r3
 8007148:	f001 fbe6 	bl	8008918 <RCCEx_PLL2_Config>
 800714c:	4603      	mov	r3, r0
 800714e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007152:	e011      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007158:	3328      	adds	r3, #40	@ 0x28
 800715a:	2100      	movs	r1, #0
 800715c:	4618      	mov	r0, r3
 800715e:	f001 fc8d 	bl	8008a7c <RCCEx_PLL3_Config>
 8007162:	4603      	mov	r3, r0
 8007164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007168:	e006      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007170:	e002      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007172:	bf00      	nop
 8007174:	e000      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007176:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007178:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10a      	bne.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007180:	4b4f      	ldr	r3, [pc, #316]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007184:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800718c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800718e:	4a4c      	ldr	r2, [pc, #304]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007190:	430b      	orrs	r3, r1
 8007192:	6513      	str	r3, [r2, #80]	@ 0x50
 8007194:	e003      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800719a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800719e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80071aa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80071ae:	2300      	movs	r3, #0
 80071b0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80071b4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80071b8:	460b      	mov	r3, r1
 80071ba:	4313      	orrs	r3, r2
 80071bc:	d053      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80071be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80071c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80071ca:	d035      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80071cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80071d0:	d82e      	bhi.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80071d2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80071d6:	d031      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80071d8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80071dc:	d828      	bhi.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80071de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071e2:	d01a      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80071e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071e8:	d822      	bhi.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80071ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071f2:	d007      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80071f4:	e01c      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071f6:	4b32      	ldr	r3, [pc, #200]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071fa:	4a31      	ldr	r2, [pc, #196]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007200:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007202:	e01c      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007208:	3308      	adds	r3, #8
 800720a:	2100      	movs	r1, #0
 800720c:	4618      	mov	r0, r3
 800720e:	f001 fb83 	bl	8008918 <RCCEx_PLL2_Config>
 8007212:	4603      	mov	r3, r0
 8007214:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007218:	e011      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800721a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800721e:	3328      	adds	r3, #40	@ 0x28
 8007220:	2100      	movs	r1, #0
 8007222:	4618      	mov	r0, r3
 8007224:	f001 fc2a 	bl	8008a7c <RCCEx_PLL3_Config>
 8007228:	4603      	mov	r3, r0
 800722a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800722e:	e006      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007236:	e002      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007238:	bf00      	nop
 800723a:	e000      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800723c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800723e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10b      	bne.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007246:	4b1e      	ldr	r3, [pc, #120]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800724a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800724e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007252:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007256:	4a1a      	ldr	r2, [pc, #104]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007258:	430b      	orrs	r3, r1
 800725a:	6593      	str	r3, [r2, #88]	@ 0x58
 800725c:	e003      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800725e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007262:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800726a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007272:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007276:	2300      	movs	r3, #0
 8007278:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800727c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007280:	460b      	mov	r3, r1
 8007282:	4313      	orrs	r3, r2
 8007284:	d056      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800728a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800728e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007292:	d038      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007294:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007298:	d831      	bhi.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 800729a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800729e:	d034      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80072a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80072a4:	d82b      	bhi.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80072a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072aa:	d01d      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80072ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072b0:	d825      	bhi.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d006      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80072b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072ba:	d00a      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80072bc:	e01f      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80072be:	bf00      	nop
 80072c0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072c4:	4ba2      	ldr	r3, [pc, #648]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c8:	4aa1      	ldr	r2, [pc, #644]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072d0:	e01c      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d6:	3308      	adds	r3, #8
 80072d8:	2100      	movs	r1, #0
 80072da:	4618      	mov	r0, r3
 80072dc:	f001 fb1c 	bl	8008918 <RCCEx_PLL2_Config>
 80072e0:	4603      	mov	r3, r0
 80072e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80072e6:	e011      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ec:	3328      	adds	r3, #40	@ 0x28
 80072ee:	2100      	movs	r1, #0
 80072f0:	4618      	mov	r0, r3
 80072f2:	f001 fbc3 	bl	8008a7c <RCCEx_PLL3_Config>
 80072f6:	4603      	mov	r3, r0
 80072f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072fc:	e006      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007304:	e002      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007306:	bf00      	nop
 8007308:	e000      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800730a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800730c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10b      	bne.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007314:	4b8e      	ldr	r3, [pc, #568]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007318:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800731c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007320:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007324:	4a8a      	ldr	r2, [pc, #552]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007326:	430b      	orrs	r3, r1
 8007328:	6593      	str	r3, [r2, #88]	@ 0x58
 800732a:	e003      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800732c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007330:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007340:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007344:	2300      	movs	r3, #0
 8007346:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800734a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800734e:	460b      	mov	r3, r1
 8007350:	4313      	orrs	r3, r2
 8007352:	d03a      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800735a:	2b30      	cmp	r3, #48	@ 0x30
 800735c:	d01f      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800735e:	2b30      	cmp	r3, #48	@ 0x30
 8007360:	d819      	bhi.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007362:	2b20      	cmp	r3, #32
 8007364:	d00c      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007366:	2b20      	cmp	r3, #32
 8007368:	d815      	bhi.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800736a:	2b00      	cmp	r3, #0
 800736c:	d019      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800736e:	2b10      	cmp	r3, #16
 8007370:	d111      	bne.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007372:	4b77      	ldr	r3, [pc, #476]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007376:	4a76      	ldr	r2, [pc, #472]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800737c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800737e:	e011      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007384:	3308      	adds	r3, #8
 8007386:	2102      	movs	r1, #2
 8007388:	4618      	mov	r0, r3
 800738a:	f001 fac5 	bl	8008918 <RCCEx_PLL2_Config>
 800738e:	4603      	mov	r3, r0
 8007390:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007394:	e006      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800739c:	e002      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800739e:	bf00      	nop
 80073a0:	e000      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80073a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10a      	bne.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80073ac:	4b68      	ldr	r3, [pc, #416]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073b0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80073b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073ba:	4a65      	ldr	r2, [pc, #404]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073bc:	430b      	orrs	r3, r1
 80073be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80073c0:	e003      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80073ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80073d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80073da:	2300      	movs	r3, #0
 80073dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80073e0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80073e4:	460b      	mov	r3, r1
 80073e6:	4313      	orrs	r3, r2
 80073e8:	d051      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80073ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073f4:	d035      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80073f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073fa:	d82e      	bhi.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80073fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007400:	d031      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007402:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007406:	d828      	bhi.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007408:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800740c:	d01a      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800740e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007412:	d822      	bhi.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007414:	2b00      	cmp	r3, #0
 8007416:	d003      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007418:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800741c:	d007      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800741e:	e01c      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007420:	4b4b      	ldr	r3, [pc, #300]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007424:	4a4a      	ldr	r2, [pc, #296]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007426:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800742a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800742c:	e01c      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800742e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007432:	3308      	adds	r3, #8
 8007434:	2100      	movs	r1, #0
 8007436:	4618      	mov	r0, r3
 8007438:	f001 fa6e 	bl	8008918 <RCCEx_PLL2_Config>
 800743c:	4603      	mov	r3, r0
 800743e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007442:	e011      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007448:	3328      	adds	r3, #40	@ 0x28
 800744a:	2100      	movs	r1, #0
 800744c:	4618      	mov	r0, r3
 800744e:	f001 fb15 	bl	8008a7c <RCCEx_PLL3_Config>
 8007452:	4603      	mov	r3, r0
 8007454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007458:	e006      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007460:	e002      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007462:	bf00      	nop
 8007464:	e000      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007466:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10a      	bne.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007470:	4b37      	ldr	r3, [pc, #220]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007474:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800747c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800747e:	4a34      	ldr	r2, [pc, #208]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007480:	430b      	orrs	r3, r1
 8007482:	6513      	str	r3, [r2, #80]	@ 0x50
 8007484:	e003      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007486:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800748a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800748e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007496:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800749a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800749e:	2300      	movs	r3, #0
 80074a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80074a4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80074a8:	460b      	mov	r3, r1
 80074aa:	4313      	orrs	r3, r2
 80074ac:	d056      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80074ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074b8:	d033      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80074ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074be:	d82c      	bhi.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80074c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074c4:	d02f      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80074c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074ca:	d826      	bhi.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80074cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074d0:	d02b      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80074d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074d6:	d820      	bhi.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80074d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074dc:	d012      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80074de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074e2:	d81a      	bhi.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d022      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80074e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074ec:	d115      	bne.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f2:	3308      	adds	r3, #8
 80074f4:	2101      	movs	r1, #1
 80074f6:	4618      	mov	r0, r3
 80074f8:	f001 fa0e 	bl	8008918 <RCCEx_PLL2_Config>
 80074fc:	4603      	mov	r3, r0
 80074fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007502:	e015      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007508:	3328      	adds	r3, #40	@ 0x28
 800750a:	2101      	movs	r1, #1
 800750c:	4618      	mov	r0, r3
 800750e:	f001 fab5 	bl	8008a7c <RCCEx_PLL3_Config>
 8007512:	4603      	mov	r3, r0
 8007514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007518:	e00a      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007520:	e006      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007522:	bf00      	nop
 8007524:	e004      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007526:	bf00      	nop
 8007528:	e002      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800752a:	bf00      	nop
 800752c:	e000      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800752e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007530:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10d      	bne.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007538:	4b05      	ldr	r3, [pc, #20]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800753a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800753c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007544:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007546:	4a02      	ldr	r2, [pc, #8]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007548:	430b      	orrs	r3, r1
 800754a:	6513      	str	r3, [r2, #80]	@ 0x50
 800754c:	e006      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800754e:	bf00      	nop
 8007550:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007554:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007558:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800755c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007564:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007568:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800756c:	2300      	movs	r3, #0
 800756e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007572:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007576:	460b      	mov	r3, r1
 8007578:	4313      	orrs	r3, r2
 800757a:	d055      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800757c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007580:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007584:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007588:	d033      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800758a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800758e:	d82c      	bhi.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007594:	d02f      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800759a:	d826      	bhi.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800759c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075a0:	d02b      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x672>
 80075a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075a6:	d820      	bhi.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 80075a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075ac:	d012      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80075ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075b2:	d81a      	bhi.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d022      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x676>
 80075b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075bc:	d115      	bne.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c2:	3308      	adds	r3, #8
 80075c4:	2101      	movs	r1, #1
 80075c6:	4618      	mov	r0, r3
 80075c8:	f001 f9a6 	bl	8008918 <RCCEx_PLL2_Config>
 80075cc:	4603      	mov	r3, r0
 80075ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80075d2:	e015      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d8:	3328      	adds	r3, #40	@ 0x28
 80075da:	2101      	movs	r1, #1
 80075dc:	4618      	mov	r0, r3
 80075de:	f001 fa4d 	bl	8008a7c <RCCEx_PLL3_Config>
 80075e2:	4603      	mov	r3, r0
 80075e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80075e8:	e00a      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075f0:	e006      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80075f2:	bf00      	nop
 80075f4:	e004      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80075f6:	bf00      	nop
 80075f8:	e002      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80075fa:	bf00      	nop
 80075fc:	e000      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80075fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007600:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10b      	bne.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007608:	4ba3      	ldr	r3, [pc, #652]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800760a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800760c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007614:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007618:	4a9f      	ldr	r2, [pc, #636]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800761a:	430b      	orrs	r3, r1
 800761c:	6593      	str	r3, [r2, #88]	@ 0x58
 800761e:	e003      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007620:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007624:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007634:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007638:	2300      	movs	r3, #0
 800763a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800763e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007642:	460b      	mov	r3, r1
 8007644:	4313      	orrs	r3, r2
 8007646:	d037      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800764c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800764e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007652:	d00e      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007654:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007658:	d816      	bhi.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800765a:	2b00      	cmp	r3, #0
 800765c:	d018      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800765e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007662:	d111      	bne.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007664:	4b8c      	ldr	r3, [pc, #560]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007668:	4a8b      	ldr	r2, [pc, #556]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800766a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800766e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007670:	e00f      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007676:	3308      	adds	r3, #8
 8007678:	2101      	movs	r1, #1
 800767a:	4618      	mov	r0, r3
 800767c:	f001 f94c 	bl	8008918 <RCCEx_PLL2_Config>
 8007680:	4603      	mov	r3, r0
 8007682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007686:	e004      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800768e:	e000      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007690:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007692:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10a      	bne.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800769a:	4b7f      	ldr	r3, [pc, #508]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800769c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800769e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80076a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076a8:	4a7b      	ldr	r2, [pc, #492]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076aa:	430b      	orrs	r3, r1
 80076ac:	6513      	str	r3, [r2, #80]	@ 0x50
 80076ae:	e003      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80076b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80076c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80076c8:	2300      	movs	r3, #0
 80076ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80076ce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80076d2:	460b      	mov	r3, r1
 80076d4:	4313      	orrs	r3, r2
 80076d6:	d039      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80076d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d81c      	bhi.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x794>
 80076e2:	a201      	add	r2, pc, #4	@ (adr r2, 80076e8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80076e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e8:	08007725 	.word	0x08007725
 80076ec:	080076f9 	.word	0x080076f9
 80076f0:	08007707 	.word	0x08007707
 80076f4:	08007725 	.word	0x08007725
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076f8:	4b67      	ldr	r3, [pc, #412]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076fc:	4a66      	ldr	r2, [pc, #408]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007702:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007704:	e00f      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800770a:	3308      	adds	r3, #8
 800770c:	2102      	movs	r1, #2
 800770e:	4618      	mov	r0, r3
 8007710:	f001 f902 	bl	8008918 <RCCEx_PLL2_Config>
 8007714:	4603      	mov	r3, r0
 8007716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800771a:	e004      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007722:	e000      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800772a:	2b00      	cmp	r3, #0
 800772c:	d10a      	bne.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800772e:	4b5a      	ldr	r3, [pc, #360]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007732:	f023 0103 	bic.w	r1, r3, #3
 8007736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800773a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800773c:	4a56      	ldr	r2, [pc, #344]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800773e:	430b      	orrs	r3, r1
 8007740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007742:	e003      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007748:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800774c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007754:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007758:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800775c:	2300      	movs	r3, #0
 800775e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007762:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007766:	460b      	mov	r3, r1
 8007768:	4313      	orrs	r3, r2
 800776a:	f000 809f 	beq.w	80078ac <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800776e:	4b4b      	ldr	r3, [pc, #300]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a4a      	ldr	r2, [pc, #296]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007778:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800777a:	f7fa fced 	bl	8002158 <HAL_GetTick>
 800777e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007782:	e00b      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007784:	f7fa fce8 	bl	8002158 <HAL_GetTick>
 8007788:	4602      	mov	r2, r0
 800778a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	2b64      	cmp	r3, #100	@ 0x64
 8007792:	d903      	bls.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800779a:	e005      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800779c:	4b3f      	ldr	r3, [pc, #252]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d0ed      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80077a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d179      	bne.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80077b0:	4b39      	ldr	r3, [pc, #228]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80077b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077bc:	4053      	eors	r3, r2
 80077be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d015      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80077c6:	4b34      	ldr	r3, [pc, #208]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077ce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80077d2:	4b31      	ldr	r3, [pc, #196]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077d6:	4a30      	ldr	r2, [pc, #192]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077dc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80077de:	4b2e      	ldr	r3, [pc, #184]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077e2:	4a2d      	ldr	r2, [pc, #180]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077e8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80077ea:	4a2b      	ldr	r2, [pc, #172]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80077f0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80077f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077fe:	d118      	bne.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007800:	f7fa fcaa 	bl	8002158 <HAL_GetTick>
 8007804:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007808:	e00d      	b.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800780a:	f7fa fca5 	bl	8002158 <HAL_GetTick>
 800780e:	4602      	mov	r2, r0
 8007810:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007814:	1ad2      	subs	r2, r2, r3
 8007816:	f241 3388 	movw	r3, #5000	@ 0x1388
 800781a:	429a      	cmp	r2, r3
 800781c:	d903      	bls.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007824:	e005      	b.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007826:	4b1c      	ldr	r3, [pc, #112]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	2b00      	cmp	r3, #0
 8007830:	d0eb      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007836:	2b00      	cmp	r3, #0
 8007838:	d129      	bne.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800783a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800783e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007842:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007846:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800784a:	d10e      	bne.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800784c:	4b12      	ldr	r3, [pc, #72]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007858:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800785c:	091a      	lsrs	r2, r3, #4
 800785e:	4b10      	ldr	r3, [pc, #64]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007860:	4013      	ands	r3, r2
 8007862:	4a0d      	ldr	r2, [pc, #52]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007864:	430b      	orrs	r3, r1
 8007866:	6113      	str	r3, [r2, #16]
 8007868:	e005      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800786a:	4b0b      	ldr	r3, [pc, #44]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	4a0a      	ldr	r2, [pc, #40]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007870:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007874:	6113      	str	r3, [r2, #16]
 8007876:	4b08      	ldr	r3, [pc, #32]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007878:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800787a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800787e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007886:	4a04      	ldr	r2, [pc, #16]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007888:	430b      	orrs	r3, r1
 800788a:	6713      	str	r3, [r2, #112]	@ 0x70
 800788c:	e00e      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800788e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007892:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007896:	e009      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007898:	58024400 	.word	0x58024400
 800789c:	58024800 	.word	0x58024800
 80078a0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80078ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b4:	f002 0301 	and.w	r3, r2, #1
 80078b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078bc:	2300      	movs	r3, #0
 80078be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80078c2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80078c6:	460b      	mov	r3, r1
 80078c8:	4313      	orrs	r3, r2
 80078ca:	f000 8089 	beq.w	80079e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80078ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078d4:	2b28      	cmp	r3, #40	@ 0x28
 80078d6:	d86b      	bhi.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80078d8:	a201      	add	r2, pc, #4	@ (adr r2, 80078e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80078da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078de:	bf00      	nop
 80078e0:	080079b9 	.word	0x080079b9
 80078e4:	080079b1 	.word	0x080079b1
 80078e8:	080079b1 	.word	0x080079b1
 80078ec:	080079b1 	.word	0x080079b1
 80078f0:	080079b1 	.word	0x080079b1
 80078f4:	080079b1 	.word	0x080079b1
 80078f8:	080079b1 	.word	0x080079b1
 80078fc:	080079b1 	.word	0x080079b1
 8007900:	08007985 	.word	0x08007985
 8007904:	080079b1 	.word	0x080079b1
 8007908:	080079b1 	.word	0x080079b1
 800790c:	080079b1 	.word	0x080079b1
 8007910:	080079b1 	.word	0x080079b1
 8007914:	080079b1 	.word	0x080079b1
 8007918:	080079b1 	.word	0x080079b1
 800791c:	080079b1 	.word	0x080079b1
 8007920:	0800799b 	.word	0x0800799b
 8007924:	080079b1 	.word	0x080079b1
 8007928:	080079b1 	.word	0x080079b1
 800792c:	080079b1 	.word	0x080079b1
 8007930:	080079b1 	.word	0x080079b1
 8007934:	080079b1 	.word	0x080079b1
 8007938:	080079b1 	.word	0x080079b1
 800793c:	080079b1 	.word	0x080079b1
 8007940:	080079b9 	.word	0x080079b9
 8007944:	080079b1 	.word	0x080079b1
 8007948:	080079b1 	.word	0x080079b1
 800794c:	080079b1 	.word	0x080079b1
 8007950:	080079b1 	.word	0x080079b1
 8007954:	080079b1 	.word	0x080079b1
 8007958:	080079b1 	.word	0x080079b1
 800795c:	080079b1 	.word	0x080079b1
 8007960:	080079b9 	.word	0x080079b9
 8007964:	080079b1 	.word	0x080079b1
 8007968:	080079b1 	.word	0x080079b1
 800796c:	080079b1 	.word	0x080079b1
 8007970:	080079b1 	.word	0x080079b1
 8007974:	080079b1 	.word	0x080079b1
 8007978:	080079b1 	.word	0x080079b1
 800797c:	080079b1 	.word	0x080079b1
 8007980:	080079b9 	.word	0x080079b9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007988:	3308      	adds	r3, #8
 800798a:	2101      	movs	r1, #1
 800798c:	4618      	mov	r0, r3
 800798e:	f000 ffc3 	bl	8008918 <RCCEx_PLL2_Config>
 8007992:	4603      	mov	r3, r0
 8007994:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007998:	e00f      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800799a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800799e:	3328      	adds	r3, #40	@ 0x28
 80079a0:	2101      	movs	r1, #1
 80079a2:	4618      	mov	r0, r3
 80079a4:	f001 f86a 	bl	8008a7c <RCCEx_PLL3_Config>
 80079a8:	4603      	mov	r3, r0
 80079aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80079ae:	e004      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079b6:	e000      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80079b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10a      	bne.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80079c2:	4bbf      	ldr	r3, [pc, #764]	@ (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079c6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80079ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079d0:	4abb      	ldr	r2, [pc, #748]	@ (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079d2:	430b      	orrs	r3, r1
 80079d4:	6553      	str	r3, [r2, #84]	@ 0x54
 80079d6:	e003      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80079e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e8:	f002 0302 	and.w	r3, r2, #2
 80079ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80079f0:	2300      	movs	r3, #0
 80079f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80079f6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80079fa:	460b      	mov	r3, r1
 80079fc:	4313      	orrs	r3, r2
 80079fe:	d041      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a06:	2b05      	cmp	r3, #5
 8007a08:	d824      	bhi.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a10 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a10:	08007a5d 	.word	0x08007a5d
 8007a14:	08007a29 	.word	0x08007a29
 8007a18:	08007a3f 	.word	0x08007a3f
 8007a1c:	08007a5d 	.word	0x08007a5d
 8007a20:	08007a5d 	.word	0x08007a5d
 8007a24:	08007a5d 	.word	0x08007a5d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	2101      	movs	r1, #1
 8007a30:	4618      	mov	r0, r3
 8007a32:	f000 ff71 	bl	8008918 <RCCEx_PLL2_Config>
 8007a36:	4603      	mov	r3, r0
 8007a38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007a3c:	e00f      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a42:	3328      	adds	r3, #40	@ 0x28
 8007a44:	2101      	movs	r1, #1
 8007a46:	4618      	mov	r0, r3
 8007a48:	f001 f818 	bl	8008a7c <RCCEx_PLL3_Config>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007a52:	e004      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a5a:	e000      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10a      	bne.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007a66:	4b96      	ldr	r3, [pc, #600]	@ (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a6a:	f023 0107 	bic.w	r1, r3, #7
 8007a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a74:	4a92      	ldr	r2, [pc, #584]	@ (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a76:	430b      	orrs	r3, r1
 8007a78:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a7a:	e003      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8c:	f002 0304 	and.w	r3, r2, #4
 8007a90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a94:	2300      	movs	r3, #0
 8007a96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a9a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	d044      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007aac:	2b05      	cmp	r3, #5
 8007aae:	d825      	bhi.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab6:	bf00      	nop
 8007ab8:	08007b05 	.word	0x08007b05
 8007abc:	08007ad1 	.word	0x08007ad1
 8007ac0:	08007ae7 	.word	0x08007ae7
 8007ac4:	08007b05 	.word	0x08007b05
 8007ac8:	08007b05 	.word	0x08007b05
 8007acc:	08007b05 	.word	0x08007b05
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	2101      	movs	r1, #1
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f000 ff1d 	bl	8008918 <RCCEx_PLL2_Config>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007ae4:	e00f      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aea:	3328      	adds	r3, #40	@ 0x28
 8007aec:	2101      	movs	r1, #1
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 ffc4 	bl	8008a7c <RCCEx_PLL3_Config>
 8007af4:	4603      	mov	r3, r0
 8007af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007afa:	e004      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b02:	e000      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10b      	bne.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b0e:	4b6c      	ldr	r3, [pc, #432]	@ (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b12:	f023 0107 	bic.w	r1, r3, #7
 8007b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b1e:	4a68      	ldr	r2, [pc, #416]	@ (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b20:	430b      	orrs	r3, r1
 8007b22:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b24:	e003      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b36:	f002 0320 	and.w	r3, r2, #32
 8007b3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b3e:	2300      	movs	r3, #0
 8007b40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b48:	460b      	mov	r3, r1
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	d055      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b5a:	d033      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b60:	d82c      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007b62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b66:	d02f      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007b68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b6c:	d826      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007b6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b72:	d02b      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007b74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b78:	d820      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007b7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b7e:	d012      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007b80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b84:	d81a      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d022      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007b8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b8e:	d115      	bne.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b94:	3308      	adds	r3, #8
 8007b96:	2100      	movs	r1, #0
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 febd 	bl	8008918 <RCCEx_PLL2_Config>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007ba4:	e015      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007baa:	3328      	adds	r3, #40	@ 0x28
 8007bac:	2102      	movs	r1, #2
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 ff64 	bl	8008a7c <RCCEx_PLL3_Config>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007bba:	e00a      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bc2:	e006      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007bc4:	bf00      	nop
 8007bc6:	e004      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007bc8:	bf00      	nop
 8007bca:	e002      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007bcc:	bf00      	nop
 8007bce:	e000      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007bd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10b      	bne.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007bda:	4b39      	ldr	r3, [pc, #228]	@ (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bde:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bea:	4a35      	ldr	r2, [pc, #212]	@ (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007bec:	430b      	orrs	r3, r1
 8007bee:	6553      	str	r3, [r2, #84]	@ 0x54
 8007bf0:	e003      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007c06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007c10:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007c14:	460b      	mov	r3, r1
 8007c16:	4313      	orrs	r3, r2
 8007c18:	d058      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c22:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007c26:	d033      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007c28:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007c2c:	d82c      	bhi.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007c2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c32:	d02f      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007c34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c38:	d826      	bhi.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007c3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c3e:	d02b      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007c40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c44:	d820      	bhi.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007c46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c4a:	d012      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007c4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c50:	d81a      	bhi.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d022      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c5a:	d115      	bne.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c60:	3308      	adds	r3, #8
 8007c62:	2100      	movs	r1, #0
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 fe57 	bl	8008918 <RCCEx_PLL2_Config>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007c70:	e015      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c76:	3328      	adds	r3, #40	@ 0x28
 8007c78:	2102      	movs	r1, #2
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f000 fefe 	bl	8008a7c <RCCEx_PLL3_Config>
 8007c80:	4603      	mov	r3, r0
 8007c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007c86:	e00a      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c8e:	e006      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c90:	bf00      	nop
 8007c92:	e004      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c94:	bf00      	nop
 8007c96:	e002      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c98:	bf00      	nop
 8007c9a:	e000      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10e      	bne.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ca6:	4b06      	ldr	r3, [pc, #24]	@ (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007caa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cb6:	4a02      	ldr	r2, [pc, #8]	@ (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007cb8:	430b      	orrs	r3, r1
 8007cba:	6593      	str	r3, [r2, #88]	@ 0x58
 8007cbc:	e006      	b.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007cbe:	bf00      	nop
 8007cc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007cd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007cdc:	2300      	movs	r3, #0
 8007cde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007ce2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	d055      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007cf4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007cf8:	d033      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007cfa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007cfe:	d82c      	bhi.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007d00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d04:	d02f      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007d06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d0a:	d826      	bhi.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007d0c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007d10:	d02b      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007d12:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007d16:	d820      	bhi.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007d18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d1c:	d012      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007d1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d22:	d81a      	bhi.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d022      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007d28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d2c:	d115      	bne.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d32:	3308      	adds	r3, #8
 8007d34:	2100      	movs	r1, #0
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 fdee 	bl	8008918 <RCCEx_PLL2_Config>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007d42:	e015      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d48:	3328      	adds	r3, #40	@ 0x28
 8007d4a:	2102      	movs	r1, #2
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 fe95 	bl	8008a7c <RCCEx_PLL3_Config>
 8007d52:	4603      	mov	r3, r0
 8007d54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007d58:	e00a      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d60:	e006      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007d62:	bf00      	nop
 8007d64:	e004      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007d66:	bf00      	nop
 8007d68:	e002      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007d6a:	bf00      	nop
 8007d6c:	e000      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007d6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10b      	bne.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007d78:	4ba1      	ldr	r3, [pc, #644]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d7c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007d88:	4a9d      	ldr	r2, [pc, #628]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d8a:	430b      	orrs	r3, r1
 8007d8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d8e:	e003      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da0:	f002 0308 	and.w	r3, r2, #8
 8007da4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007da8:	2300      	movs	r3, #0
 8007daa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007dae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007db2:	460b      	mov	r3, r1
 8007db4:	4313      	orrs	r3, r2
 8007db6:	d01e      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dc4:	d10c      	bne.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dca:	3328      	adds	r3, #40	@ 0x28
 8007dcc:	2102      	movs	r1, #2
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f000 fe54 	bl	8008a7c <RCCEx_PLL3_Config>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d002      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007de0:	4b87      	ldr	r3, [pc, #540]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007de4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007df0:	4a83      	ldr	r2, [pc, #524]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007df2:	430b      	orrs	r3, r1
 8007df4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	f002 0310 	and.w	r3, r2, #16
 8007e02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e06:	2300      	movs	r3, #0
 8007e08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007e0c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007e10:	460b      	mov	r3, r1
 8007e12:	4313      	orrs	r3, r2
 8007e14:	d01e      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e22:	d10c      	bne.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e28:	3328      	adds	r3, #40	@ 0x28
 8007e2a:	2102      	movs	r1, #2
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f000 fe25 	bl	8008a7c <RCCEx_PLL3_Config>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d002      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e3e:	4b70      	ldr	r3, [pc, #448]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e42:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e4e:	4a6c      	ldr	r2, [pc, #432]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e50:	430b      	orrs	r3, r1
 8007e52:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007e60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e64:	2300      	movs	r3, #0
 8007e66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e6a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007e6e:	460b      	mov	r3, r1
 8007e70:	4313      	orrs	r3, r2
 8007e72:	d03e      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e80:	d022      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007e82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e86:	d81b      	bhi.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d003      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e90:	d00b      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007e92:	e015      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e98:	3308      	adds	r3, #8
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 fd3b 	bl	8008918 <RCCEx_PLL2_Config>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007ea8:	e00f      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eae:	3328      	adds	r3, #40	@ 0x28
 8007eb0:	2102      	movs	r1, #2
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 fde2 	bl	8008a7c <RCCEx_PLL3_Config>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007ebe:	e004      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ec6:	e000      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d10b      	bne.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007ed2:	4b4b      	ldr	r3, [pc, #300]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ed6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ede:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ee2:	4a47      	ldr	r2, [pc, #284]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ee4:	430b      	orrs	r3, r1
 8007ee6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ee8:	e003      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007efe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007f00:	2300      	movs	r3, #0
 8007f02:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007f04:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007f08:	460b      	mov	r3, r1
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	d03b      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f16:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f1a:	d01f      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007f1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f20:	d818      	bhi.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007f22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f26:	d003      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007f28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f2c:	d007      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007f2e:	e011      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f30:	4b33      	ldr	r3, [pc, #204]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f34:	4a32      	ldr	r2, [pc, #200]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007f3c:	e00f      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f42:	3328      	adds	r3, #40	@ 0x28
 8007f44:	2101      	movs	r1, #1
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 fd98 	bl	8008a7c <RCCEx_PLL3_Config>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007f52:	e004      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f5a:	e000      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10b      	bne.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f66:	4b26      	ldr	r3, [pc, #152]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f6a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f76:	4a22      	ldr	r2, [pc, #136]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f78:	430b      	orrs	r3, r1
 8007f7a:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f7c:	e003      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007f92:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f94:	2300      	movs	r3, #0
 8007f96:	677b      	str	r3, [r7, #116]	@ 0x74
 8007f98:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	d034      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d003      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fb0:	d007      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007fb2:	e011      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fb4:	4b12      	ldr	r3, [pc, #72]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb8:	4a11      	ldr	r2, [pc, #68]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007fc0:	e00e      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc6:	3308      	adds	r3, #8
 8007fc8:	2102      	movs	r1, #2
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 fca4 	bl	8008918 <RCCEx_PLL2_Config>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007fd6:	e003      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10d      	bne.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007fe8:	4b05      	ldr	r3, [pc, #20]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ff6:	4a02      	ldr	r2, [pc, #8]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ff8:	430b      	orrs	r3, r1
 8007ffa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007ffc:	e006      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007ffe:	bf00      	nop
 8008000:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008004:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008008:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800800c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008014:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008018:	66bb      	str	r3, [r7, #104]	@ 0x68
 800801a:	2300      	movs	r3, #0
 800801c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800801e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008022:	460b      	mov	r3, r1
 8008024:	4313      	orrs	r3, r2
 8008026:	d00c      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800802c:	3328      	adds	r3, #40	@ 0x28
 800802e:	2102      	movs	r1, #2
 8008030:	4618      	mov	r0, r3
 8008032:	f000 fd23 	bl	8008a7c <RCCEx_PLL3_Config>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d002      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800804e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008050:	2300      	movs	r3, #0
 8008052:	667b      	str	r3, [r7, #100]	@ 0x64
 8008054:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008058:	460b      	mov	r3, r1
 800805a:	4313      	orrs	r3, r2
 800805c:	d038      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800805e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008066:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800806a:	d018      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800806c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008070:	d811      	bhi.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008072:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008076:	d014      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800807c:	d80b      	bhi.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800807e:	2b00      	cmp	r3, #0
 8008080:	d011      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008082:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008086:	d106      	bne.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008088:	4bc3      	ldr	r3, [pc, #780]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800808a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800808c:	4ac2      	ldr	r2, [pc, #776]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800808e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008092:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008094:	e008      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800809c:	e004      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800809e:	bf00      	nop
 80080a0:	e002      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80080a2:	bf00      	nop
 80080a4:	e000      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80080a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10b      	bne.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80080b0:	4bb9      	ldr	r3, [pc, #740]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080b4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80080b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080c0:	4ab5      	ldr	r2, [pc, #724]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080c2:	430b      	orrs	r3, r1
 80080c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80080c6:	e003      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80080d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80080dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80080de:	2300      	movs	r3, #0
 80080e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80080e6:	460b      	mov	r3, r1
 80080e8:	4313      	orrs	r3, r2
 80080ea:	d009      	beq.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80080ec:	4baa      	ldr	r3, [pc, #680]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80080f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080fa:	4aa7      	ldr	r2, [pc, #668]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080fc:	430b      	orrs	r3, r1
 80080fe:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008108:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800810c:	653b      	str	r3, [r7, #80]	@ 0x50
 800810e:	2300      	movs	r3, #0
 8008110:	657b      	str	r3, [r7, #84]	@ 0x54
 8008112:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008116:	460b      	mov	r3, r1
 8008118:	4313      	orrs	r3, r2
 800811a:	d00a      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800811c:	4b9e      	ldr	r3, [pc, #632]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008128:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800812c:	4a9a      	ldr	r2, [pc, #616]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800812e:	430b      	orrs	r3, r1
 8008130:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800813e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008140:	2300      	movs	r3, #0
 8008142:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008144:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008148:	460b      	mov	r3, r1
 800814a:	4313      	orrs	r3, r2
 800814c:	d009      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800814e:	4b92      	ldr	r3, [pc, #584]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008152:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800815a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800815c:	4a8e      	ldr	r2, [pc, #568]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800815e:	430b      	orrs	r3, r1
 8008160:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800816e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008170:	2300      	movs	r3, #0
 8008172:	647b      	str	r3, [r7, #68]	@ 0x44
 8008174:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008178:	460b      	mov	r3, r1
 800817a:	4313      	orrs	r3, r2
 800817c:	d00e      	beq.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800817e:	4b86      	ldr	r3, [pc, #536]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	4a85      	ldr	r2, [pc, #532]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008184:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008188:	6113      	str	r3, [r2, #16]
 800818a:	4b83      	ldr	r3, [pc, #524]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800818c:	6919      	ldr	r1, [r3, #16]
 800818e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008192:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008196:	4a80      	ldr	r2, [pc, #512]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008198:	430b      	orrs	r3, r1
 800819a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800819c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80081a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081aa:	2300      	movs	r3, #0
 80081ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081ae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80081b2:	460b      	mov	r3, r1
 80081b4:	4313      	orrs	r3, r2
 80081b6:	d009      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80081b8:	4b77      	ldr	r3, [pc, #476]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081bc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80081c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081c6:	4a74      	ldr	r2, [pc, #464]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081c8:	430b      	orrs	r3, r1
 80081ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80081cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80081d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80081da:	2300      	movs	r3, #0
 80081dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80081de:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80081e2:	460b      	mov	r3, r1
 80081e4:	4313      	orrs	r3, r2
 80081e6:	d00a      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80081e8:	4b6b      	ldr	r3, [pc, #428]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081ec:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80081f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081f8:	4a67      	ldr	r2, [pc, #412]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081fa:	430b      	orrs	r3, r1
 80081fc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80081fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008206:	2100      	movs	r1, #0
 8008208:	62b9      	str	r1, [r7, #40]	@ 0x28
 800820a:	f003 0301 	and.w	r3, r3, #1
 800820e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008210:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008214:	460b      	mov	r3, r1
 8008216:	4313      	orrs	r3, r2
 8008218:	d011      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800821a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800821e:	3308      	adds	r3, #8
 8008220:	2100      	movs	r1, #0
 8008222:	4618      	mov	r0, r3
 8008224:	f000 fb78 	bl	8008918 <RCCEx_PLL2_Config>
 8008228:	4603      	mov	r3, r0
 800822a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800822e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008232:	2b00      	cmp	r3, #0
 8008234:	d003      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800823a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800823e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008246:	2100      	movs	r1, #0
 8008248:	6239      	str	r1, [r7, #32]
 800824a:	f003 0302 	and.w	r3, r3, #2
 800824e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008250:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008254:	460b      	mov	r3, r1
 8008256:	4313      	orrs	r3, r2
 8008258:	d011      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800825a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800825e:	3308      	adds	r3, #8
 8008260:	2101      	movs	r1, #1
 8008262:	4618      	mov	r0, r3
 8008264:	f000 fb58 	bl	8008918 <RCCEx_PLL2_Config>
 8008268:	4603      	mov	r3, r0
 800826a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800826e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008272:	2b00      	cmp	r3, #0
 8008274:	d003      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800827a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800827e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008286:	2100      	movs	r1, #0
 8008288:	61b9      	str	r1, [r7, #24]
 800828a:	f003 0304 	and.w	r3, r3, #4
 800828e:	61fb      	str	r3, [r7, #28]
 8008290:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008294:	460b      	mov	r3, r1
 8008296:	4313      	orrs	r3, r2
 8008298:	d011      	beq.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800829a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800829e:	3308      	adds	r3, #8
 80082a0:	2102      	movs	r1, #2
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 fb38 	bl	8008918 <RCCEx_PLL2_Config>
 80082a8:	4603      	mov	r3, r0
 80082aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80082ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80082be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c6:	2100      	movs	r1, #0
 80082c8:	6139      	str	r1, [r7, #16]
 80082ca:	f003 0308 	and.w	r3, r3, #8
 80082ce:	617b      	str	r3, [r7, #20]
 80082d0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80082d4:	460b      	mov	r3, r1
 80082d6:	4313      	orrs	r3, r2
 80082d8:	d011      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80082da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082de:	3328      	adds	r3, #40	@ 0x28
 80082e0:	2100      	movs	r1, #0
 80082e2:	4618      	mov	r0, r3
 80082e4:	f000 fbca 	bl	8008a7c <RCCEx_PLL3_Config>
 80082e8:	4603      	mov	r3, r0
 80082ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80082ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d003      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80082fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008306:	2100      	movs	r1, #0
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	f003 0310 	and.w	r3, r3, #16
 800830e:	60fb      	str	r3, [r7, #12]
 8008310:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008314:	460b      	mov	r3, r1
 8008316:	4313      	orrs	r3, r2
 8008318:	d011      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800831a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800831e:	3328      	adds	r3, #40	@ 0x28
 8008320:	2101      	movs	r1, #1
 8008322:	4618      	mov	r0, r3
 8008324:	f000 fbaa 	bl	8008a7c <RCCEx_PLL3_Config>
 8008328:	4603      	mov	r3, r0
 800832a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800832e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008332:	2b00      	cmp	r3, #0
 8008334:	d003      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008336:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800833a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800833e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008346:	2100      	movs	r1, #0
 8008348:	6039      	str	r1, [r7, #0]
 800834a:	f003 0320 	and.w	r3, r3, #32
 800834e:	607b      	str	r3, [r7, #4]
 8008350:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008354:	460b      	mov	r3, r1
 8008356:	4313      	orrs	r3, r2
 8008358:	d011      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800835a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800835e:	3328      	adds	r3, #40	@ 0x28
 8008360:	2102      	movs	r1, #2
 8008362:	4618      	mov	r0, r3
 8008364:	f000 fb8a 	bl	8008a7c <RCCEx_PLL3_Config>
 8008368:	4603      	mov	r3, r0
 800836a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800836e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008372:	2b00      	cmp	r3, #0
 8008374:	d003      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008376:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800837a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800837e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	e000      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
}
 800838c:	4618      	mov	r0, r3
 800838e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008392:	46bd      	mov	sp, r7
 8008394:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008398:	58024400 	.word	0x58024400

0800839c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80083a0:	f7fe fd54 	bl	8006e4c <HAL_RCC_GetHCLKFreq>
 80083a4:	4602      	mov	r2, r0
 80083a6:	4b06      	ldr	r3, [pc, #24]	@ (80083c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80083a8:	6a1b      	ldr	r3, [r3, #32]
 80083aa:	091b      	lsrs	r3, r3, #4
 80083ac:	f003 0307 	and.w	r3, r3, #7
 80083b0:	4904      	ldr	r1, [pc, #16]	@ (80083c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80083b2:	5ccb      	ldrb	r3, [r1, r3]
 80083b4:	f003 031f 	and.w	r3, r3, #31
 80083b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80083bc:	4618      	mov	r0, r3
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	58024400 	.word	0x58024400
 80083c4:	0801c2f8 	.word	0x0801c2f8

080083c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b089      	sub	sp, #36	@ 0x24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083d0:	4ba1      	ldr	r3, [pc, #644]	@ (8008658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d4:	f003 0303 	and.w	r3, r3, #3
 80083d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80083da:	4b9f      	ldr	r3, [pc, #636]	@ (8008658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083de:	0b1b      	lsrs	r3, r3, #12
 80083e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80083e6:	4b9c      	ldr	r3, [pc, #624]	@ (8008658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ea:	091b      	lsrs	r3, r3, #4
 80083ec:	f003 0301 	and.w	r3, r3, #1
 80083f0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80083f2:	4b99      	ldr	r3, [pc, #612]	@ (8008658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083f6:	08db      	lsrs	r3, r3, #3
 80083f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	fb02 f303 	mul.w	r3, r2, r3
 8008402:	ee07 3a90 	vmov	s15, r3
 8008406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800840a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 8111 	beq.w	8008638 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	2b02      	cmp	r3, #2
 800841a:	f000 8083 	beq.w	8008524 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	2b02      	cmp	r3, #2
 8008422:	f200 80a1 	bhi.w	8008568 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d003      	beq.n	8008434 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d056      	beq.n	80084e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008432:	e099      	b.n	8008568 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008434:	4b88      	ldr	r3, [pc, #544]	@ (8008658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0320 	and.w	r3, r3, #32
 800843c:	2b00      	cmp	r3, #0
 800843e:	d02d      	beq.n	800849c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008440:	4b85      	ldr	r3, [pc, #532]	@ (8008658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	08db      	lsrs	r3, r3, #3
 8008446:	f003 0303 	and.w	r3, r3, #3
 800844a:	4a84      	ldr	r2, [pc, #528]	@ (800865c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800844c:	fa22 f303 	lsr.w	r3, r2, r3
 8008450:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	ee07 3a90 	vmov	s15, r3
 8008458:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	ee07 3a90 	vmov	s15, r3
 8008462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800846a:	4b7b      	ldr	r3, [pc, #492]	@ (8008658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800846c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800846e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008472:	ee07 3a90 	vmov	s15, r3
 8008476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800847a:	ed97 6a03 	vldr	s12, [r7, #12]
 800847e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008660 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800848a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800848e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008496:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800849a:	e087      	b.n	80085ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	ee07 3a90 	vmov	s15, r3
 80084a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084a6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008664 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80084aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ae:	4b6a      	ldr	r3, [pc, #424]	@ (8008658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084b6:	ee07 3a90 	vmov	s15, r3
 80084ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084be:	ed97 6a03 	vldr	s12, [r7, #12]
 80084c2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008660 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084de:	e065      	b.n	80085ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	ee07 3a90 	vmov	s15, r3
 80084e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008668 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80084ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084f2:	4b59      	ldr	r3, [pc, #356]	@ (8008658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084fa:	ee07 3a90 	vmov	s15, r3
 80084fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008502:	ed97 6a03 	vldr	s12, [r7, #12]
 8008506:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008660 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800850a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800850e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008512:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800851a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800851e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008522:	e043      	b.n	80085ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	ee07 3a90 	vmov	s15, r3
 800852a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800852e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800866c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008536:	4b48      	ldr	r3, [pc, #288]	@ (8008658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800853a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800853e:	ee07 3a90 	vmov	s15, r3
 8008542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008546:	ed97 6a03 	vldr	s12, [r7, #12]
 800854a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008660 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800854e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008556:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800855a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800855e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008562:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008566:	e021      	b.n	80085ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	ee07 3a90 	vmov	s15, r3
 800856e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008572:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008668 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800857a:	4b37      	ldr	r3, [pc, #220]	@ (8008658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800857c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800857e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008582:	ee07 3a90 	vmov	s15, r3
 8008586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800858a:	ed97 6a03 	vldr	s12, [r7, #12]
 800858e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008660 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800859a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800859e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80085ac:	4b2a      	ldr	r3, [pc, #168]	@ (8008658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085b0:	0a5b      	lsrs	r3, r3, #9
 80085b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085b6:	ee07 3a90 	vmov	s15, r3
 80085ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80085ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085d2:	ee17 2a90 	vmov	r2, s15
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80085da:	4b1f      	ldr	r3, [pc, #124]	@ (8008658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085de:	0c1b      	lsrs	r3, r3, #16
 80085e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085e4:	ee07 3a90 	vmov	s15, r3
 80085e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80085f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008600:	ee17 2a90 	vmov	r2, s15
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008608:	4b13      	ldr	r3, [pc, #76]	@ (8008658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800860a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800860c:	0e1b      	lsrs	r3, r3, #24
 800860e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008612:	ee07 3a90 	vmov	s15, r3
 8008616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800861a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800861e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008622:	edd7 6a07 	vldr	s13, [r7, #28]
 8008626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800862a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800862e:	ee17 2a90 	vmov	r2, s15
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008636:	e008      	b.n	800864a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	609a      	str	r2, [r3, #8]
}
 800864a:	bf00      	nop
 800864c:	3724      	adds	r7, #36	@ 0x24
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	58024400 	.word	0x58024400
 800865c:	03d09000 	.word	0x03d09000
 8008660:	46000000 	.word	0x46000000
 8008664:	4c742400 	.word	0x4c742400
 8008668:	4a742400 	.word	0x4a742400
 800866c:	4af42400 	.word	0x4af42400

08008670 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008670:	b480      	push	{r7}
 8008672:	b089      	sub	sp, #36	@ 0x24
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008678:	4ba1      	ldr	r3, [pc, #644]	@ (8008900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800867a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800867c:	f003 0303 	and.w	r3, r3, #3
 8008680:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008682:	4b9f      	ldr	r3, [pc, #636]	@ (8008900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008686:	0d1b      	lsrs	r3, r3, #20
 8008688:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800868c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800868e:	4b9c      	ldr	r3, [pc, #624]	@ (8008900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008692:	0a1b      	lsrs	r3, r3, #8
 8008694:	f003 0301 	and.w	r3, r3, #1
 8008698:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800869a:	4b99      	ldr	r3, [pc, #612]	@ (8008900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800869c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800869e:	08db      	lsrs	r3, r3, #3
 80086a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086a4:	693a      	ldr	r2, [r7, #16]
 80086a6:	fb02 f303 	mul.w	r3, r2, r3
 80086aa:	ee07 3a90 	vmov	s15, r3
 80086ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f000 8111 	beq.w	80088e0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	f000 8083 	beq.w	80087cc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	f200 80a1 	bhi.w	8008810 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d003      	beq.n	80086dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d056      	beq.n	8008788 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80086da:	e099      	b.n	8008810 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086dc:	4b88      	ldr	r3, [pc, #544]	@ (8008900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 0320 	and.w	r3, r3, #32
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d02d      	beq.n	8008744 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086e8:	4b85      	ldr	r3, [pc, #532]	@ (8008900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	08db      	lsrs	r3, r3, #3
 80086ee:	f003 0303 	and.w	r3, r3, #3
 80086f2:	4a84      	ldr	r2, [pc, #528]	@ (8008904 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80086f4:	fa22 f303 	lsr.w	r3, r2, r3
 80086f8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	ee07 3a90 	vmov	s15, r3
 8008700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	ee07 3a90 	vmov	s15, r3
 800870a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800870e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008712:	4b7b      	ldr	r3, [pc, #492]	@ (8008900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800871a:	ee07 3a90 	vmov	s15, r3
 800871e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008722:	ed97 6a03 	vldr	s12, [r7, #12]
 8008726:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008908 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800872a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800872e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008732:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800873a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800873e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008742:	e087      	b.n	8008854 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	ee07 3a90 	vmov	s15, r3
 800874a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800874e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800890c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008756:	4b6a      	ldr	r3, [pc, #424]	@ (8008900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800875a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800875e:	ee07 3a90 	vmov	s15, r3
 8008762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008766:	ed97 6a03 	vldr	s12, [r7, #12]
 800876a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008908 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800876e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008776:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800877a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800877e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008786:	e065      	b.n	8008854 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008792:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800879a:	4b59      	ldr	r3, [pc, #356]	@ (8008900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800879c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800879e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a2:	ee07 3a90 	vmov	s15, r3
 80087a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80087ae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008908 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80087b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087ca:	e043      	b.n	8008854 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	ee07 3a90 	vmov	s15, r3
 80087d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80087da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087de:	4b48      	ldr	r3, [pc, #288]	@ (8008900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e6:	ee07 3a90 	vmov	s15, r3
 80087ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80087f2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008908 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80087f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800880a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800880e:	e021      	b.n	8008854 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	ee07 3a90 	vmov	s15, r3
 8008816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800881a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800881e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008822:	4b37      	ldr	r3, [pc, #220]	@ (8008900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800882a:	ee07 3a90 	vmov	s15, r3
 800882e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008832:	ed97 6a03 	vldr	s12, [r7, #12]
 8008836:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008908 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800883a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800883e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008842:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800884a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800884e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008852:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008854:	4b2a      	ldr	r3, [pc, #168]	@ (8008900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008858:	0a5b      	lsrs	r3, r3, #9
 800885a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800885e:	ee07 3a90 	vmov	s15, r3
 8008862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008866:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800886a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800886e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800887a:	ee17 2a90 	vmov	r2, s15
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008882:	4b1f      	ldr	r3, [pc, #124]	@ (8008900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008886:	0c1b      	lsrs	r3, r3, #16
 8008888:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800888c:	ee07 3a90 	vmov	s15, r3
 8008890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008894:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008898:	ee37 7a87 	vadd.f32	s14, s15, s14
 800889c:	edd7 6a07 	vldr	s13, [r7, #28]
 80088a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088a8:	ee17 2a90 	vmov	r2, s15
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80088b0:	4b13      	ldr	r3, [pc, #76]	@ (8008900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088b4:	0e1b      	lsrs	r3, r3, #24
 80088b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088ba:	ee07 3a90 	vmov	s15, r3
 80088be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80088ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088d6:	ee17 2a90 	vmov	r2, s15
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80088de:	e008      	b.n	80088f2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	609a      	str	r2, [r3, #8]
}
 80088f2:	bf00      	nop
 80088f4:	3724      	adds	r7, #36	@ 0x24
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	58024400 	.word	0x58024400
 8008904:	03d09000 	.word	0x03d09000
 8008908:	46000000 	.word	0x46000000
 800890c:	4c742400 	.word	0x4c742400
 8008910:	4a742400 	.word	0x4a742400
 8008914:	4af42400 	.word	0x4af42400

08008918 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008926:	4b53      	ldr	r3, [pc, #332]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 8008928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800892a:	f003 0303 	and.w	r3, r3, #3
 800892e:	2b03      	cmp	r3, #3
 8008930:	d101      	bne.n	8008936 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e099      	b.n	8008a6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008936:	4b4f      	ldr	r3, [pc, #316]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a4e      	ldr	r2, [pc, #312]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 800893c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008940:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008942:	f7f9 fc09 	bl	8002158 <HAL_GetTick>
 8008946:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008948:	e008      	b.n	800895c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800894a:	f7f9 fc05 	bl	8002158 <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	2b02      	cmp	r3, #2
 8008956:	d901      	bls.n	800895c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	e086      	b.n	8008a6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800895c:	4b45      	ldr	r3, [pc, #276]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1f0      	bne.n	800894a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008968:	4b42      	ldr	r3, [pc, #264]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 800896a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800896c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	031b      	lsls	r3, r3, #12
 8008976:	493f      	ldr	r1, [pc, #252]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 8008978:	4313      	orrs	r3, r2
 800897a:	628b      	str	r3, [r1, #40]	@ 0x28
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	3b01      	subs	r3, #1
 8008982:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	3b01      	subs	r3, #1
 800898c:	025b      	lsls	r3, r3, #9
 800898e:	b29b      	uxth	r3, r3
 8008990:	431a      	orrs	r2, r3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	3b01      	subs	r3, #1
 8008998:	041b      	lsls	r3, r3, #16
 800899a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800899e:	431a      	orrs	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	3b01      	subs	r3, #1
 80089a6:	061b      	lsls	r3, r3, #24
 80089a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80089ac:	4931      	ldr	r1, [pc, #196]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 80089ae:	4313      	orrs	r3, r2
 80089b0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80089b2:	4b30      	ldr	r3, [pc, #192]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 80089b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	492d      	ldr	r1, [pc, #180]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 80089c0:	4313      	orrs	r3, r2
 80089c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80089c4:	4b2b      	ldr	r3, [pc, #172]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 80089c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c8:	f023 0220 	bic.w	r2, r3, #32
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	699b      	ldr	r3, [r3, #24]
 80089d0:	4928      	ldr	r1, [pc, #160]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 80089d2:	4313      	orrs	r3, r2
 80089d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80089d6:	4b27      	ldr	r3, [pc, #156]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 80089d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089da:	4a26      	ldr	r2, [pc, #152]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 80089dc:	f023 0310 	bic.w	r3, r3, #16
 80089e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80089e2:	4b24      	ldr	r3, [pc, #144]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 80089e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089e6:	4b24      	ldr	r3, [pc, #144]	@ (8008a78 <RCCEx_PLL2_Config+0x160>)
 80089e8:	4013      	ands	r3, r2
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	69d2      	ldr	r2, [r2, #28]
 80089ee:	00d2      	lsls	r2, r2, #3
 80089f0:	4920      	ldr	r1, [pc, #128]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 80089f2:	4313      	orrs	r3, r2
 80089f4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80089f6:	4b1f      	ldr	r3, [pc, #124]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 80089f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089fa:	4a1e      	ldr	r2, [pc, #120]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 80089fc:	f043 0310 	orr.w	r3, r3, #16
 8008a00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d106      	bne.n	8008a16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008a08:	4b1a      	ldr	r3, [pc, #104]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 8008a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a0c:	4a19      	ldr	r2, [pc, #100]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 8008a0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008a14:	e00f      	b.n	8008a36 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d106      	bne.n	8008a2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008a1c:	4b15      	ldr	r3, [pc, #84]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 8008a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a20:	4a14      	ldr	r2, [pc, #80]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 8008a22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008a28:	e005      	b.n	8008a36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008a2a:	4b12      	ldr	r3, [pc, #72]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 8008a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a2e:	4a11      	ldr	r2, [pc, #68]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 8008a30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008a34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008a36:	4b0f      	ldr	r3, [pc, #60]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a0e      	ldr	r2, [pc, #56]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 8008a3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008a40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a42:	f7f9 fb89 	bl	8002158 <HAL_GetTick>
 8008a46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a48:	e008      	b.n	8008a5c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008a4a:	f7f9 fb85 	bl	8002158 <HAL_GetTick>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d901      	bls.n	8008a5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e006      	b.n	8008a6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a5c:	4b05      	ldr	r3, [pc, #20]	@ (8008a74 <RCCEx_PLL2_Config+0x15c>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d0f0      	beq.n	8008a4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	58024400 	.word	0x58024400
 8008a78:	ffff0007 	.word	0xffff0007

08008a7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a8a:	4b53      	ldr	r3, [pc, #332]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a8e:	f003 0303 	and.w	r3, r3, #3
 8008a92:	2b03      	cmp	r3, #3
 8008a94:	d101      	bne.n	8008a9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e099      	b.n	8008bce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008a9a:	4b4f      	ldr	r3, [pc, #316]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a4e      	ldr	r2, [pc, #312]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008aa0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008aa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008aa6:	f7f9 fb57 	bl	8002158 <HAL_GetTick>
 8008aaa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008aac:	e008      	b.n	8008ac0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008aae:	f7f9 fb53 	bl	8002158 <HAL_GetTick>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	1ad3      	subs	r3, r2, r3
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d901      	bls.n	8008ac0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008abc:	2303      	movs	r3, #3
 8008abe:	e086      	b.n	8008bce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ac0:	4b45      	ldr	r3, [pc, #276]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1f0      	bne.n	8008aae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008acc:	4b42      	ldr	r3, [pc, #264]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	051b      	lsls	r3, r3, #20
 8008ada:	493f      	ldr	r1, [pc, #252]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008adc:	4313      	orrs	r3, r2
 8008ade:	628b      	str	r3, [r1, #40]	@ 0x28
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	3b01      	subs	r3, #1
 8008af0:	025b      	lsls	r3, r3, #9
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	431a      	orrs	r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	041b      	lsls	r3, r3, #16
 8008afe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008b02:	431a      	orrs	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	061b      	lsls	r3, r3, #24
 8008b0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008b10:	4931      	ldr	r1, [pc, #196]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008b12:	4313      	orrs	r3, r2
 8008b14:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008b16:	4b30      	ldr	r3, [pc, #192]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b1a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	492d      	ldr	r1, [pc, #180]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008b24:	4313      	orrs	r3, r2
 8008b26:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008b28:	4b2b      	ldr	r3, [pc, #172]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b2c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	4928      	ldr	r1, [pc, #160]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008b36:	4313      	orrs	r3, r2
 8008b38:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008b3a:	4b27      	ldr	r3, [pc, #156]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b3e:	4a26      	ldr	r2, [pc, #152]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008b40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008b46:	4b24      	ldr	r3, [pc, #144]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008b48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b4a:	4b24      	ldr	r3, [pc, #144]	@ (8008bdc <RCCEx_PLL3_Config+0x160>)
 8008b4c:	4013      	ands	r3, r2
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	69d2      	ldr	r2, [r2, #28]
 8008b52:	00d2      	lsls	r2, r2, #3
 8008b54:	4920      	ldr	r1, [pc, #128]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008b56:	4313      	orrs	r3, r2
 8008b58:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d106      	bne.n	8008b7a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b70:	4a19      	ldr	r2, [pc, #100]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008b72:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008b76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b78:	e00f      	b.n	8008b9a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d106      	bne.n	8008b8e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008b80:	4b15      	ldr	r3, [pc, #84]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b84:	4a14      	ldr	r2, [pc, #80]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008b86:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008b8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b8c:	e005      	b.n	8008b9a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008b8e:	4b12      	ldr	r3, [pc, #72]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b92:	4a11      	ldr	r2, [pc, #68]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008b94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ba4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ba6:	f7f9 fad7 	bl	8002158 <HAL_GetTick>
 8008baa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008bac:	e008      	b.n	8008bc0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008bae:	f7f9 fad3 	bl	8002158 <HAL_GetTick>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d901      	bls.n	8008bc0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	e006      	b.n	8008bce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008bc0:	4b05      	ldr	r3, [pc, #20]	@ (8008bd8 <RCCEx_PLL3_Config+0x15c>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d0f0      	beq.n	8008bae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	58024400 	.word	0x58024400
 8008bdc:	ffff0007 	.word	0xffff0007

08008be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d101      	bne.n	8008bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e049      	b.n	8008c86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d106      	bne.n	8008c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f841 	bl	8008c8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	4610      	mov	r0, r2
 8008c20:	f000 f9e8 	bl	8008ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b083      	sub	sp, #12
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008c96:	bf00      	nop
 8008c98:	370c      	adds	r7, #12
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
	...

08008ca4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d001      	beq.n	8008cbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e054      	b.n	8008d66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2202      	movs	r2, #2
 8008cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68da      	ldr	r2, [r3, #12]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f042 0201 	orr.w	r2, r2, #1
 8008cd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a26      	ldr	r2, [pc, #152]	@ (8008d74 <HAL_TIM_Base_Start_IT+0xd0>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d022      	beq.n	8008d24 <HAL_TIM_Base_Start_IT+0x80>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ce6:	d01d      	beq.n	8008d24 <HAL_TIM_Base_Start_IT+0x80>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a22      	ldr	r2, [pc, #136]	@ (8008d78 <HAL_TIM_Base_Start_IT+0xd4>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d018      	beq.n	8008d24 <HAL_TIM_Base_Start_IT+0x80>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a21      	ldr	r2, [pc, #132]	@ (8008d7c <HAL_TIM_Base_Start_IT+0xd8>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d013      	beq.n	8008d24 <HAL_TIM_Base_Start_IT+0x80>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a1f      	ldr	r2, [pc, #124]	@ (8008d80 <HAL_TIM_Base_Start_IT+0xdc>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d00e      	beq.n	8008d24 <HAL_TIM_Base_Start_IT+0x80>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8008d84 <HAL_TIM_Base_Start_IT+0xe0>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d009      	beq.n	8008d24 <HAL_TIM_Base_Start_IT+0x80>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a1c      	ldr	r2, [pc, #112]	@ (8008d88 <HAL_TIM_Base_Start_IT+0xe4>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d004      	beq.n	8008d24 <HAL_TIM_Base_Start_IT+0x80>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8008d8c <HAL_TIM_Base_Start_IT+0xe8>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d115      	bne.n	8008d50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	689a      	ldr	r2, [r3, #8]
 8008d2a:	4b19      	ldr	r3, [pc, #100]	@ (8008d90 <HAL_TIM_Base_Start_IT+0xec>)
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2b06      	cmp	r3, #6
 8008d34:	d015      	beq.n	8008d62 <HAL_TIM_Base_Start_IT+0xbe>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d3c:	d011      	beq.n	8008d62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f042 0201 	orr.w	r2, r2, #1
 8008d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d4e:	e008      	b.n	8008d62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f042 0201 	orr.w	r2, r2, #1
 8008d5e:	601a      	str	r2, [r3, #0]
 8008d60:	e000      	b.n	8008d64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3714      	adds	r7, #20
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	40010000 	.word	0x40010000
 8008d78:	40000400 	.word	0x40000400
 8008d7c:	40000800 	.word	0x40000800
 8008d80:	40000c00 	.word	0x40000c00
 8008d84:	40010400 	.word	0x40010400
 8008d88:	40001800 	.word	0x40001800
 8008d8c:	40014000 	.word	0x40014000
 8008d90:	00010007 	.word	0x00010007

08008d94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	f003 0302 	and.w	r3, r3, #2
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d020      	beq.n	8008df8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f003 0302 	and.w	r3, r3, #2
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d01b      	beq.n	8008df8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f06f 0202 	mvn.w	r2, #2
 8008dc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	f003 0303 	and.w	r3, r3, #3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d003      	beq.n	8008de6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 f8e9 	bl	8008fb6 <HAL_TIM_IC_CaptureCallback>
 8008de4:	e005      	b.n	8008df2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f8db 	bl	8008fa2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f8ec 	bl	8008fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	f003 0304 	and.w	r3, r3, #4
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d020      	beq.n	8008e44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f003 0304 	and.w	r3, r3, #4
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d01b      	beq.n	8008e44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f06f 0204 	mvn.w	r2, #4
 8008e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2202      	movs	r2, #2
 8008e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	699b      	ldr	r3, [r3, #24]
 8008e22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f8c3 	bl	8008fb6 <HAL_TIM_IC_CaptureCallback>
 8008e30:	e005      	b.n	8008e3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f8b5 	bl	8008fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f8c6 	bl	8008fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	f003 0308 	and.w	r3, r3, #8
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d020      	beq.n	8008e90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f003 0308 	and.w	r3, r3, #8
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d01b      	beq.n	8008e90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f06f 0208 	mvn.w	r2, #8
 8008e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2204      	movs	r2, #4
 8008e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	69db      	ldr	r3, [r3, #28]
 8008e6e:	f003 0303 	and.w	r3, r3, #3
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d003      	beq.n	8008e7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f89d 	bl	8008fb6 <HAL_TIM_IC_CaptureCallback>
 8008e7c:	e005      	b.n	8008e8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f88f 	bl	8008fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 f8a0 	bl	8008fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	f003 0310 	and.w	r3, r3, #16
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d020      	beq.n	8008edc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f003 0310 	and.w	r3, r3, #16
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d01b      	beq.n	8008edc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f06f 0210 	mvn.w	r2, #16
 8008eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2208      	movs	r2, #8
 8008eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	69db      	ldr	r3, [r3, #28]
 8008eba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d003      	beq.n	8008eca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f877 	bl	8008fb6 <HAL_TIM_IC_CaptureCallback>
 8008ec8:	e005      	b.n	8008ed6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f869 	bl	8008fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f87a 	bl	8008fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00c      	beq.n	8008f00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f003 0301 	and.w	r3, r3, #1
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d007      	beq.n	8008f00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f06f 0201 	mvn.w	r2, #1
 8008ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f7f8 fb48 	bl	8001590 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d104      	bne.n	8008f14 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00c      	beq.n	8008f2e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d007      	beq.n	8008f2e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008f26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f913 	bl	8009154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00c      	beq.n	8008f52 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d007      	beq.n	8008f52 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f90b 	bl	8009168 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00c      	beq.n	8008f76 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d007      	beq.n	8008f76 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 f834 	bl	8008fde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	f003 0320 	and.w	r3, r3, #32
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00c      	beq.n	8008f9a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f003 0320 	and.w	r3, r3, #32
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d007      	beq.n	8008f9a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f06f 0220 	mvn.w	r2, #32
 8008f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 f8d3 	bl	8009140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f9a:	bf00      	nop
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fa2:	b480      	push	{r7}
 8008fa4:	b083      	sub	sp, #12
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008faa:	bf00      	nop
 8008fac:	370c      	adds	r7, #12
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr

08008fb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008fb6:	b480      	push	{r7}
 8008fb8:	b083      	sub	sp, #12
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008fbe:	bf00      	nop
 8008fc0:	370c      	adds	r7, #12
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr

08008fca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008fca:	b480      	push	{r7}
 8008fcc:	b083      	sub	sp, #12
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008fd2:	bf00      	nop
 8008fd4:	370c      	adds	r7, #12
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr

08008fde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008fde:	b480      	push	{r7}
 8008fe0:	b083      	sub	sp, #12
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008fe6:	bf00      	nop
 8008fe8:	370c      	adds	r7, #12
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
	...

08008ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a46      	ldr	r2, [pc, #280]	@ (8009120 <TIM_Base_SetConfig+0x12c>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d013      	beq.n	8009034 <TIM_Base_SetConfig+0x40>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009012:	d00f      	beq.n	8009034 <TIM_Base_SetConfig+0x40>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a43      	ldr	r2, [pc, #268]	@ (8009124 <TIM_Base_SetConfig+0x130>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d00b      	beq.n	8009034 <TIM_Base_SetConfig+0x40>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a42      	ldr	r2, [pc, #264]	@ (8009128 <TIM_Base_SetConfig+0x134>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d007      	beq.n	8009034 <TIM_Base_SetConfig+0x40>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a41      	ldr	r2, [pc, #260]	@ (800912c <TIM_Base_SetConfig+0x138>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d003      	beq.n	8009034 <TIM_Base_SetConfig+0x40>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a40      	ldr	r2, [pc, #256]	@ (8009130 <TIM_Base_SetConfig+0x13c>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d108      	bne.n	8009046 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800903a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	4313      	orrs	r3, r2
 8009044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a35      	ldr	r2, [pc, #212]	@ (8009120 <TIM_Base_SetConfig+0x12c>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d01f      	beq.n	800908e <TIM_Base_SetConfig+0x9a>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009054:	d01b      	beq.n	800908e <TIM_Base_SetConfig+0x9a>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a32      	ldr	r2, [pc, #200]	@ (8009124 <TIM_Base_SetConfig+0x130>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d017      	beq.n	800908e <TIM_Base_SetConfig+0x9a>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a31      	ldr	r2, [pc, #196]	@ (8009128 <TIM_Base_SetConfig+0x134>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d013      	beq.n	800908e <TIM_Base_SetConfig+0x9a>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4a30      	ldr	r2, [pc, #192]	@ (800912c <TIM_Base_SetConfig+0x138>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d00f      	beq.n	800908e <TIM_Base_SetConfig+0x9a>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4a2f      	ldr	r2, [pc, #188]	@ (8009130 <TIM_Base_SetConfig+0x13c>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d00b      	beq.n	800908e <TIM_Base_SetConfig+0x9a>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a2e      	ldr	r2, [pc, #184]	@ (8009134 <TIM_Base_SetConfig+0x140>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d007      	beq.n	800908e <TIM_Base_SetConfig+0x9a>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a2d      	ldr	r2, [pc, #180]	@ (8009138 <TIM_Base_SetConfig+0x144>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d003      	beq.n	800908e <TIM_Base_SetConfig+0x9a>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a2c      	ldr	r2, [pc, #176]	@ (800913c <TIM_Base_SetConfig+0x148>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d108      	bne.n	80090a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	4313      	orrs	r3, r2
 800909e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	689a      	ldr	r2, [r3, #8]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a16      	ldr	r2, [pc, #88]	@ (8009120 <TIM_Base_SetConfig+0x12c>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d00f      	beq.n	80090ec <TIM_Base_SetConfig+0xf8>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a18      	ldr	r2, [pc, #96]	@ (8009130 <TIM_Base_SetConfig+0x13c>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d00b      	beq.n	80090ec <TIM_Base_SetConfig+0xf8>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a17      	ldr	r2, [pc, #92]	@ (8009134 <TIM_Base_SetConfig+0x140>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d007      	beq.n	80090ec <TIM_Base_SetConfig+0xf8>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a16      	ldr	r2, [pc, #88]	@ (8009138 <TIM_Base_SetConfig+0x144>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d003      	beq.n	80090ec <TIM_Base_SetConfig+0xf8>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4a15      	ldr	r2, [pc, #84]	@ (800913c <TIM_Base_SetConfig+0x148>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d103      	bne.n	80090f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	691a      	ldr	r2, [r3, #16]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	f003 0301 	and.w	r3, r3, #1
 8009102:	2b01      	cmp	r3, #1
 8009104:	d105      	bne.n	8009112 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	f023 0201 	bic.w	r2, r3, #1
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	611a      	str	r2, [r3, #16]
  }
}
 8009112:	bf00      	nop
 8009114:	3714      	adds	r7, #20
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	40010000 	.word	0x40010000
 8009124:	40000400 	.word	0x40000400
 8009128:	40000800 	.word	0x40000800
 800912c:	40000c00 	.word	0x40000c00
 8009130:	40010400 	.word	0x40010400
 8009134:	40014000 	.word	0x40014000
 8009138:	40014400 	.word	0x40014400
 800913c:	40014800 	.word	0x40014800

08009140 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009148:	bf00      	nop
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800915c:	bf00      	nop
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009170:	bf00      	nop
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d101      	bne.n	800918e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	e042      	b.n	8009214 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009194:	2b00      	cmp	r3, #0
 8009196:	d106      	bne.n	80091a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f7f8 fdd9 	bl	8001d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2224      	movs	r2, #36	@ 0x24
 80091aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f022 0201 	bic.w	r2, r2, #1
 80091bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d002      	beq.n	80091cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f001 faea 	bl	800a7a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fd7f 	bl	8009cd0 <UART_SetConfig>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d101      	bne.n	80091dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	e01b      	b.n	8009214 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	685a      	ldr	r2, [r3, #4]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80091ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	689a      	ldr	r2, [r3, #8]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80091fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f042 0201 	orr.w	r2, r2, #1
 800920a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f001 fb69 	bl	800a8e4 <UART_CheckIdleState>
 8009212:	4603      	mov	r3, r0
}
 8009214:	4618      	mov	r0, r3
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b08a      	sub	sp, #40	@ 0x28
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	4613      	mov	r3, r2
 8009228:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009230:	2b20      	cmp	r3, #32
 8009232:	d167      	bne.n	8009304 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d002      	beq.n	8009240 <HAL_UART_Transmit_DMA+0x24>
 800923a:	88fb      	ldrh	r3, [r7, #6]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d101      	bne.n	8009244 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e060      	b.n	8009306 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	68ba      	ldr	r2, [r7, #8]
 8009248:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	88fa      	ldrh	r2, [r7, #6]
 800924e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	88fa      	ldrh	r2, [r7, #6]
 8009256:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2221      	movs	r2, #33	@ 0x21
 8009266:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800926e:	2b00      	cmp	r3, #0
 8009270:	d028      	beq.n	80092c4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009276:	4a26      	ldr	r2, [pc, #152]	@ (8009310 <HAL_UART_Transmit_DMA+0xf4>)
 8009278:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800927e:	4a25      	ldr	r2, [pc, #148]	@ (8009314 <HAL_UART_Transmit_DMA+0xf8>)
 8009280:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009286:	4a24      	ldr	r2, [pc, #144]	@ (8009318 <HAL_UART_Transmit_DMA+0xfc>)
 8009288:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800928e:	2200      	movs	r2, #0
 8009290:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800929a:	4619      	mov	r1, r3
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	3328      	adds	r3, #40	@ 0x28
 80092a2:	461a      	mov	r2, r3
 80092a4:	88fb      	ldrh	r3, [r7, #6]
 80092a6:	f7f9 fbe3 	bl	8002a70 <HAL_DMA_Start_IT>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d009      	beq.n	80092c4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2210      	movs	r2, #16
 80092b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2220      	movs	r2, #32
 80092bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	e020      	b.n	8009306 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2240      	movs	r2, #64	@ 0x40
 80092ca:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3308      	adds	r3, #8
 80092d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	e853 3f00 	ldrex	r3, [r3]
 80092da:	613b      	str	r3, [r7, #16]
   return(result);
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	3308      	adds	r3, #8
 80092ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092ec:	623a      	str	r2, [r7, #32]
 80092ee:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f0:	69f9      	ldr	r1, [r7, #28]
 80092f2:	6a3a      	ldr	r2, [r7, #32]
 80092f4:	e841 2300 	strex	r3, r2, [r1]
 80092f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1e5      	bne.n	80092cc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	e000      	b.n	8009306 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009304:	2302      	movs	r3, #2
  }
}
 8009306:	4618      	mov	r0, r3
 8009308:	3728      	adds	r7, #40	@ 0x28
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	0800adb1 	.word	0x0800adb1
 8009314:	0800ae47 	.word	0x0800ae47
 8009318:	0800afc9 	.word	0x0800afc9

0800931c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b08a      	sub	sp, #40	@ 0x28
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	4613      	mov	r3, r2
 8009328:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009330:	2b20      	cmp	r3, #32
 8009332:	d137      	bne.n	80093a4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d002      	beq.n	8009340 <HAL_UART_Receive_DMA+0x24>
 800933a:	88fb      	ldrh	r3, [r7, #6]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d101      	bne.n	8009344 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	e030      	b.n	80093a6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2200      	movs	r2, #0
 8009348:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a18      	ldr	r2, [pc, #96]	@ (80093b0 <HAL_UART_Receive_DMA+0x94>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d01f      	beq.n	8009394 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800935e:	2b00      	cmp	r3, #0
 8009360:	d018      	beq.n	8009394 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	e853 3f00 	ldrex	r3, [r3]
 800936e:	613b      	str	r3, [r7, #16]
   return(result);
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009376:	627b      	str	r3, [r7, #36]	@ 0x24
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	461a      	mov	r2, r3
 800937e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009380:	623b      	str	r3, [r7, #32]
 8009382:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009384:	69f9      	ldr	r1, [r7, #28]
 8009386:	6a3a      	ldr	r2, [r7, #32]
 8009388:	e841 2300 	strex	r3, r2, [r1]
 800938c:	61bb      	str	r3, [r7, #24]
   return(result);
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1e6      	bne.n	8009362 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009394:	88fb      	ldrh	r3, [r7, #6]
 8009396:	461a      	mov	r2, r3
 8009398:	68b9      	ldr	r1, [r7, #8]
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f001 fbba 	bl	800ab14 <UART_Start_Receive_DMA>
 80093a0:	4603      	mov	r3, r0
 80093a2:	e000      	b.n	80093a6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80093a4:	2302      	movs	r3, #2
  }
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3728      	adds	r7, #40	@ 0x28
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	58000c00 	.word	0x58000c00

080093b4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b090      	sub	sp, #64	@ 0x40
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093ca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093d6:	2b80      	cmp	r3, #128	@ 0x80
 80093d8:	d139      	bne.n	800944e <HAL_UART_DMAStop+0x9a>
 80093da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093dc:	2b21      	cmp	r3, #33	@ 0x21
 80093de:	d136      	bne.n	800944e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	3308      	adds	r3, #8
 80093e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e8:	6a3b      	ldr	r3, [r7, #32]
 80093ea:	e853 3f00 	ldrex	r3, [r3]
 80093ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	3308      	adds	r3, #8
 80093fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009400:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009402:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009404:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009406:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009408:	e841 2300 	strex	r3, r2, [r1]
 800940c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800940e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1e5      	bne.n	80093e0 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009418:	2b00      	cmp	r3, #0
 800941a:	d015      	beq.n	8009448 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009420:	4618      	mov	r0, r3
 8009422:	f7f9 fd8f 	bl	8002f44 <HAL_DMA_Abort>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00d      	beq.n	8009448 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009430:	4618      	mov	r0, r3
 8009432:	f7fb fa15 	bl	8004860 <HAL_DMA_GetError>
 8009436:	4603      	mov	r3, r0
 8009438:	2b20      	cmp	r3, #32
 800943a:	d105      	bne.n	8009448 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2210      	movs	r2, #16
 8009440:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009444:	2303      	movs	r3, #3
 8009446:	e047      	b.n	80094d8 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f001 fc09 	bl	800ac60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009458:	2b40      	cmp	r3, #64	@ 0x40
 800945a:	d13c      	bne.n	80094d6 <HAL_UART_DMAStop+0x122>
 800945c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800945e:	2b22      	cmp	r3, #34	@ 0x22
 8009460:	d139      	bne.n	80094d6 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	3308      	adds	r3, #8
 8009468:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	e853 3f00 	ldrex	r3, [r3]
 8009470:	60bb      	str	r3, [r7, #8]
   return(result);
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009478:	633b      	str	r3, [r7, #48]	@ 0x30
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	3308      	adds	r3, #8
 8009480:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009482:	61ba      	str	r2, [r7, #24]
 8009484:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009486:	6979      	ldr	r1, [r7, #20]
 8009488:	69ba      	ldr	r2, [r7, #24]
 800948a:	e841 2300 	strex	r3, r2, [r1]
 800948e:	613b      	str	r3, [r7, #16]
   return(result);
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1e5      	bne.n	8009462 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800949c:	2b00      	cmp	r3, #0
 800949e:	d017      	beq.n	80094d0 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7f9 fd4c 	bl	8002f44 <HAL_DMA_Abort>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00e      	beq.n	80094d0 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fb f9d1 	bl	8004860 <HAL_DMA_GetError>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b20      	cmp	r3, #32
 80094c2:	d105      	bne.n	80094d0 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2210      	movs	r2, #16
 80094c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80094cc:	2303      	movs	r3, #3
 80094ce:	e003      	b.n	80094d8 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f001 fc07 	bl	800ace4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3740      	adds	r7, #64	@ 0x40
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b0ba      	sub	sp, #232	@ 0xe8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	69db      	ldr	r3, [r3, #28]
 80094ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009506:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800950a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800950e:	4013      	ands	r3, r2
 8009510:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009514:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009518:	2b00      	cmp	r3, #0
 800951a:	d11b      	bne.n	8009554 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800951c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009520:	f003 0320 	and.w	r3, r3, #32
 8009524:	2b00      	cmp	r3, #0
 8009526:	d015      	beq.n	8009554 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800952c:	f003 0320 	and.w	r3, r3, #32
 8009530:	2b00      	cmp	r3, #0
 8009532:	d105      	bne.n	8009540 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800953c:	2b00      	cmp	r3, #0
 800953e:	d009      	beq.n	8009554 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009544:	2b00      	cmp	r3, #0
 8009546:	f000 8377 	beq.w	8009c38 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	4798      	blx	r3
      }
      return;
 8009552:	e371      	b.n	8009c38 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009554:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009558:	2b00      	cmp	r3, #0
 800955a:	f000 8123 	beq.w	80097a4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800955e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009562:	4b8d      	ldr	r3, [pc, #564]	@ (8009798 <HAL_UART_IRQHandler+0x2b8>)
 8009564:	4013      	ands	r3, r2
 8009566:	2b00      	cmp	r3, #0
 8009568:	d106      	bne.n	8009578 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800956a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800956e:	4b8b      	ldr	r3, [pc, #556]	@ (800979c <HAL_UART_IRQHandler+0x2bc>)
 8009570:	4013      	ands	r3, r2
 8009572:	2b00      	cmp	r3, #0
 8009574:	f000 8116 	beq.w	80097a4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800957c:	f003 0301 	and.w	r3, r3, #1
 8009580:	2b00      	cmp	r3, #0
 8009582:	d011      	beq.n	80095a8 <HAL_UART_IRQHandler+0xc8>
 8009584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00b      	beq.n	80095a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2201      	movs	r2, #1
 8009596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800959e:	f043 0201 	orr.w	r2, r3, #1
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095ac:	f003 0302 	and.w	r3, r3, #2
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d011      	beq.n	80095d8 <HAL_UART_IRQHandler+0xf8>
 80095b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095b8:	f003 0301 	and.w	r3, r3, #1
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00b      	beq.n	80095d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2202      	movs	r2, #2
 80095c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ce:	f043 0204 	orr.w	r2, r3, #4
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095dc:	f003 0304 	and.w	r3, r3, #4
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d011      	beq.n	8009608 <HAL_UART_IRQHandler+0x128>
 80095e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095e8:	f003 0301 	and.w	r3, r3, #1
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00b      	beq.n	8009608 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2204      	movs	r2, #4
 80095f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095fe:	f043 0202 	orr.w	r2, r3, #2
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800960c:	f003 0308 	and.w	r3, r3, #8
 8009610:	2b00      	cmp	r3, #0
 8009612:	d017      	beq.n	8009644 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009618:	f003 0320 	and.w	r3, r3, #32
 800961c:	2b00      	cmp	r3, #0
 800961e:	d105      	bne.n	800962c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009620:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009624:	4b5c      	ldr	r3, [pc, #368]	@ (8009798 <HAL_UART_IRQHandler+0x2b8>)
 8009626:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00b      	beq.n	8009644 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2208      	movs	r2, #8
 8009632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800963a:	f043 0208 	orr.w	r2, r3, #8
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800964c:	2b00      	cmp	r3, #0
 800964e:	d012      	beq.n	8009676 <HAL_UART_IRQHandler+0x196>
 8009650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009654:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009658:	2b00      	cmp	r3, #0
 800965a:	d00c      	beq.n	8009676 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009664:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800966c:	f043 0220 	orr.w	r2, r3, #32
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800967c:	2b00      	cmp	r3, #0
 800967e:	f000 82dd 	beq.w	8009c3c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009686:	f003 0320 	and.w	r3, r3, #32
 800968a:	2b00      	cmp	r3, #0
 800968c:	d013      	beq.n	80096b6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800968e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009692:	f003 0320 	and.w	r3, r3, #32
 8009696:	2b00      	cmp	r3, #0
 8009698:	d105      	bne.n	80096a6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800969a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800969e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d007      	beq.n	80096b6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d003      	beq.n	80096b6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096ca:	2b40      	cmp	r3, #64	@ 0x40
 80096cc:	d005      	beq.n	80096da <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80096ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80096d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d054      	beq.n	8009784 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f001 fb02 	bl	800ace4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096ea:	2b40      	cmp	r3, #64	@ 0x40
 80096ec:	d146      	bne.n	800977c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	3308      	adds	r3, #8
 80096f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80096fc:	e853 3f00 	ldrex	r3, [r3]
 8009700:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009704:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009708:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800970c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	3308      	adds	r3, #8
 8009716:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800971a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800971e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009722:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009726:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800972a:	e841 2300 	strex	r3, r2, [r1]
 800972e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009732:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1d9      	bne.n	80096ee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009740:	2b00      	cmp	r3, #0
 8009742:	d017      	beq.n	8009774 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800974a:	4a15      	ldr	r2, [pc, #84]	@ (80097a0 <HAL_UART_IRQHandler+0x2c0>)
 800974c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009754:	4618      	mov	r0, r3
 8009756:	f7f9 ff13 	bl	8003580 <HAL_DMA_Abort_IT>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d019      	beq.n	8009794 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800976e:	4610      	mov	r0, r2
 8009770:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009772:	e00f      	b.n	8009794 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fa95 	bl	8009ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800977a:	e00b      	b.n	8009794 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 fa91 	bl	8009ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009782:	e007      	b.n	8009794 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fa8d 	bl	8009ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009792:	e253      	b.n	8009c3c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009794:	bf00      	nop
    return;
 8009796:	e251      	b.n	8009c3c <HAL_UART_IRQHandler+0x75c>
 8009798:	10000001 	.word	0x10000001
 800979c:	04000120 	.word	0x04000120
 80097a0:	0800b049 	.word	0x0800b049

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	f040 81e7 	bne.w	8009b7c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80097ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097b2:	f003 0310 	and.w	r3, r3, #16
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	f000 81e0 	beq.w	8009b7c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80097bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097c0:	f003 0310 	and.w	r3, r3, #16
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f000 81d9 	beq.w	8009b7c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2210      	movs	r2, #16
 80097d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097dc:	2b40      	cmp	r3, #64	@ 0x40
 80097de:	f040 8151 	bne.w	8009a84 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a96      	ldr	r2, [pc, #600]	@ (8009a44 <HAL_UART_IRQHandler+0x564>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d068      	beq.n	80098c2 <HAL_UART_IRQHandler+0x3e2>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a93      	ldr	r2, [pc, #588]	@ (8009a48 <HAL_UART_IRQHandler+0x568>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d061      	beq.n	80098c2 <HAL_UART_IRQHandler+0x3e2>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a91      	ldr	r2, [pc, #580]	@ (8009a4c <HAL_UART_IRQHandler+0x56c>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d05a      	beq.n	80098c2 <HAL_UART_IRQHandler+0x3e2>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a8e      	ldr	r2, [pc, #568]	@ (8009a50 <HAL_UART_IRQHandler+0x570>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d053      	beq.n	80098c2 <HAL_UART_IRQHandler+0x3e2>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a8c      	ldr	r2, [pc, #560]	@ (8009a54 <HAL_UART_IRQHandler+0x574>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d04c      	beq.n	80098c2 <HAL_UART_IRQHandler+0x3e2>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a89      	ldr	r2, [pc, #548]	@ (8009a58 <HAL_UART_IRQHandler+0x578>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d045      	beq.n	80098c2 <HAL_UART_IRQHandler+0x3e2>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a87      	ldr	r2, [pc, #540]	@ (8009a5c <HAL_UART_IRQHandler+0x57c>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d03e      	beq.n	80098c2 <HAL_UART_IRQHandler+0x3e2>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a84      	ldr	r2, [pc, #528]	@ (8009a60 <HAL_UART_IRQHandler+0x580>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d037      	beq.n	80098c2 <HAL_UART_IRQHandler+0x3e2>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a82      	ldr	r2, [pc, #520]	@ (8009a64 <HAL_UART_IRQHandler+0x584>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d030      	beq.n	80098c2 <HAL_UART_IRQHandler+0x3e2>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a7f      	ldr	r2, [pc, #508]	@ (8009a68 <HAL_UART_IRQHandler+0x588>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d029      	beq.n	80098c2 <HAL_UART_IRQHandler+0x3e2>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a7d      	ldr	r2, [pc, #500]	@ (8009a6c <HAL_UART_IRQHandler+0x58c>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d022      	beq.n	80098c2 <HAL_UART_IRQHandler+0x3e2>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a7a      	ldr	r2, [pc, #488]	@ (8009a70 <HAL_UART_IRQHandler+0x590>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d01b      	beq.n	80098c2 <HAL_UART_IRQHandler+0x3e2>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a78      	ldr	r2, [pc, #480]	@ (8009a74 <HAL_UART_IRQHandler+0x594>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d014      	beq.n	80098c2 <HAL_UART_IRQHandler+0x3e2>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a75      	ldr	r2, [pc, #468]	@ (8009a78 <HAL_UART_IRQHandler+0x598>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d00d      	beq.n	80098c2 <HAL_UART_IRQHandler+0x3e2>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a73      	ldr	r2, [pc, #460]	@ (8009a7c <HAL_UART_IRQHandler+0x59c>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d006      	beq.n	80098c2 <HAL_UART_IRQHandler+0x3e2>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a70      	ldr	r2, [pc, #448]	@ (8009a80 <HAL_UART_IRQHandler+0x5a0>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d106      	bne.n	80098d0 <HAL_UART_IRQHandler+0x3f0>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	e005      	b.n	80098dc <HAL_UART_IRQHandler+0x3fc>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	b29b      	uxth	r3, r3
 80098dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80098e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f000 81ab 	beq.w	8009c40 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80098f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80098f4:	429a      	cmp	r2, r3
 80098f6:	f080 81a3 	bcs.w	8009c40 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009900:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800990a:	69db      	ldr	r3, [r3, #28]
 800990c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009910:	f000 8087 	beq.w	8009a22 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009920:	e853 3f00 	ldrex	r3, [r3]
 8009924:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009928:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800992c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009930:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	461a      	mov	r2, r3
 800993a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800993e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009942:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009946:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800994a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800994e:	e841 2300 	strex	r3, r2, [r1]
 8009952:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009956:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1da      	bne.n	8009914 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	3308      	adds	r3, #8
 8009964:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009966:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009968:	e853 3f00 	ldrex	r3, [r3]
 800996c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800996e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009970:	f023 0301 	bic.w	r3, r3, #1
 8009974:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	3308      	adds	r3, #8
 800997e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009982:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009986:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009988:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800998a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800998e:	e841 2300 	strex	r3, r2, [r1]
 8009992:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009994:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1e1      	bne.n	800995e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	3308      	adds	r3, #8
 80099a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80099a4:	e853 3f00 	ldrex	r3, [r3]
 80099a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80099aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80099ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	3308      	adds	r3, #8
 80099ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80099be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80099c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80099c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80099c6:	e841 2300 	strex	r3, r2, [r1]
 80099ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80099cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1e3      	bne.n	800999a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2220      	movs	r2, #32
 80099d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099e8:	e853 3f00 	ldrex	r3, [r3]
 80099ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80099ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099f0:	f023 0310 	bic.w	r3, r3, #16
 80099f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	461a      	mov	r2, r3
 80099fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a04:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a0a:	e841 2300 	strex	r3, r2, [r1]
 8009a0e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1e4      	bne.n	80099e0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7f9 fa91 	bl	8002f44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2202      	movs	r2, #2
 8009a26:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	1ad3      	subs	r3, r2, r3
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 f93b 	bl	8009cb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a42:	e0fd      	b.n	8009c40 <HAL_UART_IRQHandler+0x760>
 8009a44:	40020010 	.word	0x40020010
 8009a48:	40020028 	.word	0x40020028
 8009a4c:	40020040 	.word	0x40020040
 8009a50:	40020058 	.word	0x40020058
 8009a54:	40020070 	.word	0x40020070
 8009a58:	40020088 	.word	0x40020088
 8009a5c:	400200a0 	.word	0x400200a0
 8009a60:	400200b8 	.word	0x400200b8
 8009a64:	40020410 	.word	0x40020410
 8009a68:	40020428 	.word	0x40020428
 8009a6c:	40020440 	.word	0x40020440
 8009a70:	40020458 	.word	0x40020458
 8009a74:	40020470 	.word	0x40020470
 8009a78:	40020488 	.word	0x40020488
 8009a7c:	400204a0 	.word	0x400204a0
 8009a80:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	1ad3      	subs	r3, r2, r3
 8009a94:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	f000 80cf 	beq.w	8009c44 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009aa6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	f000 80ca 	beq.w	8009c44 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab8:	e853 3f00 	ldrex	r3, [r3]
 8009abc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ac0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ac4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	461a      	mov	r2, r3
 8009ace:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009ad2:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ad4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ad8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ada:	e841 2300 	strex	r3, r2, [r1]
 8009ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1e4      	bne.n	8009ab0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	3308      	adds	r3, #8
 8009aec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af0:	e853 3f00 	ldrex	r3, [r3]
 8009af4:	623b      	str	r3, [r7, #32]
   return(result);
 8009af6:	6a3a      	ldr	r2, [r7, #32]
 8009af8:	4b55      	ldr	r3, [pc, #340]	@ (8009c50 <HAL_UART_IRQHandler+0x770>)
 8009afa:	4013      	ands	r3, r2
 8009afc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	3308      	adds	r3, #8
 8009b06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009b0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b12:	e841 2300 	strex	r3, r2, [r1]
 8009b16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d1e3      	bne.n	8009ae6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2220      	movs	r2, #32
 8009b22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	e853 3f00 	ldrex	r3, [r3]
 8009b3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f023 0310 	bic.w	r3, r3, #16
 8009b46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009b54:	61fb      	str	r3, [r7, #28]
 8009b56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b58:	69b9      	ldr	r1, [r7, #24]
 8009b5a:	69fa      	ldr	r2, [r7, #28]
 8009b5c:	e841 2300 	strex	r3, r2, [r1]
 8009b60:	617b      	str	r3, [r7, #20]
   return(result);
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d1e4      	bne.n	8009b32 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009b6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009b72:	4619      	mov	r1, r3
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 f89f 	bl	8009cb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009b7a:	e063      	b.n	8009c44 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00e      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x6c6>
 8009b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d008      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009b9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f001 fa93 	bl	800b0ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ba4:	e051      	b.n	8009c4a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d014      	beq.n	8009bdc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d105      	bne.n	8009bca <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d008      	beq.n	8009bdc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d03a      	beq.n	8009c48 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	4798      	blx	r3
    }
    return;
 8009bda:	e035      	b.n	8009c48 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d009      	beq.n	8009bfc <HAL_UART_IRQHandler+0x71c>
 8009be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d003      	beq.n	8009bfc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f001 fa3d 	bl	800b074 <UART_EndTransmit_IT>
    return;
 8009bfa:	e026      	b.n	8009c4a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d009      	beq.n	8009c1c <HAL_UART_IRQHandler+0x73c>
 8009c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c0c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d003      	beq.n	8009c1c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f001 fa6c 	bl	800b0f2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c1a:	e016      	b.n	8009c4a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d010      	beq.n	8009c4a <HAL_UART_IRQHandler+0x76a>
 8009c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	da0c      	bge.n	8009c4a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f001 fa54 	bl	800b0de <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c36:	e008      	b.n	8009c4a <HAL_UART_IRQHandler+0x76a>
      return;
 8009c38:	bf00      	nop
 8009c3a:	e006      	b.n	8009c4a <HAL_UART_IRQHandler+0x76a>
    return;
 8009c3c:	bf00      	nop
 8009c3e:	e004      	b.n	8009c4a <HAL_UART_IRQHandler+0x76a>
      return;
 8009c40:	bf00      	nop
 8009c42:	e002      	b.n	8009c4a <HAL_UART_IRQHandler+0x76a>
      return;
 8009c44:	bf00      	nop
 8009c46:	e000      	b.n	8009c4a <HAL_UART_IRQHandler+0x76a>
    return;
 8009c48:	bf00      	nop
  }
}
 8009c4a:	37e8      	adds	r7, #232	@ 0xe8
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	effffffe 	.word	0xeffffffe

08009c54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009c5c:	bf00      	nop
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009c70:	bf00      	nop
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009c84:	bf00      	nop
 8009c86:	370c      	adds	r7, #12
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009c98:	bf00      	nop
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009cac:	bf00      	nop
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009cc4:	bf00      	nop
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009cd4:	b092      	sub	sp, #72	@ 0x48
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	689a      	ldr	r2, [r3, #8]
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	691b      	ldr	r3, [r3, #16]
 8009ce8:	431a      	orrs	r2, r3
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	695b      	ldr	r3, [r3, #20]
 8009cee:	431a      	orrs	r2, r3
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	69db      	ldr	r3, [r3, #28]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	4bbe      	ldr	r3, [pc, #760]	@ (8009ff8 <UART_SetConfig+0x328>)
 8009d00:	4013      	ands	r3, r2
 8009d02:	697a      	ldr	r2, [r7, #20]
 8009d04:	6812      	ldr	r2, [r2, #0]
 8009d06:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009d08:	430b      	orrs	r3, r1
 8009d0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	68da      	ldr	r2, [r3, #12]
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	430a      	orrs	r2, r1
 8009d20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	699b      	ldr	r3, [r3, #24]
 8009d26:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4ab3      	ldr	r2, [pc, #716]	@ (8009ffc <UART_SetConfig+0x32c>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d004      	beq.n	8009d3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	6a1b      	ldr	r3, [r3, #32]
 8009d36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	689a      	ldr	r2, [r3, #8]
 8009d42:	4baf      	ldr	r3, [pc, #700]	@ (800a000 <UART_SetConfig+0x330>)
 8009d44:	4013      	ands	r3, r2
 8009d46:	697a      	ldr	r2, [r7, #20]
 8009d48:	6812      	ldr	r2, [r2, #0]
 8009d4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009d4c:	430b      	orrs	r3, r1
 8009d4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d56:	f023 010f 	bic.w	r1, r3, #15
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	430a      	orrs	r2, r1
 8009d64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4aa6      	ldr	r2, [pc, #664]	@ (800a004 <UART_SetConfig+0x334>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d177      	bne.n	8009e60 <UART_SetConfig+0x190>
 8009d70:	4ba5      	ldr	r3, [pc, #660]	@ (800a008 <UART_SetConfig+0x338>)
 8009d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d78:	2b28      	cmp	r3, #40	@ 0x28
 8009d7a:	d86d      	bhi.n	8009e58 <UART_SetConfig+0x188>
 8009d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8009d84 <UART_SetConfig+0xb4>)
 8009d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d82:	bf00      	nop
 8009d84:	08009e29 	.word	0x08009e29
 8009d88:	08009e59 	.word	0x08009e59
 8009d8c:	08009e59 	.word	0x08009e59
 8009d90:	08009e59 	.word	0x08009e59
 8009d94:	08009e59 	.word	0x08009e59
 8009d98:	08009e59 	.word	0x08009e59
 8009d9c:	08009e59 	.word	0x08009e59
 8009da0:	08009e59 	.word	0x08009e59
 8009da4:	08009e31 	.word	0x08009e31
 8009da8:	08009e59 	.word	0x08009e59
 8009dac:	08009e59 	.word	0x08009e59
 8009db0:	08009e59 	.word	0x08009e59
 8009db4:	08009e59 	.word	0x08009e59
 8009db8:	08009e59 	.word	0x08009e59
 8009dbc:	08009e59 	.word	0x08009e59
 8009dc0:	08009e59 	.word	0x08009e59
 8009dc4:	08009e39 	.word	0x08009e39
 8009dc8:	08009e59 	.word	0x08009e59
 8009dcc:	08009e59 	.word	0x08009e59
 8009dd0:	08009e59 	.word	0x08009e59
 8009dd4:	08009e59 	.word	0x08009e59
 8009dd8:	08009e59 	.word	0x08009e59
 8009ddc:	08009e59 	.word	0x08009e59
 8009de0:	08009e59 	.word	0x08009e59
 8009de4:	08009e41 	.word	0x08009e41
 8009de8:	08009e59 	.word	0x08009e59
 8009dec:	08009e59 	.word	0x08009e59
 8009df0:	08009e59 	.word	0x08009e59
 8009df4:	08009e59 	.word	0x08009e59
 8009df8:	08009e59 	.word	0x08009e59
 8009dfc:	08009e59 	.word	0x08009e59
 8009e00:	08009e59 	.word	0x08009e59
 8009e04:	08009e49 	.word	0x08009e49
 8009e08:	08009e59 	.word	0x08009e59
 8009e0c:	08009e59 	.word	0x08009e59
 8009e10:	08009e59 	.word	0x08009e59
 8009e14:	08009e59 	.word	0x08009e59
 8009e18:	08009e59 	.word	0x08009e59
 8009e1c:	08009e59 	.word	0x08009e59
 8009e20:	08009e59 	.word	0x08009e59
 8009e24:	08009e51 	.word	0x08009e51
 8009e28:	2301      	movs	r3, #1
 8009e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e2e:	e222      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009e30:	2304      	movs	r3, #4
 8009e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e36:	e21e      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009e38:	2308      	movs	r3, #8
 8009e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e3e:	e21a      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009e40:	2310      	movs	r3, #16
 8009e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e46:	e216      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009e48:	2320      	movs	r3, #32
 8009e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e4e:	e212      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009e50:	2340      	movs	r3, #64	@ 0x40
 8009e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e56:	e20e      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009e58:	2380      	movs	r3, #128	@ 0x80
 8009e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e5e:	e20a      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a69      	ldr	r2, [pc, #420]	@ (800a00c <UART_SetConfig+0x33c>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d130      	bne.n	8009ecc <UART_SetConfig+0x1fc>
 8009e6a:	4b67      	ldr	r3, [pc, #412]	@ (800a008 <UART_SetConfig+0x338>)
 8009e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e6e:	f003 0307 	and.w	r3, r3, #7
 8009e72:	2b05      	cmp	r3, #5
 8009e74:	d826      	bhi.n	8009ec4 <UART_SetConfig+0x1f4>
 8009e76:	a201      	add	r2, pc, #4	@ (adr r2, 8009e7c <UART_SetConfig+0x1ac>)
 8009e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7c:	08009e95 	.word	0x08009e95
 8009e80:	08009e9d 	.word	0x08009e9d
 8009e84:	08009ea5 	.word	0x08009ea5
 8009e88:	08009ead 	.word	0x08009ead
 8009e8c:	08009eb5 	.word	0x08009eb5
 8009e90:	08009ebd 	.word	0x08009ebd
 8009e94:	2300      	movs	r3, #0
 8009e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e9a:	e1ec      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009e9c:	2304      	movs	r3, #4
 8009e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ea2:	e1e8      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009ea4:	2308      	movs	r3, #8
 8009ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eaa:	e1e4      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009eac:	2310      	movs	r3, #16
 8009eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eb2:	e1e0      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009eb4:	2320      	movs	r3, #32
 8009eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eba:	e1dc      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009ebc:	2340      	movs	r3, #64	@ 0x40
 8009ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ec2:	e1d8      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009ec4:	2380      	movs	r3, #128	@ 0x80
 8009ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eca:	e1d4      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a4f      	ldr	r2, [pc, #316]	@ (800a010 <UART_SetConfig+0x340>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d130      	bne.n	8009f38 <UART_SetConfig+0x268>
 8009ed6:	4b4c      	ldr	r3, [pc, #304]	@ (800a008 <UART_SetConfig+0x338>)
 8009ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009eda:	f003 0307 	and.w	r3, r3, #7
 8009ede:	2b05      	cmp	r3, #5
 8009ee0:	d826      	bhi.n	8009f30 <UART_SetConfig+0x260>
 8009ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ee8 <UART_SetConfig+0x218>)
 8009ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee8:	08009f01 	.word	0x08009f01
 8009eec:	08009f09 	.word	0x08009f09
 8009ef0:	08009f11 	.word	0x08009f11
 8009ef4:	08009f19 	.word	0x08009f19
 8009ef8:	08009f21 	.word	0x08009f21
 8009efc:	08009f29 	.word	0x08009f29
 8009f00:	2300      	movs	r3, #0
 8009f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f06:	e1b6      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009f08:	2304      	movs	r3, #4
 8009f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f0e:	e1b2      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009f10:	2308      	movs	r3, #8
 8009f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f16:	e1ae      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009f18:	2310      	movs	r3, #16
 8009f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f1e:	e1aa      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009f20:	2320      	movs	r3, #32
 8009f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f26:	e1a6      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009f28:	2340      	movs	r3, #64	@ 0x40
 8009f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f2e:	e1a2      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009f30:	2380      	movs	r3, #128	@ 0x80
 8009f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f36:	e19e      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a35      	ldr	r2, [pc, #212]	@ (800a014 <UART_SetConfig+0x344>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d130      	bne.n	8009fa4 <UART_SetConfig+0x2d4>
 8009f42:	4b31      	ldr	r3, [pc, #196]	@ (800a008 <UART_SetConfig+0x338>)
 8009f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f46:	f003 0307 	and.w	r3, r3, #7
 8009f4a:	2b05      	cmp	r3, #5
 8009f4c:	d826      	bhi.n	8009f9c <UART_SetConfig+0x2cc>
 8009f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f54 <UART_SetConfig+0x284>)
 8009f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f54:	08009f6d 	.word	0x08009f6d
 8009f58:	08009f75 	.word	0x08009f75
 8009f5c:	08009f7d 	.word	0x08009f7d
 8009f60:	08009f85 	.word	0x08009f85
 8009f64:	08009f8d 	.word	0x08009f8d
 8009f68:	08009f95 	.word	0x08009f95
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f72:	e180      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009f74:	2304      	movs	r3, #4
 8009f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f7a:	e17c      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009f7c:	2308      	movs	r3, #8
 8009f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f82:	e178      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009f84:	2310      	movs	r3, #16
 8009f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f8a:	e174      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009f8c:	2320      	movs	r3, #32
 8009f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f92:	e170      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009f94:	2340      	movs	r3, #64	@ 0x40
 8009f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f9a:	e16c      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009f9c:	2380      	movs	r3, #128	@ 0x80
 8009f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fa2:	e168      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a1b      	ldr	r2, [pc, #108]	@ (800a018 <UART_SetConfig+0x348>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d142      	bne.n	800a034 <UART_SetConfig+0x364>
 8009fae:	4b16      	ldr	r3, [pc, #88]	@ (800a008 <UART_SetConfig+0x338>)
 8009fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fb2:	f003 0307 	and.w	r3, r3, #7
 8009fb6:	2b05      	cmp	r3, #5
 8009fb8:	d838      	bhi.n	800a02c <UART_SetConfig+0x35c>
 8009fba:	a201      	add	r2, pc, #4	@ (adr r2, 8009fc0 <UART_SetConfig+0x2f0>)
 8009fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc0:	08009fd9 	.word	0x08009fd9
 8009fc4:	08009fe1 	.word	0x08009fe1
 8009fc8:	08009fe9 	.word	0x08009fe9
 8009fcc:	08009ff1 	.word	0x08009ff1
 8009fd0:	0800a01d 	.word	0x0800a01d
 8009fd4:	0800a025 	.word	0x0800a025
 8009fd8:	2300      	movs	r3, #0
 8009fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fde:	e14a      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009fe0:	2304      	movs	r3, #4
 8009fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fe6:	e146      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009fe8:	2308      	movs	r3, #8
 8009fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fee:	e142      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009ff0:	2310      	movs	r3, #16
 8009ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ff6:	e13e      	b.n	800a276 <UART_SetConfig+0x5a6>
 8009ff8:	cfff69f3 	.word	0xcfff69f3
 8009ffc:	58000c00 	.word	0x58000c00
 800a000:	11fff4ff 	.word	0x11fff4ff
 800a004:	40011000 	.word	0x40011000
 800a008:	58024400 	.word	0x58024400
 800a00c:	40004400 	.word	0x40004400
 800a010:	40004800 	.word	0x40004800
 800a014:	40004c00 	.word	0x40004c00
 800a018:	40005000 	.word	0x40005000
 800a01c:	2320      	movs	r3, #32
 800a01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a022:	e128      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a024:	2340      	movs	r3, #64	@ 0x40
 800a026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a02a:	e124      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a02c:	2380      	movs	r3, #128	@ 0x80
 800a02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a032:	e120      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4acb      	ldr	r2, [pc, #812]	@ (800a368 <UART_SetConfig+0x698>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d176      	bne.n	800a12c <UART_SetConfig+0x45c>
 800a03e:	4bcb      	ldr	r3, [pc, #812]	@ (800a36c <UART_SetConfig+0x69c>)
 800a040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a042:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a046:	2b28      	cmp	r3, #40	@ 0x28
 800a048:	d86c      	bhi.n	800a124 <UART_SetConfig+0x454>
 800a04a:	a201      	add	r2, pc, #4	@ (adr r2, 800a050 <UART_SetConfig+0x380>)
 800a04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a050:	0800a0f5 	.word	0x0800a0f5
 800a054:	0800a125 	.word	0x0800a125
 800a058:	0800a125 	.word	0x0800a125
 800a05c:	0800a125 	.word	0x0800a125
 800a060:	0800a125 	.word	0x0800a125
 800a064:	0800a125 	.word	0x0800a125
 800a068:	0800a125 	.word	0x0800a125
 800a06c:	0800a125 	.word	0x0800a125
 800a070:	0800a0fd 	.word	0x0800a0fd
 800a074:	0800a125 	.word	0x0800a125
 800a078:	0800a125 	.word	0x0800a125
 800a07c:	0800a125 	.word	0x0800a125
 800a080:	0800a125 	.word	0x0800a125
 800a084:	0800a125 	.word	0x0800a125
 800a088:	0800a125 	.word	0x0800a125
 800a08c:	0800a125 	.word	0x0800a125
 800a090:	0800a105 	.word	0x0800a105
 800a094:	0800a125 	.word	0x0800a125
 800a098:	0800a125 	.word	0x0800a125
 800a09c:	0800a125 	.word	0x0800a125
 800a0a0:	0800a125 	.word	0x0800a125
 800a0a4:	0800a125 	.word	0x0800a125
 800a0a8:	0800a125 	.word	0x0800a125
 800a0ac:	0800a125 	.word	0x0800a125
 800a0b0:	0800a10d 	.word	0x0800a10d
 800a0b4:	0800a125 	.word	0x0800a125
 800a0b8:	0800a125 	.word	0x0800a125
 800a0bc:	0800a125 	.word	0x0800a125
 800a0c0:	0800a125 	.word	0x0800a125
 800a0c4:	0800a125 	.word	0x0800a125
 800a0c8:	0800a125 	.word	0x0800a125
 800a0cc:	0800a125 	.word	0x0800a125
 800a0d0:	0800a115 	.word	0x0800a115
 800a0d4:	0800a125 	.word	0x0800a125
 800a0d8:	0800a125 	.word	0x0800a125
 800a0dc:	0800a125 	.word	0x0800a125
 800a0e0:	0800a125 	.word	0x0800a125
 800a0e4:	0800a125 	.word	0x0800a125
 800a0e8:	0800a125 	.word	0x0800a125
 800a0ec:	0800a125 	.word	0x0800a125
 800a0f0:	0800a11d 	.word	0x0800a11d
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0fa:	e0bc      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a0fc:	2304      	movs	r3, #4
 800a0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a102:	e0b8      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a104:	2308      	movs	r3, #8
 800a106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a10a:	e0b4      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a10c:	2310      	movs	r3, #16
 800a10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a112:	e0b0      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a114:	2320      	movs	r3, #32
 800a116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a11a:	e0ac      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a11c:	2340      	movs	r3, #64	@ 0x40
 800a11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a122:	e0a8      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a124:	2380      	movs	r3, #128	@ 0x80
 800a126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a12a:	e0a4      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a8f      	ldr	r2, [pc, #572]	@ (800a370 <UART_SetConfig+0x6a0>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d130      	bne.n	800a198 <UART_SetConfig+0x4c8>
 800a136:	4b8d      	ldr	r3, [pc, #564]	@ (800a36c <UART_SetConfig+0x69c>)
 800a138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a13a:	f003 0307 	and.w	r3, r3, #7
 800a13e:	2b05      	cmp	r3, #5
 800a140:	d826      	bhi.n	800a190 <UART_SetConfig+0x4c0>
 800a142:	a201      	add	r2, pc, #4	@ (adr r2, 800a148 <UART_SetConfig+0x478>)
 800a144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a148:	0800a161 	.word	0x0800a161
 800a14c:	0800a169 	.word	0x0800a169
 800a150:	0800a171 	.word	0x0800a171
 800a154:	0800a179 	.word	0x0800a179
 800a158:	0800a181 	.word	0x0800a181
 800a15c:	0800a189 	.word	0x0800a189
 800a160:	2300      	movs	r3, #0
 800a162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a166:	e086      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a168:	2304      	movs	r3, #4
 800a16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a16e:	e082      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a170:	2308      	movs	r3, #8
 800a172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a176:	e07e      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a178:	2310      	movs	r3, #16
 800a17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a17e:	e07a      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a180:	2320      	movs	r3, #32
 800a182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a186:	e076      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a188:	2340      	movs	r3, #64	@ 0x40
 800a18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a18e:	e072      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a190:	2380      	movs	r3, #128	@ 0x80
 800a192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a196:	e06e      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a75      	ldr	r2, [pc, #468]	@ (800a374 <UART_SetConfig+0x6a4>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d130      	bne.n	800a204 <UART_SetConfig+0x534>
 800a1a2:	4b72      	ldr	r3, [pc, #456]	@ (800a36c <UART_SetConfig+0x69c>)
 800a1a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1a6:	f003 0307 	and.w	r3, r3, #7
 800a1aa:	2b05      	cmp	r3, #5
 800a1ac:	d826      	bhi.n	800a1fc <UART_SetConfig+0x52c>
 800a1ae:	a201      	add	r2, pc, #4	@ (adr r2, 800a1b4 <UART_SetConfig+0x4e4>)
 800a1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b4:	0800a1cd 	.word	0x0800a1cd
 800a1b8:	0800a1d5 	.word	0x0800a1d5
 800a1bc:	0800a1dd 	.word	0x0800a1dd
 800a1c0:	0800a1e5 	.word	0x0800a1e5
 800a1c4:	0800a1ed 	.word	0x0800a1ed
 800a1c8:	0800a1f5 	.word	0x0800a1f5
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1d2:	e050      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a1d4:	2304      	movs	r3, #4
 800a1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1da:	e04c      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a1dc:	2308      	movs	r3, #8
 800a1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1e2:	e048      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a1e4:	2310      	movs	r3, #16
 800a1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ea:	e044      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a1ec:	2320      	movs	r3, #32
 800a1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1f2:	e040      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a1f4:	2340      	movs	r3, #64	@ 0x40
 800a1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1fa:	e03c      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a1fc:	2380      	movs	r3, #128	@ 0x80
 800a1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a202:	e038      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a5b      	ldr	r2, [pc, #364]	@ (800a378 <UART_SetConfig+0x6a8>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d130      	bne.n	800a270 <UART_SetConfig+0x5a0>
 800a20e:	4b57      	ldr	r3, [pc, #348]	@ (800a36c <UART_SetConfig+0x69c>)
 800a210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a212:	f003 0307 	and.w	r3, r3, #7
 800a216:	2b05      	cmp	r3, #5
 800a218:	d826      	bhi.n	800a268 <UART_SetConfig+0x598>
 800a21a:	a201      	add	r2, pc, #4	@ (adr r2, 800a220 <UART_SetConfig+0x550>)
 800a21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a220:	0800a239 	.word	0x0800a239
 800a224:	0800a241 	.word	0x0800a241
 800a228:	0800a249 	.word	0x0800a249
 800a22c:	0800a251 	.word	0x0800a251
 800a230:	0800a259 	.word	0x0800a259
 800a234:	0800a261 	.word	0x0800a261
 800a238:	2302      	movs	r3, #2
 800a23a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a23e:	e01a      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a240:	2304      	movs	r3, #4
 800a242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a246:	e016      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a248:	2308      	movs	r3, #8
 800a24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a24e:	e012      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a250:	2310      	movs	r3, #16
 800a252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a256:	e00e      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a258:	2320      	movs	r3, #32
 800a25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a25e:	e00a      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a260:	2340      	movs	r3, #64	@ 0x40
 800a262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a266:	e006      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a268:	2380      	movs	r3, #128	@ 0x80
 800a26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a26e:	e002      	b.n	800a276 <UART_SetConfig+0x5a6>
 800a270:	2380      	movs	r3, #128	@ 0x80
 800a272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a3f      	ldr	r2, [pc, #252]	@ (800a378 <UART_SetConfig+0x6a8>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	f040 80f8 	bne.w	800a472 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a282:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a286:	2b20      	cmp	r3, #32
 800a288:	dc46      	bgt.n	800a318 <UART_SetConfig+0x648>
 800a28a:	2b02      	cmp	r3, #2
 800a28c:	f2c0 8082 	blt.w	800a394 <UART_SetConfig+0x6c4>
 800a290:	3b02      	subs	r3, #2
 800a292:	2b1e      	cmp	r3, #30
 800a294:	d87e      	bhi.n	800a394 <UART_SetConfig+0x6c4>
 800a296:	a201      	add	r2, pc, #4	@ (adr r2, 800a29c <UART_SetConfig+0x5cc>)
 800a298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a29c:	0800a31f 	.word	0x0800a31f
 800a2a0:	0800a395 	.word	0x0800a395
 800a2a4:	0800a327 	.word	0x0800a327
 800a2a8:	0800a395 	.word	0x0800a395
 800a2ac:	0800a395 	.word	0x0800a395
 800a2b0:	0800a395 	.word	0x0800a395
 800a2b4:	0800a337 	.word	0x0800a337
 800a2b8:	0800a395 	.word	0x0800a395
 800a2bc:	0800a395 	.word	0x0800a395
 800a2c0:	0800a395 	.word	0x0800a395
 800a2c4:	0800a395 	.word	0x0800a395
 800a2c8:	0800a395 	.word	0x0800a395
 800a2cc:	0800a395 	.word	0x0800a395
 800a2d0:	0800a395 	.word	0x0800a395
 800a2d4:	0800a347 	.word	0x0800a347
 800a2d8:	0800a395 	.word	0x0800a395
 800a2dc:	0800a395 	.word	0x0800a395
 800a2e0:	0800a395 	.word	0x0800a395
 800a2e4:	0800a395 	.word	0x0800a395
 800a2e8:	0800a395 	.word	0x0800a395
 800a2ec:	0800a395 	.word	0x0800a395
 800a2f0:	0800a395 	.word	0x0800a395
 800a2f4:	0800a395 	.word	0x0800a395
 800a2f8:	0800a395 	.word	0x0800a395
 800a2fc:	0800a395 	.word	0x0800a395
 800a300:	0800a395 	.word	0x0800a395
 800a304:	0800a395 	.word	0x0800a395
 800a308:	0800a395 	.word	0x0800a395
 800a30c:	0800a395 	.word	0x0800a395
 800a310:	0800a395 	.word	0x0800a395
 800a314:	0800a387 	.word	0x0800a387
 800a318:	2b40      	cmp	r3, #64	@ 0x40
 800a31a:	d037      	beq.n	800a38c <UART_SetConfig+0x6bc>
 800a31c:	e03a      	b.n	800a394 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a31e:	f7fe f83d 	bl	800839c <HAL_RCCEx_GetD3PCLK1Freq>
 800a322:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a324:	e03c      	b.n	800a3a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a326:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fe f84c 	bl	80083c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a334:	e034      	b.n	800a3a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a336:	f107 0318 	add.w	r3, r7, #24
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7fe f998 	bl	8008670 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a344:	e02c      	b.n	800a3a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a346:	4b09      	ldr	r3, [pc, #36]	@ (800a36c <UART_SetConfig+0x69c>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f003 0320 	and.w	r3, r3, #32
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d016      	beq.n	800a380 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a352:	4b06      	ldr	r3, [pc, #24]	@ (800a36c <UART_SetConfig+0x69c>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	08db      	lsrs	r3, r3, #3
 800a358:	f003 0303 	and.w	r3, r3, #3
 800a35c:	4a07      	ldr	r2, [pc, #28]	@ (800a37c <UART_SetConfig+0x6ac>)
 800a35e:	fa22 f303 	lsr.w	r3, r2, r3
 800a362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a364:	e01c      	b.n	800a3a0 <UART_SetConfig+0x6d0>
 800a366:	bf00      	nop
 800a368:	40011400 	.word	0x40011400
 800a36c:	58024400 	.word	0x58024400
 800a370:	40007800 	.word	0x40007800
 800a374:	40007c00 	.word	0x40007c00
 800a378:	58000c00 	.word	0x58000c00
 800a37c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a380:	4b9d      	ldr	r3, [pc, #628]	@ (800a5f8 <UART_SetConfig+0x928>)
 800a382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a384:	e00c      	b.n	800a3a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a386:	4b9d      	ldr	r3, [pc, #628]	@ (800a5fc <UART_SetConfig+0x92c>)
 800a388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a38a:	e009      	b.n	800a3a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a38c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a392:	e005      	b.n	800a3a0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a394:	2300      	movs	r3, #0
 800a396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a39e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a3a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	f000 81de 	beq.w	800a764 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ac:	4a94      	ldr	r2, [pc, #592]	@ (800a600 <UART_SetConfig+0x930>)
 800a3ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3b6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3ba:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	685a      	ldr	r2, [r3, #4]
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	005b      	lsls	r3, r3, #1
 800a3c4:	4413      	add	r3, r2
 800a3c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d305      	bcc.n	800a3d8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d903      	bls.n	800a3e0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a3de:	e1c1      	b.n	800a764 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	60bb      	str	r3, [r7, #8]
 800a3e6:	60fa      	str	r2, [r7, #12]
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ec:	4a84      	ldr	r2, [pc, #528]	@ (800a600 <UART_SetConfig+0x930>)
 800a3ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	603b      	str	r3, [r7, #0]
 800a3f8:	607a      	str	r2, [r7, #4]
 800a3fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a402:	f7f6 f825 	bl	8000450 <__aeabi_uldivmod>
 800a406:	4602      	mov	r2, r0
 800a408:	460b      	mov	r3, r1
 800a40a:	4610      	mov	r0, r2
 800a40c:	4619      	mov	r1, r3
 800a40e:	f04f 0200 	mov.w	r2, #0
 800a412:	f04f 0300 	mov.w	r3, #0
 800a416:	020b      	lsls	r3, r1, #8
 800a418:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a41c:	0202      	lsls	r2, r0, #8
 800a41e:	6979      	ldr	r1, [r7, #20]
 800a420:	6849      	ldr	r1, [r1, #4]
 800a422:	0849      	lsrs	r1, r1, #1
 800a424:	2000      	movs	r0, #0
 800a426:	460c      	mov	r4, r1
 800a428:	4605      	mov	r5, r0
 800a42a:	eb12 0804 	adds.w	r8, r2, r4
 800a42e:	eb43 0905 	adc.w	r9, r3, r5
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	469a      	mov	sl, r3
 800a43a:	4693      	mov	fp, r2
 800a43c:	4652      	mov	r2, sl
 800a43e:	465b      	mov	r3, fp
 800a440:	4640      	mov	r0, r8
 800a442:	4649      	mov	r1, r9
 800a444:	f7f6 f804 	bl	8000450 <__aeabi_uldivmod>
 800a448:	4602      	mov	r2, r0
 800a44a:	460b      	mov	r3, r1
 800a44c:	4613      	mov	r3, r2
 800a44e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a452:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a456:	d308      	bcc.n	800a46a <UART_SetConfig+0x79a>
 800a458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a45a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a45e:	d204      	bcs.n	800a46a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a466:	60da      	str	r2, [r3, #12]
 800a468:	e17c      	b.n	800a764 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a470:	e178      	b.n	800a764 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	69db      	ldr	r3, [r3, #28]
 800a476:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a47a:	f040 80c5 	bne.w	800a608 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a47e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a482:	2b20      	cmp	r3, #32
 800a484:	dc48      	bgt.n	800a518 <UART_SetConfig+0x848>
 800a486:	2b00      	cmp	r3, #0
 800a488:	db7b      	blt.n	800a582 <UART_SetConfig+0x8b2>
 800a48a:	2b20      	cmp	r3, #32
 800a48c:	d879      	bhi.n	800a582 <UART_SetConfig+0x8b2>
 800a48e:	a201      	add	r2, pc, #4	@ (adr r2, 800a494 <UART_SetConfig+0x7c4>)
 800a490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a494:	0800a51f 	.word	0x0800a51f
 800a498:	0800a527 	.word	0x0800a527
 800a49c:	0800a583 	.word	0x0800a583
 800a4a0:	0800a583 	.word	0x0800a583
 800a4a4:	0800a52f 	.word	0x0800a52f
 800a4a8:	0800a583 	.word	0x0800a583
 800a4ac:	0800a583 	.word	0x0800a583
 800a4b0:	0800a583 	.word	0x0800a583
 800a4b4:	0800a53f 	.word	0x0800a53f
 800a4b8:	0800a583 	.word	0x0800a583
 800a4bc:	0800a583 	.word	0x0800a583
 800a4c0:	0800a583 	.word	0x0800a583
 800a4c4:	0800a583 	.word	0x0800a583
 800a4c8:	0800a583 	.word	0x0800a583
 800a4cc:	0800a583 	.word	0x0800a583
 800a4d0:	0800a583 	.word	0x0800a583
 800a4d4:	0800a54f 	.word	0x0800a54f
 800a4d8:	0800a583 	.word	0x0800a583
 800a4dc:	0800a583 	.word	0x0800a583
 800a4e0:	0800a583 	.word	0x0800a583
 800a4e4:	0800a583 	.word	0x0800a583
 800a4e8:	0800a583 	.word	0x0800a583
 800a4ec:	0800a583 	.word	0x0800a583
 800a4f0:	0800a583 	.word	0x0800a583
 800a4f4:	0800a583 	.word	0x0800a583
 800a4f8:	0800a583 	.word	0x0800a583
 800a4fc:	0800a583 	.word	0x0800a583
 800a500:	0800a583 	.word	0x0800a583
 800a504:	0800a583 	.word	0x0800a583
 800a508:	0800a583 	.word	0x0800a583
 800a50c:	0800a583 	.word	0x0800a583
 800a510:	0800a583 	.word	0x0800a583
 800a514:	0800a575 	.word	0x0800a575
 800a518:	2b40      	cmp	r3, #64	@ 0x40
 800a51a:	d02e      	beq.n	800a57a <UART_SetConfig+0x8aa>
 800a51c:	e031      	b.n	800a582 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a51e:	f7fc fcc5 	bl	8006eac <HAL_RCC_GetPCLK1Freq>
 800a522:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a524:	e033      	b.n	800a58e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a526:	f7fc fcd7 	bl	8006ed8 <HAL_RCC_GetPCLK2Freq>
 800a52a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a52c:	e02f      	b.n	800a58e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a52e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a532:	4618      	mov	r0, r3
 800a534:	f7fd ff48 	bl	80083c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a53a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a53c:	e027      	b.n	800a58e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a53e:	f107 0318 	add.w	r3, r7, #24
 800a542:	4618      	mov	r0, r3
 800a544:	f7fe f894 	bl	8008670 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a54c:	e01f      	b.n	800a58e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a54e:	4b2d      	ldr	r3, [pc, #180]	@ (800a604 <UART_SetConfig+0x934>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 0320 	and.w	r3, r3, #32
 800a556:	2b00      	cmp	r3, #0
 800a558:	d009      	beq.n	800a56e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a55a:	4b2a      	ldr	r3, [pc, #168]	@ (800a604 <UART_SetConfig+0x934>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	08db      	lsrs	r3, r3, #3
 800a560:	f003 0303 	and.w	r3, r3, #3
 800a564:	4a24      	ldr	r2, [pc, #144]	@ (800a5f8 <UART_SetConfig+0x928>)
 800a566:	fa22 f303 	lsr.w	r3, r2, r3
 800a56a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a56c:	e00f      	b.n	800a58e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a56e:	4b22      	ldr	r3, [pc, #136]	@ (800a5f8 <UART_SetConfig+0x928>)
 800a570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a572:	e00c      	b.n	800a58e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a574:	4b21      	ldr	r3, [pc, #132]	@ (800a5fc <UART_SetConfig+0x92c>)
 800a576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a578:	e009      	b.n	800a58e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a57a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a580:	e005      	b.n	800a58e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a582:	2300      	movs	r3, #0
 800a584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a586:	2301      	movs	r3, #1
 800a588:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a58c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a58e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a590:	2b00      	cmp	r3, #0
 800a592:	f000 80e7 	beq.w	800a764 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a59a:	4a19      	ldr	r2, [pc, #100]	@ (800a600 <UART_SetConfig+0x930>)
 800a59c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5a8:	005a      	lsls	r2, r3, #1
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	085b      	lsrs	r3, r3, #1
 800a5b0:	441a      	add	r2, r3
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5be:	2b0f      	cmp	r3, #15
 800a5c0:	d916      	bls.n	800a5f0 <UART_SetConfig+0x920>
 800a5c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5c8:	d212      	bcs.n	800a5f0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	f023 030f 	bic.w	r3, r3, #15
 800a5d2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5d6:	085b      	lsrs	r3, r3, #1
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	f003 0307 	and.w	r3, r3, #7
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a5ec:	60da      	str	r2, [r3, #12]
 800a5ee:	e0b9      	b.n	800a764 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a5f6:	e0b5      	b.n	800a764 <UART_SetConfig+0xa94>
 800a5f8:	03d09000 	.word	0x03d09000
 800a5fc:	003d0900 	.word	0x003d0900
 800a600:	0801c310 	.word	0x0801c310
 800a604:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a608:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a60c:	2b20      	cmp	r3, #32
 800a60e:	dc49      	bgt.n	800a6a4 <UART_SetConfig+0x9d4>
 800a610:	2b00      	cmp	r3, #0
 800a612:	db7c      	blt.n	800a70e <UART_SetConfig+0xa3e>
 800a614:	2b20      	cmp	r3, #32
 800a616:	d87a      	bhi.n	800a70e <UART_SetConfig+0xa3e>
 800a618:	a201      	add	r2, pc, #4	@ (adr r2, 800a620 <UART_SetConfig+0x950>)
 800a61a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61e:	bf00      	nop
 800a620:	0800a6ab 	.word	0x0800a6ab
 800a624:	0800a6b3 	.word	0x0800a6b3
 800a628:	0800a70f 	.word	0x0800a70f
 800a62c:	0800a70f 	.word	0x0800a70f
 800a630:	0800a6bb 	.word	0x0800a6bb
 800a634:	0800a70f 	.word	0x0800a70f
 800a638:	0800a70f 	.word	0x0800a70f
 800a63c:	0800a70f 	.word	0x0800a70f
 800a640:	0800a6cb 	.word	0x0800a6cb
 800a644:	0800a70f 	.word	0x0800a70f
 800a648:	0800a70f 	.word	0x0800a70f
 800a64c:	0800a70f 	.word	0x0800a70f
 800a650:	0800a70f 	.word	0x0800a70f
 800a654:	0800a70f 	.word	0x0800a70f
 800a658:	0800a70f 	.word	0x0800a70f
 800a65c:	0800a70f 	.word	0x0800a70f
 800a660:	0800a6db 	.word	0x0800a6db
 800a664:	0800a70f 	.word	0x0800a70f
 800a668:	0800a70f 	.word	0x0800a70f
 800a66c:	0800a70f 	.word	0x0800a70f
 800a670:	0800a70f 	.word	0x0800a70f
 800a674:	0800a70f 	.word	0x0800a70f
 800a678:	0800a70f 	.word	0x0800a70f
 800a67c:	0800a70f 	.word	0x0800a70f
 800a680:	0800a70f 	.word	0x0800a70f
 800a684:	0800a70f 	.word	0x0800a70f
 800a688:	0800a70f 	.word	0x0800a70f
 800a68c:	0800a70f 	.word	0x0800a70f
 800a690:	0800a70f 	.word	0x0800a70f
 800a694:	0800a70f 	.word	0x0800a70f
 800a698:	0800a70f 	.word	0x0800a70f
 800a69c:	0800a70f 	.word	0x0800a70f
 800a6a0:	0800a701 	.word	0x0800a701
 800a6a4:	2b40      	cmp	r3, #64	@ 0x40
 800a6a6:	d02e      	beq.n	800a706 <UART_SetConfig+0xa36>
 800a6a8:	e031      	b.n	800a70e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6aa:	f7fc fbff 	bl	8006eac <HAL_RCC_GetPCLK1Freq>
 800a6ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6b0:	e033      	b.n	800a71a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6b2:	f7fc fc11 	bl	8006ed8 <HAL_RCC_GetPCLK2Freq>
 800a6b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6b8:	e02f      	b.n	800a71a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7fd fe82 	bl	80083c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6c8:	e027      	b.n	800a71a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6ca:	f107 0318 	add.w	r3, r7, #24
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fd ffce 	bl	8008670 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6d8:	e01f      	b.n	800a71a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6da:	4b2d      	ldr	r3, [pc, #180]	@ (800a790 <UART_SetConfig+0xac0>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f003 0320 	and.w	r3, r3, #32
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d009      	beq.n	800a6fa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a6e6:	4b2a      	ldr	r3, [pc, #168]	@ (800a790 <UART_SetConfig+0xac0>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	08db      	lsrs	r3, r3, #3
 800a6ec:	f003 0303 	and.w	r3, r3, #3
 800a6f0:	4a28      	ldr	r2, [pc, #160]	@ (800a794 <UART_SetConfig+0xac4>)
 800a6f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a6f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a6f8:	e00f      	b.n	800a71a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a6fa:	4b26      	ldr	r3, [pc, #152]	@ (800a794 <UART_SetConfig+0xac4>)
 800a6fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6fe:	e00c      	b.n	800a71a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a700:	4b25      	ldr	r3, [pc, #148]	@ (800a798 <UART_SetConfig+0xac8>)
 800a702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a704:	e009      	b.n	800a71a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a70c:	e005      	b.n	800a71a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a70e:	2300      	movs	r3, #0
 800a710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a718:	bf00      	nop
    }

    if (pclk != 0U)
 800a71a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d021      	beq.n	800a764 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a724:	4a1d      	ldr	r2, [pc, #116]	@ (800a79c <UART_SetConfig+0xacc>)
 800a726:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a72a:	461a      	mov	r2, r3
 800a72c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a72e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	085b      	lsrs	r3, r3, #1
 800a738:	441a      	add	r2, r3
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a742:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a746:	2b0f      	cmp	r3, #15
 800a748:	d909      	bls.n	800a75e <UART_SetConfig+0xa8e>
 800a74a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a74c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a750:	d205      	bcs.n	800a75e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a754:	b29a      	uxth	r2, r3
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	60da      	str	r2, [r3, #12]
 800a75c:	e002      	b.n	800a764 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	2201      	movs	r2, #1
 800a768:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	2201      	movs	r2, #1
 800a770:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	2200      	movs	r2, #0
 800a778:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	2200      	movs	r2, #0
 800a77e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a780:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a784:	4618      	mov	r0, r3
 800a786:	3748      	adds	r7, #72	@ 0x48
 800a788:	46bd      	mov	sp, r7
 800a78a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a78e:	bf00      	nop
 800a790:	58024400 	.word	0x58024400
 800a794:	03d09000 	.word	0x03d09000
 800a798:	003d0900 	.word	0x003d0900
 800a79c:	0801c310 	.word	0x0801c310

0800a7a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ac:	f003 0308 	and.w	r3, r3, #8
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00a      	beq.n	800a7ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	430a      	orrs	r2, r1
 800a7c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ce:	f003 0301 	and.w	r3, r3, #1
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00a      	beq.n	800a7ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	430a      	orrs	r2, r1
 800a7ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7f0:	f003 0302 	and.w	r3, r3, #2
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00a      	beq.n	800a80e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	430a      	orrs	r2, r1
 800a80c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a812:	f003 0304 	and.w	r3, r3, #4
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00a      	beq.n	800a830 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	430a      	orrs	r2, r1
 800a82e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a834:	f003 0310 	and.w	r3, r3, #16
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00a      	beq.n	800a852 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	430a      	orrs	r2, r1
 800a850:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a856:	f003 0320 	and.w	r3, r3, #32
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00a      	beq.n	800a874 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	430a      	orrs	r2, r1
 800a872:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d01a      	beq.n	800a8b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	430a      	orrs	r2, r1
 800a894:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a89a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a89e:	d10a      	bne.n	800a8b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	430a      	orrs	r2, r1
 800a8b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00a      	beq.n	800a8d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	430a      	orrs	r2, r1
 800a8d6:	605a      	str	r2, [r3, #4]
  }
}
 800a8d8:	bf00      	nop
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b098      	sub	sp, #96	@ 0x60
 800a8e8:	af02      	add	r7, sp, #8
 800a8ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a8f4:	f7f7 fc30 	bl	8002158 <HAL_GetTick>
 800a8f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 0308 	and.w	r3, r3, #8
 800a904:	2b08      	cmp	r3, #8
 800a906:	d12f      	bne.n	800a968 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a908:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a90c:	9300      	str	r3, [sp, #0]
 800a90e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a910:	2200      	movs	r2, #0
 800a912:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 f88e 	bl	800aa38 <UART_WaitOnFlagUntilTimeout>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d022      	beq.n	800a968 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a92a:	e853 3f00 	ldrex	r3, [r3]
 800a92e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a932:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a936:	653b      	str	r3, [r7, #80]	@ 0x50
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	461a      	mov	r2, r3
 800a93e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a940:	647b      	str	r3, [r7, #68]	@ 0x44
 800a942:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a944:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a946:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a948:	e841 2300 	strex	r3, r2, [r1]
 800a94c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a94e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a950:	2b00      	cmp	r3, #0
 800a952:	d1e6      	bne.n	800a922 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2220      	movs	r2, #32
 800a958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a964:	2303      	movs	r3, #3
 800a966:	e063      	b.n	800aa30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f003 0304 	and.w	r3, r3, #4
 800a972:	2b04      	cmp	r3, #4
 800a974:	d149      	bne.n	800aa0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a976:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a97a:	9300      	str	r3, [sp, #0]
 800a97c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a97e:	2200      	movs	r2, #0
 800a980:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 f857 	bl	800aa38 <UART_WaitOnFlagUntilTimeout>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d03c      	beq.n	800aa0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a998:	e853 3f00 	ldrex	r3, [r3]
 800a99c:	623b      	str	r3, [r7, #32]
   return(result);
 800a99e:	6a3b      	ldr	r3, [r7, #32]
 800a9a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a9a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800a9b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9b6:	e841 2300 	strex	r3, r2, [r1]
 800a9ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d1e6      	bne.n	800a990 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	3308      	adds	r3, #8
 800a9c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	e853 3f00 	ldrex	r3, [r3]
 800a9d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f023 0301 	bic.w	r3, r3, #1
 800a9d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	3308      	adds	r3, #8
 800a9e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a9e2:	61fa      	str	r2, [r7, #28]
 800a9e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e6:	69b9      	ldr	r1, [r7, #24]
 800a9e8:	69fa      	ldr	r2, [r7, #28]
 800a9ea:	e841 2300 	strex	r3, r2, [r1]
 800a9ee:	617b      	str	r3, [r7, #20]
   return(result);
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d1e5      	bne.n	800a9c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2220      	movs	r2, #32
 800a9fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa06:	2303      	movs	r3, #3
 800aa08:	e012      	b.n	800aa30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2220      	movs	r2, #32
 800aa0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2220      	movs	r2, #32
 800aa16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2200      	movs	r2, #0
 800aa24:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa2e:	2300      	movs	r3, #0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3758      	adds	r7, #88	@ 0x58
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	603b      	str	r3, [r7, #0]
 800aa44:	4613      	mov	r3, r2
 800aa46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa48:	e04f      	b.n	800aaea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa50:	d04b      	beq.n	800aaea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa52:	f7f7 fb81 	bl	8002158 <HAL_GetTick>
 800aa56:	4602      	mov	r2, r0
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	1ad3      	subs	r3, r2, r3
 800aa5c:	69ba      	ldr	r2, [r7, #24]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d302      	bcc.n	800aa68 <UART_WaitOnFlagUntilTimeout+0x30>
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d101      	bne.n	800aa6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aa68:	2303      	movs	r3, #3
 800aa6a:	e04e      	b.n	800ab0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f003 0304 	and.w	r3, r3, #4
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d037      	beq.n	800aaea <UART_WaitOnFlagUntilTimeout+0xb2>
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	2b80      	cmp	r3, #128	@ 0x80
 800aa7e:	d034      	beq.n	800aaea <UART_WaitOnFlagUntilTimeout+0xb2>
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	2b40      	cmp	r3, #64	@ 0x40
 800aa84:	d031      	beq.n	800aaea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	69db      	ldr	r3, [r3, #28]
 800aa8c:	f003 0308 	and.w	r3, r3, #8
 800aa90:	2b08      	cmp	r3, #8
 800aa92:	d110      	bne.n	800aab6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2208      	movs	r2, #8
 800aa9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa9c:	68f8      	ldr	r0, [r7, #12]
 800aa9e:	f000 f921 	bl	800ace4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2208      	movs	r2, #8
 800aaa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800aab2:	2301      	movs	r3, #1
 800aab4:	e029      	b.n	800ab0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	69db      	ldr	r3, [r3, #28]
 800aabc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aac0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aac4:	d111      	bne.n	800aaea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aace:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aad0:	68f8      	ldr	r0, [r7, #12]
 800aad2:	f000 f907 	bl	800ace4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2220      	movs	r2, #32
 800aada:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2200      	movs	r2, #0
 800aae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800aae6:	2303      	movs	r3, #3
 800aae8:	e00f      	b.n	800ab0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	69da      	ldr	r2, [r3, #28]
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	4013      	ands	r3, r2
 800aaf4:	68ba      	ldr	r2, [r7, #8]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	bf0c      	ite	eq
 800aafa:	2301      	moveq	r3, #1
 800aafc:	2300      	movne	r3, #0
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	461a      	mov	r2, r3
 800ab02:	79fb      	ldrb	r3, [r7, #7]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d0a0      	beq.n	800aa4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
	...

0800ab14 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b096      	sub	sp, #88	@ 0x58
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	4613      	mov	r3, r2
 800ab20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	68ba      	ldr	r2, [r7, #8]
 800ab26:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	88fa      	ldrh	r2, [r7, #6]
 800ab2c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2222      	movs	r2, #34	@ 0x22
 800ab3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d02d      	beq.n	800aba6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab50:	4a40      	ldr	r2, [pc, #256]	@ (800ac54 <UART_Start_Receive_DMA+0x140>)
 800ab52:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab5a:	4a3f      	ldr	r2, [pc, #252]	@ (800ac58 <UART_Start_Receive_DMA+0x144>)
 800ab5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab64:	4a3d      	ldr	r2, [pc, #244]	@ (800ac5c <UART_Start_Receive_DMA+0x148>)
 800ab66:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab6e:	2200      	movs	r2, #0
 800ab70:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	3324      	adds	r3, #36	@ 0x24
 800ab7e:	4619      	mov	r1, r3
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab84:	461a      	mov	r2, r3
 800ab86:	88fb      	ldrh	r3, [r7, #6]
 800ab88:	f7f7 ff72 	bl	8002a70 <HAL_DMA_Start_IT>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d009      	beq.n	800aba6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2210      	movs	r2, #16
 800ab96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2220      	movs	r2, #32
 800ab9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	e051      	b.n	800ac4a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	691b      	ldr	r3, [r3, #16]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d018      	beq.n	800abe0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abb6:	e853 3f00 	ldrex	r3, [r3]
 800abba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800abbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800abc2:	657b      	str	r3, [r7, #84]	@ 0x54
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	461a      	mov	r2, r3
 800abca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abce:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abd0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800abd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abd4:	e841 2300 	strex	r3, r2, [r1]
 800abd8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800abda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d1e6      	bne.n	800abae <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	3308      	adds	r3, #8
 800abe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abea:	e853 3f00 	ldrex	r3, [r3]
 800abee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800abf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf2:	f043 0301 	orr.w	r3, r3, #1
 800abf6:	653b      	str	r3, [r7, #80]	@ 0x50
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	3308      	adds	r3, #8
 800abfe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ac00:	637a      	str	r2, [r7, #52]	@ 0x34
 800ac02:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ac06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac08:	e841 2300 	strex	r3, r2, [r1]
 800ac0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ac0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d1e5      	bne.n	800abe0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	3308      	adds	r3, #8
 800ac1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	e853 3f00 	ldrex	r3, [r3]
 800ac22:	613b      	str	r3, [r7, #16]
   return(result);
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	3308      	adds	r3, #8
 800ac32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ac34:	623a      	str	r2, [r7, #32]
 800ac36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac38:	69f9      	ldr	r1, [r7, #28]
 800ac3a:	6a3a      	ldr	r2, [r7, #32]
 800ac3c:	e841 2300 	strex	r3, r2, [r1]
 800ac40:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d1e5      	bne.n	800ac14 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3758      	adds	r7, #88	@ 0x58
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	0800ae63 	.word	0x0800ae63
 800ac58:	0800af8b 	.word	0x0800af8b
 800ac5c:	0800afc9 	.word	0x0800afc9

0800ac60 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b08f      	sub	sp, #60	@ 0x3c
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac6e:	6a3b      	ldr	r3, [r7, #32]
 800ac70:	e853 3f00 	ldrex	r3, [r3]
 800ac74:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ac7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	461a      	mov	r2, r3
 800ac84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac88:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac8e:	e841 2300 	strex	r3, r2, [r1]
 800ac92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d1e6      	bne.n	800ac68 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	3308      	adds	r3, #8
 800aca0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	e853 3f00 	ldrex	r3, [r3]
 800aca8:	60bb      	str	r3, [r7, #8]
   return(result);
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800acb0:	633b      	str	r3, [r7, #48]	@ 0x30
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	3308      	adds	r3, #8
 800acb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acba:	61ba      	str	r2, [r7, #24]
 800acbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acbe:	6979      	ldr	r1, [r7, #20]
 800acc0:	69ba      	ldr	r2, [r7, #24]
 800acc2:	e841 2300 	strex	r3, r2, [r1]
 800acc6:	613b      	str	r3, [r7, #16]
   return(result);
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d1e5      	bne.n	800ac9a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2220      	movs	r2, #32
 800acd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800acd6:	bf00      	nop
 800acd8:	373c      	adds	r7, #60	@ 0x3c
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr
	...

0800ace4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b095      	sub	sp, #84	@ 0x54
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acf4:	e853 3f00 	ldrex	r3, [r3]
 800acf8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800acfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	461a      	mov	r2, r3
 800ad08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad0a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad12:	e841 2300 	strex	r3, r2, [r1]
 800ad16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1e6      	bne.n	800acec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	3308      	adds	r3, #8
 800ad24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad26:	6a3b      	ldr	r3, [r7, #32]
 800ad28:	e853 3f00 	ldrex	r3, [r3]
 800ad2c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad2e:	69fa      	ldr	r2, [r7, #28]
 800ad30:	4b1e      	ldr	r3, [pc, #120]	@ (800adac <UART_EndRxTransfer+0xc8>)
 800ad32:	4013      	ands	r3, r2
 800ad34:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	3308      	adds	r3, #8
 800ad3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ad40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad46:	e841 2300 	strex	r3, r2, [r1]
 800ad4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1e5      	bne.n	800ad1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d118      	bne.n	800ad8c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	e853 3f00 	ldrex	r3, [r3]
 800ad66:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	f023 0310 	bic.w	r3, r3, #16
 800ad6e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	461a      	mov	r2, r3
 800ad76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad78:	61bb      	str	r3, [r7, #24]
 800ad7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7c:	6979      	ldr	r1, [r7, #20]
 800ad7e:	69ba      	ldr	r2, [r7, #24]
 800ad80:	e841 2300 	strex	r3, r2, [r1]
 800ad84:	613b      	str	r3, [r7, #16]
   return(result);
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1e6      	bne.n	800ad5a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2220      	movs	r2, #32
 800ad90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ada0:	bf00      	nop
 800ada2:	3754      	adds	r7, #84	@ 0x54
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr
 800adac:	effffffe 	.word	0xeffffffe

0800adb0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b090      	sub	sp, #64	@ 0x40
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adbc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	69db      	ldr	r3, [r3, #28]
 800adc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800adc6:	d037      	beq.n	800ae38 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800adc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adca:	2200      	movs	r2, #0
 800adcc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800add0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	3308      	adds	r3, #8
 800add6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adda:	e853 3f00 	ldrex	r3, [r3]
 800adde:	623b      	str	r3, [r7, #32]
   return(result);
 800ade0:	6a3b      	ldr	r3, [r7, #32]
 800ade2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ade6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ade8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	3308      	adds	r3, #8
 800adee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800adf0:	633a      	str	r2, [r7, #48]	@ 0x30
 800adf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800adf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adf8:	e841 2300 	strex	r3, r2, [r1]
 800adfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800adfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d1e5      	bne.n	800add0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	e853 3f00 	ldrex	r3, [r3]
 800ae10:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae18:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	461a      	mov	r2, r3
 800ae20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae22:	61fb      	str	r3, [r7, #28]
 800ae24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae26:	69b9      	ldr	r1, [r7, #24]
 800ae28:	69fa      	ldr	r2, [r7, #28]
 800ae2a:	e841 2300 	strex	r3, r2, [r1]
 800ae2e:	617b      	str	r3, [r7, #20]
   return(result);
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d1e6      	bne.n	800ae04 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae36:	e002      	b.n	800ae3e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800ae38:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ae3a:	f7fe ff0b 	bl	8009c54 <HAL_UART_TxCpltCallback>
}
 800ae3e:	bf00      	nop
 800ae40:	3740      	adds	r7, #64	@ 0x40
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}

0800ae46 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b084      	sub	sp, #16
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae52:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f7fe ff07 	bl	8009c68 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae5a:	bf00      	nop
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b09c      	sub	sp, #112	@ 0x70
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae6e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	69db      	ldr	r3, [r3, #28]
 800ae74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae78:	d071      	beq.n	800af5e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ae7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae8a:	e853 3f00 	ldrex	r3, [r3]
 800ae8e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ae90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae92:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae96:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ae98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aea0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aea2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aea6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aea8:	e841 2300 	strex	r3, r2, [r1]
 800aeac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aeae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d1e6      	bne.n	800ae82 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	3308      	adds	r3, #8
 800aeba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aebe:	e853 3f00 	ldrex	r3, [r3]
 800aec2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aec6:	f023 0301 	bic.w	r3, r3, #1
 800aeca:	667b      	str	r3, [r7, #100]	@ 0x64
 800aecc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	3308      	adds	r3, #8
 800aed2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aed4:	647a      	str	r2, [r7, #68]	@ 0x44
 800aed6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aeda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aedc:	e841 2300 	strex	r3, r2, [r1]
 800aee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d1e5      	bne.n	800aeb4 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aee8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	3308      	adds	r3, #8
 800aeee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef2:	e853 3f00 	ldrex	r3, [r3]
 800aef6:	623b      	str	r3, [r7, #32]
   return(result);
 800aef8:	6a3b      	ldr	r3, [r7, #32]
 800aefa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aefe:	663b      	str	r3, [r7, #96]	@ 0x60
 800af00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	3308      	adds	r3, #8
 800af06:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800af08:	633a      	str	r2, [r7, #48]	@ 0x30
 800af0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af10:	e841 2300 	strex	r3, r2, [r1]
 800af14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1e5      	bne.n	800aee8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800af1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af1e:	2220      	movs	r2, #32
 800af20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d118      	bne.n	800af5e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	e853 3f00 	ldrex	r3, [r3]
 800af38:	60fb      	str	r3, [r7, #12]
   return(result);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f023 0310 	bic.w	r3, r3, #16
 800af40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800af42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	461a      	mov	r2, r3
 800af48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af4a:	61fb      	str	r3, [r7, #28]
 800af4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af4e:	69b9      	ldr	r1, [r7, #24]
 800af50:	69fa      	ldr	r2, [r7, #28]
 800af52:	e841 2300 	strex	r3, r2, [r1]
 800af56:	617b      	str	r3, [r7, #20]
   return(result);
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d1e6      	bne.n	800af2c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af60:	2200      	movs	r2, #0
 800af62:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d107      	bne.n	800af7c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800af72:	4619      	mov	r1, r3
 800af74:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800af76:	f7fe fe9f 	bl	8009cb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af7a:	e002      	b.n	800af82 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800af7c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800af7e:	f7fe fe7d 	bl	8009c7c <HAL_UART_RxCpltCallback>
}
 800af82:	bf00      	nop
 800af84:	3770      	adds	r7, #112	@ 0x70
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b084      	sub	sp, #16
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af96:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2201      	movs	r2, #1
 800af9c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d109      	bne.n	800afba <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800afac:	085b      	lsrs	r3, r3, #1
 800afae:	b29b      	uxth	r3, r3
 800afb0:	4619      	mov	r1, r3
 800afb2:	68f8      	ldr	r0, [r7, #12]
 800afb4:	f7fe fe80 	bl	8009cb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800afb8:	e002      	b.n	800afc0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800afba:	68f8      	ldr	r0, [r7, #12]
 800afbc:	f7fe fe68 	bl	8009c90 <HAL_UART_RxHalfCpltCallback>
}
 800afc0:	bf00      	nop
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b086      	sub	sp, #24
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afd4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afdc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800afe4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aff0:	2b80      	cmp	r3, #128	@ 0x80
 800aff2:	d109      	bne.n	800b008 <UART_DMAError+0x40>
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	2b21      	cmp	r3, #33	@ 0x21
 800aff8:	d106      	bne.n	800b008 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	2200      	movs	r2, #0
 800affe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b002:	6978      	ldr	r0, [r7, #20]
 800b004:	f7ff fe2c 	bl	800ac60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b012:	2b40      	cmp	r3, #64	@ 0x40
 800b014:	d109      	bne.n	800b02a <UART_DMAError+0x62>
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2b22      	cmp	r3, #34	@ 0x22
 800b01a:	d106      	bne.n	800b02a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	2200      	movs	r2, #0
 800b020:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b024:	6978      	ldr	r0, [r7, #20]
 800b026:	f7ff fe5d 	bl	800ace4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b030:	f043 0210 	orr.w	r2, r3, #16
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b03a:	6978      	ldr	r0, [r7, #20]
 800b03c:	f7fe fe32 	bl	8009ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b040:	bf00      	nop
 800b042:	3718      	adds	r7, #24
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b054:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2200      	movs	r2, #0
 800b05a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2200      	movs	r2, #0
 800b062:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b066:	68f8      	ldr	r0, [r7, #12]
 800b068:	f7fe fe1c 	bl	8009ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b06c:	bf00      	nop
 800b06e:	3710      	adds	r7, #16
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b088      	sub	sp, #32
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	e853 3f00 	ldrex	r3, [r3]
 800b088:	60bb      	str	r3, [r7, #8]
   return(result);
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b090:	61fb      	str	r3, [r7, #28]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	461a      	mov	r2, r3
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	61bb      	str	r3, [r7, #24]
 800b09c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b09e:	6979      	ldr	r1, [r7, #20]
 800b0a0:	69ba      	ldr	r2, [r7, #24]
 800b0a2:	e841 2300 	strex	r3, r2, [r1]
 800b0a6:	613b      	str	r3, [r7, #16]
   return(result);
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1e6      	bne.n	800b07c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2220      	movs	r2, #32
 800b0b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f7fe fdc9 	bl	8009c54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0c2:	bf00      	nop
 800b0c4:	3720      	adds	r7, #32
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b0ca:	b480      	push	{r7}
 800b0cc:	b083      	sub	sp, #12
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b0d2:	bf00      	nop
 800b0d4:	370c      	adds	r7, #12
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr

0800b0de <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b0de:	b480      	push	{r7}
 800b0e0:	b083      	sub	sp, #12
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b0e6:	bf00      	nop
 800b0e8:	370c      	adds	r7, #12
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr

0800b0f2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b0f2:	b480      	push	{r7}
 800b0f4:	b083      	sub	sp, #12
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b0fa:	bf00      	nop
 800b0fc:	370c      	adds	r7, #12
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr

0800b106 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b106:	b480      	push	{r7}
 800b108:	b085      	sub	sp, #20
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b114:	2b01      	cmp	r3, #1
 800b116:	d101      	bne.n	800b11c <HAL_UARTEx_DisableFifoMode+0x16>
 800b118:	2302      	movs	r3, #2
 800b11a:	e027      	b.n	800b16c <HAL_UARTEx_DisableFifoMode+0x66>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2201      	movs	r2, #1
 800b120:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2224      	movs	r2, #36	@ 0x24
 800b128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f022 0201 	bic.w	r2, r2, #1
 800b142:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b14a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2200      	movs	r2, #0
 800b150:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	68fa      	ldr	r2, [r7, #12]
 800b158:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2220      	movs	r2, #32
 800b15e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b16a:	2300      	movs	r3, #0
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3714      	adds	r7, #20
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr

0800b178 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b188:	2b01      	cmp	r3, #1
 800b18a:	d101      	bne.n	800b190 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b18c:	2302      	movs	r3, #2
 800b18e:	e02d      	b.n	800b1ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2201      	movs	r2, #1
 800b194:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2224      	movs	r2, #36	@ 0x24
 800b19c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	681a      	ldr	r2, [r3, #0]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f022 0201 	bic.w	r2, r2, #1
 800b1b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	683a      	ldr	r2, [r7, #0]
 800b1c8:	430a      	orrs	r2, r1
 800b1ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 f84f 	bl	800b270 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	68fa      	ldr	r2, [r7, #12]
 800b1d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2220      	movs	r2, #32
 800b1de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b1ea:	2300      	movs	r3, #0
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3710      	adds	r7, #16
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b204:	2b01      	cmp	r3, #1
 800b206:	d101      	bne.n	800b20c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b208:	2302      	movs	r3, #2
 800b20a:	e02d      	b.n	800b268 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2224      	movs	r2, #36	@ 0x24
 800b218:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f022 0201 	bic.w	r2, r2, #1
 800b232:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	689b      	ldr	r3, [r3, #8]
 800b23a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	683a      	ldr	r2, [r7, #0]
 800b244:	430a      	orrs	r2, r1
 800b246:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 f811 	bl	800b270 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	68fa      	ldr	r2, [r7, #12]
 800b254:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2220      	movs	r2, #32
 800b25a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2200      	movs	r2, #0
 800b262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d108      	bne.n	800b292 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2201      	movs	r2, #1
 800b284:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2201      	movs	r2, #1
 800b28c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b290:	e031      	b.n	800b2f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b292:	2310      	movs	r3, #16
 800b294:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b296:	2310      	movs	r3, #16
 800b298:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	0e5b      	lsrs	r3, r3, #25
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	f003 0307 	and.w	r3, r3, #7
 800b2a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	0f5b      	lsrs	r3, r3, #29
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	f003 0307 	and.w	r3, r3, #7
 800b2b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b2ba:	7bbb      	ldrb	r3, [r7, #14]
 800b2bc:	7b3a      	ldrb	r2, [r7, #12]
 800b2be:	4911      	ldr	r1, [pc, #68]	@ (800b304 <UARTEx_SetNbDataToProcess+0x94>)
 800b2c0:	5c8a      	ldrb	r2, [r1, r2]
 800b2c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b2c6:	7b3a      	ldrb	r2, [r7, #12]
 800b2c8:	490f      	ldr	r1, [pc, #60]	@ (800b308 <UARTEx_SetNbDataToProcess+0x98>)
 800b2ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b2cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2d0:	b29a      	uxth	r2, r3
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2d8:	7bfb      	ldrb	r3, [r7, #15]
 800b2da:	7b7a      	ldrb	r2, [r7, #13]
 800b2dc:	4909      	ldr	r1, [pc, #36]	@ (800b304 <UARTEx_SetNbDataToProcess+0x94>)
 800b2de:	5c8a      	ldrb	r2, [r1, r2]
 800b2e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b2e4:	7b7a      	ldrb	r2, [r7, #13]
 800b2e6:	4908      	ldr	r1, [pc, #32]	@ (800b308 <UARTEx_SetNbDataToProcess+0x98>)
 800b2e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2ee:	b29a      	uxth	r2, r3
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b2f6:	bf00      	nop
 800b2f8:	3714      	adds	r7, #20
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b300:	4770      	bx	lr
 800b302:	bf00      	nop
 800b304:	0801c328 	.word	0x0801c328
 800b308:	0801c330 	.word	0x0801c330

0800b30c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b30c:	b084      	sub	sp, #16
 800b30e:	b580      	push	{r7, lr}
 800b310:	b084      	sub	sp, #16
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
 800b316:	f107 001c 	add.w	r0, r7, #28
 800b31a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b31e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b322:	2b01      	cmp	r3, #1
 800b324:	d121      	bne.n	800b36a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b32a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	68da      	ldr	r2, [r3, #12]
 800b336:	4b2c      	ldr	r3, [pc, #176]	@ (800b3e8 <USB_CoreInit+0xdc>)
 800b338:	4013      	ands	r3, r2
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	68db      	ldr	r3, [r3, #12]
 800b342:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b34a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d105      	bne.n	800b35e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 faaa 	bl	800b8b8 <USB_CoreReset>
 800b364:	4603      	mov	r3, r0
 800b366:	73fb      	strb	r3, [r7, #15]
 800b368:	e01b      	b.n	800b3a2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	68db      	ldr	r3, [r3, #12]
 800b36e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 fa9e 	bl	800b8b8 <USB_CoreReset>
 800b37c:	4603      	mov	r3, r0
 800b37e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b380:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b384:	2b00      	cmp	r3, #0
 800b386:	d106      	bne.n	800b396 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b38c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	639a      	str	r2, [r3, #56]	@ 0x38
 800b394:	e005      	b.n	800b3a2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b39a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b3a2:	7fbb      	ldrb	r3, [r7, #30]
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d116      	bne.n	800b3d6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b3ac:	b29a      	uxth	r2, r3
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b3b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b3ec <USB_CoreInit+0xe0>)
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	687a      	ldr	r2, [r7, #4]
 800b3bc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	689b      	ldr	r3, [r3, #8]
 800b3c2:	f043 0206 	orr.w	r2, r3, #6
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	689b      	ldr	r3, [r3, #8]
 800b3ce:	f043 0220 	orr.w	r2, r3, #32
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3710      	adds	r7, #16
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b3e2:	b004      	add	sp, #16
 800b3e4:	4770      	bx	lr
 800b3e6:	bf00      	nop
 800b3e8:	ffbdffbf 	.word	0xffbdffbf
 800b3ec:	03ee0000 	.word	0x03ee0000

0800b3f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	f023 0201 	bic.w	r2, r3, #1
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b404:	2300      	movs	r3, #0
}
 800b406:	4618      	mov	r0, r3
 800b408:	370c      	adds	r7, #12
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr

0800b412 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b084      	sub	sp, #16
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
 800b41a:	460b      	mov	r3, r1
 800b41c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b41e:	2300      	movs	r3, #0
 800b420:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b42e:	78fb      	ldrb	r3, [r7, #3]
 800b430:	2b01      	cmp	r3, #1
 800b432:	d115      	bne.n	800b460 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b440:	200a      	movs	r0, #10
 800b442:	f7f6 fe95 	bl	8002170 <HAL_Delay>
      ms += 10U;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	330a      	adds	r3, #10
 800b44a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 fa25 	bl	800b89c <USB_GetMode>
 800b452:	4603      	mov	r3, r0
 800b454:	2b01      	cmp	r3, #1
 800b456:	d01e      	beq.n	800b496 <USB_SetCurrentMode+0x84>
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2bc7      	cmp	r3, #199	@ 0xc7
 800b45c:	d9f0      	bls.n	800b440 <USB_SetCurrentMode+0x2e>
 800b45e:	e01a      	b.n	800b496 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b460:	78fb      	ldrb	r3, [r7, #3]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d115      	bne.n	800b492 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	68db      	ldr	r3, [r3, #12]
 800b46a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b472:	200a      	movs	r0, #10
 800b474:	f7f6 fe7c 	bl	8002170 <HAL_Delay>
      ms += 10U;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	330a      	adds	r3, #10
 800b47c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 fa0c 	bl	800b89c <USB_GetMode>
 800b484:	4603      	mov	r3, r0
 800b486:	2b00      	cmp	r3, #0
 800b488:	d005      	beq.n	800b496 <USB_SetCurrentMode+0x84>
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2bc7      	cmp	r3, #199	@ 0xc7
 800b48e:	d9f0      	bls.n	800b472 <USB_SetCurrentMode+0x60>
 800b490:	e001      	b.n	800b496 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b492:	2301      	movs	r3, #1
 800b494:	e005      	b.n	800b4a2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2bc8      	cmp	r3, #200	@ 0xc8
 800b49a:	d101      	bne.n	800b4a0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b49c:	2301      	movs	r3, #1
 800b49e:	e000      	b.n	800b4a2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b4a0:	2300      	movs	r3, #0
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3710      	adds	r7, #16
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
	...

0800b4ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b4ac:	b084      	sub	sp, #16
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b086      	sub	sp, #24
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
 800b4b6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b4ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	613b      	str	r3, [r7, #16]
 800b4ca:	e009      	b.n	800b4e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	3340      	adds	r3, #64	@ 0x40
 800b4d2:	009b      	lsls	r3, r3, #2
 800b4d4:	4413      	add	r3, r2
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	3301      	adds	r3, #1
 800b4de:	613b      	str	r3, [r7, #16]
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	2b0e      	cmp	r3, #14
 800b4e4:	d9f2      	bls.n	800b4cc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b4e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d11c      	bne.n	800b528 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b4fc:	f043 0302 	orr.w	r3, r3, #2
 800b500:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b506:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	601a      	str	r2, [r3, #0]
 800b526:	e005      	b.n	800b534 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b52c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b53a:	461a      	mov	r2, r3
 800b53c:	2300      	movs	r3, #0
 800b53e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b540:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b544:	2b01      	cmp	r3, #1
 800b546:	d10d      	bne.n	800b564 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b548:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d104      	bne.n	800b55a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b550:	2100      	movs	r1, #0
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 f968 	bl	800b828 <USB_SetDevSpeed>
 800b558:	e008      	b.n	800b56c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b55a:	2101      	movs	r1, #1
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f000 f963 	bl	800b828 <USB_SetDevSpeed>
 800b562:	e003      	b.n	800b56c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b564:	2103      	movs	r1, #3
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 f95e 	bl	800b828 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b56c:	2110      	movs	r1, #16
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 f8fa 	bl	800b768 <USB_FlushTxFifo>
 800b574:	4603      	mov	r3, r0
 800b576:	2b00      	cmp	r3, #0
 800b578:	d001      	beq.n	800b57e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 f924 	bl	800b7cc <USB_FlushRxFifo>
 800b584:	4603      	mov	r3, r0
 800b586:	2b00      	cmp	r3, #0
 800b588:	d001      	beq.n	800b58e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800b58a:	2301      	movs	r3, #1
 800b58c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b594:	461a      	mov	r2, r3
 800b596:	2300      	movs	r3, #0
 800b598:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	613b      	str	r3, [r7, #16]
 800b5b6:	e043      	b.n	800b640 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	015a      	lsls	r2, r3, #5
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	4413      	add	r3, r2
 800b5c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b5ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b5ce:	d118      	bne.n	800b602 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d10a      	bne.n	800b5ec <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	015a      	lsls	r2, r3, #5
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	4413      	add	r3, r2
 800b5de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b5e8:	6013      	str	r3, [r2, #0]
 800b5ea:	e013      	b.n	800b614 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	015a      	lsls	r2, r3, #5
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	4413      	add	r3, r2
 800b5f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5f8:	461a      	mov	r2, r3
 800b5fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b5fe:	6013      	str	r3, [r2, #0]
 800b600:	e008      	b.n	800b614 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	015a      	lsls	r2, r3, #5
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	4413      	add	r3, r2
 800b60a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b60e:	461a      	mov	r2, r3
 800b610:	2300      	movs	r3, #0
 800b612:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	015a      	lsls	r2, r3, #5
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	4413      	add	r3, r2
 800b61c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b620:	461a      	mov	r2, r3
 800b622:	2300      	movs	r3, #0
 800b624:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	015a      	lsls	r2, r3, #5
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	4413      	add	r3, r2
 800b62e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b632:	461a      	mov	r2, r3
 800b634:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b638:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	3301      	adds	r3, #1
 800b63e:	613b      	str	r3, [r7, #16]
 800b640:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b644:	461a      	mov	r2, r3
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	4293      	cmp	r3, r2
 800b64a:	d3b5      	bcc.n	800b5b8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b64c:	2300      	movs	r3, #0
 800b64e:	613b      	str	r3, [r7, #16]
 800b650:	e043      	b.n	800b6da <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	015a      	lsls	r2, r3, #5
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	4413      	add	r3, r2
 800b65a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b664:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b668:	d118      	bne.n	800b69c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d10a      	bne.n	800b686 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	015a      	lsls	r2, r3, #5
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	4413      	add	r3, r2
 800b678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b67c:	461a      	mov	r2, r3
 800b67e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b682:	6013      	str	r3, [r2, #0]
 800b684:	e013      	b.n	800b6ae <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	015a      	lsls	r2, r3, #5
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	4413      	add	r3, r2
 800b68e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b692:	461a      	mov	r2, r3
 800b694:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b698:	6013      	str	r3, [r2, #0]
 800b69a:	e008      	b.n	800b6ae <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	015a      	lsls	r2, r3, #5
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	4413      	add	r3, r2
 800b6a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	015a      	lsls	r2, r3, #5
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	4413      	add	r3, r2
 800b6b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	2300      	movs	r3, #0
 800b6be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	015a      	lsls	r2, r3, #5
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	4413      	add	r3, r2
 800b6c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b6d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	613b      	str	r3, [r7, #16]
 800b6da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b6de:	461a      	mov	r2, r3
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d3b5      	bcc.n	800b652 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6ec:	691b      	ldr	r3, [r3, #16]
 800b6ee:	68fa      	ldr	r2, [r7, #12]
 800b6f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b6f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b6f8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b706:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b708:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d105      	bne.n	800b71c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	699b      	ldr	r3, [r3, #24]
 800b714:	f043 0210 	orr.w	r2, r3, #16
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	699a      	ldr	r2, [r3, #24]
 800b720:	4b0f      	ldr	r3, [pc, #60]	@ (800b760 <USB_DevInit+0x2b4>)
 800b722:	4313      	orrs	r3, r2
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b728:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d005      	beq.n	800b73c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	699b      	ldr	r3, [r3, #24]
 800b734:	f043 0208 	orr.w	r2, r3, #8
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b73c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b740:	2b01      	cmp	r3, #1
 800b742:	d105      	bne.n	800b750 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	699a      	ldr	r2, [r3, #24]
 800b748:	4b06      	ldr	r3, [pc, #24]	@ (800b764 <USB_DevInit+0x2b8>)
 800b74a:	4313      	orrs	r3, r2
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b750:	7dfb      	ldrb	r3, [r7, #23]
}
 800b752:	4618      	mov	r0, r3
 800b754:	3718      	adds	r7, #24
 800b756:	46bd      	mov	sp, r7
 800b758:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b75c:	b004      	add	sp, #16
 800b75e:	4770      	bx	lr
 800b760:	803c3800 	.word	0x803c3800
 800b764:	40000004 	.word	0x40000004

0800b768 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b772:	2300      	movs	r3, #0
 800b774:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	3301      	adds	r3, #1
 800b77a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b782:	d901      	bls.n	800b788 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b784:	2303      	movs	r3, #3
 800b786:	e01b      	b.n	800b7c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	691b      	ldr	r3, [r3, #16]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	daf2      	bge.n	800b776 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b790:	2300      	movs	r3, #0
 800b792:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	019b      	lsls	r3, r3, #6
 800b798:	f043 0220 	orr.w	r2, r3, #32
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b7ac:	d901      	bls.n	800b7b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b7ae:	2303      	movs	r3, #3
 800b7b0:	e006      	b.n	800b7c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	691b      	ldr	r3, [r3, #16]
 800b7b6:	f003 0320 	and.w	r3, r3, #32
 800b7ba:	2b20      	cmp	r3, #32
 800b7bc:	d0f0      	beq.n	800b7a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b7be:	2300      	movs	r3, #0
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3714      	adds	r7, #20
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b7e4:	d901      	bls.n	800b7ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b7e6:	2303      	movs	r3, #3
 800b7e8:	e018      	b.n	800b81c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	691b      	ldr	r3, [r3, #16]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	daf2      	bge.n	800b7d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2210      	movs	r2, #16
 800b7fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	3301      	adds	r3, #1
 800b800:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b808:	d901      	bls.n	800b80e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b80a:	2303      	movs	r3, #3
 800b80c:	e006      	b.n	800b81c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	691b      	ldr	r3, [r3, #16]
 800b812:	f003 0310 	and.w	r3, r3, #16
 800b816:	2b10      	cmp	r3, #16
 800b818:	d0f0      	beq.n	800b7fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b81a:	2300      	movs	r3, #0
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3714      	adds	r7, #20
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr

0800b828 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b828:	b480      	push	{r7}
 800b82a:	b085      	sub	sp, #20
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	460b      	mov	r3, r1
 800b832:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b83e:	681a      	ldr	r2, [r3, #0]
 800b840:	78fb      	ldrb	r3, [r7, #3]
 800b842:	68f9      	ldr	r1, [r7, #12]
 800b844:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b848:	4313      	orrs	r3, r2
 800b84a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3714      	adds	r7, #20
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr

0800b85a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b85a:	b480      	push	{r7}
 800b85c:	b085      	sub	sp, #20
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b874:	f023 0303 	bic.w	r3, r3, #3
 800b878:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	68fa      	ldr	r2, [r7, #12]
 800b884:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b888:	f043 0302 	orr.w	r3, r3, #2
 800b88c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3714      	adds	r7, #20
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	695b      	ldr	r3, [r3, #20]
 800b8a8:	f003 0301 	and.w	r3, r3, #1
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	370c      	adds	r7, #12
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b8d0:	d901      	bls.n	800b8d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b8d2:	2303      	movs	r3, #3
 800b8d4:	e01b      	b.n	800b90e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	691b      	ldr	r3, [r3, #16]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	daf2      	bge.n	800b8c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	691b      	ldr	r3, [r3, #16]
 800b8e6:	f043 0201 	orr.w	r2, r3, #1
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b8fa:	d901      	bls.n	800b900 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b8fc:	2303      	movs	r3, #3
 800b8fe:	e006      	b.n	800b90e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	691b      	ldr	r3, [r3, #16]
 800b904:	f003 0301 	and.w	r3, r3, #1
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d0f0      	beq.n	800b8ee <USB_CoreReset+0x36>

  return HAL_OK;
 800b90c:	2300      	movs	r3, #0
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3714      	adds	r7, #20
 800b912:	46bd      	mov	sp, r7
 800b914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b918:	4770      	bx	lr
	...

0800b91c <__NVIC_SetPriority>:
{
 800b91c:	b480      	push	{r7}
 800b91e:	b083      	sub	sp, #12
 800b920:	af00      	add	r7, sp, #0
 800b922:	4603      	mov	r3, r0
 800b924:	6039      	str	r1, [r7, #0]
 800b926:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b928:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	db0a      	blt.n	800b946 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	b2da      	uxtb	r2, r3
 800b934:	490c      	ldr	r1, [pc, #48]	@ (800b968 <__NVIC_SetPriority+0x4c>)
 800b936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b93a:	0112      	lsls	r2, r2, #4
 800b93c:	b2d2      	uxtb	r2, r2
 800b93e:	440b      	add	r3, r1
 800b940:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b944:	e00a      	b.n	800b95c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	b2da      	uxtb	r2, r3
 800b94a:	4908      	ldr	r1, [pc, #32]	@ (800b96c <__NVIC_SetPriority+0x50>)
 800b94c:	88fb      	ldrh	r3, [r7, #6]
 800b94e:	f003 030f 	and.w	r3, r3, #15
 800b952:	3b04      	subs	r3, #4
 800b954:	0112      	lsls	r2, r2, #4
 800b956:	b2d2      	uxtb	r2, r2
 800b958:	440b      	add	r3, r1
 800b95a:	761a      	strb	r2, [r3, #24]
}
 800b95c:	bf00      	nop
 800b95e:	370c      	adds	r7, #12
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr
 800b968:	e000e100 	.word	0xe000e100
 800b96c:	e000ed00 	.word	0xe000ed00

0800b970 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b970:	b580      	push	{r7, lr}
 800b972:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b974:	4b05      	ldr	r3, [pc, #20]	@ (800b98c <SysTick_Handler+0x1c>)
 800b976:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b978:	f001 fd6e 	bl	800d458 <xTaskGetSchedulerState>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d001      	beq.n	800b986 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b982:	f002 fb69 	bl	800e058 <xPortSysTickHandler>
  }
}
 800b986:	bf00      	nop
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	e000e010 	.word	0xe000e010

0800b990 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b990:	b580      	push	{r7, lr}
 800b992:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b994:	2100      	movs	r1, #0
 800b996:	f06f 0004 	mvn.w	r0, #4
 800b99a:	f7ff ffbf 	bl	800b91c <__NVIC_SetPriority>
#endif
}
 800b99e:	bf00      	nop
 800b9a0:	bd80      	pop	{r7, pc}
	...

0800b9a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9aa:	f3ef 8305 	mrs	r3, IPSR
 800b9ae:	603b      	str	r3, [r7, #0]
  return(result);
 800b9b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d003      	beq.n	800b9be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b9b6:	f06f 0305 	mvn.w	r3, #5
 800b9ba:	607b      	str	r3, [r7, #4]
 800b9bc:	e00c      	b.n	800b9d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b9be:	4b0a      	ldr	r3, [pc, #40]	@ (800b9e8 <osKernelInitialize+0x44>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d105      	bne.n	800b9d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b9c6:	4b08      	ldr	r3, [pc, #32]	@ (800b9e8 <osKernelInitialize+0x44>)
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	607b      	str	r3, [r7, #4]
 800b9d0:	e002      	b.n	800b9d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b9d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b9d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b9d8:	687b      	ldr	r3, [r7, #4]
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	370c      	adds	r7, #12
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	240320e0 	.word	0x240320e0

0800b9ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9f2:	f3ef 8305 	mrs	r3, IPSR
 800b9f6:	603b      	str	r3, [r7, #0]
  return(result);
 800b9f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d003      	beq.n	800ba06 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b9fe:	f06f 0305 	mvn.w	r3, #5
 800ba02:	607b      	str	r3, [r7, #4]
 800ba04:	e010      	b.n	800ba28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ba06:	4b0b      	ldr	r3, [pc, #44]	@ (800ba34 <osKernelStart+0x48>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	d109      	bne.n	800ba22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ba0e:	f7ff ffbf 	bl	800b990 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ba12:	4b08      	ldr	r3, [pc, #32]	@ (800ba34 <osKernelStart+0x48>)
 800ba14:	2202      	movs	r2, #2
 800ba16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ba18:	f001 f892 	bl	800cb40 <vTaskStartScheduler>
      stat = osOK;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	607b      	str	r3, [r7, #4]
 800ba20:	e002      	b.n	800ba28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ba22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ba26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ba28:	687b      	ldr	r3, [r7, #4]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3708      	adds	r7, #8
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	240320e0 	.word	0x240320e0

0800ba38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b08e      	sub	sp, #56	@ 0x38
 800ba3c:	af04      	add	r7, sp, #16
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ba44:	2300      	movs	r3, #0
 800ba46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba48:	f3ef 8305 	mrs	r3, IPSR
 800ba4c:	617b      	str	r3, [r7, #20]
  return(result);
 800ba4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d17e      	bne.n	800bb52 <osThreadNew+0x11a>
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d07b      	beq.n	800bb52 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ba5a:	2380      	movs	r3, #128	@ 0x80
 800ba5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ba5e:	2318      	movs	r3, #24
 800ba60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ba62:	2300      	movs	r3, #0
 800ba64:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ba66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ba6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d045      	beq.n	800bafe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d002      	beq.n	800ba80 <osThreadNew+0x48>
        name = attr->name;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	699b      	ldr	r3, [r3, #24]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d002      	beq.n	800ba8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	699b      	ldr	r3, [r3, #24]
 800ba8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ba8e:	69fb      	ldr	r3, [r7, #28]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d008      	beq.n	800baa6 <osThreadNew+0x6e>
 800ba94:	69fb      	ldr	r3, [r7, #28]
 800ba96:	2b38      	cmp	r3, #56	@ 0x38
 800ba98:	d805      	bhi.n	800baa6 <osThreadNew+0x6e>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	f003 0301 	and.w	r3, r3, #1
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d001      	beq.n	800baaa <osThreadNew+0x72>
        return (NULL);
 800baa6:	2300      	movs	r3, #0
 800baa8:	e054      	b.n	800bb54 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	695b      	ldr	r3, [r3, #20]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d003      	beq.n	800baba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	695b      	ldr	r3, [r3, #20]
 800bab6:	089b      	lsrs	r3, r3, #2
 800bab8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	689b      	ldr	r3, [r3, #8]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00e      	beq.n	800bae0 <osThreadNew+0xa8>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	2ba7      	cmp	r3, #167	@ 0xa7
 800bac8:	d90a      	bls.n	800bae0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d006      	beq.n	800bae0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	695b      	ldr	r3, [r3, #20]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d002      	beq.n	800bae0 <osThreadNew+0xa8>
        mem = 1;
 800bada:	2301      	movs	r3, #1
 800badc:	61bb      	str	r3, [r7, #24]
 800bade:	e010      	b.n	800bb02 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d10c      	bne.n	800bb02 <osThreadNew+0xca>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d108      	bne.n	800bb02 <osThreadNew+0xca>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	691b      	ldr	r3, [r3, #16]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d104      	bne.n	800bb02 <osThreadNew+0xca>
          mem = 0;
 800baf8:	2300      	movs	r3, #0
 800bafa:	61bb      	str	r3, [r7, #24]
 800bafc:	e001      	b.n	800bb02 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bafe:	2300      	movs	r3, #0
 800bb00:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d110      	bne.n	800bb2a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bb10:	9202      	str	r2, [sp, #8]
 800bb12:	9301      	str	r3, [sp, #4]
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	9300      	str	r3, [sp, #0]
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	6a3a      	ldr	r2, [r7, #32]
 800bb1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb1e:	68f8      	ldr	r0, [r7, #12]
 800bb20:	f000 fe1a 	bl	800c758 <xTaskCreateStatic>
 800bb24:	4603      	mov	r3, r0
 800bb26:	613b      	str	r3, [r7, #16]
 800bb28:	e013      	b.n	800bb52 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bb2a:	69bb      	ldr	r3, [r7, #24]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d110      	bne.n	800bb52 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bb30:	6a3b      	ldr	r3, [r7, #32]
 800bb32:	b29a      	uxth	r2, r3
 800bb34:	f107 0310 	add.w	r3, r7, #16
 800bb38:	9301      	str	r3, [sp, #4]
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	9300      	str	r3, [sp, #0]
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb42:	68f8      	ldr	r0, [r7, #12]
 800bb44:	f000 fe68 	bl	800c818 <xTaskCreate>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b01      	cmp	r3, #1
 800bb4c:	d001      	beq.n	800bb52 <osThreadNew+0x11a>
            hTask = NULL;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bb52:	693b      	ldr	r3, [r7, #16]
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3728      	adds	r7, #40	@ 0x28
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb64:	f3ef 8305 	mrs	r3, IPSR
 800bb68:	60bb      	str	r3, [r7, #8]
  return(result);
 800bb6a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d003      	beq.n	800bb78 <osDelay+0x1c>
    stat = osErrorISR;
 800bb70:	f06f 0305 	mvn.w	r3, #5
 800bb74:	60fb      	str	r3, [r7, #12]
 800bb76:	e007      	b.n	800bb88 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d002      	beq.n	800bb88 <osDelay+0x2c>
      vTaskDelay(ticks);
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 ffa6 	bl	800cad4 <vTaskDelay>
    }
  }

  return (stat);
 800bb88:	68fb      	ldr	r3, [r7, #12]
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3710      	adds	r7, #16
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
	...

0800bb94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bb94:	b480      	push	{r7}
 800bb96:	b085      	sub	sp, #20
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	60f8      	str	r0, [r7, #12]
 800bb9c:	60b9      	str	r1, [r7, #8]
 800bb9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	4a07      	ldr	r2, [pc, #28]	@ (800bbc0 <vApplicationGetIdleTaskMemory+0x2c>)
 800bba4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	4a06      	ldr	r2, [pc, #24]	@ (800bbc4 <vApplicationGetIdleTaskMemory+0x30>)
 800bbaa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2280      	movs	r2, #128	@ 0x80
 800bbb0:	601a      	str	r2, [r3, #0]
}
 800bbb2:	bf00      	nop
 800bbb4:	3714      	adds	r7, #20
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop
 800bbc0:	240320e4 	.word	0x240320e4
 800bbc4:	2403218c 	.word	0x2403218c

0800bbc8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bbc8:	b480      	push	{r7}
 800bbca:	b085      	sub	sp, #20
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	4a07      	ldr	r2, [pc, #28]	@ (800bbf4 <vApplicationGetTimerTaskMemory+0x2c>)
 800bbd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	4a06      	ldr	r2, [pc, #24]	@ (800bbf8 <vApplicationGetTimerTaskMemory+0x30>)
 800bbde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bbe6:	601a      	str	r2, [r3, #0]
}
 800bbe8:	bf00      	nop
 800bbea:	3714      	adds	r7, #20
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr
 800bbf4:	2403238c 	.word	0x2403238c
 800bbf8:	24032434 	.word	0x24032434

0800bbfc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b083      	sub	sp, #12
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f103 0208 	add.w	r2, r3, #8
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f103 0208 	add.w	r2, r3, #8
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f103 0208 	add.w	r2, r3, #8
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bc30:	bf00      	nop
 800bc32:	370c      	adds	r7, #12
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bc4a:	bf00      	nop
 800bc4c:	370c      	adds	r7, #12
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr

0800bc56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc56:	b480      	push	{r7}
 800bc58:	b085      	sub	sp, #20
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
 800bc5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	68fa      	ldr	r2, [r7, #12]
 800bc6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	689a      	ldr	r2, [r3, #8]
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	689b      	ldr	r3, [r3, #8]
 800bc78:	683a      	ldr	r2, [r7, #0]
 800bc7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	683a      	ldr	r2, [r7, #0]
 800bc80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	1c5a      	adds	r2, r3, #1
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	601a      	str	r2, [r3, #0]
}
 800bc92:	bf00      	nop
 800bc94:	3714      	adds	r7, #20
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr

0800bc9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc9e:	b480      	push	{r7}
 800bca0:	b085      	sub	sp, #20
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
 800bca6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bcb4:	d103      	bne.n	800bcbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	691b      	ldr	r3, [r3, #16]
 800bcba:	60fb      	str	r3, [r7, #12]
 800bcbc:	e00c      	b.n	800bcd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	3308      	adds	r3, #8
 800bcc2:	60fb      	str	r3, [r7, #12]
 800bcc4:	e002      	b.n	800bccc <vListInsert+0x2e>
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	60fb      	str	r3, [r7, #12]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	68ba      	ldr	r2, [r7, #8]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d2f6      	bcs.n	800bcc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	685a      	ldr	r2, [r3, #4]
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	683a      	ldr	r2, [r7, #0]
 800bce6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	68fa      	ldr	r2, [r7, #12]
 800bcec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	683a      	ldr	r2, [r7, #0]
 800bcf2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	1c5a      	adds	r2, r3, #1
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	601a      	str	r2, [r3, #0]
}
 800bd04:	bf00      	nop
 800bd06:	3714      	adds	r7, #20
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bd10:	b480      	push	{r7}
 800bd12:	b085      	sub	sp, #20
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	691b      	ldr	r3, [r3, #16]
 800bd1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	6892      	ldr	r2, [r2, #8]
 800bd26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	6852      	ldr	r2, [r2, #4]
 800bd30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d103      	bne.n	800bd44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	689a      	ldr	r2, [r3, #8]
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2200      	movs	r2, #0
 800bd48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	1e5a      	subs	r2, r3, #1
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3714      	adds	r7, #20
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b084      	sub	sp, #16
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d10b      	bne.n	800bd90 <xQueueGenericReset+0x2c>
	__asm volatile
 800bd78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd7c:	f383 8811 	msr	BASEPRI, r3
 800bd80:	f3bf 8f6f 	isb	sy
 800bd84:	f3bf 8f4f 	dsb	sy
 800bd88:	60bb      	str	r3, [r7, #8]
}
 800bd8a:	bf00      	nop
 800bd8c:	bf00      	nop
 800bd8e:	e7fd      	b.n	800bd8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bd90:	f002 f8d2 	bl	800df38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681a      	ldr	r2, [r3, #0]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd9c:	68f9      	ldr	r1, [r7, #12]
 800bd9e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bda0:	fb01 f303 	mul.w	r3, r1, r3
 800bda4:	441a      	add	r2, r3
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2200      	movs	r2, #0
 800bdae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681a      	ldr	r2, [r3, #0]
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681a      	ldr	r2, [r3, #0]
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdc0:	3b01      	subs	r3, #1
 800bdc2:	68f9      	ldr	r1, [r7, #12]
 800bdc4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bdc6:	fb01 f303 	mul.w	r3, r1, r3
 800bdca:	441a      	add	r2, r3
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	22ff      	movs	r2, #255	@ 0xff
 800bdd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	22ff      	movs	r2, #255	@ 0xff
 800bddc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d114      	bne.n	800be10 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	691b      	ldr	r3, [r3, #16]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d01a      	beq.n	800be24 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	3310      	adds	r3, #16
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f001 f942 	bl	800d07c <xTaskRemoveFromEventList>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d012      	beq.n	800be24 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bdfe:	4b0d      	ldr	r3, [pc, #52]	@ (800be34 <xQueueGenericReset+0xd0>)
 800be00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be04:	601a      	str	r2, [r3, #0]
 800be06:	f3bf 8f4f 	dsb	sy
 800be0a:	f3bf 8f6f 	isb	sy
 800be0e:	e009      	b.n	800be24 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	3310      	adds	r3, #16
 800be14:	4618      	mov	r0, r3
 800be16:	f7ff fef1 	bl	800bbfc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	3324      	adds	r3, #36	@ 0x24
 800be1e:	4618      	mov	r0, r3
 800be20:	f7ff feec 	bl	800bbfc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800be24:	f002 f8ba 	bl	800df9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800be28:	2301      	movs	r3, #1
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3710      	adds	r7, #16
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	e000ed04 	.word	0xe000ed04

0800be38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b08e      	sub	sp, #56	@ 0x38
 800be3c:	af02      	add	r7, sp, #8
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	607a      	str	r2, [r7, #4]
 800be44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d10b      	bne.n	800be64 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800be4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be50:	f383 8811 	msr	BASEPRI, r3
 800be54:	f3bf 8f6f 	isb	sy
 800be58:	f3bf 8f4f 	dsb	sy
 800be5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800be5e:	bf00      	nop
 800be60:	bf00      	nop
 800be62:	e7fd      	b.n	800be60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d10b      	bne.n	800be82 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800be6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be6e:	f383 8811 	msr	BASEPRI, r3
 800be72:	f3bf 8f6f 	isb	sy
 800be76:	f3bf 8f4f 	dsb	sy
 800be7a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800be7c:	bf00      	nop
 800be7e:	bf00      	nop
 800be80:	e7fd      	b.n	800be7e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d002      	beq.n	800be8e <xQueueGenericCreateStatic+0x56>
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d001      	beq.n	800be92 <xQueueGenericCreateStatic+0x5a>
 800be8e:	2301      	movs	r3, #1
 800be90:	e000      	b.n	800be94 <xQueueGenericCreateStatic+0x5c>
 800be92:	2300      	movs	r3, #0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10b      	bne.n	800beb0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800be98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be9c:	f383 8811 	msr	BASEPRI, r3
 800bea0:	f3bf 8f6f 	isb	sy
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	623b      	str	r3, [r7, #32]
}
 800beaa:	bf00      	nop
 800beac:	bf00      	nop
 800beae:	e7fd      	b.n	800beac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d102      	bne.n	800bebc <xQueueGenericCreateStatic+0x84>
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d101      	bne.n	800bec0 <xQueueGenericCreateStatic+0x88>
 800bebc:	2301      	movs	r3, #1
 800bebe:	e000      	b.n	800bec2 <xQueueGenericCreateStatic+0x8a>
 800bec0:	2300      	movs	r3, #0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d10b      	bne.n	800bede <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800bec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beca:	f383 8811 	msr	BASEPRI, r3
 800bece:	f3bf 8f6f 	isb	sy
 800bed2:	f3bf 8f4f 	dsb	sy
 800bed6:	61fb      	str	r3, [r7, #28]
}
 800bed8:	bf00      	nop
 800beda:	bf00      	nop
 800bedc:	e7fd      	b.n	800beda <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bede:	2350      	movs	r3, #80	@ 0x50
 800bee0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	2b50      	cmp	r3, #80	@ 0x50
 800bee6:	d00b      	beq.n	800bf00 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800bee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beec:	f383 8811 	msr	BASEPRI, r3
 800bef0:	f3bf 8f6f 	isb	sy
 800bef4:	f3bf 8f4f 	dsb	sy
 800bef8:	61bb      	str	r3, [r7, #24]
}
 800befa:	bf00      	nop
 800befc:	bf00      	nop
 800befe:	e7fd      	b.n	800befc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bf00:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800bf06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00d      	beq.n	800bf28 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bf0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf0e:	2201      	movs	r2, #1
 800bf10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf14:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800bf18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf1a:	9300      	str	r3, [sp, #0]
 800bf1c:	4613      	mov	r3, r2
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	68b9      	ldr	r1, [r7, #8]
 800bf22:	68f8      	ldr	r0, [r7, #12]
 800bf24:	f000 f805 	bl	800bf32 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3730      	adds	r7, #48	@ 0x30
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}

0800bf32 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bf32:	b580      	push	{r7, lr}
 800bf34:	b084      	sub	sp, #16
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	60f8      	str	r0, [r7, #12]
 800bf3a:	60b9      	str	r1, [r7, #8]
 800bf3c:	607a      	str	r2, [r7, #4]
 800bf3e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d103      	bne.n	800bf4e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	69ba      	ldr	r2, [r7, #24]
 800bf4a:	601a      	str	r2, [r3, #0]
 800bf4c:	e002      	b.n	800bf54 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bf54:	69bb      	ldr	r3, [r7, #24]
 800bf56:	68fa      	ldr	r2, [r7, #12]
 800bf58:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	68ba      	ldr	r2, [r7, #8]
 800bf5e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bf60:	2101      	movs	r1, #1
 800bf62:	69b8      	ldr	r0, [r7, #24]
 800bf64:	f7ff fefe 	bl	800bd64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	78fa      	ldrb	r2, [r7, #3]
 800bf6c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bf70:	bf00      	nop
 800bf72:	3710      	adds	r7, #16
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b08e      	sub	sp, #56	@ 0x38
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	60f8      	str	r0, [r7, #12]
 800bf80:	60b9      	str	r1, [r7, #8]
 800bf82:	607a      	str	r2, [r7, #4]
 800bf84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bf86:	2300      	movs	r3, #0
 800bf88:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bf8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d10b      	bne.n	800bfac <xQueueGenericSend+0x34>
	__asm volatile
 800bf94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf98:	f383 8811 	msr	BASEPRI, r3
 800bf9c:	f3bf 8f6f 	isb	sy
 800bfa0:	f3bf 8f4f 	dsb	sy
 800bfa4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bfa6:	bf00      	nop
 800bfa8:	bf00      	nop
 800bfaa:	e7fd      	b.n	800bfa8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d103      	bne.n	800bfba <xQueueGenericSend+0x42>
 800bfb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d101      	bne.n	800bfbe <xQueueGenericSend+0x46>
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e000      	b.n	800bfc0 <xQueueGenericSend+0x48>
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d10b      	bne.n	800bfdc <xQueueGenericSend+0x64>
	__asm volatile
 800bfc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfc8:	f383 8811 	msr	BASEPRI, r3
 800bfcc:	f3bf 8f6f 	isb	sy
 800bfd0:	f3bf 8f4f 	dsb	sy
 800bfd4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bfd6:	bf00      	nop
 800bfd8:	bf00      	nop
 800bfda:	e7fd      	b.n	800bfd8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	2b02      	cmp	r3, #2
 800bfe0:	d103      	bne.n	800bfea <xQueueGenericSend+0x72>
 800bfe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	d101      	bne.n	800bfee <xQueueGenericSend+0x76>
 800bfea:	2301      	movs	r3, #1
 800bfec:	e000      	b.n	800bff0 <xQueueGenericSend+0x78>
 800bfee:	2300      	movs	r3, #0
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d10b      	bne.n	800c00c <xQueueGenericSend+0x94>
	__asm volatile
 800bff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff8:	f383 8811 	msr	BASEPRI, r3
 800bffc:	f3bf 8f6f 	isb	sy
 800c000:	f3bf 8f4f 	dsb	sy
 800c004:	623b      	str	r3, [r7, #32]
}
 800c006:	bf00      	nop
 800c008:	bf00      	nop
 800c00a:	e7fd      	b.n	800c008 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c00c:	f001 fa24 	bl	800d458 <xTaskGetSchedulerState>
 800c010:	4603      	mov	r3, r0
 800c012:	2b00      	cmp	r3, #0
 800c014:	d102      	bne.n	800c01c <xQueueGenericSend+0xa4>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d101      	bne.n	800c020 <xQueueGenericSend+0xa8>
 800c01c:	2301      	movs	r3, #1
 800c01e:	e000      	b.n	800c022 <xQueueGenericSend+0xaa>
 800c020:	2300      	movs	r3, #0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d10b      	bne.n	800c03e <xQueueGenericSend+0xc6>
	__asm volatile
 800c026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c02a:	f383 8811 	msr	BASEPRI, r3
 800c02e:	f3bf 8f6f 	isb	sy
 800c032:	f3bf 8f4f 	dsb	sy
 800c036:	61fb      	str	r3, [r7, #28]
}
 800c038:	bf00      	nop
 800c03a:	bf00      	nop
 800c03c:	e7fd      	b.n	800c03a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c03e:	f001 ff7b 	bl	800df38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c044:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d302      	bcc.n	800c054 <xQueueGenericSend+0xdc>
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	2b02      	cmp	r3, #2
 800c052:	d129      	bne.n	800c0a8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c054:	683a      	ldr	r2, [r7, #0]
 800c056:	68b9      	ldr	r1, [r7, #8]
 800c058:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c05a:	f000 fa0f 	bl	800c47c <prvCopyDataToQueue>
 800c05e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c064:	2b00      	cmp	r3, #0
 800c066:	d010      	beq.n	800c08a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c06a:	3324      	adds	r3, #36	@ 0x24
 800c06c:	4618      	mov	r0, r3
 800c06e:	f001 f805 	bl	800d07c <xTaskRemoveFromEventList>
 800c072:	4603      	mov	r3, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d013      	beq.n	800c0a0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c078:	4b3f      	ldr	r3, [pc, #252]	@ (800c178 <xQueueGenericSend+0x200>)
 800c07a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c07e:	601a      	str	r2, [r3, #0]
 800c080:	f3bf 8f4f 	dsb	sy
 800c084:	f3bf 8f6f 	isb	sy
 800c088:	e00a      	b.n	800c0a0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c08a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d007      	beq.n	800c0a0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c090:	4b39      	ldr	r3, [pc, #228]	@ (800c178 <xQueueGenericSend+0x200>)
 800c092:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c096:	601a      	str	r2, [r3, #0]
 800c098:	f3bf 8f4f 	dsb	sy
 800c09c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c0a0:	f001 ff7c 	bl	800df9c <vPortExitCritical>
				return pdPASS;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	e063      	b.n	800c170 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d103      	bne.n	800c0b6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c0ae:	f001 ff75 	bl	800df9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	e05c      	b.n	800c170 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c0b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d106      	bne.n	800c0ca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c0bc:	f107 0314 	add.w	r3, r7, #20
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f001 f867 	bl	800d194 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c0ca:	f001 ff67 	bl	800df9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c0ce:	f000 fda7 	bl	800cc20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c0d2:	f001 ff31 	bl	800df38 <vPortEnterCritical>
 800c0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c0dc:	b25b      	sxtb	r3, r3
 800c0de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c0e2:	d103      	bne.n	800c0ec <xQueueGenericSend+0x174>
 800c0e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c0f2:	b25b      	sxtb	r3, r3
 800c0f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c0f8:	d103      	bne.n	800c102 <xQueueGenericSend+0x18a>
 800c0fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c102:	f001 ff4b 	bl	800df9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c106:	1d3a      	adds	r2, r7, #4
 800c108:	f107 0314 	add.w	r3, r7, #20
 800c10c:	4611      	mov	r1, r2
 800c10e:	4618      	mov	r0, r3
 800c110:	f001 f856 	bl	800d1c0 <xTaskCheckForTimeOut>
 800c114:	4603      	mov	r3, r0
 800c116:	2b00      	cmp	r3, #0
 800c118:	d124      	bne.n	800c164 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c11a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c11c:	f000 faa6 	bl	800c66c <prvIsQueueFull>
 800c120:	4603      	mov	r3, r0
 800c122:	2b00      	cmp	r3, #0
 800c124:	d018      	beq.n	800c158 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c128:	3310      	adds	r3, #16
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	4611      	mov	r1, r2
 800c12e:	4618      	mov	r0, r3
 800c130:	f000 ff52 	bl	800cfd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c134:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c136:	f000 fa31 	bl	800c59c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c13a:	f000 fd7f 	bl	800cc3c <xTaskResumeAll>
 800c13e:	4603      	mov	r3, r0
 800c140:	2b00      	cmp	r3, #0
 800c142:	f47f af7c 	bne.w	800c03e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c146:	4b0c      	ldr	r3, [pc, #48]	@ (800c178 <xQueueGenericSend+0x200>)
 800c148:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c14c:	601a      	str	r2, [r3, #0]
 800c14e:	f3bf 8f4f 	dsb	sy
 800c152:	f3bf 8f6f 	isb	sy
 800c156:	e772      	b.n	800c03e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c158:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c15a:	f000 fa1f 	bl	800c59c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c15e:	f000 fd6d 	bl	800cc3c <xTaskResumeAll>
 800c162:	e76c      	b.n	800c03e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c164:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c166:	f000 fa19 	bl	800c59c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c16a:	f000 fd67 	bl	800cc3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c16e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c170:	4618      	mov	r0, r3
 800c172:	3738      	adds	r7, #56	@ 0x38
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}
 800c178:	e000ed04 	.word	0xe000ed04

0800c17c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b090      	sub	sp, #64	@ 0x40
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	607a      	str	r2, [r7, #4]
 800c188:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c18e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c190:	2b00      	cmp	r3, #0
 800c192:	d10b      	bne.n	800c1ac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c198:	f383 8811 	msr	BASEPRI, r3
 800c19c:	f3bf 8f6f 	isb	sy
 800c1a0:	f3bf 8f4f 	dsb	sy
 800c1a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c1a6:	bf00      	nop
 800c1a8:	bf00      	nop
 800c1aa:	e7fd      	b.n	800c1a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d103      	bne.n	800c1ba <xQueueGenericSendFromISR+0x3e>
 800c1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d101      	bne.n	800c1be <xQueueGenericSendFromISR+0x42>
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	e000      	b.n	800c1c0 <xQueueGenericSendFromISR+0x44>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d10b      	bne.n	800c1dc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c1c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1c8:	f383 8811 	msr	BASEPRI, r3
 800c1cc:	f3bf 8f6f 	isb	sy
 800c1d0:	f3bf 8f4f 	dsb	sy
 800c1d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c1d6:	bf00      	nop
 800c1d8:	bf00      	nop
 800c1da:	e7fd      	b.n	800c1d8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	2b02      	cmp	r3, #2
 800c1e0:	d103      	bne.n	800c1ea <xQueueGenericSendFromISR+0x6e>
 800c1e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1e6:	2b01      	cmp	r3, #1
 800c1e8:	d101      	bne.n	800c1ee <xQueueGenericSendFromISR+0x72>
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	e000      	b.n	800c1f0 <xQueueGenericSendFromISR+0x74>
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d10b      	bne.n	800c20c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c1f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f8:	f383 8811 	msr	BASEPRI, r3
 800c1fc:	f3bf 8f6f 	isb	sy
 800c200:	f3bf 8f4f 	dsb	sy
 800c204:	623b      	str	r3, [r7, #32]
}
 800c206:	bf00      	nop
 800c208:	bf00      	nop
 800c20a:	e7fd      	b.n	800c208 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c20c:	f001 ff74 	bl	800e0f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c210:	f3ef 8211 	mrs	r2, BASEPRI
 800c214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c218:	f383 8811 	msr	BASEPRI, r3
 800c21c:	f3bf 8f6f 	isb	sy
 800c220:	f3bf 8f4f 	dsb	sy
 800c224:	61fa      	str	r2, [r7, #28]
 800c226:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c228:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c22a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c22e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c234:	429a      	cmp	r2, r3
 800c236:	d302      	bcc.n	800c23e <xQueueGenericSendFromISR+0xc2>
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	2b02      	cmp	r3, #2
 800c23c:	d12f      	bne.n	800c29e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c240:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c244:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c24a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c24c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c24e:	683a      	ldr	r2, [r7, #0]
 800c250:	68b9      	ldr	r1, [r7, #8]
 800c252:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c254:	f000 f912 	bl	800c47c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c258:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c25c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c260:	d112      	bne.n	800c288 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c266:	2b00      	cmp	r3, #0
 800c268:	d016      	beq.n	800c298 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c26c:	3324      	adds	r3, #36	@ 0x24
 800c26e:	4618      	mov	r0, r3
 800c270:	f000 ff04 	bl	800d07c <xTaskRemoveFromEventList>
 800c274:	4603      	mov	r3, r0
 800c276:	2b00      	cmp	r3, #0
 800c278:	d00e      	beq.n	800c298 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d00b      	beq.n	800c298 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2201      	movs	r2, #1
 800c284:	601a      	str	r2, [r3, #0]
 800c286:	e007      	b.n	800c298 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c288:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c28c:	3301      	adds	r3, #1
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	b25a      	sxtb	r2, r3
 800c292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c294:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c298:	2301      	movs	r3, #1
 800c29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c29c:	e001      	b.n	800c2a2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c2a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2a4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c2ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c2ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3740      	adds	r7, #64	@ 0x40
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b08c      	sub	sp, #48	@ 0x30
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c2cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d10b      	bne.n	800c2ea <xQueueReceive+0x32>
	__asm volatile
 800c2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d6:	f383 8811 	msr	BASEPRI, r3
 800c2da:	f3bf 8f6f 	isb	sy
 800c2de:	f3bf 8f4f 	dsb	sy
 800c2e2:	623b      	str	r3, [r7, #32]
}
 800c2e4:	bf00      	nop
 800c2e6:	bf00      	nop
 800c2e8:	e7fd      	b.n	800c2e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d103      	bne.n	800c2f8 <xQueueReceive+0x40>
 800c2f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d101      	bne.n	800c2fc <xQueueReceive+0x44>
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e000      	b.n	800c2fe <xQueueReceive+0x46>
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d10b      	bne.n	800c31a <xQueueReceive+0x62>
	__asm volatile
 800c302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c306:	f383 8811 	msr	BASEPRI, r3
 800c30a:	f3bf 8f6f 	isb	sy
 800c30e:	f3bf 8f4f 	dsb	sy
 800c312:	61fb      	str	r3, [r7, #28]
}
 800c314:	bf00      	nop
 800c316:	bf00      	nop
 800c318:	e7fd      	b.n	800c316 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c31a:	f001 f89d 	bl	800d458 <xTaskGetSchedulerState>
 800c31e:	4603      	mov	r3, r0
 800c320:	2b00      	cmp	r3, #0
 800c322:	d102      	bne.n	800c32a <xQueueReceive+0x72>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d101      	bne.n	800c32e <xQueueReceive+0x76>
 800c32a:	2301      	movs	r3, #1
 800c32c:	e000      	b.n	800c330 <xQueueReceive+0x78>
 800c32e:	2300      	movs	r3, #0
 800c330:	2b00      	cmp	r3, #0
 800c332:	d10b      	bne.n	800c34c <xQueueReceive+0x94>
	__asm volatile
 800c334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c338:	f383 8811 	msr	BASEPRI, r3
 800c33c:	f3bf 8f6f 	isb	sy
 800c340:	f3bf 8f4f 	dsb	sy
 800c344:	61bb      	str	r3, [r7, #24]
}
 800c346:	bf00      	nop
 800c348:	bf00      	nop
 800c34a:	e7fd      	b.n	800c348 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c34c:	f001 fdf4 	bl	800df38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c354:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d01f      	beq.n	800c39c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c35c:	68b9      	ldr	r1, [r7, #8]
 800c35e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c360:	f000 f8f6 	bl	800c550 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c366:	1e5a      	subs	r2, r3, #1
 800c368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c36a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c36e:	691b      	ldr	r3, [r3, #16]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d00f      	beq.n	800c394 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c376:	3310      	adds	r3, #16
 800c378:	4618      	mov	r0, r3
 800c37a:	f000 fe7f 	bl	800d07c <xTaskRemoveFromEventList>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d007      	beq.n	800c394 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c384:	4b3c      	ldr	r3, [pc, #240]	@ (800c478 <xQueueReceive+0x1c0>)
 800c386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c38a:	601a      	str	r2, [r3, #0]
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c394:	f001 fe02 	bl	800df9c <vPortExitCritical>
				return pdPASS;
 800c398:	2301      	movs	r3, #1
 800c39a:	e069      	b.n	800c470 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d103      	bne.n	800c3aa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c3a2:	f001 fdfb 	bl	800df9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	e062      	b.n	800c470 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c3aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d106      	bne.n	800c3be <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c3b0:	f107 0310 	add.w	r3, r7, #16
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f000 feed 	bl	800d194 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c3be:	f001 fded 	bl	800df9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c3c2:	f000 fc2d 	bl	800cc20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c3c6:	f001 fdb7 	bl	800df38 <vPortEnterCritical>
 800c3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c3d0:	b25b      	sxtb	r3, r3
 800c3d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c3d6:	d103      	bne.n	800c3e0 <xQueueReceive+0x128>
 800c3d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c3e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c3e6:	b25b      	sxtb	r3, r3
 800c3e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c3ec:	d103      	bne.n	800c3f6 <xQueueReceive+0x13e>
 800c3ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c3f6:	f001 fdd1 	bl	800df9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c3fa:	1d3a      	adds	r2, r7, #4
 800c3fc:	f107 0310 	add.w	r3, r7, #16
 800c400:	4611      	mov	r1, r2
 800c402:	4618      	mov	r0, r3
 800c404:	f000 fedc 	bl	800d1c0 <xTaskCheckForTimeOut>
 800c408:	4603      	mov	r3, r0
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d123      	bne.n	800c456 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c40e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c410:	f000 f916 	bl	800c640 <prvIsQueueEmpty>
 800c414:	4603      	mov	r3, r0
 800c416:	2b00      	cmp	r3, #0
 800c418:	d017      	beq.n	800c44a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c41a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c41c:	3324      	adds	r3, #36	@ 0x24
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	4611      	mov	r1, r2
 800c422:	4618      	mov	r0, r3
 800c424:	f000 fdd8 	bl	800cfd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c428:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c42a:	f000 f8b7 	bl	800c59c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c42e:	f000 fc05 	bl	800cc3c <xTaskResumeAll>
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d189      	bne.n	800c34c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c438:	4b0f      	ldr	r3, [pc, #60]	@ (800c478 <xQueueReceive+0x1c0>)
 800c43a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c43e:	601a      	str	r2, [r3, #0]
 800c440:	f3bf 8f4f 	dsb	sy
 800c444:	f3bf 8f6f 	isb	sy
 800c448:	e780      	b.n	800c34c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c44a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c44c:	f000 f8a6 	bl	800c59c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c450:	f000 fbf4 	bl	800cc3c <xTaskResumeAll>
 800c454:	e77a      	b.n	800c34c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c456:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c458:	f000 f8a0 	bl	800c59c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c45c:	f000 fbee 	bl	800cc3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c460:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c462:	f000 f8ed 	bl	800c640 <prvIsQueueEmpty>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	f43f af6f 	beq.w	800c34c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c46e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c470:	4618      	mov	r0, r3
 800c472:	3730      	adds	r7, #48	@ 0x30
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}
 800c478:	e000ed04 	.word	0xe000ed04

0800c47c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b086      	sub	sp, #24
 800c480:	af00      	add	r7, sp, #0
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	60b9      	str	r1, [r7, #8]
 800c486:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c488:	2300      	movs	r3, #0
 800c48a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c490:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c496:	2b00      	cmp	r3, #0
 800c498:	d10d      	bne.n	800c4b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d14d      	bne.n	800c53e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f000 fff4 	bl	800d494 <xTaskPriorityDisinherit>
 800c4ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	609a      	str	r2, [r3, #8]
 800c4b4:	e043      	b.n	800c53e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d119      	bne.n	800c4f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	6858      	ldr	r0, [r3, #4]
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	68b9      	ldr	r1, [r7, #8]
 800c4c8:	f00f f889 	bl	801b5de <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	685a      	ldr	r2, [r3, #4]
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4d4:	441a      	add	r2, r3
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	685a      	ldr	r2, [r3, #4]
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	689b      	ldr	r3, [r3, #8]
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	d32b      	bcc.n	800c53e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681a      	ldr	r2, [r3, #0]
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	605a      	str	r2, [r3, #4]
 800c4ee:	e026      	b.n	800c53e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	68d8      	ldr	r0, [r3, #12]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	68b9      	ldr	r1, [r7, #8]
 800c4fc:	f00f f86f 	bl	801b5de <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	68da      	ldr	r2, [r3, #12]
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c508:	425b      	negs	r3, r3
 800c50a:	441a      	add	r2, r3
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	68da      	ldr	r2, [r3, #12]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	429a      	cmp	r2, r3
 800c51a:	d207      	bcs.n	800c52c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	689a      	ldr	r2, [r3, #8]
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c524:	425b      	negs	r3, r3
 800c526:	441a      	add	r2, r3
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2b02      	cmp	r3, #2
 800c530:	d105      	bne.n	800c53e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d002      	beq.n	800c53e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	3b01      	subs	r3, #1
 800c53c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	1c5a      	adds	r2, r3, #1
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c546:	697b      	ldr	r3, [r7, #20]
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3718      	adds	r7, #24
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b082      	sub	sp, #8
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d018      	beq.n	800c594 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	68da      	ldr	r2, [r3, #12]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c56a:	441a      	add	r2, r3
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	68da      	ldr	r2, [r3, #12]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	689b      	ldr	r3, [r3, #8]
 800c578:	429a      	cmp	r2, r3
 800c57a:	d303      	bcc.n	800c584 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681a      	ldr	r2, [r3, #0]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	68d9      	ldr	r1, [r3, #12]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c58c:	461a      	mov	r2, r3
 800c58e:	6838      	ldr	r0, [r7, #0]
 800c590:	f00f f825 	bl	801b5de <memcpy>
	}
}
 800c594:	bf00      	nop
 800c596:	3708      	adds	r7, #8
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b084      	sub	sp, #16
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c5a4:	f001 fcc8 	bl	800df38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c5ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c5b0:	e011      	b.n	800c5d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d012      	beq.n	800c5e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	3324      	adds	r3, #36	@ 0x24
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f000 fd5c 	bl	800d07c <xTaskRemoveFromEventList>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d001      	beq.n	800c5ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c5ca:	f000 fe5d 	bl	800d288 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c5ce:	7bfb      	ldrb	r3, [r7, #15]
 800c5d0:	3b01      	subs	r3, #1
 800c5d2:	b2db      	uxtb	r3, r3
 800c5d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c5d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	dce9      	bgt.n	800c5b2 <prvUnlockQueue+0x16>
 800c5de:	e000      	b.n	800c5e2 <prvUnlockQueue+0x46>
					break;
 800c5e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	22ff      	movs	r2, #255	@ 0xff
 800c5e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c5ea:	f001 fcd7 	bl	800df9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c5ee:	f001 fca3 	bl	800df38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c5f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c5fa:	e011      	b.n	800c620 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	691b      	ldr	r3, [r3, #16]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d012      	beq.n	800c62a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	3310      	adds	r3, #16
 800c608:	4618      	mov	r0, r3
 800c60a:	f000 fd37 	bl	800d07c <xTaskRemoveFromEventList>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b00      	cmp	r3, #0
 800c612:	d001      	beq.n	800c618 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c614:	f000 fe38 	bl	800d288 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c618:	7bbb      	ldrb	r3, [r7, #14]
 800c61a:	3b01      	subs	r3, #1
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c620:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c624:	2b00      	cmp	r3, #0
 800c626:	dce9      	bgt.n	800c5fc <prvUnlockQueue+0x60>
 800c628:	e000      	b.n	800c62c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c62a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	22ff      	movs	r2, #255	@ 0xff
 800c630:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c634:	f001 fcb2 	bl	800df9c <vPortExitCritical>
}
 800c638:	bf00      	nop
 800c63a:	3710      	adds	r7, #16
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c648:	f001 fc76 	bl	800df38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c650:	2b00      	cmp	r3, #0
 800c652:	d102      	bne.n	800c65a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c654:	2301      	movs	r3, #1
 800c656:	60fb      	str	r3, [r7, #12]
 800c658:	e001      	b.n	800c65e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c65a:	2300      	movs	r3, #0
 800c65c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c65e:	f001 fc9d 	bl	800df9c <vPortExitCritical>

	return xReturn;
 800c662:	68fb      	ldr	r3, [r7, #12]
}
 800c664:	4618      	mov	r0, r3
 800c666:	3710      	adds	r7, #16
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b084      	sub	sp, #16
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c674:	f001 fc60 	bl	800df38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c680:	429a      	cmp	r2, r3
 800c682:	d102      	bne.n	800c68a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c684:	2301      	movs	r3, #1
 800c686:	60fb      	str	r3, [r7, #12]
 800c688:	e001      	b.n	800c68e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c68a:	2300      	movs	r3, #0
 800c68c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c68e:	f001 fc85 	bl	800df9c <vPortExitCritical>

	return xReturn;
 800c692:	68fb      	ldr	r3, [r7, #12]
}
 800c694:	4618      	mov	r0, r3
 800c696:	3710      	adds	r7, #16
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c69c:	b480      	push	{r7}
 800c69e:	b085      	sub	sp, #20
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	60fb      	str	r3, [r7, #12]
 800c6aa:	e014      	b.n	800c6d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c6ac:	4a0f      	ldr	r2, [pc, #60]	@ (800c6ec <vQueueAddToRegistry+0x50>)
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d10b      	bne.n	800c6d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c6b8:	490c      	ldr	r1, [pc, #48]	@ (800c6ec <vQueueAddToRegistry+0x50>)
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	683a      	ldr	r2, [r7, #0]
 800c6be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c6c2:	4a0a      	ldr	r2, [pc, #40]	@ (800c6ec <vQueueAddToRegistry+0x50>)
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	00db      	lsls	r3, r3, #3
 800c6c8:	4413      	add	r3, r2
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c6ce:	e006      	b.n	800c6de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	60fb      	str	r3, [r7, #12]
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2b07      	cmp	r3, #7
 800c6da:	d9e7      	bls.n	800c6ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c6dc:	bf00      	nop
 800c6de:	bf00      	nop
 800c6e0:	3714      	adds	r7, #20
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr
 800c6ea:	bf00      	nop
 800c6ec:	24032834 	.word	0x24032834

0800c6f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b086      	sub	sp, #24
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	60f8      	str	r0, [r7, #12]
 800c6f8:	60b9      	str	r1, [r7, #8]
 800c6fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c700:	f001 fc1a 	bl	800df38 <vPortEnterCritical>
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c70a:	b25b      	sxtb	r3, r3
 800c70c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c710:	d103      	bne.n	800c71a <vQueueWaitForMessageRestricted+0x2a>
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	2200      	movs	r2, #0
 800c716:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c720:	b25b      	sxtb	r3, r3
 800c722:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c726:	d103      	bne.n	800c730 <vQueueWaitForMessageRestricted+0x40>
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c730:	f001 fc34 	bl	800df9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d106      	bne.n	800c74a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	3324      	adds	r3, #36	@ 0x24
 800c740:	687a      	ldr	r2, [r7, #4]
 800c742:	68b9      	ldr	r1, [r7, #8]
 800c744:	4618      	mov	r0, r3
 800c746:	f000 fc6d 	bl	800d024 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c74a:	6978      	ldr	r0, [r7, #20]
 800c74c:	f7ff ff26 	bl	800c59c <prvUnlockQueue>
	}
 800c750:	bf00      	nop
 800c752:	3718      	adds	r7, #24
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}

0800c758 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b08e      	sub	sp, #56	@ 0x38
 800c75c:	af04      	add	r7, sp, #16
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	607a      	str	r2, [r7, #4]
 800c764:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d10b      	bne.n	800c784 <xTaskCreateStatic+0x2c>
	__asm volatile
 800c76c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c770:	f383 8811 	msr	BASEPRI, r3
 800c774:	f3bf 8f6f 	isb	sy
 800c778:	f3bf 8f4f 	dsb	sy
 800c77c:	623b      	str	r3, [r7, #32]
}
 800c77e:	bf00      	nop
 800c780:	bf00      	nop
 800c782:	e7fd      	b.n	800c780 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c786:	2b00      	cmp	r3, #0
 800c788:	d10b      	bne.n	800c7a2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800c78a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c78e:	f383 8811 	msr	BASEPRI, r3
 800c792:	f3bf 8f6f 	isb	sy
 800c796:	f3bf 8f4f 	dsb	sy
 800c79a:	61fb      	str	r3, [r7, #28]
}
 800c79c:	bf00      	nop
 800c79e:	bf00      	nop
 800c7a0:	e7fd      	b.n	800c79e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c7a2:	23a8      	movs	r3, #168	@ 0xa8
 800c7a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	2ba8      	cmp	r3, #168	@ 0xa8
 800c7aa:	d00b      	beq.n	800c7c4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800c7ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7b0:	f383 8811 	msr	BASEPRI, r3
 800c7b4:	f3bf 8f6f 	isb	sy
 800c7b8:	f3bf 8f4f 	dsb	sy
 800c7bc:	61bb      	str	r3, [r7, #24]
}
 800c7be:	bf00      	nop
 800c7c0:	bf00      	nop
 800c7c2:	e7fd      	b.n	800c7c0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c7c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d01e      	beq.n	800c80a <xTaskCreateStatic+0xb2>
 800c7cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d01b      	beq.n	800c80a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c7d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7d4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c7da:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7de:	2202      	movs	r2, #2
 800c7e0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	9303      	str	r3, [sp, #12]
 800c7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ea:	9302      	str	r3, [sp, #8]
 800c7ec:	f107 0314 	add.w	r3, r7, #20
 800c7f0:	9301      	str	r3, [sp, #4]
 800c7f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f4:	9300      	str	r3, [sp, #0]
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	687a      	ldr	r2, [r7, #4]
 800c7fa:	68b9      	ldr	r1, [r7, #8]
 800c7fc:	68f8      	ldr	r0, [r7, #12]
 800c7fe:	f000 f851 	bl	800c8a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c802:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c804:	f000 f8f6 	bl	800c9f4 <prvAddNewTaskToReadyList>
 800c808:	e001      	b.n	800c80e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c80a:	2300      	movs	r3, #0
 800c80c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c80e:	697b      	ldr	r3, [r7, #20]
	}
 800c810:	4618      	mov	r0, r3
 800c812:	3728      	adds	r7, #40	@ 0x28
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}

0800c818 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b08c      	sub	sp, #48	@ 0x30
 800c81c:	af04      	add	r7, sp, #16
 800c81e:	60f8      	str	r0, [r7, #12]
 800c820:	60b9      	str	r1, [r7, #8]
 800c822:	603b      	str	r3, [r7, #0]
 800c824:	4613      	mov	r3, r2
 800c826:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c828:	88fb      	ldrh	r3, [r7, #6]
 800c82a:	009b      	lsls	r3, r3, #2
 800c82c:	4618      	mov	r0, r3
 800c82e:	f001 fca5 	bl	800e17c <pvPortMalloc>
 800c832:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d00e      	beq.n	800c858 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c83a:	20a8      	movs	r0, #168	@ 0xa8
 800c83c:	f001 fc9e 	bl	800e17c <pvPortMalloc>
 800c840:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c842:	69fb      	ldr	r3, [r7, #28]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d003      	beq.n	800c850 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	697a      	ldr	r2, [r7, #20]
 800c84c:	631a      	str	r2, [r3, #48]	@ 0x30
 800c84e:	e005      	b.n	800c85c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c850:	6978      	ldr	r0, [r7, #20]
 800c852:	f001 fd61 	bl	800e318 <vPortFree>
 800c856:	e001      	b.n	800c85c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c858:	2300      	movs	r3, #0
 800c85a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d017      	beq.n	800c892 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c862:	69fb      	ldr	r3, [r7, #28]
 800c864:	2200      	movs	r2, #0
 800c866:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c86a:	88fa      	ldrh	r2, [r7, #6]
 800c86c:	2300      	movs	r3, #0
 800c86e:	9303      	str	r3, [sp, #12]
 800c870:	69fb      	ldr	r3, [r7, #28]
 800c872:	9302      	str	r3, [sp, #8]
 800c874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c876:	9301      	str	r3, [sp, #4]
 800c878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c87a:	9300      	str	r3, [sp, #0]
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	68b9      	ldr	r1, [r7, #8]
 800c880:	68f8      	ldr	r0, [r7, #12]
 800c882:	f000 f80f 	bl	800c8a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c886:	69f8      	ldr	r0, [r7, #28]
 800c888:	f000 f8b4 	bl	800c9f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c88c:	2301      	movs	r3, #1
 800c88e:	61bb      	str	r3, [r7, #24]
 800c890:	e002      	b.n	800c898 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c892:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c896:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c898:	69bb      	ldr	r3, [r7, #24]
	}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3720      	adds	r7, #32
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
	...

0800c8a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b088      	sub	sp, #32
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	607a      	str	r2, [r7, #4]
 800c8b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8b4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	009b      	lsls	r3, r3, #2
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	21a5      	movs	r1, #165	@ 0xa5
 800c8be:	f00e fd6f 	bl	801b3a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c8c6:	6879      	ldr	r1, [r7, #4]
 800c8c8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800c8cc:	440b      	add	r3, r1
 800c8ce:	009b      	lsls	r3, r3, #2
 800c8d0:	4413      	add	r3, r2
 800c8d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c8d4:	69bb      	ldr	r3, [r7, #24]
 800c8d6:	f023 0307 	bic.w	r3, r3, #7
 800c8da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c8dc:	69bb      	ldr	r3, [r7, #24]
 800c8de:	f003 0307 	and.w	r3, r3, #7
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d00b      	beq.n	800c8fe <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8ea:	f383 8811 	msr	BASEPRI, r3
 800c8ee:	f3bf 8f6f 	isb	sy
 800c8f2:	f3bf 8f4f 	dsb	sy
 800c8f6:	617b      	str	r3, [r7, #20]
}
 800c8f8:	bf00      	nop
 800c8fa:	bf00      	nop
 800c8fc:	e7fd      	b.n	800c8fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d01f      	beq.n	800c944 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c904:	2300      	movs	r3, #0
 800c906:	61fb      	str	r3, [r7, #28]
 800c908:	e012      	b.n	800c930 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c90a:	68ba      	ldr	r2, [r7, #8]
 800c90c:	69fb      	ldr	r3, [r7, #28]
 800c90e:	4413      	add	r3, r2
 800c910:	7819      	ldrb	r1, [r3, #0]
 800c912:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c914:	69fb      	ldr	r3, [r7, #28]
 800c916:	4413      	add	r3, r2
 800c918:	3334      	adds	r3, #52	@ 0x34
 800c91a:	460a      	mov	r2, r1
 800c91c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c91e:	68ba      	ldr	r2, [r7, #8]
 800c920:	69fb      	ldr	r3, [r7, #28]
 800c922:	4413      	add	r3, r2
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d006      	beq.n	800c938 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c92a:	69fb      	ldr	r3, [r7, #28]
 800c92c:	3301      	adds	r3, #1
 800c92e:	61fb      	str	r3, [r7, #28]
 800c930:	69fb      	ldr	r3, [r7, #28]
 800c932:	2b0f      	cmp	r3, #15
 800c934:	d9e9      	bls.n	800c90a <prvInitialiseNewTask+0x66>
 800c936:	e000      	b.n	800c93a <prvInitialiseNewTask+0x96>
			{
				break;
 800c938:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c93c:	2200      	movs	r2, #0
 800c93e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c942:	e003      	b.n	800c94c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c946:	2200      	movs	r2, #0
 800c948:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c94c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c94e:	2b37      	cmp	r3, #55	@ 0x37
 800c950:	d901      	bls.n	800c956 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c952:	2337      	movs	r3, #55	@ 0x37
 800c954:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c958:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c95a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c95c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c95e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c960:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c964:	2200      	movs	r2, #0
 800c966:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c96a:	3304      	adds	r3, #4
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7ff f965 	bl	800bc3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c974:	3318      	adds	r3, #24
 800c976:	4618      	mov	r0, r3
 800c978:	f7ff f960 	bl	800bc3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c97c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c97e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c980:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c984:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c98a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c98c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c98e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c990:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c994:	2200      	movs	r2, #0
 800c996:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c99c:	2200      	movs	r2, #0
 800c99e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9a4:	3354      	adds	r3, #84	@ 0x54
 800c9a6:	224c      	movs	r2, #76	@ 0x4c
 800c9a8:	2100      	movs	r1, #0
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f00e fcf8 	bl	801b3a0 <memset>
 800c9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9b2:	4a0d      	ldr	r2, [pc, #52]	@ (800c9e8 <prvInitialiseNewTask+0x144>)
 800c9b4:	659a      	str	r2, [r3, #88]	@ 0x58
 800c9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9b8:	4a0c      	ldr	r2, [pc, #48]	@ (800c9ec <prvInitialiseNewTask+0x148>)
 800c9ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c9bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9be:	4a0c      	ldr	r2, [pc, #48]	@ (800c9f0 <prvInitialiseNewTask+0x14c>)
 800c9c0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c9c2:	683a      	ldr	r2, [r7, #0]
 800c9c4:	68f9      	ldr	r1, [r7, #12]
 800c9c6:	69b8      	ldr	r0, [r7, #24]
 800c9c8:	f001 f982 	bl	800dcd0 <pxPortInitialiseStack>
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c9d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d002      	beq.n	800c9de <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c9d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9de:	bf00      	nop
 800c9e0:	3720      	adds	r7, #32
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	2406871c 	.word	0x2406871c
 800c9ec:	24068784 	.word	0x24068784
 800c9f0:	240687ec 	.word	0x240687ec

0800c9f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c9fc:	f001 fa9c 	bl	800df38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ca00:	4b2d      	ldr	r3, [pc, #180]	@ (800cab8 <prvAddNewTaskToReadyList+0xc4>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	3301      	adds	r3, #1
 800ca06:	4a2c      	ldr	r2, [pc, #176]	@ (800cab8 <prvAddNewTaskToReadyList+0xc4>)
 800ca08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ca0a:	4b2c      	ldr	r3, [pc, #176]	@ (800cabc <prvAddNewTaskToReadyList+0xc8>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d109      	bne.n	800ca26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ca12:	4a2a      	ldr	r2, [pc, #168]	@ (800cabc <prvAddNewTaskToReadyList+0xc8>)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ca18:	4b27      	ldr	r3, [pc, #156]	@ (800cab8 <prvAddNewTaskToReadyList+0xc4>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d110      	bne.n	800ca42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ca20:	f000 fc56 	bl	800d2d0 <prvInitialiseTaskLists>
 800ca24:	e00d      	b.n	800ca42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ca26:	4b26      	ldr	r3, [pc, #152]	@ (800cac0 <prvAddNewTaskToReadyList+0xcc>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d109      	bne.n	800ca42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ca2e:	4b23      	ldr	r3, [pc, #140]	@ (800cabc <prvAddNewTaskToReadyList+0xc8>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d802      	bhi.n	800ca42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ca3c:	4a1f      	ldr	r2, [pc, #124]	@ (800cabc <prvAddNewTaskToReadyList+0xc8>)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ca42:	4b20      	ldr	r3, [pc, #128]	@ (800cac4 <prvAddNewTaskToReadyList+0xd0>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	3301      	adds	r3, #1
 800ca48:	4a1e      	ldr	r2, [pc, #120]	@ (800cac4 <prvAddNewTaskToReadyList+0xd0>)
 800ca4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ca4c:	4b1d      	ldr	r3, [pc, #116]	@ (800cac4 <prvAddNewTaskToReadyList+0xd0>)
 800ca4e:	681a      	ldr	r2, [r3, #0]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca58:	4b1b      	ldr	r3, [pc, #108]	@ (800cac8 <prvAddNewTaskToReadyList+0xd4>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d903      	bls.n	800ca68 <prvAddNewTaskToReadyList+0x74>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca64:	4a18      	ldr	r2, [pc, #96]	@ (800cac8 <prvAddNewTaskToReadyList+0xd4>)
 800ca66:	6013      	str	r3, [r2, #0]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca6c:	4613      	mov	r3, r2
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	4413      	add	r3, r2
 800ca72:	009b      	lsls	r3, r3, #2
 800ca74:	4a15      	ldr	r2, [pc, #84]	@ (800cacc <prvAddNewTaskToReadyList+0xd8>)
 800ca76:	441a      	add	r2, r3
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	3304      	adds	r3, #4
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	4610      	mov	r0, r2
 800ca80:	f7ff f8e9 	bl	800bc56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ca84:	f001 fa8a 	bl	800df9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ca88:	4b0d      	ldr	r3, [pc, #52]	@ (800cac0 <prvAddNewTaskToReadyList+0xcc>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d00e      	beq.n	800caae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ca90:	4b0a      	ldr	r3, [pc, #40]	@ (800cabc <prvAddNewTaskToReadyList+0xc8>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d207      	bcs.n	800caae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ca9e:	4b0c      	ldr	r3, [pc, #48]	@ (800cad0 <prvAddNewTaskToReadyList+0xdc>)
 800caa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800caa4:	601a      	str	r2, [r3, #0]
 800caa6:	f3bf 8f4f 	dsb	sy
 800caaa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800caae:	bf00      	nop
 800cab0:	3708      	adds	r7, #8
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	24032d48 	.word	0x24032d48
 800cabc:	24032874 	.word	0x24032874
 800cac0:	24032d54 	.word	0x24032d54
 800cac4:	24032d64 	.word	0x24032d64
 800cac8:	24032d50 	.word	0x24032d50
 800cacc:	24032878 	.word	0x24032878
 800cad0:	e000ed04 	.word	0xe000ed04

0800cad4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b084      	sub	sp, #16
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cadc:	2300      	movs	r3, #0
 800cade:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d018      	beq.n	800cb18 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cae6:	4b14      	ldr	r3, [pc, #80]	@ (800cb38 <vTaskDelay+0x64>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d00b      	beq.n	800cb06 <vTaskDelay+0x32>
	__asm volatile
 800caee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caf2:	f383 8811 	msr	BASEPRI, r3
 800caf6:	f3bf 8f6f 	isb	sy
 800cafa:	f3bf 8f4f 	dsb	sy
 800cafe:	60bb      	str	r3, [r7, #8]
}
 800cb00:	bf00      	nop
 800cb02:	bf00      	nop
 800cb04:	e7fd      	b.n	800cb02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cb06:	f000 f88b 	bl	800cc20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 fd31 	bl	800d574 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cb12:	f000 f893 	bl	800cc3c <xTaskResumeAll>
 800cb16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d107      	bne.n	800cb2e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800cb1e:	4b07      	ldr	r3, [pc, #28]	@ (800cb3c <vTaskDelay+0x68>)
 800cb20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb24:	601a      	str	r2, [r3, #0]
 800cb26:	f3bf 8f4f 	dsb	sy
 800cb2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cb2e:	bf00      	nop
 800cb30:	3710      	adds	r7, #16
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	24032d70 	.word	0x24032d70
 800cb3c:	e000ed04 	.word	0xe000ed04

0800cb40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b08a      	sub	sp, #40	@ 0x28
 800cb44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cb46:	2300      	movs	r3, #0
 800cb48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cb4e:	463a      	mov	r2, r7
 800cb50:	1d39      	adds	r1, r7, #4
 800cb52:	f107 0308 	add.w	r3, r7, #8
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7ff f81c 	bl	800bb94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cb5c:	6839      	ldr	r1, [r7, #0]
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	68ba      	ldr	r2, [r7, #8]
 800cb62:	9202      	str	r2, [sp, #8]
 800cb64:	9301      	str	r3, [sp, #4]
 800cb66:	2300      	movs	r3, #0
 800cb68:	9300      	str	r3, [sp, #0]
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	460a      	mov	r2, r1
 800cb6e:	4924      	ldr	r1, [pc, #144]	@ (800cc00 <vTaskStartScheduler+0xc0>)
 800cb70:	4824      	ldr	r0, [pc, #144]	@ (800cc04 <vTaskStartScheduler+0xc4>)
 800cb72:	f7ff fdf1 	bl	800c758 <xTaskCreateStatic>
 800cb76:	4603      	mov	r3, r0
 800cb78:	4a23      	ldr	r2, [pc, #140]	@ (800cc08 <vTaskStartScheduler+0xc8>)
 800cb7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cb7c:	4b22      	ldr	r3, [pc, #136]	@ (800cc08 <vTaskStartScheduler+0xc8>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d002      	beq.n	800cb8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cb84:	2301      	movs	r3, #1
 800cb86:	617b      	str	r3, [r7, #20]
 800cb88:	e001      	b.n	800cb8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d102      	bne.n	800cb9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cb94:	f000 fd42 	bl	800d61c <xTimerCreateTimerTask>
 800cb98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	d11b      	bne.n	800cbd8 <vTaskStartScheduler+0x98>
	__asm volatile
 800cba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cba4:	f383 8811 	msr	BASEPRI, r3
 800cba8:	f3bf 8f6f 	isb	sy
 800cbac:	f3bf 8f4f 	dsb	sy
 800cbb0:	613b      	str	r3, [r7, #16]
}
 800cbb2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cbb4:	4b15      	ldr	r3, [pc, #84]	@ (800cc0c <vTaskStartScheduler+0xcc>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	3354      	adds	r3, #84	@ 0x54
 800cbba:	4a15      	ldr	r2, [pc, #84]	@ (800cc10 <vTaskStartScheduler+0xd0>)
 800cbbc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cbbe:	4b15      	ldr	r3, [pc, #84]	@ (800cc14 <vTaskStartScheduler+0xd4>)
 800cbc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cbc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cbc6:	4b14      	ldr	r3, [pc, #80]	@ (800cc18 <vTaskStartScheduler+0xd8>)
 800cbc8:	2201      	movs	r2, #1
 800cbca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cbcc:	4b13      	ldr	r3, [pc, #76]	@ (800cc1c <vTaskStartScheduler+0xdc>)
 800cbce:	2200      	movs	r2, #0
 800cbd0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cbd2:	f001 f90d 	bl	800ddf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cbd6:	e00f      	b.n	800cbf8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cbde:	d10b      	bne.n	800cbf8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800cbe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbe4:	f383 8811 	msr	BASEPRI, r3
 800cbe8:	f3bf 8f6f 	isb	sy
 800cbec:	f3bf 8f4f 	dsb	sy
 800cbf0:	60fb      	str	r3, [r7, #12]
}
 800cbf2:	bf00      	nop
 800cbf4:	bf00      	nop
 800cbf6:	e7fd      	b.n	800cbf4 <vTaskStartScheduler+0xb4>
}
 800cbf8:	bf00      	nop
 800cbfa:	3718      	adds	r7, #24
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	0801c2a0 	.word	0x0801c2a0
 800cc04:	0800d2a1 	.word	0x0800d2a1
 800cc08:	24032d6c 	.word	0x24032d6c
 800cc0c:	24032874 	.word	0x24032874
 800cc10:	24000294 	.word	0x24000294
 800cc14:	24032d68 	.word	0x24032d68
 800cc18:	24032d54 	.word	0x24032d54
 800cc1c:	24032d4c 	.word	0x24032d4c

0800cc20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cc20:	b480      	push	{r7}
 800cc22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cc24:	4b04      	ldr	r3, [pc, #16]	@ (800cc38 <vTaskSuspendAll+0x18>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	3301      	adds	r3, #1
 800cc2a:	4a03      	ldr	r2, [pc, #12]	@ (800cc38 <vTaskSuspendAll+0x18>)
 800cc2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cc2e:	bf00      	nop
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr
 800cc38:	24032d70 	.word	0x24032d70

0800cc3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cc42:	2300      	movs	r3, #0
 800cc44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cc46:	2300      	movs	r3, #0
 800cc48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cc4a:	4b42      	ldr	r3, [pc, #264]	@ (800cd54 <xTaskResumeAll+0x118>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d10b      	bne.n	800cc6a <xTaskResumeAll+0x2e>
	__asm volatile
 800cc52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc56:	f383 8811 	msr	BASEPRI, r3
 800cc5a:	f3bf 8f6f 	isb	sy
 800cc5e:	f3bf 8f4f 	dsb	sy
 800cc62:	603b      	str	r3, [r7, #0]
}
 800cc64:	bf00      	nop
 800cc66:	bf00      	nop
 800cc68:	e7fd      	b.n	800cc66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cc6a:	f001 f965 	bl	800df38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cc6e:	4b39      	ldr	r3, [pc, #228]	@ (800cd54 <xTaskResumeAll+0x118>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	3b01      	subs	r3, #1
 800cc74:	4a37      	ldr	r2, [pc, #220]	@ (800cd54 <xTaskResumeAll+0x118>)
 800cc76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc78:	4b36      	ldr	r3, [pc, #216]	@ (800cd54 <xTaskResumeAll+0x118>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d162      	bne.n	800cd46 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cc80:	4b35      	ldr	r3, [pc, #212]	@ (800cd58 <xTaskResumeAll+0x11c>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d05e      	beq.n	800cd46 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc88:	e02f      	b.n	800ccea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc8a:	4b34      	ldr	r3, [pc, #208]	@ (800cd5c <xTaskResumeAll+0x120>)
 800cc8c:	68db      	ldr	r3, [r3, #12]
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	3318      	adds	r3, #24
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7ff f83a 	bl	800bd10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	3304      	adds	r3, #4
 800cca0:	4618      	mov	r0, r3
 800cca2:	f7ff f835 	bl	800bd10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccaa:	4b2d      	ldr	r3, [pc, #180]	@ (800cd60 <xTaskResumeAll+0x124>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d903      	bls.n	800ccba <xTaskResumeAll+0x7e>
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccb6:	4a2a      	ldr	r2, [pc, #168]	@ (800cd60 <xTaskResumeAll+0x124>)
 800ccb8:	6013      	str	r3, [r2, #0]
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccbe:	4613      	mov	r3, r2
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	4413      	add	r3, r2
 800ccc4:	009b      	lsls	r3, r3, #2
 800ccc6:	4a27      	ldr	r2, [pc, #156]	@ (800cd64 <xTaskResumeAll+0x128>)
 800ccc8:	441a      	add	r2, r3
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	3304      	adds	r3, #4
 800ccce:	4619      	mov	r1, r3
 800ccd0:	4610      	mov	r0, r2
 800ccd2:	f7fe ffc0 	bl	800bc56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccda:	4b23      	ldr	r3, [pc, #140]	@ (800cd68 <xTaskResumeAll+0x12c>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d302      	bcc.n	800ccea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800cce4:	4b21      	ldr	r3, [pc, #132]	@ (800cd6c <xTaskResumeAll+0x130>)
 800cce6:	2201      	movs	r2, #1
 800cce8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ccea:	4b1c      	ldr	r3, [pc, #112]	@ (800cd5c <xTaskResumeAll+0x120>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d1cb      	bne.n	800cc8a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d001      	beq.n	800ccfc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ccf8:	f000 fb8e 	bl	800d418 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ccfc:	4b1c      	ldr	r3, [pc, #112]	@ (800cd70 <xTaskResumeAll+0x134>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d010      	beq.n	800cd2a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cd08:	f000 f846 	bl	800cd98 <xTaskIncrementTick>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d002      	beq.n	800cd18 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800cd12:	4b16      	ldr	r3, [pc, #88]	@ (800cd6c <xTaskResumeAll+0x130>)
 800cd14:	2201      	movs	r2, #1
 800cd16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	3b01      	subs	r3, #1
 800cd1c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d1f1      	bne.n	800cd08 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800cd24:	4b12      	ldr	r3, [pc, #72]	@ (800cd70 <xTaskResumeAll+0x134>)
 800cd26:	2200      	movs	r2, #0
 800cd28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cd2a:	4b10      	ldr	r3, [pc, #64]	@ (800cd6c <xTaskResumeAll+0x130>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d009      	beq.n	800cd46 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cd32:	2301      	movs	r3, #1
 800cd34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cd36:	4b0f      	ldr	r3, [pc, #60]	@ (800cd74 <xTaskResumeAll+0x138>)
 800cd38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd3c:	601a      	str	r2, [r3, #0]
 800cd3e:	f3bf 8f4f 	dsb	sy
 800cd42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cd46:	f001 f929 	bl	800df9c <vPortExitCritical>

	return xAlreadyYielded;
 800cd4a:	68bb      	ldr	r3, [r7, #8]
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3710      	adds	r7, #16
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}
 800cd54:	24032d70 	.word	0x24032d70
 800cd58:	24032d48 	.word	0x24032d48
 800cd5c:	24032d08 	.word	0x24032d08
 800cd60:	24032d50 	.word	0x24032d50
 800cd64:	24032878 	.word	0x24032878
 800cd68:	24032874 	.word	0x24032874
 800cd6c:	24032d5c 	.word	0x24032d5c
 800cd70:	24032d58 	.word	0x24032d58
 800cd74:	e000ed04 	.word	0xe000ed04

0800cd78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b083      	sub	sp, #12
 800cd7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cd7e:	4b05      	ldr	r3, [pc, #20]	@ (800cd94 <xTaskGetTickCount+0x1c>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cd84:	687b      	ldr	r3, [r7, #4]
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	370c      	adds	r7, #12
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd90:	4770      	bx	lr
 800cd92:	bf00      	nop
 800cd94:	24032d4c 	.word	0x24032d4c

0800cd98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b086      	sub	sp, #24
 800cd9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cda2:	4b4f      	ldr	r3, [pc, #316]	@ (800cee0 <xTaskIncrementTick+0x148>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	f040 8090 	bne.w	800cecc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cdac:	4b4d      	ldr	r3, [pc, #308]	@ (800cee4 <xTaskIncrementTick+0x14c>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cdb4:	4a4b      	ldr	r2, [pc, #300]	@ (800cee4 <xTaskIncrementTick+0x14c>)
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d121      	bne.n	800ce04 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cdc0:	4b49      	ldr	r3, [pc, #292]	@ (800cee8 <xTaskIncrementTick+0x150>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d00b      	beq.n	800cde2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800cdca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdce:	f383 8811 	msr	BASEPRI, r3
 800cdd2:	f3bf 8f6f 	isb	sy
 800cdd6:	f3bf 8f4f 	dsb	sy
 800cdda:	603b      	str	r3, [r7, #0]
}
 800cddc:	bf00      	nop
 800cdde:	bf00      	nop
 800cde0:	e7fd      	b.n	800cdde <xTaskIncrementTick+0x46>
 800cde2:	4b41      	ldr	r3, [pc, #260]	@ (800cee8 <xTaskIncrementTick+0x150>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	60fb      	str	r3, [r7, #12]
 800cde8:	4b40      	ldr	r3, [pc, #256]	@ (800ceec <xTaskIncrementTick+0x154>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a3e      	ldr	r2, [pc, #248]	@ (800cee8 <xTaskIncrementTick+0x150>)
 800cdee:	6013      	str	r3, [r2, #0]
 800cdf0:	4a3e      	ldr	r2, [pc, #248]	@ (800ceec <xTaskIncrementTick+0x154>)
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	6013      	str	r3, [r2, #0]
 800cdf6:	4b3e      	ldr	r3, [pc, #248]	@ (800cef0 <xTaskIncrementTick+0x158>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	4a3c      	ldr	r2, [pc, #240]	@ (800cef0 <xTaskIncrementTick+0x158>)
 800cdfe:	6013      	str	r3, [r2, #0]
 800ce00:	f000 fb0a 	bl	800d418 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ce04:	4b3b      	ldr	r3, [pc, #236]	@ (800cef4 <xTaskIncrementTick+0x15c>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	693a      	ldr	r2, [r7, #16]
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	d349      	bcc.n	800cea2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce0e:	4b36      	ldr	r3, [pc, #216]	@ (800cee8 <xTaskIncrementTick+0x150>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d104      	bne.n	800ce22 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce18:	4b36      	ldr	r3, [pc, #216]	@ (800cef4 <xTaskIncrementTick+0x15c>)
 800ce1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ce1e:	601a      	str	r2, [r3, #0]
					break;
 800ce20:	e03f      	b.n	800cea2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce22:	4b31      	ldr	r3, [pc, #196]	@ (800cee8 <xTaskIncrementTick+0x150>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	68db      	ldr	r3, [r3, #12]
 800ce28:	68db      	ldr	r3, [r3, #12]
 800ce2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ce32:	693a      	ldr	r2, [r7, #16]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d203      	bcs.n	800ce42 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ce3a:	4a2e      	ldr	r2, [pc, #184]	@ (800cef4 <xTaskIncrementTick+0x15c>)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ce40:	e02f      	b.n	800cea2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	3304      	adds	r3, #4
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7fe ff62 	bl	800bd10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d004      	beq.n	800ce5e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	3318      	adds	r3, #24
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f7fe ff59 	bl	800bd10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce62:	4b25      	ldr	r3, [pc, #148]	@ (800cef8 <xTaskIncrementTick+0x160>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d903      	bls.n	800ce72 <xTaskIncrementTick+0xda>
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce6e:	4a22      	ldr	r2, [pc, #136]	@ (800cef8 <xTaskIncrementTick+0x160>)
 800ce70:	6013      	str	r3, [r2, #0]
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce76:	4613      	mov	r3, r2
 800ce78:	009b      	lsls	r3, r3, #2
 800ce7a:	4413      	add	r3, r2
 800ce7c:	009b      	lsls	r3, r3, #2
 800ce7e:	4a1f      	ldr	r2, [pc, #124]	@ (800cefc <xTaskIncrementTick+0x164>)
 800ce80:	441a      	add	r2, r3
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	3304      	adds	r3, #4
 800ce86:	4619      	mov	r1, r3
 800ce88:	4610      	mov	r0, r2
 800ce8a:	f7fe fee4 	bl	800bc56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce92:	4b1b      	ldr	r3, [pc, #108]	@ (800cf00 <xTaskIncrementTick+0x168>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d3b8      	bcc.n	800ce0e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cea0:	e7b5      	b.n	800ce0e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cea2:	4b17      	ldr	r3, [pc, #92]	@ (800cf00 <xTaskIncrementTick+0x168>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cea8:	4914      	ldr	r1, [pc, #80]	@ (800cefc <xTaskIncrementTick+0x164>)
 800ceaa:	4613      	mov	r3, r2
 800ceac:	009b      	lsls	r3, r3, #2
 800ceae:	4413      	add	r3, r2
 800ceb0:	009b      	lsls	r3, r3, #2
 800ceb2:	440b      	add	r3, r1
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	d901      	bls.n	800cebe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ceba:	2301      	movs	r3, #1
 800cebc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cebe:	4b11      	ldr	r3, [pc, #68]	@ (800cf04 <xTaskIncrementTick+0x16c>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d007      	beq.n	800ced6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800cec6:	2301      	movs	r3, #1
 800cec8:	617b      	str	r3, [r7, #20]
 800ceca:	e004      	b.n	800ced6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cecc:	4b0e      	ldr	r3, [pc, #56]	@ (800cf08 <xTaskIncrementTick+0x170>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	3301      	adds	r3, #1
 800ced2:	4a0d      	ldr	r2, [pc, #52]	@ (800cf08 <xTaskIncrementTick+0x170>)
 800ced4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ced6:	697b      	ldr	r3, [r7, #20]
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3718      	adds	r7, #24
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}
 800cee0:	24032d70 	.word	0x24032d70
 800cee4:	24032d4c 	.word	0x24032d4c
 800cee8:	24032d00 	.word	0x24032d00
 800ceec:	24032d04 	.word	0x24032d04
 800cef0:	24032d60 	.word	0x24032d60
 800cef4:	24032d68 	.word	0x24032d68
 800cef8:	24032d50 	.word	0x24032d50
 800cefc:	24032878 	.word	0x24032878
 800cf00:	24032874 	.word	0x24032874
 800cf04:	24032d5c 	.word	0x24032d5c
 800cf08:	24032d58 	.word	0x24032d58

0800cf0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b085      	sub	sp, #20
 800cf10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cf12:	4b2b      	ldr	r3, [pc, #172]	@ (800cfc0 <vTaskSwitchContext+0xb4>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d003      	beq.n	800cf22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cf1a:	4b2a      	ldr	r3, [pc, #168]	@ (800cfc4 <vTaskSwitchContext+0xb8>)
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cf20:	e047      	b.n	800cfb2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800cf22:	4b28      	ldr	r3, [pc, #160]	@ (800cfc4 <vTaskSwitchContext+0xb8>)
 800cf24:	2200      	movs	r2, #0
 800cf26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf28:	4b27      	ldr	r3, [pc, #156]	@ (800cfc8 <vTaskSwitchContext+0xbc>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	60fb      	str	r3, [r7, #12]
 800cf2e:	e011      	b.n	800cf54 <vTaskSwitchContext+0x48>
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d10b      	bne.n	800cf4e <vTaskSwitchContext+0x42>
	__asm volatile
 800cf36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf3a:	f383 8811 	msr	BASEPRI, r3
 800cf3e:	f3bf 8f6f 	isb	sy
 800cf42:	f3bf 8f4f 	dsb	sy
 800cf46:	607b      	str	r3, [r7, #4]
}
 800cf48:	bf00      	nop
 800cf4a:	bf00      	nop
 800cf4c:	e7fd      	b.n	800cf4a <vTaskSwitchContext+0x3e>
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	3b01      	subs	r3, #1
 800cf52:	60fb      	str	r3, [r7, #12]
 800cf54:	491d      	ldr	r1, [pc, #116]	@ (800cfcc <vTaskSwitchContext+0xc0>)
 800cf56:	68fa      	ldr	r2, [r7, #12]
 800cf58:	4613      	mov	r3, r2
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	4413      	add	r3, r2
 800cf5e:	009b      	lsls	r3, r3, #2
 800cf60:	440b      	add	r3, r1
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d0e3      	beq.n	800cf30 <vTaskSwitchContext+0x24>
 800cf68:	68fa      	ldr	r2, [r7, #12]
 800cf6a:	4613      	mov	r3, r2
 800cf6c:	009b      	lsls	r3, r3, #2
 800cf6e:	4413      	add	r3, r2
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	4a16      	ldr	r2, [pc, #88]	@ (800cfcc <vTaskSwitchContext+0xc0>)
 800cf74:	4413      	add	r3, r2
 800cf76:	60bb      	str	r3, [r7, #8]
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	685b      	ldr	r3, [r3, #4]
 800cf7c:	685a      	ldr	r2, [r3, #4]
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	605a      	str	r2, [r3, #4]
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	685a      	ldr	r2, [r3, #4]
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	3308      	adds	r3, #8
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d104      	bne.n	800cf98 <vTaskSwitchContext+0x8c>
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	685a      	ldr	r2, [r3, #4]
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	605a      	str	r2, [r3, #4]
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	68db      	ldr	r3, [r3, #12]
 800cf9e:	4a0c      	ldr	r2, [pc, #48]	@ (800cfd0 <vTaskSwitchContext+0xc4>)
 800cfa0:	6013      	str	r3, [r2, #0]
 800cfa2:	4a09      	ldr	r2, [pc, #36]	@ (800cfc8 <vTaskSwitchContext+0xbc>)
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cfa8:	4b09      	ldr	r3, [pc, #36]	@ (800cfd0 <vTaskSwitchContext+0xc4>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	3354      	adds	r3, #84	@ 0x54
 800cfae:	4a09      	ldr	r2, [pc, #36]	@ (800cfd4 <vTaskSwitchContext+0xc8>)
 800cfb0:	6013      	str	r3, [r2, #0]
}
 800cfb2:	bf00      	nop
 800cfb4:	3714      	adds	r7, #20
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr
 800cfbe:	bf00      	nop
 800cfc0:	24032d70 	.word	0x24032d70
 800cfc4:	24032d5c 	.word	0x24032d5c
 800cfc8:	24032d50 	.word	0x24032d50
 800cfcc:	24032878 	.word	0x24032878
 800cfd0:	24032874 	.word	0x24032874
 800cfd4:	24000294 	.word	0x24000294

0800cfd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d10b      	bne.n	800d000 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800cfe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfec:	f383 8811 	msr	BASEPRI, r3
 800cff0:	f3bf 8f6f 	isb	sy
 800cff4:	f3bf 8f4f 	dsb	sy
 800cff8:	60fb      	str	r3, [r7, #12]
}
 800cffa:	bf00      	nop
 800cffc:	bf00      	nop
 800cffe:	e7fd      	b.n	800cffc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d000:	4b07      	ldr	r3, [pc, #28]	@ (800d020 <vTaskPlaceOnEventList+0x48>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	3318      	adds	r3, #24
 800d006:	4619      	mov	r1, r3
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f7fe fe48 	bl	800bc9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d00e:	2101      	movs	r1, #1
 800d010:	6838      	ldr	r0, [r7, #0]
 800d012:	f000 faaf 	bl	800d574 <prvAddCurrentTaskToDelayedList>
}
 800d016:	bf00      	nop
 800d018:	3710      	adds	r7, #16
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	bf00      	nop
 800d020:	24032874 	.word	0x24032874

0800d024 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d024:	b580      	push	{r7, lr}
 800d026:	b086      	sub	sp, #24
 800d028:	af00      	add	r7, sp, #0
 800d02a:	60f8      	str	r0, [r7, #12]
 800d02c:	60b9      	str	r1, [r7, #8]
 800d02e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d10b      	bne.n	800d04e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d03a:	f383 8811 	msr	BASEPRI, r3
 800d03e:	f3bf 8f6f 	isb	sy
 800d042:	f3bf 8f4f 	dsb	sy
 800d046:	617b      	str	r3, [r7, #20]
}
 800d048:	bf00      	nop
 800d04a:	bf00      	nop
 800d04c:	e7fd      	b.n	800d04a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d04e:	4b0a      	ldr	r3, [pc, #40]	@ (800d078 <vTaskPlaceOnEventListRestricted+0x54>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	3318      	adds	r3, #24
 800d054:	4619      	mov	r1, r3
 800d056:	68f8      	ldr	r0, [r7, #12]
 800d058:	f7fe fdfd 	bl	800bc56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d002      	beq.n	800d068 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d062:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d066:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d068:	6879      	ldr	r1, [r7, #4]
 800d06a:	68b8      	ldr	r0, [r7, #8]
 800d06c:	f000 fa82 	bl	800d574 <prvAddCurrentTaskToDelayedList>
	}
 800d070:	bf00      	nop
 800d072:	3718      	adds	r7, #24
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}
 800d078:	24032874 	.word	0x24032874

0800d07c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b086      	sub	sp, #24
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	68db      	ldr	r3, [r3, #12]
 800d088:	68db      	ldr	r3, [r3, #12]
 800d08a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d10b      	bne.n	800d0aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d096:	f383 8811 	msr	BASEPRI, r3
 800d09a:	f3bf 8f6f 	isb	sy
 800d09e:	f3bf 8f4f 	dsb	sy
 800d0a2:	60fb      	str	r3, [r7, #12]
}
 800d0a4:	bf00      	nop
 800d0a6:	bf00      	nop
 800d0a8:	e7fd      	b.n	800d0a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	3318      	adds	r3, #24
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7fe fe2e 	bl	800bd10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0b4:	4b1d      	ldr	r3, [pc, #116]	@ (800d12c <xTaskRemoveFromEventList+0xb0>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d11d      	bne.n	800d0f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	3304      	adds	r3, #4
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f7fe fe25 	bl	800bd10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0ca:	4b19      	ldr	r3, [pc, #100]	@ (800d130 <xTaskRemoveFromEventList+0xb4>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d903      	bls.n	800d0da <xTaskRemoveFromEventList+0x5e>
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0d6:	4a16      	ldr	r2, [pc, #88]	@ (800d130 <xTaskRemoveFromEventList+0xb4>)
 800d0d8:	6013      	str	r3, [r2, #0]
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0de:	4613      	mov	r3, r2
 800d0e0:	009b      	lsls	r3, r3, #2
 800d0e2:	4413      	add	r3, r2
 800d0e4:	009b      	lsls	r3, r3, #2
 800d0e6:	4a13      	ldr	r2, [pc, #76]	@ (800d134 <xTaskRemoveFromEventList+0xb8>)
 800d0e8:	441a      	add	r2, r3
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	3304      	adds	r3, #4
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	4610      	mov	r0, r2
 800d0f2:	f7fe fdb0 	bl	800bc56 <vListInsertEnd>
 800d0f6:	e005      	b.n	800d104 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	3318      	adds	r3, #24
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	480e      	ldr	r0, [pc, #56]	@ (800d138 <xTaskRemoveFromEventList+0xbc>)
 800d100:	f7fe fda9 	bl	800bc56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d108:	4b0c      	ldr	r3, [pc, #48]	@ (800d13c <xTaskRemoveFromEventList+0xc0>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d10e:	429a      	cmp	r2, r3
 800d110:	d905      	bls.n	800d11e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d112:	2301      	movs	r3, #1
 800d114:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d116:	4b0a      	ldr	r3, [pc, #40]	@ (800d140 <xTaskRemoveFromEventList+0xc4>)
 800d118:	2201      	movs	r2, #1
 800d11a:	601a      	str	r2, [r3, #0]
 800d11c:	e001      	b.n	800d122 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d11e:	2300      	movs	r3, #0
 800d120:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d122:	697b      	ldr	r3, [r7, #20]
}
 800d124:	4618      	mov	r0, r3
 800d126:	3718      	adds	r7, #24
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}
 800d12c:	24032d70 	.word	0x24032d70
 800d130:	24032d50 	.word	0x24032d50
 800d134:	24032878 	.word	0x24032878
 800d138:	24032d08 	.word	0x24032d08
 800d13c:	24032874 	.word	0x24032874
 800d140:	24032d5c 	.word	0x24032d5c

0800d144 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b084      	sub	sp, #16
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d10b      	bne.n	800d16a <vTaskSetTimeOutState+0x26>
	__asm volatile
 800d152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d156:	f383 8811 	msr	BASEPRI, r3
 800d15a:	f3bf 8f6f 	isb	sy
 800d15e:	f3bf 8f4f 	dsb	sy
 800d162:	60fb      	str	r3, [r7, #12]
}
 800d164:	bf00      	nop
 800d166:	bf00      	nop
 800d168:	e7fd      	b.n	800d166 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800d16a:	f000 fee5 	bl	800df38 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d16e:	4b07      	ldr	r3, [pc, #28]	@ (800d18c <vTaskSetTimeOutState+0x48>)
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800d176:	4b06      	ldr	r3, [pc, #24]	@ (800d190 <vTaskSetTimeOutState+0x4c>)
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800d17e:	f000 ff0d 	bl	800df9c <vPortExitCritical>
}
 800d182:	bf00      	nop
 800d184:	3710      	adds	r7, #16
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	bf00      	nop
 800d18c:	24032d60 	.word	0x24032d60
 800d190:	24032d4c 	.word	0x24032d4c

0800d194 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d194:	b480      	push	{r7}
 800d196:	b083      	sub	sp, #12
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d19c:	4b06      	ldr	r3, [pc, #24]	@ (800d1b8 <vTaskInternalSetTimeOutState+0x24>)
 800d19e:	681a      	ldr	r2, [r3, #0]
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d1a4:	4b05      	ldr	r3, [pc, #20]	@ (800d1bc <vTaskInternalSetTimeOutState+0x28>)
 800d1a6:	681a      	ldr	r2, [r3, #0]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	605a      	str	r2, [r3, #4]
}
 800d1ac:	bf00      	nop
 800d1ae:	370c      	adds	r7, #12
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr
 800d1b8:	24032d60 	.word	0x24032d60
 800d1bc:	24032d4c 	.word	0x24032d4c

0800d1c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b088      	sub	sp, #32
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d10b      	bne.n	800d1e8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1d4:	f383 8811 	msr	BASEPRI, r3
 800d1d8:	f3bf 8f6f 	isb	sy
 800d1dc:	f3bf 8f4f 	dsb	sy
 800d1e0:	613b      	str	r3, [r7, #16]
}
 800d1e2:	bf00      	nop
 800d1e4:	bf00      	nop
 800d1e6:	e7fd      	b.n	800d1e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d10b      	bne.n	800d206 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1f2:	f383 8811 	msr	BASEPRI, r3
 800d1f6:	f3bf 8f6f 	isb	sy
 800d1fa:	f3bf 8f4f 	dsb	sy
 800d1fe:	60fb      	str	r3, [r7, #12]
}
 800d200:	bf00      	nop
 800d202:	bf00      	nop
 800d204:	e7fd      	b.n	800d202 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d206:	f000 fe97 	bl	800df38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d20a:	4b1d      	ldr	r3, [pc, #116]	@ (800d280 <xTaskCheckForTimeOut+0xc0>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	69ba      	ldr	r2, [r7, #24]
 800d216:	1ad3      	subs	r3, r2, r3
 800d218:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d222:	d102      	bne.n	800d22a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d224:	2300      	movs	r3, #0
 800d226:	61fb      	str	r3, [r7, #28]
 800d228:	e023      	b.n	800d272 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	4b15      	ldr	r3, [pc, #84]	@ (800d284 <xTaskCheckForTimeOut+0xc4>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	429a      	cmp	r2, r3
 800d234:	d007      	beq.n	800d246 <xTaskCheckForTimeOut+0x86>
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	685b      	ldr	r3, [r3, #4]
 800d23a:	69ba      	ldr	r2, [r7, #24]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d302      	bcc.n	800d246 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d240:	2301      	movs	r3, #1
 800d242:	61fb      	str	r3, [r7, #28]
 800d244:	e015      	b.n	800d272 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	697a      	ldr	r2, [r7, #20]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d20b      	bcs.n	800d268 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	1ad2      	subs	r2, r2, r3
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f7ff ff99 	bl	800d194 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d262:	2300      	movs	r3, #0
 800d264:	61fb      	str	r3, [r7, #28]
 800d266:	e004      	b.n	800d272 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	2200      	movs	r2, #0
 800d26c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d26e:	2301      	movs	r3, #1
 800d270:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d272:	f000 fe93 	bl	800df9c <vPortExitCritical>

	return xReturn;
 800d276:	69fb      	ldr	r3, [r7, #28]
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3720      	adds	r7, #32
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}
 800d280:	24032d4c 	.word	0x24032d4c
 800d284:	24032d60 	.word	0x24032d60

0800d288 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d288:	b480      	push	{r7}
 800d28a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d28c:	4b03      	ldr	r3, [pc, #12]	@ (800d29c <vTaskMissedYield+0x14>)
 800d28e:	2201      	movs	r2, #1
 800d290:	601a      	str	r2, [r3, #0]
}
 800d292:	bf00      	nop
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr
 800d29c:	24032d5c 	.word	0x24032d5c

0800d2a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b082      	sub	sp, #8
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d2a8:	f000 f852 	bl	800d350 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d2ac:	4b06      	ldr	r3, [pc, #24]	@ (800d2c8 <prvIdleTask+0x28>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d9f9      	bls.n	800d2a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d2b4:	4b05      	ldr	r3, [pc, #20]	@ (800d2cc <prvIdleTask+0x2c>)
 800d2b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2ba:	601a      	str	r2, [r3, #0]
 800d2bc:	f3bf 8f4f 	dsb	sy
 800d2c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d2c4:	e7f0      	b.n	800d2a8 <prvIdleTask+0x8>
 800d2c6:	bf00      	nop
 800d2c8:	24032878 	.word	0x24032878
 800d2cc:	e000ed04 	.word	0xe000ed04

0800d2d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b082      	sub	sp, #8
 800d2d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	607b      	str	r3, [r7, #4]
 800d2da:	e00c      	b.n	800d2f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d2dc:	687a      	ldr	r2, [r7, #4]
 800d2de:	4613      	mov	r3, r2
 800d2e0:	009b      	lsls	r3, r3, #2
 800d2e2:	4413      	add	r3, r2
 800d2e4:	009b      	lsls	r3, r3, #2
 800d2e6:	4a12      	ldr	r2, [pc, #72]	@ (800d330 <prvInitialiseTaskLists+0x60>)
 800d2e8:	4413      	add	r3, r2
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7fe fc86 	bl	800bbfc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	607b      	str	r3, [r7, #4]
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2b37      	cmp	r3, #55	@ 0x37
 800d2fa:	d9ef      	bls.n	800d2dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d2fc:	480d      	ldr	r0, [pc, #52]	@ (800d334 <prvInitialiseTaskLists+0x64>)
 800d2fe:	f7fe fc7d 	bl	800bbfc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d302:	480d      	ldr	r0, [pc, #52]	@ (800d338 <prvInitialiseTaskLists+0x68>)
 800d304:	f7fe fc7a 	bl	800bbfc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d308:	480c      	ldr	r0, [pc, #48]	@ (800d33c <prvInitialiseTaskLists+0x6c>)
 800d30a:	f7fe fc77 	bl	800bbfc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d30e:	480c      	ldr	r0, [pc, #48]	@ (800d340 <prvInitialiseTaskLists+0x70>)
 800d310:	f7fe fc74 	bl	800bbfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d314:	480b      	ldr	r0, [pc, #44]	@ (800d344 <prvInitialiseTaskLists+0x74>)
 800d316:	f7fe fc71 	bl	800bbfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d31a:	4b0b      	ldr	r3, [pc, #44]	@ (800d348 <prvInitialiseTaskLists+0x78>)
 800d31c:	4a05      	ldr	r2, [pc, #20]	@ (800d334 <prvInitialiseTaskLists+0x64>)
 800d31e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d320:	4b0a      	ldr	r3, [pc, #40]	@ (800d34c <prvInitialiseTaskLists+0x7c>)
 800d322:	4a05      	ldr	r2, [pc, #20]	@ (800d338 <prvInitialiseTaskLists+0x68>)
 800d324:	601a      	str	r2, [r3, #0]
}
 800d326:	bf00      	nop
 800d328:	3708      	adds	r7, #8
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}
 800d32e:	bf00      	nop
 800d330:	24032878 	.word	0x24032878
 800d334:	24032cd8 	.word	0x24032cd8
 800d338:	24032cec 	.word	0x24032cec
 800d33c:	24032d08 	.word	0x24032d08
 800d340:	24032d1c 	.word	0x24032d1c
 800d344:	24032d34 	.word	0x24032d34
 800d348:	24032d00 	.word	0x24032d00
 800d34c:	24032d04 	.word	0x24032d04

0800d350 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d356:	e019      	b.n	800d38c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d358:	f000 fdee 	bl	800df38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d35c:	4b10      	ldr	r3, [pc, #64]	@ (800d3a0 <prvCheckTasksWaitingTermination+0x50>)
 800d35e:	68db      	ldr	r3, [r3, #12]
 800d360:	68db      	ldr	r3, [r3, #12]
 800d362:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	3304      	adds	r3, #4
 800d368:	4618      	mov	r0, r3
 800d36a:	f7fe fcd1 	bl	800bd10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d36e:	4b0d      	ldr	r3, [pc, #52]	@ (800d3a4 <prvCheckTasksWaitingTermination+0x54>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	3b01      	subs	r3, #1
 800d374:	4a0b      	ldr	r2, [pc, #44]	@ (800d3a4 <prvCheckTasksWaitingTermination+0x54>)
 800d376:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d378:	4b0b      	ldr	r3, [pc, #44]	@ (800d3a8 <prvCheckTasksWaitingTermination+0x58>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	3b01      	subs	r3, #1
 800d37e:	4a0a      	ldr	r2, [pc, #40]	@ (800d3a8 <prvCheckTasksWaitingTermination+0x58>)
 800d380:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d382:	f000 fe0b 	bl	800df9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 f810 	bl	800d3ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d38c:	4b06      	ldr	r3, [pc, #24]	@ (800d3a8 <prvCheckTasksWaitingTermination+0x58>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d1e1      	bne.n	800d358 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d394:	bf00      	nop
 800d396:	bf00      	nop
 800d398:	3708      	adds	r7, #8
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	24032d1c 	.word	0x24032d1c
 800d3a4:	24032d48 	.word	0x24032d48
 800d3a8:	24032d30 	.word	0x24032d30

0800d3ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b084      	sub	sp, #16
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	3354      	adds	r3, #84	@ 0x54
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f00e f83f 	bl	801b43c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d108      	bne.n	800d3da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f000 ffa3 	bl	800e318 <vPortFree>
				vPortFree( pxTCB );
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f000 ffa0 	bl	800e318 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d3d8:	e019      	b.n	800d40e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d103      	bne.n	800d3ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f000 ff97 	bl	800e318 <vPortFree>
	}
 800d3ea:	e010      	b.n	800d40e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d3f2:	2b02      	cmp	r3, #2
 800d3f4:	d00b      	beq.n	800d40e <prvDeleteTCB+0x62>
	__asm volatile
 800d3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3fa:	f383 8811 	msr	BASEPRI, r3
 800d3fe:	f3bf 8f6f 	isb	sy
 800d402:	f3bf 8f4f 	dsb	sy
 800d406:	60fb      	str	r3, [r7, #12]
}
 800d408:	bf00      	nop
 800d40a:	bf00      	nop
 800d40c:	e7fd      	b.n	800d40a <prvDeleteTCB+0x5e>
	}
 800d40e:	bf00      	nop
 800d410:	3710      	adds	r7, #16
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
	...

0800d418 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d418:	b480      	push	{r7}
 800d41a:	b083      	sub	sp, #12
 800d41c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d41e:	4b0c      	ldr	r3, [pc, #48]	@ (800d450 <prvResetNextTaskUnblockTime+0x38>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d104      	bne.n	800d432 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d428:	4b0a      	ldr	r3, [pc, #40]	@ (800d454 <prvResetNextTaskUnblockTime+0x3c>)
 800d42a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d42e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d430:	e008      	b.n	800d444 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d432:	4b07      	ldr	r3, [pc, #28]	@ (800d450 <prvResetNextTaskUnblockTime+0x38>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	68db      	ldr	r3, [r3, #12]
 800d438:	68db      	ldr	r3, [r3, #12]
 800d43a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	4a04      	ldr	r2, [pc, #16]	@ (800d454 <prvResetNextTaskUnblockTime+0x3c>)
 800d442:	6013      	str	r3, [r2, #0]
}
 800d444:	bf00      	nop
 800d446:	370c      	adds	r7, #12
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr
 800d450:	24032d00 	.word	0x24032d00
 800d454:	24032d68 	.word	0x24032d68

0800d458 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d458:	b480      	push	{r7}
 800d45a:	b083      	sub	sp, #12
 800d45c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d45e:	4b0b      	ldr	r3, [pc, #44]	@ (800d48c <xTaskGetSchedulerState+0x34>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d102      	bne.n	800d46c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d466:	2301      	movs	r3, #1
 800d468:	607b      	str	r3, [r7, #4]
 800d46a:	e008      	b.n	800d47e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d46c:	4b08      	ldr	r3, [pc, #32]	@ (800d490 <xTaskGetSchedulerState+0x38>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d102      	bne.n	800d47a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d474:	2302      	movs	r3, #2
 800d476:	607b      	str	r3, [r7, #4]
 800d478:	e001      	b.n	800d47e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d47a:	2300      	movs	r3, #0
 800d47c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d47e:	687b      	ldr	r3, [r7, #4]
	}
 800d480:	4618      	mov	r0, r3
 800d482:	370c      	adds	r7, #12
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr
 800d48c:	24032d54 	.word	0x24032d54
 800d490:	24032d70 	.word	0x24032d70

0800d494 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d494:	b580      	push	{r7, lr}
 800d496:	b086      	sub	sp, #24
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d058      	beq.n	800d55c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d4aa:	4b2f      	ldr	r3, [pc, #188]	@ (800d568 <xTaskPriorityDisinherit+0xd4>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	693a      	ldr	r2, [r7, #16]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d00b      	beq.n	800d4cc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d4b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4b8:	f383 8811 	msr	BASEPRI, r3
 800d4bc:	f3bf 8f6f 	isb	sy
 800d4c0:	f3bf 8f4f 	dsb	sy
 800d4c4:	60fb      	str	r3, [r7, #12]
}
 800d4c6:	bf00      	nop
 800d4c8:	bf00      	nop
 800d4ca:	e7fd      	b.n	800d4c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d10b      	bne.n	800d4ec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4d8:	f383 8811 	msr	BASEPRI, r3
 800d4dc:	f3bf 8f6f 	isb	sy
 800d4e0:	f3bf 8f4f 	dsb	sy
 800d4e4:	60bb      	str	r3, [r7, #8]
}
 800d4e6:	bf00      	nop
 800d4e8:	bf00      	nop
 800d4ea:	e7fd      	b.n	800d4e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d4f0:	1e5a      	subs	r2, r3, #1
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d4f6:	693b      	ldr	r3, [r7, #16]
 800d4f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d02c      	beq.n	800d55c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d506:	2b00      	cmp	r3, #0
 800d508:	d128      	bne.n	800d55c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	3304      	adds	r3, #4
 800d50e:	4618      	mov	r0, r3
 800d510:	f7fe fbfe 	bl	800bd10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d520:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d52c:	4b0f      	ldr	r3, [pc, #60]	@ (800d56c <xTaskPriorityDisinherit+0xd8>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	429a      	cmp	r2, r3
 800d532:	d903      	bls.n	800d53c <xTaskPriorityDisinherit+0xa8>
 800d534:	693b      	ldr	r3, [r7, #16]
 800d536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d538:	4a0c      	ldr	r2, [pc, #48]	@ (800d56c <xTaskPriorityDisinherit+0xd8>)
 800d53a:	6013      	str	r3, [r2, #0]
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d540:	4613      	mov	r3, r2
 800d542:	009b      	lsls	r3, r3, #2
 800d544:	4413      	add	r3, r2
 800d546:	009b      	lsls	r3, r3, #2
 800d548:	4a09      	ldr	r2, [pc, #36]	@ (800d570 <xTaskPriorityDisinherit+0xdc>)
 800d54a:	441a      	add	r2, r3
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	3304      	adds	r3, #4
 800d550:	4619      	mov	r1, r3
 800d552:	4610      	mov	r0, r2
 800d554:	f7fe fb7f 	bl	800bc56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d558:	2301      	movs	r3, #1
 800d55a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d55c:	697b      	ldr	r3, [r7, #20]
	}
 800d55e:	4618      	mov	r0, r3
 800d560:	3718      	adds	r7, #24
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}
 800d566:	bf00      	nop
 800d568:	24032874 	.word	0x24032874
 800d56c:	24032d50 	.word	0x24032d50
 800d570:	24032878 	.word	0x24032878

0800d574 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b084      	sub	sp, #16
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d57e:	4b21      	ldr	r3, [pc, #132]	@ (800d604 <prvAddCurrentTaskToDelayedList+0x90>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d584:	4b20      	ldr	r3, [pc, #128]	@ (800d608 <prvAddCurrentTaskToDelayedList+0x94>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	3304      	adds	r3, #4
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7fe fbc0 	bl	800bd10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d596:	d10a      	bne.n	800d5ae <prvAddCurrentTaskToDelayedList+0x3a>
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d007      	beq.n	800d5ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d59e:	4b1a      	ldr	r3, [pc, #104]	@ (800d608 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	3304      	adds	r3, #4
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	4819      	ldr	r0, [pc, #100]	@ (800d60c <prvAddCurrentTaskToDelayedList+0x98>)
 800d5a8:	f7fe fb55 	bl	800bc56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d5ac:	e026      	b.n	800d5fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d5ae:	68fa      	ldr	r2, [r7, #12]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	4413      	add	r3, r2
 800d5b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d5b6:	4b14      	ldr	r3, [pc, #80]	@ (800d608 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	68ba      	ldr	r2, [r7, #8]
 800d5bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d5be:	68ba      	ldr	r2, [r7, #8]
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d209      	bcs.n	800d5da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5c6:	4b12      	ldr	r3, [pc, #72]	@ (800d610 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d5c8:	681a      	ldr	r2, [r3, #0]
 800d5ca:	4b0f      	ldr	r3, [pc, #60]	@ (800d608 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	3304      	adds	r3, #4
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	4610      	mov	r0, r2
 800d5d4:	f7fe fb63 	bl	800bc9e <vListInsert>
}
 800d5d8:	e010      	b.n	800d5fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5da:	4b0e      	ldr	r3, [pc, #56]	@ (800d614 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d5dc:	681a      	ldr	r2, [r3, #0]
 800d5de:	4b0a      	ldr	r3, [pc, #40]	@ (800d608 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	3304      	adds	r3, #4
 800d5e4:	4619      	mov	r1, r3
 800d5e6:	4610      	mov	r0, r2
 800d5e8:	f7fe fb59 	bl	800bc9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d5ec:	4b0a      	ldr	r3, [pc, #40]	@ (800d618 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	68ba      	ldr	r2, [r7, #8]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d202      	bcs.n	800d5fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d5f6:	4a08      	ldr	r2, [pc, #32]	@ (800d618 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	6013      	str	r3, [r2, #0]
}
 800d5fc:	bf00      	nop
 800d5fe:	3710      	adds	r7, #16
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}
 800d604:	24032d4c 	.word	0x24032d4c
 800d608:	24032874 	.word	0x24032874
 800d60c:	24032d34 	.word	0x24032d34
 800d610:	24032d04 	.word	0x24032d04
 800d614:	24032d00 	.word	0x24032d00
 800d618:	24032d68 	.word	0x24032d68

0800d61c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b08a      	sub	sp, #40	@ 0x28
 800d620:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d622:	2300      	movs	r3, #0
 800d624:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d626:	f000 fb13 	bl	800dc50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d62a:	4b1d      	ldr	r3, [pc, #116]	@ (800d6a0 <xTimerCreateTimerTask+0x84>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d021      	beq.n	800d676 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d632:	2300      	movs	r3, #0
 800d634:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d636:	2300      	movs	r3, #0
 800d638:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d63a:	1d3a      	adds	r2, r7, #4
 800d63c:	f107 0108 	add.w	r1, r7, #8
 800d640:	f107 030c 	add.w	r3, r7, #12
 800d644:	4618      	mov	r0, r3
 800d646:	f7fe fabf 	bl	800bbc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d64a:	6879      	ldr	r1, [r7, #4]
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	68fa      	ldr	r2, [r7, #12]
 800d650:	9202      	str	r2, [sp, #8]
 800d652:	9301      	str	r3, [sp, #4]
 800d654:	2302      	movs	r3, #2
 800d656:	9300      	str	r3, [sp, #0]
 800d658:	2300      	movs	r3, #0
 800d65a:	460a      	mov	r2, r1
 800d65c:	4911      	ldr	r1, [pc, #68]	@ (800d6a4 <xTimerCreateTimerTask+0x88>)
 800d65e:	4812      	ldr	r0, [pc, #72]	@ (800d6a8 <xTimerCreateTimerTask+0x8c>)
 800d660:	f7ff f87a 	bl	800c758 <xTaskCreateStatic>
 800d664:	4603      	mov	r3, r0
 800d666:	4a11      	ldr	r2, [pc, #68]	@ (800d6ac <xTimerCreateTimerTask+0x90>)
 800d668:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d66a:	4b10      	ldr	r3, [pc, #64]	@ (800d6ac <xTimerCreateTimerTask+0x90>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d001      	beq.n	800d676 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d672:	2301      	movs	r3, #1
 800d674:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d10b      	bne.n	800d694 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d67c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d680:	f383 8811 	msr	BASEPRI, r3
 800d684:	f3bf 8f6f 	isb	sy
 800d688:	f3bf 8f4f 	dsb	sy
 800d68c:	613b      	str	r3, [r7, #16]
}
 800d68e:	bf00      	nop
 800d690:	bf00      	nop
 800d692:	e7fd      	b.n	800d690 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d694:	697b      	ldr	r3, [r7, #20]
}
 800d696:	4618      	mov	r0, r3
 800d698:	3718      	adds	r7, #24
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}
 800d69e:	bf00      	nop
 800d6a0:	24032da4 	.word	0x24032da4
 800d6a4:	0801c2a8 	.word	0x0801c2a8
 800d6a8:	0800d7e9 	.word	0x0800d7e9
 800d6ac:	24032da8 	.word	0x24032da8

0800d6b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b08a      	sub	sp, #40	@ 0x28
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	60f8      	str	r0, [r7, #12]
 800d6b8:	60b9      	str	r1, [r7, #8]
 800d6ba:	607a      	str	r2, [r7, #4]
 800d6bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d10b      	bne.n	800d6e0 <xTimerGenericCommand+0x30>
	__asm volatile
 800d6c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6cc:	f383 8811 	msr	BASEPRI, r3
 800d6d0:	f3bf 8f6f 	isb	sy
 800d6d4:	f3bf 8f4f 	dsb	sy
 800d6d8:	623b      	str	r3, [r7, #32]
}
 800d6da:	bf00      	nop
 800d6dc:	bf00      	nop
 800d6de:	e7fd      	b.n	800d6dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d6e0:	4b19      	ldr	r3, [pc, #100]	@ (800d748 <xTimerGenericCommand+0x98>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d02a      	beq.n	800d73e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	2b05      	cmp	r3, #5
 800d6f8:	dc18      	bgt.n	800d72c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d6fa:	f7ff fead 	bl	800d458 <xTaskGetSchedulerState>
 800d6fe:	4603      	mov	r3, r0
 800d700:	2b02      	cmp	r3, #2
 800d702:	d109      	bne.n	800d718 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d704:	4b10      	ldr	r3, [pc, #64]	@ (800d748 <xTimerGenericCommand+0x98>)
 800d706:	6818      	ldr	r0, [r3, #0]
 800d708:	f107 0110 	add.w	r1, r7, #16
 800d70c:	2300      	movs	r3, #0
 800d70e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d710:	f7fe fc32 	bl	800bf78 <xQueueGenericSend>
 800d714:	6278      	str	r0, [r7, #36]	@ 0x24
 800d716:	e012      	b.n	800d73e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d718:	4b0b      	ldr	r3, [pc, #44]	@ (800d748 <xTimerGenericCommand+0x98>)
 800d71a:	6818      	ldr	r0, [r3, #0]
 800d71c:	f107 0110 	add.w	r1, r7, #16
 800d720:	2300      	movs	r3, #0
 800d722:	2200      	movs	r2, #0
 800d724:	f7fe fc28 	bl	800bf78 <xQueueGenericSend>
 800d728:	6278      	str	r0, [r7, #36]	@ 0x24
 800d72a:	e008      	b.n	800d73e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d72c:	4b06      	ldr	r3, [pc, #24]	@ (800d748 <xTimerGenericCommand+0x98>)
 800d72e:	6818      	ldr	r0, [r3, #0]
 800d730:	f107 0110 	add.w	r1, r7, #16
 800d734:	2300      	movs	r3, #0
 800d736:	683a      	ldr	r2, [r7, #0]
 800d738:	f7fe fd20 	bl	800c17c <xQueueGenericSendFromISR>
 800d73c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d740:	4618      	mov	r0, r3
 800d742:	3728      	adds	r7, #40	@ 0x28
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}
 800d748:	24032da4 	.word	0x24032da4

0800d74c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b088      	sub	sp, #32
 800d750:	af02      	add	r7, sp, #8
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d756:	4b23      	ldr	r3, [pc, #140]	@ (800d7e4 <prvProcessExpiredTimer+0x98>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	68db      	ldr	r3, [r3, #12]
 800d75e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	3304      	adds	r3, #4
 800d764:	4618      	mov	r0, r3
 800d766:	f7fe fad3 	bl	800bd10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d770:	f003 0304 	and.w	r3, r3, #4
 800d774:	2b00      	cmp	r3, #0
 800d776:	d023      	beq.n	800d7c0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	699a      	ldr	r2, [r3, #24]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	18d1      	adds	r1, r2, r3
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	683a      	ldr	r2, [r7, #0]
 800d784:	6978      	ldr	r0, [r7, #20]
 800d786:	f000 f8d5 	bl	800d934 <prvInsertTimerInActiveList>
 800d78a:	4603      	mov	r3, r0
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d020      	beq.n	800d7d2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d790:	2300      	movs	r3, #0
 800d792:	9300      	str	r3, [sp, #0]
 800d794:	2300      	movs	r3, #0
 800d796:	687a      	ldr	r2, [r7, #4]
 800d798:	2100      	movs	r1, #0
 800d79a:	6978      	ldr	r0, [r7, #20]
 800d79c:	f7ff ff88 	bl	800d6b0 <xTimerGenericCommand>
 800d7a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d114      	bne.n	800d7d2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d7a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7ac:	f383 8811 	msr	BASEPRI, r3
 800d7b0:	f3bf 8f6f 	isb	sy
 800d7b4:	f3bf 8f4f 	dsb	sy
 800d7b8:	60fb      	str	r3, [r7, #12]
}
 800d7ba:	bf00      	nop
 800d7bc:	bf00      	nop
 800d7be:	e7fd      	b.n	800d7bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d7c6:	f023 0301 	bic.w	r3, r3, #1
 800d7ca:	b2da      	uxtb	r2, r3
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	6a1b      	ldr	r3, [r3, #32]
 800d7d6:	6978      	ldr	r0, [r7, #20]
 800d7d8:	4798      	blx	r3
}
 800d7da:	bf00      	nop
 800d7dc:	3718      	adds	r7, #24
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	24032d9c 	.word	0x24032d9c

0800d7e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d7f0:	f107 0308 	add.w	r3, r7, #8
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f000 f859 	bl	800d8ac <prvGetNextExpireTime>
 800d7fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	4619      	mov	r1, r3
 800d800:	68f8      	ldr	r0, [r7, #12]
 800d802:	f000 f805 	bl	800d810 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d806:	f000 f8d7 	bl	800d9b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d80a:	bf00      	nop
 800d80c:	e7f0      	b.n	800d7f0 <prvTimerTask+0x8>
	...

0800d810 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b084      	sub	sp, #16
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d81a:	f7ff fa01 	bl	800cc20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d81e:	f107 0308 	add.w	r3, r7, #8
 800d822:	4618      	mov	r0, r3
 800d824:	f000 f866 	bl	800d8f4 <prvSampleTimeNow>
 800d828:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d130      	bne.n	800d892 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d10a      	bne.n	800d84c <prvProcessTimerOrBlockTask+0x3c>
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d806      	bhi.n	800d84c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d83e:	f7ff f9fd 	bl	800cc3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d842:	68f9      	ldr	r1, [r7, #12]
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f7ff ff81 	bl	800d74c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d84a:	e024      	b.n	800d896 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d008      	beq.n	800d864 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d852:	4b13      	ldr	r3, [pc, #76]	@ (800d8a0 <prvProcessTimerOrBlockTask+0x90>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d101      	bne.n	800d860 <prvProcessTimerOrBlockTask+0x50>
 800d85c:	2301      	movs	r3, #1
 800d85e:	e000      	b.n	800d862 <prvProcessTimerOrBlockTask+0x52>
 800d860:	2300      	movs	r3, #0
 800d862:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d864:	4b0f      	ldr	r3, [pc, #60]	@ (800d8a4 <prvProcessTimerOrBlockTask+0x94>)
 800d866:	6818      	ldr	r0, [r3, #0]
 800d868:	687a      	ldr	r2, [r7, #4]
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	1ad3      	subs	r3, r2, r3
 800d86e:	683a      	ldr	r2, [r7, #0]
 800d870:	4619      	mov	r1, r3
 800d872:	f7fe ff3d 	bl	800c6f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d876:	f7ff f9e1 	bl	800cc3c <xTaskResumeAll>
 800d87a:	4603      	mov	r3, r0
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d10a      	bne.n	800d896 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d880:	4b09      	ldr	r3, [pc, #36]	@ (800d8a8 <prvProcessTimerOrBlockTask+0x98>)
 800d882:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d886:	601a      	str	r2, [r3, #0]
 800d888:	f3bf 8f4f 	dsb	sy
 800d88c:	f3bf 8f6f 	isb	sy
}
 800d890:	e001      	b.n	800d896 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d892:	f7ff f9d3 	bl	800cc3c <xTaskResumeAll>
}
 800d896:	bf00      	nop
 800d898:	3710      	adds	r7, #16
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	24032da0 	.word	0x24032da0
 800d8a4:	24032da4 	.word	0x24032da4
 800d8a8:	e000ed04 	.word	0xe000ed04

0800d8ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b085      	sub	sp, #20
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d8b4:	4b0e      	ldr	r3, [pc, #56]	@ (800d8f0 <prvGetNextExpireTime+0x44>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d101      	bne.n	800d8c2 <prvGetNextExpireTime+0x16>
 800d8be:	2201      	movs	r2, #1
 800d8c0:	e000      	b.n	800d8c4 <prvGetNextExpireTime+0x18>
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d105      	bne.n	800d8dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d8d0:	4b07      	ldr	r3, [pc, #28]	@ (800d8f0 <prvGetNextExpireTime+0x44>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	68db      	ldr	r3, [r3, #12]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	60fb      	str	r3, [r7, #12]
 800d8da:	e001      	b.n	800d8e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	3714      	adds	r7, #20
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ec:	4770      	bx	lr
 800d8ee:	bf00      	nop
 800d8f0:	24032d9c 	.word	0x24032d9c

0800d8f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b084      	sub	sp, #16
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d8fc:	f7ff fa3c 	bl	800cd78 <xTaskGetTickCount>
 800d900:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d902:	4b0b      	ldr	r3, [pc, #44]	@ (800d930 <prvSampleTimeNow+0x3c>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	68fa      	ldr	r2, [r7, #12]
 800d908:	429a      	cmp	r2, r3
 800d90a:	d205      	bcs.n	800d918 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d90c:	f000 f93a 	bl	800db84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2201      	movs	r2, #1
 800d914:	601a      	str	r2, [r3, #0]
 800d916:	e002      	b.n	800d91e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2200      	movs	r2, #0
 800d91c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d91e:	4a04      	ldr	r2, [pc, #16]	@ (800d930 <prvSampleTimeNow+0x3c>)
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d924:	68fb      	ldr	r3, [r7, #12]
}
 800d926:	4618      	mov	r0, r3
 800d928:	3710      	adds	r7, #16
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
 800d92e:	bf00      	nop
 800d930:	24032dac 	.word	0x24032dac

0800d934 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b086      	sub	sp, #24
 800d938:	af00      	add	r7, sp, #0
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	607a      	str	r2, [r7, #4]
 800d940:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d942:	2300      	movs	r3, #0
 800d944:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	68ba      	ldr	r2, [r7, #8]
 800d94a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	68fa      	ldr	r2, [r7, #12]
 800d950:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d952:	68ba      	ldr	r2, [r7, #8]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	429a      	cmp	r2, r3
 800d958:	d812      	bhi.n	800d980 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d95a:	687a      	ldr	r2, [r7, #4]
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	1ad2      	subs	r2, r2, r3
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	699b      	ldr	r3, [r3, #24]
 800d964:	429a      	cmp	r2, r3
 800d966:	d302      	bcc.n	800d96e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d968:	2301      	movs	r3, #1
 800d96a:	617b      	str	r3, [r7, #20]
 800d96c:	e01b      	b.n	800d9a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d96e:	4b10      	ldr	r3, [pc, #64]	@ (800d9b0 <prvInsertTimerInActiveList+0x7c>)
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	3304      	adds	r3, #4
 800d976:	4619      	mov	r1, r3
 800d978:	4610      	mov	r0, r2
 800d97a:	f7fe f990 	bl	800bc9e <vListInsert>
 800d97e:	e012      	b.n	800d9a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	429a      	cmp	r2, r3
 800d986:	d206      	bcs.n	800d996 <prvInsertTimerInActiveList+0x62>
 800d988:	68ba      	ldr	r2, [r7, #8]
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d302      	bcc.n	800d996 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d990:	2301      	movs	r3, #1
 800d992:	617b      	str	r3, [r7, #20]
 800d994:	e007      	b.n	800d9a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d996:	4b07      	ldr	r3, [pc, #28]	@ (800d9b4 <prvInsertTimerInActiveList+0x80>)
 800d998:	681a      	ldr	r2, [r3, #0]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	3304      	adds	r3, #4
 800d99e:	4619      	mov	r1, r3
 800d9a0:	4610      	mov	r0, r2
 800d9a2:	f7fe f97c 	bl	800bc9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d9a6:	697b      	ldr	r3, [r7, #20]
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3718      	adds	r7, #24
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}
 800d9b0:	24032da0 	.word	0x24032da0
 800d9b4:	24032d9c 	.word	0x24032d9c

0800d9b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b08e      	sub	sp, #56	@ 0x38
 800d9bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d9be:	e0ce      	b.n	800db5e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	da19      	bge.n	800d9fa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d9c6:	1d3b      	adds	r3, r7, #4
 800d9c8:	3304      	adds	r3, #4
 800d9ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d9cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d10b      	bne.n	800d9ea <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d9d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9d6:	f383 8811 	msr	BASEPRI, r3
 800d9da:	f3bf 8f6f 	isb	sy
 800d9de:	f3bf 8f4f 	dsb	sy
 800d9e2:	61fb      	str	r3, [r7, #28]
}
 800d9e4:	bf00      	nop
 800d9e6:	bf00      	nop
 800d9e8:	e7fd      	b.n	800d9e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d9ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9f0:	6850      	ldr	r0, [r2, #4]
 800d9f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9f4:	6892      	ldr	r2, [r2, #8]
 800d9f6:	4611      	mov	r1, r2
 800d9f8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	f2c0 80ae 	blt.w	800db5e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800da06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da08:	695b      	ldr	r3, [r3, #20]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d004      	beq.n	800da18 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da10:	3304      	adds	r3, #4
 800da12:	4618      	mov	r0, r3
 800da14:	f7fe f97c 	bl	800bd10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da18:	463b      	mov	r3, r7
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7ff ff6a 	bl	800d8f4 <prvSampleTimeNow>
 800da20:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2b09      	cmp	r3, #9
 800da26:	f200 8097 	bhi.w	800db58 <prvProcessReceivedCommands+0x1a0>
 800da2a:	a201      	add	r2, pc, #4	@ (adr r2, 800da30 <prvProcessReceivedCommands+0x78>)
 800da2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da30:	0800da59 	.word	0x0800da59
 800da34:	0800da59 	.word	0x0800da59
 800da38:	0800da59 	.word	0x0800da59
 800da3c:	0800dacf 	.word	0x0800dacf
 800da40:	0800dae3 	.word	0x0800dae3
 800da44:	0800db2f 	.word	0x0800db2f
 800da48:	0800da59 	.word	0x0800da59
 800da4c:	0800da59 	.word	0x0800da59
 800da50:	0800dacf 	.word	0x0800dacf
 800da54:	0800dae3 	.word	0x0800dae3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800da58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da5e:	f043 0301 	orr.w	r3, r3, #1
 800da62:	b2da      	uxtb	r2, r3
 800da64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800da6a:	68ba      	ldr	r2, [r7, #8]
 800da6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da6e:	699b      	ldr	r3, [r3, #24]
 800da70:	18d1      	adds	r1, r2, r3
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da78:	f7ff ff5c 	bl	800d934 <prvInsertTimerInActiveList>
 800da7c:	4603      	mov	r3, r0
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d06c      	beq.n	800db5c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da84:	6a1b      	ldr	r3, [r3, #32]
 800da86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da90:	f003 0304 	and.w	r3, r3, #4
 800da94:	2b00      	cmp	r3, #0
 800da96:	d061      	beq.n	800db5c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800da98:	68ba      	ldr	r2, [r7, #8]
 800da9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da9c:	699b      	ldr	r3, [r3, #24]
 800da9e:	441a      	add	r2, r3
 800daa0:	2300      	movs	r3, #0
 800daa2:	9300      	str	r3, [sp, #0]
 800daa4:	2300      	movs	r3, #0
 800daa6:	2100      	movs	r1, #0
 800daa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800daaa:	f7ff fe01 	bl	800d6b0 <xTimerGenericCommand>
 800daae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dab0:	6a3b      	ldr	r3, [r7, #32]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d152      	bne.n	800db5c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800dab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daba:	f383 8811 	msr	BASEPRI, r3
 800dabe:	f3bf 8f6f 	isb	sy
 800dac2:	f3bf 8f4f 	dsb	sy
 800dac6:	61bb      	str	r3, [r7, #24]
}
 800dac8:	bf00      	nop
 800daca:	bf00      	nop
 800dacc:	e7fd      	b.n	800daca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dad0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dad4:	f023 0301 	bic.w	r3, r3, #1
 800dad8:	b2da      	uxtb	r2, r3
 800dada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dadc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800dae0:	e03d      	b.n	800db5e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dae4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dae8:	f043 0301 	orr.w	r3, r3, #1
 800daec:	b2da      	uxtb	r2, r3
 800daee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daf0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800daf4:	68ba      	ldr	r2, [r7, #8]
 800daf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daf8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dafc:	699b      	ldr	r3, [r3, #24]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d10b      	bne.n	800db1a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800db02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db06:	f383 8811 	msr	BASEPRI, r3
 800db0a:	f3bf 8f6f 	isb	sy
 800db0e:	f3bf 8f4f 	dsb	sy
 800db12:	617b      	str	r3, [r7, #20]
}
 800db14:	bf00      	nop
 800db16:	bf00      	nop
 800db18:	e7fd      	b.n	800db16 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800db1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db1c:	699a      	ldr	r2, [r3, #24]
 800db1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db20:	18d1      	adds	r1, r2, r3
 800db22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db28:	f7ff ff04 	bl	800d934 <prvInsertTimerInActiveList>
					break;
 800db2c:	e017      	b.n	800db5e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800db2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db34:	f003 0302 	and.w	r3, r3, #2
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d103      	bne.n	800db44 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800db3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db3e:	f000 fbeb 	bl	800e318 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800db42:	e00c      	b.n	800db5e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db4a:	f023 0301 	bic.w	r3, r3, #1
 800db4e:	b2da      	uxtb	r2, r3
 800db50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800db56:	e002      	b.n	800db5e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800db58:	bf00      	nop
 800db5a:	e000      	b.n	800db5e <prvProcessReceivedCommands+0x1a6>
					break;
 800db5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db5e:	4b08      	ldr	r3, [pc, #32]	@ (800db80 <prvProcessReceivedCommands+0x1c8>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	1d39      	adds	r1, r7, #4
 800db64:	2200      	movs	r2, #0
 800db66:	4618      	mov	r0, r3
 800db68:	f7fe fba6 	bl	800c2b8 <xQueueReceive>
 800db6c:	4603      	mov	r3, r0
 800db6e:	2b00      	cmp	r3, #0
 800db70:	f47f af26 	bne.w	800d9c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800db74:	bf00      	nop
 800db76:	bf00      	nop
 800db78:	3730      	adds	r7, #48	@ 0x30
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	bf00      	nop
 800db80:	24032da4 	.word	0x24032da4

0800db84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b088      	sub	sp, #32
 800db88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800db8a:	e049      	b.n	800dc20 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db8c:	4b2e      	ldr	r3, [pc, #184]	@ (800dc48 <prvSwitchTimerLists+0xc4>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	68db      	ldr	r3, [r3, #12]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db96:	4b2c      	ldr	r3, [pc, #176]	@ (800dc48 <prvSwitchTimerLists+0xc4>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	68db      	ldr	r3, [r3, #12]
 800db9c:	68db      	ldr	r3, [r3, #12]
 800db9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	3304      	adds	r3, #4
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7fe f8b3 	bl	800bd10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	6a1b      	ldr	r3, [r3, #32]
 800dbae:	68f8      	ldr	r0, [r7, #12]
 800dbb0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dbb8:	f003 0304 	and.w	r3, r3, #4
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d02f      	beq.n	800dc20 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	699b      	ldr	r3, [r3, #24]
 800dbc4:	693a      	ldr	r2, [r7, #16]
 800dbc6:	4413      	add	r3, r2
 800dbc8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dbca:	68ba      	ldr	r2, [r7, #8]
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d90e      	bls.n	800dbf0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	68ba      	ldr	r2, [r7, #8]
 800dbd6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	68fa      	ldr	r2, [r7, #12]
 800dbdc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dbde:	4b1a      	ldr	r3, [pc, #104]	@ (800dc48 <prvSwitchTimerLists+0xc4>)
 800dbe0:	681a      	ldr	r2, [r3, #0]
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	3304      	adds	r3, #4
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	4610      	mov	r0, r2
 800dbea:	f7fe f858 	bl	800bc9e <vListInsert>
 800dbee:	e017      	b.n	800dc20 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	9300      	str	r3, [sp, #0]
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	693a      	ldr	r2, [r7, #16]
 800dbf8:	2100      	movs	r1, #0
 800dbfa:	68f8      	ldr	r0, [r7, #12]
 800dbfc:	f7ff fd58 	bl	800d6b0 <xTimerGenericCommand>
 800dc00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d10b      	bne.n	800dc20 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800dc08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc0c:	f383 8811 	msr	BASEPRI, r3
 800dc10:	f3bf 8f6f 	isb	sy
 800dc14:	f3bf 8f4f 	dsb	sy
 800dc18:	603b      	str	r3, [r7, #0]
}
 800dc1a:	bf00      	nop
 800dc1c:	bf00      	nop
 800dc1e:	e7fd      	b.n	800dc1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dc20:	4b09      	ldr	r3, [pc, #36]	@ (800dc48 <prvSwitchTimerLists+0xc4>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d1b0      	bne.n	800db8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dc2a:	4b07      	ldr	r3, [pc, #28]	@ (800dc48 <prvSwitchTimerLists+0xc4>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dc30:	4b06      	ldr	r3, [pc, #24]	@ (800dc4c <prvSwitchTimerLists+0xc8>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4a04      	ldr	r2, [pc, #16]	@ (800dc48 <prvSwitchTimerLists+0xc4>)
 800dc36:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dc38:	4a04      	ldr	r2, [pc, #16]	@ (800dc4c <prvSwitchTimerLists+0xc8>)
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	6013      	str	r3, [r2, #0]
}
 800dc3e:	bf00      	nop
 800dc40:	3718      	adds	r7, #24
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
 800dc46:	bf00      	nop
 800dc48:	24032d9c 	.word	0x24032d9c
 800dc4c:	24032da0 	.word	0x24032da0

0800dc50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b082      	sub	sp, #8
 800dc54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dc56:	f000 f96f 	bl	800df38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dc5a:	4b15      	ldr	r3, [pc, #84]	@ (800dcb0 <prvCheckForValidListAndQueue+0x60>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d120      	bne.n	800dca4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dc62:	4814      	ldr	r0, [pc, #80]	@ (800dcb4 <prvCheckForValidListAndQueue+0x64>)
 800dc64:	f7fd ffca 	bl	800bbfc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dc68:	4813      	ldr	r0, [pc, #76]	@ (800dcb8 <prvCheckForValidListAndQueue+0x68>)
 800dc6a:	f7fd ffc7 	bl	800bbfc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dc6e:	4b13      	ldr	r3, [pc, #76]	@ (800dcbc <prvCheckForValidListAndQueue+0x6c>)
 800dc70:	4a10      	ldr	r2, [pc, #64]	@ (800dcb4 <prvCheckForValidListAndQueue+0x64>)
 800dc72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dc74:	4b12      	ldr	r3, [pc, #72]	@ (800dcc0 <prvCheckForValidListAndQueue+0x70>)
 800dc76:	4a10      	ldr	r2, [pc, #64]	@ (800dcb8 <prvCheckForValidListAndQueue+0x68>)
 800dc78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	9300      	str	r3, [sp, #0]
 800dc7e:	4b11      	ldr	r3, [pc, #68]	@ (800dcc4 <prvCheckForValidListAndQueue+0x74>)
 800dc80:	4a11      	ldr	r2, [pc, #68]	@ (800dcc8 <prvCheckForValidListAndQueue+0x78>)
 800dc82:	2110      	movs	r1, #16
 800dc84:	200a      	movs	r0, #10
 800dc86:	f7fe f8d7 	bl	800be38 <xQueueGenericCreateStatic>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	4a08      	ldr	r2, [pc, #32]	@ (800dcb0 <prvCheckForValidListAndQueue+0x60>)
 800dc8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dc90:	4b07      	ldr	r3, [pc, #28]	@ (800dcb0 <prvCheckForValidListAndQueue+0x60>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d005      	beq.n	800dca4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dc98:	4b05      	ldr	r3, [pc, #20]	@ (800dcb0 <prvCheckForValidListAndQueue+0x60>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	490b      	ldr	r1, [pc, #44]	@ (800dccc <prvCheckForValidListAndQueue+0x7c>)
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7fe fcfc 	bl	800c69c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dca4:	f000 f97a 	bl	800df9c <vPortExitCritical>
}
 800dca8:	bf00      	nop
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	24032da4 	.word	0x24032da4
 800dcb4:	24032d74 	.word	0x24032d74
 800dcb8:	24032d88 	.word	0x24032d88
 800dcbc:	24032d9c 	.word	0x24032d9c
 800dcc0:	24032da0 	.word	0x24032da0
 800dcc4:	24032e50 	.word	0x24032e50
 800dcc8:	24032db0 	.word	0x24032db0
 800dccc:	0801c2b0 	.word	0x0801c2b0

0800dcd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b085      	sub	sp, #20
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	60f8      	str	r0, [r7, #12]
 800dcd8:	60b9      	str	r1, [r7, #8]
 800dcda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	3b04      	subs	r3, #4
 800dce0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800dce8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	3b04      	subs	r3, #4
 800dcee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	f023 0201 	bic.w	r2, r3, #1
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	3b04      	subs	r3, #4
 800dcfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dd00:	4a0c      	ldr	r2, [pc, #48]	@ (800dd34 <pxPortInitialiseStack+0x64>)
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	3b14      	subs	r3, #20
 800dd0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dd0c:	687a      	ldr	r2, [r7, #4]
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	3b04      	subs	r3, #4
 800dd16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	f06f 0202 	mvn.w	r2, #2
 800dd1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	3b20      	subs	r3, #32
 800dd24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dd26:	68fb      	ldr	r3, [r7, #12]
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3714      	adds	r7, #20
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd32:	4770      	bx	lr
 800dd34:	0800dd39 	.word	0x0800dd39

0800dd38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b085      	sub	sp, #20
 800dd3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dd42:	4b13      	ldr	r3, [pc, #76]	@ (800dd90 <prvTaskExitError+0x58>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dd4a:	d00b      	beq.n	800dd64 <prvTaskExitError+0x2c>
	__asm volatile
 800dd4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd50:	f383 8811 	msr	BASEPRI, r3
 800dd54:	f3bf 8f6f 	isb	sy
 800dd58:	f3bf 8f4f 	dsb	sy
 800dd5c:	60fb      	str	r3, [r7, #12]
}
 800dd5e:	bf00      	nop
 800dd60:	bf00      	nop
 800dd62:	e7fd      	b.n	800dd60 <prvTaskExitError+0x28>
	__asm volatile
 800dd64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd68:	f383 8811 	msr	BASEPRI, r3
 800dd6c:	f3bf 8f6f 	isb	sy
 800dd70:	f3bf 8f4f 	dsb	sy
 800dd74:	60bb      	str	r3, [r7, #8]
}
 800dd76:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dd78:	bf00      	nop
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d0fc      	beq.n	800dd7a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dd80:	bf00      	nop
 800dd82:	bf00      	nop
 800dd84:	3714      	adds	r7, #20
 800dd86:	46bd      	mov	sp, r7
 800dd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8c:	4770      	bx	lr
 800dd8e:	bf00      	nop
 800dd90:	24000014 	.word	0x24000014
	...

0800dda0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dda0:	4b07      	ldr	r3, [pc, #28]	@ (800ddc0 <pxCurrentTCBConst2>)
 800dda2:	6819      	ldr	r1, [r3, #0]
 800dda4:	6808      	ldr	r0, [r1, #0]
 800dda6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddaa:	f380 8809 	msr	PSP, r0
 800ddae:	f3bf 8f6f 	isb	sy
 800ddb2:	f04f 0000 	mov.w	r0, #0
 800ddb6:	f380 8811 	msr	BASEPRI, r0
 800ddba:	4770      	bx	lr
 800ddbc:	f3af 8000 	nop.w

0800ddc0 <pxCurrentTCBConst2>:
 800ddc0:	24032874 	.word	0x24032874
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ddc4:	bf00      	nop
 800ddc6:	bf00      	nop

0800ddc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ddc8:	4808      	ldr	r0, [pc, #32]	@ (800ddec <prvPortStartFirstTask+0x24>)
 800ddca:	6800      	ldr	r0, [r0, #0]
 800ddcc:	6800      	ldr	r0, [r0, #0]
 800ddce:	f380 8808 	msr	MSP, r0
 800ddd2:	f04f 0000 	mov.w	r0, #0
 800ddd6:	f380 8814 	msr	CONTROL, r0
 800ddda:	b662      	cpsie	i
 800dddc:	b661      	cpsie	f
 800ddde:	f3bf 8f4f 	dsb	sy
 800dde2:	f3bf 8f6f 	isb	sy
 800dde6:	df00      	svc	0
 800dde8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ddea:	bf00      	nop
 800ddec:	e000ed08 	.word	0xe000ed08

0800ddf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b086      	sub	sp, #24
 800ddf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ddf6:	4b47      	ldr	r3, [pc, #284]	@ (800df14 <xPortStartScheduler+0x124>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	4a47      	ldr	r2, [pc, #284]	@ (800df18 <xPortStartScheduler+0x128>)
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	d10b      	bne.n	800de18 <xPortStartScheduler+0x28>
	__asm volatile
 800de00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de04:	f383 8811 	msr	BASEPRI, r3
 800de08:	f3bf 8f6f 	isb	sy
 800de0c:	f3bf 8f4f 	dsb	sy
 800de10:	613b      	str	r3, [r7, #16]
}
 800de12:	bf00      	nop
 800de14:	bf00      	nop
 800de16:	e7fd      	b.n	800de14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800de18:	4b3e      	ldr	r3, [pc, #248]	@ (800df14 <xPortStartScheduler+0x124>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	4a3f      	ldr	r2, [pc, #252]	@ (800df1c <xPortStartScheduler+0x12c>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	d10b      	bne.n	800de3a <xPortStartScheduler+0x4a>
	__asm volatile
 800de22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de26:	f383 8811 	msr	BASEPRI, r3
 800de2a:	f3bf 8f6f 	isb	sy
 800de2e:	f3bf 8f4f 	dsb	sy
 800de32:	60fb      	str	r3, [r7, #12]
}
 800de34:	bf00      	nop
 800de36:	bf00      	nop
 800de38:	e7fd      	b.n	800de36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800de3a:	4b39      	ldr	r3, [pc, #228]	@ (800df20 <xPortStartScheduler+0x130>)
 800de3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	b2db      	uxtb	r3, r3
 800de44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	22ff      	movs	r2, #255	@ 0xff
 800de4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	b2db      	uxtb	r3, r3
 800de52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800de54:	78fb      	ldrb	r3, [r7, #3]
 800de56:	b2db      	uxtb	r3, r3
 800de58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800de5c:	b2da      	uxtb	r2, r3
 800de5e:	4b31      	ldr	r3, [pc, #196]	@ (800df24 <xPortStartScheduler+0x134>)
 800de60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800de62:	4b31      	ldr	r3, [pc, #196]	@ (800df28 <xPortStartScheduler+0x138>)
 800de64:	2207      	movs	r2, #7
 800de66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de68:	e009      	b.n	800de7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800de6a:	4b2f      	ldr	r3, [pc, #188]	@ (800df28 <xPortStartScheduler+0x138>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	3b01      	subs	r3, #1
 800de70:	4a2d      	ldr	r2, [pc, #180]	@ (800df28 <xPortStartScheduler+0x138>)
 800de72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800de74:	78fb      	ldrb	r3, [r7, #3]
 800de76:	b2db      	uxtb	r3, r3
 800de78:	005b      	lsls	r3, r3, #1
 800de7a:	b2db      	uxtb	r3, r3
 800de7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de7e:	78fb      	ldrb	r3, [r7, #3]
 800de80:	b2db      	uxtb	r3, r3
 800de82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de86:	2b80      	cmp	r3, #128	@ 0x80
 800de88:	d0ef      	beq.n	800de6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800de8a:	4b27      	ldr	r3, [pc, #156]	@ (800df28 <xPortStartScheduler+0x138>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f1c3 0307 	rsb	r3, r3, #7
 800de92:	2b04      	cmp	r3, #4
 800de94:	d00b      	beq.n	800deae <xPortStartScheduler+0xbe>
	__asm volatile
 800de96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de9a:	f383 8811 	msr	BASEPRI, r3
 800de9e:	f3bf 8f6f 	isb	sy
 800dea2:	f3bf 8f4f 	dsb	sy
 800dea6:	60bb      	str	r3, [r7, #8]
}
 800dea8:	bf00      	nop
 800deaa:	bf00      	nop
 800deac:	e7fd      	b.n	800deaa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800deae:	4b1e      	ldr	r3, [pc, #120]	@ (800df28 <xPortStartScheduler+0x138>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	021b      	lsls	r3, r3, #8
 800deb4:	4a1c      	ldr	r2, [pc, #112]	@ (800df28 <xPortStartScheduler+0x138>)
 800deb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800deb8:	4b1b      	ldr	r3, [pc, #108]	@ (800df28 <xPortStartScheduler+0x138>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dec0:	4a19      	ldr	r2, [pc, #100]	@ (800df28 <xPortStartScheduler+0x138>)
 800dec2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	b2da      	uxtb	r2, r3
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800decc:	4b17      	ldr	r3, [pc, #92]	@ (800df2c <xPortStartScheduler+0x13c>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	4a16      	ldr	r2, [pc, #88]	@ (800df2c <xPortStartScheduler+0x13c>)
 800ded2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ded6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ded8:	4b14      	ldr	r3, [pc, #80]	@ (800df2c <xPortStartScheduler+0x13c>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	4a13      	ldr	r2, [pc, #76]	@ (800df2c <xPortStartScheduler+0x13c>)
 800dede:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800dee2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dee4:	f000 f8da 	bl	800e09c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dee8:	4b11      	ldr	r3, [pc, #68]	@ (800df30 <xPortStartScheduler+0x140>)
 800deea:	2200      	movs	r2, #0
 800deec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800deee:	f000 f8f9 	bl	800e0e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800def2:	4b10      	ldr	r3, [pc, #64]	@ (800df34 <xPortStartScheduler+0x144>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	4a0f      	ldr	r2, [pc, #60]	@ (800df34 <xPortStartScheduler+0x144>)
 800def8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800defc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800defe:	f7ff ff63 	bl	800ddc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800df02:	f7ff f803 	bl	800cf0c <vTaskSwitchContext>
	prvTaskExitError();
 800df06:	f7ff ff17 	bl	800dd38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800df0a:	2300      	movs	r3, #0
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3718      	adds	r7, #24
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}
 800df14:	e000ed00 	.word	0xe000ed00
 800df18:	410fc271 	.word	0x410fc271
 800df1c:	410fc270 	.word	0x410fc270
 800df20:	e000e400 	.word	0xe000e400
 800df24:	24032ea0 	.word	0x24032ea0
 800df28:	24032ea4 	.word	0x24032ea4
 800df2c:	e000ed20 	.word	0xe000ed20
 800df30:	24000014 	.word	0x24000014
 800df34:	e000ef34 	.word	0xe000ef34

0800df38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800df38:	b480      	push	{r7}
 800df3a:	b083      	sub	sp, #12
 800df3c:	af00      	add	r7, sp, #0
	__asm volatile
 800df3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df42:	f383 8811 	msr	BASEPRI, r3
 800df46:	f3bf 8f6f 	isb	sy
 800df4a:	f3bf 8f4f 	dsb	sy
 800df4e:	607b      	str	r3, [r7, #4]
}
 800df50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800df52:	4b10      	ldr	r3, [pc, #64]	@ (800df94 <vPortEnterCritical+0x5c>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	3301      	adds	r3, #1
 800df58:	4a0e      	ldr	r2, [pc, #56]	@ (800df94 <vPortEnterCritical+0x5c>)
 800df5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800df5c:	4b0d      	ldr	r3, [pc, #52]	@ (800df94 <vPortEnterCritical+0x5c>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	2b01      	cmp	r3, #1
 800df62:	d110      	bne.n	800df86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800df64:	4b0c      	ldr	r3, [pc, #48]	@ (800df98 <vPortEnterCritical+0x60>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	b2db      	uxtb	r3, r3
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d00b      	beq.n	800df86 <vPortEnterCritical+0x4e>
	__asm volatile
 800df6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df72:	f383 8811 	msr	BASEPRI, r3
 800df76:	f3bf 8f6f 	isb	sy
 800df7a:	f3bf 8f4f 	dsb	sy
 800df7e:	603b      	str	r3, [r7, #0]
}
 800df80:	bf00      	nop
 800df82:	bf00      	nop
 800df84:	e7fd      	b.n	800df82 <vPortEnterCritical+0x4a>
	}
}
 800df86:	bf00      	nop
 800df88:	370c      	adds	r7, #12
 800df8a:	46bd      	mov	sp, r7
 800df8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df90:	4770      	bx	lr
 800df92:	bf00      	nop
 800df94:	24000014 	.word	0x24000014
 800df98:	e000ed04 	.word	0xe000ed04

0800df9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800df9c:	b480      	push	{r7}
 800df9e:	b083      	sub	sp, #12
 800dfa0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dfa2:	4b12      	ldr	r3, [pc, #72]	@ (800dfec <vPortExitCritical+0x50>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d10b      	bne.n	800dfc2 <vPortExitCritical+0x26>
	__asm volatile
 800dfaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfae:	f383 8811 	msr	BASEPRI, r3
 800dfb2:	f3bf 8f6f 	isb	sy
 800dfb6:	f3bf 8f4f 	dsb	sy
 800dfba:	607b      	str	r3, [r7, #4]
}
 800dfbc:	bf00      	nop
 800dfbe:	bf00      	nop
 800dfc0:	e7fd      	b.n	800dfbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dfc2:	4b0a      	ldr	r3, [pc, #40]	@ (800dfec <vPortExitCritical+0x50>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	3b01      	subs	r3, #1
 800dfc8:	4a08      	ldr	r2, [pc, #32]	@ (800dfec <vPortExitCritical+0x50>)
 800dfca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dfcc:	4b07      	ldr	r3, [pc, #28]	@ (800dfec <vPortExitCritical+0x50>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d105      	bne.n	800dfe0 <vPortExitCritical+0x44>
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	f383 8811 	msr	BASEPRI, r3
}
 800dfde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dfe0:	bf00      	nop
 800dfe2:	370c      	adds	r7, #12
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfea:	4770      	bx	lr
 800dfec:	24000014 	.word	0x24000014

0800dff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dff0:	f3ef 8009 	mrs	r0, PSP
 800dff4:	f3bf 8f6f 	isb	sy
 800dff8:	4b15      	ldr	r3, [pc, #84]	@ (800e050 <pxCurrentTCBConst>)
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	f01e 0f10 	tst.w	lr, #16
 800e000:	bf08      	it	eq
 800e002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e00a:	6010      	str	r0, [r2, #0]
 800e00c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e010:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e014:	f380 8811 	msr	BASEPRI, r0
 800e018:	f3bf 8f4f 	dsb	sy
 800e01c:	f3bf 8f6f 	isb	sy
 800e020:	f7fe ff74 	bl	800cf0c <vTaskSwitchContext>
 800e024:	f04f 0000 	mov.w	r0, #0
 800e028:	f380 8811 	msr	BASEPRI, r0
 800e02c:	bc09      	pop	{r0, r3}
 800e02e:	6819      	ldr	r1, [r3, #0]
 800e030:	6808      	ldr	r0, [r1, #0]
 800e032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e036:	f01e 0f10 	tst.w	lr, #16
 800e03a:	bf08      	it	eq
 800e03c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e040:	f380 8809 	msr	PSP, r0
 800e044:	f3bf 8f6f 	isb	sy
 800e048:	4770      	bx	lr
 800e04a:	bf00      	nop
 800e04c:	f3af 8000 	nop.w

0800e050 <pxCurrentTCBConst>:
 800e050:	24032874 	.word	0x24032874
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e054:	bf00      	nop
 800e056:	bf00      	nop

0800e058 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
	__asm volatile
 800e05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e062:	f383 8811 	msr	BASEPRI, r3
 800e066:	f3bf 8f6f 	isb	sy
 800e06a:	f3bf 8f4f 	dsb	sy
 800e06e:	607b      	str	r3, [r7, #4]
}
 800e070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e072:	f7fe fe91 	bl	800cd98 <xTaskIncrementTick>
 800e076:	4603      	mov	r3, r0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d003      	beq.n	800e084 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e07c:	4b06      	ldr	r3, [pc, #24]	@ (800e098 <xPortSysTickHandler+0x40>)
 800e07e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e082:	601a      	str	r2, [r3, #0]
 800e084:	2300      	movs	r3, #0
 800e086:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	f383 8811 	msr	BASEPRI, r3
}
 800e08e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e090:	bf00      	nop
 800e092:	3708      	adds	r7, #8
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}
 800e098:	e000ed04 	.word	0xe000ed04

0800e09c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e09c:	b480      	push	{r7}
 800e09e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e0a0:	4b0b      	ldr	r3, [pc, #44]	@ (800e0d0 <vPortSetupTimerInterrupt+0x34>)
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e0a6:	4b0b      	ldr	r3, [pc, #44]	@ (800e0d4 <vPortSetupTimerInterrupt+0x38>)
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e0ac:	4b0a      	ldr	r3, [pc, #40]	@ (800e0d8 <vPortSetupTimerInterrupt+0x3c>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	4a0a      	ldr	r2, [pc, #40]	@ (800e0dc <vPortSetupTimerInterrupt+0x40>)
 800e0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800e0b6:	099b      	lsrs	r3, r3, #6
 800e0b8:	4a09      	ldr	r2, [pc, #36]	@ (800e0e0 <vPortSetupTimerInterrupt+0x44>)
 800e0ba:	3b01      	subs	r3, #1
 800e0bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e0be:	4b04      	ldr	r3, [pc, #16]	@ (800e0d0 <vPortSetupTimerInterrupt+0x34>)
 800e0c0:	2207      	movs	r2, #7
 800e0c2:	601a      	str	r2, [r3, #0]
}
 800e0c4:	bf00      	nop
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0cc:	4770      	bx	lr
 800e0ce:	bf00      	nop
 800e0d0:	e000e010 	.word	0xe000e010
 800e0d4:	e000e018 	.word	0xe000e018
 800e0d8:	24000004 	.word	0x24000004
 800e0dc:	10624dd3 	.word	0x10624dd3
 800e0e0:	e000e014 	.word	0xe000e014

0800e0e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e0e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e0f4 <vPortEnableVFP+0x10>
 800e0e8:	6801      	ldr	r1, [r0, #0]
 800e0ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e0ee:	6001      	str	r1, [r0, #0]
 800e0f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e0f2:	bf00      	nop
 800e0f4:	e000ed88 	.word	0xe000ed88

0800e0f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b085      	sub	sp, #20
 800e0fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e0fe:	f3ef 8305 	mrs	r3, IPSR
 800e102:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	2b0f      	cmp	r3, #15
 800e108:	d915      	bls.n	800e136 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e10a:	4a18      	ldr	r2, [pc, #96]	@ (800e16c <vPortValidateInterruptPriority+0x74>)
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	4413      	add	r3, r2
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e114:	4b16      	ldr	r3, [pc, #88]	@ (800e170 <vPortValidateInterruptPriority+0x78>)
 800e116:	781b      	ldrb	r3, [r3, #0]
 800e118:	7afa      	ldrb	r2, [r7, #11]
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d20b      	bcs.n	800e136 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e122:	f383 8811 	msr	BASEPRI, r3
 800e126:	f3bf 8f6f 	isb	sy
 800e12a:	f3bf 8f4f 	dsb	sy
 800e12e:	607b      	str	r3, [r7, #4]
}
 800e130:	bf00      	nop
 800e132:	bf00      	nop
 800e134:	e7fd      	b.n	800e132 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e136:	4b0f      	ldr	r3, [pc, #60]	@ (800e174 <vPortValidateInterruptPriority+0x7c>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e13e:	4b0e      	ldr	r3, [pc, #56]	@ (800e178 <vPortValidateInterruptPriority+0x80>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	429a      	cmp	r2, r3
 800e144:	d90b      	bls.n	800e15e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e14a:	f383 8811 	msr	BASEPRI, r3
 800e14e:	f3bf 8f6f 	isb	sy
 800e152:	f3bf 8f4f 	dsb	sy
 800e156:	603b      	str	r3, [r7, #0]
}
 800e158:	bf00      	nop
 800e15a:	bf00      	nop
 800e15c:	e7fd      	b.n	800e15a <vPortValidateInterruptPriority+0x62>
	}
 800e15e:	bf00      	nop
 800e160:	3714      	adds	r7, #20
 800e162:	46bd      	mov	sp, r7
 800e164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e168:	4770      	bx	lr
 800e16a:	bf00      	nop
 800e16c:	e000e3f0 	.word	0xe000e3f0
 800e170:	24032ea0 	.word	0x24032ea0
 800e174:	e000ed0c 	.word	0xe000ed0c
 800e178:	24032ea4 	.word	0x24032ea4

0800e17c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b08a      	sub	sp, #40	@ 0x28
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e184:	2300      	movs	r3, #0
 800e186:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e188:	f7fe fd4a 	bl	800cc20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e18c:	4b5c      	ldr	r3, [pc, #368]	@ (800e300 <pvPortMalloc+0x184>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d101      	bne.n	800e198 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e194:	f000 f924 	bl	800e3e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e198:	4b5a      	ldr	r3, [pc, #360]	@ (800e304 <pvPortMalloc+0x188>)
 800e19a:	681a      	ldr	r2, [r3, #0]
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	4013      	ands	r3, r2
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	f040 8095 	bne.w	800e2d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d01e      	beq.n	800e1ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e1ac:	2208      	movs	r2, #8
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	4413      	add	r3, r2
 800e1b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f003 0307 	and.w	r3, r3, #7
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d015      	beq.n	800e1ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f023 0307 	bic.w	r3, r3, #7
 800e1c4:	3308      	adds	r3, #8
 800e1c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f003 0307 	and.w	r3, r3, #7
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d00b      	beq.n	800e1ea <pvPortMalloc+0x6e>
	__asm volatile
 800e1d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1d6:	f383 8811 	msr	BASEPRI, r3
 800e1da:	f3bf 8f6f 	isb	sy
 800e1de:	f3bf 8f4f 	dsb	sy
 800e1e2:	617b      	str	r3, [r7, #20]
}
 800e1e4:	bf00      	nop
 800e1e6:	bf00      	nop
 800e1e8:	e7fd      	b.n	800e1e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d06f      	beq.n	800e2d0 <pvPortMalloc+0x154>
 800e1f0:	4b45      	ldr	r3, [pc, #276]	@ (800e308 <pvPortMalloc+0x18c>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	687a      	ldr	r2, [r7, #4]
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d86a      	bhi.n	800e2d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e1fa:	4b44      	ldr	r3, [pc, #272]	@ (800e30c <pvPortMalloc+0x190>)
 800e1fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e1fe:	4b43      	ldr	r3, [pc, #268]	@ (800e30c <pvPortMalloc+0x190>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e204:	e004      	b.n	800e210 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e208:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e212:	685b      	ldr	r3, [r3, #4]
 800e214:	687a      	ldr	r2, [r7, #4]
 800e216:	429a      	cmp	r2, r3
 800e218:	d903      	bls.n	800e222 <pvPortMalloc+0xa6>
 800e21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d1f1      	bne.n	800e206 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e222:	4b37      	ldr	r3, [pc, #220]	@ (800e300 <pvPortMalloc+0x184>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e228:	429a      	cmp	r2, r3
 800e22a:	d051      	beq.n	800e2d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e22c:	6a3b      	ldr	r3, [r7, #32]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	2208      	movs	r2, #8
 800e232:	4413      	add	r3, r2
 800e234:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e238:	681a      	ldr	r2, [r3, #0]
 800e23a:	6a3b      	ldr	r3, [r7, #32]
 800e23c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e240:	685a      	ldr	r2, [r3, #4]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	1ad2      	subs	r2, r2, r3
 800e246:	2308      	movs	r3, #8
 800e248:	005b      	lsls	r3, r3, #1
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d920      	bls.n	800e290 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e24e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	4413      	add	r3, r2
 800e254:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e256:	69bb      	ldr	r3, [r7, #24]
 800e258:	f003 0307 	and.w	r3, r3, #7
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d00b      	beq.n	800e278 <pvPortMalloc+0xfc>
	__asm volatile
 800e260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e264:	f383 8811 	msr	BASEPRI, r3
 800e268:	f3bf 8f6f 	isb	sy
 800e26c:	f3bf 8f4f 	dsb	sy
 800e270:	613b      	str	r3, [r7, #16]
}
 800e272:	bf00      	nop
 800e274:	bf00      	nop
 800e276:	e7fd      	b.n	800e274 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e27a:	685a      	ldr	r2, [r3, #4]
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	1ad2      	subs	r2, r2, r3
 800e280:	69bb      	ldr	r3, [r7, #24]
 800e282:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e286:	687a      	ldr	r2, [r7, #4]
 800e288:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e28a:	69b8      	ldr	r0, [r7, #24]
 800e28c:	f000 f90c 	bl	800e4a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e290:	4b1d      	ldr	r3, [pc, #116]	@ (800e308 <pvPortMalloc+0x18c>)
 800e292:	681a      	ldr	r2, [r3, #0]
 800e294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e296:	685b      	ldr	r3, [r3, #4]
 800e298:	1ad3      	subs	r3, r2, r3
 800e29a:	4a1b      	ldr	r2, [pc, #108]	@ (800e308 <pvPortMalloc+0x18c>)
 800e29c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e29e:	4b1a      	ldr	r3, [pc, #104]	@ (800e308 <pvPortMalloc+0x18c>)
 800e2a0:	681a      	ldr	r2, [r3, #0]
 800e2a2:	4b1b      	ldr	r3, [pc, #108]	@ (800e310 <pvPortMalloc+0x194>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d203      	bcs.n	800e2b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e2aa:	4b17      	ldr	r3, [pc, #92]	@ (800e308 <pvPortMalloc+0x18c>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	4a18      	ldr	r2, [pc, #96]	@ (800e310 <pvPortMalloc+0x194>)
 800e2b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2b4:	685a      	ldr	r2, [r3, #4]
 800e2b6:	4b13      	ldr	r3, [pc, #76]	@ (800e304 <pvPortMalloc+0x188>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	431a      	orrs	r2, r3
 800e2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e2c6:	4b13      	ldr	r3, [pc, #76]	@ (800e314 <pvPortMalloc+0x198>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	3301      	adds	r3, #1
 800e2cc:	4a11      	ldr	r2, [pc, #68]	@ (800e314 <pvPortMalloc+0x198>)
 800e2ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e2d0:	f7fe fcb4 	bl	800cc3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e2d4:	69fb      	ldr	r3, [r7, #28]
 800e2d6:	f003 0307 	and.w	r3, r3, #7
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d00b      	beq.n	800e2f6 <pvPortMalloc+0x17a>
	__asm volatile
 800e2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2e2:	f383 8811 	msr	BASEPRI, r3
 800e2e6:	f3bf 8f6f 	isb	sy
 800e2ea:	f3bf 8f4f 	dsb	sy
 800e2ee:	60fb      	str	r3, [r7, #12]
}
 800e2f0:	bf00      	nop
 800e2f2:	bf00      	nop
 800e2f4:	e7fd      	b.n	800e2f2 <pvPortMalloc+0x176>
	return pvReturn;
 800e2f6:	69fb      	ldr	r3, [r7, #28]
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3728      	adds	r7, #40	@ 0x28
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}
 800e300:	24063bf0 	.word	0x24063bf0
 800e304:	24063c04 	.word	0x24063c04
 800e308:	24063bf4 	.word	0x24063bf4
 800e30c:	24063be8 	.word	0x24063be8
 800e310:	24063bf8 	.word	0x24063bf8
 800e314:	24063bfc 	.word	0x24063bfc

0800e318 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b086      	sub	sp, #24
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d04f      	beq.n	800e3ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e32a:	2308      	movs	r3, #8
 800e32c:	425b      	negs	r3, r3
 800e32e:	697a      	ldr	r2, [r7, #20]
 800e330:	4413      	add	r3, r2
 800e332:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e338:	693b      	ldr	r3, [r7, #16]
 800e33a:	685a      	ldr	r2, [r3, #4]
 800e33c:	4b25      	ldr	r3, [pc, #148]	@ (800e3d4 <vPortFree+0xbc>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4013      	ands	r3, r2
 800e342:	2b00      	cmp	r3, #0
 800e344:	d10b      	bne.n	800e35e <vPortFree+0x46>
	__asm volatile
 800e346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e34a:	f383 8811 	msr	BASEPRI, r3
 800e34e:	f3bf 8f6f 	isb	sy
 800e352:	f3bf 8f4f 	dsb	sy
 800e356:	60fb      	str	r3, [r7, #12]
}
 800e358:	bf00      	nop
 800e35a:	bf00      	nop
 800e35c:	e7fd      	b.n	800e35a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e35e:	693b      	ldr	r3, [r7, #16]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d00b      	beq.n	800e37e <vPortFree+0x66>
	__asm volatile
 800e366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e36a:	f383 8811 	msr	BASEPRI, r3
 800e36e:	f3bf 8f6f 	isb	sy
 800e372:	f3bf 8f4f 	dsb	sy
 800e376:	60bb      	str	r3, [r7, #8]
}
 800e378:	bf00      	nop
 800e37a:	bf00      	nop
 800e37c:	e7fd      	b.n	800e37a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	685a      	ldr	r2, [r3, #4]
 800e382:	4b14      	ldr	r3, [pc, #80]	@ (800e3d4 <vPortFree+0xbc>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	4013      	ands	r3, r2
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d01e      	beq.n	800e3ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d11a      	bne.n	800e3ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e394:	693b      	ldr	r3, [r7, #16]
 800e396:	685a      	ldr	r2, [r3, #4]
 800e398:	4b0e      	ldr	r3, [pc, #56]	@ (800e3d4 <vPortFree+0xbc>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	43db      	mvns	r3, r3
 800e39e:	401a      	ands	r2, r3
 800e3a0:	693b      	ldr	r3, [r7, #16]
 800e3a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e3a4:	f7fe fc3c 	bl	800cc20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	685a      	ldr	r2, [r3, #4]
 800e3ac:	4b0a      	ldr	r3, [pc, #40]	@ (800e3d8 <vPortFree+0xc0>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	4413      	add	r3, r2
 800e3b2:	4a09      	ldr	r2, [pc, #36]	@ (800e3d8 <vPortFree+0xc0>)
 800e3b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e3b6:	6938      	ldr	r0, [r7, #16]
 800e3b8:	f000 f876 	bl	800e4a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e3bc:	4b07      	ldr	r3, [pc, #28]	@ (800e3dc <vPortFree+0xc4>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	3301      	adds	r3, #1
 800e3c2:	4a06      	ldr	r2, [pc, #24]	@ (800e3dc <vPortFree+0xc4>)
 800e3c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e3c6:	f7fe fc39 	bl	800cc3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e3ca:	bf00      	nop
 800e3cc:	3718      	adds	r7, #24
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}
 800e3d2:	bf00      	nop
 800e3d4:	24063c04 	.word	0x24063c04
 800e3d8:	24063bf4 	.word	0x24063bf4
 800e3dc:	24063c00 	.word	0x24063c00

0800e3e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b085      	sub	sp, #20
 800e3e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e3e6:	4b29      	ldr	r3, [pc, #164]	@ (800e48c <prvHeapInit+0xac>)
 800e3e8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e3ea:	4b29      	ldr	r3, [pc, #164]	@ (800e490 <prvHeapInit+0xb0>)
 800e3ec:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	f003 0307 	and.w	r3, r3, #7
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d00c      	beq.n	800e412 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	3307      	adds	r3, #7
 800e3fc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	f023 0307 	bic.w	r3, r3, #7
 800e404:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e406:	68ba      	ldr	r2, [r7, #8]
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	1ad3      	subs	r3, r2, r3
 800e40c:	4a20      	ldr	r2, [pc, #128]	@ (800e490 <prvHeapInit+0xb0>)
 800e40e:	4413      	add	r3, r2
 800e410:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e416:	4a1f      	ldr	r2, [pc, #124]	@ (800e494 <prvHeapInit+0xb4>)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e41c:	4b1d      	ldr	r3, [pc, #116]	@ (800e494 <prvHeapInit+0xb4>)
 800e41e:	2200      	movs	r2, #0
 800e420:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	68ba      	ldr	r2, [r7, #8]
 800e426:	4413      	add	r3, r2
 800e428:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e42a:	2208      	movs	r2, #8
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	1a9b      	subs	r3, r3, r2
 800e430:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	f023 0307 	bic.w	r3, r3, #7
 800e438:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	4a16      	ldr	r2, [pc, #88]	@ (800e498 <prvHeapInit+0xb8>)
 800e43e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e440:	4b15      	ldr	r3, [pc, #84]	@ (800e498 <prvHeapInit+0xb8>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	2200      	movs	r2, #0
 800e446:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e448:	4b13      	ldr	r3, [pc, #76]	@ (800e498 <prvHeapInit+0xb8>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	2200      	movs	r2, #0
 800e44e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	68fa      	ldr	r2, [r7, #12]
 800e458:	1ad2      	subs	r2, r2, r3
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e45e:	4b0e      	ldr	r3, [pc, #56]	@ (800e498 <prvHeapInit+0xb8>)
 800e460:	681a      	ldr	r2, [r3, #0]
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	685b      	ldr	r3, [r3, #4]
 800e46a:	4a0c      	ldr	r2, [pc, #48]	@ (800e49c <prvHeapInit+0xbc>)
 800e46c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	685b      	ldr	r3, [r3, #4]
 800e472:	4a0b      	ldr	r2, [pc, #44]	@ (800e4a0 <prvHeapInit+0xc0>)
 800e474:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e476:	4b0b      	ldr	r3, [pc, #44]	@ (800e4a4 <prvHeapInit+0xc4>)
 800e478:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e47c:	601a      	str	r2, [r3, #0]
}
 800e47e:	bf00      	nop
 800e480:	3714      	adds	r7, #20
 800e482:	46bd      	mov	sp, r7
 800e484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e488:	4770      	bx	lr
 800e48a:	bf00      	nop
 800e48c:	00030d40 	.word	0x00030d40
 800e490:	24032ea8 	.word	0x24032ea8
 800e494:	24063be8 	.word	0x24063be8
 800e498:	24063bf0 	.word	0x24063bf0
 800e49c:	24063bf8 	.word	0x24063bf8
 800e4a0:	24063bf4 	.word	0x24063bf4
 800e4a4:	24063c04 	.word	0x24063c04

0800e4a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e4a8:	b480      	push	{r7}
 800e4aa:	b085      	sub	sp, #20
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e4b0:	4b28      	ldr	r3, [pc, #160]	@ (800e554 <prvInsertBlockIntoFreeList+0xac>)
 800e4b2:	60fb      	str	r3, [r7, #12]
 800e4b4:	e002      	b.n	800e4bc <prvInsertBlockIntoFreeList+0x14>
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	60fb      	str	r3, [r7, #12]
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	687a      	ldr	r2, [r7, #4]
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d8f7      	bhi.n	800e4b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	685b      	ldr	r3, [r3, #4]
 800e4ce:	68ba      	ldr	r2, [r7, #8]
 800e4d0:	4413      	add	r3, r2
 800e4d2:	687a      	ldr	r2, [r7, #4]
 800e4d4:	429a      	cmp	r2, r3
 800e4d6:	d108      	bne.n	800e4ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	685a      	ldr	r2, [r3, #4]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	441a      	add	r2, r3
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	685b      	ldr	r3, [r3, #4]
 800e4f2:	68ba      	ldr	r2, [r7, #8]
 800e4f4:	441a      	add	r2, r3
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d118      	bne.n	800e530 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	681a      	ldr	r2, [r3, #0]
 800e502:	4b15      	ldr	r3, [pc, #84]	@ (800e558 <prvInsertBlockIntoFreeList+0xb0>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	429a      	cmp	r2, r3
 800e508:	d00d      	beq.n	800e526 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	685a      	ldr	r2, [r3, #4]
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	685b      	ldr	r3, [r3, #4]
 800e514:	441a      	add	r2, r3
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	681a      	ldr	r2, [r3, #0]
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	601a      	str	r2, [r3, #0]
 800e524:	e008      	b.n	800e538 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e526:	4b0c      	ldr	r3, [pc, #48]	@ (800e558 <prvInsertBlockIntoFreeList+0xb0>)
 800e528:	681a      	ldr	r2, [r3, #0]
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	601a      	str	r2, [r3, #0]
 800e52e:	e003      	b.n	800e538 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	681a      	ldr	r2, [r3, #0]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e538:	68fa      	ldr	r2, [r7, #12]
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d002      	beq.n	800e546 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	687a      	ldr	r2, [r7, #4]
 800e544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e546:	bf00      	nop
 800e548:	3714      	adds	r7, #20
 800e54a:	46bd      	mov	sp, r7
 800e54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e550:	4770      	bx	lr
 800e552:	bf00      	nop
 800e554:	24063be8 	.word	0x24063be8
 800e558:	24063bf0 	.word	0x24063bf0

0800e55c <_rclc_check_for_new_data>:
 800e55c:	2800      	cmp	r0, #0
 800e55e:	d046      	beq.n	800e5ee <_rclc_check_for_new_data+0x92>
 800e560:	4603      	mov	r3, r0
 800e562:	b530      	push	{r4, r5, lr}
 800e564:	7802      	ldrb	r2, [r0, #0]
 800e566:	b085      	sub	sp, #20
 800e568:	2a0a      	cmp	r2, #10
 800e56a:	d842      	bhi.n	800e5f2 <_rclc_check_for_new_data+0x96>
 800e56c:	e8df f002 	tbb	[pc, r2]
 800e570:	14181212 	.word	0x14181212
 800e574:	06060614 	.word	0x06060614
 800e578:	2e1a      	.short	0x2e1a
 800e57a:	16          	.byte	0x16
 800e57b:	00          	.byte	0x00
 800e57c:	6a0a      	ldr	r2, [r1, #32]
 800e57e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800e580:	2000      	movs	r0, #0
 800e582:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e586:	1a12      	subs	r2, r2, r0
 800e588:	bf18      	it	ne
 800e58a:	2201      	movne	r2, #1
 800e58c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800e590:	b005      	add	sp, #20
 800e592:	bd30      	pop	{r4, r5, pc}
 800e594:	680a      	ldr	r2, [r1, #0]
 800e596:	e7f2      	b.n	800e57e <_rclc_check_for_new_data+0x22>
 800e598:	698a      	ldr	r2, [r1, #24]
 800e59a:	e7f0      	b.n	800e57e <_rclc_check_for_new_data+0x22>
 800e59c:	688a      	ldr	r2, [r1, #8]
 800e59e:	e7ee      	b.n	800e57e <_rclc_check_for_new_data+0x22>
 800e5a0:	690a      	ldr	r2, [r1, #16]
 800e5a2:	e7ec      	b.n	800e57e <_rclc_check_for_new_data+0x22>
 800e5a4:	685c      	ldr	r4, [r3, #4]
 800e5a6:	4608      	mov	r0, r1
 800e5a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e5ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e5b0:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 800e5b4:	f104 0110 	add.w	r1, r4, #16
 800e5b8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e5bc:	9500      	str	r5, [sp, #0]
 800e5be:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800e5c2:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800e5c6:	f003 fb7b 	bl	8011cc0 <rcl_action_client_wait_set_get_entities_ready>
 800e5ca:	e7e1      	b.n	800e590 <_rclc_check_for_new_data+0x34>
 800e5cc:	685c      	ldr	r4, [r3, #4]
 800e5ce:	4608      	mov	r0, r1
 800e5d0:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 800e5d4:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 800e5d8:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800e5dc:	e9cd 2100 	strd	r2, r1, [sp]
 800e5e0:	f104 0220 	add.w	r2, r4, #32
 800e5e4:	f104 0110 	add.w	r1, r4, #16
 800e5e8:	f003 fd84 	bl	80120f4 <rcl_action_server_wait_set_get_entities_ready>
 800e5ec:	e7d0      	b.n	800e590 <_rclc_check_for_new_data+0x34>
 800e5ee:	200b      	movs	r0, #11
 800e5f0:	4770      	bx	lr
 800e5f2:	2001      	movs	r0, #1
 800e5f4:	e7cc      	b.n	800e590 <_rclc_check_for_new_data+0x34>
 800e5f6:	bf00      	nop

0800e5f8 <_rclc_take_new_data>:
 800e5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5fa:	b09b      	sub	sp, #108	@ 0x6c
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	f000 8088 	beq.w	800e712 <_rclc_take_new_data+0x11a>
 800e602:	7803      	ldrb	r3, [r0, #0]
 800e604:	4604      	mov	r4, r0
 800e606:	2b0a      	cmp	r3, #10
 800e608:	f200 8167 	bhi.w	800e8da <_rclc_take_new_data+0x2e2>
 800e60c:	e8df f003 	tbb	[pc, r3]
 800e610:	44152d2d 	.word	0x44152d2d
 800e614:	19191944 	.word	0x19191944
 800e618:	065a      	.short	0x065a
 800e61a:	15          	.byte	0x15
 800e61b:	00          	.byte	0x00
 800e61c:	6840      	ldr	r0, [r0, #4]
 800e61e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800e622:	2b00      	cmp	r3, #0
 800e624:	f040 80b2 	bne.w	800e78c <_rclc_take_new_data+0x194>
 800e628:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	f040 80e4 	bne.w	800e7fa <_rclc_take_new_data+0x202>
 800e632:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800e636:	2b00      	cmp	r3, #0
 800e638:	d16f      	bne.n	800e71a <_rclc_take_new_data+0x122>
 800e63a:	2500      	movs	r5, #0
 800e63c:	4628      	mov	r0, r5
 800e63e:	b01b      	add	sp, #108	@ 0x6c
 800e640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e642:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e644:	6a0b      	ldr	r3, [r1, #32]
 800e646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d0f5      	beq.n	800e63a <_rclc_take_new_data+0x42>
 800e64e:	6882      	ldr	r2, [r0, #8]
 800e650:	f100 0110 	add.w	r1, r0, #16
 800e654:	6840      	ldr	r0, [r0, #4]
 800e656:	f001 fff1 	bl	801063c <rcl_take_request>
 800e65a:	4605      	mov	r5, r0
 800e65c:	2800      	cmp	r0, #0
 800e65e:	d0ec      	beq.n	800e63a <_rclc_take_new_data+0x42>
 800e660:	f240 2359 	movw	r3, #601	@ 0x259
 800e664:	4298      	cmp	r0, r3
 800e666:	d013      	beq.n	800e690 <_rclc_take_new_data+0x98>
 800e668:	e029      	b.n	800e6be <_rclc_take_new_data+0xc6>
 800e66a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e66c:	680b      	ldr	r3, [r1, #0]
 800e66e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d0e1      	beq.n	800e63a <_rclc_take_new_data+0x42>
 800e676:	2300      	movs	r3, #0
 800e678:	aa0a      	add	r2, sp, #40	@ 0x28
 800e67a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800e67e:	f002 f921 	bl	80108c4 <rcl_take>
 800e682:	4605      	mov	r5, r0
 800e684:	2800      	cmp	r0, #0
 800e686:	d0d9      	beq.n	800e63c <_rclc_take_new_data+0x44>
 800e688:	f240 1391 	movw	r3, #401	@ 0x191
 800e68c:	4298      	cmp	r0, r3
 800e68e:	d116      	bne.n	800e6be <_rclc_take_new_data+0xc6>
 800e690:	2300      	movs	r3, #0
 800e692:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800e696:	e7d1      	b.n	800e63c <_rclc_take_new_data+0x44>
 800e698:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e69a:	698b      	ldr	r3, [r1, #24]
 800e69c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d0ca      	beq.n	800e63a <_rclc_take_new_data+0x42>
 800e6a4:	6882      	ldr	r2, [r0, #8]
 800e6a6:	f100 0110 	add.w	r1, r0, #16
 800e6aa:	6840      	ldr	r0, [r0, #4]
 800e6ac:	f001 f958 	bl	800f960 <rcl_take_response>
 800e6b0:	4605      	mov	r5, r0
 800e6b2:	2800      	cmp	r0, #0
 800e6b4:	d0c1      	beq.n	800e63a <_rclc_take_new_data+0x42>
 800e6b6:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800e6ba:	4298      	cmp	r0, r3
 800e6bc:	d0be      	beq.n	800e63c <_rclc_take_new_data+0x44>
 800e6be:	f000 fe97 	bl	800f3f0 <rcutils_reset_error>
 800e6c2:	e7bb      	b.n	800e63c <_rclc_take_new_data+0x44>
 800e6c4:	6840      	ldr	r0, [r0, #4]
 800e6c6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d17d      	bne.n	800e7ca <_rclc_take_new_data+0x1d2>
 800e6ce:	69c3      	ldr	r3, [r0, #28]
 800e6d0:	b11b      	cbz	r3, 800e6da <_rclc_take_new_data+0xe2>
 800e6d2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d144      	bne.n	800e764 <_rclc_take_new_data+0x16c>
 800e6da:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	f040 80ac 	bne.w	800e83c <_rclc_take_new_data+0x244>
 800e6e4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d0a6      	beq.n	800e63a <_rclc_take_new_data+0x42>
 800e6ec:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800e6ee:	a90a      	add	r1, sp, #40	@ 0x28
 800e6f0:	3010      	adds	r0, #16
 800e6f2:	f003 f9bd 	bl	8011a70 <rcl_action_take_result_response>
 800e6f6:	4605      	mov	r5, r0
 800e6f8:	2800      	cmp	r0, #0
 800e6fa:	d1e0      	bne.n	800e6be <_rclc_take_new_data+0xc6>
 800e6fc:	6860      	ldr	r0, [r4, #4]
 800e6fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e702:	f003 fe27 	bl	8012354 <rclc_action_find_handle_by_result_request_sequence_number>
 800e706:	2800      	cmp	r0, #0
 800e708:	d098      	beq.n	800e63c <_rclc_take_new_data+0x44>
 800e70a:	2301      	movs	r3, #1
 800e70c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800e710:	e794      	b.n	800e63c <_rclc_take_new_data+0x44>
 800e712:	250b      	movs	r5, #11
 800e714:	4628      	mov	r0, r5
 800e716:	b01b      	add	sp, #108	@ 0x6c
 800e718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e71a:	ae04      	add	r6, sp, #16
 800e71c:	3010      	adds	r0, #16
 800e71e:	aa0a      	add	r2, sp, #40	@ 0x28
 800e720:	4631      	mov	r1, r6
 800e722:	f003 fc1b 	bl	8011f5c <rcl_action_take_cancel_request>
 800e726:	4605      	mov	r5, r0
 800e728:	2800      	cmp	r0, #0
 800e72a:	d1c8      	bne.n	800e6be <_rclc_take_new_data+0xc6>
 800e72c:	a90a      	add	r1, sp, #40	@ 0x28
 800e72e:	6860      	ldr	r0, [r4, #4]
 800e730:	f003 fdd0 	bl	80122d4 <rclc_action_find_goal_handle_by_uuid>
 800e734:	4607      	mov	r7, r0
 800e736:	2800      	cmp	r0, #0
 800e738:	f000 80bb 	beq.w	800e8b2 <_rclc_take_new_data+0x2ba>
 800e73c:	2101      	movs	r1, #1
 800e73e:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800e742:	f003 fd51 	bl	80121e8 <rcl_action_transition_goal_state>
 800e746:	2803      	cmp	r0, #3
 800e748:	4684      	mov	ip, r0
 800e74a:	f040 80a7 	bne.w	800e89c <_rclc_take_new_data+0x2a4>
 800e74e:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800e752:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e756:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e75a:	e884 0003 	stmia.w	r4, {r0, r1}
 800e75e:	f887 c008 	strb.w	ip, [r7, #8]
 800e762:	e76b      	b.n	800e63c <_rclc_take_new_data+0x44>
 800e764:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e766:	3010      	adds	r0, #16
 800e768:	f003 fa02 	bl	8011b70 <rcl_action_take_feedback>
 800e76c:	4605      	mov	r5, r0
 800e76e:	2800      	cmp	r0, #0
 800e770:	d1a5      	bne.n	800e6be <_rclc_take_new_data+0xc6>
 800e772:	6860      	ldr	r0, [r4, #4]
 800e774:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e776:	f003 fdad 	bl	80122d4 <rclc_action_find_goal_handle_by_uuid>
 800e77a:	4603      	mov	r3, r0
 800e77c:	2800      	cmp	r0, #0
 800e77e:	f000 80a3 	beq.w	800e8c8 <_rclc_take_new_data+0x2d0>
 800e782:	2201      	movs	r2, #1
 800e784:	6860      	ldr	r0, [r4, #4]
 800e786:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800e78a:	e7a6      	b.n	800e6da <_rclc_take_new_data+0xe2>
 800e78c:	f003 fd7c 	bl	8012288 <rclc_action_take_goal_handle>
 800e790:	4606      	mov	r6, r0
 800e792:	6860      	ldr	r0, [r4, #4]
 800e794:	2e00      	cmp	r6, #0
 800e796:	f43f af47 	beq.w	800e628 <_rclc_take_new_data+0x30>
 800e79a:	6070      	str	r0, [r6, #4]
 800e79c:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800e7a0:	69f2      	ldr	r2, [r6, #28]
 800e7a2:	3010      	adds	r0, #16
 800e7a4:	f003 fb22 	bl	8011dec <rcl_action_take_goal_request>
 800e7a8:	4605      	mov	r5, r0
 800e7aa:	2800      	cmp	r0, #0
 800e7ac:	f040 808e 	bne.w	800e8cc <_rclc_take_new_data+0x2d4>
 800e7b0:	69f7      	ldr	r7, [r6, #28]
 800e7b2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e7b4:	7235      	strb	r5, [r6, #8]
 800e7b6:	f8c6 0009 	str.w	r0, [r6, #9]
 800e7ba:	f8c6 100d 	str.w	r1, [r6, #13]
 800e7be:	6860      	ldr	r0, [r4, #4]
 800e7c0:	f8c6 2011 	str.w	r2, [r6, #17]
 800e7c4:	f8c6 3015 	str.w	r3, [r6, #21]
 800e7c8:	e72e      	b.n	800e628 <_rclc_take_new_data+0x30>
 800e7ca:	aa04      	add	r2, sp, #16
 800e7cc:	a90a      	add	r1, sp, #40	@ 0x28
 800e7ce:	3010      	adds	r0, #16
 800e7d0:	f003 f8d6 	bl	8011980 <rcl_action_take_goal_response>
 800e7d4:	4605      	mov	r5, r0
 800e7d6:	2800      	cmp	r0, #0
 800e7d8:	f47f af71 	bne.w	800e6be <_rclc_take_new_data+0xc6>
 800e7dc:	6860      	ldr	r0, [r4, #4]
 800e7de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e7e2:	f003 fda5 	bl	8012330 <rclc_action_find_handle_by_goal_request_sequence_number>
 800e7e6:	b130      	cbz	r0, 800e7f6 <_rclc_take_new_data+0x1fe>
 800e7e8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e7ec:	2201      	movs	r2, #1
 800e7ee:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800e7f2:	f880 2020 	strb.w	r2, [r0, #32]
 800e7f6:	6860      	ldr	r0, [r4, #4]
 800e7f8:	e769      	b.n	800e6ce <_rclc_take_new_data+0xd6>
 800e7fa:	3010      	adds	r0, #16
 800e7fc:	aa04      	add	r2, sp, #16
 800e7fe:	a90a      	add	r1, sp, #40	@ 0x28
 800e800:	f003 fb6c 	bl	8011edc <rcl_action_take_result_request>
 800e804:	4605      	mov	r5, r0
 800e806:	2800      	cmp	r0, #0
 800e808:	f47f af59 	bne.w	800e6be <_rclc_take_new_data+0xc6>
 800e80c:	a904      	add	r1, sp, #16
 800e80e:	6860      	ldr	r0, [r4, #4]
 800e810:	f003 fd60 	bl	80122d4 <rclc_action_find_goal_handle_by_uuid>
 800e814:	4607      	mov	r7, r0
 800e816:	b160      	cbz	r0, 800e832 <_rclc_take_new_data+0x23a>
 800e818:	ad0a      	add	r5, sp, #40	@ 0x28
 800e81a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800e81e:	f04f 0c02 	mov.w	ip, #2
 800e822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e824:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e826:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e82a:	e886 0003 	stmia.w	r6, {r0, r1}
 800e82e:	f887 c008 	strb.w	ip, [r7, #8]
 800e832:	6860      	ldr	r0, [r4, #4]
 800e834:	2300      	movs	r3, #0
 800e836:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800e83a:	e6fa      	b.n	800e632 <_rclc_take_new_data+0x3a>
 800e83c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800e840:	a90a      	add	r1, sp, #40	@ 0x28
 800e842:	3010      	adds	r0, #16
 800e844:	f003 f954 	bl	8011af0 <rcl_action_take_cancel_response>
 800e848:	4605      	mov	r5, r0
 800e84a:	2800      	cmp	r0, #0
 800e84c:	f47f af37 	bne.w	800e6be <_rclc_take_new_data+0xc6>
 800e850:	6860      	ldr	r0, [r4, #4]
 800e852:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e856:	f003 fd8f 	bl	8012378 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800e85a:	4606      	mov	r6, r0
 800e85c:	6860      	ldr	r0, [r4, #4]
 800e85e:	2e00      	cmp	r6, #0
 800e860:	f43f af40 	beq.w	800e6e4 <_rclc_take_new_data+0xec>
 800e864:	2701      	movs	r7, #1
 800e866:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e868:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	f43f af3a 	beq.w	800e6e4 <_rclc_take_new_data+0xec>
 800e870:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e872:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800e876:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800e87a:	f003 fd2b 	bl	80122d4 <rclc_action_find_goal_handle_by_uuid>
 800e87e:	b138      	cbz	r0, 800e890 <_rclc_take_new_data+0x298>
 800e880:	6860      	ldr	r0, [r4, #4]
 800e882:	3501      	adds	r5, #1
 800e884:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800e888:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e88a:	42ab      	cmp	r3, r5
 800e88c:	d8f0      	bhi.n	800e870 <_rclc_take_new_data+0x278>
 800e88e:	e729      	b.n	800e6e4 <_rclc_take_new_data+0xec>
 800e890:	6860      	ldr	r0, [r4, #4]
 800e892:	3501      	adds	r5, #1
 800e894:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e896:	42ab      	cmp	r3, r5
 800e898:	d8ea      	bhi.n	800e870 <_rclc_take_new_data+0x278>
 800e89a:	e723      	b.n	800e6e4 <_rclc_take_new_data+0xec>
 800e89c:	ab06      	add	r3, sp, #24
 800e89e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e8a0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e8a4:	2103      	movs	r1, #3
 800e8a6:	6860      	ldr	r0, [r4, #4]
 800e8a8:	e896 000c 	ldmia.w	r6, {r2, r3}
 800e8ac:	f003 fdd8 	bl	8012460 <rclc_action_server_goal_cancel_reject>
 800e8b0:	e6c4      	b.n	800e63c <_rclc_take_new_data+0x44>
 800e8b2:	ab06      	add	r3, sp, #24
 800e8b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e8b6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e8ba:	2102      	movs	r1, #2
 800e8bc:	6860      	ldr	r0, [r4, #4]
 800e8be:	e896 000c 	ldmia.w	r6, {r2, r3}
 800e8c2:	f003 fdcd 	bl	8012460 <rclc_action_server_goal_cancel_reject>
 800e8c6:	e6b9      	b.n	800e63c <_rclc_take_new_data+0x44>
 800e8c8:	6860      	ldr	r0, [r4, #4]
 800e8ca:	e706      	b.n	800e6da <_rclc_take_new_data+0xe2>
 800e8cc:	4631      	mov	r1, r6
 800e8ce:	6860      	ldr	r0, [r4, #4]
 800e8d0:	f003 fcea 	bl	80122a8 <rclc_action_remove_used_goal_handle>
 800e8d4:	f000 fd8c 	bl	800f3f0 <rcutils_reset_error>
 800e8d8:	e6b0      	b.n	800e63c <_rclc_take_new_data+0x44>
 800e8da:	2501      	movs	r5, #1
 800e8dc:	e6ae      	b.n	800e63c <_rclc_take_new_data+0x44>
 800e8de:	bf00      	nop

0800e8e0 <_rclc_execute.part.0>:
 800e8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8e2:	7803      	ldrb	r3, [r0, #0]
 800e8e4:	b085      	sub	sp, #20
 800e8e6:	4604      	mov	r4, r0
 800e8e8:	2b0a      	cmp	r3, #10
 800e8ea:	f200 8139 	bhi.w	800eb60 <_rclc_execute.part.0+0x280>
 800e8ee:	e8df f003 	tbb	[pc, r3]
 800e8f2:	4268      	.short	0x4268
 800e8f4:	06a75b4d 	.word	0x06a75b4d
 800e8f8:	721d0606 	.word	0x721d0606
 800e8fc:	62          	.byte	0x62
 800e8fd:	00          	.byte	0x00
 800e8fe:	2b06      	cmp	r3, #6
 800e900:	f000 8126 	beq.w	800eb50 <_rclc_execute.part.0+0x270>
 800e904:	2b07      	cmp	r3, #7
 800e906:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e908:	f040 811c 	bne.w	800eb44 <_rclc_execute.part.0+0x264>
 800e90c:	f104 0510 	add.w	r5, r4, #16
 800e910:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800e914:	6880      	ldr	r0, [r0, #8]
 800e916:	4798      	blx	r3
 800e918:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800e91a:	4629      	mov	r1, r5
 800e91c:	6860      	ldr	r0, [r4, #4]
 800e91e:	f001 fecd 	bl	80106bc <rcl_send_response>
 800e922:	4604      	mov	r4, r0
 800e924:	b378      	cbz	r0, 800e986 <_rclc_execute.part.0+0xa6>
 800e926:	f000 fd63 	bl	800f3f0 <rcutils_reset_error>
 800e92a:	e02c      	b.n	800e986 <_rclc_execute.part.0+0xa6>
 800e92c:	6840      	ldr	r0, [r0, #4]
 800e92e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800e932:	2b00      	cmp	r3, #0
 800e934:	f000 808e 	beq.w	800ea54 <_rclc_execute.part.0+0x174>
 800e938:	2600      	movs	r6, #0
 800e93a:	2701      	movs	r7, #1
 800e93c:	e004      	b.n	800e948 <_rclc_execute.part.0+0x68>
 800e93e:	f003 fc7d 	bl	801223c <rclc_action_send_result_request>
 800e942:	b998      	cbnz	r0, 800e96c <_rclc_execute.part.0+0x8c>
 800e944:	722f      	strb	r7, [r5, #8]
 800e946:	6860      	ldr	r0, [r4, #4]
 800e948:	f003 fd28 	bl	801239c <rclc_action_find_first_handle_with_goal_response>
 800e94c:	4605      	mov	r5, r0
 800e94e:	2800      	cmp	r0, #0
 800e950:	d07f      	beq.n	800ea52 <_rclc_execute.part.0+0x172>
 800e952:	6863      	ldr	r3, [r4, #4]
 800e954:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e956:	699b      	ldr	r3, [r3, #24]
 800e958:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800e95c:	f885 6020 	strb.w	r6, [r5, #32]
 800e960:	4798      	blx	r3
 800e962:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800e966:	4628      	mov	r0, r5
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d1e8      	bne.n	800e93e <_rclc_execute.part.0+0x5e>
 800e96c:	6860      	ldr	r0, [r4, #4]
 800e96e:	4629      	mov	r1, r5
 800e970:	f003 fc9a 	bl	80122a8 <rclc_action_remove_used_goal_handle>
 800e974:	e7e7      	b.n	800e946 <_rclc_execute.part.0+0x66>
 800e976:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800e97a:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 800e97e:	b100      	cbz	r0, 800e982 <_rclc_execute.part.0+0xa2>
 800e980:	68a0      	ldr	r0, [r4, #8]
 800e982:	2400      	movs	r4, #0
 800e984:	4798      	blx	r3
 800e986:	4620      	mov	r0, r4
 800e988:	b005      	add	sp, #20
 800e98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e98c:	6840      	ldr	r0, [r0, #4]
 800e98e:	f002 f8ad 	bl	8010aec <rcl_timer_call>
 800e992:	f240 3321 	movw	r3, #801	@ 0x321
 800e996:	4604      	mov	r4, r0
 800e998:	4298      	cmp	r0, r3
 800e99a:	d001      	beq.n	800e9a0 <_rclc_execute.part.0+0xc0>
 800e99c:	2800      	cmp	r0, #0
 800e99e:	d1c2      	bne.n	800e926 <_rclc_execute.part.0+0x46>
 800e9a0:	2400      	movs	r4, #0
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	b005      	add	sp, #20
 800e9a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9a8:	2400      	movs	r4, #0
 800e9aa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e9ac:	6880      	ldr	r0, [r0, #8]
 800e9ae:	4798      	blx	r3
 800e9b0:	4620      	mov	r0, r4
 800e9b2:	b005      	add	sp, #20
 800e9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9b6:	2400      	movs	r4, #0
 800e9b8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e9ba:	4798      	blx	r3
 800e9bc:	4620      	mov	r0, r4
 800e9be:	b005      	add	sp, #20
 800e9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9c2:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800e9c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e9c8:	b100      	cbz	r0, 800e9cc <_rclc_execute.part.0+0xec>
 800e9ca:	68a0      	ldr	r0, [r4, #8]
 800e9cc:	2400      	movs	r4, #0
 800e9ce:	4798      	blx	r3
 800e9d0:	4620      	mov	r0, r4
 800e9d2:	b005      	add	sp, #20
 800e9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9d6:	6840      	ldr	r0, [r0, #4]
 800e9d8:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800e9dc:	bb3b      	cbnz	r3, 800ea2e <_rclc_execute.part.0+0x14e>
 800e9de:	f890 3020 	ldrb.w	r3, [r0, #32]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d07d      	beq.n	800eae2 <_rclc_execute.part.0+0x202>
 800e9e6:	f640 0634 	movw	r6, #2100	@ 0x834
 800e9ea:	2701      	movs	r7, #1
 800e9ec:	e007      	b.n	800e9fe <_rclc_execute.part.0+0x11e>
 800e9ee:	4628      	mov	r0, r5
 800e9f0:	f003 fcec 	bl	80123cc <rclc_action_server_response_goal_request>
 800e9f4:	4629      	mov	r1, r5
 800e9f6:	6860      	ldr	r0, [r4, #4]
 800e9f8:	f003 fc56 	bl	80122a8 <rclc_action_remove_used_goal_handle>
 800e9fc:	6860      	ldr	r0, [r4, #4]
 800e9fe:	2100      	movs	r1, #0
 800ea00:	f003 fc7e 	bl	8012300 <rclc_action_find_first_handle_by_status>
 800ea04:	4605      	mov	r5, r0
 800ea06:	2800      	cmp	r0, #0
 800ea08:	d068      	beq.n	800eadc <_rclc_execute.part.0+0x1fc>
 800ea0a:	6863      	ldr	r3, [r4, #4]
 800ea0c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ea0e:	699b      	ldr	r3, [r3, #24]
 800ea10:	4798      	blx	r3
 800ea12:	42b0      	cmp	r0, r6
 800ea14:	f04f 0100 	mov.w	r1, #0
 800ea18:	d1e9      	bne.n	800e9ee <_rclc_execute.part.0+0x10e>
 800ea1a:	2101      	movs	r1, #1
 800ea1c:	4628      	mov	r0, r5
 800ea1e:	f003 fcd5 	bl	80123cc <rclc_action_server_response_goal_request>
 800ea22:	722f      	strb	r7, [r5, #8]
 800ea24:	e7ea      	b.n	800e9fc <_rclc_execute.part.0+0x11c>
 800ea26:	6848      	ldr	r0, [r1, #4]
 800ea28:	f003 fc3e 	bl	80122a8 <rclc_action_remove_used_goal_handle>
 800ea2c:	6860      	ldr	r0, [r4, #4]
 800ea2e:	f003 fc73 	bl	8012318 <rclc_action_find_first_terminated_handle>
 800ea32:	4601      	mov	r1, r0
 800ea34:	2800      	cmp	r0, #0
 800ea36:	d1f6      	bne.n	800ea26 <_rclc_execute.part.0+0x146>
 800ea38:	6860      	ldr	r0, [r4, #4]
 800ea3a:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800ea3e:	e7ce      	b.n	800e9de <_rclc_execute.part.0+0xfe>
 800ea40:	2400      	movs	r4, #0
 800ea42:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ea44:	f100 0110 	add.w	r1, r0, #16
 800ea48:	6880      	ldr	r0, [r0, #8]
 800ea4a:	4798      	blx	r3
 800ea4c:	4620      	mov	r0, r4
 800ea4e:	b005      	add	sp, #20
 800ea50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea52:	6860      	ldr	r0, [r4, #4]
 800ea54:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ea58:	b18b      	cbz	r3, 800ea7e <_rclc_execute.part.0+0x19e>
 800ea5a:	68c5      	ldr	r5, [r0, #12]
 800ea5c:	b32d      	cbz	r5, 800eaaa <_rclc_execute.part.0+0x1ca>
 800ea5e:	2600      	movs	r6, #0
 800ea60:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800ea64:	b143      	cbz	r3, 800ea78 <_rclc_execute.part.0+0x198>
 800ea66:	69c3      	ldr	r3, [r0, #28]
 800ea68:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800ea6c:	b123      	cbz	r3, 800ea78 <_rclc_execute.part.0+0x198>
 800ea6e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ea70:	4628      	mov	r0, r5
 800ea72:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ea74:	4798      	blx	r3
 800ea76:	6860      	ldr	r0, [r4, #4]
 800ea78:	682d      	ldr	r5, [r5, #0]
 800ea7a:	2d00      	cmp	r5, #0
 800ea7c:	d1f0      	bne.n	800ea60 <_rclc_execute.part.0+0x180>
 800ea7e:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ea82:	b193      	cbz	r3, 800eaaa <_rclc_execute.part.0+0x1ca>
 800ea84:	68c5      	ldr	r5, [r0, #12]
 800ea86:	b185      	cbz	r5, 800eaaa <_rclc_execute.part.0+0x1ca>
 800ea88:	2600      	movs	r6, #0
 800ea8a:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800ea8e:	b14b      	cbz	r3, 800eaa4 <_rclc_execute.part.0+0x1c4>
 800ea90:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ea92:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800ea96:	b12b      	cbz	r3, 800eaa4 <_rclc_execute.part.0+0x1c4>
 800ea98:	4628      	mov	r0, r5
 800ea9a:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800ea9e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800eaa0:	4798      	blx	r3
 800eaa2:	6860      	ldr	r0, [r4, #4]
 800eaa4:	682d      	ldr	r5, [r5, #0]
 800eaa6:	2d00      	cmp	r5, #0
 800eaa8:	d1ef      	bne.n	800ea8a <_rclc_execute.part.0+0x1aa>
 800eaaa:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	f43f af76 	beq.w	800e9a0 <_rclc_execute.part.0+0xc0>
 800eab4:	2700      	movs	r7, #0
 800eab6:	e00b      	b.n	800ead0 <_rclc_execute.part.0+0x1f0>
 800eab8:	6863      	ldr	r3, [r4, #4]
 800eaba:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800eabc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800eabe:	6a1e      	ldr	r6, [r3, #32]
 800eac0:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800eac4:	47b0      	blx	r6
 800eac6:	6860      	ldr	r0, [r4, #4]
 800eac8:	4629      	mov	r1, r5
 800eaca:	f003 fbed 	bl	80122a8 <rclc_action_remove_used_goal_handle>
 800eace:	6860      	ldr	r0, [r4, #4]
 800ead0:	f003 fc70 	bl	80123b4 <rclc_action_find_first_handle_with_result_response>
 800ead4:	4605      	mov	r5, r0
 800ead6:	2800      	cmp	r0, #0
 800ead8:	d1ee      	bne.n	800eab8 <_rclc_execute.part.0+0x1d8>
 800eada:	e761      	b.n	800e9a0 <_rclc_execute.part.0+0xc0>
 800eadc:	6860      	ldr	r0, [r4, #4]
 800eade:	f880 5020 	strb.w	r5, [r0, #32]
 800eae2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	f43f af5a 	beq.w	800e9a0 <_rclc_execute.part.0+0xc0>
 800eaec:	68c5      	ldr	r5, [r0, #12]
 800eaee:	b1b5      	cbz	r5, 800eb1e <_rclc_execute.part.0+0x23e>
 800eaf0:	2602      	movs	r6, #2
 800eaf2:	e001      	b.n	800eaf8 <_rclc_execute.part.0+0x218>
 800eaf4:	682d      	ldr	r5, [r5, #0]
 800eaf6:	b195      	cbz	r5, 800eb1e <_rclc_execute.part.0+0x23e>
 800eaf8:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800eafc:	2b03      	cmp	r3, #3
 800eafe:	d1f9      	bne.n	800eaf4 <_rclc_execute.part.0+0x214>
 800eb00:	69c3      	ldr	r3, [r0, #28]
 800eb02:	4628      	mov	r0, r5
 800eb04:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800eb06:	4798      	blx	r3
 800eb08:	4603      	mov	r3, r0
 800eb0a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800eb0e:	4628      	mov	r0, r5
 800eb10:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800eb14:	b143      	cbz	r3, 800eb28 <_rclc_execute.part.0+0x248>
 800eb16:	f003 fc77 	bl	8012408 <rclc_action_server_goal_cancel_accept>
 800eb1a:	6860      	ldr	r0, [r4, #4]
 800eb1c:	e7ea      	b.n	800eaf4 <_rclc_execute.part.0+0x214>
 800eb1e:	2300      	movs	r3, #0
 800eb20:	461c      	mov	r4, r3
 800eb22:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800eb26:	e72e      	b.n	800e986 <_rclc_execute.part.0+0xa6>
 800eb28:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800eb2a:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800eb2e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800eb32:	2101      	movs	r1, #1
 800eb34:	6860      	ldr	r0, [r4, #4]
 800eb36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb3a:	f003 fc91 	bl	8012460 <rclc_action_server_goal_cancel_reject>
 800eb3e:	722e      	strb	r6, [r5, #8]
 800eb40:	6860      	ldr	r0, [r4, #4]
 800eb42:	e7d7      	b.n	800eaf4 <_rclc_execute.part.0+0x214>
 800eb44:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800eb46:	f104 0510 	add.w	r5, r4, #16
 800eb4a:	6880      	ldr	r0, [r0, #8]
 800eb4c:	4798      	blx	r3
 800eb4e:	e6e3      	b.n	800e918 <_rclc_execute.part.0+0x38>
 800eb50:	f100 0510 	add.w	r5, r0, #16
 800eb54:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800eb56:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800eb58:	4629      	mov	r1, r5
 800eb5a:	6880      	ldr	r0, [r0, #8]
 800eb5c:	4798      	blx	r3
 800eb5e:	e6db      	b.n	800e918 <_rclc_execute.part.0+0x38>
 800eb60:	2401      	movs	r4, #1
 800eb62:	e710      	b.n	800e986 <_rclc_execute.part.0+0xa6>

0800eb64 <rclc_executor_trigger_any>:
 800eb64:	2800      	cmp	r0, #0
 800eb66:	d03d      	beq.n	800ebe4 <rclc_executor_trigger_any+0x80>
 800eb68:	2900      	cmp	r1, #0
 800eb6a:	d03c      	beq.n	800ebe6 <rclc_executor_trigger_any+0x82>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800eb72:	2200      	movs	r2, #0
 800eb74:	2800      	cmp	r0, #0
 800eb76:	d035      	beq.n	800ebe4 <rclc_executor_trigger_any+0x80>
 800eb78:	b430      	push	{r4, r5}
 800eb7a:	f893 c000 	ldrb.w	ip, [r3]
 800eb7e:	f1bc 0f08 	cmp.w	ip, #8
 800eb82:	d11d      	bne.n	800ebc0 <rclc_executor_trigger_any+0x5c>
 800eb84:	685c      	ldr	r4, [r3, #4]
 800eb86:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800eb88:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800eb8c:	d105      	bne.n	800eb9a <rclc_executor_trigger_any+0x36>
 800eb8e:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800eb92:	b910      	cbnz	r0, 800eb9a <rclc_executor_trigger_any+0x36>
 800eb94:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800eb98:	b128      	cbz	r0, 800eba6 <rclc_executor_trigger_any+0x42>
 800eb9a:	bc30      	pop	{r4, r5}
 800eb9c:	4770      	bx	lr
 800eb9e:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800eba2:	2800      	cmp	r0, #0
 800eba4:	d1f9      	bne.n	800eb9a <rclc_executor_trigger_any+0x36>
 800eba6:	3201      	adds	r2, #1
 800eba8:	3340      	adds	r3, #64	@ 0x40
 800ebaa:	4291      	cmp	r1, r2
 800ebac:	d017      	beq.n	800ebde <rclc_executor_trigger_any+0x7a>
 800ebae:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800ebb2:	2800      	cmp	r0, #0
 800ebb4:	d0f1      	beq.n	800eb9a <rclc_executor_trigger_any+0x36>
 800ebb6:	f893 c000 	ldrb.w	ip, [r3]
 800ebba:	f1bc 0f08 	cmp.w	ip, #8
 800ebbe:	d0e1      	beq.n	800eb84 <rclc_executor_trigger_any+0x20>
 800ebc0:	f1bc 0f09 	cmp.w	ip, #9
 800ebc4:	d1eb      	bne.n	800eb9e <rclc_executor_trigger_any+0x3a>
 800ebc6:	685c      	ldr	r4, [r3, #4]
 800ebc8:	6a25      	ldr	r5, [r4, #32]
 800ebca:	2d00      	cmp	r5, #0
 800ebcc:	d1e5      	bne.n	800eb9a <rclc_executor_trigger_any+0x36>
 800ebce:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800ebd2:	2800      	cmp	r0, #0
 800ebd4:	d1e1      	bne.n	800eb9a <rclc_executor_trigger_any+0x36>
 800ebd6:	3201      	adds	r2, #1
 800ebd8:	3340      	adds	r3, #64	@ 0x40
 800ebda:	4291      	cmp	r1, r2
 800ebdc:	d1e7      	bne.n	800ebae <rclc_executor_trigger_any+0x4a>
 800ebde:	2000      	movs	r0, #0
 800ebe0:	bc30      	pop	{r4, r5}
 800ebe2:	4770      	bx	lr
 800ebe4:	4770      	bx	lr
 800ebe6:	4608      	mov	r0, r1
 800ebe8:	4770      	bx	lr
 800ebea:	bf00      	nop

0800ebec <rclc_executor_get_zero_initialized_executor>:
 800ebec:	b510      	push	{r4, lr}
 800ebee:	4604      	mov	r4, r0
 800ebf0:	2288      	movs	r2, #136	@ 0x88
 800ebf2:	4902      	ldr	r1, [pc, #8]	@ (800ebfc <rclc_executor_get_zero_initialized_executor+0x10>)
 800ebf4:	f00c fcf3 	bl	801b5de <memcpy>
 800ebf8:	4620      	mov	r0, r4
 800ebfa:	bd10      	pop	{r4, pc}
 800ebfc:	0801c338 	.word	0x0801c338

0800ec00 <rclc_executor_init>:
 800ec00:	2900      	cmp	r1, #0
 800ec02:	d06a      	beq.n	800ecda <rclc_executor_init+0xda>
 800ec04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec08:	4605      	mov	r5, r0
 800ec0a:	b0b0      	sub	sp, #192	@ 0xc0
 800ec0c:	2800      	cmp	r0, #0
 800ec0e:	d05c      	beq.n	800ecca <rclc_executor_init+0xca>
 800ec10:	4616      	mov	r6, r2
 800ec12:	4618      	mov	r0, r3
 800ec14:	4688      	mov	r8, r1
 800ec16:	461f      	mov	r7, r3
 800ec18:	f000 fbc4 	bl	800f3a4 <rcutils_allocator_is_valid>
 800ec1c:	2e00      	cmp	r6, #0
 800ec1e:	d054      	beq.n	800ecca <rclc_executor_init+0xca>
 800ec20:	f080 0401 	eor.w	r4, r0, #1
 800ec24:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 800ec28:	d14f      	bne.n	800ecca <rclc_executor_init+0xca>
 800ec2a:	2288      	movs	r2, #136	@ 0x88
 800ec2c:	4930      	ldr	r1, [pc, #192]	@ (800ecf0 <rclc_executor_init+0xf0>)
 800ec2e:	a80e      	add	r0, sp, #56	@ 0x38
 800ec30:	f00c fcd5 	bl	801b5de <memcpy>
 800ec34:	a90e      	add	r1, sp, #56	@ 0x38
 800ec36:	2288      	movs	r2, #136	@ 0x88
 800ec38:	4628      	mov	r0, r5
 800ec3a:	f00c fcd0 	bl	801b5de <memcpy>
 800ec3e:	4668      	mov	r0, sp
 800ec40:	f8c5 8000 	str.w	r8, [r5]
 800ec44:	60ae      	str	r6, [r5, #8]
 800ec46:	f002 f8c7 	bl	8010dd8 <rcl_get_zero_initialized_wait_set>
 800ec4a:	46ec      	mov	ip, sp
 800ec4c:	f105 0e14 	add.w	lr, r5, #20
 800ec50:	f8d7 8000 	ldr.w	r8, [r7]
 800ec54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ec58:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ec5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ec60:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ec64:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ec68:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 800ece8 <rclc_executor_init+0xe8>
 800ec6c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ec70:	f8dc 3000 	ldr.w	r3, [ip]
 800ec74:	01b0      	lsls	r0, r6, #6
 800ec76:	6939      	ldr	r1, [r7, #16]
 800ec78:	f8ce 3000 	str.w	r3, [lr]
 800ec7c:	612f      	str	r7, [r5, #16]
 800ec7e:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800ec82:	47c0      	blx	r8
 800ec84:	6068      	str	r0, [r5, #4]
 800ec86:	b908      	cbnz	r0, 800ec8c <rclc_executor_init+0x8c>
 800ec88:	e029      	b.n	800ecde <rclc_executor_init+0xde>
 800ec8a:	6868      	ldr	r0, [r5, #4]
 800ec8c:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800ec90:	3401      	adds	r4, #1
 800ec92:	4631      	mov	r1, r6
 800ec94:	f000 fa84 	bl	800f1a0 <rclc_executor_handle_init>
 800ec98:	42a6      	cmp	r6, r4
 800ec9a:	d8f6      	bhi.n	800ec8a <rclc_executor_init+0x8a>
 800ec9c:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800eca0:	f000 fa72 	bl	800f188 <rclc_executor_handle_counters_zero_init>
 800eca4:	4a13      	ldr	r2, [pc, #76]	@ (800ecf4 <rclc_executor_init+0xf4>)
 800eca6:	2300      	movs	r3, #0
 800eca8:	6868      	ldr	r0, [r5, #4]
 800ecaa:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 800ecae:	b168      	cbz	r0, 800eccc <rclc_executor_init+0xcc>
 800ecb0:	68ab      	ldr	r3, [r5, #8]
 800ecb2:	b173      	cbz	r3, 800ecd2 <rclc_executor_init+0xd2>
 800ecb4:	692a      	ldr	r2, [r5, #16]
 800ecb6:	fab2 f382 	clz	r3, r2
 800ecba:	095b      	lsrs	r3, r3, #5
 800ecbc:	b14a      	cbz	r2, 800ecd2 <rclc_executor_init+0xd2>
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 800ecc4:	b030      	add	sp, #192	@ 0xc0
 800ecc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecca:	200b      	movs	r0, #11
 800eccc:	b030      	add	sp, #192	@ 0xc0
 800ecce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecd2:	2000      	movs	r0, #0
 800ecd4:	b030      	add	sp, #192	@ 0xc0
 800ecd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecda:	200b      	movs	r0, #11
 800ecdc:	4770      	bx	lr
 800ecde:	200a      	movs	r0, #10
 800ece0:	e7f4      	b.n	800eccc <rclc_executor_init+0xcc>
 800ece2:	bf00      	nop
 800ece4:	f3af 8000 	nop.w
 800ece8:	3b9aca00 	.word	0x3b9aca00
 800ecec:	00000000 	.word	0x00000000
 800ecf0:	0801c338 	.word	0x0801c338
 800ecf4:	0800eb65 	.word	0x0800eb65

0800ecf8 <rclc_executor_add_subscription>:
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	bf18      	it	ne
 800ecfc:	2a00      	cmpne	r2, #0
 800ecfe:	b570      	push	{r4, r5, r6, lr}
 800ed00:	4604      	mov	r4, r0
 800ed02:	bf0c      	ite	eq
 800ed04:	2001      	moveq	r0, #1
 800ed06:	2000      	movne	r0, #0
 800ed08:	f89d c010 	ldrb.w	ip, [sp, #16]
 800ed0c:	2900      	cmp	r1, #0
 800ed0e:	bf08      	it	eq
 800ed10:	f040 0001 	orreq.w	r0, r0, #1
 800ed14:	bb28      	cbnz	r0, 800ed62 <rclc_executor_add_subscription+0x6a>
 800ed16:	fab4 f584 	clz	r5, r4
 800ed1a:	096d      	lsrs	r5, r5, #5
 800ed1c:	b30c      	cbz	r4, 800ed62 <rclc_executor_add_subscription+0x6a>
 800ed1e:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 800ed22:	4286      	cmp	r6, r0
 800ed24:	d301      	bcc.n	800ed2a <rclc_executor_add_subscription+0x32>
 800ed26:	2001      	movs	r0, #1
 800ed28:	bd70      	pop	{r4, r5, r6, pc}
 800ed2a:	6860      	ldr	r0, [r4, #4]
 800ed2c:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 800ed30:	f800 500e 	strb.w	r5, [r0, lr]
 800ed34:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800ed38:	3601      	adds	r6, #1
 800ed3a:	6303      	str	r3, [r0, #48]	@ 0x30
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	62c5      	str	r5, [r0, #44]	@ 0x2c
 800ed40:	f104 0514 	add.w	r5, r4, #20
 800ed44:	f880 c001 	strb.w	ip, [r0, #1]
 800ed48:	8703      	strh	r3, [r0, #56]	@ 0x38
 800ed4a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800ed4e:	4628      	mov	r0, r5
 800ed50:	60e6      	str	r6, [r4, #12]
 800ed52:	f002 f855 	bl	8010e00 <rcl_wait_set_is_valid>
 800ed56:	b930      	cbnz	r0, 800ed66 <rclc_executor_add_subscription+0x6e>
 800ed58:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800ed5a:	2000      	movs	r0, #0
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	64a3      	str	r3, [r4, #72]	@ 0x48
 800ed60:	bd70      	pop	{r4, r5, r6, pc}
 800ed62:	200b      	movs	r0, #11
 800ed64:	bd70      	pop	{r4, r5, r6, pc}
 800ed66:	4628      	mov	r0, r5
 800ed68:	f002 f850 	bl	8010e0c <rcl_wait_set_fini>
 800ed6c:	2800      	cmp	r0, #0
 800ed6e:	d0f3      	beq.n	800ed58 <rclc_executor_add_subscription+0x60>
 800ed70:	bd70      	pop	{r4, r5, r6, pc}
 800ed72:	bf00      	nop

0800ed74 <rclc_executor_prepare>:
 800ed74:	2800      	cmp	r0, #0
 800ed76:	d044      	beq.n	800ee02 <rclc_executor_prepare+0x8e>
 800ed78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed7a:	f100 0514 	add.w	r5, r0, #20
 800ed7e:	b09b      	sub	sp, #108	@ 0x6c
 800ed80:	4604      	mov	r4, r0
 800ed82:	4628      	mov	r0, r5
 800ed84:	f002 f83c 	bl	8010e00 <rcl_wait_set_is_valid>
 800ed88:	b110      	cbz	r0, 800ed90 <rclc_executor_prepare+0x1c>
 800ed8a:	2000      	movs	r0, #0
 800ed8c:	b01b      	add	sp, #108	@ 0x6c
 800ed8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed90:	4628      	mov	r0, r5
 800ed92:	f002 f83b 	bl	8010e0c <rcl_wait_set_fini>
 800ed96:	2800      	cmp	r0, #0
 800ed98:	d130      	bne.n	800edfc <rclc_executor_prepare+0x88>
 800ed9a:	a80c      	add	r0, sp, #48	@ 0x30
 800ed9c:	ae04      	add	r6, sp, #16
 800ed9e:	f002 f81b 	bl	8010dd8 <rcl_get_zero_initialized_wait_set>
 800eda2:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800eda6:	46ae      	mov	lr, r5
 800eda8:	6927      	ldr	r7, [r4, #16]
 800edaa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800edae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800edb2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800edb6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800edba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800edbe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800edc2:	f8dc 3000 	ldr.w	r3, [ip]
 800edc6:	f8ce 3000 	str.w	r3, [lr]
 800edca:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800edcc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	4628      	mov	r0, r5
 800edd2:	6822      	ldr	r2, [r4, #0]
 800edd4:	6033      	str	r3, [r6, #0]
 800edd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800edd8:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800edda:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800edde:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800ede2:	e9cd 2100 	strd	r2, r1, [sp]
 800ede6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800ede8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800edea:	f002 fb0f 	bl	801140c <rcl_wait_set_init>
 800edee:	2800      	cmp	r0, #0
 800edf0:	d0cc      	beq.n	800ed8c <rclc_executor_prepare+0x18>
 800edf2:	900b      	str	r0, [sp, #44]	@ 0x2c
 800edf4:	f000 fafc 	bl	800f3f0 <rcutils_reset_error>
 800edf8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800edfa:	e7c7      	b.n	800ed8c <rclc_executor_prepare+0x18>
 800edfc:	f000 faf8 	bl	800f3f0 <rcutils_reset_error>
 800ee00:	e7cb      	b.n	800ed9a <rclc_executor_prepare+0x26>
 800ee02:	200b      	movs	r0, #11
 800ee04:	4770      	bx	lr
 800ee06:	bf00      	nop

0800ee08 <rclc_executor_spin_some.part.0>:
 800ee08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee0c:	4605      	mov	r5, r0
 800ee0e:	4691      	mov	r9, r2
 800ee10:	4698      	mov	r8, r3
 800ee12:	f7ff ffaf 	bl	800ed74 <rclc_executor_prepare>
 800ee16:	f105 0614 	add.w	r6, r5, #20
 800ee1a:	4630      	mov	r0, r6
 800ee1c:	f002 f8c2 	bl	8010fa4 <rcl_wait_set_clear>
 800ee20:	4607      	mov	r7, r0
 800ee22:	2800      	cmp	r0, #0
 800ee24:	f040 80a8 	bne.w	800ef78 <rclc_executor_spin_some.part.0+0x170>
 800ee28:	68ab      	ldr	r3, [r5, #8]
 800ee2a:	b30b      	cbz	r3, 800ee70 <rclc_executor_spin_some.part.0+0x68>
 800ee2c:	4604      	mov	r4, r0
 800ee2e:	6869      	ldr	r1, [r5, #4]
 800ee30:	01a2      	lsls	r2, r4, #6
 800ee32:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800ee36:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800ee3a:	b1cb      	cbz	r3, 800ee70 <rclc_executor_spin_some.part.0+0x68>
 800ee3c:	5c8b      	ldrb	r3, [r1, r2]
 800ee3e:	2b0a      	cmp	r3, #10
 800ee40:	f200 80de 	bhi.w	800f000 <rclc_executor_spin_some.part.0+0x1f8>
 800ee44:	e8df f003 	tbb	[pc, r3]
 800ee48:	8da99d9d 	.word	0x8da99d9d
 800ee4c:	0606068d 	.word	0x0606068d
 800ee50:	c1ce      	.short	0xc1ce
 800ee52:	b5          	.byte	0xb5
 800ee53:	00          	.byte	0x00
 800ee54:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ee58:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ee5c:	4630      	mov	r0, r6
 800ee5e:	f002 fbf1 	bl	8011644 <rcl_wait_set_add_service>
 800ee62:	2800      	cmp	r0, #0
 800ee64:	f040 8087 	bne.w	800ef76 <rclc_executor_spin_some.part.0+0x16e>
 800ee68:	3401      	adds	r4, #1
 800ee6a:	68ab      	ldr	r3, [r5, #8]
 800ee6c:	429c      	cmp	r4, r3
 800ee6e:	d3de      	bcc.n	800ee2e <rclc_executor_spin_some.part.0+0x26>
 800ee70:	4643      	mov	r3, r8
 800ee72:	464a      	mov	r2, r9
 800ee74:	4630      	mov	r0, r6
 800ee76:	f002 fc13 	bl	80116a0 <rcl_wait>
 800ee7a:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	f000 80c6 	beq.w	800f010 <rclc_executor_spin_some.part.0+0x208>
 800ee84:	2b01      	cmp	r3, #1
 800ee86:	f040 80bb 	bne.w	800f000 <rclc_executor_spin_some.part.0+0x1f8>
 800ee8a:	68ab      	ldr	r3, [r5, #8]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	f000 8159 	beq.w	800f144 <rclc_executor_spin_some.part.0+0x33c>
 800ee92:	2400      	movs	r4, #0
 800ee94:	f240 1991 	movw	r9, #401	@ 0x191
 800ee98:	46a0      	mov	r8, r4
 800ee9a:	e00a      	b.n	800eeb2 <rclc_executor_spin_some.part.0+0xaa>
 800ee9c:	f7ff fb5e 	bl	800e55c <_rclc_check_for_new_data>
 800eea0:	4604      	mov	r4, r0
 800eea2:	b110      	cbz	r0, 800eeaa <rclc_executor_spin_some.part.0+0xa2>
 800eea4:	4548      	cmp	r0, r9
 800eea6:	f040 80b1 	bne.w	800f00c <rclc_executor_spin_some.part.0+0x204>
 800eeaa:	68ab      	ldr	r3, [r5, #8]
 800eeac:	4598      	cmp	r8, r3
 800eeae:	f080 8126 	bcs.w	800f0fe <rclc_executor_spin_some.part.0+0x2f6>
 800eeb2:	686a      	ldr	r2, [r5, #4]
 800eeb4:	4631      	mov	r1, r6
 800eeb6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800eeba:	f108 0801 	add.w	r8, r8, #1
 800eebe:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800eec2:	f1bc 0f00 	cmp.w	ip, #0
 800eec6:	d1e9      	bne.n	800ee9c <rclc_executor_spin_some.part.0+0x94>
 800eec8:	4619      	mov	r1, r3
 800eeca:	4610      	mov	r0, r2
 800eecc:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800eed0:	4798      	blx	r3
 800eed2:	2800      	cmp	r0, #0
 800eed4:	f000 809a 	beq.w	800f00c <rclc_executor_spin_some.part.0+0x204>
 800eed8:	68ab      	ldr	r3, [r5, #8]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	f000 8096 	beq.w	800f00c <rclc_executor_spin_some.part.0+0x204>
 800eee0:	f04f 0800 	mov.w	r8, #0
 800eee4:	f240 1991 	movw	r9, #401	@ 0x191
 800eee8:	e009      	b.n	800eefe <rclc_executor_spin_some.part.0+0xf6>
 800eeea:	f7ff fb85 	bl	800e5f8 <_rclc_take_new_data>
 800eeee:	4604      	mov	r4, r0
 800eef0:	b110      	cbz	r0, 800eef8 <rclc_executor_spin_some.part.0+0xf0>
 800eef2:	4548      	cmp	r0, r9
 800eef4:	f040 808a 	bne.w	800f00c <rclc_executor_spin_some.part.0+0x204>
 800eef8:	68ab      	ldr	r3, [r5, #8]
 800eefa:	4598      	cmp	r8, r3
 800eefc:	d209      	bcs.n	800ef12 <rclc_executor_spin_some.part.0+0x10a>
 800eefe:	6868      	ldr	r0, [r5, #4]
 800ef00:	4631      	mov	r1, r6
 800ef02:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800ef06:	f108 0801 	add.w	r8, r8, #1
 800ef0a:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800ef0e:	2a00      	cmp	r2, #0
 800ef10:	d1eb      	bne.n	800eeea <rclc_executor_spin_some.part.0+0xe2>
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d07a      	beq.n	800f00c <rclc_executor_spin_some.part.0+0x204>
 800ef16:	2600      	movs	r6, #0
 800ef18:	e00e      	b.n	800ef38 <rclc_executor_spin_some.part.0+0x130>
 800ef1a:	f812 200c 	ldrb.w	r2, [r2, ip]
 800ef1e:	2a08      	cmp	r2, #8
 800ef20:	f000 80fc 	beq.w	800f11c <rclc_executor_spin_some.part.0+0x314>
 800ef24:	2a09      	cmp	r2, #9
 800ef26:	f000 80ee 	beq.w	800f106 <rclc_executor_spin_some.part.0+0x2fe>
 800ef2a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800ef2e:	b98a      	cbnz	r2, 800ef54 <rclc_executor_spin_some.part.0+0x14c>
 800ef30:	3601      	adds	r6, #1
 800ef32:	429e      	cmp	r6, r3
 800ef34:	d267      	bcs.n	800f006 <rclc_executor_spin_some.part.0+0x1fe>
 800ef36:	2400      	movs	r4, #0
 800ef38:	686a      	ldr	r2, [r5, #4]
 800ef3a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800ef3e:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800ef42:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800ef46:	2900      	cmp	r1, #0
 800ef48:	d060      	beq.n	800f00c <rclc_executor_spin_some.part.0+0x204>
 800ef4a:	7841      	ldrb	r1, [r0, #1]
 800ef4c:	2900      	cmp	r1, #0
 800ef4e:	d0e4      	beq.n	800ef1a <rclc_executor_spin_some.part.0+0x112>
 800ef50:	2901      	cmp	r1, #1
 800ef52:	d1ed      	bne.n	800ef30 <rclc_executor_spin_some.part.0+0x128>
 800ef54:	f7ff fcc4 	bl	800e8e0 <_rclc_execute.part.0>
 800ef58:	2800      	cmp	r0, #0
 800ef5a:	f040 80b5 	bne.w	800f0c8 <rclc_executor_spin_some.part.0+0x2c0>
 800ef5e:	68ab      	ldr	r3, [r5, #8]
 800ef60:	e7e6      	b.n	800ef30 <rclc_executor_spin_some.part.0+0x128>
 800ef62:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ef66:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ef6a:	4630      	mov	r0, r6
 800ef6c:	f002 fb3e 	bl	80115ec <rcl_wait_set_add_client>
 800ef70:	2800      	cmp	r0, #0
 800ef72:	f43f af79 	beq.w	800ee68 <rclc_executor_spin_some.part.0+0x60>
 800ef76:	4607      	mov	r7, r0
 800ef78:	f000 fa3a 	bl	800f3f0 <rcutils_reset_error>
 800ef7c:	4638      	mov	r0, r7
 800ef7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef82:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ef86:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ef8a:	4630      	mov	r0, r6
 800ef8c:	f001 ffde 	bl	8010f4c <rcl_wait_set_add_subscription>
 800ef90:	2800      	cmp	r0, #0
 800ef92:	f43f af69 	beq.w	800ee68 <rclc_executor_spin_some.part.0+0x60>
 800ef96:	4607      	mov	r7, r0
 800ef98:	e7ee      	b.n	800ef78 <rclc_executor_spin_some.part.0+0x170>
 800ef9a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ef9e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800efa2:	4630      	mov	r0, r6
 800efa4:	f002 faf2 	bl	801158c <rcl_wait_set_add_timer>
 800efa8:	2800      	cmp	r0, #0
 800efaa:	f43f af5d 	beq.w	800ee68 <rclc_executor_spin_some.part.0+0x60>
 800efae:	4607      	mov	r7, r0
 800efb0:	e7e2      	b.n	800ef78 <rclc_executor_spin_some.part.0+0x170>
 800efb2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800efb6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800efba:	4630      	mov	r0, r6
 800efbc:	f002 faba 	bl	8011534 <rcl_wait_set_add_guard_condition>
 800efc0:	2800      	cmp	r0, #0
 800efc2:	f43f af51 	beq.w	800ee68 <rclc_executor_spin_some.part.0+0x60>
 800efc6:	4607      	mov	r7, r0
 800efc8:	e7d6      	b.n	800ef78 <rclc_executor_spin_some.part.0+0x170>
 800efca:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800efce:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800efd2:	4630      	mov	r0, r6
 800efd4:	3110      	adds	r1, #16
 800efd6:	f003 f839 	bl	801204c <rcl_action_wait_set_add_action_server>
 800efda:	2800      	cmp	r0, #0
 800efdc:	f43f af44 	beq.w	800ee68 <rclc_executor_spin_some.part.0+0x60>
 800efe0:	4607      	mov	r7, r0
 800efe2:	e7c9      	b.n	800ef78 <rclc_executor_spin_some.part.0+0x170>
 800efe4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800efe8:	2300      	movs	r3, #0
 800efea:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800efee:	4630      	mov	r0, r6
 800eff0:	3110      	adds	r1, #16
 800eff2:	f002 fe01 	bl	8011bf8 <rcl_action_wait_set_add_action_client>
 800eff6:	2800      	cmp	r0, #0
 800eff8:	f43f af36 	beq.w	800ee68 <rclc_executor_spin_some.part.0+0x60>
 800effc:	4607      	mov	r7, r0
 800effe:	e7bb      	b.n	800ef78 <rclc_executor_spin_some.part.0+0x170>
 800f000:	2701      	movs	r7, #1
 800f002:	f000 f9f5 	bl	800f3f0 <rcutils_reset_error>
 800f006:	4638      	mov	r0, r7
 800f008:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f00c:	4627      	mov	r7, r4
 800f00e:	e7fa      	b.n	800f006 <rclc_executor_spin_some.part.0+0x1fe>
 800f010:	68ab      	ldr	r3, [r5, #8]
 800f012:	2b00      	cmp	r3, #0
 800f014:	f000 8093 	beq.w	800f13e <rclc_executor_spin_some.part.0+0x336>
 800f018:	2400      	movs	r4, #0
 800f01a:	f240 1991 	movw	r9, #401	@ 0x191
 800f01e:	46a0      	mov	r8, r4
 800f020:	e008      	b.n	800f034 <rclc_executor_spin_some.part.0+0x22c>
 800f022:	f7ff fa9b 	bl	800e55c <_rclc_check_for_new_data>
 800f026:	4604      	mov	r4, r0
 800f028:	b108      	cbz	r0, 800f02e <rclc_executor_spin_some.part.0+0x226>
 800f02a:	4548      	cmp	r0, r9
 800f02c:	d1ee      	bne.n	800f00c <rclc_executor_spin_some.part.0+0x204>
 800f02e:	68ab      	ldr	r3, [r5, #8]
 800f030:	4598      	cmp	r8, r3
 800f032:	d266      	bcs.n	800f102 <rclc_executor_spin_some.part.0+0x2fa>
 800f034:	686a      	ldr	r2, [r5, #4]
 800f036:	4631      	mov	r1, r6
 800f038:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800f03c:	f108 0801 	add.w	r8, r8, #1
 800f040:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800f044:	f1bc 0f00 	cmp.w	ip, #0
 800f048:	d1eb      	bne.n	800f022 <rclc_executor_spin_some.part.0+0x21a>
 800f04a:	4619      	mov	r1, r3
 800f04c:	4610      	mov	r0, r2
 800f04e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800f052:	4798      	blx	r3
 800f054:	2800      	cmp	r0, #0
 800f056:	d0d9      	beq.n	800f00c <rclc_executor_spin_some.part.0+0x204>
 800f058:	68ab      	ldr	r3, [r5, #8]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d0d6      	beq.n	800f00c <rclc_executor_spin_some.part.0+0x204>
 800f05e:	f04f 0a00 	mov.w	sl, #0
 800f062:	f240 1891 	movw	r8, #401	@ 0x191
 800f066:	f240 2959 	movw	r9, #601	@ 0x259
 800f06a:	e00e      	b.n	800f08a <rclc_executor_spin_some.part.0+0x282>
 800f06c:	f813 300b 	ldrb.w	r3, [r3, fp]
 800f070:	2b08      	cmp	r3, #8
 800f072:	d034      	beq.n	800f0de <rclc_executor_spin_some.part.0+0x2d6>
 800f074:	2b09      	cmp	r3, #9
 800f076:	d029      	beq.n	800f0cc <rclc_executor_spin_some.part.0+0x2c4>
 800f078:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800f07c:	bb03      	cbnz	r3, 800f0c0 <rclc_executor_spin_some.part.0+0x2b8>
 800f07e:	f10a 0a01 	add.w	sl, sl, #1
 800f082:	68ab      	ldr	r3, [r5, #8]
 800f084:	459a      	cmp	sl, r3
 800f086:	d2be      	bcs.n	800f006 <rclc_executor_spin_some.part.0+0x1fe>
 800f088:	2400      	movs	r4, #0
 800f08a:	6868      	ldr	r0, [r5, #4]
 800f08c:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800f090:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800f094:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d0b7      	beq.n	800f00c <rclc_executor_spin_some.part.0+0x204>
 800f09c:	4631      	mov	r1, r6
 800f09e:	f7ff faab 	bl	800e5f8 <_rclc_take_new_data>
 800f0a2:	2800      	cmp	r0, #0
 800f0a4:	bf18      	it	ne
 800f0a6:	4540      	cmpne	r0, r8
 800f0a8:	d001      	beq.n	800f0ae <rclc_executor_spin_some.part.0+0x2a6>
 800f0aa:	4548      	cmp	r0, r9
 800f0ac:	d10c      	bne.n	800f0c8 <rclc_executor_spin_some.part.0+0x2c0>
 800f0ae:	686b      	ldr	r3, [r5, #4]
 800f0b0:	eb13 000b 	adds.w	r0, r3, fp
 800f0b4:	d021      	beq.n	800f0fa <rclc_executor_spin_some.part.0+0x2f2>
 800f0b6:	7842      	ldrb	r2, [r0, #1]
 800f0b8:	2a00      	cmp	r2, #0
 800f0ba:	d0d7      	beq.n	800f06c <rclc_executor_spin_some.part.0+0x264>
 800f0bc:	2a01      	cmp	r2, #1
 800f0be:	d1de      	bne.n	800f07e <rclc_executor_spin_some.part.0+0x276>
 800f0c0:	f7ff fc0e 	bl	800e8e0 <_rclc_execute.part.0>
 800f0c4:	2800      	cmp	r0, #0
 800f0c6:	d0da      	beq.n	800f07e <rclc_executor_spin_some.part.0+0x276>
 800f0c8:	4607      	mov	r7, r0
 800f0ca:	e79c      	b.n	800f006 <rclc_executor_spin_some.part.0+0x1fe>
 800f0cc:	6843      	ldr	r3, [r0, #4]
 800f0ce:	6a1a      	ldr	r2, [r3, #32]
 800f0d0:	2a00      	cmp	r2, #0
 800f0d2:	d1f5      	bne.n	800f0c0 <rclc_executor_spin_some.part.0+0x2b8>
 800f0d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d0d0      	beq.n	800f07e <rclc_executor_spin_some.part.0+0x276>
 800f0dc:	e7f0      	b.n	800f0c0 <rclc_executor_spin_some.part.0+0x2b8>
 800f0de:	6843      	ldr	r3, [r0, #4]
 800f0e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f0e2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800f0e6:	d1eb      	bne.n	800f0c0 <rclc_executor_spin_some.part.0+0x2b8>
 800f0e8:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800f0ec:	2a00      	cmp	r2, #0
 800f0ee:	d1e7      	bne.n	800f0c0 <rclc_executor_spin_some.part.0+0x2b8>
 800f0f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d0c2      	beq.n	800f07e <rclc_executor_spin_some.part.0+0x276>
 800f0f8:	e7e2      	b.n	800f0c0 <rclc_executor_spin_some.part.0+0x2b8>
 800f0fa:	270b      	movs	r7, #11
 800f0fc:	e783      	b.n	800f006 <rclc_executor_spin_some.part.0+0x1fe>
 800f0fe:	686a      	ldr	r2, [r5, #4]
 800f100:	e6e2      	b.n	800eec8 <rclc_executor_spin_some.part.0+0xc0>
 800f102:	686a      	ldr	r2, [r5, #4]
 800f104:	e7a1      	b.n	800f04a <rclc_executor_spin_some.part.0+0x242>
 800f106:	6842      	ldr	r2, [r0, #4]
 800f108:	6a11      	ldr	r1, [r2, #32]
 800f10a:	2900      	cmp	r1, #0
 800f10c:	f47f af22 	bne.w	800ef54 <rclc_executor_spin_some.part.0+0x14c>
 800f110:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800f114:	2a00      	cmp	r2, #0
 800f116:	f43f af0b 	beq.w	800ef30 <rclc_executor_spin_some.part.0+0x128>
 800f11a:	e71b      	b.n	800ef54 <rclc_executor_spin_some.part.0+0x14c>
 800f11c:	6842      	ldr	r2, [r0, #4]
 800f11e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800f120:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800f124:	f47f af16 	bne.w	800ef54 <rclc_executor_spin_some.part.0+0x14c>
 800f128:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800f12c:	2900      	cmp	r1, #0
 800f12e:	f47f af11 	bne.w	800ef54 <rclc_executor_spin_some.part.0+0x14c>
 800f132:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800f136:	2a00      	cmp	r2, #0
 800f138:	f43f aefa 	beq.w	800ef30 <rclc_executor_spin_some.part.0+0x128>
 800f13c:	e70a      	b.n	800ef54 <rclc_executor_spin_some.part.0+0x14c>
 800f13e:	686a      	ldr	r2, [r5, #4]
 800f140:	461c      	mov	r4, r3
 800f142:	e782      	b.n	800f04a <rclc_executor_spin_some.part.0+0x242>
 800f144:	686a      	ldr	r2, [r5, #4]
 800f146:	461c      	mov	r4, r3
 800f148:	e6be      	b.n	800eec8 <rclc_executor_spin_some.part.0+0xc0>
 800f14a:	bf00      	nop

0800f14c <rclc_executor_spin>:
 800f14c:	b1d0      	cbz	r0, 800f184 <rclc_executor_spin+0x38>
 800f14e:	b510      	push	{r4, lr}
 800f150:	4604      	mov	r4, r0
 800f152:	b082      	sub	sp, #8
 800f154:	e004      	b.n	800f160 <rclc_executor_spin+0x14>
 800f156:	f7ff fe57 	bl	800ee08 <rclc_executor_spin_some.part.0>
 800f15a:	f030 0302 	bics.w	r3, r0, #2
 800f15e:	d10f      	bne.n	800f180 <rclc_executor_spin+0x34>
 800f160:	6820      	ldr	r0, [r4, #0]
 800f162:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800f166:	e9cd 2300 	strd	r2, r3, [sp]
 800f16a:	f000 fc55 	bl	800fa18 <rcl_context_is_valid>
 800f16e:	4601      	mov	r1, r0
 800f170:	4620      	mov	r0, r4
 800f172:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f176:	2900      	cmp	r1, #0
 800f178:	d1ed      	bne.n	800f156 <rclc_executor_spin+0xa>
 800f17a:	f000 f939 	bl	800f3f0 <rcutils_reset_error>
 800f17e:	2001      	movs	r0, #1
 800f180:	b002      	add	sp, #8
 800f182:	bd10      	pop	{r4, pc}
 800f184:	200b      	movs	r0, #11
 800f186:	4770      	bx	lr

0800f188 <rclc_executor_handle_counters_zero_init>:
 800f188:	b130      	cbz	r0, 800f198 <rclc_executor_handle_counters_zero_init+0x10>
 800f18a:	2220      	movs	r2, #32
 800f18c:	2100      	movs	r1, #0
 800f18e:	b508      	push	{r3, lr}
 800f190:	f00c f906 	bl	801b3a0 <memset>
 800f194:	2000      	movs	r0, #0
 800f196:	bd08      	pop	{r3, pc}
 800f198:	200b      	movs	r0, #11
 800f19a:	4770      	bx	lr
 800f19c:	0000      	movs	r0, r0
	...

0800f1a0 <rclc_executor_handle_init>:
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	b178      	cbz	r0, 800f1c4 <rclc_executor_handle_init+0x24>
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	f04f 0c0b 	mov.w	ip, #11
 800f1aa:	6341      	str	r1, [r0, #52]	@ 0x34
 800f1ac:	4610      	mov	r0, r2
 800f1ae:	f8a3 c000 	strh.w	ip, [r3]
 800f1b2:	631a      	str	r2, [r3, #48]	@ 0x30
 800f1b4:	871a      	strh	r2, [r3, #56]	@ 0x38
 800f1b6:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 800f1c8 <rclc_executor_handle_init+0x28>
 800f1ba:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800f1be:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 800f1c2:	4770      	bx	lr
 800f1c4:	200b      	movs	r0, #11
 800f1c6:	4770      	bx	lr
	...

0800f1d0 <rclc_support_init>:
 800f1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1d4:	b086      	sub	sp, #24
 800f1d6:	b3bb      	cbz	r3, 800f248 <rclc_support_init+0x78>
 800f1d8:	4606      	mov	r6, r0
 800f1da:	b3a8      	cbz	r0, 800f248 <rclc_support_init+0x78>
 800f1dc:	461c      	mov	r4, r3
 800f1de:	460f      	mov	r7, r1
 800f1e0:	4690      	mov	r8, r2
 800f1e2:	f000 fd85 	bl	800fcf0 <rcl_get_zero_initialized_init_options>
 800f1e6:	f104 050c 	add.w	r5, r4, #12
 800f1ea:	9005      	str	r0, [sp, #20]
 800f1ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f1f0:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f1f4:	a805      	add	r0, sp, #20
 800f1f6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800f1fa:	f000 fd7b 	bl	800fcf4 <rcl_init_options_init>
 800f1fe:	4605      	mov	r5, r0
 800f200:	b9e0      	cbnz	r0, 800f23c <rclc_support_init+0x6c>
 800f202:	ad02      	add	r5, sp, #8
 800f204:	4628      	mov	r0, r5
 800f206:	f000 fbfd 	bl	800fa04 <rcl_get_zero_initialized_context>
 800f20a:	4633      	mov	r3, r6
 800f20c:	aa05      	add	r2, sp, #20
 800f20e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f212:	e886 0003 	stmia.w	r6, {r0, r1}
 800f216:	4641      	mov	r1, r8
 800f218:	4638      	mov	r0, r7
 800f21a:	f000 fc63 	bl	800fae4 <rcl_init>
 800f21e:	4605      	mov	r5, r0
 800f220:	b9b8      	cbnz	r0, 800f252 <rclc_support_init+0x82>
 800f222:	4622      	mov	r2, r4
 800f224:	f106 010c 	add.w	r1, r6, #12
 800f228:	2003      	movs	r0, #3
 800f22a:	60b4      	str	r4, [r6, #8]
 800f22c:	f001 fbca 	bl	80109c4 <rcl_clock_init>
 800f230:	4605      	mov	r5, r0
 800f232:	b970      	cbnz	r0, 800f252 <rclc_support_init+0x82>
 800f234:	a805      	add	r0, sp, #20
 800f236:	f000 fdc3 	bl	800fdc0 <rcl_init_options_fini>
 800f23a:	b108      	cbz	r0, 800f240 <rclc_support_init+0x70>
 800f23c:	f000 f8d8 	bl	800f3f0 <rcutils_reset_error>
 800f240:	4628      	mov	r0, r5
 800f242:	b006      	add	sp, #24
 800f244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f248:	250b      	movs	r5, #11
 800f24a:	4628      	mov	r0, r5
 800f24c:	b006      	add	sp, #24
 800f24e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f252:	f000 f8cd 	bl	800f3f0 <rcutils_reset_error>
 800f256:	a805      	add	r0, sp, #20
 800f258:	f000 fdb2 	bl	800fdc0 <rcl_init_options_fini>
 800f25c:	2800      	cmp	r0, #0
 800f25e:	d0ef      	beq.n	800f240 <rclc_support_init+0x70>
 800f260:	e7ec      	b.n	800f23c <rclc_support_init+0x6c>
 800f262:	bf00      	nop

0800f264 <rclc_node_init_default>:
 800f264:	2b00      	cmp	r3, #0
 800f266:	bf18      	it	ne
 800f268:	2a00      	cmpne	r2, #0
 800f26a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f26e:	4616      	mov	r6, r2
 800f270:	bf0c      	ite	eq
 800f272:	2201      	moveq	r2, #1
 800f274:	2200      	movne	r2, #0
 800f276:	b0a1      	sub	sp, #132	@ 0x84
 800f278:	2900      	cmp	r1, #0
 800f27a:	bf08      	it	eq
 800f27c:	f042 0201 	orreq.w	r2, r2, #1
 800f280:	bb22      	cbnz	r2, 800f2cc <rclc_node_init_default+0x68>
 800f282:	4604      	mov	r4, r0
 800f284:	b310      	cbz	r0, 800f2cc <rclc_node_init_default+0x68>
 800f286:	f10d 0810 	add.w	r8, sp, #16
 800f28a:	461f      	mov	r7, r3
 800f28c:	460d      	mov	r5, r1
 800f28e:	f10d 0918 	add.w	r9, sp, #24
 800f292:	4640      	mov	r0, r8
 800f294:	f000 fe4e 	bl	800ff34 <rcl_get_zero_initialized_node>
 800f298:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f29c:	e884 0003 	stmia.w	r4, {r0, r1}
 800f2a0:	4648      	mov	r0, r9
 800f2a2:	f000 ffc1 	bl	8010228 <rcl_node_get_default_options>
 800f2a6:	4640      	mov	r0, r8
 800f2a8:	f000 fe44 	bl	800ff34 <rcl_get_zero_initialized_node>
 800f2ac:	f8cd 9000 	str.w	r9, [sp]
 800f2b0:	463b      	mov	r3, r7
 800f2b2:	4632      	mov	r2, r6
 800f2b4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f2b8:	e884 0003 	stmia.w	r4, {r0, r1}
 800f2bc:	4629      	mov	r1, r5
 800f2be:	4620      	mov	r0, r4
 800f2c0:	f000 fe42 	bl	800ff48 <rcl_node_init>
 800f2c4:	b930      	cbnz	r0, 800f2d4 <rclc_node_init_default+0x70>
 800f2c6:	b021      	add	sp, #132	@ 0x84
 800f2c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2cc:	200b      	movs	r0, #11
 800f2ce:	b021      	add	sp, #132	@ 0x84
 800f2d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2d4:	9003      	str	r0, [sp, #12]
 800f2d6:	f000 f88b 	bl	800f3f0 <rcutils_reset_error>
 800f2da:	f000 f889 	bl	800f3f0 <rcutils_reset_error>
 800f2de:	9803      	ldr	r0, [sp, #12]
 800f2e0:	b021      	add	sp, #132	@ 0x84
 800f2e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2e6:	bf00      	nop

0800f2e8 <rclc_subscription_init_default>:
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	bf18      	it	ne
 800f2ec:	2a00      	cmpne	r2, #0
 800f2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2f2:	4616      	mov	r6, r2
 800f2f4:	bf0c      	ite	eq
 800f2f6:	2201      	moveq	r2, #1
 800f2f8:	2200      	movne	r2, #0
 800f2fa:	b0a0      	sub	sp, #128	@ 0x80
 800f2fc:	2900      	cmp	r1, #0
 800f2fe:	bf08      	it	eq
 800f300:	f042 0201 	orreq.w	r2, r2, #1
 800f304:	bb1a      	cbnz	r2, 800f34e <rclc_subscription_init_default+0x66>
 800f306:	4604      	mov	r4, r0
 800f308:	b308      	cbz	r0, 800f34e <rclc_subscription_init_default+0x66>
 800f30a:	f10d 0810 	add.w	r8, sp, #16
 800f30e:	461f      	mov	r7, r3
 800f310:	460d      	mov	r5, r1
 800f312:	f001 f9f5 	bl	8010700 <rcl_get_zero_initialized_subscription>
 800f316:	6020      	str	r0, [r4, #0]
 800f318:	4640      	mov	r0, r8
 800f31a:	f001 faa5 	bl	8010868 <rcl_subscription_get_default_options>
 800f31e:	2250      	movs	r2, #80	@ 0x50
 800f320:	490d      	ldr	r1, [pc, #52]	@ (800f358 <rclc_subscription_init_default+0x70>)
 800f322:	4640      	mov	r0, r8
 800f324:	f00c f95b 	bl	801b5de <memcpy>
 800f328:	463b      	mov	r3, r7
 800f32a:	4632      	mov	r2, r6
 800f32c:	4629      	mov	r1, r5
 800f32e:	4620      	mov	r0, r4
 800f330:	f8cd 8000 	str.w	r8, [sp]
 800f334:	f001 f9ea 	bl	801070c <rcl_subscription_init>
 800f338:	b910      	cbnz	r0, 800f340 <rclc_subscription_init_default+0x58>
 800f33a:	b020      	add	sp, #128	@ 0x80
 800f33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f340:	9003      	str	r0, [sp, #12]
 800f342:	f000 f855 	bl	800f3f0 <rcutils_reset_error>
 800f346:	9803      	ldr	r0, [sp, #12]
 800f348:	b020      	add	sp, #128	@ 0x80
 800f34a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f34e:	200b      	movs	r0, #11
 800f350:	b020      	add	sp, #128	@ 0x80
 800f352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f356:	bf00      	nop
 800f358:	0801c3c0 	.word	0x0801c3c0

0800f35c <__default_zero_allocate>:
 800f35c:	f00b bb48 	b.w	801a9f0 <calloc>

0800f360 <__default_reallocate>:
 800f360:	f00b bce6 	b.w	801ad30 <realloc>

0800f364 <__default_deallocate>:
 800f364:	f00b bbc2 	b.w	801aaec <free>

0800f368 <__default_allocate>:
 800f368:	f00b bbb8 	b.w	801aadc <malloc>

0800f36c <rcutils_get_zero_initialized_allocator>:
 800f36c:	b510      	push	{r4, lr}
 800f36e:	4c05      	ldr	r4, [pc, #20]	@ (800f384 <rcutils_get_zero_initialized_allocator+0x18>)
 800f370:	4686      	mov	lr, r0
 800f372:	4684      	mov	ip, r0
 800f374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f376:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f37a:	6823      	ldr	r3, [r4, #0]
 800f37c:	4670      	mov	r0, lr
 800f37e:	f8cc 3000 	str.w	r3, [ip]
 800f382:	bd10      	pop	{r4, pc}
 800f384:	0801c410 	.word	0x0801c410

0800f388 <rcutils_get_default_allocator>:
 800f388:	b510      	push	{r4, lr}
 800f38a:	4c05      	ldr	r4, [pc, #20]	@ (800f3a0 <rcutils_get_default_allocator+0x18>)
 800f38c:	4686      	mov	lr, r0
 800f38e:	4684      	mov	ip, r0
 800f390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f392:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f396:	6823      	ldr	r3, [r4, #0]
 800f398:	4670      	mov	r0, lr
 800f39a:	f8cc 3000 	str.w	r3, [ip]
 800f39e:	bd10      	pop	{r4, pc}
 800f3a0:	24000018 	.word	0x24000018

0800f3a4 <rcutils_allocator_is_valid>:
 800f3a4:	b158      	cbz	r0, 800f3be <rcutils_allocator_is_valid+0x1a>
 800f3a6:	6803      	ldr	r3, [r0, #0]
 800f3a8:	b143      	cbz	r3, 800f3bc <rcutils_allocator_is_valid+0x18>
 800f3aa:	6843      	ldr	r3, [r0, #4]
 800f3ac:	b133      	cbz	r3, 800f3bc <rcutils_allocator_is_valid+0x18>
 800f3ae:	68c3      	ldr	r3, [r0, #12]
 800f3b0:	b123      	cbz	r3, 800f3bc <rcutils_allocator_is_valid+0x18>
 800f3b2:	6880      	ldr	r0, [r0, #8]
 800f3b4:	3800      	subs	r0, #0
 800f3b6:	bf18      	it	ne
 800f3b8:	2001      	movne	r0, #1
 800f3ba:	4770      	bx	lr
 800f3bc:	4618      	mov	r0, r3
 800f3be:	4770      	bx	lr

0800f3c0 <rcutils_get_error_string>:
 800f3c0:	4b06      	ldr	r3, [pc, #24]	@ (800f3dc <rcutils_get_error_string+0x1c>)
 800f3c2:	781b      	ldrb	r3, [r3, #0]
 800f3c4:	b13b      	cbz	r3, 800f3d6 <rcutils_get_error_string+0x16>
 800f3c6:	4b06      	ldr	r3, [pc, #24]	@ (800f3e0 <rcutils_get_error_string+0x20>)
 800f3c8:	781a      	ldrb	r2, [r3, #0]
 800f3ca:	b90a      	cbnz	r2, 800f3d0 <rcutils_get_error_string+0x10>
 800f3cc:	2201      	movs	r2, #1
 800f3ce:	701a      	strb	r2, [r3, #0]
 800f3d0:	4b04      	ldr	r3, [pc, #16]	@ (800f3e4 <rcutils_get_error_string+0x24>)
 800f3d2:	7818      	ldrb	r0, [r3, #0]
 800f3d4:	4770      	bx	lr
 800f3d6:	4b04      	ldr	r3, [pc, #16]	@ (800f3e8 <rcutils_get_error_string+0x28>)
 800f3d8:	7818      	ldrb	r0, [r3, #0]
 800f3da:	4770      	bx	lr
 800f3dc:	24063c08 	.word	0x24063c08
 800f3e0:	24063c21 	.word	0x24063c21
 800f3e4:	24063c20 	.word	0x24063c20
 800f3e8:	0801c424 	.word	0x0801c424
 800f3ec:	00000000 	.word	0x00000000

0800f3f0 <rcutils_reset_error>:
 800f3f0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800f410 <rcutils_reset_error+0x20>
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	4a08      	ldr	r2, [pc, #32]	@ (800f418 <rcutils_reset_error+0x28>)
 800f3f8:	4808      	ldr	r0, [pc, #32]	@ (800f41c <rcutils_reset_error+0x2c>)
 800f3fa:	8013      	strh	r3, [r2, #0]
 800f3fc:	4908      	ldr	r1, [pc, #32]	@ (800f420 <rcutils_reset_error+0x30>)
 800f3fe:	7003      	strb	r3, [r0, #0]
 800f400:	700b      	strb	r3, [r1, #0]
 800f402:	ed82 7b02 	vstr	d7, [r2, #8]
 800f406:	4a07      	ldr	r2, [pc, #28]	@ (800f424 <rcutils_reset_error+0x34>)
 800f408:	7013      	strb	r3, [r2, #0]
 800f40a:	4770      	bx	lr
 800f40c:	f3af 8000 	nop.w
	...
 800f418:	24063c10 	.word	0x24063c10
 800f41c:	24063c21 	.word	0x24063c21
 800f420:	24063c20 	.word	0x24063c20
 800f424:	24063c08 	.word	0x24063c08

0800f428 <rcutils_system_time_now>:
 800f428:	b300      	cbz	r0, 800f46c <rcutils_system_time_now+0x44>
 800f42a:	b570      	push	{r4, r5, r6, lr}
 800f42c:	b084      	sub	sp, #16
 800f42e:	4604      	mov	r4, r0
 800f430:	2001      	movs	r0, #1
 800f432:	4669      	mov	r1, sp
 800f434:	f7f2 f9b0 	bl	8001798 <clock_gettime>
 800f438:	e9dd 3100 	ldrd	r3, r1, [sp]
 800f43c:	2900      	cmp	r1, #0
 800f43e:	db12      	blt.n	800f466 <rcutils_system_time_now+0x3e>
 800f440:	ea53 0201 	orrs.w	r2, r3, r1
 800f444:	9d02      	ldr	r5, [sp, #8]
 800f446:	d101      	bne.n	800f44c <rcutils_system_time_now+0x24>
 800f448:	2d00      	cmp	r5, #0
 800f44a:	db0c      	blt.n	800f466 <rcutils_system_time_now+0x3e>
 800f44c:	4e08      	ldr	r6, [pc, #32]	@ (800f470 <rcutils_system_time_now+0x48>)
 800f44e:	2000      	movs	r0, #0
 800f450:	fba3 3206 	umull	r3, r2, r3, r6
 800f454:	195b      	adds	r3, r3, r5
 800f456:	fb06 2201 	mla	r2, r6, r1, r2
 800f45a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800f45e:	e9c4 3200 	strd	r3, r2, [r4]
 800f462:	b004      	add	sp, #16
 800f464:	bd70      	pop	{r4, r5, r6, pc}
 800f466:	2002      	movs	r0, #2
 800f468:	b004      	add	sp, #16
 800f46a:	bd70      	pop	{r4, r5, r6, pc}
 800f46c:	200b      	movs	r0, #11
 800f46e:	4770      	bx	lr
 800f470:	3b9aca00 	.word	0x3b9aca00

0800f474 <rcutils_steady_time_now>:
 800f474:	b300      	cbz	r0, 800f4b8 <rcutils_steady_time_now+0x44>
 800f476:	b570      	push	{r4, r5, r6, lr}
 800f478:	b084      	sub	sp, #16
 800f47a:	4604      	mov	r4, r0
 800f47c:	2000      	movs	r0, #0
 800f47e:	4669      	mov	r1, sp
 800f480:	f7f2 f98a 	bl	8001798 <clock_gettime>
 800f484:	e9dd 3100 	ldrd	r3, r1, [sp]
 800f488:	2900      	cmp	r1, #0
 800f48a:	db12      	blt.n	800f4b2 <rcutils_steady_time_now+0x3e>
 800f48c:	ea53 0201 	orrs.w	r2, r3, r1
 800f490:	9d02      	ldr	r5, [sp, #8]
 800f492:	d101      	bne.n	800f498 <rcutils_steady_time_now+0x24>
 800f494:	2d00      	cmp	r5, #0
 800f496:	db0c      	blt.n	800f4b2 <rcutils_steady_time_now+0x3e>
 800f498:	4e08      	ldr	r6, [pc, #32]	@ (800f4bc <rcutils_steady_time_now+0x48>)
 800f49a:	2000      	movs	r0, #0
 800f49c:	fba3 3206 	umull	r3, r2, r3, r6
 800f4a0:	195b      	adds	r3, r3, r5
 800f4a2:	fb06 2201 	mla	r2, r6, r1, r2
 800f4a6:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800f4aa:	e9c4 3200 	strd	r3, r2, [r4]
 800f4ae:	b004      	add	sp, #16
 800f4b0:	bd70      	pop	{r4, r5, r6, pc}
 800f4b2:	2002      	movs	r0, #2
 800f4b4:	b004      	add	sp, #16
 800f4b6:	bd70      	pop	{r4, r5, r6, pc}
 800f4b8:	200b      	movs	r0, #11
 800f4ba:	4770      	bx	lr
 800f4bc:	3b9aca00 	.word	0x3b9aca00

0800f4c0 <rmw_uros_set_custom_transport>:
 800f4c0:	b470      	push	{r4, r5, r6}
 800f4c2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800f4c6:	b162      	cbz	r2, 800f4e2 <rmw_uros_set_custom_transport+0x22>
 800f4c8:	b15b      	cbz	r3, 800f4e2 <rmw_uros_set_custom_transport+0x22>
 800f4ca:	b155      	cbz	r5, 800f4e2 <rmw_uros_set_custom_transport+0x22>
 800f4cc:	b14e      	cbz	r6, 800f4e2 <rmw_uros_set_custom_transport+0x22>
 800f4ce:	4c06      	ldr	r4, [pc, #24]	@ (800f4e8 <rmw_uros_set_custom_transport+0x28>)
 800f4d0:	7020      	strb	r0, [r4, #0]
 800f4d2:	2000      	movs	r0, #0
 800f4d4:	6166      	str	r6, [r4, #20]
 800f4d6:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800f4da:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f4de:	bc70      	pop	{r4, r5, r6}
 800f4e0:	4770      	bx	lr
 800f4e2:	200b      	movs	r0, #11
 800f4e4:	bc70      	pop	{r4, r5, r6}
 800f4e6:	4770      	bx	lr
 800f4e8:	24063c24 	.word	0x24063c24

0800f4ec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray>:
 800f4ec:	4b04      	ldr	r3, [pc, #16]	@ (800f500 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray+0x14>)
 800f4ee:	681a      	ldr	r2, [r3, #0]
 800f4f0:	b10a      	cbz	r2, 800f4f6 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray+0xa>
 800f4f2:	4803      	ldr	r0, [pc, #12]	@ (800f500 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray+0x14>)
 800f4f4:	4770      	bx	lr
 800f4f6:	4a03      	ldr	r2, [pc, #12]	@ (800f504 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray+0x18>)
 800f4f8:	4801      	ldr	r0, [pc, #4]	@ (800f500 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray+0x14>)
 800f4fa:	6812      	ldr	r2, [r2, #0]
 800f4fc:	601a      	str	r2, [r3, #0]
 800f4fe:	4770      	bx	lr
 800f500:	24000034 	.word	0x24000034
 800f504:	240000ec 	.word	0x240000ec

0800f508 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray>:
 800f508:	4a02      	ldr	r2, [pc, #8]	@ (800f514 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray+0xc>)
 800f50a:	4b03      	ldr	r3, [pc, #12]	@ (800f518 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray+0x10>)
 800f50c:	6812      	ldr	r2, [r2, #0]
 800f50e:	601a      	str	r2, [r3, #0]
 800f510:	4770      	bx	lr
 800f512:	bf00      	nop
 800f514:	240000ec 	.word	0x240000ec
 800f518:	24000034 	.word	0x24000034

0800f51c <std_msgs__msg__UInt8MultiArray__rosidl_typesupport_introspection_c__size_function__UInt8MultiArray__data>:
 800f51c:	6840      	ldr	r0, [r0, #4]
 800f51e:	4770      	bx	lr

0800f520 <std_msgs__msg__UInt8MultiArray__rosidl_typesupport_introspection_c__get_const_function__UInt8MultiArray__data>:
 800f520:	6800      	ldr	r0, [r0, #0]
 800f522:	4408      	add	r0, r1
 800f524:	4770      	bx	lr
 800f526:	bf00      	nop

0800f528 <std_msgs__msg__UInt8MultiArray__rosidl_typesupport_introspection_c__fetch_function__UInt8MultiArray__data>:
 800f528:	6803      	ldr	r3, [r0, #0]
 800f52a:	5c5b      	ldrb	r3, [r3, r1]
 800f52c:	7013      	strb	r3, [r2, #0]
 800f52e:	4770      	bx	lr

0800f530 <std_msgs__msg__UInt8MultiArray__rosidl_typesupport_introspection_c__assign_function__UInt8MultiArray__data>:
 800f530:	7812      	ldrb	r2, [r2, #0]
 800f532:	6803      	ldr	r3, [r0, #0]
 800f534:	545a      	strb	r2, [r3, r1]
 800f536:	4770      	bx	lr

0800f538 <std_msgs__msg__UInt8MultiArray__rosidl_typesupport_introspection_c__UInt8MultiArray_init_function>:
 800f538:	f005 b99e 	b.w	8014878 <std_msgs__msg__UInt8MultiArray__init>

0800f53c <std_msgs__msg__UInt8MultiArray__rosidl_typesupport_introspection_c__UInt8MultiArray_fini_function>:
 800f53c:	f005 b9c0 	b.w	80148c0 <std_msgs__msg__UInt8MultiArray__fini>

0800f540 <std_msgs__msg__UInt8MultiArray__rosidl_typesupport_introspection_c__resize_function__UInt8MultiArray__data>:
 800f540:	b510      	push	{r4, lr}
 800f542:	4604      	mov	r4, r0
 800f544:	b082      	sub	sp, #8
 800f546:	9101      	str	r1, [sp, #4]
 800f548:	f005 f954 	bl	80147f4 <rosidl_runtime_c__uint8__Sequence__fini>
 800f54c:	9901      	ldr	r1, [sp, #4]
 800f54e:	4620      	mov	r0, r4
 800f550:	b002      	add	sp, #8
 800f552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f556:	f005 b935 	b.w	80147c4 <rosidl_runtime_c__uint8__Sequence__init>
 800f55a:	bf00      	nop

0800f55c <std_msgs__msg__UInt8MultiArray__rosidl_typesupport_introspection_c__get_function__UInt8MultiArray__data>:
 800f55c:	6800      	ldr	r0, [r0, #0]
 800f55e:	4408      	add	r0, r1
 800f560:	4770      	bx	lr
 800f562:	bf00      	nop

0800f564 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray>:
 800f564:	b508      	push	{r3, lr}
 800f566:	f005 f9fb 	bl	8014960 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800f56a:	4b06      	ldr	r3, [pc, #24]	@ (800f584 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray+0x20>)
 800f56c:	4906      	ldr	r1, [pc, #24]	@ (800f588 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray+0x24>)
 800f56e:	681a      	ldr	r2, [r3, #0]
 800f570:	60c8      	str	r0, [r1, #12]
 800f572:	b10a      	cbz	r2, 800f578 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray+0x14>
 800f574:	4803      	ldr	r0, [pc, #12]	@ (800f584 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray+0x20>)
 800f576:	bd08      	pop	{r3, pc}
 800f578:	4a04      	ldr	r2, [pc, #16]	@ (800f58c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray+0x28>)
 800f57a:	4802      	ldr	r0, [pc, #8]	@ (800f584 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray+0x20>)
 800f57c:	6812      	ldr	r2, [r2, #0]
 800f57e:	601a      	str	r2, [r3, #0]
 800f580:	bd08      	pop	{r3, pc}
 800f582:	bf00      	nop
 800f584:	240000b8 	.word	0x240000b8
 800f588:	24000040 	.word	0x24000040
 800f58c:	240000f0 	.word	0x240000f0

0800f590 <_UInt8MultiArray__max_serialized_size>:
 800f590:	b500      	push	{lr}
 800f592:	b083      	sub	sp, #12
 800f594:	2301      	movs	r3, #1
 800f596:	2100      	movs	r1, #0
 800f598:	f10d 0007 	add.w	r0, sp, #7
 800f59c:	f88d 3007 	strb.w	r3, [sp, #7]
 800f5a0:	f005 fa8c 	bl	8014abc <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800f5a4:	b003      	add	sp, #12
 800f5a6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f5aa:	bf00      	nop

0800f5ac <get_serialized_size_std_msgs__msg__UInt8MultiArray>:
 800f5ac:	b570      	push	{r4, r5, r6, lr}
 800f5ae:	4604      	mov	r4, r0
 800f5b0:	b160      	cbz	r0, 800f5cc <get_serialized_size_std_msgs__msg__UInt8MultiArray+0x20>
 800f5b2:	460d      	mov	r5, r1
 800f5b4:	f005 fa26 	bl	8014a04 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800f5b8:	6966      	ldr	r6, [r4, #20]
 800f5ba:	2104      	movs	r1, #4
 800f5bc:	182c      	adds	r4, r5, r0
 800f5be:	4620      	mov	r0, r4
 800f5c0:	f000 f8c8 	bl	800f754 <ucdr_alignment>
 800f5c4:	1d03      	adds	r3, r0, #4
 800f5c6:	441c      	add	r4, r3
 800f5c8:	b90e      	cbnz	r6, 800f5ce <get_serialized_size_std_msgs__msg__UInt8MultiArray+0x22>
 800f5ca:	1b60      	subs	r0, r4, r5
 800f5cc:	bd70      	pop	{r4, r5, r6, pc}
 800f5ce:	4620      	mov	r0, r4
 800f5d0:	2101      	movs	r1, #1
 800f5d2:	f000 f8bf 	bl	800f754 <ucdr_alignment>
 800f5d6:	1933      	adds	r3, r6, r4
 800f5d8:	181c      	adds	r4, r3, r0
 800f5da:	1b60      	subs	r0, r4, r5
 800f5dc:	e7f6      	b.n	800f5cc <get_serialized_size_std_msgs__msg__UInt8MultiArray+0x20>
 800f5de:	bf00      	nop

0800f5e0 <_UInt8MultiArray__cdr_deserialize>:
 800f5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5e2:	460c      	mov	r4, r1
 800f5e4:	b083      	sub	sp, #12
 800f5e6:	b1d9      	cbz	r1, 800f620 <_UInt8MultiArray__cdr_deserialize+0x40>
 800f5e8:	4606      	mov	r6, r0
 800f5ea:	f005 fa71 	bl	8014ad0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	4621      	mov	r1, r4
 800f5f2:	4630      	mov	r0, r6
 800f5f4:	685b      	ldr	r3, [r3, #4]
 800f5f6:	68db      	ldr	r3, [r3, #12]
 800f5f8:	4798      	blx	r3
 800f5fa:	69a7      	ldr	r7, [r4, #24]
 800f5fc:	ab01      	add	r3, sp, #4
 800f5fe:	6921      	ldr	r1, [r4, #16]
 800f600:	463a      	mov	r2, r7
 800f602:	4630      	mov	r0, r6
 800f604:	f000 f954 	bl	800f8b0 <ucdr_deserialize_sequence_uint8_t>
 800f608:	9b01      	ldr	r3, [sp, #4]
 800f60a:	4605      	mov	r5, r0
 800f60c:	b920      	cbnz	r0, 800f618 <_UInt8MultiArray__cdr_deserialize+0x38>
 800f60e:	429f      	cmp	r7, r3
 800f610:	d30a      	bcc.n	800f628 <_UInt8MultiArray__cdr_deserialize+0x48>
 800f612:	4628      	mov	r0, r5
 800f614:	b003      	add	sp, #12
 800f616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f618:	4628      	mov	r0, r5
 800f61a:	6163      	str	r3, [r4, #20]
 800f61c:	b003      	add	sp, #12
 800f61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f620:	460d      	mov	r5, r1
 800f622:	4628      	mov	r0, r5
 800f624:	b003      	add	sp, #12
 800f626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f628:	2101      	movs	r1, #1
 800f62a:	4630      	mov	r0, r6
 800f62c:	75b5      	strb	r5, [r6, #22]
 800f62e:	7571      	strb	r1, [r6, #21]
 800f630:	6165      	str	r5, [r4, #20]
 800f632:	f000 f8a7 	bl	800f784 <ucdr_align_to>
 800f636:	4630      	mov	r0, r6
 800f638:	9901      	ldr	r1, [sp, #4]
 800f63a:	f000 f8db 	bl	800f7f4 <ucdr_advance_buffer>
 800f63e:	4628      	mov	r0, r5
 800f640:	b003      	add	sp, #12
 800f642:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f644 <_UInt8MultiArray__cdr_serialize>:
 800f644:	b188      	cbz	r0, 800f66a <_UInt8MultiArray__cdr_serialize+0x26>
 800f646:	b538      	push	{r3, r4, r5, lr}
 800f648:	4604      	mov	r4, r0
 800f64a:	460d      	mov	r5, r1
 800f64c:	f005 fa40 	bl	8014ad0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800f650:	4603      	mov	r3, r0
 800f652:	4629      	mov	r1, r5
 800f654:	4620      	mov	r0, r4
 800f656:	685b      	ldr	r3, [r3, #4]
 800f658:	689b      	ldr	r3, [r3, #8]
 800f65a:	4798      	blx	r3
 800f65c:	4628      	mov	r0, r5
 800f65e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800f662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f666:	f000 b911 	b.w	800f88c <ucdr_serialize_sequence_uint8_t>
 800f66a:	4770      	bx	lr

0800f66c <_UInt8MultiArray__get_serialized_size>:
 800f66c:	b538      	push	{r3, r4, r5, lr}
 800f66e:	4604      	mov	r4, r0
 800f670:	b150      	cbz	r0, 800f688 <_UInt8MultiArray__get_serialized_size+0x1c>
 800f672:	2100      	movs	r1, #0
 800f674:	f005 f9c6 	bl	8014a04 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800f678:	6965      	ldr	r5, [r4, #20]
 800f67a:	4604      	mov	r4, r0
 800f67c:	2104      	movs	r1, #4
 800f67e:	f000 f869 	bl	800f754 <ucdr_alignment>
 800f682:	4404      	add	r4, r0
 800f684:	3404      	adds	r4, #4
 800f686:	b90d      	cbnz	r5, 800f68c <_UInt8MultiArray__get_serialized_size+0x20>
 800f688:	4620      	mov	r0, r4
 800f68a:	bd38      	pop	{r3, r4, r5, pc}
 800f68c:	4620      	mov	r0, r4
 800f68e:	442c      	add	r4, r5
 800f690:	2101      	movs	r1, #1
 800f692:	f000 f85f 	bl	800f754 <ucdr_alignment>
 800f696:	4404      	add	r4, r0
 800f698:	4620      	mov	r0, r4
 800f69a:	bd38      	pop	{r3, r4, r5, pc}

0800f69c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray>:
 800f69c:	4800      	ldr	r0, [pc, #0]	@ (800f6a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray+0x4>)
 800f69e:	4770      	bx	lr
 800f6a0:	240000c4 	.word	0x240000c4

0800f6a4 <ucdr_check_buffer_available_for>:
 800f6a4:	7d83      	ldrb	r3, [r0, #22]
 800f6a6:	b93b      	cbnz	r3, 800f6b8 <ucdr_check_buffer_available_for+0x14>
 800f6a8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800f6ac:	4419      	add	r1, r3
 800f6ae:	4288      	cmp	r0, r1
 800f6b0:	bf34      	ite	cc
 800f6b2:	2000      	movcc	r0, #0
 800f6b4:	2001      	movcs	r0, #1
 800f6b6:	4770      	bx	lr
 800f6b8:	2000      	movs	r0, #0
 800f6ba:	4770      	bx	lr

0800f6bc <ucdr_check_final_buffer_behavior>:
 800f6bc:	7d83      	ldrb	r3, [r0, #22]
 800f6be:	b943      	cbnz	r3, 800f6d2 <ucdr_check_final_buffer_behavior+0x16>
 800f6c0:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800f6c4:	b510      	push	{r4, lr}
 800f6c6:	4291      	cmp	r1, r2
 800f6c8:	4604      	mov	r4, r0
 800f6ca:	d205      	bcs.n	800f6d8 <ucdr_check_final_buffer_behavior+0x1c>
 800f6cc:	2301      	movs	r3, #1
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	bd10      	pop	{r4, pc}
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	4770      	bx	lr
 800f6d8:	6982      	ldr	r2, [r0, #24]
 800f6da:	b13a      	cbz	r2, 800f6ec <ucdr_check_final_buffer_behavior+0x30>
 800f6dc:	69c1      	ldr	r1, [r0, #28]
 800f6de:	4790      	blx	r2
 800f6e0:	f080 0301 	eor.w	r3, r0, #1
 800f6e4:	75a0      	strb	r0, [r4, #22]
 800f6e6:	b2db      	uxtb	r3, r3
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	bd10      	pop	{r4, pc}
 800f6ec:	2001      	movs	r0, #1
 800f6ee:	75a0      	strb	r0, [r4, #22]
 800f6f0:	e7fa      	b.n	800f6e8 <ucdr_check_final_buffer_behavior+0x2c>
 800f6f2:	bf00      	nop

0800f6f4 <ucdr_set_on_full_buffer_callback>:
 800f6f4:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800f6f8:	4770      	bx	lr
 800f6fa:	bf00      	nop

0800f6fc <ucdr_init_buffer_origin_offset_endian>:
 800f6fc:	b410      	push	{r4}
 800f6fe:	9c01      	ldr	r4, [sp, #4]
 800f700:	440a      	add	r2, r1
 800f702:	6001      	str	r1, [r0, #0]
 800f704:	6042      	str	r2, [r0, #4]
 800f706:	190a      	adds	r2, r1, r4
 800f708:	441c      	add	r4, r3
 800f70a:	6082      	str	r2, [r0, #8]
 800f70c:	2200      	movs	r2, #0
 800f70e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800f712:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f716:	7542      	strb	r2, [r0, #21]
 800f718:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f71c:	7582      	strb	r2, [r0, #22]
 800f71e:	7503      	strb	r3, [r0, #20]
 800f720:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800f724:	4770      	bx	lr
 800f726:	bf00      	nop

0800f728 <ucdr_init_buffer_origin_offset>:
 800f728:	b510      	push	{r4, lr}
 800f72a:	b082      	sub	sp, #8
 800f72c:	9c04      	ldr	r4, [sp, #16]
 800f72e:	9400      	str	r4, [sp, #0]
 800f730:	2401      	movs	r4, #1
 800f732:	9401      	str	r4, [sp, #4]
 800f734:	f7ff ffe2 	bl	800f6fc <ucdr_init_buffer_origin_offset_endian>
 800f738:	b002      	add	sp, #8
 800f73a:	bd10      	pop	{r4, pc}

0800f73c <ucdr_init_buffer_origin>:
 800f73c:	b510      	push	{r4, lr}
 800f73e:	2400      	movs	r4, #0
 800f740:	b082      	sub	sp, #8
 800f742:	9400      	str	r4, [sp, #0]
 800f744:	f7ff fff0 	bl	800f728 <ucdr_init_buffer_origin_offset>
 800f748:	b002      	add	sp, #8
 800f74a:	bd10      	pop	{r4, pc}

0800f74c <ucdr_init_buffer>:
 800f74c:	2300      	movs	r3, #0
 800f74e:	f7ff bff5 	b.w	800f73c <ucdr_init_buffer_origin>
 800f752:	bf00      	nop

0800f754 <ucdr_alignment>:
 800f754:	fbb0 f2f1 	udiv	r2, r0, r1
 800f758:	fb02 0011 	mls	r0, r2, r1, r0
 800f75c:	1e4b      	subs	r3, r1, #1
 800f75e:	1a08      	subs	r0, r1, r0
 800f760:	4018      	ands	r0, r3
 800f762:	4770      	bx	lr

0800f764 <ucdr_buffer_alignment>:
 800f764:	7d43      	ldrb	r3, [r0, #21]
 800f766:	428b      	cmp	r3, r1
 800f768:	d209      	bcs.n	800f77e <ucdr_buffer_alignment+0x1a>
 800f76a:	6903      	ldr	r3, [r0, #16]
 800f76c:	1e4a      	subs	r2, r1, #1
 800f76e:	fbb3 f0f1 	udiv	r0, r3, r1
 800f772:	fb01 3010 	mls	r0, r1, r0, r3
 800f776:	1a09      	subs	r1, r1, r0
 800f778:	ea01 0002 	and.w	r0, r1, r2
 800f77c:	4770      	bx	lr
 800f77e:	2000      	movs	r0, #0
 800f780:	4770      	bx	lr
 800f782:	bf00      	nop

0800f784 <ucdr_align_to>:
 800f784:	b538      	push	{r3, r4, r5, lr}
 800f786:	4604      	mov	r4, r0
 800f788:	460d      	mov	r5, r1
 800f78a:	f7ff ffeb 	bl	800f764 <ucdr_buffer_alignment>
 800f78e:	68a3      	ldr	r3, [r4, #8]
 800f790:	7565      	strb	r5, [r4, #21]
 800f792:	181a      	adds	r2, r3, r0
 800f794:	6923      	ldr	r3, [r4, #16]
 800f796:	4418      	add	r0, r3
 800f798:	6863      	ldr	r3, [r4, #4]
 800f79a:	4293      	cmp	r3, r2
 800f79c:	6120      	str	r0, [r4, #16]
 800f79e:	bf28      	it	cs
 800f7a0:	4613      	movcs	r3, r2
 800f7a2:	60a3      	str	r3, [r4, #8]
 800f7a4:	bd38      	pop	{r3, r4, r5, pc}
 800f7a6:	bf00      	nop

0800f7a8 <ucdr_buffer_length>:
 800f7a8:	6882      	ldr	r2, [r0, #8]
 800f7aa:	6800      	ldr	r0, [r0, #0]
 800f7ac:	1a10      	subs	r0, r2, r0
 800f7ae:	4770      	bx	lr

0800f7b0 <ucdr_buffer_remaining>:
 800f7b0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800f7b4:	1a10      	subs	r0, r2, r0
 800f7b6:	4770      	bx	lr

0800f7b8 <ucdr_check_final_buffer_behavior_array>:
 800f7b8:	b538      	push	{r3, r4, r5, lr}
 800f7ba:	7d83      	ldrb	r3, [r0, #22]
 800f7bc:	b9a3      	cbnz	r3, 800f7e8 <ucdr_check_final_buffer_behavior_array+0x30>
 800f7be:	4604      	mov	r4, r0
 800f7c0:	460d      	mov	r5, r1
 800f7c2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800f7c6:	429a      	cmp	r2, r3
 800f7c8:	d300      	bcc.n	800f7cc <ucdr_check_final_buffer_behavior_array+0x14>
 800f7ca:	b931      	cbnz	r1, 800f7da <ucdr_check_final_buffer_behavior_array+0x22>
 800f7cc:	4620      	mov	r0, r4
 800f7ce:	f7ff ffef 	bl	800f7b0 <ucdr_buffer_remaining>
 800f7d2:	42a8      	cmp	r0, r5
 800f7d4:	bf28      	it	cs
 800f7d6:	4628      	movcs	r0, r5
 800f7d8:	bd38      	pop	{r3, r4, r5, pc}
 800f7da:	6983      	ldr	r3, [r0, #24]
 800f7dc:	b133      	cbz	r3, 800f7ec <ucdr_check_final_buffer_behavior_array+0x34>
 800f7de:	69c1      	ldr	r1, [r0, #28]
 800f7e0:	4798      	blx	r3
 800f7e2:	75a0      	strb	r0, [r4, #22]
 800f7e4:	2800      	cmp	r0, #0
 800f7e6:	d0f1      	beq.n	800f7cc <ucdr_check_final_buffer_behavior_array+0x14>
 800f7e8:	2000      	movs	r0, #0
 800f7ea:	bd38      	pop	{r3, r4, r5, pc}
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	7583      	strb	r3, [r0, #22]
 800f7f0:	e7fa      	b.n	800f7e8 <ucdr_check_final_buffer_behavior_array+0x30>
 800f7f2:	bf00      	nop

0800f7f4 <ucdr_advance_buffer>:
 800f7f4:	b538      	push	{r3, r4, r5, lr}
 800f7f6:	4604      	mov	r4, r0
 800f7f8:	460d      	mov	r5, r1
 800f7fa:	f7ff ff53 	bl	800f6a4 <ucdr_check_buffer_available_for>
 800f7fe:	b178      	cbz	r0, 800f820 <ucdr_advance_buffer+0x2c>
 800f800:	6923      	ldr	r3, [r4, #16]
 800f802:	68a2      	ldr	r2, [r4, #8]
 800f804:	442b      	add	r3, r5
 800f806:	442a      	add	r2, r5
 800f808:	6123      	str	r3, [r4, #16]
 800f80a:	2301      	movs	r3, #1
 800f80c:	60a2      	str	r2, [r4, #8]
 800f80e:	7563      	strb	r3, [r4, #21]
 800f810:	bd38      	pop	{r3, r4, r5, pc}
 800f812:	68a2      	ldr	r2, [r4, #8]
 800f814:	1a2d      	subs	r5, r5, r0
 800f816:	6923      	ldr	r3, [r4, #16]
 800f818:	4402      	add	r2, r0
 800f81a:	4418      	add	r0, r3
 800f81c:	60a2      	str	r2, [r4, #8]
 800f81e:	6120      	str	r0, [r4, #16]
 800f820:	4629      	mov	r1, r5
 800f822:	2201      	movs	r2, #1
 800f824:	4620      	mov	r0, r4
 800f826:	f7ff ffc7 	bl	800f7b8 <ucdr_check_final_buffer_behavior_array>
 800f82a:	2800      	cmp	r0, #0
 800f82c:	d1f1      	bne.n	800f812 <ucdr_advance_buffer+0x1e>
 800f82e:	2301      	movs	r3, #1
 800f830:	7563      	strb	r3, [r4, #21]
 800f832:	bd38      	pop	{r3, r4, r5, pc}

0800f834 <ucdr_serialize_sequence_char>:
 800f834:	b570      	push	{r4, r5, r6, lr}
 800f836:	4615      	mov	r5, r2
 800f838:	460e      	mov	r6, r1
 800f83a:	7d01      	ldrb	r1, [r0, #20]
 800f83c:	4604      	mov	r4, r0
 800f83e:	f005 fd59 	bl	80152f4 <ucdr_serialize_endian_uint32_t>
 800f842:	b90d      	cbnz	r5, 800f848 <ucdr_serialize_sequence_char+0x14>
 800f844:	2001      	movs	r0, #1
 800f846:	bd70      	pop	{r4, r5, r6, pc}
 800f848:	462b      	mov	r3, r5
 800f84a:	4632      	mov	r2, r6
 800f84c:	7d21      	ldrb	r1, [r4, #20]
 800f84e:	4620      	mov	r0, r4
 800f850:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f854:	f005 b940 	b.w	8014ad8 <ucdr_serialize_endian_array_char>

0800f858 <ucdr_deserialize_sequence_char>:
 800f858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f85c:	461d      	mov	r5, r3
 800f85e:	4616      	mov	r6, r2
 800f860:	460f      	mov	r7, r1
 800f862:	461a      	mov	r2, r3
 800f864:	7d01      	ldrb	r1, [r0, #20]
 800f866:	4604      	mov	r4, r0
 800f868:	f005 fe6c 	bl	8015544 <ucdr_deserialize_endian_uint32_t>
 800f86c:	682b      	ldr	r3, [r5, #0]
 800f86e:	429e      	cmp	r6, r3
 800f870:	d201      	bcs.n	800f876 <ucdr_deserialize_sequence_char+0x1e>
 800f872:	2201      	movs	r2, #1
 800f874:	75a2      	strb	r2, [r4, #22]
 800f876:	b913      	cbnz	r3, 800f87e <ucdr_deserialize_sequence_char+0x26>
 800f878:	2001      	movs	r0, #1
 800f87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f87e:	463a      	mov	r2, r7
 800f880:	7d21      	ldrb	r1, [r4, #20]
 800f882:	4620      	mov	r0, r4
 800f884:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f888:	f005 b958 	b.w	8014b3c <ucdr_deserialize_endian_array_char>

0800f88c <ucdr_serialize_sequence_uint8_t>:
 800f88c:	b570      	push	{r4, r5, r6, lr}
 800f88e:	4615      	mov	r5, r2
 800f890:	460e      	mov	r6, r1
 800f892:	7d01      	ldrb	r1, [r0, #20]
 800f894:	4604      	mov	r4, r0
 800f896:	f005 fd2d 	bl	80152f4 <ucdr_serialize_endian_uint32_t>
 800f89a:	b90d      	cbnz	r5, 800f8a0 <ucdr_serialize_sequence_uint8_t+0x14>
 800f89c:	2001      	movs	r0, #1
 800f89e:	bd70      	pop	{r4, r5, r6, pc}
 800f8a0:	462b      	mov	r3, r5
 800f8a2:	4632      	mov	r2, r6
 800f8a4:	7d21      	ldrb	r1, [r4, #20]
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f8ac:	f005 b9ac 	b.w	8014c08 <ucdr_serialize_endian_array_uint8_t>

0800f8b0 <ucdr_deserialize_sequence_uint8_t>:
 800f8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8b4:	461d      	mov	r5, r3
 800f8b6:	4616      	mov	r6, r2
 800f8b8:	460f      	mov	r7, r1
 800f8ba:	461a      	mov	r2, r3
 800f8bc:	7d01      	ldrb	r1, [r0, #20]
 800f8be:	4604      	mov	r4, r0
 800f8c0:	f005 fe40 	bl	8015544 <ucdr_deserialize_endian_uint32_t>
 800f8c4:	682b      	ldr	r3, [r5, #0]
 800f8c6:	429e      	cmp	r6, r3
 800f8c8:	d201      	bcs.n	800f8ce <ucdr_deserialize_sequence_uint8_t+0x1e>
 800f8ca:	2201      	movs	r2, #1
 800f8cc:	75a2      	strb	r2, [r4, #22]
 800f8ce:	b913      	cbnz	r3, 800f8d6 <ucdr_deserialize_sequence_uint8_t+0x26>
 800f8d0:	2001      	movs	r0, #1
 800f8d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8d6:	463a      	mov	r2, r7
 800f8d8:	7d21      	ldrb	r1, [r4, #20]
 800f8da:	4620      	mov	r0, r4
 800f8dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8e0:	f005 b9f8 	b.w	8014cd4 <ucdr_deserialize_endian_array_uint8_t>

0800f8e4 <rcl_client_get_rmw_handle>:
 800f8e4:	b118      	cbz	r0, 800f8ee <rcl_client_get_rmw_handle+0xa>
 800f8e6:	6800      	ldr	r0, [r0, #0]
 800f8e8:	b108      	cbz	r0, 800f8ee <rcl_client_get_rmw_handle+0xa>
 800f8ea:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800f8ee:	4770      	bx	lr

0800f8f0 <rcl_send_request>:
 800f8f0:	b570      	push	{r4, r5, r6, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	b1f8      	cbz	r0, 800f936 <rcl_send_request+0x46>
 800f8f6:	4604      	mov	r4, r0
 800f8f8:	6800      	ldr	r0, [r0, #0]
 800f8fa:	b1e0      	cbz	r0, 800f936 <rcl_send_request+0x46>
 800f8fc:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800f900:	b1cb      	cbz	r3, 800f936 <rcl_send_request+0x46>
 800f902:	460e      	mov	r6, r1
 800f904:	b1e1      	cbz	r1, 800f940 <rcl_send_request+0x50>
 800f906:	4615      	mov	r5, r2
 800f908:	b1d2      	cbz	r2, 800f940 <rcl_send_request+0x50>
 800f90a:	2105      	movs	r1, #5
 800f90c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800f910:	f002 fdc6 	bl	80124a0 <__atomic_load_8>
 800f914:	4602      	mov	r2, r0
 800f916:	460b      	mov	r3, r1
 800f918:	4631      	mov	r1, r6
 800f91a:	e9c5 2300 	strd	r2, r3, [r5]
 800f91e:	6823      	ldr	r3, [r4, #0]
 800f920:	462a      	mov	r2, r5
 800f922:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800f926:	f003 fee7 	bl	80136f8 <rmw_send_request>
 800f92a:	4606      	mov	r6, r0
 800f92c:	b160      	cbz	r0, 800f948 <rcl_send_request+0x58>
 800f92e:	2601      	movs	r6, #1
 800f930:	4630      	mov	r0, r6
 800f932:	b002      	add	sp, #8
 800f934:	bd70      	pop	{r4, r5, r6, pc}
 800f936:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800f93a:	4630      	mov	r0, r6
 800f93c:	b002      	add	sp, #8
 800f93e:	bd70      	pop	{r4, r5, r6, pc}
 800f940:	260b      	movs	r6, #11
 800f942:	4630      	mov	r0, r6
 800f944:	b002      	add	sp, #8
 800f946:	bd70      	pop	{r4, r5, r6, pc}
 800f948:	6820      	ldr	r0, [r4, #0]
 800f94a:	2105      	movs	r1, #5
 800f94c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f950:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800f954:	9100      	str	r1, [sp, #0]
 800f956:	f002 fe0f 	bl	8012578 <__atomic_exchange_8>
 800f95a:	4630      	mov	r0, r6
 800f95c:	b002      	add	sp, #8
 800f95e:	bd70      	pop	{r4, r5, r6, pc}

0800f960 <rcl_take_response>:
 800f960:	b570      	push	{r4, r5, r6, lr}
 800f962:	468e      	mov	lr, r1
 800f964:	b08c      	sub	sp, #48	@ 0x30
 800f966:	460c      	mov	r4, r1
 800f968:	4616      	mov	r6, r2
 800f96a:	f10d 0c18 	add.w	ip, sp, #24
 800f96e:	4605      	mov	r5, r0
 800f970:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f974:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f978:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f97c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f980:	b35d      	cbz	r5, 800f9da <rcl_take_response+0x7a>
 800f982:	682b      	ldr	r3, [r5, #0]
 800f984:	b34b      	cbz	r3, 800f9da <rcl_take_response+0x7a>
 800f986:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800f98a:	b330      	cbz	r0, 800f9da <rcl_take_response+0x7a>
 800f98c:	b346      	cbz	r6, 800f9e0 <rcl_take_response+0x80>
 800f98e:	2300      	movs	r3, #0
 800f990:	4632      	mov	r2, r6
 800f992:	a902      	add	r1, sp, #8
 800f994:	f88d 3007 	strb.w	r3, [sp, #7]
 800f998:	f10d 0307 	add.w	r3, sp, #7
 800f99c:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800f9e8 <rcl_take_response+0x88>
 800f9a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f9a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f9a8:	f003 ffae 	bl	8013908 <rmw_take_response>
 800f9ac:	4605      	mov	r5, r0
 800f9ae:	b9c8      	cbnz	r0, 800f9e4 <rcl_take_response+0x84>
 800f9b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f9b4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800f9b8:	2a00      	cmp	r2, #0
 800f9ba:	bf08      	it	eq
 800f9bc:	461d      	moveq	r5, r3
 800f9be:	f10d 0e18 	add.w	lr, sp, #24
 800f9c2:	46a4      	mov	ip, r4
 800f9c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f9c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f9cc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f9d0:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f9d4:	4628      	mov	r0, r5
 800f9d6:	b00c      	add	sp, #48	@ 0x30
 800f9d8:	bd70      	pop	{r4, r5, r6, pc}
 800f9da:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 800f9de:	e7ee      	b.n	800f9be <rcl_take_response+0x5e>
 800f9e0:	250b      	movs	r5, #11
 800f9e2:	e7ec      	b.n	800f9be <rcl_take_response+0x5e>
 800f9e4:	2501      	movs	r5, #1
 800f9e6:	e7ea      	b.n	800f9be <rcl_take_response+0x5e>
	...

0800f9f0 <rcl_client_is_valid>:
 800f9f0:	b130      	cbz	r0, 800fa00 <rcl_client_is_valid+0x10>
 800f9f2:	6800      	ldr	r0, [r0, #0]
 800f9f4:	b120      	cbz	r0, 800fa00 <rcl_client_is_valid+0x10>
 800f9f6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800f9fa:	3800      	subs	r0, #0
 800f9fc:	bf18      	it	ne
 800f9fe:	2001      	movne	r0, #1
 800fa00:	4770      	bx	lr
 800fa02:	bf00      	nop

0800fa04 <rcl_get_zero_initialized_context>:
 800fa04:	4a03      	ldr	r2, [pc, #12]	@ (800fa14 <rcl_get_zero_initialized_context+0x10>)
 800fa06:	4603      	mov	r3, r0
 800fa08:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fa0c:	e883 0003 	stmia.w	r3, {r0, r1}
 800fa10:	4618      	mov	r0, r3
 800fa12:	4770      	bx	lr
 800fa14:	0801c5b4 	.word	0x0801c5b4

0800fa18 <rcl_context_is_valid>:
 800fa18:	b118      	cbz	r0, 800fa22 <rcl_context_is_valid+0xa>
 800fa1a:	6840      	ldr	r0, [r0, #4]
 800fa1c:	3800      	subs	r0, #0
 800fa1e:	bf18      	it	ne
 800fa20:	2001      	movne	r0, #1
 800fa22:	4770      	bx	lr

0800fa24 <__cleanup_context>:
 800fa24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa28:	4606      	mov	r6, r0
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	6800      	ldr	r0, [r0, #0]
 800fa2e:	6073      	str	r3, [r6, #4]
 800fa30:	2800      	cmp	r0, #0
 800fa32:	d049      	beq.n	800fac8 <__cleanup_context+0xa4>
 800fa34:	6947      	ldr	r7, [r0, #20]
 800fa36:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800fa3a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800fa3e:	b137      	cbz	r7, 800fa4e <__cleanup_context+0x2a>
 800fa40:	3014      	adds	r0, #20
 800fa42:	f000 f9bd 	bl	800fdc0 <rcl_init_options_fini>
 800fa46:	4607      	mov	r7, r0
 800fa48:	2800      	cmp	r0, #0
 800fa4a:	d144      	bne.n	800fad6 <__cleanup_context+0xb2>
 800fa4c:	6830      	ldr	r0, [r6, #0]
 800fa4e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fa50:	b143      	cbz	r3, 800fa64 <__cleanup_context+0x40>
 800fa52:	3028      	adds	r0, #40	@ 0x28
 800fa54:	f003 fcb4 	bl	80133c0 <rmw_context_fini>
 800fa58:	b118      	cbz	r0, 800fa62 <__cleanup_context+0x3e>
 800fa5a:	2f00      	cmp	r7, #0
 800fa5c:	d03e      	beq.n	800fadc <__cleanup_context+0xb8>
 800fa5e:	f7ff fcc7 	bl	800f3f0 <rcutils_reset_error>
 800fa62:	6830      	ldr	r0, [r6, #0]
 800fa64:	6a03      	ldr	r3, [r0, #32]
 800fa66:	b1db      	cbz	r3, 800faa0 <__cleanup_context+0x7c>
 800fa68:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800fa6c:	2a01      	cmp	r2, #1
 800fa6e:	f17c 0100 	sbcs.w	r1, ip, #0
 800fa72:	db11      	blt.n	800fa98 <__cleanup_context+0x74>
 800fa74:	2400      	movs	r4, #0
 800fa76:	4625      	mov	r5, r4
 800fa78:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fa7c:	4649      	mov	r1, r9
 800fa7e:	b1b8      	cbz	r0, 800fab0 <__cleanup_context+0x8c>
 800fa80:	47c0      	blx	r8
 800fa82:	6833      	ldr	r3, [r6, #0]
 800fa84:	3401      	adds	r4, #1
 800fa86:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800fa8a:	f145 0500 	adc.w	r5, r5, #0
 800fa8e:	6a1b      	ldr	r3, [r3, #32]
 800fa90:	4294      	cmp	r4, r2
 800fa92:	eb75 010c 	sbcs.w	r1, r5, ip
 800fa96:	dbef      	blt.n	800fa78 <__cleanup_context+0x54>
 800fa98:	4618      	mov	r0, r3
 800fa9a:	4649      	mov	r1, r9
 800fa9c:	47c0      	blx	r8
 800fa9e:	6830      	ldr	r0, [r6, #0]
 800faa0:	4649      	mov	r1, r9
 800faa2:	47c0      	blx	r8
 800faa4:	2300      	movs	r3, #0
 800faa6:	4638      	mov	r0, r7
 800faa8:	e9c6 3300 	strd	r3, r3, [r6]
 800faac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fab0:	3401      	adds	r4, #1
 800fab2:	f145 0500 	adc.w	r5, r5, #0
 800fab6:	4294      	cmp	r4, r2
 800fab8:	eb75 010c 	sbcs.w	r1, r5, ip
 800fabc:	dbdc      	blt.n	800fa78 <__cleanup_context+0x54>
 800fabe:	4618      	mov	r0, r3
 800fac0:	4649      	mov	r1, r9
 800fac2:	47c0      	blx	r8
 800fac4:	6830      	ldr	r0, [r6, #0]
 800fac6:	e7eb      	b.n	800faa0 <__cleanup_context+0x7c>
 800fac8:	4607      	mov	r7, r0
 800faca:	2300      	movs	r3, #0
 800facc:	4638      	mov	r0, r7
 800face:	e9c6 3300 	strd	r3, r3, [r6]
 800fad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fad6:	f7ff fc8b 	bl	800f3f0 <rcutils_reset_error>
 800fada:	e7b7      	b.n	800fa4c <__cleanup_context+0x28>
 800fadc:	f009 fada 	bl	8019094 <rcl_convert_rmw_ret_to_rcl_ret>
 800fae0:	4607      	mov	r7, r0
 800fae2:	e7bc      	b.n	800fa5e <__cleanup_context+0x3a>

0800fae4 <rcl_init>:
 800fae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fae8:	1e05      	subs	r5, r0, #0
 800faea:	b09e      	sub	sp, #120	@ 0x78
 800faec:	460e      	mov	r6, r1
 800faee:	4690      	mov	r8, r2
 800faf0:	461f      	mov	r7, r3
 800faf2:	f340 809f 	ble.w	800fc34 <rcl_init+0x150>
 800faf6:	2900      	cmp	r1, #0
 800faf8:	f000 809f 	beq.w	800fc3a <rcl_init+0x156>
 800fafc:	f1a1 0e04 	sub.w	lr, r1, #4
 800fb00:	f04f 0c00 	mov.w	ip, #0
 800fb04:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800fb08:	f10c 0c01 	add.w	ip, ip, #1
 800fb0c:	2c00      	cmp	r4, #0
 800fb0e:	f000 8094 	beq.w	800fc3a <rcl_init+0x156>
 800fb12:	4565      	cmp	r5, ip
 800fb14:	d1f6      	bne.n	800fb04 <rcl_init+0x20>
 800fb16:	f1b8 0f00 	cmp.w	r8, #0
 800fb1a:	f000 808e 	beq.w	800fc3a <rcl_init+0x156>
 800fb1e:	f8d8 4000 	ldr.w	r4, [r8]
 800fb22:	2c00      	cmp	r4, #0
 800fb24:	f000 8089 	beq.w	800fc3a <rcl_init+0x156>
 800fb28:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800fb2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fb2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb32:	6823      	ldr	r3, [r4, #0]
 800fb34:	a819      	add	r0, sp, #100	@ 0x64
 800fb36:	f8cc 3000 	str.w	r3, [ip]
 800fb3a:	f7ff fc33 	bl	800f3a4 <rcutils_allocator_is_valid>
 800fb3e:	f080 0001 	eor.w	r0, r0, #1
 800fb42:	b2c0      	uxtb	r0, r0
 800fb44:	2800      	cmp	r0, #0
 800fb46:	d178      	bne.n	800fc3a <rcl_init+0x156>
 800fb48:	2f00      	cmp	r7, #0
 800fb4a:	d076      	beq.n	800fc3a <rcl_init+0x156>
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d178      	bne.n	800fc44 <rcl_init+0x160>
 800fb52:	2178      	movs	r1, #120	@ 0x78
 800fb54:	2001      	movs	r0, #1
 800fb56:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800fb5a:	4798      	blx	r3
 800fb5c:	4604      	mov	r4, r0
 800fb5e:	6038      	str	r0, [r7, #0]
 800fb60:	2800      	cmp	r0, #0
 800fb62:	f000 80b6 	beq.w	800fcd2 <rcl_init+0x1ee>
 800fb66:	a802      	add	r0, sp, #8
 800fb68:	f003 f80e 	bl	8012b88 <rmw_get_zero_initialized_context>
 800fb6c:	a902      	add	r1, sp, #8
 800fb6e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800fb72:	2250      	movs	r2, #80	@ 0x50
 800fb74:	f00b fd33 	bl	801b5de <memcpy>
 800fb78:	ac19      	add	r4, sp, #100	@ 0x64
 800fb7a:	f8d7 e000 	ldr.w	lr, [r7]
 800fb7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fb80:	46f4      	mov	ip, lr
 800fb82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb86:	6823      	ldr	r3, [r4, #0]
 800fb88:	f10e 0114 	add.w	r1, lr, #20
 800fb8c:	4640      	mov	r0, r8
 800fb8e:	f8cc 3000 	str.w	r3, [ip]
 800fb92:	f000 f93f 	bl	800fe14 <rcl_init_options_copy>
 800fb96:	4604      	mov	r4, r0
 800fb98:	2800      	cmp	r0, #0
 800fb9a:	d144      	bne.n	800fc26 <rcl_init+0x142>
 800fb9c:	f8d7 9000 	ldr.w	r9, [r7]
 800fba0:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800fba4:	f8c9 0020 	str.w	r0, [r9, #32]
 800fba8:	f8c9 5018 	str.w	r5, [r9, #24]
 800fbac:	f8c9 801c 	str.w	r8, [r9, #28]
 800fbb0:	2d00      	cmp	r5, #0
 800fbb2:	d04e      	beq.n	800fc52 <rcl_init+0x16e>
 800fbb4:	2e00      	cmp	r6, #0
 800fbb6:	d04c      	beq.n	800fc52 <rcl_init+0x16e>
 800fbb8:	2104      	movs	r1, #4
 800fbba:	4628      	mov	r0, r5
 800fbbc:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800fbc0:	4798      	blx	r3
 800fbc2:	f8c9 0020 	str.w	r0, [r9, #32]
 800fbc6:	f8d7 9000 	ldr.w	r9, [r7]
 800fbca:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800fbce:	46ca      	mov	sl, r9
 800fbd0:	b343      	cbz	r3, 800fc24 <rcl_init+0x140>
 800fbd2:	2d01      	cmp	r5, #1
 800fbd4:	f178 0300 	sbcs.w	r3, r8, #0
 800fbd8:	db3b      	blt.n	800fc52 <rcl_init+0x16e>
 800fbda:	2400      	movs	r4, #0
 800fbdc:	3e04      	subs	r6, #4
 800fbde:	46a1      	mov	r9, r4
 800fbe0:	e00b      	b.n	800fbfa <rcl_init+0x116>
 800fbe2:	6831      	ldr	r1, [r6, #0]
 800fbe4:	f00b fcfb 	bl	801b5de <memcpy>
 800fbe8:	3401      	adds	r4, #1
 800fbea:	f149 0900 	adc.w	r9, r9, #0
 800fbee:	45c8      	cmp	r8, r9
 800fbf0:	bf08      	it	eq
 800fbf2:	42a5      	cmpeq	r5, r4
 800fbf4:	d02b      	beq.n	800fc4e <rcl_init+0x16a>
 800fbf6:	f8d7 a000 	ldr.w	sl, [r7]
 800fbfa:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800fbfe:	f7f0 fb79 	bl	80002f4 <strlen>
 800fc02:	1c42      	adds	r2, r0, #1
 800fc04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fc06:	4610      	mov	r0, r2
 800fc08:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800fc0a:	f8da a020 	ldr.w	sl, [sl, #32]
 800fc0e:	9201      	str	r2, [sp, #4]
 800fc10:	4798      	blx	r3
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800fc18:	6a1b      	ldr	r3, [r3, #32]
 800fc1a:	9a01      	ldr	r2, [sp, #4]
 800fc1c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fc20:	2800      	cmp	r0, #0
 800fc22:	d1de      	bne.n	800fbe2 <rcl_init+0xfe>
 800fc24:	240a      	movs	r4, #10
 800fc26:	4638      	mov	r0, r7
 800fc28:	f7ff fefc 	bl	800fa24 <__cleanup_context>
 800fc2c:	4620      	mov	r0, r4
 800fc2e:	b01e      	add	sp, #120	@ 0x78
 800fc30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc34:	2900      	cmp	r1, #0
 800fc36:	f43f af6e 	beq.w	800fb16 <rcl_init+0x32>
 800fc3a:	240b      	movs	r4, #11
 800fc3c:	4620      	mov	r0, r4
 800fc3e:	b01e      	add	sp, #120	@ 0x78
 800fc40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc44:	2464      	movs	r4, #100	@ 0x64
 800fc46:	4620      	mov	r0, r4
 800fc48:	b01e      	add	sp, #120	@ 0x78
 800fc4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc4e:	f8d7 9000 	ldr.w	r9, [r7]
 800fc52:	4926      	ldr	r1, [pc, #152]	@ (800fcec <rcl_init+0x208>)
 800fc54:	680b      	ldr	r3, [r1, #0]
 800fc56:	3301      	adds	r3, #1
 800fc58:	d036      	beq.n	800fcc8 <rcl_init+0x1e4>
 800fc5a:	461a      	mov	r2, r3
 800fc5c:	2400      	movs	r4, #0
 800fc5e:	600b      	str	r3, [r1, #0]
 800fc60:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800fc64:	607b      	str	r3, [r7, #4]
 800fc66:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800fc68:	3301      	adds	r3, #1
 800fc6a:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800fc6e:	d034      	beq.n	800fcda <rcl_init+0x1f6>
 800fc70:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800fc74:	b93b      	cbnz	r3, 800fc86 <rcl_init+0x1a2>
 800fc76:	3030      	adds	r0, #48	@ 0x30
 800fc78:	f000 f93a 	bl	800fef0 <rcl_get_localhost_only>
 800fc7c:	4604      	mov	r4, r0
 800fc7e:	2800      	cmp	r0, #0
 800fc80:	d1d1      	bne.n	800fc26 <rcl_init+0x142>
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	6958      	ldr	r0, [r3, #20]
 800fc86:	aa18      	add	r2, sp, #96	@ 0x60
 800fc88:	a917      	add	r1, sp, #92	@ 0x5c
 800fc8a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800fc8c:	f001 f892 	bl	8010db4 <rcl_validate_enclave_name>
 800fc90:	4604      	mov	r4, r0
 800fc92:	2800      	cmp	r0, #0
 800fc94:	d1c7      	bne.n	800fc26 <rcl_init+0x142>
 800fc96:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fc98:	b9eb      	cbnz	r3, 800fcd6 <rcl_init+0x1f2>
 800fc9a:	6839      	ldr	r1, [r7, #0]
 800fc9c:	694b      	ldr	r3, [r1, #20]
 800fc9e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800fca2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800fca4:	f000 fc72 	bl	801058c <rcl_get_security_options_from_environment>
 800fca8:	4604      	mov	r4, r0
 800fcaa:	2800      	cmp	r0, #0
 800fcac:	d1bb      	bne.n	800fc26 <rcl_init+0x142>
 800fcae:	6839      	ldr	r1, [r7, #0]
 800fcb0:	6948      	ldr	r0, [r1, #20]
 800fcb2:	3128      	adds	r1, #40	@ 0x28
 800fcb4:	3018      	adds	r0, #24
 800fcb6:	f003 fa4d 	bl	8013154 <rmw_init>
 800fcba:	4604      	mov	r4, r0
 800fcbc:	2800      	cmp	r0, #0
 800fcbe:	d0bd      	beq.n	800fc3c <rcl_init+0x158>
 800fcc0:	f009 f9e8 	bl	8019094 <rcl_convert_rmw_ret_to_rcl_ret>
 800fcc4:	4604      	mov	r4, r0
 800fcc6:	e7ae      	b.n	800fc26 <rcl_init+0x142>
 800fcc8:	2201      	movs	r2, #1
 800fcca:	461c      	mov	r4, r3
 800fccc:	600a      	str	r2, [r1, #0]
 800fcce:	4613      	mov	r3, r2
 800fcd0:	e7c6      	b.n	800fc60 <rcl_init+0x17c>
 800fcd2:	240a      	movs	r4, #10
 800fcd4:	e7b2      	b.n	800fc3c <rcl_init+0x158>
 800fcd6:	2401      	movs	r4, #1
 800fcd8:	e7a5      	b.n	800fc26 <rcl_init+0x142>
 800fcda:	3024      	adds	r0, #36	@ 0x24
 800fcdc:	f009 f9ee 	bl	80190bc <rcl_get_default_domain_id>
 800fce0:	4604      	mov	r4, r0
 800fce2:	2800      	cmp	r0, #0
 800fce4:	d19f      	bne.n	800fc26 <rcl_init+0x142>
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	6958      	ldr	r0, [r3, #20]
 800fcea:	e7c1      	b.n	800fc70 <rcl_init+0x18c>
 800fcec:	24063c40 	.word	0x24063c40

0800fcf0 <rcl_get_zero_initialized_init_options>:
 800fcf0:	2000      	movs	r0, #0
 800fcf2:	4770      	bx	lr

0800fcf4 <rcl_init_options_init>:
 800fcf4:	b084      	sub	sp, #16
 800fcf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcf8:	b097      	sub	sp, #92	@ 0x5c
 800fcfa:	ae1d      	add	r6, sp, #116	@ 0x74
 800fcfc:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800fd00:	2800      	cmp	r0, #0
 800fd02:	d058      	beq.n	800fdb6 <rcl_init_options_init+0xc2>
 800fd04:	6803      	ldr	r3, [r0, #0]
 800fd06:	4605      	mov	r5, r0
 800fd08:	b133      	cbz	r3, 800fd18 <rcl_init_options_init+0x24>
 800fd0a:	2464      	movs	r4, #100	@ 0x64
 800fd0c:	4620      	mov	r0, r4
 800fd0e:	b017      	add	sp, #92	@ 0x5c
 800fd10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fd14:	b004      	add	sp, #16
 800fd16:	4770      	bx	lr
 800fd18:	4630      	mov	r0, r6
 800fd1a:	f7ff fb43 	bl	800f3a4 <rcutils_allocator_is_valid>
 800fd1e:	2800      	cmp	r0, #0
 800fd20:	d049      	beq.n	800fdb6 <rcl_init_options_init+0xc2>
 800fd22:	46b4      	mov	ip, r6
 800fd24:	ac11      	add	r4, sp, #68	@ 0x44
 800fd26:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fd2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd2c:	f8dc 3000 	ldr.w	r3, [ip]
 800fd30:	2050      	movs	r0, #80	@ 0x50
 800fd32:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800fd34:	6023      	str	r3, [r4, #0]
 800fd36:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fd38:	4798      	blx	r3
 800fd3a:	4604      	mov	r4, r0
 800fd3c:	6028      	str	r0, [r5, #0]
 800fd3e:	2800      	cmp	r0, #0
 800fd40:	d03b      	beq.n	800fdba <rcl_init_options_init+0xc6>
 800fd42:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800fd46:	4686      	mov	lr, r0
 800fd48:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fd4c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fd50:	f8dc 3000 	ldr.w	r3, [ip]
 800fd54:	a802      	add	r0, sp, #8
 800fd56:	f8ce 3000 	str.w	r3, [lr]
 800fd5a:	f002 ff29 	bl	8012bb0 <rmw_get_zero_initialized_init_options>
 800fd5e:	f10d 0e08 	add.w	lr, sp, #8
 800fd62:	f104 0c18 	add.w	ip, r4, #24
 800fd66:	682f      	ldr	r7, [r5, #0]
 800fd68:	ac20      	add	r4, sp, #128	@ 0x80
 800fd6a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fd6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd72:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fd76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd7a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fd7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd82:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fd86:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fd8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800fd8e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fd92:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800fd96:	f107 0018 	add.w	r0, r7, #24
 800fd9a:	f003 f8dd 	bl	8012f58 <rmw_init_options_init>
 800fd9e:	4604      	mov	r4, r0
 800fda0:	2800      	cmp	r0, #0
 800fda2:	d0b3      	beq.n	800fd0c <rcl_init_options_init+0x18>
 800fda4:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800fda6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800fda8:	6828      	ldr	r0, [r5, #0]
 800fdaa:	4798      	blx	r3
 800fdac:	4620      	mov	r0, r4
 800fdae:	f009 f971 	bl	8019094 <rcl_convert_rmw_ret_to_rcl_ret>
 800fdb2:	4604      	mov	r4, r0
 800fdb4:	e7aa      	b.n	800fd0c <rcl_init_options_init+0x18>
 800fdb6:	240b      	movs	r4, #11
 800fdb8:	e7a8      	b.n	800fd0c <rcl_init_options_init+0x18>
 800fdba:	240a      	movs	r4, #10
 800fdbc:	e7a6      	b.n	800fd0c <rcl_init_options_init+0x18>
 800fdbe:	bf00      	nop

0800fdc0 <rcl_init_options_fini>:
 800fdc0:	b530      	push	{r4, r5, lr}
 800fdc2:	b087      	sub	sp, #28
 800fdc4:	b1f0      	cbz	r0, 800fe04 <rcl_init_options_fini+0x44>
 800fdc6:	6803      	ldr	r3, [r0, #0]
 800fdc8:	4604      	mov	r4, r0
 800fdca:	b1db      	cbz	r3, 800fe04 <rcl_init_options_fini+0x44>
 800fdcc:	469c      	mov	ip, r3
 800fdce:	f10d 0e04 	add.w	lr, sp, #4
 800fdd2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fdd6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fdda:	f8dc 3000 	ldr.w	r3, [ip]
 800fdde:	a801      	add	r0, sp, #4
 800fde0:	f8ce 3000 	str.w	r3, [lr]
 800fde4:	f7ff fade 	bl	800f3a4 <rcutils_allocator_is_valid>
 800fde8:	b160      	cbz	r0, 800fe04 <rcl_init_options_fini+0x44>
 800fdea:	6820      	ldr	r0, [r4, #0]
 800fdec:	3018      	adds	r0, #24
 800fdee:	f003 f96d 	bl	80130cc <rmw_init_options_fini>
 800fdf2:	4605      	mov	r5, r0
 800fdf4:	b950      	cbnz	r0, 800fe0c <rcl_init_options_fini+0x4c>
 800fdf6:	6820      	ldr	r0, [r4, #0]
 800fdf8:	9b02      	ldr	r3, [sp, #8]
 800fdfa:	9905      	ldr	r1, [sp, #20]
 800fdfc:	4798      	blx	r3
 800fdfe:	4628      	mov	r0, r5
 800fe00:	b007      	add	sp, #28
 800fe02:	bd30      	pop	{r4, r5, pc}
 800fe04:	250b      	movs	r5, #11
 800fe06:	4628      	mov	r0, r5
 800fe08:	b007      	add	sp, #28
 800fe0a:	bd30      	pop	{r4, r5, pc}
 800fe0c:	f009 f942 	bl	8019094 <rcl_convert_rmw_ret_to_rcl_ret>
 800fe10:	4605      	mov	r5, r0
 800fe12:	e7f8      	b.n	800fe06 <rcl_init_options_fini+0x46>

0800fe14 <rcl_init_options_copy>:
 800fe14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe18:	b094      	sub	sp, #80	@ 0x50
 800fe1a:	2800      	cmp	r0, #0
 800fe1c:	d05b      	beq.n	800fed6 <rcl_init_options_copy+0xc2>
 800fe1e:	4604      	mov	r4, r0
 800fe20:	6800      	ldr	r0, [r0, #0]
 800fe22:	2800      	cmp	r0, #0
 800fe24:	d057      	beq.n	800fed6 <rcl_init_options_copy+0xc2>
 800fe26:	460e      	mov	r6, r1
 800fe28:	f7ff fabc 	bl	800f3a4 <rcutils_allocator_is_valid>
 800fe2c:	2e00      	cmp	r6, #0
 800fe2e:	d052      	beq.n	800fed6 <rcl_init_options_copy+0xc2>
 800fe30:	f080 0001 	eor.w	r0, r0, #1
 800fe34:	b2c0      	uxtb	r0, r0
 800fe36:	2800      	cmp	r0, #0
 800fe38:	d14d      	bne.n	800fed6 <rcl_init_options_copy+0xc2>
 800fe3a:	6833      	ldr	r3, [r6, #0]
 800fe3c:	b123      	cbz	r3, 800fe48 <rcl_init_options_copy+0x34>
 800fe3e:	2464      	movs	r4, #100	@ 0x64
 800fe40:	4620      	mov	r0, r4
 800fe42:	b014      	add	sp, #80	@ 0x50
 800fe44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe48:	6827      	ldr	r7, [r4, #0]
 800fe4a:	ad0f      	add	r5, sp, #60	@ 0x3c
 800fe4c:	46bc      	mov	ip, r7
 800fe4e:	f8d7 8000 	ldr.w	r8, [r7]
 800fe52:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fe56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fe58:	f8dc 3000 	ldr.w	r3, [ip]
 800fe5c:	2050      	movs	r0, #80	@ 0x50
 800fe5e:	4619      	mov	r1, r3
 800fe60:	602b      	str	r3, [r5, #0]
 800fe62:	47c0      	blx	r8
 800fe64:	4605      	mov	r5, r0
 800fe66:	6030      	str	r0, [r6, #0]
 800fe68:	b3d0      	cbz	r0, 800fee0 <rcl_init_options_copy+0xcc>
 800fe6a:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800fe6e:	4686      	mov	lr, r0
 800fe70:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fe74:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fe78:	f8dc 3000 	ldr.w	r3, [ip]
 800fe7c:	4668      	mov	r0, sp
 800fe7e:	f8ce 3000 	str.w	r3, [lr]
 800fe82:	f002 fe95 	bl	8012bb0 <rmw_get_zero_initialized_init_options>
 800fe86:	46ee      	mov	lr, sp
 800fe88:	f105 0c18 	add.w	ip, r5, #24
 800fe8c:	6824      	ldr	r4, [r4, #0]
 800fe8e:	6835      	ldr	r5, [r6, #0]
 800fe90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fe94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fe98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fe9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fea0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fea4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fea8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800feac:	e88c 0003 	stmia.w	ip, {r0, r1}
 800feb0:	f104 0018 	add.w	r0, r4, #24
 800feb4:	f105 0118 	add.w	r1, r5, #24
 800feb8:	f003 f8b6 	bl	8013028 <rmw_init_options_copy>
 800febc:	4604      	mov	r4, r0
 800febe:	2800      	cmp	r0, #0
 800fec0:	d0be      	beq.n	800fe40 <rcl_init_options_copy+0x2c>
 800fec2:	f7ff fa7d 	bl	800f3c0 <rcutils_get_error_string>
 800fec6:	f7ff fa93 	bl	800f3f0 <rcutils_reset_error>
 800feca:	4630      	mov	r0, r6
 800fecc:	f7ff ff78 	bl	800fdc0 <rcl_init_options_fini>
 800fed0:	b140      	cbz	r0, 800fee4 <rcl_init_options_copy+0xd0>
 800fed2:	4604      	mov	r4, r0
 800fed4:	e7b4      	b.n	800fe40 <rcl_init_options_copy+0x2c>
 800fed6:	240b      	movs	r4, #11
 800fed8:	4620      	mov	r0, r4
 800feda:	b014      	add	sp, #80	@ 0x50
 800fedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fee0:	240a      	movs	r4, #10
 800fee2:	e7ad      	b.n	800fe40 <rcl_init_options_copy+0x2c>
 800fee4:	4620      	mov	r0, r4
 800fee6:	b014      	add	sp, #80	@ 0x50
 800fee8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800feec:	f009 b8d2 	b.w	8019094 <rcl_convert_rmw_ret_to_rcl_ret>

0800fef0 <rcl_get_localhost_only>:
 800fef0:	b510      	push	{r4, lr}
 800fef2:	2300      	movs	r3, #0
 800fef4:	b082      	sub	sp, #8
 800fef6:	9301      	str	r3, [sp, #4]
 800fef8:	b1b8      	cbz	r0, 800ff2a <rcl_get_localhost_only+0x3a>
 800fefa:	4604      	mov	r4, r0
 800fefc:	a901      	add	r1, sp, #4
 800fefe:	480c      	ldr	r0, [pc, #48]	@ (800ff30 <rcl_get_localhost_only+0x40>)
 800ff00:	f002 fb72 	bl	80125e8 <rcutils_get_env>
 800ff04:	b110      	cbz	r0, 800ff0c <rcl_get_localhost_only+0x1c>
 800ff06:	2001      	movs	r0, #1
 800ff08:	b002      	add	sp, #8
 800ff0a:	bd10      	pop	{r4, pc}
 800ff0c:	9b01      	ldr	r3, [sp, #4]
 800ff0e:	b113      	cbz	r3, 800ff16 <rcl_get_localhost_only+0x26>
 800ff10:	781a      	ldrb	r2, [r3, #0]
 800ff12:	2a31      	cmp	r2, #49	@ 0x31
 800ff14:	d004      	beq.n	800ff20 <rcl_get_localhost_only+0x30>
 800ff16:	2302      	movs	r3, #2
 800ff18:	2000      	movs	r0, #0
 800ff1a:	7023      	strb	r3, [r4, #0]
 800ff1c:	b002      	add	sp, #8
 800ff1e:	bd10      	pop	{r4, pc}
 800ff20:	785b      	ldrb	r3, [r3, #1]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d1f7      	bne.n	800ff16 <rcl_get_localhost_only+0x26>
 800ff26:	2301      	movs	r3, #1
 800ff28:	e7f6      	b.n	800ff18 <rcl_get_localhost_only+0x28>
 800ff2a:	200b      	movs	r0, #11
 800ff2c:	b002      	add	sp, #8
 800ff2e:	bd10      	pop	{r4, pc}
 800ff30:	0801c5bc 	.word	0x0801c5bc

0800ff34 <rcl_get_zero_initialized_node>:
 800ff34:	4a03      	ldr	r2, [pc, #12]	@ (800ff44 <rcl_get_zero_initialized_node+0x10>)
 800ff36:	4603      	mov	r3, r0
 800ff38:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff3c:	e883 0003 	stmia.w	r3, {r0, r1}
 800ff40:	4618      	mov	r0, r3
 800ff42:	4770      	bx	lr
 800ff44:	0801c5ec 	.word	0x0801c5ec

0800ff48 <rcl_node_init>:
 800ff48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff4c:	b0a9      	sub	sp, #164	@ 0xa4
 800ff4e:	4604      	mov	r4, r0
 800ff50:	460e      	mov	r6, r1
 800ff52:	4615      	mov	r5, r2
 800ff54:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800ff58:	a823      	add	r0, sp, #140	@ 0x8c
 800ff5a:	461f      	mov	r7, r3
 800ff5c:	f009 fad4 	bl	8019508 <rcl_guard_condition_get_default_options>
 800ff60:	f1b8 0f00 	cmp.w	r8, #0
 800ff64:	f000 80f3 	beq.w	801014e <rcl_node_init+0x206>
 800ff68:	4640      	mov	r0, r8
 800ff6a:	f7ff fa1b 	bl	800f3a4 <rcutils_allocator_is_valid>
 800ff6e:	2d00      	cmp	r5, #0
 800ff70:	bf18      	it	ne
 800ff72:	2c00      	cmpne	r4, #0
 800ff74:	f080 0001 	eor.w	r0, r0, #1
 800ff78:	bf0c      	ite	eq
 800ff7a:	f04f 0c01 	moveq.w	ip, #1
 800ff7e:	f04f 0c00 	movne.w	ip, #0
 800ff82:	2e00      	cmp	r6, #0
 800ff84:	bf08      	it	eq
 800ff86:	f04c 0c01 	orreq.w	ip, ip, #1
 800ff8a:	ea4c 0c00 	orr.w	ip, ip, r0
 800ff8e:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 800ff92:	f040 80dc 	bne.w	801014e <rcl_node_init+0x206>
 800ff96:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800ff9a:	f1ba 0f00 	cmp.w	sl, #0
 800ff9e:	f040 80fc 	bne.w	801019a <rcl_node_init+0x252>
 800ffa2:	2f00      	cmp	r7, #0
 800ffa4:	f000 80d3 	beq.w	801014e <rcl_node_init+0x206>
 800ffa8:	4638      	mov	r0, r7
 800ffaa:	f7ff fd35 	bl	800fa18 <rcl_context_is_valid>
 800ffae:	4683      	mov	fp, r0
 800ffb0:	2800      	cmp	r0, #0
 800ffb2:	f000 80d2 	beq.w	801015a <rcl_node_init+0x212>
 800ffb6:	4652      	mov	r2, sl
 800ffb8:	4630      	mov	r0, r6
 800ffba:	a922      	add	r1, sp, #136	@ 0x88
 800ffbc:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 800ffc0:	f002 ff20 	bl	8012e04 <rmw_validate_node_name>
 800ffc4:	4682      	mov	sl, r0
 800ffc6:	2800      	cmp	r0, #0
 800ffc8:	f040 80c3 	bne.w	8010152 <rcl_node_init+0x20a>
 800ffcc:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800ffce:	2800      	cmp	r0, #0
 800ffd0:	f040 80f1 	bne.w	80101b6 <rcl_node_init+0x26e>
 800ffd4:	4628      	mov	r0, r5
 800ffd6:	f7f0 f98d 	bl	80002f4 <strlen>
 800ffda:	2800      	cmp	r0, #0
 800ffdc:	f040 80c0 	bne.w	8010160 <rcl_node_init+0x218>
 800ffe0:	4d79      	ldr	r5, [pc, #484]	@ (80101c8 <rcl_node_init+0x280>)
 800ffe2:	a922      	add	r1, sp, #136	@ 0x88
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	4628      	mov	r0, r5
 800ffe8:	f002 feee 	bl	8012dc8 <rmw_validate_namespace>
 800ffec:	4682      	mov	sl, r0
 800ffee:	2800      	cmp	r0, #0
 800fff0:	f040 80af 	bne.w	8010152 <rcl_node_init+0x20a>
 800fff4:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800fff6:	2800      	cmp	r0, #0
 800fff8:	f040 80d5 	bne.w	80101a6 <rcl_node_init+0x25e>
 800fffc:	f8d8 3000 	ldr.w	r3, [r8]
 8010000:	2078      	movs	r0, #120	@ 0x78
 8010002:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010006:	4798      	blx	r3
 8010008:	4682      	mov	sl, r0
 801000a:	6060      	str	r0, [r4, #4]
 801000c:	2800      	cmp	r0, #0
 801000e:	f000 80cf 	beq.w	80101b0 <rcl_node_init+0x268>
 8010012:	2200      	movs	r2, #0
 8010014:	2300      	movs	r3, #0
 8010016:	a808      	add	r0, sp, #32
 8010018:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 801001c:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 8010020:	f000 f902 	bl	8010228 <rcl_node_get_default_options>
 8010024:	a908      	add	r1, sp, #32
 8010026:	4650      	mov	r0, sl
 8010028:	2268      	movs	r2, #104	@ 0x68
 801002a:	f00b fad8 	bl	801b5de <memcpy>
 801002e:	6861      	ldr	r1, [r4, #4]
 8010030:	4640      	mov	r0, r8
 8010032:	6027      	str	r7, [r4, #0]
 8010034:	f000 f906 	bl	8010244 <rcl_node_options_copy>
 8010038:	2800      	cmp	r0, #0
 801003a:	d158      	bne.n	80100ee <rcl_node_init+0x1a6>
 801003c:	4628      	mov	r0, r5
 801003e:	f7f0 f959 	bl	80002f4 <strlen>
 8010042:	4428      	add	r0, r5
 8010044:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8010048:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801004c:	2b2f      	cmp	r3, #47	@ 0x2f
 801004e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010052:	9300      	str	r3, [sp, #0]
 8010054:	bf0c      	ite	eq
 8010056:	4b5d      	ldreq	r3, [pc, #372]	@ (80101cc <rcl_node_init+0x284>)
 8010058:	4b5d      	ldrne	r3, [pc, #372]	@ (80101d0 <rcl_node_init+0x288>)
 801005a:	9302      	str	r3, [sp, #8]
 801005c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010060:	9301      	str	r3, [sp, #4]
 8010062:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8010066:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801006a:	f002 fae5 	bl	8012638 <rcutils_format_string_limit>
 801006e:	6823      	ldr	r3, [r4, #0]
 8010070:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 8010074:	4631      	mov	r1, r6
 8010076:	6818      	ldr	r0, [r3, #0]
 8010078:	462a      	mov	r2, r5
 801007a:	6866      	ldr	r6, [r4, #4]
 801007c:	3028      	adds	r0, #40	@ 0x28
 801007e:	f003 fa51 	bl	8013524 <rmw_create_node>
 8010082:	6863      	ldr	r3, [r4, #4]
 8010084:	66b0      	str	r0, [r6, #104]	@ 0x68
 8010086:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8010088:	2800      	cmp	r0, #0
 801008a:	d032      	beq.n	80100f2 <rcl_node_init+0x1aa>
 801008c:	f003 fada 	bl	8013644 <rmw_node_get_graph_guard_condition>
 8010090:	4682      	mov	sl, r0
 8010092:	b360      	cbz	r0, 80100ee <rcl_node_init+0x1a6>
 8010094:	f8d8 3000 	ldr.w	r3, [r8]
 8010098:	2008      	movs	r0, #8
 801009a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801009e:	6866      	ldr	r6, [r4, #4]
 80100a0:	4798      	blx	r3
 80100a2:	6863      	ldr	r3, [r4, #4]
 80100a4:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80100a6:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 80100aa:	f1bb 0f00 	cmp.w	fp, #0
 80100ae:	d020      	beq.n	80100f2 <rcl_node_init+0x1aa>
 80100b0:	a806      	add	r0, sp, #24
 80100b2:	ae23      	add	r6, sp, #140	@ 0x8c
 80100b4:	f009 f99c 	bl	80193f0 <rcl_get_zero_initialized_guard_condition>
 80100b8:	a806      	add	r0, sp, #24
 80100ba:	6863      	ldr	r3, [r4, #4]
 80100bc:	46c4      	mov	ip, r8
 80100be:	c803      	ldmia	r0, {r0, r1}
 80100c0:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 80100c4:	e88b 0003 	stmia.w	fp, {r0, r1}
 80100c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80100cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80100ce:	f8dc 3000 	ldr.w	r3, [ip]
 80100d2:	6033      	str	r3, [r6, #0]
 80100d4:	ab28      	add	r3, sp, #160	@ 0xa0
 80100d6:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80100da:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80100de:	4651      	mov	r1, sl
 80100e0:	463a      	mov	r2, r7
 80100e2:	4670      	mov	r0, lr
 80100e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80100e6:	f009 f98d 	bl	8019404 <rcl_guard_condition_init_from_rmw>
 80100ea:	4682      	mov	sl, r0
 80100ec:	b328      	cbz	r0, 801013a <rcl_node_init+0x1f2>
 80100ee:	6863      	ldr	r3, [r4, #4]
 80100f0:	b1f3      	cbz	r3, 8010130 <rcl_node_init+0x1e8>
 80100f2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80100f4:	b128      	cbz	r0, 8010102 <rcl_node_init+0x1ba>
 80100f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80100fa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80100fe:	4798      	blx	r3
 8010100:	6863      	ldr	r3, [r4, #4]
 8010102:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8010104:	b110      	cbz	r0, 801010c <rcl_node_init+0x1c4>
 8010106:	f003 fa1f 	bl	8013548 <rmw_destroy_node>
 801010a:	6863      	ldr	r3, [r4, #4]
 801010c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801010e:	b148      	cbz	r0, 8010124 <rcl_node_init+0x1dc>
 8010110:	f009 f9d4 	bl	80194bc <rcl_guard_condition_fini>
 8010114:	6863      	ldr	r3, [r4, #4]
 8010116:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801011a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801011c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010120:	4798      	blx	r3
 8010122:	6863      	ldr	r3, [r4, #4]
 8010124:	4618      	mov	r0, r3
 8010126:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801012a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801012e:	4798      	blx	r3
 8010130:	2300      	movs	r3, #0
 8010132:	f04f 0a01 	mov.w	sl, #1
 8010136:	e9c4 3300 	strd	r3, r3, [r4]
 801013a:	f1b9 0f00 	cmp.w	r9, #0
 801013e:	d008      	beq.n	8010152 <rcl_node_init+0x20a>
 8010140:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010144:	4628      	mov	r0, r5
 8010146:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801014a:	4798      	blx	r3
 801014c:	e001      	b.n	8010152 <rcl_node_init+0x20a>
 801014e:	f04f 0a0b 	mov.w	sl, #11
 8010152:	4650      	mov	r0, sl
 8010154:	b029      	add	sp, #164	@ 0xa4
 8010156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801015a:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 801015e:	e7f8      	b.n	8010152 <rcl_node_init+0x20a>
 8010160:	782b      	ldrb	r3, [r5, #0]
 8010162:	2b2f      	cmp	r3, #47	@ 0x2f
 8010164:	f43f af3d 	beq.w	800ffe2 <rcl_node_init+0x9a>
 8010168:	9503      	str	r5, [sp, #12]
 801016a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801016e:	9300      	str	r3, [sp, #0]
 8010170:	4b18      	ldr	r3, [pc, #96]	@ (80101d4 <rcl_node_init+0x28c>)
 8010172:	9302      	str	r3, [sp, #8]
 8010174:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010178:	9301      	str	r3, [sp, #4]
 801017a:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801017e:	f002 fa5b 	bl	8012638 <rcutils_format_string_limit>
 8010182:	4605      	mov	r5, r0
 8010184:	b1e0      	cbz	r0, 80101c0 <rcl_node_init+0x278>
 8010186:	2200      	movs	r2, #0
 8010188:	a922      	add	r1, sp, #136	@ 0x88
 801018a:	9222      	str	r2, [sp, #136]	@ 0x88
 801018c:	f002 fe1c 	bl	8012dc8 <rmw_validate_namespace>
 8010190:	4682      	mov	sl, r0
 8010192:	2800      	cmp	r0, #0
 8010194:	d1d4      	bne.n	8010140 <rcl_node_init+0x1f8>
 8010196:	46d9      	mov	r9, fp
 8010198:	e72c      	b.n	800fff4 <rcl_node_init+0xac>
 801019a:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 801019e:	4650      	mov	r0, sl
 80101a0:	b029      	add	sp, #164	@ 0xa4
 80101a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101a6:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 80101aa:	f002 fe1f 	bl	8012dec <rmw_namespace_validation_result_string>
 80101ae:	e7c4      	b.n	801013a <rcl_node_init+0x1f2>
 80101b0:	f04f 0a0a 	mov.w	sl, #10
 80101b4:	e7c1      	b.n	801013a <rcl_node_init+0x1f2>
 80101b6:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 80101ba:	f002 fe77 	bl	8012eac <rmw_node_name_validation_result_string>
 80101be:	e7c8      	b.n	8010152 <rcl_node_init+0x20a>
 80101c0:	f04f 0a0a 	mov.w	sl, #10
 80101c4:	e7c5      	b.n	8010152 <rcl_node_init+0x20a>
 80101c6:	bf00      	nop
 80101c8:	0801c5d4 	.word	0x0801c5d4
 80101cc:	0801c5dc 	.word	0x0801c5dc
 80101d0:	0801c5e4 	.word	0x0801c5e4
 80101d4:	0801c5d8 	.word	0x0801c5d8

080101d8 <rcl_node_is_valid>:
 80101d8:	b130      	cbz	r0, 80101e8 <rcl_node_is_valid+0x10>
 80101da:	6843      	ldr	r3, [r0, #4]
 80101dc:	b123      	cbz	r3, 80101e8 <rcl_node_is_valid+0x10>
 80101de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80101e0:	b113      	cbz	r3, 80101e8 <rcl_node_is_valid+0x10>
 80101e2:	6800      	ldr	r0, [r0, #0]
 80101e4:	f7ff bc18 	b.w	800fa18 <rcl_context_is_valid>
 80101e8:	2000      	movs	r0, #0
 80101ea:	4770      	bx	lr

080101ec <rcl_node_get_name>:
 80101ec:	b120      	cbz	r0, 80101f8 <rcl_node_get_name+0xc>
 80101ee:	6840      	ldr	r0, [r0, #4]
 80101f0:	b110      	cbz	r0, 80101f8 <rcl_node_get_name+0xc>
 80101f2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80101f4:	b100      	cbz	r0, 80101f8 <rcl_node_get_name+0xc>
 80101f6:	6880      	ldr	r0, [r0, #8]
 80101f8:	4770      	bx	lr
 80101fa:	bf00      	nop

080101fc <rcl_node_get_namespace>:
 80101fc:	b120      	cbz	r0, 8010208 <rcl_node_get_namespace+0xc>
 80101fe:	6840      	ldr	r0, [r0, #4]
 8010200:	b110      	cbz	r0, 8010208 <rcl_node_get_namespace+0xc>
 8010202:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010204:	b100      	cbz	r0, 8010208 <rcl_node_get_namespace+0xc>
 8010206:	68c0      	ldr	r0, [r0, #12]
 8010208:	4770      	bx	lr
 801020a:	bf00      	nop

0801020c <rcl_node_get_options>:
 801020c:	b128      	cbz	r0, 801021a <rcl_node_get_options+0xe>
 801020e:	6840      	ldr	r0, [r0, #4]
 8010210:	b118      	cbz	r0, 801021a <rcl_node_get_options+0xe>
 8010212:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8010214:	2b00      	cmp	r3, #0
 8010216:	bf08      	it	eq
 8010218:	2000      	moveq	r0, #0
 801021a:	4770      	bx	lr

0801021c <rcl_node_get_rmw_handle>:
 801021c:	b110      	cbz	r0, 8010224 <rcl_node_get_rmw_handle+0x8>
 801021e:	6840      	ldr	r0, [r0, #4]
 8010220:	b100      	cbz	r0, 8010224 <rcl_node_get_rmw_handle+0x8>
 8010222:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010224:	4770      	bx	lr
 8010226:	bf00      	nop

08010228 <rcl_node_get_default_options>:
 8010228:	b510      	push	{r4, lr}
 801022a:	4604      	mov	r4, r0
 801022c:	2268      	movs	r2, #104	@ 0x68
 801022e:	2100      	movs	r1, #0
 8010230:	f00b f8b6 	bl	801b3a0 <memset>
 8010234:	4620      	mov	r0, r4
 8010236:	f7ff f8a7 	bl	800f388 <rcutils_get_default_allocator>
 801023a:	2301      	movs	r3, #1
 801023c:	4620      	mov	r0, r4
 801023e:	7523      	strb	r3, [r4, #20]
 8010240:	bd10      	pop	{r4, pc}
 8010242:	bf00      	nop

08010244 <rcl_node_options_copy>:
 8010244:	2800      	cmp	r0, #0
 8010246:	bf18      	it	ne
 8010248:	4288      	cmpne	r0, r1
 801024a:	d01b      	beq.n	8010284 <rcl_node_options_copy+0x40>
 801024c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801024e:	fab1 f681 	clz	r6, r1
 8010252:	460c      	mov	r4, r1
 8010254:	0976      	lsrs	r6, r6, #5
 8010256:	b199      	cbz	r1, 8010280 <rcl_node_options_copy+0x3c>
 8010258:	4605      	mov	r5, r0
 801025a:	8a87      	ldrh	r7, [r0, #20]
 801025c:	4684      	mov	ip, r0
 801025e:	468e      	mov	lr, r1
 8010260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010262:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010266:	682b      	ldr	r3, [r5, #0]
 8010268:	2250      	movs	r2, #80	@ 0x50
 801026a:	f10c 0118 	add.w	r1, ip, #24
 801026e:	f104 0018 	add.w	r0, r4, #24
 8010272:	f8ce 3000 	str.w	r3, [lr]
 8010276:	82a7      	strh	r7, [r4, #20]
 8010278:	f00b f9b1 	bl	801b5de <memcpy>
 801027c:	4630      	mov	r0, r6
 801027e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010280:	200b      	movs	r0, #11
 8010282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010284:	200b      	movs	r0, #11
 8010286:	4770      	bx	lr

08010288 <rcl_node_resolve_name>:
 8010288:	b082      	sub	sp, #8
 801028a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801028e:	b091      	sub	sp, #68	@ 0x44
 8010290:	ac1a      	add	r4, sp, #104	@ 0x68
 8010292:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8010296:	e884 000c 	stmia.w	r4, {r2, r3}
 801029a:	2800      	cmp	r0, #0
 801029c:	d03d      	beq.n	801031a <rcl_node_resolve_name+0x92>
 801029e:	460c      	mov	r4, r1
 80102a0:	4605      	mov	r5, r0
 80102a2:	f7ff ffb3 	bl	801020c <rcl_node_get_options>
 80102a6:	2800      	cmp	r0, #0
 80102a8:	d03a      	beq.n	8010320 <rcl_node_resolve_name+0x98>
 80102aa:	4628      	mov	r0, r5
 80102ac:	f7ff ff9e 	bl	80101ec <rcl_node_get_name>
 80102b0:	4606      	mov	r6, r0
 80102b2:	4628      	mov	r0, r5
 80102b4:	ad0b      	add	r5, sp, #44	@ 0x2c
 80102b6:	f7ff ffa1 	bl	80101fc <rcl_node_get_namespace>
 80102ba:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80102be:	4607      	mov	r7, r0
 80102c0:	46ac      	mov	ip, r5
 80102c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80102c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80102ca:	f8de 3000 	ldr.w	r3, [lr]
 80102ce:	f8cc 3000 	str.w	r3, [ip]
 80102d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80102d4:	b30b      	cbz	r3, 801031a <rcl_node_resolve_name+0x92>
 80102d6:	4689      	mov	r9, r1
 80102d8:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 80102dc:	f002 fb24 	bl	8012928 <rcutils_get_zero_initialized_string_map>
 80102e0:	ab10      	add	r3, sp, #64	@ 0x40
 80102e2:	9008      	str	r0, [sp, #32]
 80102e4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80102e8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80102ec:	2100      	movs	r1, #0
 80102ee:	a808      	add	r0, sp, #32
 80102f0:	e895 000c 	ldmia.w	r5, {r2, r3}
 80102f4:	f002 fb8e 	bl	8012a14 <rcutils_string_map_init>
 80102f8:	4683      	mov	fp, r0
 80102fa:	b1a0      	cbz	r0, 8010326 <rcl_node_resolve_name+0x9e>
 80102fc:	f7ff f860 	bl	800f3c0 <rcutils_get_error_string>
 8010300:	f7ff f876 	bl	800f3f0 <rcutils_reset_error>
 8010304:	f1bb 0f0a 	cmp.w	fp, #10
 8010308:	bf18      	it	ne
 801030a:	f04f 0b01 	movne.w	fp, #1
 801030e:	4658      	mov	r0, fp
 8010310:	b011      	add	sp, #68	@ 0x44
 8010312:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010316:	b002      	add	sp, #8
 8010318:	4770      	bx	lr
 801031a:	f04f 0b0b 	mov.w	fp, #11
 801031e:	e7f6      	b.n	801030e <rcl_node_resolve_name+0x86>
 8010320:	f04f 0b01 	mov.w	fp, #1
 8010324:	e7f3      	b.n	801030e <rcl_node_resolve_name+0x86>
 8010326:	9009      	str	r0, [sp, #36]	@ 0x24
 8010328:	9007      	str	r0, [sp, #28]
 801032a:	a808      	add	r0, sp, #32
 801032c:	f009 f85a 	bl	80193e4 <rcl_get_default_topic_name_substitutions>
 8010330:	4683      	mov	fp, r0
 8010332:	b180      	cbz	r0, 8010356 <rcl_node_resolve_name+0xce>
 8010334:	280a      	cmp	r0, #10
 8010336:	a808      	add	r0, sp, #32
 8010338:	bf18      	it	ne
 801033a:	f04f 0b01 	movne.w	fp, #1
 801033e:	f002 fba9 	bl	8012a94 <rcutils_string_map_fini>
 8010342:	4604      	mov	r4, r0
 8010344:	2800      	cmp	r0, #0
 8010346:	d15b      	bne.n	8010400 <rcl_node_resolve_name+0x178>
 8010348:	4651      	mov	r1, sl
 801034a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801034c:	47c8      	blx	r9
 801034e:	4651      	mov	r1, sl
 8010350:	4620      	mov	r0, r4
 8010352:	47c8      	blx	r9
 8010354:	e7db      	b.n	801030e <rcl_node_resolve_name+0x86>
 8010356:	ab09      	add	r3, sp, #36	@ 0x24
 8010358:	46ec      	mov	ip, sp
 801035a:	9305      	str	r3, [sp, #20]
 801035c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801035e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010362:	682b      	ldr	r3, [r5, #0]
 8010364:	463a      	mov	r2, r7
 8010366:	4631      	mov	r1, r6
 8010368:	4620      	mov	r0, r4
 801036a:	f8cc 3000 	str.w	r3, [ip]
 801036e:	ab08      	add	r3, sp, #32
 8010370:	f008 fed8 	bl	8019124 <rcl_expand_topic_name>
 8010374:	4683      	mov	fp, r0
 8010376:	b9d8      	cbnz	r0, 80103b0 <rcl_node_resolve_name+0x128>
 8010378:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801037a:	4602      	mov	r2, r0
 801037c:	9009      	str	r0, [sp, #36]	@ 0x24
 801037e:	a90a      	add	r1, sp, #40	@ 0x28
 8010380:	4620      	mov	r0, r4
 8010382:	f002 fc51 	bl	8012c28 <rmw_validate_full_topic_name>
 8010386:	bb50      	cbnz	r0, 80103de <rcl_node_resolve_name+0x156>
 8010388:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801038a:	2d00      	cmp	r5, #0
 801038c:	d140      	bne.n	8010410 <rcl_node_resolve_name+0x188>
 801038e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010390:	a808      	add	r0, sp, #32
 8010392:	601c      	str	r4, [r3, #0]
 8010394:	f002 fb7e 	bl	8012a94 <rcutils_string_map_fini>
 8010398:	4683      	mov	fp, r0
 801039a:	2800      	cmp	r0, #0
 801039c:	d043      	beq.n	8010426 <rcl_node_resolve_name+0x19e>
 801039e:	f7ff f80f 	bl	800f3c0 <rcutils_get_error_string>
 80103a2:	46a8      	mov	r8, r5
 80103a4:	f04f 0b01 	mov.w	fp, #1
 80103a8:	462c      	mov	r4, r5
 80103aa:	f7ff f821 	bl	800f3f0 <rcutils_reset_error>
 80103ae:	e00a      	b.n	80103c6 <rcl_node_resolve_name+0x13e>
 80103b0:	2867      	cmp	r0, #103	@ 0x67
 80103b2:	bf14      	ite	ne
 80103b4:	f04f 0800 	movne.w	r8, #0
 80103b8:	f008 0801 	andeq.w	r8, r8, #1
 80103bc:	9c07      	ldr	r4, [sp, #28]
 80103be:	a808      	add	r0, sp, #32
 80103c0:	f002 fb68 	bl	8012a94 <rcutils_string_map_fini>
 80103c4:	bb50      	cbnz	r0, 801041c <rcl_node_resolve_name+0x194>
 80103c6:	4651      	mov	r1, sl
 80103c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80103ca:	47c8      	blx	r9
 80103cc:	4651      	mov	r1, sl
 80103ce:	4620      	mov	r0, r4
 80103d0:	47c8      	blx	r9
 80103d2:	f1b8 0f00 	cmp.w	r8, #0
 80103d6:	bf18      	it	ne
 80103d8:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 80103dc:	e797      	b.n	801030e <rcl_node_resolve_name+0x86>
 80103de:	f7fe ffef 	bl	800f3c0 <rcutils_get_error_string>
 80103e2:	f7ff f805 	bl	800f3f0 <rcutils_reset_error>
 80103e6:	a808      	add	r0, sp, #32
 80103e8:	f002 fb54 	bl	8012a94 <rcutils_string_map_fini>
 80103ec:	b998      	cbnz	r0, 8010416 <rcl_node_resolve_name+0x18e>
 80103ee:	4651      	mov	r1, sl
 80103f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80103f2:	47c8      	blx	r9
 80103f4:	4651      	mov	r1, sl
 80103f6:	4620      	mov	r0, r4
 80103f8:	f04f 0b01 	mov.w	fp, #1
 80103fc:	47c8      	blx	r9
 80103fe:	e786      	b.n	801030e <rcl_node_resolve_name+0x86>
 8010400:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8010404:	f7fe ffdc 	bl	800f3c0 <rcutils_get_error_string>
 8010408:	f7fe fff2 	bl	800f3f0 <rcutils_reset_error>
 801040c:	4644      	mov	r4, r8
 801040e:	e7da      	b.n	80103c6 <rcl_node_resolve_name+0x13e>
 8010410:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 8010414:	e7d3      	b.n	80103be <rcl_node_resolve_name+0x136>
 8010416:	46d8      	mov	r8, fp
 8010418:	f04f 0b01 	mov.w	fp, #1
 801041c:	f7fe ffd0 	bl	800f3c0 <rcutils_get_error_string>
 8010420:	f7fe ffe6 	bl	800f3f0 <rcutils_reset_error>
 8010424:	e7cf      	b.n	80103c6 <rcl_node_resolve_name+0x13e>
 8010426:	4651      	mov	r1, sl
 8010428:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801042a:	47c8      	blx	r9
 801042c:	4651      	mov	r1, sl
 801042e:	4658      	mov	r0, fp
 8010430:	47c8      	blx	r9
 8010432:	e76c      	b.n	801030e <rcl_node_resolve_name+0x86>

08010434 <exact_match_lookup>:
 8010434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010436:	f102 0708 	add.w	r7, r2, #8
 801043a:	460b      	mov	r3, r1
 801043c:	b085      	sub	sp, #20
 801043e:	4614      	mov	r4, r2
 8010440:	4606      	mov	r6, r0
 8010442:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010446:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801044a:	4618      	mov	r0, r3
 801044c:	4919      	ldr	r1, [pc, #100]	@ (80104b4 <exact_match_lookup+0x80>)
 801044e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010452:	f002 f8e3 	bl	801261c <rcutils_join_path>
 8010456:	7833      	ldrb	r3, [r6, #0]
 8010458:	4605      	mov	r5, r0
 801045a:	2b2f      	cmp	r3, #47	@ 0x2f
 801045c:	d023      	beq.n	80104a6 <exact_match_lookup+0x72>
 801045e:	f104 030c 	add.w	r3, r4, #12
 8010462:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010466:	e88d 0003 	stmia.w	sp, {r0, r1}
 801046a:	1c70      	adds	r0, r6, #1
 801046c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010470:	f002 f8da 	bl	8012628 <rcutils_to_native_path>
 8010474:	4606      	mov	r6, r0
 8010476:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801047a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801047e:	4631      	mov	r1, r6
 8010480:	4628      	mov	r0, r5
 8010482:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010486:	f002 f8c9 	bl	801261c <rcutils_join_path>
 801048a:	4603      	mov	r3, r0
 801048c:	4630      	mov	r0, r6
 801048e:	6862      	ldr	r2, [r4, #4]
 8010490:	461e      	mov	r6, r3
 8010492:	6921      	ldr	r1, [r4, #16]
 8010494:	4790      	blx	r2
 8010496:	4628      	mov	r0, r5
 8010498:	4635      	mov	r5, r6
 801049a:	6863      	ldr	r3, [r4, #4]
 801049c:	6921      	ldr	r1, [r4, #16]
 801049e:	4798      	blx	r3
 80104a0:	4628      	mov	r0, r5
 80104a2:	b005      	add	sp, #20
 80104a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104a6:	7873      	ldrb	r3, [r6, #1]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d1d8      	bne.n	801045e <exact_match_lookup+0x2a>
 80104ac:	4628      	mov	r0, r5
 80104ae:	b005      	add	sp, #20
 80104b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104b2:	bf00      	nop
 80104b4:	0801c630 	.word	0x0801c630

080104b8 <rcl_get_secure_root>:
 80104b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80104bc:	b085      	sub	sp, #20
 80104be:	b168      	cbz	r0, 80104dc <rcl_get_secure_root+0x24>
 80104c0:	4607      	mov	r7, r0
 80104c2:	4608      	mov	r0, r1
 80104c4:	460c      	mov	r4, r1
 80104c6:	f7fe ff6d 	bl	800f3a4 <rcutils_allocator_is_valid>
 80104ca:	b138      	cbz	r0, 80104dc <rcl_get_secure_root+0x24>
 80104cc:	2300      	movs	r3, #0
 80104ce:	482d      	ldr	r0, [pc, #180]	@ (8010584 <rcl_get_secure_root+0xcc>)
 80104d0:	a903      	add	r1, sp, #12
 80104d2:	9303      	str	r3, [sp, #12]
 80104d4:	f002 f888 	bl	80125e8 <rcutils_get_env>
 80104d8:	4605      	mov	r5, r0
 80104da:	b120      	cbz	r0, 80104e6 <rcl_get_secure_root+0x2e>
 80104dc:	2500      	movs	r5, #0
 80104de:	4628      	mov	r0, r5
 80104e0:	b005      	add	sp, #20
 80104e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104e6:	9b03      	ldr	r3, [sp, #12]
 80104e8:	781a      	ldrb	r2, [r3, #0]
 80104ea:	2a00      	cmp	r2, #0
 80104ec:	d0f6      	beq.n	80104dc <rcl_get_secure_root+0x24>
 80104ee:	f104 090c 	add.w	r9, r4, #12
 80104f2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80104f6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80104fa:	4618      	mov	r0, r3
 80104fc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010500:	f002 f9d4 	bl	80128ac <rcutils_strdup>
 8010504:	4680      	mov	r8, r0
 8010506:	2800      	cmp	r0, #0
 8010508:	d0e8      	beq.n	80104dc <rcl_get_secure_root+0x24>
 801050a:	a903      	add	r1, sp, #12
 801050c:	481e      	ldr	r0, [pc, #120]	@ (8010588 <rcl_get_secure_root+0xd0>)
 801050e:	9503      	str	r5, [sp, #12]
 8010510:	f002 f86a 	bl	80125e8 <rcutils_get_env>
 8010514:	b160      	cbz	r0, 8010530 <rcl_get_secure_root+0x78>
 8010516:	2600      	movs	r6, #0
 8010518:	4630      	mov	r0, r6
 801051a:	6863      	ldr	r3, [r4, #4]
 801051c:	6921      	ldr	r1, [r4, #16]
 801051e:	4798      	blx	r3
 8010520:	4640      	mov	r0, r8
 8010522:	6863      	ldr	r3, [r4, #4]
 8010524:	6921      	ldr	r1, [r4, #16]
 8010526:	4798      	blx	r3
 8010528:	4628      	mov	r0, r5
 801052a:	b005      	add	sp, #20
 801052c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010530:	9b03      	ldr	r3, [sp, #12]
 8010532:	781e      	ldrb	r6, [r3, #0]
 8010534:	b1f6      	cbz	r6, 8010574 <rcl_get_secure_root+0xbc>
 8010536:	e899 0003 	ldmia.w	r9, {r0, r1}
 801053a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801053e:	4618      	mov	r0, r3
 8010540:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010544:	f002 f9b2 	bl	80128ac <rcutils_strdup>
 8010548:	4606      	mov	r6, r0
 801054a:	2800      	cmp	r0, #0
 801054c:	d0e3      	beq.n	8010516 <rcl_get_secure_root+0x5e>
 801054e:	4622      	mov	r2, r4
 8010550:	4641      	mov	r1, r8
 8010552:	f7ff ff6f 	bl	8010434 <exact_match_lookup>
 8010556:	4605      	mov	r5, r0
 8010558:	2d00      	cmp	r5, #0
 801055a:	d0dd      	beq.n	8010518 <rcl_get_secure_root+0x60>
 801055c:	4628      	mov	r0, r5
 801055e:	f002 f85b 	bl	8012618 <rcutils_is_directory>
 8010562:	4603      	mov	r3, r0
 8010564:	2800      	cmp	r0, #0
 8010566:	d1d7      	bne.n	8010518 <rcl_get_secure_root+0x60>
 8010568:	4628      	mov	r0, r5
 801056a:	6921      	ldr	r1, [r4, #16]
 801056c:	461d      	mov	r5, r3
 801056e:	6863      	ldr	r3, [r4, #4]
 8010570:	4798      	blx	r3
 8010572:	e7d1      	b.n	8010518 <rcl_get_secure_root+0x60>
 8010574:	4622      	mov	r2, r4
 8010576:	4638      	mov	r0, r7
 8010578:	4641      	mov	r1, r8
 801057a:	f7ff ff5b 	bl	8010434 <exact_match_lookup>
 801057e:	4605      	mov	r5, r0
 8010580:	e7ea      	b.n	8010558 <rcl_get_secure_root+0xa0>
 8010582:	bf00      	nop
 8010584:	0801c63c 	.word	0x0801c63c
 8010588:	0801c654 	.word	0x0801c654

0801058c <rcl_get_security_options_from_environment>:
 801058c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010590:	b082      	sub	sp, #8
 8010592:	2300      	movs	r3, #0
 8010594:	4606      	mov	r6, r0
 8010596:	460f      	mov	r7, r1
 8010598:	4821      	ldr	r0, [pc, #132]	@ (8010620 <rcl_get_security_options_from_environment+0x94>)
 801059a:	a901      	add	r1, sp, #4
 801059c:	4690      	mov	r8, r2
 801059e:	9301      	str	r3, [sp, #4]
 80105a0:	f002 f822 	bl	80125e8 <rcutils_get_env>
 80105a4:	b120      	cbz	r0, 80105b0 <rcl_get_security_options_from_environment+0x24>
 80105a6:	2501      	movs	r5, #1
 80105a8:	4628      	mov	r0, r5
 80105aa:	b002      	add	sp, #8
 80105ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105b0:	4604      	mov	r4, r0
 80105b2:	491c      	ldr	r1, [pc, #112]	@ (8010624 <rcl_get_security_options_from_environment+0x98>)
 80105b4:	9801      	ldr	r0, [sp, #4]
 80105b6:	f7ef fe93 	bl	80002e0 <strcmp>
 80105ba:	4605      	mov	r5, r0
 80105bc:	b9f0      	cbnz	r0, 80105fc <rcl_get_security_options_from_environment+0x70>
 80105be:	9001      	str	r0, [sp, #4]
 80105c0:	f1b8 0f00 	cmp.w	r8, #0
 80105c4:	d021      	beq.n	801060a <rcl_get_security_options_from_environment+0x7e>
 80105c6:	a901      	add	r1, sp, #4
 80105c8:	4817      	ldr	r0, [pc, #92]	@ (8010628 <rcl_get_security_options_from_environment+0x9c>)
 80105ca:	f002 f80d 	bl	80125e8 <rcutils_get_env>
 80105ce:	2800      	cmp	r0, #0
 80105d0:	d1e9      	bne.n	80105a6 <rcl_get_security_options_from_environment+0x1a>
 80105d2:	4916      	ldr	r1, [pc, #88]	@ (801062c <rcl_get_security_options_from_environment+0xa0>)
 80105d4:	9801      	ldr	r0, [sp, #4]
 80105d6:	f7ef fe83 	bl	80002e0 <strcmp>
 80105da:	4603      	mov	r3, r0
 80105dc:	4639      	mov	r1, r7
 80105de:	4630      	mov	r0, r6
 80105e0:	fab3 f383 	clz	r3, r3
 80105e4:	095b      	lsrs	r3, r3, #5
 80105e6:	f888 3000 	strb.w	r3, [r8]
 80105ea:	f7ff ff65 	bl	80104b8 <rcl_get_secure_root>
 80105ee:	b170      	cbz	r0, 801060e <rcl_get_security_options_from_environment+0x82>
 80105f0:	f8c8 0004 	str.w	r0, [r8, #4]
 80105f4:	4628      	mov	r0, r5
 80105f6:	b002      	add	sp, #8
 80105f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105fc:	4625      	mov	r5, r4
 80105fe:	f888 4000 	strb.w	r4, [r8]
 8010602:	4628      	mov	r0, r5
 8010604:	b002      	add	sp, #8
 8010606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801060a:	250b      	movs	r5, #11
 801060c:	e7cc      	b.n	80105a8 <rcl_get_security_options_from_environment+0x1c>
 801060e:	f898 5000 	ldrb.w	r5, [r8]
 8010612:	f1a5 0501 	sub.w	r5, r5, #1
 8010616:	fab5 f585 	clz	r5, r5
 801061a:	096d      	lsrs	r5, r5, #5
 801061c:	e7c4      	b.n	80105a8 <rcl_get_security_options_from_environment+0x1c>
 801061e:	bf00      	nop
 8010620:	0801c5f4 	.word	0x0801c5f4
 8010624:	0801c608 	.word	0x0801c608
 8010628:	0801c610 	.word	0x0801c610
 801062c:	0801c628 	.word	0x0801c628

08010630 <rcl_service_get_rmw_handle>:
 8010630:	b118      	cbz	r0, 801063a <rcl_service_get_rmw_handle+0xa>
 8010632:	6800      	ldr	r0, [r0, #0]
 8010634:	b108      	cbz	r0, 801063a <rcl_service_get_rmw_handle+0xa>
 8010636:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801063a:	4770      	bx	lr

0801063c <rcl_take_request>:
 801063c:	b570      	push	{r4, r5, r6, lr}
 801063e:	468e      	mov	lr, r1
 8010640:	b08c      	sub	sp, #48	@ 0x30
 8010642:	460c      	mov	r4, r1
 8010644:	4616      	mov	r6, r2
 8010646:	f10d 0c18 	add.w	ip, sp, #24
 801064a:	4605      	mov	r5, r0
 801064c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010650:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010654:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010658:	e88c 0003 	stmia.w	ip, {r0, r1}
 801065c:	b30d      	cbz	r5, 80106a2 <rcl_take_request+0x66>
 801065e:	682b      	ldr	r3, [r5, #0]
 8010660:	b1fb      	cbz	r3, 80106a2 <rcl_take_request+0x66>
 8010662:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010666:	b1e0      	cbz	r0, 80106a2 <rcl_take_request+0x66>
 8010668:	b336      	cbz	r6, 80106b8 <rcl_take_request+0x7c>
 801066a:	2300      	movs	r3, #0
 801066c:	4632      	mov	r2, r6
 801066e:	a902      	add	r1, sp, #8
 8010670:	f88d 3007 	strb.w	r3, [sp, #7]
 8010674:	f10d 0307 	add.w	r3, sp, #7
 8010678:	f003 f88c 	bl	8013794 <rmw_take_request>
 801067c:	4605      	mov	r5, r0
 801067e:	b198      	cbz	r0, 80106a8 <rcl_take_request+0x6c>
 8010680:	280a      	cmp	r0, #10
 8010682:	bf18      	it	ne
 8010684:	2501      	movne	r5, #1
 8010686:	f10d 0e18 	add.w	lr, sp, #24
 801068a:	46a4      	mov	ip, r4
 801068c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010690:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010694:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010698:	e88c 0003 	stmia.w	ip, {r0, r1}
 801069c:	4628      	mov	r0, r5
 801069e:	b00c      	add	sp, #48	@ 0x30
 80106a0:	bd70      	pop	{r4, r5, r6, pc}
 80106a2:	f44f 7516 	mov.w	r5, #600	@ 0x258
 80106a6:	e7ee      	b.n	8010686 <rcl_take_request+0x4a>
 80106a8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80106ac:	f240 2359 	movw	r3, #601	@ 0x259
 80106b0:	2a00      	cmp	r2, #0
 80106b2:	bf08      	it	eq
 80106b4:	461d      	moveq	r5, r3
 80106b6:	e7e6      	b.n	8010686 <rcl_take_request+0x4a>
 80106b8:	250b      	movs	r5, #11
 80106ba:	e7e4      	b.n	8010686 <rcl_take_request+0x4a>

080106bc <rcl_send_response>:
 80106bc:	b170      	cbz	r0, 80106dc <rcl_send_response+0x20>
 80106be:	6800      	ldr	r0, [r0, #0]
 80106c0:	b160      	cbz	r0, 80106dc <rcl_send_response+0x20>
 80106c2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80106c6:	b148      	cbz	r0, 80106dc <rcl_send_response+0x20>
 80106c8:	b169      	cbz	r1, 80106e6 <rcl_send_response+0x2a>
 80106ca:	b510      	push	{r4, lr}
 80106cc:	b14a      	cbz	r2, 80106e2 <rcl_send_response+0x26>
 80106ce:	f003 f8bf 	bl	8013850 <rmw_send_response>
 80106d2:	b110      	cbz	r0, 80106da <rcl_send_response+0x1e>
 80106d4:	2802      	cmp	r0, #2
 80106d6:	bf18      	it	ne
 80106d8:	2001      	movne	r0, #1
 80106da:	bd10      	pop	{r4, pc}
 80106dc:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80106e0:	4770      	bx	lr
 80106e2:	200b      	movs	r0, #11
 80106e4:	bd10      	pop	{r4, pc}
 80106e6:	200b      	movs	r0, #11
 80106e8:	4770      	bx	lr
 80106ea:	bf00      	nop

080106ec <rcl_service_is_valid>:
 80106ec:	b130      	cbz	r0, 80106fc <rcl_service_is_valid+0x10>
 80106ee:	6800      	ldr	r0, [r0, #0]
 80106f0:	b120      	cbz	r0, 80106fc <rcl_service_is_valid+0x10>
 80106f2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80106f6:	3800      	subs	r0, #0
 80106f8:	bf18      	it	ne
 80106fa:	2001      	movne	r0, #1
 80106fc:	4770      	bx	lr
 80106fe:	bf00      	nop

08010700 <rcl_get_zero_initialized_subscription>:
 8010700:	4b01      	ldr	r3, [pc, #4]	@ (8010708 <rcl_get_zero_initialized_subscription+0x8>)
 8010702:	6818      	ldr	r0, [r3, #0]
 8010704:	4770      	bx	lr
 8010706:	bf00      	nop
 8010708:	0801c674 	.word	0x0801c674

0801070c <rcl_subscription_init>:
 801070c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010710:	b088      	sub	sp, #32
 8010712:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8010714:	b1ff      	cbz	r7, 8010756 <rcl_subscription_init+0x4a>
 8010716:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 801071a:	4605      	mov	r5, r0
 801071c:	460e      	mov	r6, r1
 801071e:	4691      	mov	r9, r2
 8010720:	4650      	mov	r0, sl
 8010722:	4698      	mov	r8, r3
 8010724:	f7fe fe3e 	bl	800f3a4 <rcutils_allocator_is_valid>
 8010728:	f080 0401 	eor.w	r4, r0, #1
 801072c:	b2e4      	uxtb	r4, r4
 801072e:	b994      	cbnz	r4, 8010756 <rcl_subscription_init+0x4a>
 8010730:	b18d      	cbz	r5, 8010756 <rcl_subscription_init+0x4a>
 8010732:	4630      	mov	r0, r6
 8010734:	f7ff fd50 	bl	80101d8 <rcl_node_is_valid>
 8010738:	2800      	cmp	r0, #0
 801073a:	d055      	beq.n	80107e8 <rcl_subscription_init+0xdc>
 801073c:	f1b9 0f00 	cmp.w	r9, #0
 8010740:	d009      	beq.n	8010756 <rcl_subscription_init+0x4a>
 8010742:	f1b8 0f00 	cmp.w	r8, #0
 8010746:	d006      	beq.n	8010756 <rcl_subscription_init+0x4a>
 8010748:	682b      	ldr	r3, [r5, #0]
 801074a:	b14b      	cbz	r3, 8010760 <rcl_subscription_init+0x54>
 801074c:	2464      	movs	r4, #100	@ 0x64
 801074e:	4620      	mov	r0, r4
 8010750:	b008      	add	sp, #32
 8010752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010756:	240b      	movs	r4, #11
 8010758:	4620      	mov	r0, r4
 801075a:	b008      	add	sp, #32
 801075c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010760:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8010764:	aa07      	add	r2, sp, #28
 8010766:	9307      	str	r3, [sp, #28]
 8010768:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801076c:	9205      	str	r2, [sp, #20]
 801076e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010772:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010776:	4641      	mov	r1, r8
 8010778:	4630      	mov	r0, r6
 801077a:	e89a 000c 	ldmia.w	sl, {r2, r3}
 801077e:	f7ff fd83 	bl	8010288 <rcl_node_resolve_name>
 8010782:	2800      	cmp	r0, #0
 8010784:	d15f      	bne.n	8010846 <rcl_subscription_init+0x13a>
 8010786:	21c8      	movs	r1, #200	@ 0xc8
 8010788:	2001      	movs	r0, #1
 801078a:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	@ 0x5c
 801078e:	4798      	blx	r3
 8010790:	6028      	str	r0, [r5, #0]
 8010792:	2800      	cmp	r0, #0
 8010794:	d05f      	beq.n	8010856 <rcl_subscription_init+0x14a>
 8010796:	4630      	mov	r0, r6
 8010798:	f7ff fd40 	bl	801021c <rcl_node_get_rmw_handle>
 801079c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80107a0:	4649      	mov	r1, r9
 80107a2:	9a07      	ldr	r2, [sp, #28]
 80107a4:	9300      	str	r3, [sp, #0]
 80107a6:	463b      	mov	r3, r7
 80107a8:	682c      	ldr	r4, [r5, #0]
 80107aa:	f003 f939 	bl	8013a20 <rmw_create_subscription>
 80107ae:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 80107b2:	682c      	ldr	r4, [r5, #0]
 80107b4:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 80107b8:	b348      	cbz	r0, 801080e <rcl_subscription_init+0x102>
 80107ba:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 80107be:	f003 fa25 	bl	8013c0c <rmw_subscription_get_actual_qos>
 80107c2:	4604      	mov	r4, r0
 80107c4:	b9a8      	cbnz	r0, 80107f2 <rcl_subscription_init+0xe6>
 80107c6:	6828      	ldr	r0, [r5, #0]
 80107c8:	2270      	movs	r2, #112	@ 0x70
 80107ca:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80107ce:	4639      	mov	r1, r7
 80107d0:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 80107d4:	f00a ff03 	bl	801b5de <memcpy>
 80107d8:	9807      	ldr	r0, [sp, #28]
 80107da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80107dc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80107de:	4798      	blx	r3
 80107e0:	4620      	mov	r0, r4
 80107e2:	b008      	add	sp, #32
 80107e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107e8:	24c8      	movs	r4, #200	@ 0xc8
 80107ea:	4620      	mov	r0, r4
 80107ec:	b008      	add	sp, #32
 80107ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107f2:	682c      	ldr	r4, [r5, #0]
 80107f4:	b36c      	cbz	r4, 8010852 <rcl_subscription_init+0x146>
 80107f6:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 80107fa:	b14b      	cbz	r3, 8010810 <rcl_subscription_init+0x104>
 80107fc:	4630      	mov	r0, r6
 80107fe:	f7ff fd0d 	bl	801021c <rcl_node_get_rmw_handle>
 8010802:	682b      	ldr	r3, [r5, #0]
 8010804:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8010808:	f003 fa14 	bl	8013c34 <rmw_destroy_subscription>
 801080c:	682c      	ldr	r4, [r5, #0]
 801080e:	b194      	cbz	r4, 8010836 <rcl_subscription_init+0x12a>
 8010810:	f104 0650 	add.w	r6, r4, #80	@ 0x50
 8010814:	4630      	mov	r0, r6
 8010816:	f7fe fdc5 	bl	800f3a4 <rcutils_allocator_is_valid>
 801081a:	b158      	cbz	r0, 8010834 <rcl_subscription_init+0x128>
 801081c:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 801081e:	b148      	cbz	r0, 8010834 <rcl_subscription_init+0x128>
 8010820:	4631      	mov	r1, r6
 8010822:	f002 f9d9 	bl	8012bd8 <rmw_subscription_content_filter_options_fini>
 8010826:	4606      	mov	r6, r0
 8010828:	b9c8      	cbnz	r0, 801085e <rcl_subscription_init+0x152>
 801082a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801082c:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 801082e:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8010830:	4798      	blx	r3
 8010832:	66e6      	str	r6, [r4, #108]	@ 0x6c
 8010834:	682c      	ldr	r4, [r5, #0]
 8010836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010838:	4620      	mov	r0, r4
 801083a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801083c:	2401      	movs	r4, #1
 801083e:	4798      	blx	r3
 8010840:	2300      	movs	r3, #0
 8010842:	602b      	str	r3, [r5, #0]
 8010844:	e7c8      	b.n	80107d8 <rcl_subscription_init+0xcc>
 8010846:	2867      	cmp	r0, #103	@ 0x67
 8010848:	d007      	beq.n	801085a <rcl_subscription_init+0x14e>
 801084a:	2869      	cmp	r0, #105	@ 0x69
 801084c:	d005      	beq.n	801085a <rcl_subscription_init+0x14e>
 801084e:	280a      	cmp	r0, #10
 8010850:	d001      	beq.n	8010856 <rcl_subscription_init+0x14a>
 8010852:	2401      	movs	r4, #1
 8010854:	e7c0      	b.n	80107d8 <rcl_subscription_init+0xcc>
 8010856:	240a      	movs	r4, #10
 8010858:	e7be      	b.n	80107d8 <rcl_subscription_init+0xcc>
 801085a:	2467      	movs	r4, #103	@ 0x67
 801085c:	e7bc      	b.n	80107d8 <rcl_subscription_init+0xcc>
 801085e:	f008 fc19 	bl	8019094 <rcl_convert_rmw_ret_to_rcl_ret>
 8010862:	682c      	ldr	r4, [r5, #0]
 8010864:	e7e7      	b.n	8010836 <rcl_subscription_init+0x12a>
 8010866:	bf00      	nop

08010868 <rcl_subscription_get_default_options>:
 8010868:	b570      	push	{r4, r5, r6, lr}
 801086a:	4d14      	ldr	r5, [pc, #80]	@ (80108bc <rcl_subscription_get_default_options+0x54>)
 801086c:	b08a      	sub	sp, #40	@ 0x28
 801086e:	4604      	mov	r4, r0
 8010870:	2250      	movs	r2, #80	@ 0x50
 8010872:	4913      	ldr	r1, [pc, #76]	@ (80108c0 <rcl_subscription_get_default_options+0x58>)
 8010874:	4628      	mov	r0, r5
 8010876:	f00a feb2 	bl	801b5de <memcpy>
 801087a:	a804      	add	r0, sp, #16
 801087c:	f7fe fd84 	bl	800f388 <rcutils_get_default_allocator>
 8010880:	f10d 0c10 	add.w	ip, sp, #16
 8010884:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8010888:	466e      	mov	r6, sp
 801088a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801088e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010892:	f8dc 3000 	ldr.w	r3, [ip]
 8010896:	4630      	mov	r0, r6
 8010898:	f8ce 3000 	str.w	r3, [lr]
 801089c:	f002 f9b6 	bl	8012c0c <rmw_get_default_subscription_options>
 80108a0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80108a4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80108a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80108ac:	2270      	movs	r2, #112	@ 0x70
 80108ae:	4629      	mov	r1, r5
 80108b0:	4620      	mov	r0, r4
 80108b2:	f00a fe94 	bl	801b5de <memcpy>
 80108b6:	4620      	mov	r0, r4
 80108b8:	b00a      	add	sp, #40	@ 0x28
 80108ba:	bd70      	pop	{r4, r5, r6, pc}
 80108bc:	24063c48 	.word	0x24063c48
 80108c0:	0801c678 	.word	0x0801c678

080108c4 <rcl_take>:
 80108c4:	2800      	cmp	r0, #0
 80108c6:	d049      	beq.n	801095c <rcl_take+0x98>
 80108c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108cc:	4615      	mov	r5, r2
 80108ce:	6802      	ldr	r2, [r0, #0]
 80108d0:	b0a4      	sub	sp, #144	@ 0x90
 80108d2:	4604      	mov	r4, r0
 80108d4:	2a00      	cmp	r2, #0
 80108d6:	d039      	beq.n	801094c <rcl_take+0x88>
 80108d8:	461f      	mov	r7, r3
 80108da:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 80108de:	b3ab      	cbz	r3, 801094c <rcl_take+0x88>
 80108e0:	460e      	mov	r6, r1
 80108e2:	2900      	cmp	r1, #0
 80108e4:	d038      	beq.n	8010958 <rcl_take+0x94>
 80108e6:	2d00      	cmp	r5, #0
 80108e8:	d03c      	beq.n	8010964 <rcl_take+0xa0>
 80108ea:	a802      	add	r0, sp, #8
 80108ec:	f04f 0800 	mov.w	r8, #0
 80108f0:	f002 f992 	bl	8012c18 <rmw_get_zero_initialized_message_info>
 80108f4:	f10d 0c08 	add.w	ip, sp, #8
 80108f8:	46ae      	mov	lr, r5
 80108fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80108fe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010902:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010906:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801090a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801090e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010912:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8010916:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801091a:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 801091e:	462b      	mov	r3, r5
 8010920:	6820      	ldr	r0, [r4, #0]
 8010922:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8010926:	4631      	mov	r1, r6
 8010928:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801092c:	9700      	str	r7, [sp, #0]
 801092e:	f003 f9e3 	bl	8013cf8 <rmw_take_with_info>
 8010932:	4603      	mov	r3, r0
 8010934:	b9c0      	cbnz	r0, 8010968 <rcl_take+0xa4>
 8010936:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 801093a:	f240 1291 	movw	r2, #401	@ 0x191
 801093e:	2900      	cmp	r1, #0
 8010940:	bf08      	it	eq
 8010942:	4613      	moveq	r3, r2
 8010944:	4618      	mov	r0, r3
 8010946:	b024      	add	sp, #144	@ 0x90
 8010948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801094c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8010950:	4618      	mov	r0, r3
 8010952:	b024      	add	sp, #144	@ 0x90
 8010954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010958:	230b      	movs	r3, #11
 801095a:	e7f3      	b.n	8010944 <rcl_take+0x80>
 801095c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8010960:	4618      	mov	r0, r3
 8010962:	4770      	bx	lr
 8010964:	ad14      	add	r5, sp, #80	@ 0x50
 8010966:	e7c0      	b.n	80108ea <rcl_take+0x26>
 8010968:	f008 fb94 	bl	8019094 <rcl_convert_rmw_ret_to_rcl_ret>
 801096c:	4603      	mov	r3, r0
 801096e:	e7e9      	b.n	8010944 <rcl_take+0x80>

08010970 <rcl_subscription_get_rmw_handle>:
 8010970:	b118      	cbz	r0, 801097a <rcl_subscription_get_rmw_handle+0xa>
 8010972:	6800      	ldr	r0, [r0, #0]
 8010974:	b108      	cbz	r0, 801097a <rcl_subscription_get_rmw_handle+0xa>
 8010976:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801097a:	4770      	bx	lr

0801097c <rcl_subscription_is_valid>:
 801097c:	b130      	cbz	r0, 801098c <rcl_subscription_is_valid+0x10>
 801097e:	6800      	ldr	r0, [r0, #0]
 8010980:	b120      	cbz	r0, 801098c <rcl_subscription_is_valid+0x10>
 8010982:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8010986:	3800      	subs	r0, #0
 8010988:	bf18      	it	ne
 801098a:	2001      	movne	r0, #1
 801098c:	4770      	bx	lr
 801098e:	bf00      	nop

08010990 <rcl_get_system_time>:
 8010990:	4608      	mov	r0, r1
 8010992:	f7fe bd49 	b.w	800f428 <rcutils_system_time_now>
 8010996:	bf00      	nop

08010998 <rcl_get_steady_time>:
 8010998:	4608      	mov	r0, r1
 801099a:	f7fe bd6b 	b.w	800f474 <rcutils_steady_time_now>
 801099e:	bf00      	nop

080109a0 <rcl_get_ros_time>:
 80109a0:	7a03      	ldrb	r3, [r0, #8]
 80109a2:	b510      	push	{r4, lr}
 80109a4:	460c      	mov	r4, r1
 80109a6:	b143      	cbz	r3, 80109ba <rcl_get_ros_time+0x1a>
 80109a8:	2105      	movs	r1, #5
 80109aa:	f001 fd79 	bl	80124a0 <__atomic_load_8>
 80109ae:	4602      	mov	r2, r0
 80109b0:	460b      	mov	r3, r1
 80109b2:	2000      	movs	r0, #0
 80109b4:	e9c4 2300 	strd	r2, r3, [r4]
 80109b8:	bd10      	pop	{r4, pc}
 80109ba:	4608      	mov	r0, r1
 80109bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109c0:	f7fe bd32 	b.w	800f428 <rcutils_system_time_now>

080109c4 <rcl_clock_init>:
 80109c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109c6:	4605      	mov	r5, r0
 80109c8:	4610      	mov	r0, r2
 80109ca:	4614      	mov	r4, r2
 80109cc:	460e      	mov	r6, r1
 80109ce:	f7fe fce9 	bl	800f3a4 <rcutils_allocator_is_valid>
 80109d2:	b128      	cbz	r0, 80109e0 <rcl_clock_init+0x1c>
 80109d4:	2d03      	cmp	r5, #3
 80109d6:	d803      	bhi.n	80109e0 <rcl_clock_init+0x1c>
 80109d8:	e8df f005 	tbb	[pc, r5]
 80109dc:	0659301f 	.word	0x0659301f
 80109e0:	f04f 0c0b 	mov.w	ip, #11
 80109e4:	4660      	mov	r0, ip
 80109e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109e8:	2c00      	cmp	r4, #0
 80109ea:	d0f9      	beq.n	80109e0 <rcl_clock_init+0x1c>
 80109ec:	fab6 f386 	clz	r3, r6
 80109f0:	095b      	lsrs	r3, r3, #5
 80109f2:	2e00      	cmp	r6, #0
 80109f4:	d0f4      	beq.n	80109e0 <rcl_clock_init+0x1c>
 80109f6:	6133      	str	r3, [r6, #16]
 80109f8:	469c      	mov	ip, r3
 80109fa:	f106 0514 	add.w	r5, r6, #20
 80109fe:	4f32      	ldr	r7, [pc, #200]	@ (8010ac8 <rcl_clock_init+0x104>)
 8010a00:	f04f 0e03 	mov.w	lr, #3
 8010a04:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010a0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010a0c:	6823      	ldr	r3, [r4, #0]
 8010a0e:	4660      	mov	r0, ip
 8010a10:	602b      	str	r3, [r5, #0]
 8010a12:	60f7      	str	r7, [r6, #12]
 8010a14:	f886 e000 	strb.w	lr, [r6]
 8010a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a1a:	2e00      	cmp	r6, #0
 8010a1c:	d0e0      	beq.n	80109e0 <rcl_clock_init+0x1c>
 8010a1e:	2300      	movs	r3, #0
 8010a20:	f106 0514 	add.w	r5, r6, #20
 8010a24:	7033      	strb	r3, [r6, #0]
 8010a26:	469c      	mov	ip, r3
 8010a28:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010a2c:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8010a30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010a34:	6823      	ldr	r3, [r4, #0]
 8010a36:	4660      	mov	r0, ip
 8010a38:	602b      	str	r3, [r5, #0]
 8010a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a3c:	2c00      	cmp	r4, #0
 8010a3e:	d0cf      	beq.n	80109e0 <rcl_clock_init+0x1c>
 8010a40:	fab6 f586 	clz	r5, r6
 8010a44:	096d      	lsrs	r5, r5, #5
 8010a46:	2e00      	cmp	r6, #0
 8010a48:	d0ca      	beq.n	80109e0 <rcl_clock_init+0x1c>
 8010a4a:	46a6      	mov	lr, r4
 8010a4c:	7035      	strb	r5, [r6, #0]
 8010a4e:	f106 0c14 	add.w	ip, r6, #20
 8010a52:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010a56:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8010a5a:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8010a5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a62:	f8de 3000 	ldr.w	r3, [lr]
 8010a66:	2010      	movs	r0, #16
 8010a68:	f8cc 3000 	str.w	r3, [ip]
 8010a6c:	6823      	ldr	r3, [r4, #0]
 8010a6e:	6921      	ldr	r1, [r4, #16]
 8010a70:	4798      	blx	r3
 8010a72:	6130      	str	r0, [r6, #16]
 8010a74:	b320      	cbz	r0, 8010ac0 <rcl_clock_init+0xfc>
 8010a76:	2200      	movs	r2, #0
 8010a78:	2300      	movs	r3, #0
 8010a7a:	46ac      	mov	ip, r5
 8010a7c:	7205      	strb	r5, [r0, #8]
 8010a7e:	e9c0 2300 	strd	r2, r3, [r0]
 8010a82:	4a12      	ldr	r2, [pc, #72]	@ (8010acc <rcl_clock_init+0x108>)
 8010a84:	2301      	movs	r3, #1
 8010a86:	4660      	mov	r0, ip
 8010a88:	60f2      	str	r2, [r6, #12]
 8010a8a:	7033      	strb	r3, [r6, #0]
 8010a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a8e:	2c00      	cmp	r4, #0
 8010a90:	d0a6      	beq.n	80109e0 <rcl_clock_init+0x1c>
 8010a92:	fab6 f386 	clz	r3, r6
 8010a96:	095b      	lsrs	r3, r3, #5
 8010a98:	2e00      	cmp	r6, #0
 8010a9a:	d0a1      	beq.n	80109e0 <rcl_clock_init+0x1c>
 8010a9c:	6133      	str	r3, [r6, #16]
 8010a9e:	469c      	mov	ip, r3
 8010aa0:	f106 0514 	add.w	r5, r6, #20
 8010aa4:	f8df e028 	ldr.w	lr, [pc, #40]	@ 8010ad0 <rcl_clock_init+0x10c>
 8010aa8:	2702      	movs	r7, #2
 8010aaa:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010aae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010ab0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010ab2:	6823      	ldr	r3, [r4, #0]
 8010ab4:	4660      	mov	r0, ip
 8010ab6:	602b      	str	r3, [r5, #0]
 8010ab8:	f8c6 e00c 	str.w	lr, [r6, #12]
 8010abc:	7037      	strb	r7, [r6, #0]
 8010abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ac0:	f04f 0c0a 	mov.w	ip, #10
 8010ac4:	e78e      	b.n	80109e4 <rcl_clock_init+0x20>
 8010ac6:	bf00      	nop
 8010ac8:	08010999 	.word	0x08010999
 8010acc:	080109a1 	.word	0x080109a1
 8010ad0:	08010991 	.word	0x08010991

08010ad4 <rcl_clock_get_now>:
 8010ad4:	b140      	cbz	r0, 8010ae8 <rcl_clock_get_now+0x14>
 8010ad6:	b139      	cbz	r1, 8010ae8 <rcl_clock_get_now+0x14>
 8010ad8:	7803      	ldrb	r3, [r0, #0]
 8010ada:	b11b      	cbz	r3, 8010ae4 <rcl_clock_get_now+0x10>
 8010adc:	68c3      	ldr	r3, [r0, #12]
 8010ade:	b10b      	cbz	r3, 8010ae4 <rcl_clock_get_now+0x10>
 8010ae0:	6900      	ldr	r0, [r0, #16]
 8010ae2:	4718      	bx	r3
 8010ae4:	2001      	movs	r0, #1
 8010ae6:	4770      	bx	lr
 8010ae8:	200b      	movs	r0, #11
 8010aea:	4770      	bx	lr

08010aec <rcl_timer_call>:
 8010aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010af0:	b087      	sub	sp, #28
 8010af2:	2800      	cmp	r0, #0
 8010af4:	d06c      	beq.n	8010bd0 <rcl_timer_call+0xe4>
 8010af6:	6803      	ldr	r3, [r0, #0]
 8010af8:	4604      	mov	r4, r0
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d062      	beq.n	8010bc4 <rcl_timer_call+0xd8>
 8010afe:	f3bf 8f5b 	dmb	ish
 8010b02:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010b06:	f3bf 8f5b 	dmb	ish
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d14f      	bne.n	8010bae <rcl_timer_call+0xc2>
 8010b0e:	6803      	ldr	r3, [r0, #0]
 8010b10:	a904      	add	r1, sp, #16
 8010b12:	6818      	ldr	r0, [r3, #0]
 8010b14:	f7ff ffde 	bl	8010ad4 <rcl_clock_get_now>
 8010b18:	4605      	mov	r5, r0
 8010b1a:	2800      	cmp	r0, #0
 8010b1c:	d149      	bne.n	8010bb2 <rcl_timer_call+0xc6>
 8010b1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	db49      	blt.n	8010bba <rcl_timer_call+0xce>
 8010b26:	2605      	movs	r6, #5
 8010b28:	6820      	ldr	r0, [r4, #0]
 8010b2a:	9600      	str	r6, [sp, #0]
 8010b2c:	3020      	adds	r0, #32
 8010b2e:	f001 fd23 	bl	8012578 <__atomic_exchange_8>
 8010b32:	6823      	ldr	r3, [r4, #0]
 8010b34:	4680      	mov	r8, r0
 8010b36:	f3bf 8f5b 	dmb	ish
 8010b3a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8010b3e:	f3bf 8f5b 	dmb	ish
 8010b42:	6820      	ldr	r0, [r4, #0]
 8010b44:	4689      	mov	r9, r1
 8010b46:	4631      	mov	r1, r6
 8010b48:	3028      	adds	r0, #40	@ 0x28
 8010b4a:	f001 fca9 	bl	80124a0 <__atomic_load_8>
 8010b4e:	460f      	mov	r7, r1
 8010b50:	4631      	mov	r1, r6
 8010b52:	4606      	mov	r6, r0
 8010b54:	6820      	ldr	r0, [r4, #0]
 8010b56:	3018      	adds	r0, #24
 8010b58:	f001 fca2 	bl	80124a0 <__atomic_load_8>
 8010b5c:	4602      	mov	r2, r0
 8010b5e:	9804      	ldr	r0, [sp, #16]
 8010b60:	460b      	mov	r3, r1
 8010b62:	18b6      	adds	r6, r6, r2
 8010b64:	f8dd c014 	ldr.w	ip, [sp, #20]
 8010b68:	4692      	mov	sl, r2
 8010b6a:	eb47 0701 	adc.w	r7, r7, r1
 8010b6e:	4286      	cmp	r6, r0
 8010b70:	eb77 010c 	sbcs.w	r1, r7, ip
 8010b74:	da04      	bge.n	8010b80 <rcl_timer_call+0x94>
 8010b76:	ea53 0102 	orrs.w	r1, r3, r2
 8010b7a:	d12e      	bne.n	8010bda <rcl_timer_call+0xee>
 8010b7c:	4606      	mov	r6, r0
 8010b7e:	4667      	mov	r7, ip
 8010b80:	6820      	ldr	r0, [r4, #0]
 8010b82:	2105      	movs	r1, #5
 8010b84:	4632      	mov	r2, r6
 8010b86:	463b      	mov	r3, r7
 8010b88:	3028      	adds	r0, #40	@ 0x28
 8010b8a:	9100      	str	r1, [sp, #0]
 8010b8c:	f001 fcbe 	bl	801250c <__atomic_store_8>
 8010b90:	f1bb 0f00 	cmp.w	fp, #0
 8010b94:	d00d      	beq.n	8010bb2 <rcl_timer_call+0xc6>
 8010b96:	9a04      	ldr	r2, [sp, #16]
 8010b98:	4620      	mov	r0, r4
 8010b9a:	9b05      	ldr	r3, [sp, #20]
 8010b9c:	ebb2 0208 	subs.w	r2, r2, r8
 8010ba0:	eb63 0309 	sbc.w	r3, r3, r9
 8010ba4:	47d8      	blx	fp
 8010ba6:	4628      	mov	r0, r5
 8010ba8:	b007      	add	sp, #28
 8010baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bae:	f240 3521 	movw	r5, #801	@ 0x321
 8010bb2:	4628      	mov	r0, r5
 8010bb4:	b007      	add	sp, #28
 8010bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bba:	2501      	movs	r5, #1
 8010bbc:	4628      	mov	r0, r5
 8010bbe:	b007      	add	sp, #28
 8010bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bc4:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8010bc8:	4628      	mov	r0, r5
 8010bca:	b007      	add	sp, #28
 8010bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bd0:	250b      	movs	r5, #11
 8010bd2:	4628      	mov	r0, r5
 8010bd4:	b007      	add	sp, #28
 8010bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bda:	1b80      	subs	r0, r0, r6
 8010bdc:	eb6c 0107 	sbc.w	r1, ip, r7
 8010be0:	3801      	subs	r0, #1
 8010be2:	f161 0100 	sbc.w	r1, r1, #0
 8010be6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010bea:	f7ef fbe1 	bl	80003b0 <__aeabi_ldivmod>
 8010bee:	9b02      	ldr	r3, [sp, #8]
 8010bf0:	3001      	adds	r0, #1
 8010bf2:	f141 0100 	adc.w	r1, r1, #0
 8010bf6:	fb00 f303 	mul.w	r3, r0, r3
 8010bfa:	fb01 330a 	mla	r3, r1, sl, r3
 8010bfe:	fba0 0a0a 	umull	r0, sl, r0, sl
 8010c02:	1986      	adds	r6, r0, r6
 8010c04:	4453      	add	r3, sl
 8010c06:	eb43 0707 	adc.w	r7, r3, r7
 8010c0a:	e7b9      	b.n	8010b80 <rcl_timer_call+0x94>

08010c0c <rcl_timer_is_ready>:
 8010c0c:	b570      	push	{r4, r5, r6, lr}
 8010c0e:	b082      	sub	sp, #8
 8010c10:	b380      	cbz	r0, 8010c74 <rcl_timer_is_ready+0x68>
 8010c12:	6803      	ldr	r3, [r0, #0]
 8010c14:	4604      	mov	r4, r0
 8010c16:	b38b      	cbz	r3, 8010c7c <rcl_timer_is_ready+0x70>
 8010c18:	460d      	mov	r5, r1
 8010c1a:	b359      	cbz	r1, 8010c74 <rcl_timer_is_ready+0x68>
 8010c1c:	f3bf 8f5b 	dmb	ish
 8010c20:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010c24:	f3bf 8f5b 	dmb	ish
 8010c28:	b953      	cbnz	r3, 8010c40 <rcl_timer_is_ready+0x34>
 8010c2a:	6803      	ldr	r3, [r0, #0]
 8010c2c:	4669      	mov	r1, sp
 8010c2e:	6818      	ldr	r0, [r3, #0]
 8010c30:	f7ff ff50 	bl	8010ad4 <rcl_clock_get_now>
 8010c34:	4606      	mov	r6, r0
 8010c36:	b148      	cbz	r0, 8010c4c <rcl_timer_is_ready+0x40>
 8010c38:	f240 3321 	movw	r3, #801	@ 0x321
 8010c3c:	4298      	cmp	r0, r3
 8010c3e:	d102      	bne.n	8010c46 <rcl_timer_is_ready+0x3a>
 8010c40:	2300      	movs	r3, #0
 8010c42:	461e      	mov	r6, r3
 8010c44:	702b      	strb	r3, [r5, #0]
 8010c46:	4630      	mov	r0, r6
 8010c48:	b002      	add	sp, #8
 8010c4a:	bd70      	pop	{r4, r5, r6, pc}
 8010c4c:	6820      	ldr	r0, [r4, #0]
 8010c4e:	2105      	movs	r1, #5
 8010c50:	3028      	adds	r0, #40	@ 0x28
 8010c52:	f001 fc25 	bl	80124a0 <__atomic_load_8>
 8010c56:	9b00      	ldr	r3, [sp, #0]
 8010c58:	1ac0      	subs	r0, r0, r3
 8010c5a:	9b01      	ldr	r3, [sp, #4]
 8010c5c:	eb61 0103 	sbc.w	r1, r1, r3
 8010c60:	2801      	cmp	r0, #1
 8010c62:	4630      	mov	r0, r6
 8010c64:	f171 0300 	sbcs.w	r3, r1, #0
 8010c68:	bfb4      	ite	lt
 8010c6a:	2301      	movlt	r3, #1
 8010c6c:	2300      	movge	r3, #0
 8010c6e:	702b      	strb	r3, [r5, #0]
 8010c70:	b002      	add	sp, #8
 8010c72:	bd70      	pop	{r4, r5, r6, pc}
 8010c74:	260b      	movs	r6, #11
 8010c76:	4630      	mov	r0, r6
 8010c78:	b002      	add	sp, #8
 8010c7a:	bd70      	pop	{r4, r5, r6, pc}
 8010c7c:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8010c80:	e7e1      	b.n	8010c46 <rcl_timer_is_ready+0x3a>
 8010c82:	bf00      	nop

08010c84 <rcl_timer_get_time_until_next_call>:
 8010c84:	b570      	push	{r4, r5, r6, lr}
 8010c86:	b082      	sub	sp, #8
 8010c88:	b330      	cbz	r0, 8010cd8 <rcl_timer_get_time_until_next_call+0x54>
 8010c8a:	6803      	ldr	r3, [r0, #0]
 8010c8c:	4604      	mov	r4, r0
 8010c8e:	b33b      	cbz	r3, 8010ce0 <rcl_timer_get_time_until_next_call+0x5c>
 8010c90:	460d      	mov	r5, r1
 8010c92:	b309      	cbz	r1, 8010cd8 <rcl_timer_get_time_until_next_call+0x54>
 8010c94:	f3bf 8f5b 	dmb	ish
 8010c98:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010c9c:	f3bf 8f5b 	dmb	ish
 8010ca0:	b9ab      	cbnz	r3, 8010cce <rcl_timer_get_time_until_next_call+0x4a>
 8010ca2:	6803      	ldr	r3, [r0, #0]
 8010ca4:	4669      	mov	r1, sp
 8010ca6:	6818      	ldr	r0, [r3, #0]
 8010ca8:	f7ff ff14 	bl	8010ad4 <rcl_clock_get_now>
 8010cac:	4606      	mov	r6, r0
 8010cae:	b958      	cbnz	r0, 8010cc8 <rcl_timer_get_time_until_next_call+0x44>
 8010cb0:	6820      	ldr	r0, [r4, #0]
 8010cb2:	2105      	movs	r1, #5
 8010cb4:	3028      	adds	r0, #40	@ 0x28
 8010cb6:	f001 fbf3 	bl	80124a0 <__atomic_load_8>
 8010cba:	9b00      	ldr	r3, [sp, #0]
 8010cbc:	1ac0      	subs	r0, r0, r3
 8010cbe:	9b01      	ldr	r3, [sp, #4]
 8010cc0:	eb61 0103 	sbc.w	r1, r1, r3
 8010cc4:	6028      	str	r0, [r5, #0]
 8010cc6:	6069      	str	r1, [r5, #4]
 8010cc8:	4630      	mov	r0, r6
 8010cca:	b002      	add	sp, #8
 8010ccc:	bd70      	pop	{r4, r5, r6, pc}
 8010cce:	f240 3621 	movw	r6, #801	@ 0x321
 8010cd2:	4630      	mov	r0, r6
 8010cd4:	b002      	add	sp, #8
 8010cd6:	bd70      	pop	{r4, r5, r6, pc}
 8010cd8:	260b      	movs	r6, #11
 8010cda:	4630      	mov	r0, r6
 8010cdc:	b002      	add	sp, #8
 8010cde:	bd70      	pop	{r4, r5, r6, pc}
 8010ce0:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8010ce4:	e7f0      	b.n	8010cc8 <rcl_timer_get_time_until_next_call+0x44>
 8010ce6:	bf00      	nop

08010ce8 <rcl_timer_get_guard_condition>:
 8010ce8:	b130      	cbz	r0, 8010cf8 <rcl_timer_get_guard_condition+0x10>
 8010cea:	6800      	ldr	r0, [r0, #0]
 8010cec:	b120      	cbz	r0, 8010cf8 <rcl_timer_get_guard_condition+0x10>
 8010cee:	68c3      	ldr	r3, [r0, #12]
 8010cf0:	b10b      	cbz	r3, 8010cf6 <rcl_timer_get_guard_condition+0xe>
 8010cf2:	3008      	adds	r0, #8
 8010cf4:	4770      	bx	lr
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	4770      	bx	lr
 8010cfa:	bf00      	nop

08010cfc <rcl_validate_enclave_name_with_size>:
 8010cfc:	2800      	cmp	r0, #0
 8010cfe:	d049      	beq.n	8010d94 <rcl_validate_enclave_name_with_size+0x98>
 8010d00:	b570      	push	{r4, r5, r6, lr}
 8010d02:	4615      	mov	r5, r2
 8010d04:	b0c2      	sub	sp, #264	@ 0x108
 8010d06:	b19a      	cbz	r2, 8010d30 <rcl_validate_enclave_name_with_size+0x34>
 8010d08:	461e      	mov	r6, r3
 8010d0a:	466a      	mov	r2, sp
 8010d0c:	ab01      	add	r3, sp, #4
 8010d0e:	460c      	mov	r4, r1
 8010d10:	f002 f806 	bl	8012d20 <rmw_validate_namespace_with_size>
 8010d14:	4684      	mov	ip, r0
 8010d16:	b9b8      	cbnz	r0, 8010d48 <rcl_validate_enclave_name_with_size+0x4c>
 8010d18:	9900      	ldr	r1, [sp, #0]
 8010d1a:	b171      	cbz	r1, 8010d3a <rcl_validate_enclave_name_with_size+0x3e>
 8010d1c:	2907      	cmp	r1, #7
 8010d1e:	d019      	beq.n	8010d54 <rcl_validate_enclave_name_with_size+0x58>
 8010d20:	1e4b      	subs	r3, r1, #1
 8010d22:	2b05      	cmp	r3, #5
 8010d24:	d83a      	bhi.n	8010d9c <rcl_validate_enclave_name_with_size+0xa0>
 8010d26:	e8df f003 	tbb	[pc, r3]
 8010d2a:	2926      	.short	0x2926
 8010d2c:	1d322f2c 	.word	0x1d322f2c
 8010d30:	f04f 0c0b 	mov.w	ip, #11
 8010d34:	4660      	mov	r0, ip
 8010d36:	b042      	add	sp, #264	@ 0x108
 8010d38:	bd70      	pop	{r4, r5, r6, pc}
 8010d3a:	2907      	cmp	r1, #7
 8010d3c:	d00a      	beq.n	8010d54 <rcl_validate_enclave_name_with_size+0x58>
 8010d3e:	2300      	movs	r3, #0
 8010d40:	4660      	mov	r0, ip
 8010d42:	602b      	str	r3, [r5, #0]
 8010d44:	b042      	add	sp, #264	@ 0x108
 8010d46:	bd70      	pop	{r4, r5, r6, pc}
 8010d48:	f008 f9a4 	bl	8019094 <rcl_convert_rmw_ret_to_rcl_ret>
 8010d4c:	4684      	mov	ip, r0
 8010d4e:	4660      	mov	r0, ip
 8010d50:	b042      	add	sp, #264	@ 0x108
 8010d52:	bd70      	pop	{r4, r5, r6, pc}
 8010d54:	2cff      	cmp	r4, #255	@ 0xff
 8010d56:	d9f2      	bls.n	8010d3e <rcl_validate_enclave_name_with_size+0x42>
 8010d58:	6029      	str	r1, [r5, #0]
 8010d5a:	2e00      	cmp	r6, #0
 8010d5c:	d0ea      	beq.n	8010d34 <rcl_validate_enclave_name_with_size+0x38>
 8010d5e:	23fe      	movs	r3, #254	@ 0xfe
 8010d60:	6033      	str	r3, [r6, #0]
 8010d62:	e7e7      	b.n	8010d34 <rcl_validate_enclave_name_with_size+0x38>
 8010d64:	2306      	movs	r3, #6
 8010d66:	602b      	str	r3, [r5, #0]
 8010d68:	2e00      	cmp	r6, #0
 8010d6a:	d0e3      	beq.n	8010d34 <rcl_validate_enclave_name_with_size+0x38>
 8010d6c:	9b01      	ldr	r3, [sp, #4]
 8010d6e:	4660      	mov	r0, ip
 8010d70:	6033      	str	r3, [r6, #0]
 8010d72:	b042      	add	sp, #264	@ 0x108
 8010d74:	bd70      	pop	{r4, r5, r6, pc}
 8010d76:	2301      	movs	r3, #1
 8010d78:	602b      	str	r3, [r5, #0]
 8010d7a:	e7f5      	b.n	8010d68 <rcl_validate_enclave_name_with_size+0x6c>
 8010d7c:	2302      	movs	r3, #2
 8010d7e:	602b      	str	r3, [r5, #0]
 8010d80:	e7f2      	b.n	8010d68 <rcl_validate_enclave_name_with_size+0x6c>
 8010d82:	2303      	movs	r3, #3
 8010d84:	602b      	str	r3, [r5, #0]
 8010d86:	e7ef      	b.n	8010d68 <rcl_validate_enclave_name_with_size+0x6c>
 8010d88:	2304      	movs	r3, #4
 8010d8a:	602b      	str	r3, [r5, #0]
 8010d8c:	e7ec      	b.n	8010d68 <rcl_validate_enclave_name_with_size+0x6c>
 8010d8e:	2305      	movs	r3, #5
 8010d90:	602b      	str	r3, [r5, #0]
 8010d92:	e7e9      	b.n	8010d68 <rcl_validate_enclave_name_with_size+0x6c>
 8010d94:	f04f 0c0b 	mov.w	ip, #11
 8010d98:	4660      	mov	r0, ip
 8010d9a:	4770      	bx	lr
 8010d9c:	460b      	mov	r3, r1
 8010d9e:	4a04      	ldr	r2, [pc, #16]	@ (8010db0 <rcl_validate_enclave_name_with_size+0xb4>)
 8010da0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010da4:	a802      	add	r0, sp, #8
 8010da6:	f001 fd33 	bl	8012810 <rcutils_snprintf>
 8010daa:	f04f 0c01 	mov.w	ip, #1
 8010dae:	e7c1      	b.n	8010d34 <rcl_validate_enclave_name_with_size+0x38>
 8010db0:	0801c6c8 	.word	0x0801c6c8

08010db4 <rcl_validate_enclave_name>:
 8010db4:	b168      	cbz	r0, 8010dd2 <rcl_validate_enclave_name+0x1e>
 8010db6:	b570      	push	{r4, r5, r6, lr}
 8010db8:	460d      	mov	r5, r1
 8010dba:	4616      	mov	r6, r2
 8010dbc:	4604      	mov	r4, r0
 8010dbe:	f7ef fa99 	bl	80002f4 <strlen>
 8010dc2:	4633      	mov	r3, r6
 8010dc4:	4601      	mov	r1, r0
 8010dc6:	462a      	mov	r2, r5
 8010dc8:	4620      	mov	r0, r4
 8010dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010dce:	f7ff bf95 	b.w	8010cfc <rcl_validate_enclave_name_with_size>
 8010dd2:	200b      	movs	r0, #11
 8010dd4:	4770      	bx	lr
 8010dd6:	bf00      	nop

08010dd8 <rcl_get_zero_initialized_wait_set>:
 8010dd8:	b510      	push	{r4, lr}
 8010dda:	4c08      	ldr	r4, [pc, #32]	@ (8010dfc <rcl_get_zero_initialized_wait_set+0x24>)
 8010ddc:	4686      	mov	lr, r0
 8010dde:	4684      	mov	ip, r0
 8010de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010de2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010de6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010de8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010dec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010dee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010df2:	6823      	ldr	r3, [r4, #0]
 8010df4:	4670      	mov	r0, lr
 8010df6:	f8cc 3000 	str.w	r3, [ip]
 8010dfa:	bd10      	pop	{r4, pc}
 8010dfc:	0801c728 	.word	0x0801c728

08010e00 <rcl_wait_set_is_valid>:
 8010e00:	b118      	cbz	r0, 8010e0a <rcl_wait_set_is_valid+0xa>
 8010e02:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8010e04:	3800      	subs	r0, #0
 8010e06:	bf18      	it	ne
 8010e08:	2001      	movne	r0, #1
 8010e0a:	4770      	bx	lr

08010e0c <rcl_wait_set_fini>:
 8010e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e10:	b082      	sub	sp, #8
 8010e12:	2800      	cmp	r0, #0
 8010e14:	f000 8095 	beq.w	8010f42 <rcl_wait_set_fini+0x136>
 8010e18:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8010e1a:	4604      	mov	r4, r0
 8010e1c:	2e00      	cmp	r6, #0
 8010e1e:	f000 808c 	beq.w	8010f3a <rcl_wait_set_fini+0x12e>
 8010e22:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8010e24:	f003 f942 	bl	80140ac <rmw_destroy_wait_set>
 8010e28:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010e2a:	1e06      	subs	r6, r0, #0
 8010e2c:	bf18      	it	ne
 8010e2e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8010e32:	2d00      	cmp	r5, #0
 8010e34:	f000 8081 	beq.w	8010f3a <rcl_wait_set_fini+0x12e>
 8010e38:	2700      	movs	r7, #0
 8010e3a:	6820      	ldr	r0, [r4, #0]
 8010e3c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8010e40:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010e42:	6067      	str	r7, [r4, #4]
 8010e44:	602f      	str	r7, [r5, #0]
 8010e46:	b120      	cbz	r0, 8010e52 <rcl_wait_set_fini+0x46>
 8010e48:	9101      	str	r1, [sp, #4]
 8010e4a:	47c0      	blx	r8
 8010e4c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010e4e:	9901      	ldr	r1, [sp, #4]
 8010e50:	6027      	str	r7, [r4, #0]
 8010e52:	68a8      	ldr	r0, [r5, #8]
 8010e54:	b120      	cbz	r0, 8010e60 <rcl_wait_set_fini+0x54>
 8010e56:	47c0      	blx	r8
 8010e58:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8010e60:	f04f 0800 	mov.w	r8, #0
 8010e64:	68a0      	ldr	r0, [r4, #8]
 8010e66:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8010e68:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010e6a:	f8c4 800c 	str.w	r8, [r4, #12]
 8010e6e:	f8c5 800c 	str.w	r8, [r5, #12]
 8010e72:	b128      	cbz	r0, 8010e80 <rcl_wait_set_fini+0x74>
 8010e74:	47b8      	blx	r7
 8010e76:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010e78:	f8c4 8008 	str.w	r8, [r4, #8]
 8010e7c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8010e7e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010e80:	f04f 0800 	mov.w	r8, #0
 8010e84:	6968      	ldr	r0, [r5, #20]
 8010e86:	f8c5 8010 	str.w	r8, [r5, #16]
 8010e8a:	b128      	cbz	r0, 8010e98 <rcl_wait_set_fini+0x8c>
 8010e8c:	47b8      	blx	r7
 8010e8e:	f8c5 8014 	str.w	r8, [r5, #20]
 8010e92:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010e94:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8010e96:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010e98:	f04f 0800 	mov.w	r8, #0
 8010e9c:	6920      	ldr	r0, [r4, #16]
 8010e9e:	f8c4 8014 	str.w	r8, [r4, #20]
 8010ea2:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8010ea6:	b128      	cbz	r0, 8010eb4 <rcl_wait_set_fini+0xa8>
 8010ea8:	47b8      	blx	r7
 8010eaa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010eac:	f8c4 8010 	str.w	r8, [r4, #16]
 8010eb0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8010eb2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010eb4:	f04f 0800 	mov.w	r8, #0
 8010eb8:	69a0      	ldr	r0, [r4, #24]
 8010eba:	f8c4 801c 	str.w	r8, [r4, #28]
 8010ebe:	f8c5 8018 	str.w	r8, [r5, #24]
 8010ec2:	b128      	cbz	r0, 8010ed0 <rcl_wait_set_fini+0xc4>
 8010ec4:	9101      	str	r1, [sp, #4]
 8010ec6:	47b8      	blx	r7
 8010ec8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010eca:	9901      	ldr	r1, [sp, #4]
 8010ecc:	f8c4 8018 	str.w	r8, [r4, #24]
 8010ed0:	6a28      	ldr	r0, [r5, #32]
 8010ed2:	b120      	cbz	r0, 8010ede <rcl_wait_set_fini+0xd2>
 8010ed4:	47b8      	blx	r7
 8010ed6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010ed8:	2300      	movs	r3, #0
 8010eda:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8010ede:	2700      	movs	r7, #0
 8010ee0:	6a20      	ldr	r0, [r4, #32]
 8010ee2:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8010ee6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010ee8:	6267      	str	r7, [r4, #36]	@ 0x24
 8010eea:	626f      	str	r7, [r5, #36]	@ 0x24
 8010eec:	b120      	cbz	r0, 8010ef8 <rcl_wait_set_fini+0xec>
 8010eee:	9101      	str	r1, [sp, #4]
 8010ef0:	47c0      	blx	r8
 8010ef2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010ef4:	9901      	ldr	r1, [sp, #4]
 8010ef6:	6227      	str	r7, [r4, #32]
 8010ef8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8010efa:	b120      	cbz	r0, 8010f06 <rcl_wait_set_fini+0xfa>
 8010efc:	47c0      	blx	r8
 8010efe:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010f00:	2300      	movs	r3, #0
 8010f02:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8010f06:	2700      	movs	r7, #0
 8010f08:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8010f0a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8010f0e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010f10:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8010f12:	632f      	str	r7, [r5, #48]	@ 0x30
 8010f14:	b120      	cbz	r0, 8010f20 <rcl_wait_set_fini+0x114>
 8010f16:	9101      	str	r1, [sp, #4]
 8010f18:	47c0      	blx	r8
 8010f1a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010f1c:	9901      	ldr	r1, [sp, #4]
 8010f1e:	62a7      	str	r7, [r4, #40]	@ 0x28
 8010f20:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8010f22:	b120      	cbz	r0, 8010f2e <rcl_wait_set_fini+0x122>
 8010f24:	47c0      	blx	r8
 8010f26:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010f28:	2300      	movs	r3, #0
 8010f2a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8010f2e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8010f30:	4628      	mov	r0, r5
 8010f32:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010f34:	4798      	blx	r3
 8010f36:	2300      	movs	r3, #0
 8010f38:	6323      	str	r3, [r4, #48]	@ 0x30
 8010f3a:	4630      	mov	r0, r6
 8010f3c:	b002      	add	sp, #8
 8010f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f42:	260b      	movs	r6, #11
 8010f44:	4630      	mov	r0, r6
 8010f46:	b002      	add	sp, #8
 8010f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010f4c <rcl_wait_set_add_subscription>:
 8010f4c:	b318      	cbz	r0, 8010f96 <rcl_wait_set_add_subscription+0x4a>
 8010f4e:	b538      	push	{r3, r4, r5, lr}
 8010f50:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010f52:	4604      	mov	r4, r0
 8010f54:	b30b      	cbz	r3, 8010f9a <rcl_wait_set_add_subscription+0x4e>
 8010f56:	b319      	cbz	r1, 8010fa0 <rcl_wait_set_add_subscription+0x54>
 8010f58:	681d      	ldr	r5, [r3, #0]
 8010f5a:	6840      	ldr	r0, [r0, #4]
 8010f5c:	4285      	cmp	r5, r0
 8010f5e:	d217      	bcs.n	8010f90 <rcl_wait_set_add_subscription+0x44>
 8010f60:	1c68      	adds	r0, r5, #1
 8010f62:	6018      	str	r0, [r3, #0]
 8010f64:	6823      	ldr	r3, [r4, #0]
 8010f66:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8010f6a:	b102      	cbz	r2, 8010f6e <rcl_wait_set_add_subscription+0x22>
 8010f6c:	6015      	str	r5, [r2, #0]
 8010f6e:	4608      	mov	r0, r1
 8010f70:	f7ff fcfe 	bl	8010970 <rcl_subscription_get_rmw_handle>
 8010f74:	b150      	cbz	r0, 8010f8c <rcl_wait_set_add_subscription+0x40>
 8010f76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010f78:	6842      	ldr	r2, [r0, #4]
 8010f7a:	2000      	movs	r0, #0
 8010f7c:	689b      	ldr	r3, [r3, #8]
 8010f7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010f82:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010f84:	6853      	ldr	r3, [r2, #4]
 8010f86:	3301      	adds	r3, #1
 8010f88:	6053      	str	r3, [r2, #4]
 8010f8a:	bd38      	pop	{r3, r4, r5, pc}
 8010f8c:	2001      	movs	r0, #1
 8010f8e:	bd38      	pop	{r3, r4, r5, pc}
 8010f90:	f240 3086 	movw	r0, #902	@ 0x386
 8010f94:	bd38      	pop	{r3, r4, r5, pc}
 8010f96:	200b      	movs	r0, #11
 8010f98:	4770      	bx	lr
 8010f9a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010f9e:	bd38      	pop	{r3, r4, r5, pc}
 8010fa0:	200b      	movs	r0, #11
 8010fa2:	bd38      	pop	{r3, r4, r5, pc}

08010fa4 <rcl_wait_set_clear>:
 8010fa4:	2800      	cmp	r0, #0
 8010fa6:	d074      	beq.n	8011092 <rcl_wait_set_clear+0xee>
 8010fa8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010faa:	b510      	push	{r4, lr}
 8010fac:	4604      	mov	r4, r0
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d071      	beq.n	8011096 <rcl_wait_set_clear+0xf2>
 8010fb2:	6800      	ldr	r0, [r0, #0]
 8010fb4:	b138      	cbz	r0, 8010fc6 <rcl_wait_set_clear+0x22>
 8010fb6:	6862      	ldr	r2, [r4, #4]
 8010fb8:	2100      	movs	r1, #0
 8010fba:	0092      	lsls	r2, r2, #2
 8010fbc:	f00a f9f0 	bl	801b3a0 <memset>
 8010fc0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	601a      	str	r2, [r3, #0]
 8010fc6:	68a0      	ldr	r0, [r4, #8]
 8010fc8:	b138      	cbz	r0, 8010fda <rcl_wait_set_clear+0x36>
 8010fca:	68e2      	ldr	r2, [r4, #12]
 8010fcc:	2100      	movs	r1, #0
 8010fce:	0092      	lsls	r2, r2, #2
 8010fd0:	f00a f9e6 	bl	801b3a0 <memset>
 8010fd4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	60da      	str	r2, [r3, #12]
 8010fda:	69a0      	ldr	r0, [r4, #24]
 8010fdc:	b138      	cbz	r0, 8010fee <rcl_wait_set_clear+0x4a>
 8010fde:	69e2      	ldr	r2, [r4, #28]
 8010fe0:	2100      	movs	r1, #0
 8010fe2:	0092      	lsls	r2, r2, #2
 8010fe4:	f00a f9dc 	bl	801b3a0 <memset>
 8010fe8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010fea:	2200      	movs	r2, #0
 8010fec:	619a      	str	r2, [r3, #24]
 8010fee:	6a20      	ldr	r0, [r4, #32]
 8010ff0:	b138      	cbz	r0, 8011002 <rcl_wait_set_clear+0x5e>
 8010ff2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8010ff4:	2100      	movs	r1, #0
 8010ff6:	0092      	lsls	r2, r2, #2
 8010ff8:	f00a f9d2 	bl	801b3a0 <memset>
 8010ffc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010ffe:	2200      	movs	r2, #0
 8011000:	625a      	str	r2, [r3, #36]	@ 0x24
 8011002:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011004:	b138      	cbz	r0, 8011016 <rcl_wait_set_clear+0x72>
 8011006:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011008:	2100      	movs	r1, #0
 801100a:	0092      	lsls	r2, r2, #2
 801100c:	f00a f9c8 	bl	801b3a0 <memset>
 8011010:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011012:	2200      	movs	r2, #0
 8011014:	631a      	str	r2, [r3, #48]	@ 0x30
 8011016:	6920      	ldr	r0, [r4, #16]
 8011018:	b138      	cbz	r0, 801102a <rcl_wait_set_clear+0x86>
 801101a:	6962      	ldr	r2, [r4, #20]
 801101c:	2100      	movs	r1, #0
 801101e:	0092      	lsls	r2, r2, #2
 8011020:	f00a f9be 	bl	801b3a0 <memset>
 8011024:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011026:	2200      	movs	r2, #0
 8011028:	641a      	str	r2, [r3, #64]	@ 0x40
 801102a:	6898      	ldr	r0, [r3, #8]
 801102c:	b138      	cbz	r0, 801103e <rcl_wait_set_clear+0x9a>
 801102e:	685a      	ldr	r2, [r3, #4]
 8011030:	2100      	movs	r1, #0
 8011032:	0092      	lsls	r2, r2, #2
 8011034:	f00a f9b4 	bl	801b3a0 <memset>
 8011038:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801103a:	2200      	movs	r2, #0
 801103c:	605a      	str	r2, [r3, #4]
 801103e:	6958      	ldr	r0, [r3, #20]
 8011040:	b138      	cbz	r0, 8011052 <rcl_wait_set_clear+0xae>
 8011042:	691a      	ldr	r2, [r3, #16]
 8011044:	2100      	movs	r1, #0
 8011046:	0092      	lsls	r2, r2, #2
 8011048:	f00a f9aa 	bl	801b3a0 <memset>
 801104c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801104e:	2200      	movs	r2, #0
 8011050:	611a      	str	r2, [r3, #16]
 8011052:	6a18      	ldr	r0, [r3, #32]
 8011054:	b138      	cbz	r0, 8011066 <rcl_wait_set_clear+0xc2>
 8011056:	69da      	ldr	r2, [r3, #28]
 8011058:	2100      	movs	r1, #0
 801105a:	0092      	lsls	r2, r2, #2
 801105c:	f00a f9a0 	bl	801b3a0 <memset>
 8011060:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011062:	2200      	movs	r2, #0
 8011064:	61da      	str	r2, [r3, #28]
 8011066:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8011068:	b138      	cbz	r0, 801107a <rcl_wait_set_clear+0xd6>
 801106a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801106c:	2100      	movs	r1, #0
 801106e:	0092      	lsls	r2, r2, #2
 8011070:	f00a f996 	bl	801b3a0 <memset>
 8011074:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011076:	2200      	movs	r2, #0
 8011078:	629a      	str	r2, [r3, #40]	@ 0x28
 801107a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801107c:	b140      	cbz	r0, 8011090 <rcl_wait_set_clear+0xec>
 801107e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011080:	2100      	movs	r1, #0
 8011082:	0092      	lsls	r2, r2, #2
 8011084:	f00a f98c 	bl	801b3a0 <memset>
 8011088:	2300      	movs	r3, #0
 801108a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801108c:	4618      	mov	r0, r3
 801108e:	6353      	str	r3, [r2, #52]	@ 0x34
 8011090:	bd10      	pop	{r4, pc}
 8011092:	200b      	movs	r0, #11
 8011094:	4770      	bx	lr
 8011096:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801109a:	bd10      	pop	{r4, pc}

0801109c <rcl_wait_set_resize>:
 801109c:	2800      	cmp	r0, #0
 801109e:	f000 8180 	beq.w	80113a2 <rcl_wait_set_resize+0x306>
 80110a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110a6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80110a8:	b083      	sub	sp, #12
 80110aa:	4605      	mov	r5, r0
 80110ac:	2c00      	cmp	r4, #0
 80110ae:	f000 817a 	beq.w	80113a6 <rcl_wait_set_resize+0x30a>
 80110b2:	f04f 0900 	mov.w	r9, #0
 80110b6:	461f      	mov	r7, r3
 80110b8:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80110bc:	4688      	mov	r8, r1
 80110be:	4616      	mov	r6, r2
 80110c0:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80110c4:	f8c0 9004 	str.w	r9, [r0, #4]
 80110c8:	f8c4 9000 	str.w	r9, [r4]
 80110cc:	2900      	cmp	r1, #0
 80110ce:	f000 80bf 	beq.w	8011250 <rcl_wait_set_resize+0x1b4>
 80110d2:	008c      	lsls	r4, r1, #2
 80110d4:	4652      	mov	r2, sl
 80110d6:	6800      	ldr	r0, [r0, #0]
 80110d8:	4621      	mov	r1, r4
 80110da:	9301      	str	r3, [sp, #4]
 80110dc:	4798      	blx	r3
 80110de:	9b01      	ldr	r3, [sp, #4]
 80110e0:	6028      	str	r0, [r5, #0]
 80110e2:	2800      	cmp	r0, #0
 80110e4:	f000 80f6 	beq.w	80112d4 <rcl_wait_set_resize+0x238>
 80110e8:	4622      	mov	r2, r4
 80110ea:	4649      	mov	r1, r9
 80110ec:	9301      	str	r3, [sp, #4]
 80110ee:	f00a f957 	bl	801b3a0 <memset>
 80110f2:	f8c5 8004 	str.w	r8, [r5, #4]
 80110f6:	4652      	mov	r2, sl
 80110f8:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80110fc:	4621      	mov	r1, r4
 80110fe:	9b01      	ldr	r3, [sp, #4]
 8011100:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8011104:	f8c8 9004 	str.w	r9, [r8, #4]
 8011108:	4798      	blx	r3
 801110a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801110c:	f8c8 0008 	str.w	r0, [r8, #8]
 8011110:	689b      	ldr	r3, [r3, #8]
 8011112:	2b00      	cmp	r3, #0
 8011114:	f000 814a 	beq.w	80113ac <rcl_wait_set_resize+0x310>
 8011118:	4622      	mov	r2, r4
 801111a:	4649      	mov	r1, r9
 801111c:	4618      	mov	r0, r3
 801111e:	f00a f93f 	bl	801b3a0 <memset>
 8011122:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011124:	f04f 0800 	mov.w	r8, #0
 8011128:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801112c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8011130:	f8c5 800c 	str.w	r8, [r5, #12]
 8011134:	f8c4 800c 	str.w	r8, [r4, #12]
 8011138:	2e00      	cmp	r6, #0
 801113a:	f040 809b 	bne.w	8011274 <rcl_wait_set_resize+0x1d8>
 801113e:	68a8      	ldr	r0, [r5, #8]
 8011140:	b128      	cbz	r0, 801114e <rcl_wait_set_resize+0xb2>
 8011142:	4649      	mov	r1, r9
 8011144:	4790      	blx	r2
 8011146:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011148:	60ae      	str	r6, [r5, #8]
 801114a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801114e:	f04f 0800 	mov.w	r8, #0
 8011152:	19f6      	adds	r6, r6, r7
 8011154:	f8c4 8010 	str.w	r8, [r4, #16]
 8011158:	f040 80a2 	bne.w	80112a0 <rcl_wait_set_resize+0x204>
 801115c:	6960      	ldr	r0, [r4, #20]
 801115e:	b130      	cbz	r0, 801116e <rcl_wait_set_resize+0xd2>
 8011160:	4649      	mov	r1, r9
 8011162:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8011164:	4798      	blx	r3
 8011166:	6166      	str	r6, [r4, #20]
 8011168:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801116a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801116e:	2600      	movs	r6, #0
 8011170:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8011174:	616e      	str	r6, [r5, #20]
 8011176:	6426      	str	r6, [r4, #64]	@ 0x40
 8011178:	2f00      	cmp	r7, #0
 801117a:	f040 80af 	bne.w	80112dc <rcl_wait_set_resize+0x240>
 801117e:	6928      	ldr	r0, [r5, #16]
 8011180:	b138      	cbz	r0, 8011192 <rcl_wait_set_resize+0xf6>
 8011182:	4649      	mov	r1, r9
 8011184:	47d0      	blx	sl
 8011186:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011188:	612f      	str	r7, [r5, #16]
 801118a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801118e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8011192:	2600      	movs	r6, #0
 8011194:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011196:	61ee      	str	r6, [r5, #28]
 8011198:	61a6      	str	r6, [r4, #24]
 801119a:	2b00      	cmp	r3, #0
 801119c:	f040 8093 	bne.w	80112c6 <rcl_wait_set_resize+0x22a>
 80111a0:	69a8      	ldr	r0, [r5, #24]
 80111a2:	b120      	cbz	r0, 80111ae <rcl_wait_set_resize+0x112>
 80111a4:	4649      	mov	r1, r9
 80111a6:	47d0      	blx	sl
 80111a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80111aa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80111ac:	61ab      	str	r3, [r5, #24]
 80111ae:	6a20      	ldr	r0, [r4, #32]
 80111b0:	b128      	cbz	r0, 80111be <rcl_wait_set_resize+0x122>
 80111b2:	4649      	mov	r1, r9
 80111b4:	47d0      	blx	sl
 80111b6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80111b8:	2300      	movs	r3, #0
 80111ba:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80111be:	2600      	movs	r6, #0
 80111c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80111c2:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80111c4:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80111c8:	626e      	str	r6, [r5, #36]	@ 0x24
 80111ca:	6266      	str	r6, [r4, #36]	@ 0x24
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	f000 8098 	beq.w	8011302 <rcl_wait_set_resize+0x266>
 80111d2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80111d6:	463a      	mov	r2, r7
 80111d8:	6a28      	ldr	r0, [r5, #32]
 80111da:	4651      	mov	r1, sl
 80111dc:	47c8      	blx	r9
 80111de:	6228      	str	r0, [r5, #32]
 80111e0:	2800      	cmp	r0, #0
 80111e2:	d077      	beq.n	80112d4 <rcl_wait_set_resize+0x238>
 80111e4:	4652      	mov	r2, sl
 80111e6:	4631      	mov	r1, r6
 80111e8:	f00a f8da 	bl	801b3a0 <memset>
 80111ec:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80111ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80111f0:	463a      	mov	r2, r7
 80111f2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80111f4:	4651      	mov	r1, sl
 80111f6:	626b      	str	r3, [r5, #36]	@ 0x24
 80111f8:	62a6      	str	r6, [r4, #40]	@ 0x28
 80111fa:	47c8      	blx	r9
 80111fc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80111fe:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8011200:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8011202:	2c00      	cmp	r4, #0
 8011204:	f000 80f2 	beq.w	80113ec <rcl_wait_set_resize+0x350>
 8011208:	4620      	mov	r0, r4
 801120a:	4652      	mov	r2, sl
 801120c:	4631      	mov	r1, r6
 801120e:	f00a f8c7 	bl	801b3a0 <memset>
 8011212:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011214:	2600      	movs	r6, #0
 8011216:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011218:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801121a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801121e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8011220:	6326      	str	r6, [r4, #48]	@ 0x30
 8011222:	2b00      	cmp	r3, #0
 8011224:	f040 8097 	bne.w	8011356 <rcl_wait_set_resize+0x2ba>
 8011228:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801122a:	b120      	cbz	r0, 8011236 <rcl_wait_set_resize+0x19a>
 801122c:	4639      	mov	r1, r7
 801122e:	47c0      	blx	r8
 8011230:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011232:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011234:	62ab      	str	r3, [r5, #40]	@ 0x28
 8011236:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8011238:	2800      	cmp	r0, #0
 801123a:	d04c      	beq.n	80112d6 <rcl_wait_set_resize+0x23a>
 801123c:	4639      	mov	r1, r7
 801123e:	47c0      	blx	r8
 8011240:	2300      	movs	r3, #0
 8011242:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8011244:	4618      	mov	r0, r3
 8011246:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 801124a:	b003      	add	sp, #12
 801124c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011250:	6800      	ldr	r0, [r0, #0]
 8011252:	b120      	cbz	r0, 801125e <rcl_wait_set_resize+0x1c2>
 8011254:	4651      	mov	r1, sl
 8011256:	47d8      	blx	fp
 8011258:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801125a:	f8c5 8000 	str.w	r8, [r5]
 801125e:	68a0      	ldr	r0, [r4, #8]
 8011260:	2800      	cmp	r0, #0
 8011262:	f43f af5f 	beq.w	8011124 <rcl_wait_set_resize+0x88>
 8011266:	4651      	mov	r1, sl
 8011268:	47d8      	blx	fp
 801126a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801126c:	2300      	movs	r3, #0
 801126e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8011272:	e757      	b.n	8011124 <rcl_wait_set_resize+0x88>
 8011274:	00b4      	lsls	r4, r6, #2
 8011276:	464a      	mov	r2, r9
 8011278:	68a8      	ldr	r0, [r5, #8]
 801127a:	4621      	mov	r1, r4
 801127c:	4798      	blx	r3
 801127e:	60a8      	str	r0, [r5, #8]
 8011280:	b340      	cbz	r0, 80112d4 <rcl_wait_set_resize+0x238>
 8011282:	4622      	mov	r2, r4
 8011284:	4641      	mov	r1, r8
 8011286:	f00a f88b 	bl	801b3a0 <memset>
 801128a:	f04f 0800 	mov.w	r8, #0
 801128e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011290:	60ee      	str	r6, [r5, #12]
 8011292:	19f6      	adds	r6, r6, r7
 8011294:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011298:	f8c4 8010 	str.w	r8, [r4, #16]
 801129c:	f43f af5e 	beq.w	801115c <rcl_wait_set_resize+0xc0>
 80112a0:	00b6      	lsls	r6, r6, #2
 80112a2:	464a      	mov	r2, r9
 80112a4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80112a6:	6960      	ldr	r0, [r4, #20]
 80112a8:	4631      	mov	r1, r6
 80112aa:	4798      	blx	r3
 80112ac:	4681      	mov	r9, r0
 80112ae:	6160      	str	r0, [r4, #20]
 80112b0:	2800      	cmp	r0, #0
 80112b2:	f000 8084 	beq.w	80113be <rcl_wait_set_resize+0x322>
 80112b6:	4632      	mov	r2, r6
 80112b8:	4641      	mov	r1, r8
 80112ba:	f00a f871 	bl	801b3a0 <memset>
 80112be:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80112c0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80112c4:	e753      	b.n	801116e <rcl_wait_set_resize+0xd2>
 80112c6:	009c      	lsls	r4, r3, #2
 80112c8:	464a      	mov	r2, r9
 80112ca:	69a8      	ldr	r0, [r5, #24]
 80112cc:	4621      	mov	r1, r4
 80112ce:	47c0      	blx	r8
 80112d0:	61a8      	str	r0, [r5, #24]
 80112d2:	bb40      	cbnz	r0, 8011326 <rcl_wait_set_resize+0x28a>
 80112d4:	200a      	movs	r0, #10
 80112d6:	b003      	add	sp, #12
 80112d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112dc:	00bc      	lsls	r4, r7, #2
 80112de:	464a      	mov	r2, r9
 80112e0:	6928      	ldr	r0, [r5, #16]
 80112e2:	4621      	mov	r1, r4
 80112e4:	47c0      	blx	r8
 80112e6:	6128      	str	r0, [r5, #16]
 80112e8:	2800      	cmp	r0, #0
 80112ea:	d0f3      	beq.n	80112d4 <rcl_wait_set_resize+0x238>
 80112ec:	4622      	mov	r2, r4
 80112ee:	4631      	mov	r1, r6
 80112f0:	f00a f856 	bl	801b3a0 <memset>
 80112f4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80112f6:	616f      	str	r7, [r5, #20]
 80112f8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80112fc:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8011300:	e747      	b.n	8011192 <rcl_wait_set_resize+0xf6>
 8011302:	6a28      	ldr	r0, [r5, #32]
 8011304:	b120      	cbz	r0, 8011310 <rcl_wait_set_resize+0x274>
 8011306:	4639      	mov	r1, r7
 8011308:	47c0      	blx	r8
 801130a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801130c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801130e:	622b      	str	r3, [r5, #32]
 8011310:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011312:	2800      	cmp	r0, #0
 8011314:	f43f af7e 	beq.w	8011214 <rcl_wait_set_resize+0x178>
 8011318:	4639      	mov	r1, r7
 801131a:	47c0      	blx	r8
 801131c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801131e:	2300      	movs	r3, #0
 8011320:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8011324:	e776      	b.n	8011214 <rcl_wait_set_resize+0x178>
 8011326:	4622      	mov	r2, r4
 8011328:	4631      	mov	r1, r6
 801132a:	f00a f839 	bl	801b3a0 <memset>
 801132e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8011330:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011332:	464a      	mov	r2, r9
 8011334:	6a38      	ldr	r0, [r7, #32]
 8011336:	4621      	mov	r1, r4
 8011338:	61eb      	str	r3, [r5, #28]
 801133a:	61fe      	str	r6, [r7, #28]
 801133c:	47c0      	blx	r8
 801133e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011340:	6238      	str	r0, [r7, #32]
 8011342:	6a1f      	ldr	r7, [r3, #32]
 8011344:	2f00      	cmp	r7, #0
 8011346:	d04a      	beq.n	80113de <rcl_wait_set_resize+0x342>
 8011348:	4622      	mov	r2, r4
 801134a:	4631      	mov	r1, r6
 801134c:	4638      	mov	r0, r7
 801134e:	f00a f827 	bl	801b3a0 <memset>
 8011352:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011354:	e733      	b.n	80111be <rcl_wait_set_resize+0x122>
 8011356:	009c      	lsls	r4, r3, #2
 8011358:	463a      	mov	r2, r7
 801135a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801135c:	4621      	mov	r1, r4
 801135e:	47c8      	blx	r9
 8011360:	62a8      	str	r0, [r5, #40]	@ 0x28
 8011362:	2800      	cmp	r0, #0
 8011364:	d0b6      	beq.n	80112d4 <rcl_wait_set_resize+0x238>
 8011366:	4622      	mov	r2, r4
 8011368:	4631      	mov	r1, r6
 801136a:	f00a f819 	bl	801b3a0 <memset>
 801136e:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8011372:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011374:	463a      	mov	r2, r7
 8011376:	4621      	mov	r1, r4
 8011378:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801137c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801137e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8011382:	47c8      	blx	r9
 8011384:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011386:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801138a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801138c:	2b00      	cmp	r3, #0
 801138e:	d034      	beq.n	80113fa <rcl_wait_set_resize+0x35e>
 8011390:	4622      	mov	r2, r4
 8011392:	4631      	mov	r1, r6
 8011394:	4618      	mov	r0, r3
 8011396:	f00a f803 	bl	801b3a0 <memset>
 801139a:	4630      	mov	r0, r6
 801139c:	b003      	add	sp, #12
 801139e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113a2:	200b      	movs	r0, #11
 80113a4:	4770      	bx	lr
 80113a6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80113aa:	e794      	b.n	80112d6 <rcl_wait_set_resize+0x23a>
 80113ac:	6828      	ldr	r0, [r5, #0]
 80113ae:	4651      	mov	r1, sl
 80113b0:	9301      	str	r3, [sp, #4]
 80113b2:	47d8      	blx	fp
 80113b4:	9b01      	ldr	r3, [sp, #4]
 80113b6:	200a      	movs	r0, #10
 80113b8:	e9c5 3300 	strd	r3, r3, [r5]
 80113bc:	e78b      	b.n	80112d6 <rcl_wait_set_resize+0x23a>
 80113be:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80113c0:	68a8      	ldr	r0, [r5, #8]
 80113c2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80113c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80113c6:	4798      	blx	r3
 80113c8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80113ca:	6928      	ldr	r0, [r5, #16]
 80113cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80113ce:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80113d0:	e9c5 9902 	strd	r9, r9, [r5, #8]
 80113d4:	4790      	blx	r2
 80113d6:	200a      	movs	r0, #10
 80113d8:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80113dc:	e77b      	b.n	80112d6 <rcl_wait_set_resize+0x23a>
 80113de:	69a8      	ldr	r0, [r5, #24]
 80113e0:	4649      	mov	r1, r9
 80113e2:	47d0      	blx	sl
 80113e4:	200a      	movs	r0, #10
 80113e6:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80113ea:	e774      	b.n	80112d6 <rcl_wait_set_resize+0x23a>
 80113ec:	6a28      	ldr	r0, [r5, #32]
 80113ee:	4639      	mov	r1, r7
 80113f0:	47c0      	blx	r8
 80113f2:	200a      	movs	r0, #10
 80113f4:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80113f8:	e76d      	b.n	80112d6 <rcl_wait_set_resize+0x23a>
 80113fa:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80113fc:	4639      	mov	r1, r7
 80113fe:	9301      	str	r3, [sp, #4]
 8011400:	47c0      	blx	r8
 8011402:	9b01      	ldr	r3, [sp, #4]
 8011404:	200a      	movs	r0, #10
 8011406:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801140a:	e764      	b.n	80112d6 <rcl_wait_set_resize+0x23a>

0801140c <rcl_wait_set_init>:
 801140c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011410:	b085      	sub	sp, #20
 8011412:	4605      	mov	r5, r0
 8011414:	460e      	mov	r6, r1
 8011416:	4617      	mov	r7, r2
 8011418:	a812      	add	r0, sp, #72	@ 0x48
 801141a:	4698      	mov	r8, r3
 801141c:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8011420:	f7fd ffc0 	bl	800f3a4 <rcutils_allocator_is_valid>
 8011424:	2d00      	cmp	r5, #0
 8011426:	d072      	beq.n	801150e <rcl_wait_set_init+0x102>
 8011428:	f080 0001 	eor.w	r0, r0, #1
 801142c:	b2c0      	uxtb	r0, r0
 801142e:	2800      	cmp	r0, #0
 8011430:	d16d      	bne.n	801150e <rcl_wait_set_init+0x102>
 8011432:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8011436:	f1ba 0f00 	cmp.w	sl, #0
 801143a:	d004      	beq.n	8011446 <rcl_wait_set_init+0x3a>
 801143c:	2464      	movs	r4, #100	@ 0x64
 801143e:	4620      	mov	r0, r4
 8011440:	b005      	add	sp, #20
 8011442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011446:	f1b9 0f00 	cmp.w	r9, #0
 801144a:	d060      	beq.n	801150e <rcl_wait_set_init+0x102>
 801144c:	4648      	mov	r0, r9
 801144e:	f7fe fae3 	bl	800fa18 <rcl_context_is_valid>
 8011452:	2800      	cmp	r0, #0
 8011454:	d068      	beq.n	8011528 <rcl_wait_set_init+0x11c>
 8011456:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011458:	205c      	movs	r0, #92	@ 0x5c
 801145a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801145c:	4798      	blx	r3
 801145e:	6328      	str	r0, [r5, #48]	@ 0x30
 8011460:	2800      	cmp	r0, #0
 8011462:	d063      	beq.n	801152c <rcl_wait_set_init+0x120>
 8011464:	225c      	movs	r2, #92	@ 0x5c
 8011466:	4651      	mov	r1, sl
 8011468:	f009 ff9a 	bl	801b3a0 <memset>
 801146c:	ac12      	add	r4, sp, #72	@ 0x48
 801146e:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 8011472:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8011476:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 801147a:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 801147e:	eb03 0e02 	add.w	lr, r3, r2
 8011482:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011484:	f8d9 9000 	ldr.w	r9, [r9]
 8011488:	449e      	add	lr, r3
 801148a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801148c:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8011490:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8011494:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8011498:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 801149c:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 80114a0:	44be      	add	lr, r7
 80114a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80114a6:	6823      	ldr	r3, [r4, #0]
 80114a8:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 80114ac:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 80114b0:	f8cc 3000 	str.w	r3, [ip]
 80114b4:	f002 fdf0 	bl	8014098 <rmw_create_wait_set>
 80114b8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80114ba:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 80114be:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80114c0:	b350      	cbz	r0, 8011518 <rcl_wait_set_init+0x10c>
 80114c2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80114c4:	4643      	mov	r3, r8
 80114c6:	463a      	mov	r2, r7
 80114c8:	4631      	mov	r1, r6
 80114ca:	9402      	str	r4, [sp, #8]
 80114cc:	4628      	mov	r0, r5
 80114ce:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80114d0:	9401      	str	r4, [sp, #4]
 80114d2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80114d4:	9400      	str	r4, [sp, #0]
 80114d6:	f7ff fde1 	bl	801109c <rcl_wait_set_resize>
 80114da:	4604      	mov	r4, r0
 80114dc:	2800      	cmp	r0, #0
 80114de:	d0ae      	beq.n	801143e <rcl_wait_set_init+0x32>
 80114e0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80114e2:	bb2b      	cbnz	r3, 8011530 <rcl_wait_set_init+0x124>
 80114e4:	2600      	movs	r6, #0
 80114e6:	4628      	mov	r0, r5
 80114e8:	4633      	mov	r3, r6
 80114ea:	4632      	mov	r2, r6
 80114ec:	4631      	mov	r1, r6
 80114ee:	9600      	str	r6, [sp, #0]
 80114f0:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80114f4:	f7ff fdd2 	bl	801109c <rcl_wait_set_resize>
 80114f8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80114fa:	2800      	cmp	r0, #0
 80114fc:	d09f      	beq.n	801143e <rcl_wait_set_init+0x32>
 80114fe:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8011500:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8011502:	4798      	blx	r3
 8011504:	4620      	mov	r0, r4
 8011506:	632e      	str	r6, [r5, #48]	@ 0x30
 8011508:	b005      	add	sp, #20
 801150a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801150e:	240b      	movs	r4, #11
 8011510:	4620      	mov	r0, r4
 8011512:	b005      	add	sp, #20
 8011514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011518:	2401      	movs	r4, #1
 801151a:	f002 fdc7 	bl	80140ac <rmw_destroy_wait_set>
 801151e:	2800      	cmp	r0, #0
 8011520:	bf18      	it	ne
 8011522:	f44f 7461 	movne.w	r4, #900	@ 0x384
 8011526:	e7dd      	b.n	80114e4 <rcl_wait_set_init+0xd8>
 8011528:	2465      	movs	r4, #101	@ 0x65
 801152a:	e788      	b.n	801143e <rcl_wait_set_init+0x32>
 801152c:	240a      	movs	r4, #10
 801152e:	e786      	b.n	801143e <rcl_wait_set_init+0x32>
 8011530:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8011532:	e7f2      	b.n	801151a <rcl_wait_set_init+0x10e>

08011534 <rcl_wait_set_add_guard_condition>:
 8011534:	b318      	cbz	r0, 801157e <rcl_wait_set_add_guard_condition+0x4a>
 8011536:	b538      	push	{r3, r4, r5, lr}
 8011538:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801153a:	4604      	mov	r4, r0
 801153c:	b30b      	cbz	r3, 8011582 <rcl_wait_set_add_guard_condition+0x4e>
 801153e:	b319      	cbz	r1, 8011588 <rcl_wait_set_add_guard_condition+0x54>
 8011540:	68dd      	ldr	r5, [r3, #12]
 8011542:	68c0      	ldr	r0, [r0, #12]
 8011544:	4285      	cmp	r5, r0
 8011546:	d217      	bcs.n	8011578 <rcl_wait_set_add_guard_condition+0x44>
 8011548:	1c68      	adds	r0, r5, #1
 801154a:	60d8      	str	r0, [r3, #12]
 801154c:	68a3      	ldr	r3, [r4, #8]
 801154e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8011552:	b102      	cbz	r2, 8011556 <rcl_wait_set_add_guard_condition+0x22>
 8011554:	6015      	str	r5, [r2, #0]
 8011556:	4608      	mov	r0, r1
 8011558:	f007 fff2 	bl	8019540 <rcl_guard_condition_get_rmw_handle>
 801155c:	b150      	cbz	r0, 8011574 <rcl_wait_set_add_guard_condition+0x40>
 801155e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011560:	6842      	ldr	r2, [r0, #4]
 8011562:	2000      	movs	r0, #0
 8011564:	695b      	ldr	r3, [r3, #20]
 8011566:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801156a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801156c:	6913      	ldr	r3, [r2, #16]
 801156e:	3301      	adds	r3, #1
 8011570:	6113      	str	r3, [r2, #16]
 8011572:	bd38      	pop	{r3, r4, r5, pc}
 8011574:	2001      	movs	r0, #1
 8011576:	bd38      	pop	{r3, r4, r5, pc}
 8011578:	f240 3086 	movw	r0, #902	@ 0x386
 801157c:	bd38      	pop	{r3, r4, r5, pc}
 801157e:	200b      	movs	r0, #11
 8011580:	4770      	bx	lr
 8011582:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011586:	bd38      	pop	{r3, r4, r5, pc}
 8011588:	200b      	movs	r0, #11
 801158a:	bd38      	pop	{r3, r4, r5, pc}

0801158c <rcl_wait_set_add_timer>:
 801158c:	b328      	cbz	r0, 80115da <rcl_wait_set_add_timer+0x4e>
 801158e:	b538      	push	{r3, r4, r5, lr}
 8011590:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011592:	4604      	mov	r4, r0
 8011594:	b31b      	cbz	r3, 80115de <rcl_wait_set_add_timer+0x52>
 8011596:	b329      	cbz	r1, 80115e4 <rcl_wait_set_add_timer+0x58>
 8011598:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801159a:	6965      	ldr	r5, [r4, #20]
 801159c:	42a8      	cmp	r0, r5
 801159e:	d219      	bcs.n	80115d4 <rcl_wait_set_add_timer+0x48>
 80115a0:	1c45      	adds	r5, r0, #1
 80115a2:	641d      	str	r5, [r3, #64]	@ 0x40
 80115a4:	6923      	ldr	r3, [r4, #16]
 80115a6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 80115aa:	b102      	cbz	r2, 80115ae <rcl_wait_set_add_timer+0x22>
 80115ac:	6010      	str	r0, [r2, #0]
 80115ae:	4608      	mov	r0, r1
 80115b0:	f7ff fb9a 	bl	8010ce8 <rcl_timer_get_guard_condition>
 80115b4:	b168      	cbz	r0, 80115d2 <rcl_wait_set_add_timer+0x46>
 80115b6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80115b8:	68e3      	ldr	r3, [r4, #12]
 80115ba:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80115bc:	3b01      	subs	r3, #1
 80115be:	441d      	add	r5, r3
 80115c0:	f007 ffbe 	bl	8019540 <rcl_guard_condition_get_rmw_handle>
 80115c4:	b180      	cbz	r0, 80115e8 <rcl_wait_set_add_timer+0x5c>
 80115c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80115c8:	6842      	ldr	r2, [r0, #4]
 80115ca:	2000      	movs	r0, #0
 80115cc:	695b      	ldr	r3, [r3, #20]
 80115ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80115d2:	bd38      	pop	{r3, r4, r5, pc}
 80115d4:	f240 3086 	movw	r0, #902	@ 0x386
 80115d8:	bd38      	pop	{r3, r4, r5, pc}
 80115da:	200b      	movs	r0, #11
 80115dc:	4770      	bx	lr
 80115de:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80115e2:	bd38      	pop	{r3, r4, r5, pc}
 80115e4:	200b      	movs	r0, #11
 80115e6:	bd38      	pop	{r3, r4, r5, pc}
 80115e8:	2001      	movs	r0, #1
 80115ea:	bd38      	pop	{r3, r4, r5, pc}

080115ec <rcl_wait_set_add_client>:
 80115ec:	b318      	cbz	r0, 8011636 <rcl_wait_set_add_client+0x4a>
 80115ee:	b538      	push	{r3, r4, r5, lr}
 80115f0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80115f2:	4604      	mov	r4, r0
 80115f4:	b30b      	cbz	r3, 801163a <rcl_wait_set_add_client+0x4e>
 80115f6:	b319      	cbz	r1, 8011640 <rcl_wait_set_add_client+0x54>
 80115f8:	699d      	ldr	r5, [r3, #24]
 80115fa:	69c0      	ldr	r0, [r0, #28]
 80115fc:	4285      	cmp	r5, r0
 80115fe:	d217      	bcs.n	8011630 <rcl_wait_set_add_client+0x44>
 8011600:	1c68      	adds	r0, r5, #1
 8011602:	6198      	str	r0, [r3, #24]
 8011604:	69a3      	ldr	r3, [r4, #24]
 8011606:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801160a:	b102      	cbz	r2, 801160e <rcl_wait_set_add_client+0x22>
 801160c:	6015      	str	r5, [r2, #0]
 801160e:	4608      	mov	r0, r1
 8011610:	f7fe f968 	bl	800f8e4 <rcl_client_get_rmw_handle>
 8011614:	b150      	cbz	r0, 801162c <rcl_wait_set_add_client+0x40>
 8011616:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011618:	6842      	ldr	r2, [r0, #4]
 801161a:	2000      	movs	r0, #0
 801161c:	6a1b      	ldr	r3, [r3, #32]
 801161e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011622:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011624:	69d3      	ldr	r3, [r2, #28]
 8011626:	3301      	adds	r3, #1
 8011628:	61d3      	str	r3, [r2, #28]
 801162a:	bd38      	pop	{r3, r4, r5, pc}
 801162c:	2001      	movs	r0, #1
 801162e:	bd38      	pop	{r3, r4, r5, pc}
 8011630:	f240 3086 	movw	r0, #902	@ 0x386
 8011634:	bd38      	pop	{r3, r4, r5, pc}
 8011636:	200b      	movs	r0, #11
 8011638:	4770      	bx	lr
 801163a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801163e:	bd38      	pop	{r3, r4, r5, pc}
 8011640:	200b      	movs	r0, #11
 8011642:	bd38      	pop	{r3, r4, r5, pc}

08011644 <rcl_wait_set_add_service>:
 8011644:	b318      	cbz	r0, 801168e <rcl_wait_set_add_service+0x4a>
 8011646:	b538      	push	{r3, r4, r5, lr}
 8011648:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801164a:	4604      	mov	r4, r0
 801164c:	b30b      	cbz	r3, 8011692 <rcl_wait_set_add_service+0x4e>
 801164e:	b319      	cbz	r1, 8011698 <rcl_wait_set_add_service+0x54>
 8011650:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8011652:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8011654:	4285      	cmp	r5, r0
 8011656:	d217      	bcs.n	8011688 <rcl_wait_set_add_service+0x44>
 8011658:	1c68      	adds	r0, r5, #1
 801165a:	6258      	str	r0, [r3, #36]	@ 0x24
 801165c:	6a23      	ldr	r3, [r4, #32]
 801165e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8011662:	b102      	cbz	r2, 8011666 <rcl_wait_set_add_service+0x22>
 8011664:	6015      	str	r5, [r2, #0]
 8011666:	4608      	mov	r0, r1
 8011668:	f7fe ffe2 	bl	8010630 <rcl_service_get_rmw_handle>
 801166c:	b150      	cbz	r0, 8011684 <rcl_wait_set_add_service+0x40>
 801166e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011670:	6842      	ldr	r2, [r0, #4]
 8011672:	2000      	movs	r0, #0
 8011674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011676:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801167a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801167c:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801167e:	3301      	adds	r3, #1
 8011680:	6293      	str	r3, [r2, #40]	@ 0x28
 8011682:	bd38      	pop	{r3, r4, r5, pc}
 8011684:	2001      	movs	r0, #1
 8011686:	bd38      	pop	{r3, r4, r5, pc}
 8011688:	f240 3086 	movw	r0, #902	@ 0x386
 801168c:	bd38      	pop	{r3, r4, r5, pc}
 801168e:	200b      	movs	r0, #11
 8011690:	4770      	bx	lr
 8011692:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011696:	bd38      	pop	{r3, r4, r5, pc}
 8011698:	200b      	movs	r0, #11
 801169a:	bd38      	pop	{r3, r4, r5, pc}
 801169c:	0000      	movs	r0, r0
	...

080116a0 <rcl_wait>:
 80116a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116a4:	ed2d 8b02 	vpush	{d8}
 80116a8:	b08d      	sub	sp, #52	@ 0x34
 80116aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80116ae:	2800      	cmp	r0, #0
 80116b0:	f000 814f 	beq.w	8011952 <rcl_wait+0x2b2>
 80116b4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80116b6:	4605      	mov	r5, r0
 80116b8:	2e00      	cmp	r6, #0
 80116ba:	f000 811a 	beq.w	80118f2 <rcl_wait+0x252>
 80116be:	6843      	ldr	r3, [r0, #4]
 80116c0:	b983      	cbnz	r3, 80116e4 <rcl_wait+0x44>
 80116c2:	68eb      	ldr	r3, [r5, #12]
 80116c4:	b973      	cbnz	r3, 80116e4 <rcl_wait+0x44>
 80116c6:	696b      	ldr	r3, [r5, #20]
 80116c8:	b963      	cbnz	r3, 80116e4 <rcl_wait+0x44>
 80116ca:	69eb      	ldr	r3, [r5, #28]
 80116cc:	b953      	cbnz	r3, 80116e4 <rcl_wait+0x44>
 80116ce:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80116d0:	b943      	cbnz	r3, 80116e4 <rcl_wait+0x44>
 80116d2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80116d4:	b933      	cbnz	r3, 80116e4 <rcl_wait+0x44>
 80116d6:	f240 3085 	movw	r0, #901	@ 0x385
 80116da:	b00d      	add	sp, #52	@ 0x34
 80116dc:	ecbd 8b02 	vpop	{d8}
 80116e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116e4:	9b04      	ldr	r3, [sp, #16]
 80116e6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80116e8:	2b01      	cmp	r3, #1
 80116ea:	9b05      	ldr	r3, [sp, #20]
 80116ec:	f173 0300 	sbcs.w	r3, r3, #0
 80116f0:	f2c0 80f8 	blt.w	80118e4 <rcl_wait+0x244>
 80116f4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80116f8:	2a00      	cmp	r2, #0
 80116fa:	f000 810f 	beq.w	801191c <rcl_wait+0x27c>
 80116fe:	2400      	movs	r4, #0
 8011700:	4613      	mov	r3, r2
 8011702:	f240 3921 	movw	r9, #801	@ 0x321
 8011706:	4632      	mov	r2, r6
 8011708:	46a2      	mov	sl, r4
 801170a:	46a3      	mov	fp, r4
 801170c:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 8011970 <rcl_wait+0x2d0>
 8011710:	e014      	b.n	801173c <rcl_wait+0x9c>
 8011712:	2800      	cmp	r0, #0
 8011714:	d1e1      	bne.n	80116da <rcl_wait+0x3a>
 8011716:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801171a:	4542      	cmp	r2, r8
 801171c:	eb73 0107 	sbcs.w	r1, r3, r7
 8011720:	da03      	bge.n	801172a <rcl_wait+0x8a>
 8011722:	4690      	mov	r8, r2
 8011724:	461f      	mov	r7, r3
 8011726:	f04f 0b01 	mov.w	fp, #1
 801172a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801172c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801172e:	3401      	adds	r4, #1
 8011730:	f14a 0a00 	adc.w	sl, sl, #0
 8011734:	429c      	cmp	r4, r3
 8011736:	f17a 0100 	sbcs.w	r1, sl, #0
 801173a:	d228      	bcs.n	801178e <rcl_wait+0xee>
 801173c:	6928      	ldr	r0, [r5, #16]
 801173e:	a908      	add	r1, sp, #32
 8011740:	00a6      	lsls	r6, r4, #2
 8011742:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8011746:	2800      	cmp	r0, #0
 8011748:	d0f1      	beq.n	801172e <rcl_wait+0x8e>
 801174a:	68eb      	ldr	r3, [r5, #12]
 801174c:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8011750:	4423      	add	r3, r4
 8011752:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8011756:	f1be 0f00 	cmp.w	lr, #0
 801175a:	d006      	beq.n	801176a <rcl_wait+0xca>
 801175c:	6913      	ldr	r3, [r2, #16]
 801175e:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8011762:	3301      	adds	r3, #1
 8011764:	6113      	str	r3, [r2, #16]
 8011766:	692b      	ldr	r3, [r5, #16]
 8011768:	5998      	ldr	r0, [r3, r6]
 801176a:	ed8d 8b08 	vstr	d8, [sp, #32]
 801176e:	f7ff fa89 	bl	8010c84 <rcl_timer_get_time_until_next_call>
 8011772:	4548      	cmp	r0, r9
 8011774:	d1cd      	bne.n	8011712 <rcl_wait+0x72>
 8011776:	692b      	ldr	r3, [r5, #16]
 8011778:	2200      	movs	r2, #0
 801177a:	3401      	adds	r4, #1
 801177c:	519a      	str	r2, [r3, r6]
 801177e:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8011780:	f14a 0a00 	adc.w	sl, sl, #0
 8011784:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8011786:	429c      	cmp	r4, r3
 8011788:	f17a 0100 	sbcs.w	r1, sl, #0
 801178c:	d3d6      	bcc.n	801173c <rcl_wait+0x9c>
 801178e:	4659      	mov	r1, fp
 8011790:	4616      	mov	r6, r2
 8011792:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8011796:	4313      	orrs	r3, r2
 8011798:	f040 80b4 	bne.w	8011904 <rcl_wait+0x264>
 801179c:	2300      	movs	r3, #0
 801179e:	2200      	movs	r2, #0
 80117a0:	460c      	mov	r4, r1
 80117a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80117a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80117aa:	ab08      	add	r3, sp, #32
 80117ac:	9302      	str	r3, [sp, #8]
 80117ae:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 80117b2:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 80117b4:	f106 0110 	add.w	r1, r6, #16
 80117b8:	9300      	str	r3, [sp, #0]
 80117ba:	1d30      	adds	r0, r6, #4
 80117bc:	f106 031c 	add.w	r3, r6, #28
 80117c0:	9201      	str	r2, [sp, #4]
 80117c2:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80117c6:	f002 fb03 	bl	8013dd0 <rmw_wait>
 80117ca:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80117cc:	4680      	mov	r8, r0
 80117ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80117d0:	b1e2      	cbz	r2, 801180c <rcl_wait+0x16c>
 80117d2:	f04f 0900 	mov.w	r9, #0
 80117d6:	464f      	mov	r7, r9
 80117d8:	692a      	ldr	r2, [r5, #16]
 80117da:	f10d 011f 	add.w	r1, sp, #31
 80117de:	ea4f 0689 	mov.w	r6, r9, lsl #2
 80117e2:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 80117e6:	b160      	cbz	r0, 8011802 <rcl_wait+0x162>
 80117e8:	f88d 701f 	strb.w	r7, [sp, #31]
 80117ec:	f7ff fa0e 	bl	8010c0c <rcl_timer_is_ready>
 80117f0:	2800      	cmp	r0, #0
 80117f2:	f47f af72 	bne.w	80116da <rcl_wait+0x3a>
 80117f6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80117fa:	b90b      	cbnz	r3, 8011800 <rcl_wait+0x160>
 80117fc:	692a      	ldr	r2, [r5, #16]
 80117fe:	5193      	str	r3, [r2, r6]
 8011800:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011802:	f109 0901 	add.w	r9, r9, #1
 8011806:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011808:	454a      	cmp	r2, r9
 801180a:	d8e5      	bhi.n	80117d8 <rcl_wait+0x138>
 801180c:	f038 0002 	bics.w	r0, r8, #2
 8011810:	d176      	bne.n	8011900 <rcl_wait+0x260>
 8011812:	686f      	ldr	r7, [r5, #4]
 8011814:	b17f      	cbz	r7, 8011836 <rcl_wait+0x196>
 8011816:	4602      	mov	r2, r0
 8011818:	e002      	b.n	8011820 <rcl_wait+0x180>
 801181a:	3201      	adds	r2, #1
 801181c:	42ba      	cmp	r2, r7
 801181e:	d00a      	beq.n	8011836 <rcl_wait+0x196>
 8011820:	6899      	ldr	r1, [r3, #8]
 8011822:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011826:	2900      	cmp	r1, #0
 8011828:	d1f7      	bne.n	801181a <rcl_wait+0x17a>
 801182a:	682e      	ldr	r6, [r5, #0]
 801182c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8011830:	3201      	adds	r2, #1
 8011832:	42ba      	cmp	r2, r7
 8011834:	d1f4      	bne.n	8011820 <rcl_wait+0x180>
 8011836:	68ef      	ldr	r7, [r5, #12]
 8011838:	b17f      	cbz	r7, 801185a <rcl_wait+0x1ba>
 801183a:	2200      	movs	r2, #0
 801183c:	e002      	b.n	8011844 <rcl_wait+0x1a4>
 801183e:	3201      	adds	r2, #1
 8011840:	42ba      	cmp	r2, r7
 8011842:	d00a      	beq.n	801185a <rcl_wait+0x1ba>
 8011844:	6959      	ldr	r1, [r3, #20]
 8011846:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801184a:	2900      	cmp	r1, #0
 801184c:	d1f7      	bne.n	801183e <rcl_wait+0x19e>
 801184e:	68ae      	ldr	r6, [r5, #8]
 8011850:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8011854:	3201      	adds	r2, #1
 8011856:	42ba      	cmp	r2, r7
 8011858:	d1f4      	bne.n	8011844 <rcl_wait+0x1a4>
 801185a:	69ef      	ldr	r7, [r5, #28]
 801185c:	b17f      	cbz	r7, 801187e <rcl_wait+0x1de>
 801185e:	2200      	movs	r2, #0
 8011860:	e002      	b.n	8011868 <rcl_wait+0x1c8>
 8011862:	3201      	adds	r2, #1
 8011864:	42ba      	cmp	r2, r7
 8011866:	d00a      	beq.n	801187e <rcl_wait+0x1de>
 8011868:	6a19      	ldr	r1, [r3, #32]
 801186a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801186e:	2900      	cmp	r1, #0
 8011870:	d1f7      	bne.n	8011862 <rcl_wait+0x1c2>
 8011872:	69ae      	ldr	r6, [r5, #24]
 8011874:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8011878:	3201      	adds	r2, #1
 801187a:	42ba      	cmp	r2, r7
 801187c:	d1f4      	bne.n	8011868 <rcl_wait+0x1c8>
 801187e:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8011880:	b17f      	cbz	r7, 80118a2 <rcl_wait+0x202>
 8011882:	2200      	movs	r2, #0
 8011884:	e002      	b.n	801188c <rcl_wait+0x1ec>
 8011886:	3201      	adds	r2, #1
 8011888:	42ba      	cmp	r2, r7
 801188a:	d00a      	beq.n	80118a2 <rcl_wait+0x202>
 801188c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801188e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011892:	2900      	cmp	r1, #0
 8011894:	d1f7      	bne.n	8011886 <rcl_wait+0x1e6>
 8011896:	6a2e      	ldr	r6, [r5, #32]
 8011898:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801189c:	3201      	adds	r2, #1
 801189e:	42ba      	cmp	r2, r7
 80118a0:	d1f4      	bne.n	801188c <rcl_wait+0x1ec>
 80118a2:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 80118a4:	b17f      	cbz	r7, 80118c6 <rcl_wait+0x226>
 80118a6:	2200      	movs	r2, #0
 80118a8:	e002      	b.n	80118b0 <rcl_wait+0x210>
 80118aa:	3201      	adds	r2, #1
 80118ac:	42ba      	cmp	r2, r7
 80118ae:	d00a      	beq.n	80118c6 <rcl_wait+0x226>
 80118b0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80118b2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80118b6:	2900      	cmp	r1, #0
 80118b8:	d1f7      	bne.n	80118aa <rcl_wait+0x20a>
 80118ba:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 80118bc:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80118c0:	3201      	adds	r2, #1
 80118c2:	42ba      	cmp	r2, r7
 80118c4:	d1f4      	bne.n	80118b0 <rcl_wait+0x210>
 80118c6:	f1b8 0f02 	cmp.w	r8, #2
 80118ca:	f47f af06 	bne.w	80116da <rcl_wait+0x3a>
 80118ce:	f084 0301 	eor.w	r3, r4, #1
 80118d2:	b2db      	uxtb	r3, r3
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	bf18      	it	ne
 80118d8:	2002      	movne	r0, #2
 80118da:	b00d      	add	sp, #52	@ 0x34
 80118dc:	ecbd 8b02 	vpop	{d8}
 80118e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118e4:	2a00      	cmp	r2, #0
 80118e6:	d03a      	beq.n	801195e <rcl_wait+0x2be>
 80118e8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80118ec:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80118f0:	e705      	b.n	80116fe <rcl_wait+0x5e>
 80118f2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80118f6:	b00d      	add	sp, #52	@ 0x34
 80118f8:	ecbd 8b02 	vpop	{d8}
 80118fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011900:	2001      	movs	r0, #1
 8011902:	e6ea      	b.n	80116da <rcl_wait+0x3a>
 8011904:	9b04      	ldr	r3, [sp, #16]
 8011906:	460c      	mov	r4, r1
 8011908:	2b01      	cmp	r3, #1
 801190a:	9b05      	ldr	r3, [sp, #20]
 801190c:	f173 0300 	sbcs.w	r3, r3, #0
 8011910:	bfa8      	it	ge
 8011912:	f044 0401 	orrge.w	r4, r4, #1
 8011916:	b914      	cbnz	r4, 801191e <rcl_wait+0x27e>
 8011918:	4623      	mov	r3, r4
 801191a:	e747      	b.n	80117ac <rcl_wait+0x10c>
 801191c:	4611      	mov	r1, r2
 801191e:	2f00      	cmp	r7, #0
 8011920:	da02      	bge.n	8011928 <rcl_wait+0x288>
 8011922:	f04f 0800 	mov.w	r8, #0
 8011926:	4647      	mov	r7, r8
 8011928:	460c      	mov	r4, r1
 801192a:	4640      	mov	r0, r8
 801192c:	4639      	mov	r1, r7
 801192e:	a312      	add	r3, pc, #72	@ (adr r3, 8011978 <rcl_wait+0x2d8>)
 8011930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011934:	f7ee fd3c 	bl	80003b0 <__aeabi_ldivmod>
 8011938:	a30f      	add	r3, pc, #60	@ (adr r3, 8011978 <rcl_wait+0x2d8>)
 801193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801193e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011942:	4640      	mov	r0, r8
 8011944:	4639      	mov	r1, r7
 8011946:	f7ee fd33 	bl	80003b0 <__aeabi_ldivmod>
 801194a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801194e:	ab08      	add	r3, sp, #32
 8011950:	e72c      	b.n	80117ac <rcl_wait+0x10c>
 8011952:	200b      	movs	r0, #11
 8011954:	b00d      	add	sp, #52	@ 0x34
 8011956:	ecbd 8b02 	vpop	{d8}
 801195a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801195e:	4611      	mov	r1, r2
 8011960:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8011964:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8011968:	e713      	b.n	8011792 <rcl_wait+0xf2>
 801196a:	bf00      	nop
 801196c:	f3af 8000 	nop.w
 8011970:	ffffffff 	.word	0xffffffff
 8011974:	7fffffff 	.word	0x7fffffff
 8011978:	3b9aca00 	.word	0x3b9aca00
 801197c:	00000000 	.word	0x00000000

08011980 <rcl_action_take_goal_response>:
 8011980:	2800      	cmp	r0, #0
 8011982:	d039      	beq.n	80119f8 <rcl_action_take_goal_response+0x78>
 8011984:	b570      	push	{r4, r5, r6, lr}
 8011986:	4604      	mov	r4, r0
 8011988:	6800      	ldr	r0, [r0, #0]
 801198a:	b380      	cbz	r0, 80119ee <rcl_action_take_goal_response+0x6e>
 801198c:	460e      	mov	r6, r1
 801198e:	4615      	mov	r5, r2
 8011990:	f7fe f82e 	bl	800f9f0 <rcl_client_is_valid>
 8011994:	b330      	cbz	r0, 80119e4 <rcl_action_take_goal_response+0x64>
 8011996:	6820      	ldr	r0, [r4, #0]
 8011998:	3004      	adds	r0, #4
 801199a:	f7fe f829 	bl	800f9f0 <rcl_client_is_valid>
 801199e:	b308      	cbz	r0, 80119e4 <rcl_action_take_goal_response+0x64>
 80119a0:	6820      	ldr	r0, [r4, #0]
 80119a2:	3008      	adds	r0, #8
 80119a4:	f7fe f824 	bl	800f9f0 <rcl_client_is_valid>
 80119a8:	b1e0      	cbz	r0, 80119e4 <rcl_action_take_goal_response+0x64>
 80119aa:	6820      	ldr	r0, [r4, #0]
 80119ac:	300c      	adds	r0, #12
 80119ae:	f7fe ffe5 	bl	801097c <rcl_subscription_is_valid>
 80119b2:	b1b8      	cbz	r0, 80119e4 <rcl_action_take_goal_response+0x64>
 80119b4:	6820      	ldr	r0, [r4, #0]
 80119b6:	3010      	adds	r0, #16
 80119b8:	f7fe ffe0 	bl	801097c <rcl_subscription_is_valid>
 80119bc:	b190      	cbz	r0, 80119e4 <rcl_action_take_goal_response+0x64>
 80119be:	b1cd      	cbz	r5, 80119f4 <rcl_action_take_goal_response+0x74>
 80119c0:	b1c6      	cbz	r6, 80119f4 <rcl_action_take_goal_response+0x74>
 80119c2:	462a      	mov	r2, r5
 80119c4:	4631      	mov	r1, r6
 80119c6:	6820      	ldr	r0, [r4, #0]
 80119c8:	f7fd ffca 	bl	800f960 <rcl_take_response>
 80119cc:	b148      	cbz	r0, 80119e2 <rcl_action_take_goal_response+0x62>
 80119ce:	280a      	cmp	r0, #10
 80119d0:	d007      	beq.n	80119e2 <rcl_action_take_goal_response+0x62>
 80119d2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80119d6:	f640 0337 	movw	r3, #2103	@ 0x837
 80119da:	4290      	cmp	r0, r2
 80119dc:	bf0c      	ite	eq
 80119de:	4618      	moveq	r0, r3
 80119e0:	2001      	movne	r0, #1
 80119e2:	bd70      	pop	{r4, r5, r6, pc}
 80119e4:	f7fd fd04 	bl	800f3f0 <rcutils_reset_error>
 80119e8:	f640 0036 	movw	r0, #2102	@ 0x836
 80119ec:	bd70      	pop	{r4, r5, r6, pc}
 80119ee:	f640 0036 	movw	r0, #2102	@ 0x836
 80119f2:	bd70      	pop	{r4, r5, r6, pc}
 80119f4:	200b      	movs	r0, #11
 80119f6:	bd70      	pop	{r4, r5, r6, pc}
 80119f8:	f640 0036 	movw	r0, #2102	@ 0x836
 80119fc:	4770      	bx	lr
 80119fe:	bf00      	nop

08011a00 <rcl_action_send_result_request>:
 8011a00:	b390      	cbz	r0, 8011a68 <rcl_action_send_result_request+0x68>
 8011a02:	b570      	push	{r4, r5, r6, lr}
 8011a04:	4604      	mov	r4, r0
 8011a06:	6800      	ldr	r0, [r0, #0]
 8011a08:	b348      	cbz	r0, 8011a5e <rcl_action_send_result_request+0x5e>
 8011a0a:	460e      	mov	r6, r1
 8011a0c:	4615      	mov	r5, r2
 8011a0e:	f7fd ffef 	bl	800f9f0 <rcl_client_is_valid>
 8011a12:	b1f8      	cbz	r0, 8011a54 <rcl_action_send_result_request+0x54>
 8011a14:	6820      	ldr	r0, [r4, #0]
 8011a16:	3004      	adds	r0, #4
 8011a18:	f7fd ffea 	bl	800f9f0 <rcl_client_is_valid>
 8011a1c:	b1d0      	cbz	r0, 8011a54 <rcl_action_send_result_request+0x54>
 8011a1e:	6820      	ldr	r0, [r4, #0]
 8011a20:	3008      	adds	r0, #8
 8011a22:	f7fd ffe5 	bl	800f9f0 <rcl_client_is_valid>
 8011a26:	b1a8      	cbz	r0, 8011a54 <rcl_action_send_result_request+0x54>
 8011a28:	6820      	ldr	r0, [r4, #0]
 8011a2a:	300c      	adds	r0, #12
 8011a2c:	f7fe ffa6 	bl	801097c <rcl_subscription_is_valid>
 8011a30:	b180      	cbz	r0, 8011a54 <rcl_action_send_result_request+0x54>
 8011a32:	6820      	ldr	r0, [r4, #0]
 8011a34:	3010      	adds	r0, #16
 8011a36:	f7fe ffa1 	bl	801097c <rcl_subscription_is_valid>
 8011a3a:	b158      	cbz	r0, 8011a54 <rcl_action_send_result_request+0x54>
 8011a3c:	b195      	cbz	r5, 8011a64 <rcl_action_send_result_request+0x64>
 8011a3e:	b18e      	cbz	r6, 8011a64 <rcl_action_send_result_request+0x64>
 8011a40:	6820      	ldr	r0, [r4, #0]
 8011a42:	462a      	mov	r2, r5
 8011a44:	4631      	mov	r1, r6
 8011a46:	3008      	adds	r0, #8
 8011a48:	f7fd ff52 	bl	800f8f0 <rcl_send_request>
 8011a4c:	3800      	subs	r0, #0
 8011a4e:	bf18      	it	ne
 8011a50:	2001      	movne	r0, #1
 8011a52:	bd70      	pop	{r4, r5, r6, pc}
 8011a54:	f7fd fccc 	bl	800f3f0 <rcutils_reset_error>
 8011a58:	f640 0036 	movw	r0, #2102	@ 0x836
 8011a5c:	bd70      	pop	{r4, r5, r6, pc}
 8011a5e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011a62:	bd70      	pop	{r4, r5, r6, pc}
 8011a64:	200b      	movs	r0, #11
 8011a66:	bd70      	pop	{r4, r5, r6, pc}
 8011a68:	f640 0036 	movw	r0, #2102	@ 0x836
 8011a6c:	4770      	bx	lr
 8011a6e:	bf00      	nop

08011a70 <rcl_action_take_result_response>:
 8011a70:	2800      	cmp	r0, #0
 8011a72:	d03a      	beq.n	8011aea <rcl_action_take_result_response+0x7a>
 8011a74:	b570      	push	{r4, r5, r6, lr}
 8011a76:	4604      	mov	r4, r0
 8011a78:	6800      	ldr	r0, [r0, #0]
 8011a7a:	b388      	cbz	r0, 8011ae0 <rcl_action_take_result_response+0x70>
 8011a7c:	460e      	mov	r6, r1
 8011a7e:	4615      	mov	r5, r2
 8011a80:	f7fd ffb6 	bl	800f9f0 <rcl_client_is_valid>
 8011a84:	b338      	cbz	r0, 8011ad6 <rcl_action_take_result_response+0x66>
 8011a86:	6820      	ldr	r0, [r4, #0]
 8011a88:	3004      	adds	r0, #4
 8011a8a:	f7fd ffb1 	bl	800f9f0 <rcl_client_is_valid>
 8011a8e:	b310      	cbz	r0, 8011ad6 <rcl_action_take_result_response+0x66>
 8011a90:	6820      	ldr	r0, [r4, #0]
 8011a92:	3008      	adds	r0, #8
 8011a94:	f7fd ffac 	bl	800f9f0 <rcl_client_is_valid>
 8011a98:	b1e8      	cbz	r0, 8011ad6 <rcl_action_take_result_response+0x66>
 8011a9a:	6820      	ldr	r0, [r4, #0]
 8011a9c:	300c      	adds	r0, #12
 8011a9e:	f7fe ff6d 	bl	801097c <rcl_subscription_is_valid>
 8011aa2:	b1c0      	cbz	r0, 8011ad6 <rcl_action_take_result_response+0x66>
 8011aa4:	6820      	ldr	r0, [r4, #0]
 8011aa6:	3010      	adds	r0, #16
 8011aa8:	f7fe ff68 	bl	801097c <rcl_subscription_is_valid>
 8011aac:	b198      	cbz	r0, 8011ad6 <rcl_action_take_result_response+0x66>
 8011aae:	b1d5      	cbz	r5, 8011ae6 <rcl_action_take_result_response+0x76>
 8011ab0:	b1ce      	cbz	r6, 8011ae6 <rcl_action_take_result_response+0x76>
 8011ab2:	6820      	ldr	r0, [r4, #0]
 8011ab4:	462a      	mov	r2, r5
 8011ab6:	4631      	mov	r1, r6
 8011ab8:	3008      	adds	r0, #8
 8011aba:	f7fd ff51 	bl	800f960 <rcl_take_response>
 8011abe:	b148      	cbz	r0, 8011ad4 <rcl_action_take_result_response+0x64>
 8011ac0:	280a      	cmp	r0, #10
 8011ac2:	d007      	beq.n	8011ad4 <rcl_action_take_result_response+0x64>
 8011ac4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011ac8:	f640 0337 	movw	r3, #2103	@ 0x837
 8011acc:	4290      	cmp	r0, r2
 8011ace:	bf0c      	ite	eq
 8011ad0:	4618      	moveq	r0, r3
 8011ad2:	2001      	movne	r0, #1
 8011ad4:	bd70      	pop	{r4, r5, r6, pc}
 8011ad6:	f7fd fc8b 	bl	800f3f0 <rcutils_reset_error>
 8011ada:	f640 0036 	movw	r0, #2102	@ 0x836
 8011ade:	bd70      	pop	{r4, r5, r6, pc}
 8011ae0:	f640 0036 	movw	r0, #2102	@ 0x836
 8011ae4:	bd70      	pop	{r4, r5, r6, pc}
 8011ae6:	200b      	movs	r0, #11
 8011ae8:	bd70      	pop	{r4, r5, r6, pc}
 8011aea:	f640 0036 	movw	r0, #2102	@ 0x836
 8011aee:	4770      	bx	lr

08011af0 <rcl_action_take_cancel_response>:
 8011af0:	2800      	cmp	r0, #0
 8011af2:	d03a      	beq.n	8011b6a <rcl_action_take_cancel_response+0x7a>
 8011af4:	b570      	push	{r4, r5, r6, lr}
 8011af6:	4604      	mov	r4, r0
 8011af8:	6800      	ldr	r0, [r0, #0]
 8011afa:	b388      	cbz	r0, 8011b60 <rcl_action_take_cancel_response+0x70>
 8011afc:	460e      	mov	r6, r1
 8011afe:	4615      	mov	r5, r2
 8011b00:	f7fd ff76 	bl	800f9f0 <rcl_client_is_valid>
 8011b04:	b338      	cbz	r0, 8011b56 <rcl_action_take_cancel_response+0x66>
 8011b06:	6820      	ldr	r0, [r4, #0]
 8011b08:	3004      	adds	r0, #4
 8011b0a:	f7fd ff71 	bl	800f9f0 <rcl_client_is_valid>
 8011b0e:	b310      	cbz	r0, 8011b56 <rcl_action_take_cancel_response+0x66>
 8011b10:	6820      	ldr	r0, [r4, #0]
 8011b12:	3008      	adds	r0, #8
 8011b14:	f7fd ff6c 	bl	800f9f0 <rcl_client_is_valid>
 8011b18:	b1e8      	cbz	r0, 8011b56 <rcl_action_take_cancel_response+0x66>
 8011b1a:	6820      	ldr	r0, [r4, #0]
 8011b1c:	300c      	adds	r0, #12
 8011b1e:	f7fe ff2d 	bl	801097c <rcl_subscription_is_valid>
 8011b22:	b1c0      	cbz	r0, 8011b56 <rcl_action_take_cancel_response+0x66>
 8011b24:	6820      	ldr	r0, [r4, #0]
 8011b26:	3010      	adds	r0, #16
 8011b28:	f7fe ff28 	bl	801097c <rcl_subscription_is_valid>
 8011b2c:	b198      	cbz	r0, 8011b56 <rcl_action_take_cancel_response+0x66>
 8011b2e:	b1d5      	cbz	r5, 8011b66 <rcl_action_take_cancel_response+0x76>
 8011b30:	b1ce      	cbz	r6, 8011b66 <rcl_action_take_cancel_response+0x76>
 8011b32:	6820      	ldr	r0, [r4, #0]
 8011b34:	462a      	mov	r2, r5
 8011b36:	4631      	mov	r1, r6
 8011b38:	3004      	adds	r0, #4
 8011b3a:	f7fd ff11 	bl	800f960 <rcl_take_response>
 8011b3e:	b148      	cbz	r0, 8011b54 <rcl_action_take_cancel_response+0x64>
 8011b40:	280a      	cmp	r0, #10
 8011b42:	d007      	beq.n	8011b54 <rcl_action_take_cancel_response+0x64>
 8011b44:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011b48:	f640 0337 	movw	r3, #2103	@ 0x837
 8011b4c:	4290      	cmp	r0, r2
 8011b4e:	bf0c      	ite	eq
 8011b50:	4618      	moveq	r0, r3
 8011b52:	2001      	movne	r0, #1
 8011b54:	bd70      	pop	{r4, r5, r6, pc}
 8011b56:	f7fd fc4b 	bl	800f3f0 <rcutils_reset_error>
 8011b5a:	f640 0036 	movw	r0, #2102	@ 0x836
 8011b5e:	bd70      	pop	{r4, r5, r6, pc}
 8011b60:	f640 0036 	movw	r0, #2102	@ 0x836
 8011b64:	bd70      	pop	{r4, r5, r6, pc}
 8011b66:	200b      	movs	r0, #11
 8011b68:	bd70      	pop	{r4, r5, r6, pc}
 8011b6a:	f640 0036 	movw	r0, #2102	@ 0x836
 8011b6e:	4770      	bx	lr

08011b70 <rcl_action_take_feedback>:
 8011b70:	2800      	cmp	r0, #0
 8011b72:	d038      	beq.n	8011be6 <rcl_action_take_feedback+0x76>
 8011b74:	b530      	push	{r4, r5, lr}
 8011b76:	4604      	mov	r4, r0
 8011b78:	6800      	ldr	r0, [r0, #0]
 8011b7a:	b091      	sub	sp, #68	@ 0x44
 8011b7c:	b378      	cbz	r0, 8011bde <rcl_action_take_feedback+0x6e>
 8011b7e:	460d      	mov	r5, r1
 8011b80:	f7fd ff36 	bl	800f9f0 <rcl_client_is_valid>
 8011b84:	b328      	cbz	r0, 8011bd2 <rcl_action_take_feedback+0x62>
 8011b86:	6820      	ldr	r0, [r4, #0]
 8011b88:	3004      	adds	r0, #4
 8011b8a:	f7fd ff31 	bl	800f9f0 <rcl_client_is_valid>
 8011b8e:	b300      	cbz	r0, 8011bd2 <rcl_action_take_feedback+0x62>
 8011b90:	6820      	ldr	r0, [r4, #0]
 8011b92:	3008      	adds	r0, #8
 8011b94:	f7fd ff2c 	bl	800f9f0 <rcl_client_is_valid>
 8011b98:	b1d8      	cbz	r0, 8011bd2 <rcl_action_take_feedback+0x62>
 8011b9a:	6820      	ldr	r0, [r4, #0]
 8011b9c:	300c      	adds	r0, #12
 8011b9e:	f7fe feed 	bl	801097c <rcl_subscription_is_valid>
 8011ba2:	b1b0      	cbz	r0, 8011bd2 <rcl_action_take_feedback+0x62>
 8011ba4:	6820      	ldr	r0, [r4, #0]
 8011ba6:	3010      	adds	r0, #16
 8011ba8:	f7fe fee8 	bl	801097c <rcl_subscription_is_valid>
 8011bac:	b188      	cbz	r0, 8011bd2 <rcl_action_take_feedback+0x62>
 8011bae:	b1ed      	cbz	r5, 8011bec <rcl_action_take_feedback+0x7c>
 8011bb0:	6820      	ldr	r0, [r4, #0]
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	466a      	mov	r2, sp
 8011bb6:	4629      	mov	r1, r5
 8011bb8:	300c      	adds	r0, #12
 8011bba:	f7fe fe83 	bl	80108c4 <rcl_take>
 8011bbe:	b160      	cbz	r0, 8011bda <rcl_action_take_feedback+0x6a>
 8011bc0:	f240 1391 	movw	r3, #401	@ 0x191
 8011bc4:	4298      	cmp	r0, r3
 8011bc6:	d014      	beq.n	8011bf2 <rcl_action_take_feedback+0x82>
 8011bc8:	280a      	cmp	r0, #10
 8011bca:	bf18      	it	ne
 8011bcc:	2001      	movne	r0, #1
 8011bce:	b011      	add	sp, #68	@ 0x44
 8011bd0:	bd30      	pop	{r4, r5, pc}
 8011bd2:	f7fd fc0d 	bl	800f3f0 <rcutils_reset_error>
 8011bd6:	f640 0036 	movw	r0, #2102	@ 0x836
 8011bda:	b011      	add	sp, #68	@ 0x44
 8011bdc:	bd30      	pop	{r4, r5, pc}
 8011bde:	f640 0036 	movw	r0, #2102	@ 0x836
 8011be2:	b011      	add	sp, #68	@ 0x44
 8011be4:	bd30      	pop	{r4, r5, pc}
 8011be6:	f640 0036 	movw	r0, #2102	@ 0x836
 8011bea:	4770      	bx	lr
 8011bec:	200b      	movs	r0, #11
 8011bee:	b011      	add	sp, #68	@ 0x44
 8011bf0:	bd30      	pop	{r4, r5, pc}
 8011bf2:	f640 0037 	movw	r0, #2103	@ 0x837
 8011bf6:	e7f0      	b.n	8011bda <rcl_action_take_feedback+0x6a>

08011bf8 <rcl_action_wait_set_add_action_client>:
 8011bf8:	2800      	cmp	r0, #0
 8011bfa:	d048      	beq.n	8011c8e <rcl_action_wait_set_add_action_client+0x96>
 8011bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bfe:	460c      	mov	r4, r1
 8011c00:	2900      	cmp	r1, #0
 8011c02:	d03c      	beq.n	8011c7e <rcl_action_wait_set_add_action_client+0x86>
 8011c04:	4605      	mov	r5, r0
 8011c06:	6808      	ldr	r0, [r1, #0]
 8011c08:	2800      	cmp	r0, #0
 8011c0a:	d038      	beq.n	8011c7e <rcl_action_wait_set_add_action_client+0x86>
 8011c0c:	4617      	mov	r7, r2
 8011c0e:	461e      	mov	r6, r3
 8011c10:	f7fd feee 	bl	800f9f0 <rcl_client_is_valid>
 8011c14:	b3b0      	cbz	r0, 8011c84 <rcl_action_wait_set_add_action_client+0x8c>
 8011c16:	6820      	ldr	r0, [r4, #0]
 8011c18:	3004      	adds	r0, #4
 8011c1a:	f7fd fee9 	bl	800f9f0 <rcl_client_is_valid>
 8011c1e:	b388      	cbz	r0, 8011c84 <rcl_action_wait_set_add_action_client+0x8c>
 8011c20:	6820      	ldr	r0, [r4, #0]
 8011c22:	3008      	adds	r0, #8
 8011c24:	f7fd fee4 	bl	800f9f0 <rcl_client_is_valid>
 8011c28:	b360      	cbz	r0, 8011c84 <rcl_action_wait_set_add_action_client+0x8c>
 8011c2a:	6820      	ldr	r0, [r4, #0]
 8011c2c:	300c      	adds	r0, #12
 8011c2e:	f7fe fea5 	bl	801097c <rcl_subscription_is_valid>
 8011c32:	b338      	cbz	r0, 8011c84 <rcl_action_wait_set_add_action_client+0x8c>
 8011c34:	6820      	ldr	r0, [r4, #0]
 8011c36:	3010      	adds	r0, #16
 8011c38:	f7fe fea0 	bl	801097c <rcl_subscription_is_valid>
 8011c3c:	b310      	cbz	r0, 8011c84 <rcl_action_wait_set_add_action_client+0x8c>
 8011c3e:	6821      	ldr	r1, [r4, #0]
 8011c40:	4628      	mov	r0, r5
 8011c42:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8011c46:	f7ff fcd1 	bl	80115ec <rcl_wait_set_add_client>
 8011c4a:	b9b8      	cbnz	r0, 8011c7c <rcl_action_wait_set_add_action_client+0x84>
 8011c4c:	6821      	ldr	r1, [r4, #0]
 8011c4e:	4628      	mov	r0, r5
 8011c50:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8011c54:	3104      	adds	r1, #4
 8011c56:	f7ff fcc9 	bl	80115ec <rcl_wait_set_add_client>
 8011c5a:	b978      	cbnz	r0, 8011c7c <rcl_action_wait_set_add_action_client+0x84>
 8011c5c:	6821      	ldr	r1, [r4, #0]
 8011c5e:	4628      	mov	r0, r5
 8011c60:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8011c64:	3108      	adds	r1, #8
 8011c66:	f7ff fcc1 	bl	80115ec <rcl_wait_set_add_client>
 8011c6a:	b938      	cbnz	r0, 8011c7c <rcl_action_wait_set_add_action_client+0x84>
 8011c6c:	6821      	ldr	r1, [r4, #0]
 8011c6e:	4628      	mov	r0, r5
 8011c70:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8011c74:	310c      	adds	r1, #12
 8011c76:	f7ff f969 	bl	8010f4c <rcl_wait_set_add_subscription>
 8011c7a:	b158      	cbz	r0, 8011c94 <rcl_action_wait_set_add_action_client+0x9c>
 8011c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c7e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c84:	f7fd fbb4 	bl	800f3f0 <rcutils_reset_error>
 8011c88:	f640 0036 	movw	r0, #2102	@ 0x836
 8011c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c8e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011c92:	4770      	bx	lr
 8011c94:	6821      	ldr	r1, [r4, #0]
 8011c96:	4628      	mov	r0, r5
 8011c98:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8011c9c:	3110      	adds	r1, #16
 8011c9e:	f7ff f955 	bl	8010f4c <rcl_wait_set_add_subscription>
 8011ca2:	2800      	cmp	r0, #0
 8011ca4:	d1ea      	bne.n	8011c7c <rcl_action_wait_set_add_action_client+0x84>
 8011ca6:	b11f      	cbz	r7, 8011cb0 <rcl_action_wait_set_add_action_client+0xb8>
 8011ca8:	6823      	ldr	r3, [r4, #0]
 8011caa:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8011cae:	603b      	str	r3, [r7, #0]
 8011cb0:	2e00      	cmp	r6, #0
 8011cb2:	d0e3      	beq.n	8011c7c <rcl_action_wait_set_add_action_client+0x84>
 8011cb4:	6823      	ldr	r3, [r4, #0]
 8011cb6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8011cba:	6033      	str	r3, [r6, #0]
 8011cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cbe:	bf00      	nop

08011cc0 <rcl_action_client_wait_set_get_entities_ready>:
 8011cc0:	2800      	cmp	r0, #0
 8011cc2:	d050      	beq.n	8011d66 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 8011cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cc8:	460c      	mov	r4, r1
 8011cca:	2900      	cmp	r1, #0
 8011ccc:	d03e      	beq.n	8011d4c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8011cce:	4605      	mov	r5, r0
 8011cd0:	6808      	ldr	r0, [r1, #0]
 8011cd2:	2800      	cmp	r0, #0
 8011cd4:	d03a      	beq.n	8011d4c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8011cd6:	4616      	mov	r6, r2
 8011cd8:	461f      	mov	r7, r3
 8011cda:	f7fd fe89 	bl	800f9f0 <rcl_client_is_valid>
 8011cde:	2800      	cmp	r0, #0
 8011ce0:	d038      	beq.n	8011d54 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8011ce2:	6820      	ldr	r0, [r4, #0]
 8011ce4:	3004      	adds	r0, #4
 8011ce6:	f7fd fe83 	bl	800f9f0 <rcl_client_is_valid>
 8011cea:	2800      	cmp	r0, #0
 8011cec:	d032      	beq.n	8011d54 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8011cee:	6820      	ldr	r0, [r4, #0]
 8011cf0:	3008      	adds	r0, #8
 8011cf2:	f7fd fe7d 	bl	800f9f0 <rcl_client_is_valid>
 8011cf6:	b368      	cbz	r0, 8011d54 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8011cf8:	6820      	ldr	r0, [r4, #0]
 8011cfa:	300c      	adds	r0, #12
 8011cfc:	f7fe fe3e 	bl	801097c <rcl_subscription_is_valid>
 8011d00:	b340      	cbz	r0, 8011d54 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8011d02:	6820      	ldr	r0, [r4, #0]
 8011d04:	3010      	adds	r0, #16
 8011d06:	f7fe fe39 	bl	801097c <rcl_subscription_is_valid>
 8011d0a:	b318      	cbz	r0, 8011d54 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8011d0c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 8011d10:	2a00      	cmp	r2, #0
 8011d12:	bf18      	it	ne
 8011d14:	2b00      	cmpne	r3, #0
 8011d16:	9b08      	ldr	r3, [sp, #32]
 8011d18:	bf0c      	ite	eq
 8011d1a:	2101      	moveq	r1, #1
 8011d1c:	2100      	movne	r1, #0
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	bf08      	it	eq
 8011d22:	f041 0101 	orreq.w	r1, r1, #1
 8011d26:	2f00      	cmp	r7, #0
 8011d28:	bf08      	it	eq
 8011d2a:	f041 0101 	orreq.w	r1, r1, #1
 8011d2e:	b9b9      	cbnz	r1, 8011d60 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8011d30:	b1b6      	cbz	r6, 8011d60 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8011d32:	6823      	ldr	r3, [r4, #0]
 8011d34:	686c      	ldr	r4, [r5, #4]
 8011d36:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 8011d3a:	428a      	cmp	r2, r1
 8011d3c:	4610      	mov	r0, r2
 8011d3e:	bf38      	it	cc
 8011d40:	4608      	movcc	r0, r1
 8011d42:	4284      	cmp	r4, r0
 8011d44:	d812      	bhi.n	8011d6c <rcl_action_client_wait_set_get_entities_ready+0xac>
 8011d46:	2001      	movs	r0, #1
 8011d48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d4c:	f640 0036 	movw	r0, #2102	@ 0x836
 8011d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d54:	f7fd fb4c 	bl	800f3f0 <rcutils_reset_error>
 8011d58:	f640 0036 	movw	r0, #2102	@ 0x836
 8011d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d60:	200b      	movs	r0, #11
 8011d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d66:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011d6a:	4770      	bx	lr
 8011d6c:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 8011d70:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 8011d74:	45f0      	cmp	r8, lr
 8011d76:	4640      	mov	r0, r8
 8011d78:	69ec      	ldr	r4, [r5, #28]
 8011d7a:	bf38      	it	cc
 8011d7c:	4670      	movcc	r0, lr
 8011d7e:	4560      	cmp	r0, ip
 8011d80:	bf38      	it	cc
 8011d82:	4660      	movcc	r0, ip
 8011d84:	4284      	cmp	r4, r0
 8011d86:	d9de      	bls.n	8011d46 <rcl_action_client_wait_set_get_entities_ready+0x86>
 8011d88:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8011d8c:	682d      	ldr	r5, [r5, #0]
 8011d8e:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 8011d92:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 8011d96:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8011d9a:	1a18      	subs	r0, r3, r0
 8011d9c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8011da0:	f103 0c0c 	add.w	ip, r3, #12
 8011da4:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8011da8:	fab0 f080 	clz	r0, r0
 8011dac:	eba5 050c 	sub.w	r5, r5, ip
 8011db0:	0940      	lsrs	r0, r0, #5
 8011db2:	fab5 f585 	clz	r5, r5
 8011db6:	096d      	lsrs	r5, r5, #5
 8011db8:	7035      	strb	r5, [r6, #0]
 8011dba:	f103 0510 	add.w	r5, r3, #16
 8011dbe:	1b64      	subs	r4, r4, r5
 8011dc0:	9d08      	ldr	r5, [sp, #32]
 8011dc2:	fab4 f484 	clz	r4, r4
 8011dc6:	0964      	lsrs	r4, r4, #5
 8011dc8:	703c      	strb	r4, [r7, #0]
 8011dca:	1d1c      	adds	r4, r3, #4
 8011dcc:	3308      	adds	r3, #8
 8011dce:	7028      	strb	r0, [r5, #0]
 8011dd0:	1b09      	subs	r1, r1, r4
 8011dd2:	2000      	movs	r0, #0
 8011dd4:	1ad3      	subs	r3, r2, r3
 8011dd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011dd8:	fab1 f181 	clz	r1, r1
 8011ddc:	fab3 f383 	clz	r3, r3
 8011de0:	0949      	lsrs	r1, r1, #5
 8011de2:	095b      	lsrs	r3, r3, #5
 8011de4:	7011      	strb	r1, [r2, #0]
 8011de6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011de8:	7013      	strb	r3, [r2, #0]
 8011dea:	e7b1      	b.n	8011d50 <rcl_action_client_wait_set_get_entities_ready+0x90>

08011dec <rcl_action_take_goal_request>:
 8011dec:	2800      	cmp	r0, #0
 8011dee:	d039      	beq.n	8011e64 <rcl_action_take_goal_request+0x78>
 8011df0:	b570      	push	{r4, r5, r6, lr}
 8011df2:	4604      	mov	r4, r0
 8011df4:	6800      	ldr	r0, [r0, #0]
 8011df6:	b380      	cbz	r0, 8011e5a <rcl_action_take_goal_request+0x6e>
 8011df8:	460e      	mov	r6, r1
 8011dfa:	4615      	mov	r5, r2
 8011dfc:	f7fe fc76 	bl	80106ec <rcl_service_is_valid>
 8011e00:	b330      	cbz	r0, 8011e50 <rcl_action_take_goal_request+0x64>
 8011e02:	6820      	ldr	r0, [r4, #0]
 8011e04:	3004      	adds	r0, #4
 8011e06:	f7fe fc71 	bl	80106ec <rcl_service_is_valid>
 8011e0a:	b308      	cbz	r0, 8011e50 <rcl_action_take_goal_request+0x64>
 8011e0c:	6820      	ldr	r0, [r4, #0]
 8011e0e:	3008      	adds	r0, #8
 8011e10:	f7fe fc6c 	bl	80106ec <rcl_service_is_valid>
 8011e14:	b1e0      	cbz	r0, 8011e50 <rcl_action_take_goal_request+0x64>
 8011e16:	6820      	ldr	r0, [r4, #0]
 8011e18:	300c      	adds	r0, #12
 8011e1a:	f007 fb97 	bl	801954c <rcl_publisher_is_valid>
 8011e1e:	b1b8      	cbz	r0, 8011e50 <rcl_action_take_goal_request+0x64>
 8011e20:	6820      	ldr	r0, [r4, #0]
 8011e22:	3010      	adds	r0, #16
 8011e24:	f007 fb92 	bl	801954c <rcl_publisher_is_valid>
 8011e28:	b190      	cbz	r0, 8011e50 <rcl_action_take_goal_request+0x64>
 8011e2a:	b1cd      	cbz	r5, 8011e60 <rcl_action_take_goal_request+0x74>
 8011e2c:	b1c6      	cbz	r6, 8011e60 <rcl_action_take_goal_request+0x74>
 8011e2e:	462a      	mov	r2, r5
 8011e30:	4631      	mov	r1, r6
 8011e32:	6820      	ldr	r0, [r4, #0]
 8011e34:	f7fe fc02 	bl	801063c <rcl_take_request>
 8011e38:	b148      	cbz	r0, 8011e4e <rcl_action_take_goal_request+0x62>
 8011e3a:	280a      	cmp	r0, #10
 8011e3c:	d007      	beq.n	8011e4e <rcl_action_take_goal_request+0x62>
 8011e3e:	f240 2259 	movw	r2, #601	@ 0x259
 8011e42:	f640 0399 	movw	r3, #2201	@ 0x899
 8011e46:	4290      	cmp	r0, r2
 8011e48:	bf0c      	ite	eq
 8011e4a:	4618      	moveq	r0, r3
 8011e4c:	2001      	movne	r0, #1
 8011e4e:	bd70      	pop	{r4, r5, r6, pc}
 8011e50:	f7fd face 	bl	800f3f0 <rcutils_reset_error>
 8011e54:	f640 0098 	movw	r0, #2200	@ 0x898
 8011e58:	bd70      	pop	{r4, r5, r6, pc}
 8011e5a:	f640 0098 	movw	r0, #2200	@ 0x898
 8011e5e:	bd70      	pop	{r4, r5, r6, pc}
 8011e60:	200b      	movs	r0, #11
 8011e62:	bd70      	pop	{r4, r5, r6, pc}
 8011e64:	f640 0098 	movw	r0, #2200	@ 0x898
 8011e68:	4770      	bx	lr
 8011e6a:	bf00      	nop

08011e6c <rcl_action_send_goal_response>:
 8011e6c:	b390      	cbz	r0, 8011ed4 <rcl_action_send_goal_response+0x68>
 8011e6e:	b570      	push	{r4, r5, r6, lr}
 8011e70:	4604      	mov	r4, r0
 8011e72:	6800      	ldr	r0, [r0, #0]
 8011e74:	b348      	cbz	r0, 8011eca <rcl_action_send_goal_response+0x5e>
 8011e76:	460e      	mov	r6, r1
 8011e78:	4615      	mov	r5, r2
 8011e7a:	f7fe fc37 	bl	80106ec <rcl_service_is_valid>
 8011e7e:	b1f8      	cbz	r0, 8011ec0 <rcl_action_send_goal_response+0x54>
 8011e80:	6820      	ldr	r0, [r4, #0]
 8011e82:	3004      	adds	r0, #4
 8011e84:	f7fe fc32 	bl	80106ec <rcl_service_is_valid>
 8011e88:	b1d0      	cbz	r0, 8011ec0 <rcl_action_send_goal_response+0x54>
 8011e8a:	6820      	ldr	r0, [r4, #0]
 8011e8c:	3008      	adds	r0, #8
 8011e8e:	f7fe fc2d 	bl	80106ec <rcl_service_is_valid>
 8011e92:	b1a8      	cbz	r0, 8011ec0 <rcl_action_send_goal_response+0x54>
 8011e94:	6820      	ldr	r0, [r4, #0]
 8011e96:	300c      	adds	r0, #12
 8011e98:	f007 fb58 	bl	801954c <rcl_publisher_is_valid>
 8011e9c:	b180      	cbz	r0, 8011ec0 <rcl_action_send_goal_response+0x54>
 8011e9e:	6820      	ldr	r0, [r4, #0]
 8011ea0:	3010      	adds	r0, #16
 8011ea2:	f007 fb53 	bl	801954c <rcl_publisher_is_valid>
 8011ea6:	b158      	cbz	r0, 8011ec0 <rcl_action_send_goal_response+0x54>
 8011ea8:	b195      	cbz	r5, 8011ed0 <rcl_action_send_goal_response+0x64>
 8011eaa:	b18e      	cbz	r6, 8011ed0 <rcl_action_send_goal_response+0x64>
 8011eac:	462a      	mov	r2, r5
 8011eae:	4631      	mov	r1, r6
 8011eb0:	6820      	ldr	r0, [r4, #0]
 8011eb2:	f7fe fc03 	bl	80106bc <rcl_send_response>
 8011eb6:	b110      	cbz	r0, 8011ebe <rcl_action_send_goal_response+0x52>
 8011eb8:	2802      	cmp	r0, #2
 8011eba:	bf18      	it	ne
 8011ebc:	2001      	movne	r0, #1
 8011ebe:	bd70      	pop	{r4, r5, r6, pc}
 8011ec0:	f7fd fa96 	bl	800f3f0 <rcutils_reset_error>
 8011ec4:	f640 0098 	movw	r0, #2200	@ 0x898
 8011ec8:	bd70      	pop	{r4, r5, r6, pc}
 8011eca:	f640 0098 	movw	r0, #2200	@ 0x898
 8011ece:	bd70      	pop	{r4, r5, r6, pc}
 8011ed0:	200b      	movs	r0, #11
 8011ed2:	bd70      	pop	{r4, r5, r6, pc}
 8011ed4:	f640 0098 	movw	r0, #2200	@ 0x898
 8011ed8:	4770      	bx	lr
 8011eda:	bf00      	nop

08011edc <rcl_action_take_result_request>:
 8011edc:	2800      	cmp	r0, #0
 8011ede:	d03a      	beq.n	8011f56 <rcl_action_take_result_request+0x7a>
 8011ee0:	b570      	push	{r4, r5, r6, lr}
 8011ee2:	4604      	mov	r4, r0
 8011ee4:	6800      	ldr	r0, [r0, #0]
 8011ee6:	b388      	cbz	r0, 8011f4c <rcl_action_take_result_request+0x70>
 8011ee8:	460e      	mov	r6, r1
 8011eea:	4615      	mov	r5, r2
 8011eec:	f7fe fbfe 	bl	80106ec <rcl_service_is_valid>
 8011ef0:	b338      	cbz	r0, 8011f42 <rcl_action_take_result_request+0x66>
 8011ef2:	6820      	ldr	r0, [r4, #0]
 8011ef4:	3004      	adds	r0, #4
 8011ef6:	f7fe fbf9 	bl	80106ec <rcl_service_is_valid>
 8011efa:	b310      	cbz	r0, 8011f42 <rcl_action_take_result_request+0x66>
 8011efc:	6820      	ldr	r0, [r4, #0]
 8011efe:	3008      	adds	r0, #8
 8011f00:	f7fe fbf4 	bl	80106ec <rcl_service_is_valid>
 8011f04:	b1e8      	cbz	r0, 8011f42 <rcl_action_take_result_request+0x66>
 8011f06:	6820      	ldr	r0, [r4, #0]
 8011f08:	300c      	adds	r0, #12
 8011f0a:	f007 fb1f 	bl	801954c <rcl_publisher_is_valid>
 8011f0e:	b1c0      	cbz	r0, 8011f42 <rcl_action_take_result_request+0x66>
 8011f10:	6820      	ldr	r0, [r4, #0]
 8011f12:	3010      	adds	r0, #16
 8011f14:	f007 fb1a 	bl	801954c <rcl_publisher_is_valid>
 8011f18:	b198      	cbz	r0, 8011f42 <rcl_action_take_result_request+0x66>
 8011f1a:	b1d5      	cbz	r5, 8011f52 <rcl_action_take_result_request+0x76>
 8011f1c:	b1ce      	cbz	r6, 8011f52 <rcl_action_take_result_request+0x76>
 8011f1e:	6820      	ldr	r0, [r4, #0]
 8011f20:	462a      	mov	r2, r5
 8011f22:	4631      	mov	r1, r6
 8011f24:	3008      	adds	r0, #8
 8011f26:	f7fe fb89 	bl	801063c <rcl_take_request>
 8011f2a:	b148      	cbz	r0, 8011f40 <rcl_action_take_result_request+0x64>
 8011f2c:	280a      	cmp	r0, #10
 8011f2e:	d007      	beq.n	8011f40 <rcl_action_take_result_request+0x64>
 8011f30:	f240 2259 	movw	r2, #601	@ 0x259
 8011f34:	f640 0399 	movw	r3, #2201	@ 0x899
 8011f38:	4290      	cmp	r0, r2
 8011f3a:	bf0c      	ite	eq
 8011f3c:	4618      	moveq	r0, r3
 8011f3e:	2001      	movne	r0, #1
 8011f40:	bd70      	pop	{r4, r5, r6, pc}
 8011f42:	f7fd fa55 	bl	800f3f0 <rcutils_reset_error>
 8011f46:	f640 0098 	movw	r0, #2200	@ 0x898
 8011f4a:	bd70      	pop	{r4, r5, r6, pc}
 8011f4c:	f640 0098 	movw	r0, #2200	@ 0x898
 8011f50:	bd70      	pop	{r4, r5, r6, pc}
 8011f52:	200b      	movs	r0, #11
 8011f54:	bd70      	pop	{r4, r5, r6, pc}
 8011f56:	f640 0098 	movw	r0, #2200	@ 0x898
 8011f5a:	4770      	bx	lr

08011f5c <rcl_action_take_cancel_request>:
 8011f5c:	2800      	cmp	r0, #0
 8011f5e:	d03a      	beq.n	8011fd6 <rcl_action_take_cancel_request+0x7a>
 8011f60:	b570      	push	{r4, r5, r6, lr}
 8011f62:	4604      	mov	r4, r0
 8011f64:	6800      	ldr	r0, [r0, #0]
 8011f66:	b388      	cbz	r0, 8011fcc <rcl_action_take_cancel_request+0x70>
 8011f68:	460e      	mov	r6, r1
 8011f6a:	4615      	mov	r5, r2
 8011f6c:	f7fe fbbe 	bl	80106ec <rcl_service_is_valid>
 8011f70:	b338      	cbz	r0, 8011fc2 <rcl_action_take_cancel_request+0x66>
 8011f72:	6820      	ldr	r0, [r4, #0]
 8011f74:	3004      	adds	r0, #4
 8011f76:	f7fe fbb9 	bl	80106ec <rcl_service_is_valid>
 8011f7a:	b310      	cbz	r0, 8011fc2 <rcl_action_take_cancel_request+0x66>
 8011f7c:	6820      	ldr	r0, [r4, #0]
 8011f7e:	3008      	adds	r0, #8
 8011f80:	f7fe fbb4 	bl	80106ec <rcl_service_is_valid>
 8011f84:	b1e8      	cbz	r0, 8011fc2 <rcl_action_take_cancel_request+0x66>
 8011f86:	6820      	ldr	r0, [r4, #0]
 8011f88:	300c      	adds	r0, #12
 8011f8a:	f007 fadf 	bl	801954c <rcl_publisher_is_valid>
 8011f8e:	b1c0      	cbz	r0, 8011fc2 <rcl_action_take_cancel_request+0x66>
 8011f90:	6820      	ldr	r0, [r4, #0]
 8011f92:	3010      	adds	r0, #16
 8011f94:	f007 fada 	bl	801954c <rcl_publisher_is_valid>
 8011f98:	b198      	cbz	r0, 8011fc2 <rcl_action_take_cancel_request+0x66>
 8011f9a:	b1d5      	cbz	r5, 8011fd2 <rcl_action_take_cancel_request+0x76>
 8011f9c:	b1ce      	cbz	r6, 8011fd2 <rcl_action_take_cancel_request+0x76>
 8011f9e:	6820      	ldr	r0, [r4, #0]
 8011fa0:	462a      	mov	r2, r5
 8011fa2:	4631      	mov	r1, r6
 8011fa4:	3004      	adds	r0, #4
 8011fa6:	f7fe fb49 	bl	801063c <rcl_take_request>
 8011faa:	b148      	cbz	r0, 8011fc0 <rcl_action_take_cancel_request+0x64>
 8011fac:	280a      	cmp	r0, #10
 8011fae:	d007      	beq.n	8011fc0 <rcl_action_take_cancel_request+0x64>
 8011fb0:	f240 2259 	movw	r2, #601	@ 0x259
 8011fb4:	f640 0399 	movw	r3, #2201	@ 0x899
 8011fb8:	4290      	cmp	r0, r2
 8011fba:	bf0c      	ite	eq
 8011fbc:	4618      	moveq	r0, r3
 8011fbe:	2001      	movne	r0, #1
 8011fc0:	bd70      	pop	{r4, r5, r6, pc}
 8011fc2:	f7fd fa15 	bl	800f3f0 <rcutils_reset_error>
 8011fc6:	f640 0098 	movw	r0, #2200	@ 0x898
 8011fca:	bd70      	pop	{r4, r5, r6, pc}
 8011fcc:	f640 0098 	movw	r0, #2200	@ 0x898
 8011fd0:	bd70      	pop	{r4, r5, r6, pc}
 8011fd2:	200b      	movs	r0, #11
 8011fd4:	bd70      	pop	{r4, r5, r6, pc}
 8011fd6:	f640 0098 	movw	r0, #2200	@ 0x898
 8011fda:	4770      	bx	lr

08011fdc <rcl_action_send_cancel_response>:
 8011fdc:	b398      	cbz	r0, 8012046 <rcl_action_send_cancel_response+0x6a>
 8011fde:	b570      	push	{r4, r5, r6, lr}
 8011fe0:	4604      	mov	r4, r0
 8011fe2:	6800      	ldr	r0, [r0, #0]
 8011fe4:	b350      	cbz	r0, 801203c <rcl_action_send_cancel_response+0x60>
 8011fe6:	460e      	mov	r6, r1
 8011fe8:	4615      	mov	r5, r2
 8011fea:	f7fe fb7f 	bl	80106ec <rcl_service_is_valid>
 8011fee:	b300      	cbz	r0, 8012032 <rcl_action_send_cancel_response+0x56>
 8011ff0:	6820      	ldr	r0, [r4, #0]
 8011ff2:	3004      	adds	r0, #4
 8011ff4:	f7fe fb7a 	bl	80106ec <rcl_service_is_valid>
 8011ff8:	b1d8      	cbz	r0, 8012032 <rcl_action_send_cancel_response+0x56>
 8011ffa:	6820      	ldr	r0, [r4, #0]
 8011ffc:	3008      	adds	r0, #8
 8011ffe:	f7fe fb75 	bl	80106ec <rcl_service_is_valid>
 8012002:	b1b0      	cbz	r0, 8012032 <rcl_action_send_cancel_response+0x56>
 8012004:	6820      	ldr	r0, [r4, #0]
 8012006:	300c      	adds	r0, #12
 8012008:	f007 faa0 	bl	801954c <rcl_publisher_is_valid>
 801200c:	b188      	cbz	r0, 8012032 <rcl_action_send_cancel_response+0x56>
 801200e:	6820      	ldr	r0, [r4, #0]
 8012010:	3010      	adds	r0, #16
 8012012:	f007 fa9b 	bl	801954c <rcl_publisher_is_valid>
 8012016:	b160      	cbz	r0, 8012032 <rcl_action_send_cancel_response+0x56>
 8012018:	b19d      	cbz	r5, 8012042 <rcl_action_send_cancel_response+0x66>
 801201a:	b196      	cbz	r6, 8012042 <rcl_action_send_cancel_response+0x66>
 801201c:	6820      	ldr	r0, [r4, #0]
 801201e:	462a      	mov	r2, r5
 8012020:	4631      	mov	r1, r6
 8012022:	3004      	adds	r0, #4
 8012024:	f7fe fb4a 	bl	80106bc <rcl_send_response>
 8012028:	b110      	cbz	r0, 8012030 <rcl_action_send_cancel_response+0x54>
 801202a:	2802      	cmp	r0, #2
 801202c:	bf18      	it	ne
 801202e:	2001      	movne	r0, #1
 8012030:	bd70      	pop	{r4, r5, r6, pc}
 8012032:	f7fd f9dd 	bl	800f3f0 <rcutils_reset_error>
 8012036:	f640 0098 	movw	r0, #2200	@ 0x898
 801203a:	bd70      	pop	{r4, r5, r6, pc}
 801203c:	f640 0098 	movw	r0, #2200	@ 0x898
 8012040:	bd70      	pop	{r4, r5, r6, pc}
 8012042:	200b      	movs	r0, #11
 8012044:	bd70      	pop	{r4, r5, r6, pc}
 8012046:	f640 0098 	movw	r0, #2200	@ 0x898
 801204a:	4770      	bx	lr

0801204c <rcl_action_wait_set_add_action_server>:
 801204c:	2800      	cmp	r0, #0
 801204e:	d04d      	beq.n	80120ec <rcl_action_wait_set_add_action_server+0xa0>
 8012050:	b570      	push	{r4, r5, r6, lr}
 8012052:	460c      	mov	r4, r1
 8012054:	b159      	cbz	r1, 801206e <rcl_action_wait_set_add_action_server+0x22>
 8012056:	4605      	mov	r5, r0
 8012058:	6808      	ldr	r0, [r1, #0]
 801205a:	b140      	cbz	r0, 801206e <rcl_action_wait_set_add_action_server+0x22>
 801205c:	4616      	mov	r6, r2
 801205e:	f7fe fb45 	bl	80106ec <rcl_service_is_valid>
 8012062:	b120      	cbz	r0, 801206e <rcl_action_wait_set_add_action_server+0x22>
 8012064:	6820      	ldr	r0, [r4, #0]
 8012066:	3004      	adds	r0, #4
 8012068:	f7fe fb40 	bl	80106ec <rcl_service_is_valid>
 801206c:	b910      	cbnz	r0, 8012074 <rcl_action_wait_set_add_action_server+0x28>
 801206e:	f640 0098 	movw	r0, #2200	@ 0x898
 8012072:	bd70      	pop	{r4, r5, r6, pc}
 8012074:	6820      	ldr	r0, [r4, #0]
 8012076:	3008      	adds	r0, #8
 8012078:	f7fe fb38 	bl	80106ec <rcl_service_is_valid>
 801207c:	2800      	cmp	r0, #0
 801207e:	d0f6      	beq.n	801206e <rcl_action_wait_set_add_action_server+0x22>
 8012080:	6820      	ldr	r0, [r4, #0]
 8012082:	300c      	adds	r0, #12
 8012084:	f007 fa7a 	bl	801957c <rcl_publisher_is_valid_except_context>
 8012088:	2800      	cmp	r0, #0
 801208a:	d0f0      	beq.n	801206e <rcl_action_wait_set_add_action_server+0x22>
 801208c:	6820      	ldr	r0, [r4, #0]
 801208e:	3010      	adds	r0, #16
 8012090:	f007 fa74 	bl	801957c <rcl_publisher_is_valid_except_context>
 8012094:	2800      	cmp	r0, #0
 8012096:	d0ea      	beq.n	801206e <rcl_action_wait_set_add_action_server+0x22>
 8012098:	6821      	ldr	r1, [r4, #0]
 801209a:	4628      	mov	r0, r5
 801209c:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80120a0:	f7ff fad0 	bl	8011644 <rcl_wait_set_add_service>
 80120a4:	2800      	cmp	r0, #0
 80120a6:	d1e4      	bne.n	8012072 <rcl_action_wait_set_add_action_server+0x26>
 80120a8:	6821      	ldr	r1, [r4, #0]
 80120aa:	4628      	mov	r0, r5
 80120ac:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80120b0:	3104      	adds	r1, #4
 80120b2:	f7ff fac7 	bl	8011644 <rcl_wait_set_add_service>
 80120b6:	2800      	cmp	r0, #0
 80120b8:	d1db      	bne.n	8012072 <rcl_action_wait_set_add_action_server+0x26>
 80120ba:	6821      	ldr	r1, [r4, #0]
 80120bc:	4628      	mov	r0, r5
 80120be:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80120c2:	3108      	adds	r1, #8
 80120c4:	f7ff fabe 	bl	8011644 <rcl_wait_set_add_service>
 80120c8:	2800      	cmp	r0, #0
 80120ca:	d1d2      	bne.n	8012072 <rcl_action_wait_set_add_action_server+0x26>
 80120cc:	6821      	ldr	r1, [r4, #0]
 80120ce:	4628      	mov	r0, r5
 80120d0:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80120d4:	3114      	adds	r1, #20
 80120d6:	f7ff fa59 	bl	801158c <rcl_wait_set_add_timer>
 80120da:	2800      	cmp	r0, #0
 80120dc:	d1c9      	bne.n	8012072 <rcl_action_wait_set_add_action_server+0x26>
 80120de:	2e00      	cmp	r6, #0
 80120e0:	d0c7      	beq.n	8012072 <rcl_action_wait_set_add_action_server+0x26>
 80120e2:	6823      	ldr	r3, [r4, #0]
 80120e4:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80120e8:	6033      	str	r3, [r6, #0]
 80120ea:	bd70      	pop	{r4, r5, r6, pc}
 80120ec:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80120f0:	4770      	bx	lr
 80120f2:	bf00      	nop

080120f4 <rcl_action_server_wait_set_get_entities_ready>:
 80120f4:	2800      	cmp	r0, #0
 80120f6:	d067      	beq.n	80121c8 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 80120f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120fc:	460c      	mov	r4, r1
 80120fe:	b161      	cbz	r1, 801211a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8012100:	4605      	mov	r5, r0
 8012102:	6808      	ldr	r0, [r1, #0]
 8012104:	b148      	cbz	r0, 801211a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8012106:	4616      	mov	r6, r2
 8012108:	4698      	mov	r8, r3
 801210a:	f7fe faef 	bl	80106ec <rcl_service_is_valid>
 801210e:	b120      	cbz	r0, 801211a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8012110:	6820      	ldr	r0, [r4, #0]
 8012112:	3004      	adds	r0, #4
 8012114:	f7fe faea 	bl	80106ec <rcl_service_is_valid>
 8012118:	b918      	cbnz	r0, 8012122 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801211a:	f640 0098 	movw	r0, #2200	@ 0x898
 801211e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012122:	6820      	ldr	r0, [r4, #0]
 8012124:	3008      	adds	r0, #8
 8012126:	f7fe fae1 	bl	80106ec <rcl_service_is_valid>
 801212a:	2800      	cmp	r0, #0
 801212c:	d0f5      	beq.n	801211a <rcl_action_server_wait_set_get_entities_ready+0x26>
 801212e:	6820      	ldr	r0, [r4, #0]
 8012130:	300c      	adds	r0, #12
 8012132:	f007 fa23 	bl	801957c <rcl_publisher_is_valid_except_context>
 8012136:	2800      	cmp	r0, #0
 8012138:	d0ef      	beq.n	801211a <rcl_action_server_wait_set_get_entities_ready+0x26>
 801213a:	6820      	ldr	r0, [r4, #0]
 801213c:	3010      	adds	r0, #16
 801213e:	f007 fa1d 	bl	801957c <rcl_publisher_is_valid_except_context>
 8012142:	2800      	cmp	r0, #0
 8012144:	d0e9      	beq.n	801211a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8012146:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801214a:	2a00      	cmp	r2, #0
 801214c:	bf18      	it	ne
 801214e:	2b00      	cmpne	r3, #0
 8012150:	bf0c      	ite	eq
 8012152:	2101      	moveq	r1, #1
 8012154:	2100      	movne	r1, #0
 8012156:	f1b8 0f00 	cmp.w	r8, #0
 801215a:	bf08      	it	eq
 801215c:	f041 0101 	orreq.w	r1, r1, #1
 8012160:	bba9      	cbnz	r1, 80121ce <rcl_action_server_wait_set_get_entities_ready+0xda>
 8012162:	b3a6      	cbz	r6, 80121ce <rcl_action_server_wait_set_get_entities_ready+0xda>
 8012164:	6821      	ldr	r1, [r4, #0]
 8012166:	2000      	movs	r0, #0
 8012168:	692c      	ldr	r4, [r5, #16]
 801216a:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 801216e:	6a2f      	ldr	r7, [r5, #32]
 8012170:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012174:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 8012178:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 801217c:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8012180:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 8012184:	1a64      	subs	r4, r4, r1
 8012186:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 801218a:	fab4 f484 	clz	r4, r4
 801218e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8012192:	0964      	lsrs	r4, r4, #5
 8012194:	7034      	strb	r4, [r6, #0]
 8012196:	1d0c      	adds	r4, r1, #4
 8012198:	1b2c      	subs	r4, r5, r4
 801219a:	fab4 f484 	clz	r4, r4
 801219e:	0964      	lsrs	r4, r4, #5
 80121a0:	f888 4000 	strb.w	r4, [r8]
 80121a4:	f101 0408 	add.w	r4, r1, #8
 80121a8:	1b1b      	subs	r3, r3, r4
 80121aa:	9c06      	ldr	r4, [sp, #24]
 80121ac:	fab3 f383 	clz	r3, r3
 80121b0:	095b      	lsrs	r3, r3, #5
 80121b2:	7023      	strb	r3, [r4, #0]
 80121b4:	f101 0314 	add.w	r3, r1, #20
 80121b8:	1ad3      	subs	r3, r2, r3
 80121ba:	9a07      	ldr	r2, [sp, #28]
 80121bc:	fab3 f383 	clz	r3, r3
 80121c0:	095b      	lsrs	r3, r3, #5
 80121c2:	7013      	strb	r3, [r2, #0]
 80121c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121c8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80121cc:	4770      	bx	lr
 80121ce:	200b      	movs	r0, #11
 80121d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080121d4 <_execute_event_handler>:
 80121d4:	2002      	movs	r0, #2
 80121d6:	4770      	bx	lr

080121d8 <_cancel_goal_event_handler>:
 80121d8:	2003      	movs	r0, #3
 80121da:	4770      	bx	lr

080121dc <_succeed_event_handler>:
 80121dc:	2004      	movs	r0, #4
 80121de:	4770      	bx	lr

080121e0 <_abort_event_handler>:
 80121e0:	2006      	movs	r0, #6
 80121e2:	4770      	bx	lr

080121e4 <_canceled_event_handler>:
 80121e4:	2005      	movs	r0, #5
 80121e6:	4770      	bx	lr

080121e8 <rcl_action_transition_goal_state>:
 80121e8:	b2c2      	uxtb	r2, r0
 80121ea:	2a06      	cmp	r2, #6
 80121ec:	d810      	bhi.n	8012210 <rcl_action_transition_goal_state+0x28>
 80121ee:	2904      	cmp	r1, #4
 80121f0:	d80e      	bhi.n	8012210 <rcl_action_transition_goal_state+0x28>
 80121f2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80121f6:	b410      	push	{r4}
 80121f8:	1853      	adds	r3, r2, r1
 80121fa:	4c06      	ldr	r4, [pc, #24]	@ (8012214 <rcl_action_transition_goal_state+0x2c>)
 80121fc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8012200:	b113      	cbz	r3, 8012208 <rcl_action_transition_goal_state+0x20>
 8012202:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012206:	4718      	bx	r3
 8012208:	2000      	movs	r0, #0
 801220a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801220e:	4770      	bx	lr
 8012210:	2000      	movs	r0, #0
 8012212:	4770      	bx	lr
 8012214:	0801c75c 	.word	0x0801c75c

08012218 <rcl_action_get_zero_initialized_cancel_response>:
 8012218:	b510      	push	{r4, lr}
 801221a:	4c07      	ldr	r4, [pc, #28]	@ (8012238 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801221c:	4686      	mov	lr, r0
 801221e:	4684      	mov	ip, r0
 8012220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012222:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012228:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801222c:	6823      	ldr	r3, [r4, #0]
 801222e:	4670      	mov	r0, lr
 8012230:	f8cc 3000 	str.w	r3, [ip]
 8012234:	bd10      	pop	{r4, pc}
 8012236:	bf00      	nop
 8012238:	0801c7e8 	.word	0x0801c7e8

0801223c <rclc_action_send_result_request>:
 801223c:	b1d0      	cbz	r0, 8012274 <rclc_action_send_result_request+0x38>
 801223e:	4684      	mov	ip, r0
 8012240:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8012244:	b500      	push	{lr}
 8012246:	b087      	sub	sp, #28
 8012248:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801224c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8012250:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8012254:	f10d 0e08 	add.w	lr, sp, #8
 8012258:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801225c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8012260:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8012264:	a902      	add	r1, sp, #8
 8012266:	3010      	adds	r0, #16
 8012268:	f7ff fbca 	bl	8011a00 <rcl_action_send_result_request>
 801226c:	b920      	cbnz	r0, 8012278 <rclc_action_send_result_request+0x3c>
 801226e:	b007      	add	sp, #28
 8012270:	f85d fb04 	ldr.w	pc, [sp], #4
 8012274:	200b      	movs	r0, #11
 8012276:	4770      	bx	lr
 8012278:	9001      	str	r0, [sp, #4]
 801227a:	f7fd f8b9 	bl	800f3f0 <rcutils_reset_error>
 801227e:	9801      	ldr	r0, [sp, #4]
 8012280:	b007      	add	sp, #28
 8012282:	f85d fb04 	ldr.w	pc, [sp], #4
 8012286:	bf00      	nop

08012288 <rclc_action_take_goal_handle>:
 8012288:	b160      	cbz	r0, 80122a4 <rclc_action_take_goal_handle+0x1c>
 801228a:	6883      	ldr	r3, [r0, #8]
 801228c:	b143      	cbz	r3, 80122a0 <rclc_action_take_goal_handle+0x18>
 801228e:	6819      	ldr	r1, [r3, #0]
 8012290:	2200      	movs	r2, #0
 8012292:	6081      	str	r1, [r0, #8]
 8012294:	721a      	strb	r2, [r3, #8]
 8012296:	68c1      	ldr	r1, [r0, #12]
 8012298:	621a      	str	r2, [r3, #32]
 801229a:	849a      	strh	r2, [r3, #36]	@ 0x24
 801229c:	6019      	str	r1, [r3, #0]
 801229e:	60c3      	str	r3, [r0, #12]
 80122a0:	4618      	mov	r0, r3
 80122a2:	4770      	bx	lr
 80122a4:	4603      	mov	r3, r0
 80122a6:	e7fb      	b.n	80122a0 <rclc_action_take_goal_handle+0x18>

080122a8 <rclc_action_remove_used_goal_handle>:
 80122a8:	b180      	cbz	r0, 80122cc <rclc_action_remove_used_goal_handle+0x24>
 80122aa:	b179      	cbz	r1, 80122cc <rclc_action_remove_used_goal_handle+0x24>
 80122ac:	68c3      	ldr	r3, [r0, #12]
 80122ae:	4299      	cmp	r1, r3
 80122b0:	d00d      	beq.n	80122ce <rclc_action_remove_used_goal_handle+0x26>
 80122b2:	b12b      	cbz	r3, 80122c0 <rclc_action_remove_used_goal_handle+0x18>
 80122b4:	681a      	ldr	r2, [r3, #0]
 80122b6:	4291      	cmp	r1, r2
 80122b8:	d003      	beq.n	80122c2 <rclc_action_remove_used_goal_handle+0x1a>
 80122ba:	4613      	mov	r3, r2
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d1f9      	bne.n	80122b4 <rclc_action_remove_used_goal_handle+0xc>
 80122c0:	4770      	bx	lr
 80122c2:	680a      	ldr	r2, [r1, #0]
 80122c4:	601a      	str	r2, [r3, #0]
 80122c6:	6883      	ldr	r3, [r0, #8]
 80122c8:	600b      	str	r3, [r1, #0]
 80122ca:	6081      	str	r1, [r0, #8]
 80122cc:	4770      	bx	lr
 80122ce:	680b      	ldr	r3, [r1, #0]
 80122d0:	60c3      	str	r3, [r0, #12]
 80122d2:	e7f8      	b.n	80122c6 <rclc_action_remove_used_goal_handle+0x1e>

080122d4 <rclc_action_find_goal_handle_by_uuid>:
 80122d4:	b538      	push	{r3, r4, r5, lr}
 80122d6:	b181      	cbz	r1, 80122fa <rclc_action_find_goal_handle_by_uuid+0x26>
 80122d8:	b178      	cbz	r0, 80122fa <rclc_action_find_goal_handle_by_uuid+0x26>
 80122da:	68c4      	ldr	r4, [r0, #12]
 80122dc:	460d      	mov	r5, r1
 80122de:	b914      	cbnz	r4, 80122e6 <rclc_action_find_goal_handle_by_uuid+0x12>
 80122e0:	e009      	b.n	80122f6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80122e2:	6824      	ldr	r4, [r4, #0]
 80122e4:	b13c      	cbz	r4, 80122f6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80122e6:	f104 0009 	add.w	r0, r4, #9
 80122ea:	2210      	movs	r2, #16
 80122ec:	4629      	mov	r1, r5
 80122ee:	f009 f82d 	bl	801b34c <memcmp>
 80122f2:	2800      	cmp	r0, #0
 80122f4:	d1f5      	bne.n	80122e2 <rclc_action_find_goal_handle_by_uuid+0xe>
 80122f6:	4620      	mov	r0, r4
 80122f8:	bd38      	pop	{r3, r4, r5, pc}
 80122fa:	2400      	movs	r4, #0
 80122fc:	4620      	mov	r0, r4
 80122fe:	bd38      	pop	{r3, r4, r5, pc}

08012300 <rclc_action_find_first_handle_by_status>:
 8012300:	b140      	cbz	r0, 8012314 <rclc_action_find_first_handle_by_status+0x14>
 8012302:	68c0      	ldr	r0, [r0, #12]
 8012304:	b910      	cbnz	r0, 801230c <rclc_action_find_first_handle_by_status+0xc>
 8012306:	e005      	b.n	8012314 <rclc_action_find_first_handle_by_status+0x14>
 8012308:	6800      	ldr	r0, [r0, #0]
 801230a:	b118      	cbz	r0, 8012314 <rclc_action_find_first_handle_by_status+0x14>
 801230c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8012310:	428b      	cmp	r3, r1
 8012312:	d1f9      	bne.n	8012308 <rclc_action_find_first_handle_by_status+0x8>
 8012314:	4770      	bx	lr
 8012316:	bf00      	nop

08012318 <rclc_action_find_first_terminated_handle>:
 8012318:	b140      	cbz	r0, 801232c <rclc_action_find_first_terminated_handle+0x14>
 801231a:	68c0      	ldr	r0, [r0, #12]
 801231c:	b910      	cbnz	r0, 8012324 <rclc_action_find_first_terminated_handle+0xc>
 801231e:	e005      	b.n	801232c <rclc_action_find_first_terminated_handle+0x14>
 8012320:	6800      	ldr	r0, [r0, #0]
 8012322:	b118      	cbz	r0, 801232c <rclc_action_find_first_terminated_handle+0x14>
 8012324:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8012328:	2b03      	cmp	r3, #3
 801232a:	ddf9      	ble.n	8012320 <rclc_action_find_first_terminated_handle+0x8>
 801232c:	4770      	bx	lr
 801232e:	bf00      	nop

08012330 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8012330:	b170      	cbz	r0, 8012350 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012332:	68c0      	ldr	r0, [r0, #12]
 8012334:	b160      	cbz	r0, 8012350 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012336:	b410      	push	{r4}
 8012338:	e001      	b.n	801233e <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801233a:	6800      	ldr	r0, [r0, #0]
 801233c:	b128      	cbz	r0, 801234a <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801233e:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8012342:	4299      	cmp	r1, r3
 8012344:	bf08      	it	eq
 8012346:	4294      	cmpeq	r4, r2
 8012348:	d1f7      	bne.n	801233a <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801234a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801234e:	4770      	bx	lr
 8012350:	4770      	bx	lr
 8012352:	bf00      	nop

08012354 <rclc_action_find_handle_by_result_request_sequence_number>:
 8012354:	b170      	cbz	r0, 8012374 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8012356:	68c0      	ldr	r0, [r0, #12]
 8012358:	b160      	cbz	r0, 8012374 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801235a:	b410      	push	{r4}
 801235c:	e001      	b.n	8012362 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801235e:	6800      	ldr	r0, [r0, #0]
 8012360:	b128      	cbz	r0, 801236e <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8012362:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8012366:	4299      	cmp	r1, r3
 8012368:	bf08      	it	eq
 801236a:	4294      	cmpeq	r4, r2
 801236c:	d1f7      	bne.n	801235e <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801236e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012372:	4770      	bx	lr
 8012374:	4770      	bx	lr
 8012376:	bf00      	nop

08012378 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8012378:	b170      	cbz	r0, 8012398 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801237a:	68c0      	ldr	r0, [r0, #12]
 801237c:	b160      	cbz	r0, 8012398 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801237e:	b410      	push	{r4}
 8012380:	e001      	b.n	8012386 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8012382:	6800      	ldr	r0, [r0, #0]
 8012384:	b128      	cbz	r0, 8012392 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8012386:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801238a:	4299      	cmp	r1, r3
 801238c:	bf08      	it	eq
 801238e:	4294      	cmpeq	r4, r2
 8012390:	d1f7      	bne.n	8012382 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8012392:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012396:	4770      	bx	lr
 8012398:	4770      	bx	lr
 801239a:	bf00      	nop

0801239c <rclc_action_find_first_handle_with_goal_response>:
 801239c:	b140      	cbz	r0, 80123b0 <rclc_action_find_first_handle_with_goal_response+0x14>
 801239e:	68c0      	ldr	r0, [r0, #12]
 80123a0:	b910      	cbnz	r0, 80123a8 <rclc_action_find_first_handle_with_goal_response+0xc>
 80123a2:	e005      	b.n	80123b0 <rclc_action_find_first_handle_with_goal_response+0x14>
 80123a4:	6800      	ldr	r0, [r0, #0]
 80123a6:	b118      	cbz	r0, 80123b0 <rclc_action_find_first_handle_with_goal_response+0x14>
 80123a8:	f890 3020 	ldrb.w	r3, [r0, #32]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d0f9      	beq.n	80123a4 <rclc_action_find_first_handle_with_goal_response+0x8>
 80123b0:	4770      	bx	lr
 80123b2:	bf00      	nop

080123b4 <rclc_action_find_first_handle_with_result_response>:
 80123b4:	b140      	cbz	r0, 80123c8 <rclc_action_find_first_handle_with_result_response+0x14>
 80123b6:	68c0      	ldr	r0, [r0, #12]
 80123b8:	b910      	cbnz	r0, 80123c0 <rclc_action_find_first_handle_with_result_response+0xc>
 80123ba:	e005      	b.n	80123c8 <rclc_action_find_first_handle_with_result_response+0x14>
 80123bc:	6800      	ldr	r0, [r0, #0]
 80123be:	b118      	cbz	r0, 80123c8 <rclc_action_find_first_handle_with_result_response+0x14>
 80123c0:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d0f9      	beq.n	80123bc <rclc_action_find_first_handle_with_result_response+0x8>
 80123c8:	4770      	bx	lr
 80123ca:	bf00      	nop

080123cc <rclc_action_server_response_goal_request>:
 80123cc:	b198      	cbz	r0, 80123f6 <rclc_action_server_response_goal_request+0x2a>
 80123ce:	2200      	movs	r2, #0
 80123d0:	460b      	mov	r3, r1
 80123d2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80123d6:	b510      	push	{r4, lr}
 80123d8:	6844      	ldr	r4, [r0, #4]
 80123da:	b086      	sub	sp, #24
 80123dc:	f104 0010 	add.w	r0, r4, #16
 80123e0:	9205      	str	r2, [sp, #20]
 80123e2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80123e6:	aa03      	add	r2, sp, #12
 80123e8:	f88d 300c 	strb.w	r3, [sp, #12]
 80123ec:	f7ff fd3e 	bl	8011e6c <rcl_action_send_goal_response>
 80123f0:	b918      	cbnz	r0, 80123fa <rclc_action_server_response_goal_request+0x2e>
 80123f2:	b006      	add	sp, #24
 80123f4:	bd10      	pop	{r4, pc}
 80123f6:	200b      	movs	r0, #11
 80123f8:	4770      	bx	lr
 80123fa:	9001      	str	r0, [sp, #4]
 80123fc:	f7fc fff8 	bl	800f3f0 <rcutils_reset_error>
 8012400:	9801      	ldr	r0, [sp, #4]
 8012402:	b006      	add	sp, #24
 8012404:	bd10      	pop	{r4, pc}
 8012406:	bf00      	nop

08012408 <rclc_action_server_goal_cancel_accept>:
 8012408:	b310      	cbz	r0, 8012450 <rclc_action_server_goal_cancel_accept+0x48>
 801240a:	b510      	push	{r4, lr}
 801240c:	b090      	sub	sp, #64	@ 0x40
 801240e:	4604      	mov	r4, r0
 8012410:	a806      	add	r0, sp, #24
 8012412:	f7ff ff01 	bl	8012218 <rcl_action_get_zero_initialized_cancel_response>
 8012416:	2300      	movs	r3, #0
 8012418:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801241c:	46ec      	mov	ip, sp
 801241e:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8012422:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8012426:	f88d 3018 	strb.w	r3, [sp, #24]
 801242a:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801242e:	f8cd d01c 	str.w	sp, [sp, #28]
 8012432:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012436:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8012458 <rclc_action_server_goal_cancel_accept+0x50>
 801243a:	6860      	ldr	r0, [r4, #4]
 801243c:	aa06      	add	r2, sp, #24
 801243e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8012442:	3010      	adds	r0, #16
 8012444:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012448:	f7ff fdc8 	bl	8011fdc <rcl_action_send_cancel_response>
 801244c:	b010      	add	sp, #64	@ 0x40
 801244e:	bd10      	pop	{r4, pc}
 8012450:	200b      	movs	r0, #11
 8012452:	4770      	bx	lr
 8012454:	f3af 8000 	nop.w
 8012458:	00000001 	.word	0x00000001
 801245c:	00000001 	.word	0x00000001

08012460 <rclc_action_server_goal_cancel_reject>:
 8012460:	b082      	sub	sp, #8
 8012462:	b530      	push	{r4, r5, lr}
 8012464:	b08b      	sub	sp, #44	@ 0x2c
 8012466:	ac0e      	add	r4, sp, #56	@ 0x38
 8012468:	e884 000c 	stmia.w	r4, {r2, r3}
 801246c:	b188      	cbz	r0, 8012492 <rclc_action_server_goal_cancel_reject+0x32>
 801246e:	4604      	mov	r4, r0
 8012470:	a801      	add	r0, sp, #4
 8012472:	460d      	mov	r5, r1
 8012474:	f7ff fed0 	bl	8012218 <rcl_action_get_zero_initialized_cancel_response>
 8012478:	aa01      	add	r2, sp, #4
 801247a:	a90e      	add	r1, sp, #56	@ 0x38
 801247c:	f104 0010 	add.w	r0, r4, #16
 8012480:	f88d 5004 	strb.w	r5, [sp, #4]
 8012484:	f7ff fdaa 	bl	8011fdc <rcl_action_send_cancel_response>
 8012488:	b00b      	add	sp, #44	@ 0x2c
 801248a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801248e:	b002      	add	sp, #8
 8012490:	4770      	bx	lr
 8012492:	200b      	movs	r0, #11
 8012494:	b00b      	add	sp, #44	@ 0x2c
 8012496:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801249a:	b002      	add	sp, #8
 801249c:	4770      	bx	lr
 801249e:	bf00      	nop

080124a0 <__atomic_load_8>:
 80124a0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80124a4:	4a16      	ldr	r2, [pc, #88]	@ (8012500 <__atomic_load_8+0x60>)
 80124a6:	4b17      	ldr	r3, [pc, #92]	@ (8012504 <__atomic_load_8+0x64>)
 80124a8:	f04f 0c01 	mov.w	ip, #1
 80124ac:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80124b0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80124b4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80124b8:	fb02 f101 	mul.w	r1, r2, r1
 80124bc:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80124c0:	fba3 2301 	umull	r2, r3, r3, r1
 80124c4:	091b      	lsrs	r3, r3, #4
 80124c6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80124ca:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80124ce:	b4d0      	push	{r4, r6, r7}
 80124d0:	1ac9      	subs	r1, r1, r3
 80124d2:	4c0d      	ldr	r4, [pc, #52]	@ (8012508 <__atomic_load_8+0x68>)
 80124d4:	1862      	adds	r2, r4, r1
 80124d6:	e8d2 3f4f 	ldrexb	r3, [r2]
 80124da:	e8c2 cf46 	strexb	r6, ip, [r2]
 80124de:	2e00      	cmp	r6, #0
 80124e0:	d1f9      	bne.n	80124d6 <__atomic_load_8+0x36>
 80124e2:	b2db      	uxtb	r3, r3
 80124e4:	f3bf 8f5b 	dmb	ish
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d1f4      	bne.n	80124d6 <__atomic_load_8+0x36>
 80124ec:	e9d0 6700 	ldrd	r6, r7, [r0]
 80124f0:	f3bf 8f5b 	dmb	ish
 80124f4:	5463      	strb	r3, [r4, r1]
 80124f6:	4630      	mov	r0, r6
 80124f8:	4639      	mov	r1, r7
 80124fa:	bcd0      	pop	{r4, r6, r7}
 80124fc:	4770      	bx	lr
 80124fe:	bf00      	nop
 8012500:	27d4eb2d 	.word	0x27d4eb2d
 8012504:	b21642c9 	.word	0xb21642c9
 8012508:	24063cb8 	.word	0x24063cb8

0801250c <__atomic_store_8>:
 801250c:	b570      	push	{r4, r5, r6, lr}
 801250e:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8012512:	4916      	ldr	r1, [pc, #88]	@ (801256c <__atomic_store_8+0x60>)
 8012514:	4c16      	ldr	r4, [pc, #88]	@ (8012570 <__atomic_store_8+0x64>)
 8012516:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 801251a:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801251e:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8012522:	fb01 fe0e 	mul.w	lr, r1, lr
 8012526:	4913      	ldr	r1, [pc, #76]	@ (8012574 <__atomic_store_8+0x68>)
 8012528:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 801252c:	fba1 510e 	umull	r5, r1, r1, lr
 8012530:	f04f 0501 	mov.w	r5, #1
 8012534:	0909      	lsrs	r1, r1, #4
 8012536:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801253a:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801253e:	ebae 0e01 	sub.w	lr, lr, r1
 8012542:	eb04 0c0e 	add.w	ip, r4, lr
 8012546:	e8dc 1f4f 	ldrexb	r1, [ip]
 801254a:	e8cc 5f46 	strexb	r6, r5, [ip]
 801254e:	2e00      	cmp	r6, #0
 8012550:	d1f9      	bne.n	8012546 <__atomic_store_8+0x3a>
 8012552:	b2c9      	uxtb	r1, r1
 8012554:	f3bf 8f5b 	dmb	ish
 8012558:	2900      	cmp	r1, #0
 801255a:	d1f4      	bne.n	8012546 <__atomic_store_8+0x3a>
 801255c:	e9c0 2300 	strd	r2, r3, [r0]
 8012560:	f3bf 8f5b 	dmb	ish
 8012564:	f804 100e 	strb.w	r1, [r4, lr]
 8012568:	bd70      	pop	{r4, r5, r6, pc}
 801256a:	bf00      	nop
 801256c:	27d4eb2d 	.word	0x27d4eb2d
 8012570:	24063cb8 	.word	0x24063cb8
 8012574:	b21642c9 	.word	0xb21642c9

08012578 <__atomic_exchange_8>:
 8012578:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801257c:	4917      	ldr	r1, [pc, #92]	@ (80125dc <__atomic_exchange_8+0x64>)
 801257e:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8012582:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8012586:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801258a:	fb01 fc0c 	mul.w	ip, r1, ip
 801258e:	4914      	ldr	r1, [pc, #80]	@ (80125e0 <__atomic_exchange_8+0x68>)
 8012590:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8012594:	b570      	push	{r4, r5, r6, lr}
 8012596:	4686      	mov	lr, r0
 8012598:	fba1 010c 	umull	r0, r1, r1, ip
 801259c:	4d11      	ldr	r5, [pc, #68]	@ (80125e4 <__atomic_exchange_8+0x6c>)
 801259e:	f04f 0001 	mov.w	r0, #1
 80125a2:	0909      	lsrs	r1, r1, #4
 80125a4:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80125a8:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 80125ac:	ebac 0c01 	sub.w	ip, ip, r1
 80125b0:	eb05 010c 	add.w	r1, r5, ip
 80125b4:	e8d1 4f4f 	ldrexb	r4, [r1]
 80125b8:	e8c1 0f46 	strexb	r6, r0, [r1]
 80125bc:	2e00      	cmp	r6, #0
 80125be:	d1f9      	bne.n	80125b4 <__atomic_exchange_8+0x3c>
 80125c0:	b2e4      	uxtb	r4, r4
 80125c2:	f3bf 8f5b 	dmb	ish
 80125c6:	2c00      	cmp	r4, #0
 80125c8:	d1f4      	bne.n	80125b4 <__atomic_exchange_8+0x3c>
 80125ca:	e9de 0100 	ldrd	r0, r1, [lr]
 80125ce:	e9ce 2300 	strd	r2, r3, [lr]
 80125d2:	f3bf 8f5b 	dmb	ish
 80125d6:	f805 400c 	strb.w	r4, [r5, ip]
 80125da:	bd70      	pop	{r4, r5, r6, pc}
 80125dc:	27d4eb2d 	.word	0x27d4eb2d
 80125e0:	b21642c9 	.word	0xb21642c9
 80125e4:	24063cb8 	.word	0x24063cb8

080125e8 <rcutils_get_env>:
 80125e8:	b168      	cbz	r0, 8012606 <rcutils_get_env+0x1e>
 80125ea:	b510      	push	{r4, lr}
 80125ec:	460c      	mov	r4, r1
 80125ee:	b129      	cbz	r1, 80125fc <rcutils_get_env+0x14>
 80125f0:	f008 fa2c 	bl	801aa4c <getenv>
 80125f4:	b120      	cbz	r0, 8012600 <rcutils_get_env+0x18>
 80125f6:	6020      	str	r0, [r4, #0]
 80125f8:	2000      	movs	r0, #0
 80125fa:	bd10      	pop	{r4, pc}
 80125fc:	4803      	ldr	r0, [pc, #12]	@ (801260c <rcutils_get_env+0x24>)
 80125fe:	bd10      	pop	{r4, pc}
 8012600:	4b03      	ldr	r3, [pc, #12]	@ (8012610 <rcutils_get_env+0x28>)
 8012602:	6023      	str	r3, [r4, #0]
 8012604:	bd10      	pop	{r4, pc}
 8012606:	4803      	ldr	r0, [pc, #12]	@ (8012614 <rcutils_get_env+0x2c>)
 8012608:	4770      	bx	lr
 801260a:	bf00      	nop
 801260c:	0801c828 	.word	0x0801c828
 8012610:	0801cec0 	.word	0x0801cec0
 8012614:	0801c80c 	.word	0x0801c80c

08012618 <rcutils_is_directory>:
 8012618:	2000      	movs	r0, #0
 801261a:	4770      	bx	lr

0801261c <rcutils_join_path>:
 801261c:	b082      	sub	sp, #8
 801261e:	2000      	movs	r0, #0
 8012620:	e88d 000c 	stmia.w	sp, {r2, r3}
 8012624:	b002      	add	sp, #8
 8012626:	4770      	bx	lr

08012628 <rcutils_to_native_path>:
 8012628:	b084      	sub	sp, #16
 801262a:	2000      	movs	r0, #0
 801262c:	f10d 0c04 	add.w	ip, sp, #4
 8012630:	b004      	add	sp, #16
 8012632:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8012636:	4770      	bx	lr

08012638 <rcutils_format_string_limit>:
 8012638:	b40f      	push	{r0, r1, r2, r3}
 801263a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801263c:	b083      	sub	sp, #12
 801263e:	ac08      	add	r4, sp, #32
 8012640:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8012642:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012646:	b326      	cbz	r6, 8012692 <rcutils_format_string_limit+0x5a>
 8012648:	a808      	add	r0, sp, #32
 801264a:	f7fc feab 	bl	800f3a4 <rcutils_allocator_is_valid>
 801264e:	b300      	cbz	r0, 8012692 <rcutils_format_string_limit+0x5a>
 8012650:	2100      	movs	r1, #0
 8012652:	ab0f      	add	r3, sp, #60	@ 0x3c
 8012654:	4632      	mov	r2, r6
 8012656:	4608      	mov	r0, r1
 8012658:	e9cd 3300 	strd	r3, r3, [sp]
 801265c:	f000 f906 	bl	801286c <rcutils_vsnprintf>
 8012660:	1c43      	adds	r3, r0, #1
 8012662:	4605      	mov	r5, r0
 8012664:	d015      	beq.n	8012692 <rcutils_format_string_limit+0x5a>
 8012666:	1c47      	adds	r7, r0, #1
 8012668:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801266a:	429f      	cmp	r7, r3
 801266c:	d901      	bls.n	8012672 <rcutils_format_string_limit+0x3a>
 801266e:	1e5d      	subs	r5, r3, #1
 8012670:	461f      	mov	r7, r3
 8012672:	9b08      	ldr	r3, [sp, #32]
 8012674:	4638      	mov	r0, r7
 8012676:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012678:	4798      	blx	r3
 801267a:	4604      	mov	r4, r0
 801267c:	b148      	cbz	r0, 8012692 <rcutils_format_string_limit+0x5a>
 801267e:	4632      	mov	r2, r6
 8012680:	4639      	mov	r1, r7
 8012682:	9b01      	ldr	r3, [sp, #4]
 8012684:	f000 f8f2 	bl	801286c <rcutils_vsnprintf>
 8012688:	2800      	cmp	r0, #0
 801268a:	db09      	blt.n	80126a0 <rcutils_format_string_limit+0x68>
 801268c:	2300      	movs	r3, #0
 801268e:	5563      	strb	r3, [r4, r5]
 8012690:	e000      	b.n	8012694 <rcutils_format_string_limit+0x5c>
 8012692:	2400      	movs	r4, #0
 8012694:	4620      	mov	r0, r4
 8012696:	b003      	add	sp, #12
 8012698:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801269c:	b004      	add	sp, #16
 801269e:	4770      	bx	lr
 80126a0:	4620      	mov	r0, r4
 80126a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80126a4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80126a6:	2400      	movs	r4, #0
 80126a8:	4798      	blx	r3
 80126aa:	e7f3      	b.n	8012694 <rcutils_format_string_limit+0x5c>

080126ac <rcutils_repl_str>:
 80126ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126b0:	ed2d 8b02 	vpush	{d8}
 80126b4:	b087      	sub	sp, #28
 80126b6:	2600      	movs	r6, #0
 80126b8:	4680      	mov	r8, r0
 80126ba:	468a      	mov	sl, r1
 80126bc:	9000      	str	r0, [sp, #0]
 80126be:	4608      	mov	r0, r1
 80126c0:	ee08 2a10 	vmov	s16, r2
 80126c4:	4699      	mov	r9, r3
 80126c6:	2510      	movs	r5, #16
 80126c8:	f7ed fe14 	bl	80002f4 <strlen>
 80126cc:	4637      	mov	r7, r6
 80126ce:	46b3      	mov	fp, r6
 80126d0:	9001      	str	r0, [sp, #4]
 80126d2:	e01e      	b.n	8012712 <rcutils_repl_str+0x66>
 80126d4:	f10b 0b01 	add.w	fp, fp, #1
 80126d8:	9b01      	ldr	r3, [sp, #4]
 80126da:	455e      	cmp	r6, fp
 80126dc:	eb04 0803 	add.w	r8, r4, r3
 80126e0:	d211      	bcs.n	8012706 <rcutils_repl_str+0x5a>
 80126e2:	442e      	add	r6, r5
 80126e4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80126e8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80126ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80126f0:	00b1      	lsls	r1, r6, #2
 80126f2:	4798      	blx	r3
 80126f4:	2800      	cmp	r0, #0
 80126f6:	f000 8088 	beq.w	801280a <rcutils_repl_str+0x15e>
 80126fa:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 80126fe:	4607      	mov	r7, r0
 8012700:	bf28      	it	cs
 8012702:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8012706:	9a00      	ldr	r2, [sp, #0]
 8012708:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 801270c:	1aa4      	subs	r4, r4, r2
 801270e:	f843 4c04 	str.w	r4, [r3, #-4]
 8012712:	4651      	mov	r1, sl
 8012714:	4640      	mov	r0, r8
 8012716:	f008 fe6a 	bl	801b3ee <strstr>
 801271a:	4604      	mov	r4, r0
 801271c:	4638      	mov	r0, r7
 801271e:	2c00      	cmp	r4, #0
 8012720:	d1d8      	bne.n	80126d4 <rcutils_repl_str+0x28>
 8012722:	4640      	mov	r0, r8
 8012724:	f7ed fde6 	bl	80002f4 <strlen>
 8012728:	9b00      	ldr	r3, [sp, #0]
 801272a:	eba8 0803 	sub.w	r8, r8, r3
 801272e:	eb08 0400 	add.w	r4, r8, r0
 8012732:	9402      	str	r4, [sp, #8]
 8012734:	f1bb 0f00 	cmp.w	fp, #0
 8012738:	d045      	beq.n	80127c6 <rcutils_repl_str+0x11a>
 801273a:	ee18 0a10 	vmov	r0, s16
 801273e:	f7ed fdd9 	bl	80002f4 <strlen>
 8012742:	9a01      	ldr	r2, [sp, #4]
 8012744:	4606      	mov	r6, r0
 8012746:	f8d9 3000 	ldr.w	r3, [r9]
 801274a:	1a82      	subs	r2, r0, r2
 801274c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012750:	fb0b 4202 	mla	r2, fp, r2, r4
 8012754:	1c50      	adds	r0, r2, #1
 8012756:	9205      	str	r2, [sp, #20]
 8012758:	4798      	blx	r3
 801275a:	4682      	mov	sl, r0
 801275c:	2800      	cmp	r0, #0
 801275e:	d054      	beq.n	801280a <rcutils_repl_str+0x15e>
 8012760:	683a      	ldr	r2, [r7, #0]
 8012762:	463d      	mov	r5, r7
 8012764:	9900      	ldr	r1, [sp, #0]
 8012766:	2401      	movs	r4, #1
 8012768:	f008 ff39 	bl	801b5de <memcpy>
 801276c:	683b      	ldr	r3, [r7, #0]
 801276e:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8012772:	eb0a 0803 	add.w	r8, sl, r3
 8012776:	ee18 7a10 	vmov	r7, s16
 801277a:	f8dd a000 	ldr.w	sl, [sp]
 801277e:	f8cd 9000 	str.w	r9, [sp]
 8012782:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012786:	4632      	mov	r2, r6
 8012788:	4639      	mov	r1, r7
 801278a:	4640      	mov	r0, r8
 801278c:	44b0      	add	r8, r6
 801278e:	f008 ff26 	bl	801b5de <memcpy>
 8012792:	f855 2b04 	ldr.w	r2, [r5], #4
 8012796:	45a3      	cmp	fp, r4
 8012798:	444a      	add	r2, r9
 801279a:	eb0a 0102 	add.w	r1, sl, r2
 801279e:	d02a      	beq.n	80127f6 <rcutils_repl_str+0x14a>
 80127a0:	6828      	ldr	r0, [r5, #0]
 80127a2:	1a82      	subs	r2, r0, r2
 80127a4:	4640      	mov	r0, r8
 80127a6:	4490      	add	r8, r2
 80127a8:	f008 ff19 	bl	801b5de <memcpy>
 80127ac:	1c62      	adds	r2, r4, #1
 80127ae:	45a3      	cmp	fp, r4
 80127b0:	4614      	mov	r4, r2
 80127b2:	d8e8      	bhi.n	8012786 <rcutils_repl_str+0xda>
 80127b4:	f8dd 9000 	ldr.w	r9, [sp]
 80127b8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 80127bc:	2300      	movs	r3, #0
 80127be:	9a05      	ldr	r2, [sp, #20]
 80127c0:	f80a 3002 	strb.w	r3, [sl, r2]
 80127c4:	e00b      	b.n	80127de <rcutils_repl_str+0x132>
 80127c6:	4620      	mov	r0, r4
 80127c8:	f8d9 3000 	ldr.w	r3, [r9]
 80127cc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80127d0:	3001      	adds	r0, #1
 80127d2:	4798      	blx	r3
 80127d4:	4682      	mov	sl, r0
 80127d6:	b110      	cbz	r0, 80127de <rcutils_repl_str+0x132>
 80127d8:	9900      	ldr	r1, [sp, #0]
 80127da:	f008 fef8 	bl	801b5ce <strcpy>
 80127de:	4638      	mov	r0, r7
 80127e0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80127e4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80127e8:	4798      	blx	r3
 80127ea:	4650      	mov	r0, sl
 80127ec:	b007      	add	sp, #28
 80127ee:	ecbd 8b02 	vpop	{d8}
 80127f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127f6:	9b02      	ldr	r3, [sp, #8]
 80127f8:	4640      	mov	r0, r8
 80127fa:	f8dd 9000 	ldr.w	r9, [sp]
 80127fe:	1a9a      	subs	r2, r3, r2
 8012800:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8012804:	f008 feeb 	bl	801b5de <memcpy>
 8012808:	e7d8      	b.n	80127bc <rcutils_repl_str+0x110>
 801280a:	f04f 0a00 	mov.w	sl, #0
 801280e:	e7e6      	b.n	80127de <rcutils_repl_str+0x132>

08012810 <rcutils_snprintf>:
 8012810:	b40c      	push	{r2, r3}
 8012812:	b530      	push	{r4, r5, lr}
 8012814:	b083      	sub	sp, #12
 8012816:	ab06      	add	r3, sp, #24
 8012818:	f853 2b04 	ldr.w	r2, [r3], #4
 801281c:	9301      	str	r3, [sp, #4]
 801281e:	b1e2      	cbz	r2, 801285a <rcutils_snprintf+0x4a>
 8012820:	fab0 f480 	clz	r4, r0
 8012824:	fab1 f581 	clz	r5, r1
 8012828:	ea50 0c01 	orrs.w	ip, r0, r1
 801282c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8012830:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8012834:	d008      	beq.n	8012848 <rcutils_snprintf+0x38>
 8012836:	b984      	cbnz	r4, 801285a <rcutils_snprintf+0x4a>
 8012838:	b97d      	cbnz	r5, 801285a <rcutils_snprintf+0x4a>
 801283a:	f008 fce5 	bl	801b208 <vsniprintf>
 801283e:	b003      	add	sp, #12
 8012840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012844:	b002      	add	sp, #8
 8012846:	4770      	bx	lr
 8012848:	4661      	mov	r1, ip
 801284a:	4660      	mov	r0, ip
 801284c:	f008 fcdc 	bl	801b208 <vsniprintf>
 8012850:	b003      	add	sp, #12
 8012852:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012856:	b002      	add	sp, #8
 8012858:	4770      	bx	lr
 801285a:	f008 fe8b 	bl	801b574 <__errno>
 801285e:	2216      	movs	r2, #22
 8012860:	4603      	mov	r3, r0
 8012862:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012866:	601a      	str	r2, [r3, #0]
 8012868:	e7e9      	b.n	801283e <rcutils_snprintf+0x2e>
 801286a:	bf00      	nop

0801286c <rcutils_vsnprintf>:
 801286c:	b570      	push	{r4, r5, r6, lr}
 801286e:	b1b2      	cbz	r2, 801289e <rcutils_vsnprintf+0x32>
 8012870:	fab0 f480 	clz	r4, r0
 8012874:	fab1 f581 	clz	r5, r1
 8012878:	ea50 0c01 	orrs.w	ip, r0, r1
 801287c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8012880:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8012884:	d005      	beq.n	8012892 <rcutils_vsnprintf+0x26>
 8012886:	b954      	cbnz	r4, 801289e <rcutils_vsnprintf+0x32>
 8012888:	b94d      	cbnz	r5, 801289e <rcutils_vsnprintf+0x32>
 801288a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801288e:	f008 bcbb 	b.w	801b208 <vsniprintf>
 8012892:	4661      	mov	r1, ip
 8012894:	4660      	mov	r0, ip
 8012896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801289a:	f008 bcb5 	b.w	801b208 <vsniprintf>
 801289e:	f008 fe69 	bl	801b574 <__errno>
 80128a2:	2316      	movs	r3, #22
 80128a4:	6003      	str	r3, [r0, #0]
 80128a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80128aa:	bd70      	pop	{r4, r5, r6, pc}

080128ac <rcutils_strdup>:
 80128ac:	b084      	sub	sp, #16
 80128ae:	b570      	push	{r4, r5, r6, lr}
 80128b0:	b082      	sub	sp, #8
 80128b2:	4605      	mov	r5, r0
 80128b4:	ac07      	add	r4, sp, #28
 80128b6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80128ba:	b1b0      	cbz	r0, 80128ea <rcutils_strdup+0x3e>
 80128bc:	f7ed fd1a 	bl	80002f4 <strlen>
 80128c0:	1c42      	adds	r2, r0, #1
 80128c2:	9b07      	ldr	r3, [sp, #28]
 80128c4:	4606      	mov	r6, r0
 80128c6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80128c8:	4610      	mov	r0, r2
 80128ca:	9201      	str	r2, [sp, #4]
 80128cc:	4798      	blx	r3
 80128ce:	4604      	mov	r4, r0
 80128d0:	b128      	cbz	r0, 80128de <rcutils_strdup+0x32>
 80128d2:	9a01      	ldr	r2, [sp, #4]
 80128d4:	4629      	mov	r1, r5
 80128d6:	f008 fe82 	bl	801b5de <memcpy>
 80128da:	2300      	movs	r3, #0
 80128dc:	55a3      	strb	r3, [r4, r6]
 80128de:	4620      	mov	r0, r4
 80128e0:	b002      	add	sp, #8
 80128e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128e6:	b004      	add	sp, #16
 80128e8:	4770      	bx	lr
 80128ea:	4604      	mov	r4, r0
 80128ec:	e7f7      	b.n	80128de <rcutils_strdup+0x32>
 80128ee:	bf00      	nop

080128f0 <rcutils_strndup>:
 80128f0:	b082      	sub	sp, #8
 80128f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128f4:	ac06      	add	r4, sp, #24
 80128f6:	4605      	mov	r5, r0
 80128f8:	e884 000c 	stmia.w	r4, {r2, r3}
 80128fc:	b188      	cbz	r0, 8012922 <rcutils_strndup+0x32>
 80128fe:	1c4f      	adds	r7, r1, #1
 8012900:	460e      	mov	r6, r1
 8012902:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012904:	4638      	mov	r0, r7
 8012906:	4790      	blx	r2
 8012908:	4604      	mov	r4, r0
 801290a:	b128      	cbz	r0, 8012918 <rcutils_strndup+0x28>
 801290c:	463a      	mov	r2, r7
 801290e:	4629      	mov	r1, r5
 8012910:	f008 fe65 	bl	801b5de <memcpy>
 8012914:	2300      	movs	r3, #0
 8012916:	55a3      	strb	r3, [r4, r6]
 8012918:	4620      	mov	r0, r4
 801291a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801291e:	b002      	add	sp, #8
 8012920:	4770      	bx	lr
 8012922:	4604      	mov	r4, r0
 8012924:	e7f8      	b.n	8012918 <rcutils_strndup+0x28>
 8012926:	bf00      	nop

08012928 <rcutils_get_zero_initialized_string_map>:
 8012928:	2000      	movs	r0, #0
 801292a:	4b01      	ldr	r3, [pc, #4]	@ (8012930 <rcutils_get_zero_initialized_string_map+0x8>)
 801292c:	6018      	str	r0, [r3, #0]
 801292e:	4770      	bx	lr
 8012930:	24063cd0 	.word	0x24063cd0

08012934 <rcutils_string_map_reserve>:
 8012934:	2800      	cmp	r0, #0
 8012936:	d05e      	beq.n	80129f6 <rcutils_string_map_reserve+0xc2>
 8012938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801293c:	460c      	mov	r4, r1
 801293e:	6801      	ldr	r1, [r0, #0]
 8012940:	b082      	sub	sp, #8
 8012942:	4605      	mov	r5, r0
 8012944:	b129      	cbz	r1, 8012952 <rcutils_string_map_reserve+0x1e>
 8012946:	68cb      	ldr	r3, [r1, #12]
 8012948:	42a3      	cmp	r3, r4
 801294a:	d906      	bls.n	801295a <rcutils_string_map_reserve+0x26>
 801294c:	461c      	mov	r4, r3
 801294e:	2900      	cmp	r1, #0
 8012950:	d1f9      	bne.n	8012946 <rcutils_string_map_reserve+0x12>
 8012952:	201f      	movs	r0, #31
 8012954:	b002      	add	sp, #8
 8012956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801295a:	688b      	ldr	r3, [r1, #8]
 801295c:	42a3      	cmp	r3, r4
 801295e:	d046      	beq.n	80129ee <rcutils_string_map_reserve+0xba>
 8012960:	6a0e      	ldr	r6, [r1, #32]
 8012962:	2c00      	cmp	r4, #0
 8012964:	d033      	beq.n	80129ce <rcutils_string_map_reserve+0x9a>
 8012966:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801296a:	d242      	bcs.n	80129f2 <rcutils_string_map_reserve+0xbe>
 801296c:	00a7      	lsls	r7, r4, #2
 801296e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8012972:	6808      	ldr	r0, [r1, #0]
 8012974:	4632      	mov	r2, r6
 8012976:	4639      	mov	r1, r7
 8012978:	47c0      	blx	r8
 801297a:	2800      	cmp	r0, #0
 801297c:	d039      	beq.n	80129f2 <rcutils_string_map_reserve+0xbe>
 801297e:	682b      	ldr	r3, [r5, #0]
 8012980:	4632      	mov	r2, r6
 8012982:	4639      	mov	r1, r7
 8012984:	6018      	str	r0, [r3, #0]
 8012986:	6858      	ldr	r0, [r3, #4]
 8012988:	47c0      	blx	r8
 801298a:	2800      	cmp	r0, #0
 801298c:	d031      	beq.n	80129f2 <rcutils_string_map_reserve+0xbe>
 801298e:	682d      	ldr	r5, [r5, #0]
 8012990:	68ab      	ldr	r3, [r5, #8]
 8012992:	6068      	str	r0, [r5, #4]
 8012994:	42a3      	cmp	r3, r4
 8012996:	d225      	bcs.n	80129e4 <rcutils_string_map_reserve+0xb0>
 8012998:	682a      	ldr	r2, [r5, #0]
 801299a:	eb00 0c07 	add.w	ip, r0, r7
 801299e:	0099      	lsls	r1, r3, #2
 80129a0:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80129a4:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80129a8:	45e6      	cmp	lr, ip
 80129aa:	d203      	bcs.n	80129b4 <rcutils_string_map_reserve+0x80>
 80129ac:	eb02 0c07 	add.w	ip, r2, r7
 80129b0:	4566      	cmp	r6, ip
 80129b2:	d322      	bcc.n	80129fa <rcutils_string_map_reserve+0xc6>
 80129b4:	1ae3      	subs	r3, r4, r3
 80129b6:	4670      	mov	r0, lr
 80129b8:	2100      	movs	r1, #0
 80129ba:	009a      	lsls	r2, r3, #2
 80129bc:	9201      	str	r2, [sp, #4]
 80129be:	f008 fcef 	bl	801b3a0 <memset>
 80129c2:	9a01      	ldr	r2, [sp, #4]
 80129c4:	2100      	movs	r1, #0
 80129c6:	4630      	mov	r0, r6
 80129c8:	f008 fcea 	bl	801b3a0 <memset>
 80129cc:	e00a      	b.n	80129e4 <rcutils_string_map_reserve+0xb0>
 80129ce:	694f      	ldr	r7, [r1, #20]
 80129d0:	6808      	ldr	r0, [r1, #0]
 80129d2:	4631      	mov	r1, r6
 80129d4:	47b8      	blx	r7
 80129d6:	682b      	ldr	r3, [r5, #0]
 80129d8:	4631      	mov	r1, r6
 80129da:	6858      	ldr	r0, [r3, #4]
 80129dc:	601c      	str	r4, [r3, #0]
 80129de:	47b8      	blx	r7
 80129e0:	682d      	ldr	r5, [r5, #0]
 80129e2:	606c      	str	r4, [r5, #4]
 80129e4:	2000      	movs	r0, #0
 80129e6:	60ac      	str	r4, [r5, #8]
 80129e8:	b002      	add	sp, #8
 80129ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129ee:	2000      	movs	r0, #0
 80129f0:	e7b0      	b.n	8012954 <rcutils_string_map_reserve+0x20>
 80129f2:	200a      	movs	r0, #10
 80129f4:	e7ae      	b.n	8012954 <rcutils_string_map_reserve+0x20>
 80129f6:	200b      	movs	r0, #11
 80129f8:	4770      	bx	lr
 80129fa:	1f0b      	subs	r3, r1, #4
 80129fc:	4418      	add	r0, r3
 80129fe:	4413      	add	r3, r2
 8012a00:	3a04      	subs	r2, #4
 8012a02:	4417      	add	r7, r2
 8012a04:	2200      	movs	r2, #0
 8012a06:	f843 2f04 	str.w	r2, [r3, #4]!
 8012a0a:	42bb      	cmp	r3, r7
 8012a0c:	f840 2f04 	str.w	r2, [r0, #4]!
 8012a10:	d1f9      	bne.n	8012a06 <rcutils_string_map_reserve+0xd2>
 8012a12:	e7e7      	b.n	80129e4 <rcutils_string_map_reserve+0xb0>

08012a14 <rcutils_string_map_init>:
 8012a14:	b082      	sub	sp, #8
 8012a16:	b570      	push	{r4, r5, r6, lr}
 8012a18:	ac04      	add	r4, sp, #16
 8012a1a:	e884 000c 	stmia.w	r4, {r2, r3}
 8012a1e:	b380      	cbz	r0, 8012a82 <rcutils_string_map_init+0x6e>
 8012a20:	6806      	ldr	r6, [r0, #0]
 8012a22:	4604      	mov	r4, r0
 8012a24:	b12e      	cbz	r6, 8012a32 <rcutils_string_map_init+0x1e>
 8012a26:	251e      	movs	r5, #30
 8012a28:	4628      	mov	r0, r5
 8012a2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a2e:	b002      	add	sp, #8
 8012a30:	4770      	bx	lr
 8012a32:	a804      	add	r0, sp, #16
 8012a34:	460d      	mov	r5, r1
 8012a36:	f7fc fcb5 	bl	800f3a4 <rcutils_allocator_is_valid>
 8012a3a:	b310      	cbz	r0, 8012a82 <rcutils_string_map_init+0x6e>
 8012a3c:	9b04      	ldr	r3, [sp, #16]
 8012a3e:	2024      	movs	r0, #36	@ 0x24
 8012a40:	9908      	ldr	r1, [sp, #32]
 8012a42:	4798      	blx	r3
 8012a44:	6020      	str	r0, [r4, #0]
 8012a46:	b310      	cbz	r0, 8012a8e <rcutils_string_map_init+0x7a>
 8012a48:	f10d 0e10 	add.w	lr, sp, #16
 8012a4c:	f100 0c10 	add.w	ip, r0, #16
 8012a50:	e9c0 6600 	strd	r6, r6, [r0]
 8012a54:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8012a58:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012a5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a60:	f8de 3000 	ldr.w	r3, [lr]
 8012a64:	4629      	mov	r1, r5
 8012a66:	4620      	mov	r0, r4
 8012a68:	f8cc 3000 	str.w	r3, [ip]
 8012a6c:	f7ff ff62 	bl	8012934 <rcutils_string_map_reserve>
 8012a70:	4605      	mov	r5, r0
 8012a72:	2800      	cmp	r0, #0
 8012a74:	d0d8      	beq.n	8012a28 <rcutils_string_map_init+0x14>
 8012a76:	9b05      	ldr	r3, [sp, #20]
 8012a78:	9908      	ldr	r1, [sp, #32]
 8012a7a:	6820      	ldr	r0, [r4, #0]
 8012a7c:	4798      	blx	r3
 8012a7e:	6026      	str	r6, [r4, #0]
 8012a80:	e7d2      	b.n	8012a28 <rcutils_string_map_init+0x14>
 8012a82:	250b      	movs	r5, #11
 8012a84:	4628      	mov	r0, r5
 8012a86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a8a:	b002      	add	sp, #8
 8012a8c:	4770      	bx	lr
 8012a8e:	250a      	movs	r5, #10
 8012a90:	e7ca      	b.n	8012a28 <rcutils_string_map_init+0x14>
 8012a92:	bf00      	nop

08012a94 <rcutils_string_map_fini>:
 8012a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a98:	b082      	sub	sp, #8
 8012a9a:	2800      	cmp	r0, #0
 8012a9c:	d03a      	beq.n	8012b14 <rcutils_string_map_fini+0x80>
 8012a9e:	6804      	ldr	r4, [r0, #0]
 8012aa0:	4606      	mov	r6, r0
 8012aa2:	2c00      	cmp	r4, #0
 8012aa4:	d032      	beq.n	8012b0c <rcutils_string_map_fini+0x78>
 8012aa6:	68a3      	ldr	r3, [r4, #8]
 8012aa8:	b32b      	cbz	r3, 8012af6 <rcutils_string_map_fini+0x62>
 8012aaa:	2500      	movs	r5, #0
 8012aac:	6822      	ldr	r2, [r4, #0]
 8012aae:	462f      	mov	r7, r5
 8012ab0:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012ab4:	b1e0      	cbz	r0, 8012af0 <rcutils_string_map_fini+0x5c>
 8012ab6:	6a21      	ldr	r1, [r4, #32]
 8012ab8:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8012abc:	9101      	str	r1, [sp, #4]
 8012abe:	47c0      	blx	r8
 8012ac0:	9901      	ldr	r1, [sp, #4]
 8012ac2:	e9d4 3200 	ldrd	r3, r2, [r4]
 8012ac6:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 8012aca:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012ace:	47c0      	blx	r8
 8012ad0:	68e3      	ldr	r3, [r4, #12]
 8012ad2:	6862      	ldr	r2, [r4, #4]
 8012ad4:	3b01      	subs	r3, #1
 8012ad6:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8012ada:	3501      	adds	r5, #1
 8012adc:	60e3      	str	r3, [r4, #12]
 8012ade:	6834      	ldr	r4, [r6, #0]
 8012ae0:	68a3      	ldr	r3, [r4, #8]
 8012ae2:	429d      	cmp	r5, r3
 8012ae4:	d207      	bcs.n	8012af6 <rcutils_string_map_fini+0x62>
 8012ae6:	6822      	ldr	r2, [r4, #0]
 8012ae8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012aec:	2800      	cmp	r0, #0
 8012aee:	d1e2      	bne.n	8012ab6 <rcutils_string_map_fini+0x22>
 8012af0:	3501      	adds	r5, #1
 8012af2:	429d      	cmp	r5, r3
 8012af4:	d3dc      	bcc.n	8012ab0 <rcutils_string_map_fini+0x1c>
 8012af6:	2100      	movs	r1, #0
 8012af8:	4630      	mov	r0, r6
 8012afa:	f7ff ff1b 	bl	8012934 <rcutils_string_map_reserve>
 8012afe:	4604      	mov	r4, r0
 8012b00:	b920      	cbnz	r0, 8012b0c <rcutils_string_map_fini+0x78>
 8012b02:	6830      	ldr	r0, [r6, #0]
 8012b04:	6943      	ldr	r3, [r0, #20]
 8012b06:	6a01      	ldr	r1, [r0, #32]
 8012b08:	4798      	blx	r3
 8012b0a:	6034      	str	r4, [r6, #0]
 8012b0c:	4620      	mov	r0, r4
 8012b0e:	b002      	add	sp, #8
 8012b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b14:	240b      	movs	r4, #11
 8012b16:	4620      	mov	r0, r4
 8012b18:	b002      	add	sp, #8
 8012b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b1e:	bf00      	nop

08012b20 <rcutils_string_map_getn>:
 8012b20:	b378      	cbz	r0, 8012b82 <rcutils_string_map_getn+0x62>
 8012b22:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b26:	f8d0 b000 	ldr.w	fp, [r0]
 8012b2a:	f1bb 0f00 	cmp.w	fp, #0
 8012b2e:	d01f      	beq.n	8012b70 <rcutils_string_map_getn+0x50>
 8012b30:	fab1 f481 	clz	r4, r1
 8012b34:	4688      	mov	r8, r1
 8012b36:	0964      	lsrs	r4, r4, #5
 8012b38:	b1d1      	cbz	r1, 8012b70 <rcutils_string_map_getn+0x50>
 8012b3a:	f8db 7008 	ldr.w	r7, [fp, #8]
 8012b3e:	f8db 6000 	ldr.w	r6, [fp]
 8012b42:	b1af      	cbz	r7, 8012b70 <rcutils_string_map_getn+0x50>
 8012b44:	4691      	mov	r9, r2
 8012b46:	3e04      	subs	r6, #4
 8012b48:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8012b4c:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8012b50:	3401      	adds	r4, #1
 8012b52:	4628      	mov	r0, r5
 8012b54:	b155      	cbz	r5, 8012b6c <rcutils_string_map_getn+0x4c>
 8012b56:	f7ed fbcd 	bl	80002f4 <strlen>
 8012b5a:	4602      	mov	r2, r0
 8012b5c:	4629      	mov	r1, r5
 8012b5e:	4640      	mov	r0, r8
 8012b60:	454a      	cmp	r2, r9
 8012b62:	bf38      	it	cc
 8012b64:	464a      	movcc	r2, r9
 8012b66:	f008 fc30 	bl	801b3ca <strncmp>
 8012b6a:	b120      	cbz	r0, 8012b76 <rcutils_string_map_getn+0x56>
 8012b6c:	42a7      	cmp	r7, r4
 8012b6e:	d1eb      	bne.n	8012b48 <rcutils_string_map_getn+0x28>
 8012b70:	2000      	movs	r0, #0
 8012b72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b76:	f8db 3004 	ldr.w	r3, [fp, #4]
 8012b7a:	f853 000a 	ldr.w	r0, [r3, sl]
 8012b7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b82:	4770      	bx	lr
 8012b84:	0000      	movs	r0, r0
	...

08012b88 <rmw_get_zero_initialized_context>:
 8012b88:	b510      	push	{r4, lr}
 8012b8a:	4604      	mov	r4, r0
 8012b8c:	3010      	adds	r0, #16
 8012b8e:	f000 f80f 	bl	8012bb0 <rmw_get_zero_initialized_init_options>
 8012b92:	2300      	movs	r3, #0
 8012b94:	4620      	mov	r0, r4
 8012b96:	60a3      	str	r3, [r4, #8]
 8012b98:	64a3      	str	r3, [r4, #72]	@ 0x48
 8012b9a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8012b9c:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 8012ba8 <rmw_get_zero_initialized_context+0x20>
 8012ba0:	ed84 7b00 	vstr	d7, [r4]
 8012ba4:	bd10      	pop	{r4, pc}
 8012ba6:	bf00      	nop
	...

08012bb0 <rmw_get_zero_initialized_init_options>:
 8012bb0:	b510      	push	{r4, lr}
 8012bb2:	4604      	mov	r4, r0
 8012bb4:	2238      	movs	r2, #56	@ 0x38
 8012bb6:	2100      	movs	r1, #0
 8012bb8:	f008 fbf2 	bl	801b3a0 <memset>
 8012bbc:	f104 0010 	add.w	r0, r4, #16
 8012bc0:	f000 f806 	bl	8012bd0 <rmw_get_default_security_options>
 8012bc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012bc8:	4620      	mov	r0, r4
 8012bca:	60e3      	str	r3, [r4, #12]
 8012bcc:	bd10      	pop	{r4, pc}
 8012bce:	bf00      	nop

08012bd0 <rmw_get_default_security_options>:
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	7002      	strb	r2, [r0, #0]
 8012bd4:	6042      	str	r2, [r0, #4]
 8012bd6:	4770      	bx	lr

08012bd8 <rmw_subscription_content_filter_options_fini>:
 8012bd8:	b1b0      	cbz	r0, 8012c08 <rmw_subscription_content_filter_options_fini+0x30>
 8012bda:	b538      	push	{r3, r4, r5, lr}
 8012bdc:	4604      	mov	r4, r0
 8012bde:	4608      	mov	r0, r1
 8012be0:	460d      	mov	r5, r1
 8012be2:	f7fc fbdf 	bl	800f3a4 <rcutils_allocator_is_valid>
 8012be6:	b168      	cbz	r0, 8012c04 <rmw_subscription_content_filter_options_fini+0x2c>
 8012be8:	6820      	ldr	r0, [r4, #0]
 8012bea:	b120      	cbz	r0, 8012bf6 <rmw_subscription_content_filter_options_fini+0x1e>
 8012bec:	686b      	ldr	r3, [r5, #4]
 8012bee:	6929      	ldr	r1, [r5, #16]
 8012bf0:	4798      	blx	r3
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	6023      	str	r3, [r4, #0]
 8012bf6:	1d20      	adds	r0, r4, #4
 8012bf8:	f006 fd8e 	bl	8019718 <rcutils_string_array_fini>
 8012bfc:	3800      	subs	r0, #0
 8012bfe:	bf18      	it	ne
 8012c00:	2001      	movne	r0, #1
 8012c02:	bd38      	pop	{r3, r4, r5, pc}
 8012c04:	200b      	movs	r0, #11
 8012c06:	bd38      	pop	{r3, r4, r5, pc}
 8012c08:	200b      	movs	r0, #11
 8012c0a:	4770      	bx	lr

08012c0c <rmw_get_default_subscription_options>:
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	e9c0 2200 	strd	r2, r2, [r0]
 8012c12:	6082      	str	r2, [r0, #8]
 8012c14:	4770      	bx	lr
 8012c16:	bf00      	nop

08012c18 <rmw_get_zero_initialized_message_info>:
 8012c18:	b510      	push	{r4, lr}
 8012c1a:	4604      	mov	r4, r0
 8012c1c:	2240      	movs	r2, #64	@ 0x40
 8012c1e:	2100      	movs	r1, #0
 8012c20:	f008 fbbe 	bl	801b3a0 <memset>
 8012c24:	4620      	mov	r0, r4
 8012c26:	bd10      	pop	{r4, pc}

08012c28 <rmw_validate_full_topic_name>:
 8012c28:	2800      	cmp	r0, #0
 8012c2a:	d05d      	beq.n	8012ce8 <rmw_validate_full_topic_name+0xc0>
 8012c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c30:	460d      	mov	r5, r1
 8012c32:	2900      	cmp	r1, #0
 8012c34:	d05a      	beq.n	8012cec <rmw_validate_full_topic_name+0xc4>
 8012c36:	4604      	mov	r4, r0
 8012c38:	4616      	mov	r6, r2
 8012c3a:	f7ed fb5b 	bl	80002f4 <strlen>
 8012c3e:	b150      	cbz	r0, 8012c56 <rmw_validate_full_topic_name+0x2e>
 8012c40:	7823      	ldrb	r3, [r4, #0]
 8012c42:	2b2f      	cmp	r3, #47	@ 0x2f
 8012c44:	d00e      	beq.n	8012c64 <rmw_validate_full_topic_name+0x3c>
 8012c46:	2302      	movs	r3, #2
 8012c48:	602b      	str	r3, [r5, #0]
 8012c4a:	b146      	cbz	r6, 8012c5e <rmw_validate_full_topic_name+0x36>
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	4618      	mov	r0, r3
 8012c50:	6033      	str	r3, [r6, #0]
 8012c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c56:	2301      	movs	r3, #1
 8012c58:	602b      	str	r3, [r5, #0]
 8012c5a:	2e00      	cmp	r6, #0
 8012c5c:	d1f6      	bne.n	8012c4c <rmw_validate_full_topic_name+0x24>
 8012c5e:	2000      	movs	r0, #0
 8012c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c64:	1e43      	subs	r3, r0, #1
 8012c66:	5ce2      	ldrb	r2, [r4, r3]
 8012c68:	2a2f      	cmp	r2, #47	@ 0x2f
 8012c6a:	d041      	beq.n	8012cf0 <rmw_validate_full_topic_name+0xc8>
 8012c6c:	1e62      	subs	r2, r4, #1
 8012c6e:	f1c4 0e01 	rsb	lr, r4, #1
 8012c72:	eb02 0800 	add.w	r8, r2, r0
 8012c76:	eb0e 0702 	add.w	r7, lr, r2
 8012c7a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8012c7e:	f023 0120 	bic.w	r1, r3, #32
 8012c82:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 8012c86:	3941      	subs	r1, #65	@ 0x41
 8012c88:	2919      	cmp	r1, #25
 8012c8a:	d90f      	bls.n	8012cac <rmw_validate_full_topic_name+0x84>
 8012c8c:	f1bc 0f0a 	cmp.w	ip, #10
 8012c90:	d90c      	bls.n	8012cac <rmw_validate_full_topic_name+0x84>
 8012c92:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 8012c96:	fab3 f383 	clz	r3, r3
 8012c9a:	095b      	lsrs	r3, r3, #5
 8012c9c:	b933      	cbnz	r3, 8012cac <rmw_validate_full_topic_name+0x84>
 8012c9e:	2204      	movs	r2, #4
 8012ca0:	602a      	str	r2, [r5, #0]
 8012ca2:	2e00      	cmp	r6, #0
 8012ca4:	d0db      	beq.n	8012c5e <rmw_validate_full_topic_name+0x36>
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	6037      	str	r7, [r6, #0]
 8012caa:	e7d2      	b.n	8012c52 <rmw_validate_full_topic_name+0x2a>
 8012cac:	4542      	cmp	r2, r8
 8012cae:	d1e2      	bne.n	8012c76 <rmw_validate_full_topic_name+0x4e>
 8012cb0:	2301      	movs	r3, #1
 8012cb2:	4f1a      	ldr	r7, [pc, #104]	@ (8012d1c <rmw_validate_full_topic_name+0xf4>)
 8012cb4:	e004      	b.n	8012cc0 <rmw_validate_full_topic_name+0x98>
 8012cb6:	4298      	cmp	r0, r3
 8012cb8:	f104 0401 	add.w	r4, r4, #1
 8012cbc:	4613      	mov	r3, r2
 8012cbe:	d91c      	bls.n	8012cfa <rmw_validate_full_topic_name+0xd2>
 8012cc0:	4298      	cmp	r0, r3
 8012cc2:	f103 0201 	add.w	r2, r3, #1
 8012cc6:	d0f6      	beq.n	8012cb6 <rmw_validate_full_topic_name+0x8e>
 8012cc8:	7821      	ldrb	r1, [r4, #0]
 8012cca:	292f      	cmp	r1, #47	@ 0x2f
 8012ccc:	d1f3      	bne.n	8012cb6 <rmw_validate_full_topic_name+0x8e>
 8012cce:	7861      	ldrb	r1, [r4, #1]
 8012cd0:	292f      	cmp	r1, #47	@ 0x2f
 8012cd2:	d01e      	beq.n	8012d12 <rmw_validate_full_topic_name+0xea>
 8012cd4:	5dc9      	ldrb	r1, [r1, r7]
 8012cd6:	0749      	lsls	r1, r1, #29
 8012cd8:	d5ed      	bpl.n	8012cb6 <rmw_validate_full_topic_name+0x8e>
 8012cda:	2206      	movs	r2, #6
 8012cdc:	602a      	str	r2, [r5, #0]
 8012cde:	2e00      	cmp	r6, #0
 8012ce0:	d0bd      	beq.n	8012c5e <rmw_validate_full_topic_name+0x36>
 8012ce2:	2000      	movs	r0, #0
 8012ce4:	6033      	str	r3, [r6, #0]
 8012ce6:	e7b4      	b.n	8012c52 <rmw_validate_full_topic_name+0x2a>
 8012ce8:	200b      	movs	r0, #11
 8012cea:	4770      	bx	lr
 8012cec:	200b      	movs	r0, #11
 8012cee:	e7b0      	b.n	8012c52 <rmw_validate_full_topic_name+0x2a>
 8012cf0:	2203      	movs	r2, #3
 8012cf2:	602a      	str	r2, [r5, #0]
 8012cf4:	2e00      	cmp	r6, #0
 8012cf6:	d1f4      	bne.n	8012ce2 <rmw_validate_full_topic_name+0xba>
 8012cf8:	e7b1      	b.n	8012c5e <rmw_validate_full_topic_name+0x36>
 8012cfa:	28f7      	cmp	r0, #247	@ 0xf7
 8012cfc:	d803      	bhi.n	8012d06 <rmw_validate_full_topic_name+0xde>
 8012cfe:	2300      	movs	r3, #0
 8012d00:	4618      	mov	r0, r3
 8012d02:	602b      	str	r3, [r5, #0]
 8012d04:	e7a5      	b.n	8012c52 <rmw_validate_full_topic_name+0x2a>
 8012d06:	2307      	movs	r3, #7
 8012d08:	602b      	str	r3, [r5, #0]
 8012d0a:	2e00      	cmp	r6, #0
 8012d0c:	d0a7      	beq.n	8012c5e <rmw_validate_full_topic_name+0x36>
 8012d0e:	23f6      	movs	r3, #246	@ 0xf6
 8012d10:	e7e7      	b.n	8012ce2 <rmw_validate_full_topic_name+0xba>
 8012d12:	2205      	movs	r2, #5
 8012d14:	602a      	str	r2, [r5, #0]
 8012d16:	2e00      	cmp	r6, #0
 8012d18:	d1e3      	bne.n	8012ce2 <rmw_validate_full_topic_name+0xba>
 8012d1a:	e7a0      	b.n	8012c5e <rmw_validate_full_topic_name+0x36>
 8012d1c:	0801cfd6 	.word	0x0801cfd6

08012d20 <rmw_validate_namespace_with_size>:
 8012d20:	2800      	cmp	r0, #0
 8012d22:	d043      	beq.n	8012dac <rmw_validate_namespace_with_size+0x8c>
 8012d24:	b570      	push	{r4, r5, r6, lr}
 8012d26:	4614      	mov	r4, r2
 8012d28:	b0c2      	sub	sp, #264	@ 0x108
 8012d2a:	b32a      	cbz	r2, 8012d78 <rmw_validate_namespace_with_size+0x58>
 8012d2c:	2901      	cmp	r1, #1
 8012d2e:	460d      	mov	r5, r1
 8012d30:	461e      	mov	r6, r3
 8012d32:	d102      	bne.n	8012d3a <rmw_validate_namespace_with_size+0x1a>
 8012d34:	7803      	ldrb	r3, [r0, #0]
 8012d36:	2b2f      	cmp	r3, #47	@ 0x2f
 8012d38:	d012      	beq.n	8012d60 <rmw_validate_namespace_with_size+0x40>
 8012d3a:	aa01      	add	r2, sp, #4
 8012d3c:	4669      	mov	r1, sp
 8012d3e:	f7ff ff73 	bl	8012c28 <rmw_validate_full_topic_name>
 8012d42:	b980      	cbnz	r0, 8012d66 <rmw_validate_namespace_with_size+0x46>
 8012d44:	9a00      	ldr	r2, [sp, #0]
 8012d46:	b14a      	cbz	r2, 8012d5c <rmw_validate_namespace_with_size+0x3c>
 8012d48:	2a07      	cmp	r2, #7
 8012d4a:	d007      	beq.n	8012d5c <rmw_validate_namespace_with_size+0x3c>
 8012d4c:	1e53      	subs	r3, r2, #1
 8012d4e:	2b05      	cmp	r3, #5
 8012d50:	d82e      	bhi.n	8012db0 <rmw_validate_namespace_with_size+0x90>
 8012d52:	e8df f003 	tbb	[pc, r3]
 8012d56:	1f1c      	.short	0x1f1c
 8012d58:	14282522 	.word	0x14282522
 8012d5c:	2df5      	cmp	r5, #245	@ 0xf5
 8012d5e:	d804      	bhi.n	8012d6a <rmw_validate_namespace_with_size+0x4a>
 8012d60:	2300      	movs	r3, #0
 8012d62:	4618      	mov	r0, r3
 8012d64:	6023      	str	r3, [r4, #0]
 8012d66:	b042      	add	sp, #264	@ 0x108
 8012d68:	bd70      	pop	{r4, r5, r6, pc}
 8012d6a:	2307      	movs	r3, #7
 8012d6c:	6023      	str	r3, [r4, #0]
 8012d6e:	2e00      	cmp	r6, #0
 8012d70:	d0f9      	beq.n	8012d66 <rmw_validate_namespace_with_size+0x46>
 8012d72:	23f4      	movs	r3, #244	@ 0xf4
 8012d74:	6033      	str	r3, [r6, #0]
 8012d76:	e7f6      	b.n	8012d66 <rmw_validate_namespace_with_size+0x46>
 8012d78:	200b      	movs	r0, #11
 8012d7a:	b042      	add	sp, #264	@ 0x108
 8012d7c:	bd70      	pop	{r4, r5, r6, pc}
 8012d7e:	2306      	movs	r3, #6
 8012d80:	6023      	str	r3, [r4, #0]
 8012d82:	2e00      	cmp	r6, #0
 8012d84:	d0ef      	beq.n	8012d66 <rmw_validate_namespace_with_size+0x46>
 8012d86:	9b01      	ldr	r3, [sp, #4]
 8012d88:	6033      	str	r3, [r6, #0]
 8012d8a:	b042      	add	sp, #264	@ 0x108
 8012d8c:	bd70      	pop	{r4, r5, r6, pc}
 8012d8e:	2301      	movs	r3, #1
 8012d90:	6023      	str	r3, [r4, #0]
 8012d92:	e7f6      	b.n	8012d82 <rmw_validate_namespace_with_size+0x62>
 8012d94:	2302      	movs	r3, #2
 8012d96:	6023      	str	r3, [r4, #0]
 8012d98:	e7f3      	b.n	8012d82 <rmw_validate_namespace_with_size+0x62>
 8012d9a:	2303      	movs	r3, #3
 8012d9c:	6023      	str	r3, [r4, #0]
 8012d9e:	e7f0      	b.n	8012d82 <rmw_validate_namespace_with_size+0x62>
 8012da0:	2304      	movs	r3, #4
 8012da2:	6023      	str	r3, [r4, #0]
 8012da4:	e7ed      	b.n	8012d82 <rmw_validate_namespace_with_size+0x62>
 8012da6:	2305      	movs	r3, #5
 8012da8:	6023      	str	r3, [r4, #0]
 8012daa:	e7ea      	b.n	8012d82 <rmw_validate_namespace_with_size+0x62>
 8012dac:	200b      	movs	r0, #11
 8012dae:	4770      	bx	lr
 8012db0:	4613      	mov	r3, r2
 8012db2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012db6:	4a03      	ldr	r2, [pc, #12]	@ (8012dc4 <rmw_validate_namespace_with_size+0xa4>)
 8012db8:	a802      	add	r0, sp, #8
 8012dba:	f7ff fd29 	bl	8012810 <rcutils_snprintf>
 8012dbe:	2001      	movs	r0, #1
 8012dc0:	e7d1      	b.n	8012d66 <rmw_validate_namespace_with_size+0x46>
 8012dc2:	bf00      	nop
 8012dc4:	0801c844 	.word	0x0801c844

08012dc8 <rmw_validate_namespace>:
 8012dc8:	b168      	cbz	r0, 8012de6 <rmw_validate_namespace+0x1e>
 8012dca:	b570      	push	{r4, r5, r6, lr}
 8012dcc:	460d      	mov	r5, r1
 8012dce:	4616      	mov	r6, r2
 8012dd0:	4604      	mov	r4, r0
 8012dd2:	f7ed fa8f 	bl	80002f4 <strlen>
 8012dd6:	4633      	mov	r3, r6
 8012dd8:	4601      	mov	r1, r0
 8012dda:	462a      	mov	r2, r5
 8012ddc:	4620      	mov	r0, r4
 8012dde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012de2:	f7ff bf9d 	b.w	8012d20 <rmw_validate_namespace_with_size>
 8012de6:	200b      	movs	r0, #11
 8012de8:	4770      	bx	lr
 8012dea:	bf00      	nop

08012dec <rmw_namespace_validation_result_string>:
 8012dec:	2807      	cmp	r0, #7
 8012dee:	d803      	bhi.n	8012df8 <rmw_namespace_validation_result_string+0xc>
 8012df0:	4b02      	ldr	r3, [pc, #8]	@ (8012dfc <rmw_namespace_validation_result_string+0x10>)
 8012df2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8012df6:	4770      	bx	lr
 8012df8:	4801      	ldr	r0, [pc, #4]	@ (8012e00 <rmw_namespace_validation_result_string+0x14>)
 8012dfa:	4770      	bx	lr
 8012dfc:	0801ca3c 	.word	0x0801ca3c
 8012e00:	0801c894 	.word	0x0801c894

08012e04 <rmw_validate_node_name>:
 8012e04:	2800      	cmp	r0, #0
 8012e06:	d042      	beq.n	8012e8e <rmw_validate_node_name+0x8a>
 8012e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e0c:	460d      	mov	r5, r1
 8012e0e:	2900      	cmp	r1, #0
 8012e10:	d03f      	beq.n	8012e92 <rmw_validate_node_name+0x8e>
 8012e12:	4604      	mov	r4, r0
 8012e14:	4616      	mov	r6, r2
 8012e16:	f7ed fa6d 	bl	80002f4 <strlen>
 8012e1a:	b310      	cbz	r0, 8012e62 <rmw_validate_node_name+0x5e>
 8012e1c:	1e63      	subs	r3, r4, #1
 8012e1e:	f1c4 0101 	rsb	r1, r4, #1
 8012e22:	eb03 0800 	add.w	r8, r3, r0
 8012e26:	18cf      	adds	r7, r1, r3
 8012e28:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8012e2c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8012e30:	f02e 0c20 	bic.w	ip, lr, #32
 8012e34:	2a09      	cmp	r2, #9
 8012e36:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8012e3a:	d905      	bls.n	8012e48 <rmw_validate_node_name+0x44>
 8012e3c:	f1bc 0f19 	cmp.w	ip, #25
 8012e40:	d902      	bls.n	8012e48 <rmw_validate_node_name+0x44>
 8012e42:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8012e46:	d114      	bne.n	8012e72 <rmw_validate_node_name+0x6e>
 8012e48:	4598      	cmp	r8, r3
 8012e4a:	d1ec      	bne.n	8012e26 <rmw_validate_node_name+0x22>
 8012e4c:	7822      	ldrb	r2, [r4, #0]
 8012e4e:	4b16      	ldr	r3, [pc, #88]	@ (8012ea8 <rmw_validate_node_name+0xa4>)
 8012e50:	5cd3      	ldrb	r3, [r2, r3]
 8012e52:	f013 0304 	ands.w	r3, r3, #4
 8012e56:	d113      	bne.n	8012e80 <rmw_validate_node_name+0x7c>
 8012e58:	28ff      	cmp	r0, #255	@ 0xff
 8012e5a:	d81c      	bhi.n	8012e96 <rmw_validate_node_name+0x92>
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	602b      	str	r3, [r5, #0]
 8012e60:	e00c      	b.n	8012e7c <rmw_validate_node_name+0x78>
 8012e62:	2301      	movs	r3, #1
 8012e64:	602b      	str	r3, [r5, #0]
 8012e66:	b17e      	cbz	r6, 8012e88 <rmw_validate_node_name+0x84>
 8012e68:	2300      	movs	r3, #0
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	6033      	str	r3, [r6, #0]
 8012e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e72:	2302      	movs	r3, #2
 8012e74:	602b      	str	r3, [r5, #0]
 8012e76:	b13e      	cbz	r6, 8012e88 <rmw_validate_node_name+0x84>
 8012e78:	2000      	movs	r0, #0
 8012e7a:	6037      	str	r7, [r6, #0]
 8012e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e80:	2303      	movs	r3, #3
 8012e82:	602b      	str	r3, [r5, #0]
 8012e84:	2e00      	cmp	r6, #0
 8012e86:	d1ef      	bne.n	8012e68 <rmw_validate_node_name+0x64>
 8012e88:	2000      	movs	r0, #0
 8012e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e8e:	200b      	movs	r0, #11
 8012e90:	4770      	bx	lr
 8012e92:	200b      	movs	r0, #11
 8012e94:	e7f2      	b.n	8012e7c <rmw_validate_node_name+0x78>
 8012e96:	2204      	movs	r2, #4
 8012e98:	602a      	str	r2, [r5, #0]
 8012e9a:	2e00      	cmp	r6, #0
 8012e9c:	d0f4      	beq.n	8012e88 <rmw_validate_node_name+0x84>
 8012e9e:	22fe      	movs	r2, #254	@ 0xfe
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	6032      	str	r2, [r6, #0]
 8012ea4:	e7ea      	b.n	8012e7c <rmw_validate_node_name+0x78>
 8012ea6:	bf00      	nop
 8012ea8:	0801cfd6 	.word	0x0801cfd6

08012eac <rmw_node_name_validation_result_string>:
 8012eac:	2804      	cmp	r0, #4
 8012eae:	d803      	bhi.n	8012eb8 <rmw_node_name_validation_result_string+0xc>
 8012eb0:	4b02      	ldr	r3, [pc, #8]	@ (8012ebc <rmw_node_name_validation_result_string+0x10>)
 8012eb2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8012eb6:	4770      	bx	lr
 8012eb8:	4801      	ldr	r0, [pc, #4]	@ (8012ec0 <rmw_node_name_validation_result_string+0x14>)
 8012eba:	4770      	bx	lr
 8012ebc:	0801cb48 	.word	0x0801cb48
 8012ec0:	0801ca5c 	.word	0x0801ca5c

08012ec4 <rmw_destroy_client>:
 8012ec4:	b570      	push	{r4, r5, r6, lr}
 8012ec6:	b128      	cbz	r0, 8012ed4 <rmw_destroy_client+0x10>
 8012ec8:	4604      	mov	r4, r0
 8012eca:	6800      	ldr	r0, [r0, #0]
 8012ecc:	460d      	mov	r5, r1
 8012ece:	f001 fc5f 	bl	8014790 <is_uxrce_rmw_identifier_valid>
 8012ed2:	b910      	cbnz	r0, 8012eda <rmw_destroy_client+0x16>
 8012ed4:	2401      	movs	r4, #1
 8012ed6:	4620      	mov	r0, r4
 8012ed8:	bd70      	pop	{r4, r5, r6, pc}
 8012eda:	6863      	ldr	r3, [r4, #4]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d0f9      	beq.n	8012ed4 <rmw_destroy_client+0x10>
 8012ee0:	2d00      	cmp	r5, #0
 8012ee2:	d0f7      	beq.n	8012ed4 <rmw_destroy_client+0x10>
 8012ee4:	6828      	ldr	r0, [r5, #0]
 8012ee6:	f001 fc53 	bl	8014790 <is_uxrce_rmw_identifier_valid>
 8012eea:	2800      	cmp	r0, #0
 8012eec:	d0f2      	beq.n	8012ed4 <rmw_destroy_client+0x10>
 8012eee:	686e      	ldr	r6, [r5, #4]
 8012ef0:	2e00      	cmp	r6, #0
 8012ef2:	d0ef      	beq.n	8012ed4 <rmw_destroy_client+0x10>
 8012ef4:	6864      	ldr	r4, [r4, #4]
 8012ef6:	6932      	ldr	r2, [r6, #16]
 8012ef8:	6920      	ldr	r0, [r4, #16]
 8012efa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012efe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012f02:	6819      	ldr	r1, [r3, #0]
 8012f04:	f003 f924 	bl	8016150 <uxr_buffer_cancel_data>
 8012f08:	4602      	mov	r2, r0
 8012f0a:	6920      	ldr	r0, [r4, #16]
 8012f0c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012f10:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012f14:	f001 fbc2 	bl	801469c <run_xrce_session>
 8012f18:	6920      	ldr	r0, [r4, #16]
 8012f1a:	6932      	ldr	r2, [r6, #16]
 8012f1c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012f20:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012f24:	6819      	ldr	r1, [r3, #0]
 8012f26:	f002 fe8f 	bl	8015c48 <uxr_buffer_delete_entity>
 8012f2a:	4602      	mov	r2, r0
 8012f2c:	6920      	ldr	r0, [r4, #16]
 8012f2e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012f32:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012f36:	f001 fbb1 	bl	801469c <run_xrce_session>
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	4628      	mov	r0, r5
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	bf14      	ite	ne
 8012f42:	2400      	movne	r4, #0
 8012f44:	2402      	moveq	r4, #2
 8012f46:	f001 fa85 	bl	8014454 <rmw_uxrce_fini_client_memory>
 8012f4a:	e7c4      	b.n	8012ed6 <rmw_destroy_client+0x12>

08012f4c <rmw_get_implementation_identifier>:
 8012f4c:	4b01      	ldr	r3, [pc, #4]	@ (8012f54 <rmw_get_implementation_identifier+0x8>)
 8012f4e:	6818      	ldr	r0, [r3, #0]
 8012f50:	4770      	bx	lr
 8012f52:	bf00      	nop
 8012f54:	0801ce28 	.word	0x0801ce28

08012f58 <rmw_init_options_init>:
 8012f58:	b084      	sub	sp, #16
 8012f5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f5c:	b083      	sub	sp, #12
 8012f5e:	ad09      	add	r5, sp, #36	@ 0x24
 8012f60:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8012f64:	b130      	cbz	r0, 8012f74 <rmw_init_options_init+0x1c>
 8012f66:	4604      	mov	r4, r0
 8012f68:	4628      	mov	r0, r5
 8012f6a:	f7fc fa1b 	bl	800f3a4 <rcutils_allocator_is_valid>
 8012f6e:	b108      	cbz	r0, 8012f74 <rmw_init_options_init+0x1c>
 8012f70:	68a6      	ldr	r6, [r4, #8]
 8012f72:	b12e      	cbz	r6, 8012f80 <rmw_init_options_init+0x28>
 8012f74:	200b      	movs	r0, #11
 8012f76:	b003      	add	sp, #12
 8012f78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012f7c:	b004      	add	sp, #16
 8012f7e:	4770      	bx	lr
 8012f80:	2200      	movs	r2, #0
 8012f82:	2300      	movs	r3, #0
 8012f84:	f104 0c20 	add.w	ip, r4, #32
 8012f88:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8013024 <rmw_init_options_init+0xcc>
 8012f8c:	466f      	mov	r7, sp
 8012f8e:	e9c4 2300 	strd	r2, r3, [r4]
 8012f92:	4b20      	ldr	r3, [pc, #128]	@ (8013014 <rmw_init_options_init+0xbc>)
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	60a3      	str	r3, [r4, #8]
 8012f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f9e:	682b      	ldr	r3, [r5, #0]
 8012fa0:	4638      	mov	r0, r7
 8012fa2:	f8cc 3000 	str.w	r3, [ip]
 8012fa6:	f8c4 e01c 	str.w	lr, [r4, #28]
 8012faa:	60e6      	str	r6, [r4, #12]
 8012fac:	f7ff fe10 	bl	8012bd0 <rmw_get_default_security_options>
 8012fb0:	f104 0310 	add.w	r3, r4, #16
 8012fb4:	2203      	movs	r2, #3
 8012fb6:	e897 0003 	ldmia.w	r7, {r0, r1}
 8012fba:	e883 0003 	stmia.w	r3, {r0, r1}
 8012fbe:	4816      	ldr	r0, [pc, #88]	@ (8013018 <rmw_init_options_init+0xc0>)
 8012fc0:	4916      	ldr	r1, [pc, #88]	@ (801301c <rmw_init_options_init+0xc4>)
 8012fc2:	7626      	strb	r6, [r4, #24]
 8012fc4:	f001 f986 	bl	80142d4 <rmw_uxrce_init_init_options_impl_memory>
 8012fc8:	4813      	ldr	r0, [pc, #76]	@ (8013018 <rmw_init_options_init+0xc0>)
 8012fca:	f006 fd3f 	bl	8019a4c <get_memory>
 8012fce:	b1f0      	cbz	r0, 801300e <rmw_init_options_init+0xb6>
 8012fd0:	4a13      	ldr	r2, [pc, #76]	@ (8013020 <rmw_init_options_init+0xc8>)
 8012fd2:	6883      	ldr	r3, [r0, #8]
 8012fd4:	6851      	ldr	r1, [r2, #4]
 8012fd6:	6363      	str	r3, [r4, #52]	@ 0x34
 8012fd8:	7810      	ldrb	r0, [r2, #0]
 8012fda:	6159      	str	r1, [r3, #20]
 8012fdc:	68d1      	ldr	r1, [r2, #12]
 8012fde:	7418      	strb	r0, [r3, #16]
 8012fe0:	61d9      	str	r1, [r3, #28]
 8012fe2:	6911      	ldr	r1, [r2, #16]
 8012fe4:	6219      	str	r1, [r3, #32]
 8012fe6:	6951      	ldr	r1, [r2, #20]
 8012fe8:	6892      	ldr	r2, [r2, #8]
 8012fea:	6259      	str	r1, [r3, #36]	@ 0x24
 8012fec:	619a      	str	r2, [r3, #24]
 8012fee:	f005 f859 	bl	80180a4 <uxr_nanos>
 8012ff2:	f007 fe31 	bl	801ac58 <srand>
 8012ff6:	f007 fe5d 	bl	801acb4 <rand>
 8012ffa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012ffc:	6298      	str	r0, [r3, #40]	@ 0x28
 8012ffe:	2800      	cmp	r0, #0
 8013000:	d0f9      	beq.n	8012ff6 <rmw_init_options_init+0x9e>
 8013002:	2000      	movs	r0, #0
 8013004:	b003      	add	sp, #12
 8013006:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801300a:	b004      	add	sp, #16
 801300c:	4770      	bx	lr
 801300e:	2001      	movs	r0, #1
 8013010:	e7b1      	b.n	8012f76 <rmw_init_options_init+0x1e>
 8013012:	bf00      	nop
 8013014:	0801ce28 	.word	0x0801ce28
 8013018:	240685cc 	.word	0x240685cc
 801301c:	24063e68 	.word	0x24063e68
 8013020:	24063c24 	.word	0x24063c24
 8013024:	0801c5d4 	.word	0x0801c5d4

08013028 <rmw_init_options_copy>:
 8013028:	2800      	cmp	r0, #0
 801302a:	d047      	beq.n	80130bc <rmw_init_options_copy+0x94>
 801302c:	b570      	push	{r4, r5, r6, lr}
 801302e:	460d      	mov	r5, r1
 8013030:	b149      	cbz	r1, 8013046 <rmw_init_options_copy+0x1e>
 8013032:	4604      	mov	r4, r0
 8013034:	6880      	ldr	r0, [r0, #8]
 8013036:	b120      	cbz	r0, 8013042 <rmw_init_options_copy+0x1a>
 8013038:	4b22      	ldr	r3, [pc, #136]	@ (80130c4 <rmw_init_options_copy+0x9c>)
 801303a:	6819      	ldr	r1, [r3, #0]
 801303c:	f7ed f950 	bl	80002e0 <strcmp>
 8013040:	bba8      	cbnz	r0, 80130ae <rmw_init_options_copy+0x86>
 8013042:	68ab      	ldr	r3, [r5, #8]
 8013044:	b11b      	cbz	r3, 801304e <rmw_init_options_copy+0x26>
 8013046:	f04f 0c0b 	mov.w	ip, #11
 801304a:	4660      	mov	r0, ip
 801304c:	bd70      	pop	{r4, r5, r6, pc}
 801304e:	4623      	mov	r3, r4
 8013050:	462a      	mov	r2, r5
 8013052:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8013056:	f8d3 e000 	ldr.w	lr, [r3]
 801305a:	3310      	adds	r3, #16
 801305c:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8013060:	3210      	adds	r2, #16
 8013062:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8013066:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801306a:	42b3      	cmp	r3, r6
 801306c:	f842 ec10 	str.w	lr, [r2, #-16]
 8013070:	f842 cc0c 	str.w	ip, [r2, #-12]
 8013074:	f842 0c08 	str.w	r0, [r2, #-8]
 8013078:	f842 1c04 	str.w	r1, [r2, #-4]
 801307c:	d1eb      	bne.n	8013056 <rmw_init_options_copy+0x2e>
 801307e:	6819      	ldr	r1, [r3, #0]
 8013080:	685b      	ldr	r3, [r3, #4]
 8013082:	4811      	ldr	r0, [pc, #68]	@ (80130c8 <rmw_init_options_copy+0xa0>)
 8013084:	6011      	str	r1, [r2, #0]
 8013086:	6053      	str	r3, [r2, #4]
 8013088:	f006 fce0 	bl	8019a4c <get_memory>
 801308c:	b198      	cbz	r0, 80130b6 <rmw_init_options_copy+0x8e>
 801308e:	6883      	ldr	r3, [r0, #8]
 8013090:	f04f 0c00 	mov.w	ip, #0
 8013094:	636b      	str	r3, [r5, #52]	@ 0x34
 8013096:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8013098:	f103 0410 	add.w	r4, r3, #16
 801309c:	3510      	adds	r5, #16
 801309e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80130a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80130a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80130a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80130aa:	4660      	mov	r0, ip
 80130ac:	bd70      	pop	{r4, r5, r6, pc}
 80130ae:	f04f 0c0c 	mov.w	ip, #12
 80130b2:	4660      	mov	r0, ip
 80130b4:	bd70      	pop	{r4, r5, r6, pc}
 80130b6:	f04f 0c01 	mov.w	ip, #1
 80130ba:	e7c6      	b.n	801304a <rmw_init_options_copy+0x22>
 80130bc:	f04f 0c0b 	mov.w	ip, #11
 80130c0:	4660      	mov	r0, ip
 80130c2:	4770      	bx	lr
 80130c4:	0801ce28 	.word	0x0801ce28
 80130c8:	240685cc 	.word	0x240685cc

080130cc <rmw_init_options_fini>:
 80130cc:	b510      	push	{r4, lr}
 80130ce:	b08e      	sub	sp, #56	@ 0x38
 80130d0:	b388      	cbz	r0, 8013136 <rmw_init_options_fini+0x6a>
 80130d2:	4604      	mov	r4, r0
 80130d4:	3020      	adds	r0, #32
 80130d6:	f7fc f965 	bl	800f3a4 <rcutils_allocator_is_valid>
 80130da:	b360      	cbz	r0, 8013136 <rmw_init_options_fini+0x6a>
 80130dc:	68a0      	ldr	r0, [r4, #8]
 80130de:	b120      	cbz	r0, 80130ea <rmw_init_options_fini+0x1e>
 80130e0:	4b1a      	ldr	r3, [pc, #104]	@ (801314c <rmw_init_options_fini+0x80>)
 80130e2:	6819      	ldr	r1, [r3, #0]
 80130e4:	f7ed f8fc 	bl	80002e0 <strcmp>
 80130e8:	bb68      	cbnz	r0, 8013146 <rmw_init_options_fini+0x7a>
 80130ea:	4b19      	ldr	r3, [pc, #100]	@ (8013150 <rmw_init_options_fini+0x84>)
 80130ec:	6819      	ldr	r1, [r3, #0]
 80130ee:	b331      	cbz	r1, 801313e <rmw_init_options_fini+0x72>
 80130f0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80130f2:	e001      	b.n	80130f8 <rmw_init_options_fini+0x2c>
 80130f4:	6849      	ldr	r1, [r1, #4]
 80130f6:	b311      	cbz	r1, 801313e <rmw_init_options_fini+0x72>
 80130f8:	688b      	ldr	r3, [r1, #8]
 80130fa:	429a      	cmp	r2, r3
 80130fc:	d1fa      	bne.n	80130f4 <rmw_init_options_fini+0x28>
 80130fe:	4814      	ldr	r0, [pc, #80]	@ (8013150 <rmw_init_options_fini+0x84>)
 8013100:	f006 fcb4 	bl	8019a6c <put_memory>
 8013104:	4668      	mov	r0, sp
 8013106:	f7ff fd53 	bl	8012bb0 <rmw_get_zero_initialized_init_options>
 801310a:	46ee      	mov	lr, sp
 801310c:	46a4      	mov	ip, r4
 801310e:	2400      	movs	r4, #0
 8013110:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013114:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013118:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801311c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013120:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013124:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013128:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801312c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013130:	4620      	mov	r0, r4
 8013132:	b00e      	add	sp, #56	@ 0x38
 8013134:	bd10      	pop	{r4, pc}
 8013136:	240b      	movs	r4, #11
 8013138:	4620      	mov	r0, r4
 801313a:	b00e      	add	sp, #56	@ 0x38
 801313c:	bd10      	pop	{r4, pc}
 801313e:	2401      	movs	r4, #1
 8013140:	4620      	mov	r0, r4
 8013142:	b00e      	add	sp, #56	@ 0x38
 8013144:	bd10      	pop	{r4, pc}
 8013146:	240c      	movs	r4, #12
 8013148:	e7f2      	b.n	8013130 <rmw_init_options_fini+0x64>
 801314a:	bf00      	nop
 801314c:	0801ce28 	.word	0x0801ce28
 8013150:	240685cc 	.word	0x240685cc

08013154 <rmw_init>:
 8013154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013158:	b083      	sub	sp, #12
 801315a:	2800      	cmp	r0, #0
 801315c:	f000 80d3 	beq.w	8013306 <rmw_init+0x1b2>
 8013160:	460e      	mov	r6, r1
 8013162:	2900      	cmp	r1, #0
 8013164:	f000 80cf 	beq.w	8013306 <rmw_init+0x1b2>
 8013168:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801316a:	4605      	mov	r5, r0
 801316c:	2b00      	cmp	r3, #0
 801316e:	f000 80ca 	beq.w	8013306 <rmw_init+0x1b2>
 8013172:	4b78      	ldr	r3, [pc, #480]	@ (8013354 <rmw_init+0x200>)
 8013174:	6880      	ldr	r0, [r0, #8]
 8013176:	681f      	ldr	r7, [r3, #0]
 8013178:	b128      	cbz	r0, 8013186 <rmw_init+0x32>
 801317a:	4639      	mov	r1, r7
 801317c:	f7ed f8b0 	bl	80002e0 <strcmp>
 8013180:	2800      	cmp	r0, #0
 8013182:	f040 80ca 	bne.w	801331a <rmw_init+0x1c6>
 8013186:	4c74      	ldr	r4, [pc, #464]	@ (8013358 <rmw_init+0x204>)
 8013188:	f04f 0800 	mov.w	r8, #0
 801318c:	4973      	ldr	r1, [pc, #460]	@ (801335c <rmw_init+0x208>)
 801318e:	4874      	ldr	r0, [pc, #464]	@ (8013360 <rmw_init+0x20c>)
 8013190:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013194:	60b7      	str	r7, [r6, #8]
 8013196:	e9c6 2300 	strd	r2, r3, [r6]
 801319a:	68eb      	ldr	r3, [r5, #12]
 801319c:	2201      	movs	r2, #1
 801319e:	64b3      	str	r3, [r6, #72]	@ 0x48
 80131a0:	f001 f838 	bl	8014214 <rmw_uxrce_init_session_memory>
 80131a4:	4620      	mov	r0, r4
 80131a6:	2204      	movs	r2, #4
 80131a8:	496e      	ldr	r1, [pc, #440]	@ (8013364 <rmw_init+0x210>)
 80131aa:	f001 f873 	bl	8014294 <rmw_uxrce_init_static_input_buffer_memory>
 80131ae:	486c      	ldr	r0, [pc, #432]	@ (8013360 <rmw_init+0x20c>)
 80131b0:	f884 800d 	strb.w	r8, [r4, #13]
 80131b4:	f006 fc4a 	bl	8019a4c <get_memory>
 80131b8:	2800      	cmp	r0, #0
 80131ba:	f000 80a9 	beq.w	8013310 <rmw_init+0x1bc>
 80131be:	6884      	ldr	r4, [r0, #8]
 80131c0:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 80131c2:	f104 0910 	add.w	r9, r4, #16
 80131c6:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80131c8:	f890 c010 	ldrb.w	ip, [r0, #16]
 80131cc:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80131d0:	9101      	str	r1, [sp, #4]
 80131d2:	4661      	mov	r1, ip
 80131d4:	6a00      	ldr	r0, [r0, #32]
 80131d6:	9000      	str	r0, [sp, #0]
 80131d8:	4648      	mov	r0, r9
 80131da:	f002 ff0d 	bl	8015ff8 <uxr_set_custom_transport_callbacks>
 80131de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80131e2:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80131e6:	4960      	ldr	r1, [pc, #384]	@ (8013368 <rmw_init+0x214>)
 80131e8:	4860      	ldr	r0, [pc, #384]	@ (801336c <rmw_init+0x218>)
 80131ea:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 80131ee:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 80131f2:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 80131f6:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 80131fa:	2201      	movs	r2, #1
 80131fc:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8013200:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8013204:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8013208:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801320c:	64f4      	str	r4, [r6, #76]	@ 0x4c
 801320e:	f000 ffe1 	bl	80141d4 <rmw_uxrce_init_node_memory>
 8013212:	2205      	movs	r2, #5
 8013214:	4956      	ldr	r1, [pc, #344]	@ (8013370 <rmw_init+0x21c>)
 8013216:	4857      	ldr	r0, [pc, #348]	@ (8013374 <rmw_init+0x220>)
 8013218:	f000 ffbc 	bl	8014194 <rmw_uxrce_init_subscription_memory>
 801321c:	220a      	movs	r2, #10
 801321e:	4956      	ldr	r1, [pc, #344]	@ (8013378 <rmw_init+0x224>)
 8013220:	4856      	ldr	r0, [pc, #344]	@ (801337c <rmw_init+0x228>)
 8013222:	f000 ff97 	bl	8014154 <rmw_uxrce_init_publisher_memory>
 8013226:	2201      	movs	r2, #1
 8013228:	4955      	ldr	r1, [pc, #340]	@ (8013380 <rmw_init+0x22c>)
 801322a:	4856      	ldr	r0, [pc, #344]	@ (8013384 <rmw_init+0x230>)
 801322c:	f000 ff52 	bl	80140d4 <rmw_uxrce_init_service_memory>
 8013230:	2201      	movs	r2, #1
 8013232:	4955      	ldr	r1, [pc, #340]	@ (8013388 <rmw_init+0x234>)
 8013234:	4855      	ldr	r0, [pc, #340]	@ (801338c <rmw_init+0x238>)
 8013236:	f000 ff6d 	bl	8014114 <rmw_uxrce_init_client_memory>
 801323a:	220f      	movs	r2, #15
 801323c:	4954      	ldr	r1, [pc, #336]	@ (8013390 <rmw_init+0x23c>)
 801323e:	4855      	ldr	r0, [pc, #340]	@ (8013394 <rmw_init+0x240>)
 8013240:	f001 f808 	bl	8014254 <rmw_uxrce_init_topic_memory>
 8013244:	2203      	movs	r2, #3
 8013246:	4954      	ldr	r1, [pc, #336]	@ (8013398 <rmw_init+0x244>)
 8013248:	4854      	ldr	r0, [pc, #336]	@ (801339c <rmw_init+0x248>)
 801324a:	f001 f843 	bl	80142d4 <rmw_uxrce_init_init_options_impl_memory>
 801324e:	2204      	movs	r2, #4
 8013250:	4953      	ldr	r1, [pc, #332]	@ (80133a0 <rmw_init+0x24c>)
 8013252:	4854      	ldr	r0, [pc, #336]	@ (80133a4 <rmw_init+0x250>)
 8013254:	f001 f85e 	bl	8014314 <rmw_uxrce_init_wait_set_memory>
 8013258:	4953      	ldr	r1, [pc, #332]	@ (80133a8 <rmw_init+0x254>)
 801325a:	4854      	ldr	r0, [pc, #336]	@ (80133ac <rmw_init+0x258>)
 801325c:	2204      	movs	r2, #4
 801325e:	f001 f879 	bl	8014354 <rmw_uxrce_init_guard_condition_memory>
 8013262:	4642      	mov	r2, r8
 8013264:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8013266:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8013268:	f000 fd9a 	bl	8013da0 <rmw_uxrce_transport_init>
 801326c:	4607      	mov	r7, r0
 801326e:	2800      	cmp	r0, #0
 8013270:	d158      	bne.n	8013324 <rmw_init+0x1d0>
 8013272:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8013274:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8013278:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 801327c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801327e:	4628      	mov	r0, r5
 8013280:	f003 f8ea 	bl	8016458 <uxr_init_session>
 8013284:	4622      	mov	r2, r4
 8013286:	494a      	ldr	r1, [pc, #296]	@ (80133b0 <rmw_init+0x25c>)
 8013288:	4628      	mov	r0, r5
 801328a:	f003 f909 	bl	80164a0 <uxr_set_topic_callback>
 801328e:	463a      	mov	r2, r7
 8013290:	4948      	ldr	r1, [pc, #288]	@ (80133b4 <rmw_init+0x260>)
 8013292:	4628      	mov	r0, r5
 8013294:	f003 f900 	bl	8016498 <uxr_set_status_callback>
 8013298:	463a      	mov	r2, r7
 801329a:	4947      	ldr	r1, [pc, #284]	@ (80133b8 <rmw_init+0x264>)
 801329c:	4628      	mov	r0, r5
 801329e:	f003 f903 	bl	80164a8 <uxr_set_request_callback>
 80132a2:	463a      	mov	r2, r7
 80132a4:	4945      	ldr	r1, [pc, #276]	@ (80133bc <rmw_init+0x268>)
 80132a6:	4628      	mov	r0, r5
 80132a8:	f003 f902 	bl	80164b0 <uxr_set_reply_callback>
 80132ac:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80132b0:	2304      	movs	r3, #4
 80132b2:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 80132b6:	0092      	lsls	r2, r2, #2
 80132b8:	4628      	mov	r0, r5
 80132ba:	f003 f939 	bl	8016530 <uxr_create_input_reliable_stream>
 80132be:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80132c2:	2304      	movs	r3, #4
 80132c4:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 80132c8:	0092      	lsls	r2, r2, #2
 80132ca:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 80132ce:	4628      	mov	r0, r5
 80132d0:	f003 f904 	bl	80164dc <uxr_create_output_reliable_stream>
 80132d4:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 80132d8:	4628      	mov	r0, r5
 80132da:	f003 f923 	bl	8016524 <uxr_create_input_best_effort_stream>
 80132de:	f241 3194 	movw	r1, #5012	@ 0x1394
 80132e2:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 80132e6:	4628      	mov	r0, r5
 80132e8:	4421      	add	r1, r4
 80132ea:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80132ee:	f003 f8e3 	bl	80164b8 <uxr_create_output_best_effort_stream>
 80132f2:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 80132f6:	4628      	mov	r0, r5
 80132f8:	f003 fe6c 	bl	8016fd4 <uxr_create_session>
 80132fc:	b1f8      	cbz	r0, 801333e <rmw_init+0x1ea>
 80132fe:	4638      	mov	r0, r7
 8013300:	b003      	add	sp, #12
 8013302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013306:	270b      	movs	r7, #11
 8013308:	4638      	mov	r0, r7
 801330a:	b003      	add	sp, #12
 801330c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013310:	2701      	movs	r7, #1
 8013312:	4638      	mov	r0, r7
 8013314:	b003      	add	sp, #12
 8013316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801331a:	270c      	movs	r7, #12
 801331c:	4638      	mov	r0, r7
 801331e:	b003      	add	sp, #12
 8013320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013324:	4648      	mov	r0, r9
 8013326:	f002 fea5 	bl	8016074 <uxr_close_custom_transport>
 801332a:	4621      	mov	r1, r4
 801332c:	480c      	ldr	r0, [pc, #48]	@ (8013360 <rmw_init+0x20c>)
 801332e:	f006 fb9d 	bl	8019a6c <put_memory>
 8013332:	4638      	mov	r0, r7
 8013334:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8013338:	b003      	add	sp, #12
 801333a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801333e:	4648      	mov	r0, r9
 8013340:	f002 fe98 	bl	8016074 <uxr_close_custom_transport>
 8013344:	4621      	mov	r1, r4
 8013346:	4806      	ldr	r0, [pc, #24]	@ (8013360 <rmw_init+0x20c>)
 8013348:	f006 fb90 	bl	8019a6c <put_memory>
 801334c:	64f7      	str	r7, [r6, #76]	@ 0x4c
 801334e:	2701      	movs	r7, #1
 8013350:	e7d5      	b.n	80132fe <rmw_init+0x1aa>
 8013352:	bf00      	nop
 8013354:	0801ce28 	.word	0x0801ce28
 8013358:	2406861c 	.word	0x2406861c
 801335c:	240648c8 	.word	0x240648c8
 8013360:	2406860c 	.word	0x2406860c
 8013364:	24065e70 	.word	0x24065e70
 8013368:	24063eec 	.word	0x24063eec
 801336c:	240685dc 	.word	0x240685dc
 8013370:	24067f70 	.word	0x24067f70
 8013374:	2406862c 	.word	0x2406862c
 8013378:	24063f90 	.word	0x24063f90
 801337c:	240685ec 	.word	0x240685ec
 8013380:	24064800 	.word	0x24064800
 8013384:	240685fc 	.word	0x240685fc
 8013388:	24063d20 	.word	0x24063d20
 801338c:	24063d10 	.word	0x24063d10
 8013390:	240683a8 	.word	0x240683a8
 8013394:	2406863c 	.word	0x2406863c
 8013398:	24063e68 	.word	0x24063e68
 801339c:	240685cc 	.word	0x240685cc
 80133a0:	2406854c 	.word	0x2406854c
 80133a4:	2406864c 	.word	0x2406864c
 80133a8:	24063de8 	.word	0x24063de8
 80133ac:	240685bc 	.word	0x240685bc
 80133b0:	08019885 	.word	0x08019885
 80133b4:	0801987d 	.word	0x0801987d
 80133b8:	0801991d 	.word	0x0801991d
 80133bc:	080199b9 	.word	0x080199b9

080133c0 <rmw_context_fini>:
 80133c0:	4b17      	ldr	r3, [pc, #92]	@ (8013420 <rmw_context_fini+0x60>)
 80133c2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80133c4:	b570      	push	{r4, r5, r6, lr}
 80133c6:	681c      	ldr	r4, [r3, #0]
 80133c8:	4605      	mov	r5, r0
 80133ca:	b334      	cbz	r4, 801341a <rmw_context_fini+0x5a>
 80133cc:	2600      	movs	r6, #0
 80133ce:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 80133d2:	6902      	ldr	r2, [r0, #16]
 80133d4:	428a      	cmp	r2, r1
 80133d6:	d018      	beq.n	801340a <rmw_context_fini+0x4a>
 80133d8:	2c00      	cmp	r4, #0
 80133da:	d1f8      	bne.n	80133ce <rmw_context_fini+0xe>
 80133dc:	b189      	cbz	r1, 8013402 <rmw_context_fini+0x42>
 80133de:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 80133e2:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 80133e6:	789b      	ldrb	r3, [r3, #2]
 80133e8:	2b01      	cmp	r3, #1
 80133ea:	bf14      	ite	ne
 80133ec:	210a      	movne	r1, #10
 80133ee:	2100      	moveq	r1, #0
 80133f0:	f003 fdc8 	bl	8016f84 <uxr_delete_session_retries>
 80133f4:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80133f6:	f000 ffcd 	bl	8014394 <rmw_uxrce_fini_session_memory>
 80133fa:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80133fc:	3010      	adds	r0, #16
 80133fe:	f002 fe39 	bl	8016074 <uxr_close_custom_transport>
 8013402:	2300      	movs	r3, #0
 8013404:	4630      	mov	r0, r6
 8013406:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8013408:	bd70      	pop	{r4, r5, r6, pc}
 801340a:	3018      	adds	r0, #24
 801340c:	f000 f89c 	bl	8013548 <rmw_destroy_node>
 8013410:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8013412:	4606      	mov	r6, r0
 8013414:	2c00      	cmp	r4, #0
 8013416:	d1da      	bne.n	80133ce <rmw_context_fini+0xe>
 8013418:	e7e0      	b.n	80133dc <rmw_context_fini+0x1c>
 801341a:	4626      	mov	r6, r4
 801341c:	e7de      	b.n	80133dc <rmw_context_fini+0x1c>
 801341e:	bf00      	nop
 8013420:	240685dc 	.word	0x240685dc

08013424 <create_node>:
 8013424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013428:	b083      	sub	sp, #12
 801342a:	2b00      	cmp	r3, #0
 801342c:	d064      	beq.n	80134f8 <create_node+0xd4>
 801342e:	4606      	mov	r6, r0
 8013430:	4838      	ldr	r0, [pc, #224]	@ (8013514 <create_node+0xf0>)
 8013432:	460f      	mov	r7, r1
 8013434:	4690      	mov	r8, r2
 8013436:	461d      	mov	r5, r3
 8013438:	f006 fb08 	bl	8019a4c <get_memory>
 801343c:	2800      	cmp	r0, #0
 801343e:	d05b      	beq.n	80134f8 <create_node+0xd4>
 8013440:	6884      	ldr	r4, [r0, #8]
 8013442:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8013444:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8013448:	f104 0518 	add.w	r5, r4, #24
 801344c:	6123      	str	r3, [r4, #16]
 801344e:	f7ff fd7d 	bl	8012f4c <rmw_get_implementation_identifier>
 8013452:	f8c4 9020 	str.w	r9, [r4, #32]
 8013456:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801345a:	4630      	mov	r0, r6
 801345c:	f7ec ff4a 	bl	80002f4 <strlen>
 8013460:	1c42      	adds	r2, r0, #1
 8013462:	2a3c      	cmp	r2, #60	@ 0x3c
 8013464:	d840      	bhi.n	80134e8 <create_node+0xc4>
 8013466:	4648      	mov	r0, r9
 8013468:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 801346c:	4631      	mov	r1, r6
 801346e:	f008 f8b6 	bl	801b5de <memcpy>
 8013472:	4638      	mov	r0, r7
 8013474:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8013478:	f7ec ff3c 	bl	80002f4 <strlen>
 801347c:	1c42      	adds	r2, r0, #1
 801347e:	2a3c      	cmp	r2, #60	@ 0x3c
 8013480:	d832      	bhi.n	80134e8 <create_node+0xc4>
 8013482:	4639      	mov	r1, r7
 8013484:	4648      	mov	r0, r9
 8013486:	f008 f8aa 	bl	801b5de <memcpy>
 801348a:	6923      	ldr	r3, [r4, #16]
 801348c:	2101      	movs	r1, #1
 801348e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013492:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8013496:	1842      	adds	r2, r0, r1
 8013498:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 801349c:	f002 fdee 	bl	801607c <uxr_object_id>
 80134a0:	6160      	str	r0, [r4, #20]
 80134a2:	783b      	ldrb	r3, [r7, #0]
 80134a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80134a6:	d12c      	bne.n	8013502 <create_node+0xde>
 80134a8:	787b      	ldrb	r3, [r7, #1]
 80134aa:	bb53      	cbnz	r3, 8013502 <create_node+0xde>
 80134ac:	4633      	mov	r3, r6
 80134ae:	4a1a      	ldr	r2, [pc, #104]	@ (8013518 <create_node+0xf4>)
 80134b0:	213c      	movs	r1, #60	@ 0x3c
 80134b2:	481a      	ldr	r0, [pc, #104]	@ (801351c <create_node+0xf8>)
 80134b4:	f007 fe06 	bl	801b0c4 <sniprintf>
 80134b8:	6920      	ldr	r0, [r4, #16]
 80134ba:	2106      	movs	r1, #6
 80134bc:	fa1f f388 	uxth.w	r3, r8
 80134c0:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80134c4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80134c8:	9101      	str	r1, [sp, #4]
 80134ca:	4914      	ldr	r1, [pc, #80]	@ (801351c <create_node+0xf8>)
 80134cc:	9100      	str	r1, [sp, #0]
 80134ce:	6811      	ldr	r1, [r2, #0]
 80134d0:	6962      	ldr	r2, [r4, #20]
 80134d2:	f002 fc05 	bl	8015ce0 <uxr_buffer_create_participant_bin>
 80134d6:	4602      	mov	r2, r0
 80134d8:	6920      	ldr	r0, [r4, #16]
 80134da:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80134de:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80134e2:	f001 f8db 	bl	801469c <run_xrce_session>
 80134e6:	b918      	cbnz	r0, 80134f0 <create_node+0xcc>
 80134e8:	4628      	mov	r0, r5
 80134ea:	2500      	movs	r5, #0
 80134ec:	f000 ff58 	bl	80143a0 <rmw_uxrce_fini_node_memory>
 80134f0:	4628      	mov	r0, r5
 80134f2:	b003      	add	sp, #12
 80134f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134f8:	2500      	movs	r5, #0
 80134fa:	4628      	mov	r0, r5
 80134fc:	b003      	add	sp, #12
 80134fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013502:	463b      	mov	r3, r7
 8013504:	4a06      	ldr	r2, [pc, #24]	@ (8013520 <create_node+0xfc>)
 8013506:	213c      	movs	r1, #60	@ 0x3c
 8013508:	9600      	str	r6, [sp, #0]
 801350a:	4804      	ldr	r0, [pc, #16]	@ (801351c <create_node+0xf8>)
 801350c:	f007 fdda 	bl	801b0c4 <sniprintf>
 8013510:	e7d2      	b.n	80134b8 <create_node+0x94>
 8013512:	bf00      	nop
 8013514:	240685dc 	.word	0x240685dc
 8013518:	0801cb6c 	.word	0x0801cb6c
 801351c:	24063cd4 	.word	0x24063cd4
 8013520:	0801c5e4 	.word	0x0801c5e4

08013524 <rmw_create_node>:
 8013524:	468c      	mov	ip, r1
 8013526:	4611      	mov	r1, r2
 8013528:	f1bc 0f00 	cmp.w	ip, #0
 801352c:	d00a      	beq.n	8013544 <rmw_create_node+0x20>
 801352e:	f89c 3000 	ldrb.w	r3, [ip]
 8013532:	b13b      	cbz	r3, 8013544 <rmw_create_node+0x20>
 8013534:	b132      	cbz	r2, 8013544 <rmw_create_node+0x20>
 8013536:	7813      	ldrb	r3, [r2, #0]
 8013538:	b123      	cbz	r3, 8013544 <rmw_create_node+0x20>
 801353a:	4603      	mov	r3, r0
 801353c:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 801353e:	4660      	mov	r0, ip
 8013540:	f7ff bf70 	b.w	8013424 <create_node>
 8013544:	2000      	movs	r0, #0
 8013546:	4770      	bx	lr

08013548 <rmw_destroy_node>:
 8013548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801354a:	b328      	cbz	r0, 8013598 <rmw_destroy_node+0x50>
 801354c:	4607      	mov	r7, r0
 801354e:	6800      	ldr	r0, [r0, #0]
 8013550:	b120      	cbz	r0, 801355c <rmw_destroy_node+0x14>
 8013552:	4b37      	ldr	r3, [pc, #220]	@ (8013630 <rmw_destroy_node+0xe8>)
 8013554:	6819      	ldr	r1, [r3, #0]
 8013556:	f7ec fec3 	bl	80002e0 <strcmp>
 801355a:	b9e8      	cbnz	r0, 8013598 <rmw_destroy_node+0x50>
 801355c:	687d      	ldr	r5, [r7, #4]
 801355e:	b1dd      	cbz	r5, 8013598 <rmw_destroy_node+0x50>
 8013560:	4b34      	ldr	r3, [pc, #208]	@ (8013634 <rmw_destroy_node+0xec>)
 8013562:	681c      	ldr	r4, [r3, #0]
 8013564:	2c00      	cmp	r4, #0
 8013566:	d060      	beq.n	801362a <rmw_destroy_node+0xe2>
 8013568:	2600      	movs	r6, #0
 801356a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801356e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8013572:	429d      	cmp	r5, r3
 8013574:	d013      	beq.n	801359e <rmw_destroy_node+0x56>
 8013576:	2c00      	cmp	r4, #0
 8013578:	d1f7      	bne.n	801356a <rmw_destroy_node+0x22>
 801357a:	4b2f      	ldr	r3, [pc, #188]	@ (8013638 <rmw_destroy_node+0xf0>)
 801357c:	681c      	ldr	r4, [r3, #0]
 801357e:	b1c4      	cbz	r4, 80135b2 <rmw_destroy_node+0x6a>
 8013580:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013584:	6a0b      	ldr	r3, [r1, #32]
 8013586:	429d      	cmp	r5, r3
 8013588:	d1f9      	bne.n	801357e <rmw_destroy_node+0x36>
 801358a:	317c      	adds	r1, #124	@ 0x7c
 801358c:	4638      	mov	r0, r7
 801358e:	f000 fb51 	bl	8013c34 <rmw_destroy_subscription>
 8013592:	2801      	cmp	r0, #1
 8013594:	4606      	mov	r6, r0
 8013596:	d1f2      	bne.n	801357e <rmw_destroy_node+0x36>
 8013598:	2601      	movs	r6, #1
 801359a:	4630      	mov	r0, r6
 801359c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801359e:	3184      	adds	r1, #132	@ 0x84
 80135a0:	4638      	mov	r0, r7
 80135a2:	f000 f855 	bl	8013650 <rmw_destroy_publisher>
 80135a6:	2801      	cmp	r0, #1
 80135a8:	4606      	mov	r6, r0
 80135aa:	d0f5      	beq.n	8013598 <rmw_destroy_node+0x50>
 80135ac:	2c00      	cmp	r4, #0
 80135ae:	d1dc      	bne.n	801356a <rmw_destroy_node+0x22>
 80135b0:	e7e3      	b.n	801357a <rmw_destroy_node+0x32>
 80135b2:	4b22      	ldr	r3, [pc, #136]	@ (801363c <rmw_destroy_node+0xf4>)
 80135b4:	681c      	ldr	r4, [r3, #0]
 80135b6:	b16c      	cbz	r4, 80135d4 <rmw_destroy_node+0x8c>
 80135b8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80135bc:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80135be:	429d      	cmp	r5, r3
 80135c0:	d1f9      	bne.n	80135b6 <rmw_destroy_node+0x6e>
 80135c2:	317c      	adds	r1, #124	@ 0x7c
 80135c4:	4638      	mov	r0, r7
 80135c6:	f000 f9e7 	bl	8013998 <rmw_destroy_service>
 80135ca:	2801      	cmp	r0, #1
 80135cc:	4606      	mov	r6, r0
 80135ce:	d0e3      	beq.n	8013598 <rmw_destroy_node+0x50>
 80135d0:	2c00      	cmp	r4, #0
 80135d2:	d1f1      	bne.n	80135b8 <rmw_destroy_node+0x70>
 80135d4:	4b1a      	ldr	r3, [pc, #104]	@ (8013640 <rmw_destroy_node+0xf8>)
 80135d6:	681c      	ldr	r4, [r3, #0]
 80135d8:	b16c      	cbz	r4, 80135f6 <rmw_destroy_node+0xae>
 80135da:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80135de:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80135e0:	429d      	cmp	r5, r3
 80135e2:	d1f9      	bne.n	80135d8 <rmw_destroy_node+0x90>
 80135e4:	317c      	adds	r1, #124	@ 0x7c
 80135e6:	4638      	mov	r0, r7
 80135e8:	f7ff fc6c 	bl	8012ec4 <rmw_destroy_client>
 80135ec:	2801      	cmp	r0, #1
 80135ee:	4606      	mov	r6, r0
 80135f0:	d0d2      	beq.n	8013598 <rmw_destroy_node+0x50>
 80135f2:	2c00      	cmp	r4, #0
 80135f4:	d1f1      	bne.n	80135da <rmw_destroy_node+0x92>
 80135f6:	6928      	ldr	r0, [r5, #16]
 80135f8:	696a      	ldr	r2, [r5, #20]
 80135fa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80135fe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013602:	6819      	ldr	r1, [r3, #0]
 8013604:	f002 fb20 	bl	8015c48 <uxr_buffer_delete_entity>
 8013608:	4602      	mov	r2, r0
 801360a:	6928      	ldr	r0, [r5, #16]
 801360c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013610:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013614:	f001 f842 	bl	801469c <run_xrce_session>
 8013618:	4603      	mov	r3, r0
 801361a:	4638      	mov	r0, r7
 801361c:	2b00      	cmp	r3, #0
 801361e:	bf08      	it	eq
 8013620:	2602      	moveq	r6, #2
 8013622:	f000 febd 	bl	80143a0 <rmw_uxrce_fini_node_memory>
 8013626:	4630      	mov	r0, r6
 8013628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801362a:	4626      	mov	r6, r4
 801362c:	e7a5      	b.n	801357a <rmw_destroy_node+0x32>
 801362e:	bf00      	nop
 8013630:	0801ce28 	.word	0x0801ce28
 8013634:	240685ec 	.word	0x240685ec
 8013638:	2406862c 	.word	0x2406862c
 801363c:	240685fc 	.word	0x240685fc
 8013640:	24063d10 	.word	0x24063d10

08013644 <rmw_node_get_graph_guard_condition>:
 8013644:	6843      	ldr	r3, [r0, #4]
 8013646:	6918      	ldr	r0, [r3, #16]
 8013648:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 801364c:	4770      	bx	lr
 801364e:	bf00      	nop

08013650 <rmw_destroy_publisher>:
 8013650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013654:	b128      	cbz	r0, 8013662 <rmw_destroy_publisher+0x12>
 8013656:	4604      	mov	r4, r0
 8013658:	6800      	ldr	r0, [r0, #0]
 801365a:	460d      	mov	r5, r1
 801365c:	f001 f898 	bl	8014790 <is_uxrce_rmw_identifier_valid>
 8013660:	b918      	cbnz	r0, 801366a <rmw_destroy_publisher+0x1a>
 8013662:	2401      	movs	r4, #1
 8013664:	4620      	mov	r0, r4
 8013666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801366a:	6863      	ldr	r3, [r4, #4]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d0f8      	beq.n	8013662 <rmw_destroy_publisher+0x12>
 8013670:	fab5 f485 	clz	r4, r5
 8013674:	0964      	lsrs	r4, r4, #5
 8013676:	2d00      	cmp	r5, #0
 8013678:	d0f3      	beq.n	8013662 <rmw_destroy_publisher+0x12>
 801367a:	6828      	ldr	r0, [r5, #0]
 801367c:	f001 f888 	bl	8014790 <is_uxrce_rmw_identifier_valid>
 8013680:	2800      	cmp	r0, #0
 8013682:	d0ee      	beq.n	8013662 <rmw_destroy_publisher+0x12>
 8013684:	686e      	ldr	r6, [r5, #4]
 8013686:	2e00      	cmp	r6, #0
 8013688:	d0eb      	beq.n	8013662 <rmw_destroy_publisher+0x12>
 801368a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 801368c:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 8013690:	f006 fa7a 	bl	8019b88 <destroy_topic>
 8013694:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8013698:	6972      	ldr	r2, [r6, #20]
 801369a:	6918      	ldr	r0, [r3, #16]
 801369c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80136a0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80136a4:	6819      	ldr	r1, [r3, #0]
 80136a6:	f002 facf 	bl	8015c48 <uxr_buffer_delete_entity>
 80136aa:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80136ae:	4680      	mov	r8, r0
 80136b0:	6932      	ldr	r2, [r6, #16]
 80136b2:	6918      	ldr	r0, [r3, #16]
 80136b4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80136b8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80136bc:	6819      	ldr	r1, [r3, #0]
 80136be:	f002 fac3 	bl	8015c48 <uxr_buffer_delete_entity>
 80136c2:	4606      	mov	r6, r0
 80136c4:	6938      	ldr	r0, [r7, #16]
 80136c6:	4642      	mov	r2, r8
 80136c8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80136cc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80136d0:	f000 ffe4 	bl	801469c <run_xrce_session>
 80136d4:	693f      	ldr	r7, [r7, #16]
 80136d6:	4632      	mov	r2, r6
 80136d8:	4606      	mov	r6, r0
 80136da:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80136de:	4638      	mov	r0, r7
 80136e0:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80136e4:	f000 ffda 	bl	801469c <run_xrce_session>
 80136e8:	b126      	cbz	r6, 80136f4 <rmw_destroy_publisher+0xa4>
 80136ea:	b118      	cbz	r0, 80136f4 <rmw_destroy_publisher+0xa4>
 80136ec:	4628      	mov	r0, r5
 80136ee:	f000 fe6f 	bl	80143d0 <rmw_uxrce_fini_publisher_memory>
 80136f2:	e7b7      	b.n	8013664 <rmw_destroy_publisher+0x14>
 80136f4:	2402      	movs	r4, #2
 80136f6:	e7f9      	b.n	80136ec <rmw_destroy_publisher+0x9c>

080136f8 <rmw_send_request>:
 80136f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80136fc:	4604      	mov	r4, r0
 80136fe:	6800      	ldr	r0, [r0, #0]
 8013700:	b08b      	sub	sp, #44	@ 0x2c
 8013702:	460e      	mov	r6, r1
 8013704:	4615      	mov	r5, r2
 8013706:	b128      	cbz	r0, 8013714 <rmw_send_request+0x1c>
 8013708:	4b21      	ldr	r3, [pc, #132]	@ (8013790 <rmw_send_request+0x98>)
 801370a:	6819      	ldr	r1, [r3, #0]
 801370c:	f7ec fde8 	bl	80002e0 <strcmp>
 8013710:	2800      	cmp	r0, #0
 8013712:	d139      	bne.n	8013788 <rmw_send_request+0x90>
 8013714:	6864      	ldr	r4, [r4, #4]
 8013716:	2700      	movs	r7, #0
 8013718:	6963      	ldr	r3, [r4, #20]
 801371a:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801371e:	689b      	ldr	r3, [r3, #8]
 8013720:	4798      	blx	r3
 8013722:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8013726:	4630      	mov	r0, r6
 8013728:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801372c:	4798      	blx	r3
 801372e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013732:	9000      	str	r0, [sp, #0]
 8013734:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8013738:	6922      	ldr	r2, [r4, #16]
 801373a:	ab02      	add	r3, sp, #8
 801373c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801373e:	f004 fcc7 	bl	80180d0 <uxr_prepare_output_stream>
 8013742:	e9c5 0700 	strd	r0, r7, [r5]
 8013746:	b198      	cbz	r0, 8013770 <rmw_send_request+0x78>
 8013748:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801374c:	a902      	add	r1, sp, #8
 801374e:	4630      	mov	r0, r6
 8013750:	4798      	blx	r3
 8013752:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8013756:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801375a:	2b01      	cmp	r3, #1
 801375c:	d00c      	beq.n	8013778 <rmw_send_request+0x80>
 801375e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8013760:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013764:	f003 fac4 	bl	8016cf0 <uxr_run_session_until_confirm_delivery>
 8013768:	4638      	mov	r0, r7
 801376a:	b00b      	add	sp, #44	@ 0x2c
 801376c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013770:	2001      	movs	r0, #1
 8013772:	b00b      	add	sp, #44	@ 0x2c
 8013774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013778:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801377c:	f002 fefe 	bl	801657c <uxr_flash_output_streams>
 8013780:	4638      	mov	r0, r7
 8013782:	b00b      	add	sp, #44	@ 0x2c
 8013784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013788:	200c      	movs	r0, #12
 801378a:	b00b      	add	sp, #44	@ 0x2c
 801378c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013790:	0801ce28 	.word	0x0801ce28

08013794 <rmw_take_request>:
 8013794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013798:	4605      	mov	r5, r0
 801379a:	6800      	ldr	r0, [r0, #0]
 801379c:	b089      	sub	sp, #36	@ 0x24
 801379e:	460c      	mov	r4, r1
 80137a0:	4690      	mov	r8, r2
 80137a2:	461e      	mov	r6, r3
 80137a4:	b128      	cbz	r0, 80137b2 <rmw_take_request+0x1e>
 80137a6:	4b28      	ldr	r3, [pc, #160]	@ (8013848 <rmw_take_request+0xb4>)
 80137a8:	6819      	ldr	r1, [r3, #0]
 80137aa:	f7ec fd99 	bl	80002e0 <strcmp>
 80137ae:	2800      	cmp	r0, #0
 80137b0:	d146      	bne.n	8013840 <rmw_take_request+0xac>
 80137b2:	b10e      	cbz	r6, 80137b8 <rmw_take_request+0x24>
 80137b4:	2300      	movs	r3, #0
 80137b6:	7033      	strb	r3, [r6, #0]
 80137b8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80137bc:	f000 fef0 	bl	80145a0 <rmw_uxrce_clean_expired_static_input_buffer>
 80137c0:	4648      	mov	r0, r9
 80137c2:	f000 fec3 	bl	801454c <rmw_uxrce_find_static_input_buffer_by_owner>
 80137c6:	4607      	mov	r7, r0
 80137c8:	b3b0      	cbz	r0, 8013838 <rmw_take_request+0xa4>
 80137ca:	6885      	ldr	r5, [r0, #8]
 80137cc:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 80137d0:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 80137d4:	e9c4 3208 	strd	r3, r2, [r4, #32]
 80137d8:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80137dc:	7423      	strb	r3, [r4, #16]
 80137de:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 80137e2:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 80137e6:	f8a4 2011 	strh.w	r2, [r4, #17]
 80137ea:	74e3      	strb	r3, [r4, #19]
 80137ec:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 80137f0:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 80137f4:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 80137f8:	6161      	str	r1, [r4, #20]
 80137fa:	61a2      	str	r2, [r4, #24]
 80137fc:	61e3      	str	r3, [r4, #28]
 80137fe:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8013802:	689b      	ldr	r3, [r3, #8]
 8013804:	4798      	blx	r3
 8013806:	6844      	ldr	r4, [r0, #4]
 8013808:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801380c:	f105 0110 	add.w	r1, r5, #16
 8013810:	4668      	mov	r0, sp
 8013812:	f7fb ff9b 	bl	800f74c <ucdr_init_buffer>
 8013816:	4641      	mov	r1, r8
 8013818:	68e3      	ldr	r3, [r4, #12]
 801381a:	4668      	mov	r0, sp
 801381c:	4798      	blx	r3
 801381e:	4639      	mov	r1, r7
 8013820:	4604      	mov	r4, r0
 8013822:	480a      	ldr	r0, [pc, #40]	@ (801384c <rmw_take_request+0xb8>)
 8013824:	f006 f922 	bl	8019a6c <put_memory>
 8013828:	b106      	cbz	r6, 801382c <rmw_take_request+0x98>
 801382a:	7034      	strb	r4, [r6, #0]
 801382c:	f084 0001 	eor.w	r0, r4, #1
 8013830:	b2c0      	uxtb	r0, r0
 8013832:	b009      	add	sp, #36	@ 0x24
 8013834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013838:	2001      	movs	r0, #1
 801383a:	b009      	add	sp, #36	@ 0x24
 801383c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013840:	200c      	movs	r0, #12
 8013842:	b009      	add	sp, #36	@ 0x24
 8013844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013848:	0801ce28 	.word	0x0801ce28
 801384c:	2406861c 	.word	0x2406861c

08013850 <rmw_send_response>:
 8013850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013852:	4605      	mov	r5, r0
 8013854:	6800      	ldr	r0, [r0, #0]
 8013856:	b091      	sub	sp, #68	@ 0x44
 8013858:	460c      	mov	r4, r1
 801385a:	4616      	mov	r6, r2
 801385c:	b128      	cbz	r0, 801386a <rmw_send_response+0x1a>
 801385e:	4b29      	ldr	r3, [pc, #164]	@ (8013904 <rmw_send_response+0xb4>)
 8013860:	6819      	ldr	r1, [r3, #0]
 8013862:	f7ec fd3d 	bl	80002e0 <strcmp>
 8013866:	2800      	cmp	r0, #0
 8013868:	d141      	bne.n	80138ee <rmw_send_response+0x9e>
 801386a:	686d      	ldr	r5, [r5, #4]
 801386c:	68a1      	ldr	r1, [r4, #8]
 801386e:	6860      	ldr	r0, [r4, #4]
 8013870:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8013872:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8013876:	9307      	str	r3, [sp, #28]
 8013878:	4623      	mov	r3, r4
 801387a:	9206      	str	r2, [sp, #24]
 801387c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013880:	789b      	ldrb	r3, [r3, #2]
 8013882:	f88d 2017 	strb.w	r2, [sp, #23]
 8013886:	f88d 3016 	strb.w	r3, [sp, #22]
 801388a:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801388e:	68e2      	ldr	r2, [r4, #12]
 8013890:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013894:	ab02      	add	r3, sp, #8
 8013896:	696c      	ldr	r4, [r5, #20]
 8013898:	c307      	stmia	r3!, {r0, r1, r2}
 801389a:	68e3      	ldr	r3, [r4, #12]
 801389c:	4798      	blx	r3
 801389e:	6844      	ldr	r4, [r0, #4]
 80138a0:	4630      	mov	r0, r6
 80138a2:	6923      	ldr	r3, [r4, #16]
 80138a4:	4798      	blx	r3
 80138a6:	f100 0318 	add.w	r3, r0, #24
 80138aa:	6938      	ldr	r0, [r7, #16]
 80138ac:	9300      	str	r3, [sp, #0]
 80138ae:	ab08      	add	r3, sp, #32
 80138b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80138b4:	692a      	ldr	r2, [r5, #16]
 80138b6:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80138b8:	f004 fc0a 	bl	80180d0 <uxr_prepare_output_stream>
 80138bc:	b910      	cbnz	r0, 80138c4 <rmw_send_response+0x74>
 80138be:	2001      	movs	r0, #1
 80138c0:	b011      	add	sp, #68	@ 0x44
 80138c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138c4:	a902      	add	r1, sp, #8
 80138c6:	a808      	add	r0, sp, #32
 80138c8:	f005 fb94 	bl	8018ff4 <uxr_serialize_SampleIdentity>
 80138cc:	68a3      	ldr	r3, [r4, #8]
 80138ce:	a908      	add	r1, sp, #32
 80138d0:	4630      	mov	r0, r6
 80138d2:	4798      	blx	r3
 80138d4:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80138d8:	6938      	ldr	r0, [r7, #16]
 80138da:	2b01      	cmp	r3, #1
 80138dc:	d00a      	beq.n	80138f4 <rmw_send_response+0xa4>
 80138de:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80138e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80138e4:	f003 fa04 	bl	8016cf0 <uxr_run_session_until_confirm_delivery>
 80138e8:	2000      	movs	r0, #0
 80138ea:	b011      	add	sp, #68	@ 0x44
 80138ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138ee:	200c      	movs	r0, #12
 80138f0:	b011      	add	sp, #68	@ 0x44
 80138f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80138f8:	f002 fe40 	bl	801657c <uxr_flash_output_streams>
 80138fc:	2000      	movs	r0, #0
 80138fe:	b011      	add	sp, #68	@ 0x44
 8013900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013902:	bf00      	nop
 8013904:	0801ce28 	.word	0x0801ce28

08013908 <rmw_take_response>:
 8013908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801390c:	4604      	mov	r4, r0
 801390e:	6800      	ldr	r0, [r0, #0]
 8013910:	b088      	sub	sp, #32
 8013912:	460f      	mov	r7, r1
 8013914:	4690      	mov	r8, r2
 8013916:	461d      	mov	r5, r3
 8013918:	b120      	cbz	r0, 8013924 <rmw_take_response+0x1c>
 801391a:	4b1d      	ldr	r3, [pc, #116]	@ (8013990 <rmw_take_response+0x88>)
 801391c:	6819      	ldr	r1, [r3, #0]
 801391e:	f7ec fcdf 	bl	80002e0 <strcmp>
 8013922:	bb68      	cbnz	r0, 8013980 <rmw_take_response+0x78>
 8013924:	b10d      	cbz	r5, 801392a <rmw_take_response+0x22>
 8013926:	2300      	movs	r3, #0
 8013928:	702b      	strb	r3, [r5, #0]
 801392a:	6864      	ldr	r4, [r4, #4]
 801392c:	f000 fe38 	bl	80145a0 <rmw_uxrce_clean_expired_static_input_buffer>
 8013930:	4620      	mov	r0, r4
 8013932:	f000 fe0b 	bl	801454c <rmw_uxrce_find_static_input_buffer_by_owner>
 8013936:	4606      	mov	r6, r0
 8013938:	b330      	cbz	r0, 8013988 <rmw_take_response+0x80>
 801393a:	6963      	ldr	r3, [r4, #20]
 801393c:	6884      	ldr	r4, [r0, #8]
 801393e:	68db      	ldr	r3, [r3, #12]
 8013940:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8013944:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8013948:	e9c7 0108 	strd	r0, r1, [r7, #32]
 801394c:	4798      	blx	r3
 801394e:	6847      	ldr	r7, [r0, #4]
 8013950:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8013954:	f104 0110 	add.w	r1, r4, #16
 8013958:	4668      	mov	r0, sp
 801395a:	f7fb fef7 	bl	800f74c <ucdr_init_buffer>
 801395e:	4641      	mov	r1, r8
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	4668      	mov	r0, sp
 8013964:	4798      	blx	r3
 8013966:	4631      	mov	r1, r6
 8013968:	4604      	mov	r4, r0
 801396a:	480a      	ldr	r0, [pc, #40]	@ (8013994 <rmw_take_response+0x8c>)
 801396c:	f006 f87e 	bl	8019a6c <put_memory>
 8013970:	b105      	cbz	r5, 8013974 <rmw_take_response+0x6c>
 8013972:	702c      	strb	r4, [r5, #0]
 8013974:	f084 0001 	eor.w	r0, r4, #1
 8013978:	b2c0      	uxtb	r0, r0
 801397a:	b008      	add	sp, #32
 801397c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013980:	200c      	movs	r0, #12
 8013982:	b008      	add	sp, #32
 8013984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013988:	2001      	movs	r0, #1
 801398a:	b008      	add	sp, #32
 801398c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013990:	0801ce28 	.word	0x0801ce28
 8013994:	2406861c 	.word	0x2406861c

08013998 <rmw_destroy_service>:
 8013998:	b570      	push	{r4, r5, r6, lr}
 801399a:	b128      	cbz	r0, 80139a8 <rmw_destroy_service+0x10>
 801399c:	4604      	mov	r4, r0
 801399e:	6800      	ldr	r0, [r0, #0]
 80139a0:	460d      	mov	r5, r1
 80139a2:	f000 fef5 	bl	8014790 <is_uxrce_rmw_identifier_valid>
 80139a6:	b910      	cbnz	r0, 80139ae <rmw_destroy_service+0x16>
 80139a8:	2401      	movs	r4, #1
 80139aa:	4620      	mov	r0, r4
 80139ac:	bd70      	pop	{r4, r5, r6, pc}
 80139ae:	6863      	ldr	r3, [r4, #4]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d0f9      	beq.n	80139a8 <rmw_destroy_service+0x10>
 80139b4:	2d00      	cmp	r5, #0
 80139b6:	d0f7      	beq.n	80139a8 <rmw_destroy_service+0x10>
 80139b8:	6828      	ldr	r0, [r5, #0]
 80139ba:	f000 fee9 	bl	8014790 <is_uxrce_rmw_identifier_valid>
 80139be:	2800      	cmp	r0, #0
 80139c0:	d0f2      	beq.n	80139a8 <rmw_destroy_service+0x10>
 80139c2:	686e      	ldr	r6, [r5, #4]
 80139c4:	2e00      	cmp	r6, #0
 80139c6:	d0ef      	beq.n	80139a8 <rmw_destroy_service+0x10>
 80139c8:	6864      	ldr	r4, [r4, #4]
 80139ca:	6932      	ldr	r2, [r6, #16]
 80139cc:	6920      	ldr	r0, [r4, #16]
 80139ce:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80139d2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80139d6:	6819      	ldr	r1, [r3, #0]
 80139d8:	f002 fbba 	bl	8016150 <uxr_buffer_cancel_data>
 80139dc:	4602      	mov	r2, r0
 80139de:	6920      	ldr	r0, [r4, #16]
 80139e0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80139e4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80139e8:	f000 fe58 	bl	801469c <run_xrce_session>
 80139ec:	6920      	ldr	r0, [r4, #16]
 80139ee:	6932      	ldr	r2, [r6, #16]
 80139f0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80139f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80139f8:	6819      	ldr	r1, [r3, #0]
 80139fa:	f002 f925 	bl	8015c48 <uxr_buffer_delete_entity>
 80139fe:	4602      	mov	r2, r0
 8013a00:	6920      	ldr	r0, [r4, #16]
 8013a02:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013a06:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013a0a:	f000 fe47 	bl	801469c <run_xrce_session>
 8013a0e:	4603      	mov	r3, r0
 8013a10:	4628      	mov	r0, r5
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	bf14      	ite	ne
 8013a16:	2400      	movne	r4, #0
 8013a18:	2402      	moveq	r4, #2
 8013a1a:	f000 fd05 	bl	8014428 <rmw_uxrce_fini_service_memory>
 8013a1e:	e7c4      	b.n	80139aa <rmw_destroy_service+0x12>

08013a20 <rmw_create_subscription>:
 8013a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a24:	b08d      	sub	sp, #52	@ 0x34
 8013a26:	2900      	cmp	r1, #0
 8013a28:	f000 80d8 	beq.w	8013bdc <rmw_create_subscription+0x1bc>
 8013a2c:	4604      	mov	r4, r0
 8013a2e:	2800      	cmp	r0, #0
 8013a30:	f000 80d4 	beq.w	8013bdc <rmw_create_subscription+0x1bc>
 8013a34:	6800      	ldr	r0, [r0, #0]
 8013a36:	460e      	mov	r6, r1
 8013a38:	4615      	mov	r5, r2
 8013a3a:	461f      	mov	r7, r3
 8013a3c:	f000 fea8 	bl	8014790 <is_uxrce_rmw_identifier_valid>
 8013a40:	f080 0001 	eor.w	r0, r0, #1
 8013a44:	b2c0      	uxtb	r0, r0
 8013a46:	2800      	cmp	r0, #0
 8013a48:	f040 80c8 	bne.w	8013bdc <rmw_create_subscription+0x1bc>
 8013a4c:	2d00      	cmp	r5, #0
 8013a4e:	f000 80c5 	beq.w	8013bdc <rmw_create_subscription+0x1bc>
 8013a52:	782b      	ldrb	r3, [r5, #0]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	f000 80c1 	beq.w	8013bdc <rmw_create_subscription+0x1bc>
 8013a5a:	2f00      	cmp	r7, #0
 8013a5c:	f000 80be 	beq.w	8013bdc <rmw_create_subscription+0x1bc>
 8013a60:	4867      	ldr	r0, [pc, #412]	@ (8013c00 <rmw_create_subscription+0x1e0>)
 8013a62:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013a66:	f005 fff1 	bl	8019a4c <get_memory>
 8013a6a:	4604      	mov	r4, r0
 8013a6c:	2800      	cmp	r0, #0
 8013a6e:	f000 80b6 	beq.w	8013bde <rmw_create_subscription+0x1be>
 8013a72:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8013a76:	f108 0a98 	add.w	sl, r8, #152	@ 0x98
 8013a7a:	f8c8 8080 	str.w	r8, [r8, #128]	@ 0x80
 8013a7e:	f7ff fa65 	bl	8012f4c <rmw_get_implementation_identifier>
 8013a82:	f8c8 007c 	str.w	r0, [r8, #124]	@ 0x7c
 8013a86:	f8c8 a084 	str.w	sl, [r8, #132]	@ 0x84
 8013a8a:	4628      	mov	r0, r5
 8013a8c:	f7ec fc32 	bl	80002f4 <strlen>
 8013a90:	3001      	adds	r0, #1
 8013a92:	f108 047c 	add.w	r4, r8, #124	@ 0x7c
 8013a96:	283c      	cmp	r0, #60	@ 0x3c
 8013a98:	f200 80a5 	bhi.w	8013be6 <rmw_create_subscription+0x1c6>
 8013a9c:	462b      	mov	r3, r5
 8013a9e:	4a59      	ldr	r2, [pc, #356]	@ (8013c04 <rmw_create_subscription+0x1e4>)
 8013aa0:	213c      	movs	r1, #60	@ 0x3c
 8013aa2:	4650      	mov	r0, sl
 8013aa4:	f007 fb0e 	bl	801b0c4 <sniprintf>
 8013aa8:	4639      	mov	r1, r7
 8013aaa:	2250      	movs	r2, #80	@ 0x50
 8013aac:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 8013ab0:	f8c8 9020 	str.w	r9, [r8, #32]
 8013ab4:	f007 fd93 	bl	801b5de <memcpy>
 8013ab8:	4630      	mov	r0, r6
 8013aba:	4953      	ldr	r1, [pc, #332]	@ (8013c08 <rmw_create_subscription+0x1e8>)
 8013abc:	f000 fe76 	bl	80147ac <get_message_typesupport_handle>
 8013ac0:	2800      	cmp	r0, #0
 8013ac2:	f000 8090 	beq.w	8013be6 <rmw_create_subscription+0x1c6>
 8013ac6:	6842      	ldr	r2, [r0, #4]
 8013ac8:	f8c8 2018 	str.w	r2, [r8, #24]
 8013acc:	2a00      	cmp	r2, #0
 8013ace:	f000 808a 	beq.w	8013be6 <rmw_create_subscription+0x1c6>
 8013ad2:	4629      	mov	r1, r5
 8013ad4:	463b      	mov	r3, r7
 8013ad6:	4648      	mov	r0, r9
 8013ad8:	f006 f806 	bl	8019ae8 <create_topic>
 8013adc:	f8c8 001c 	str.w	r0, [r8, #28]
 8013ae0:	2800      	cmp	r0, #0
 8013ae2:	f000 8085 	beq.w	8013bf0 <rmw_create_subscription+0x1d0>
 8013ae6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013aea:	2104      	movs	r1, #4
 8013aec:	2506      	movs	r5, #6
 8013aee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013af2:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8013af6:	1c42      	adds	r2, r0, #1
 8013af8:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8013afc:	f002 fabe 	bl	801607c <uxr_object_id>
 8013b00:	f8c8 0010 	str.w	r0, [r8, #16]
 8013b04:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013b08:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8013b0c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013b10:	9500      	str	r5, [sp, #0]
 8013b12:	6819      	ldr	r1, [r3, #0]
 8013b14:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013b18:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8013b1c:	f002 f948 	bl	8015db0 <uxr_buffer_create_subscriber_bin>
 8013b20:	4602      	mov	r2, r0
 8013b22:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013b26:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013b2a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013b2e:	f000 fdb5 	bl	801469c <run_xrce_session>
 8013b32:	2800      	cmp	r0, #0
 8013b34:	d057      	beq.n	8013be6 <rmw_create_subscription+0x1c6>
 8013b36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013b3a:	4629      	mov	r1, r5
 8013b3c:	ae08      	add	r6, sp, #32
 8013b3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013b42:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8013b46:	1c42      	adds	r2, r0, #1
 8013b48:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8013b4c:	f002 fa96 	bl	801607c <uxr_object_id>
 8013b50:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013b54:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8013b58:	4639      	mov	r1, r7
 8013b5a:	f8c8 0014 	str.w	r0, [r8, #20]
 8013b5e:	4630      	mov	r0, r6
 8013b60:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8013b64:	9305      	str	r3, [sp, #20]
 8013b66:	f000 fdb5 	bl	80146d4 <convert_qos_profile>
 8013b6a:	9503      	str	r5, [sp, #12]
 8013b6c:	9b05      	ldr	r3, [sp, #20]
 8013b6e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013b72:	9001      	str	r0, [sp, #4]
 8013b74:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8013b78:	f8ad 1008 	strh.w	r1, [sp, #8]
 8013b7c:	691b      	ldr	r3, [r3, #16]
 8013b7e:	9300      	str	r3, [sp, #0]
 8013b80:	f8db 1000 	ldr.w	r1, [fp]
 8013b84:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 8013b88:	f002 f942 	bl	8015e10 <uxr_buffer_create_datareader_bin>
 8013b8c:	4602      	mov	r2, r0
 8013b8e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013b92:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013b96:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013b9a:	f000 fd7f 	bl	801469c <run_xrce_session>
 8013b9e:	b310      	cbz	r0, 8013be6 <rmw_create_subscription+0x1c6>
 8013ba0:	7a3b      	ldrb	r3, [r7, #8]
 8013ba2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013ba6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013baa:	2b02      	cmp	r3, #2
 8013bac:	920a      	str	r2, [sp, #40]	@ 0x28
 8013bae:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013bb2:	f04f 0200 	mov.w	r2, #0
 8013bb6:	bf08      	it	eq
 8013bb8:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8013bbc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013bc0:	bf18      	it	ne
 8013bc2:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	@ 0xd4
 8013bc6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013bc8:	9307      	str	r3, [sp, #28]
 8013bca:	ab0a      	add	r3, sp, #40	@ 0x28
 8013bcc:	9300      	str	r3, [sp, #0]
 8013bce:	9b07      	ldr	r3, [sp, #28]
 8013bd0:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8013bd4:	6809      	ldr	r1, [r1, #0]
 8013bd6:	f002 fa81 	bl	80160dc <uxr_buffer_request_data>
 8013bda:	e000      	b.n	8013bde <rmw_create_subscription+0x1be>
 8013bdc:	2400      	movs	r4, #0
 8013bde:	4620      	mov	r0, r4
 8013be0:	b00d      	add	sp, #52	@ 0x34
 8013be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013be6:	f8d8 001c 	ldr.w	r0, [r8, #28]
 8013bea:	b108      	cbz	r0, 8013bf0 <rmw_create_subscription+0x1d0>
 8013bec:	f000 fc48 	bl	8014480 <rmw_uxrce_fini_topic_memory>
 8013bf0:	4620      	mov	r0, r4
 8013bf2:	2400      	movs	r4, #0
 8013bf4:	f000 fc02 	bl	80143fc <rmw_uxrce_fini_subscription_memory>
 8013bf8:	4620      	mov	r0, r4
 8013bfa:	b00d      	add	sp, #52	@ 0x34
 8013bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c00:	2406862c 	.word	0x2406862c
 8013c04:	0801cb6c 	.word	0x0801cb6c
 8013c08:	0801c520 	.word	0x0801c520

08013c0c <rmw_subscription_get_actual_qos>:
 8013c0c:	b178      	cbz	r0, 8013c2e <rmw_subscription_get_actual_qos+0x22>
 8013c0e:	b510      	push	{r4, lr}
 8013c10:	fab1 f481 	clz	r4, r1
 8013c14:	0964      	lsrs	r4, r4, #5
 8013c16:	b141      	cbz	r1, 8013c2a <rmw_subscription_get_actual_qos+0x1e>
 8013c18:	6843      	ldr	r3, [r0, #4]
 8013c1a:	2250      	movs	r2, #80	@ 0x50
 8013c1c:	4608      	mov	r0, r1
 8013c1e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8013c22:	f007 fcdc 	bl	801b5de <memcpy>
 8013c26:	4620      	mov	r0, r4
 8013c28:	bd10      	pop	{r4, pc}
 8013c2a:	200b      	movs	r0, #11
 8013c2c:	bd10      	pop	{r4, pc}
 8013c2e:	200b      	movs	r0, #11
 8013c30:	4770      	bx	lr
 8013c32:	bf00      	nop

08013c34 <rmw_destroy_subscription>:
 8013c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c38:	b128      	cbz	r0, 8013c46 <rmw_destroy_subscription+0x12>
 8013c3a:	4604      	mov	r4, r0
 8013c3c:	6800      	ldr	r0, [r0, #0]
 8013c3e:	460d      	mov	r5, r1
 8013c40:	f000 fda6 	bl	8014790 <is_uxrce_rmw_identifier_valid>
 8013c44:	b918      	cbnz	r0, 8013c4e <rmw_destroy_subscription+0x1a>
 8013c46:	2401      	movs	r4, #1
 8013c48:	4620      	mov	r0, r4
 8013c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c4e:	6863      	ldr	r3, [r4, #4]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d0f8      	beq.n	8013c46 <rmw_destroy_subscription+0x12>
 8013c54:	fab5 f485 	clz	r4, r5
 8013c58:	0964      	lsrs	r4, r4, #5
 8013c5a:	2d00      	cmp	r5, #0
 8013c5c:	d0f3      	beq.n	8013c46 <rmw_destroy_subscription+0x12>
 8013c5e:	6828      	ldr	r0, [r5, #0]
 8013c60:	f000 fd96 	bl	8014790 <is_uxrce_rmw_identifier_valid>
 8013c64:	2800      	cmp	r0, #0
 8013c66:	d0ee      	beq.n	8013c46 <rmw_destroy_subscription+0x12>
 8013c68:	686e      	ldr	r6, [r5, #4]
 8013c6a:	2e00      	cmp	r6, #0
 8013c6c:	d0eb      	beq.n	8013c46 <rmw_destroy_subscription+0x12>
 8013c6e:	6a37      	ldr	r7, [r6, #32]
 8013c70:	6972      	ldr	r2, [r6, #20]
 8013c72:	6938      	ldr	r0, [r7, #16]
 8013c74:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013c78:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013c7c:	6819      	ldr	r1, [r3, #0]
 8013c7e:	f002 fa67 	bl	8016150 <uxr_buffer_cancel_data>
 8013c82:	4602      	mov	r2, r0
 8013c84:	6938      	ldr	r0, [r7, #16]
 8013c86:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013c8a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013c8e:	f000 fd05 	bl	801469c <run_xrce_session>
 8013c92:	69f0      	ldr	r0, [r6, #28]
 8013c94:	f005 ff78 	bl	8019b88 <destroy_topic>
 8013c98:	6a33      	ldr	r3, [r6, #32]
 8013c9a:	6972      	ldr	r2, [r6, #20]
 8013c9c:	6918      	ldr	r0, [r3, #16]
 8013c9e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013ca2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013ca6:	6819      	ldr	r1, [r3, #0]
 8013ca8:	f001 ffce 	bl	8015c48 <uxr_buffer_delete_entity>
 8013cac:	6a33      	ldr	r3, [r6, #32]
 8013cae:	4680      	mov	r8, r0
 8013cb0:	6932      	ldr	r2, [r6, #16]
 8013cb2:	6918      	ldr	r0, [r3, #16]
 8013cb4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013cb8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013cbc:	6819      	ldr	r1, [r3, #0]
 8013cbe:	f001 ffc3 	bl	8015c48 <uxr_buffer_delete_entity>
 8013cc2:	4606      	mov	r6, r0
 8013cc4:	6938      	ldr	r0, [r7, #16]
 8013cc6:	4642      	mov	r2, r8
 8013cc8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013ccc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013cd0:	f000 fce4 	bl	801469c <run_xrce_session>
 8013cd4:	693f      	ldr	r7, [r7, #16]
 8013cd6:	4632      	mov	r2, r6
 8013cd8:	4606      	mov	r6, r0
 8013cda:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8013cde:	4638      	mov	r0, r7
 8013ce0:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8013ce4:	f000 fcda 	bl	801469c <run_xrce_session>
 8013ce8:	b126      	cbz	r6, 8013cf4 <rmw_destroy_subscription+0xc0>
 8013cea:	b118      	cbz	r0, 8013cf4 <rmw_destroy_subscription+0xc0>
 8013cec:	4628      	mov	r0, r5
 8013cee:	f000 fb85 	bl	80143fc <rmw_uxrce_fini_subscription_memory>
 8013cf2:	e7a9      	b.n	8013c48 <rmw_destroy_subscription+0x14>
 8013cf4:	2402      	movs	r4, #2
 8013cf6:	e7f9      	b.n	8013cec <rmw_destroy_subscription+0xb8>

08013cf8 <rmw_take_with_info>:
 8013cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cfa:	4604      	mov	r4, r0
 8013cfc:	6800      	ldr	r0, [r0, #0]
 8013cfe:	b089      	sub	sp, #36	@ 0x24
 8013d00:	460f      	mov	r7, r1
 8013d02:	4615      	mov	r5, r2
 8013d04:	b128      	cbz	r0, 8013d12 <rmw_take_with_info+0x1a>
 8013d06:	4b24      	ldr	r3, [pc, #144]	@ (8013d98 <rmw_take_with_info+0xa0>)
 8013d08:	6819      	ldr	r1, [r3, #0]
 8013d0a:	f7ec fae9 	bl	80002e0 <strcmp>
 8013d0e:	2800      	cmp	r0, #0
 8013d10:	d13e      	bne.n	8013d90 <rmw_take_with_info+0x98>
 8013d12:	b305      	cbz	r5, 8013d56 <rmw_take_with_info+0x5e>
 8013d14:	2300      	movs	r3, #0
 8013d16:	6864      	ldr	r4, [r4, #4]
 8013d18:	702b      	strb	r3, [r5, #0]
 8013d1a:	f000 fc41 	bl	80145a0 <rmw_uxrce_clean_expired_static_input_buffer>
 8013d1e:	4620      	mov	r0, r4
 8013d20:	f000 fc14 	bl	801454c <rmw_uxrce_find_static_input_buffer_by_owner>
 8013d24:	4606      	mov	r6, r0
 8013d26:	b1f0      	cbz	r0, 8013d66 <rmw_take_with_info+0x6e>
 8013d28:	6881      	ldr	r1, [r0, #8]
 8013d2a:	4668      	mov	r0, sp
 8013d2c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8013d30:	3110      	adds	r1, #16
 8013d32:	f7fb fd0b 	bl	800f74c <ucdr_init_buffer>
 8013d36:	69a3      	ldr	r3, [r4, #24]
 8013d38:	4639      	mov	r1, r7
 8013d3a:	4668      	mov	r0, sp
 8013d3c:	68db      	ldr	r3, [r3, #12]
 8013d3e:	4798      	blx	r3
 8013d40:	4604      	mov	r4, r0
 8013d42:	4631      	mov	r1, r6
 8013d44:	4815      	ldr	r0, [pc, #84]	@ (8013d9c <rmw_take_with_info+0xa4>)
 8013d46:	f005 fe91 	bl	8019a6c <put_memory>
 8013d4a:	702c      	strb	r4, [r5, #0]
 8013d4c:	f084 0001 	eor.w	r0, r4, #1
 8013d50:	b2c0      	uxtb	r0, r0
 8013d52:	b009      	add	sp, #36	@ 0x24
 8013d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d56:	6864      	ldr	r4, [r4, #4]
 8013d58:	f000 fc22 	bl	80145a0 <rmw_uxrce_clean_expired_static_input_buffer>
 8013d5c:	4620      	mov	r0, r4
 8013d5e:	f000 fbf5 	bl	801454c <rmw_uxrce_find_static_input_buffer_by_owner>
 8013d62:	4605      	mov	r5, r0
 8013d64:	b910      	cbnz	r0, 8013d6c <rmw_take_with_info+0x74>
 8013d66:	2001      	movs	r0, #1
 8013d68:	b009      	add	sp, #36	@ 0x24
 8013d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d6c:	68a9      	ldr	r1, [r5, #8]
 8013d6e:	4668      	mov	r0, sp
 8013d70:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8013d74:	3110      	adds	r1, #16
 8013d76:	f7fb fce9 	bl	800f74c <ucdr_init_buffer>
 8013d7a:	69a3      	ldr	r3, [r4, #24]
 8013d7c:	4639      	mov	r1, r7
 8013d7e:	4668      	mov	r0, sp
 8013d80:	68db      	ldr	r3, [r3, #12]
 8013d82:	4798      	blx	r3
 8013d84:	4629      	mov	r1, r5
 8013d86:	4604      	mov	r4, r0
 8013d88:	4804      	ldr	r0, [pc, #16]	@ (8013d9c <rmw_take_with_info+0xa4>)
 8013d8a:	f005 fe6f 	bl	8019a6c <put_memory>
 8013d8e:	e7dd      	b.n	8013d4c <rmw_take_with_info+0x54>
 8013d90:	200c      	movs	r0, #12
 8013d92:	b009      	add	sp, #36	@ 0x24
 8013d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d96:	bf00      	nop
 8013d98:	0801ce28 	.word	0x0801ce28
 8013d9c:	2406861c 	.word	0x2406861c

08013da0 <rmw_uxrce_transport_init>:
 8013da0:	b508      	push	{r3, lr}
 8013da2:	b108      	cbz	r0, 8013da8 <rmw_uxrce_transport_init+0x8>
 8013da4:	f100 0210 	add.w	r2, r0, #16
 8013da8:	b139      	cbz	r1, 8013dba <rmw_uxrce_transport_init+0x1a>
 8013daa:	6949      	ldr	r1, [r1, #20]
 8013dac:	4610      	mov	r0, r2
 8013dae:	f002 f92d 	bl	801600c <uxr_init_custom_transport>
 8013db2:	f080 0001 	eor.w	r0, r0, #1
 8013db6:	b2c0      	uxtb	r0, r0
 8013db8:	bd08      	pop	{r3, pc}
 8013dba:	4b04      	ldr	r3, [pc, #16]	@ (8013dcc <rmw_uxrce_transport_init+0x2c>)
 8013dbc:	4610      	mov	r0, r2
 8013dbe:	6859      	ldr	r1, [r3, #4]
 8013dc0:	f002 f924 	bl	801600c <uxr_init_custom_transport>
 8013dc4:	f080 0001 	eor.w	r0, r0, #1
 8013dc8:	b2c0      	uxtb	r0, r0
 8013dca:	bd08      	pop	{r3, pc}
 8013dcc:	24063c24 	.word	0x24063c24

08013dd0 <rmw_wait>:
 8013dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013dd4:	4698      	mov	r8, r3
 8013dd6:	ea40 0301 	orr.w	r3, r0, r1
 8013dda:	b089      	sub	sp, #36	@ 0x24
 8013ddc:	ea48 0303 	orr.w	r3, r8, r3
 8013de0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8013de2:	4313      	orrs	r3, r2
 8013de4:	f000 8106 	beq.w	8013ff4 <rmw_wait+0x224>
 8013de8:	4605      	mov	r5, r0
 8013dea:	460e      	mov	r6, r1
 8013dec:	4691      	mov	r9, r2
 8013dee:	b16c      	cbz	r4, 8013e0c <rmw_wait+0x3c>
 8013df0:	4ba6      	ldr	r3, [pc, #664]	@ (801408c <rmw_wait+0x2bc>)
 8013df2:	af04      	add	r7, sp, #16
 8013df4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013df6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8013dfa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013dfe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013e02:	f005 fcb3 	bl	801976c <rmw_time_equal>
 8013e06:	2800      	cmp	r0, #0
 8013e08:	f000 810b 	beq.w	8014022 <rmw_wait+0x252>
 8013e0c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013e10:	f000 fbc6 	bl	80145a0 <rmw_uxrce_clean_expired_static_input_buffer>
 8013e14:	4b9e      	ldr	r3, [pc, #632]	@ (8014090 <rmw_wait+0x2c0>)
 8013e16:	681c      	ldr	r4, [r3, #0]
 8013e18:	b14c      	cbz	r4, 8013e2e <rmw_wait+0x5e>
 8013e1a:	4623      	mov	r3, r4
 8013e1c:	2100      	movs	r1, #0
 8013e1e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8013e22:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013e26:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d1f7      	bne.n	8013e1e <rmw_wait+0x4e>
 8013e2e:	f1b9 0f00 	cmp.w	r9, #0
 8013e32:	d011      	beq.n	8013e58 <rmw_wait+0x88>
 8013e34:	f8d9 1000 	ldr.w	r1, [r9]
 8013e38:	b171      	cbz	r1, 8013e58 <rmw_wait+0x88>
 8013e3a:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8013e3e:	2300      	movs	r3, #0
 8013e40:	2001      	movs	r0, #1
 8013e42:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013e46:	3301      	adds	r3, #1
 8013e48:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8013e4a:	4299      	cmp	r1, r3
 8013e4c:	6912      	ldr	r2, [r2, #16]
 8013e4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013e52:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013e56:	d1f4      	bne.n	8013e42 <rmw_wait+0x72>
 8013e58:	f1b8 0f00 	cmp.w	r8, #0
 8013e5c:	d011      	beq.n	8013e82 <rmw_wait+0xb2>
 8013e5e:	f8d8 1000 	ldr.w	r1, [r8]
 8013e62:	b171      	cbz	r1, 8013e82 <rmw_wait+0xb2>
 8013e64:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8013e68:	2300      	movs	r3, #0
 8013e6a:	2001      	movs	r0, #1
 8013e6c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013e70:	3301      	adds	r3, #1
 8013e72:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8013e74:	4299      	cmp	r1, r3
 8013e76:	6912      	ldr	r2, [r2, #16]
 8013e78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013e7c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013e80:	d1f4      	bne.n	8013e6c <rmw_wait+0x9c>
 8013e82:	b185      	cbz	r5, 8013ea6 <rmw_wait+0xd6>
 8013e84:	6829      	ldr	r1, [r5, #0]
 8013e86:	b171      	cbz	r1, 8013ea6 <rmw_wait+0xd6>
 8013e88:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	2001      	movs	r0, #1
 8013e90:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013e94:	3301      	adds	r3, #1
 8013e96:	6a12      	ldr	r2, [r2, #32]
 8013e98:	4299      	cmp	r1, r3
 8013e9a:	6912      	ldr	r2, [r2, #16]
 8013e9c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013ea0:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013ea4:	d1f4      	bne.n	8013e90 <rmw_wait+0xc0>
 8013ea6:	b344      	cbz	r4, 8013efa <rmw_wait+0x12a>
 8013ea8:	4622      	mov	r2, r4
 8013eaa:	2300      	movs	r3, #0
 8013eac:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8013eb0:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8013eb4:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8013eb8:	440b      	add	r3, r1
 8013eba:	b2db      	uxtb	r3, r3
 8013ebc:	2a00      	cmp	r2, #0
 8013ebe:	d1f5      	bne.n	8013eac <rmw_wait+0xdc>
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d05f      	beq.n	8013f84 <rmw_wait+0x1b4>
 8013ec4:	1c7a      	adds	r2, r7, #1
 8013ec6:	d00d      	beq.n	8013ee4 <rmw_wait+0x114>
 8013ec8:	ee07 7a90 	vmov	s15, r7
 8013ecc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013ed0:	ee07 3a90 	vmov	s15, r3
 8013ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ed8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013edc:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8013ee0:	ee17 7a90 	vmov	r7, s15
 8013ee4:	68a0      	ldr	r0, [r4, #8]
 8013ee6:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8013eea:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	f040 808d 	bne.w	801400e <rmw_wait+0x23e>
 8013ef4:	6864      	ldr	r4, [r4, #4]
 8013ef6:	2c00      	cmp	r4, #0
 8013ef8:	d1f4      	bne.n	8013ee4 <rmw_wait+0x114>
 8013efa:	f1b9 0f00 	cmp.w	r9, #0
 8013efe:	f000 80a1 	beq.w	8014044 <rmw_wait+0x274>
 8013f02:	f8d9 7000 	ldr.w	r7, [r9]
 8013f06:	2f00      	cmp	r7, #0
 8013f08:	f000 80a4 	beq.w	8014054 <rmw_wait+0x284>
 8013f0c:	2400      	movs	r4, #0
 8013f0e:	4627      	mov	r7, r4
 8013f10:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013f14:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013f18:	f000 fb18 	bl	801454c <rmw_uxrce_find_static_input_buffer_by_owner>
 8013f1c:	2800      	cmp	r0, #0
 8013f1e:	d03b      	beq.n	8013f98 <rmw_wait+0x1c8>
 8013f20:	3401      	adds	r4, #1
 8013f22:	f8d9 3000 	ldr.w	r3, [r9]
 8013f26:	2701      	movs	r7, #1
 8013f28:	42a3      	cmp	r3, r4
 8013f2a:	d8f1      	bhi.n	8013f10 <rmw_wait+0x140>
 8013f2c:	2701      	movs	r7, #1
 8013f2e:	f1b8 0f00 	cmp.w	r8, #0
 8013f32:	d010      	beq.n	8013f56 <rmw_wait+0x186>
 8013f34:	f8d8 3000 	ldr.w	r3, [r8]
 8013f38:	b16b      	cbz	r3, 8013f56 <rmw_wait+0x186>
 8013f3a:	2400      	movs	r4, #0
 8013f3c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013f40:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013f44:	f000 fb02 	bl	801454c <rmw_uxrce_find_static_input_buffer_by_owner>
 8013f48:	b370      	cbz	r0, 8013fa8 <rmw_wait+0x1d8>
 8013f4a:	3401      	adds	r4, #1
 8013f4c:	f8d8 3000 	ldr.w	r3, [r8]
 8013f50:	2701      	movs	r7, #1
 8013f52:	42a3      	cmp	r3, r4
 8013f54:	d8f2      	bhi.n	8013f3c <rmw_wait+0x16c>
 8013f56:	2d00      	cmp	r5, #0
 8013f58:	d035      	beq.n	8013fc6 <rmw_wait+0x1f6>
 8013f5a:	682b      	ldr	r3, [r5, #0]
 8013f5c:	b39b      	cbz	r3, 8013fc6 <rmw_wait+0x1f6>
 8013f5e:	2400      	movs	r4, #0
 8013f60:	686b      	ldr	r3, [r5, #4]
 8013f62:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013f66:	f000 faf1 	bl	801454c <rmw_uxrce_find_static_input_buffer_by_owner>
 8013f6a:	b328      	cbz	r0, 8013fb8 <rmw_wait+0x1e8>
 8013f6c:	3401      	adds	r4, #1
 8013f6e:	682b      	ldr	r3, [r5, #0]
 8013f70:	2701      	movs	r7, #1
 8013f72:	42a3      	cmp	r3, r4
 8013f74:	d8f4      	bhi.n	8013f60 <rmw_wait+0x190>
 8013f76:	2e00      	cmp	r6, #0
 8013f78:	d03c      	beq.n	8013ff4 <rmw_wait+0x224>
 8013f7a:	6834      	ldr	r4, [r6, #0]
 8013f7c:	2c00      	cmp	r4, #0
 8013f7e:	d039      	beq.n	8013ff4 <rmw_wait+0x224>
 8013f80:	2701      	movs	r7, #1
 8013f82:	e023      	b.n	8013fcc <rmw_wait+0x1fc>
 8013f84:	68a0      	ldr	r0, [r4, #8]
 8013f86:	2100      	movs	r1, #0
 8013f88:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013f8c:	f002 fe76 	bl	8016c7c <uxr_run_session_timeout>
 8013f90:	6864      	ldr	r4, [r4, #4]
 8013f92:	2c00      	cmp	r4, #0
 8013f94:	d1f6      	bne.n	8013f84 <rmw_wait+0x1b4>
 8013f96:	e7b0      	b.n	8013efa <rmw_wait+0x12a>
 8013f98:	e9d9 3200 	ldrd	r3, r2, [r9]
 8013f9c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013fa0:	3401      	adds	r4, #1
 8013fa2:	42a3      	cmp	r3, r4
 8013fa4:	d8b4      	bhi.n	8013f10 <rmw_wait+0x140>
 8013fa6:	e7c2      	b.n	8013f2e <rmw_wait+0x15e>
 8013fa8:	e9d8 3200 	ldrd	r3, r2, [r8]
 8013fac:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013fb0:	3401      	adds	r4, #1
 8013fb2:	429c      	cmp	r4, r3
 8013fb4:	d3c2      	bcc.n	8013f3c <rmw_wait+0x16c>
 8013fb6:	e7ce      	b.n	8013f56 <rmw_wait+0x186>
 8013fb8:	e9d5 3200 	ldrd	r3, r2, [r5]
 8013fbc:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013fc0:	3401      	adds	r4, #1
 8013fc2:	42a3      	cmp	r3, r4
 8013fc4:	d8cc      	bhi.n	8013f60 <rmw_wait+0x190>
 8013fc6:	b1a6      	cbz	r6, 8013ff2 <rmw_wait+0x222>
 8013fc8:	6834      	ldr	r4, [r6, #0]
 8013fca:	b194      	cbz	r4, 8013ff2 <rmw_wait+0x222>
 8013fcc:	2300      	movs	r3, #0
 8013fce:	461d      	mov	r5, r3
 8013fd0:	e004      	b.n	8013fdc <rmw_wait+0x20c>
 8013fd2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8013fd6:	3301      	adds	r3, #1
 8013fd8:	42a3      	cmp	r3, r4
 8013fda:	d00a      	beq.n	8013ff2 <rmw_wait+0x222>
 8013fdc:	6870      	ldr	r0, [r6, #4]
 8013fde:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8013fe2:	7c0a      	ldrb	r2, [r1, #16]
 8013fe4:	2a00      	cmp	r2, #0
 8013fe6:	d0f4      	beq.n	8013fd2 <rmw_wait+0x202>
 8013fe8:	3301      	adds	r3, #1
 8013fea:	4617      	mov	r7, r2
 8013fec:	740d      	strb	r5, [r1, #16]
 8013fee:	42a3      	cmp	r3, r4
 8013ff0:	d1f4      	bne.n	8013fdc <rmw_wait+0x20c>
 8013ff2:	b147      	cbz	r7, 8014006 <rmw_wait+0x236>
 8013ff4:	2000      	movs	r0, #0
 8013ff6:	b009      	add	sp, #36	@ 0x24
 8013ff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ffc:	b11e      	cbz	r6, 8014006 <rmw_wait+0x236>
 8013ffe:	6834      	ldr	r4, [r6, #0]
 8014000:	462f      	mov	r7, r5
 8014002:	2c00      	cmp	r4, #0
 8014004:	d1e2      	bne.n	8013fcc <rmw_wait+0x1fc>
 8014006:	2002      	movs	r0, #2
 8014008:	b009      	add	sp, #36	@ 0x24
 801400a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801400e:	4639      	mov	r1, r7
 8014010:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014014:	f002 fe4c 	bl	8016cb0 <uxr_run_session_until_data>
 8014018:	6864      	ldr	r4, [r4, #4]
 801401a:	2c00      	cmp	r4, #0
 801401c:	f47f af62 	bne.w	8013ee4 <rmw_wait+0x114>
 8014020:	e76b      	b.n	8013efa <rmw_wait+0x12a>
 8014022:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014026:	f005 fbf7 	bl	8019818 <rmw_time_total_nsec>
 801402a:	2300      	movs	r3, #0
 801402c:	4a19      	ldr	r2, [pc, #100]	@ (8014094 <rmw_wait+0x2c4>)
 801402e:	f7ec fa0f 	bl	8000450 <__aeabi_uldivmod>
 8014032:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8014036:	4607      	mov	r7, r0
 8014038:	f171 0300 	sbcs.w	r3, r1, #0
 801403c:	bfa8      	it	ge
 801403e:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8014042:	e6e5      	b.n	8013e10 <rmw_wait+0x40>
 8014044:	f1b8 0f00 	cmp.w	r8, #0
 8014048:	d00f      	beq.n	801406a <rmw_wait+0x29a>
 801404a:	f8d8 3000 	ldr.w	r3, [r8]
 801404e:	b193      	cbz	r3, 8014076 <rmw_wait+0x2a6>
 8014050:	464f      	mov	r7, r9
 8014052:	e772      	b.n	8013f3a <rmw_wait+0x16a>
 8014054:	f1b8 0f00 	cmp.w	r8, #0
 8014058:	d007      	beq.n	801406a <rmw_wait+0x29a>
 801405a:	f8d8 3000 	ldr.w	r3, [r8]
 801405e:	2b00      	cmp	r3, #0
 8014060:	f47f af6b 	bne.w	8013f3a <rmw_wait+0x16a>
 8014064:	b155      	cbz	r5, 801407c <rmw_wait+0x2ac>
 8014066:	461f      	mov	r7, r3
 8014068:	e777      	b.n	8013f5a <rmw_wait+0x18a>
 801406a:	2d00      	cmp	r5, #0
 801406c:	d0c6      	beq.n	8013ffc <rmw_wait+0x22c>
 801406e:	682b      	ldr	r3, [r5, #0]
 8014070:	b143      	cbz	r3, 8014084 <rmw_wait+0x2b4>
 8014072:	4647      	mov	r7, r8
 8014074:	e773      	b.n	8013f5e <rmw_wait+0x18e>
 8014076:	b10d      	cbz	r5, 801407c <rmw_wait+0x2ac>
 8014078:	464f      	mov	r7, r9
 801407a:	e76e      	b.n	8013f5a <rmw_wait+0x18a>
 801407c:	462f      	mov	r7, r5
 801407e:	2e00      	cmp	r6, #0
 8014080:	d1a2      	bne.n	8013fc8 <rmw_wait+0x1f8>
 8014082:	e7c0      	b.n	8014006 <rmw_wait+0x236>
 8014084:	4647      	mov	r7, r8
 8014086:	2e00      	cmp	r6, #0
 8014088:	d19e      	bne.n	8013fc8 <rmw_wait+0x1f8>
 801408a:	e7bc      	b.n	8014006 <rmw_wait+0x236>
 801408c:	0801c2b8 	.word	0x0801c2b8
 8014090:	2406860c 	.word	0x2406860c
 8014094:	000f4240 	.word	0x000f4240

08014098 <rmw_create_wait_set>:
 8014098:	b508      	push	{r3, lr}
 801409a:	4803      	ldr	r0, [pc, #12]	@ (80140a8 <rmw_create_wait_set+0x10>)
 801409c:	f005 fcd6 	bl	8019a4c <get_memory>
 80140a0:	b108      	cbz	r0, 80140a6 <rmw_create_wait_set+0xe>
 80140a2:	6880      	ldr	r0, [r0, #8]
 80140a4:	3010      	adds	r0, #16
 80140a6:	bd08      	pop	{r3, pc}
 80140a8:	2406864c 	.word	0x2406864c

080140ac <rmw_destroy_wait_set>:
 80140ac:	b508      	push	{r3, lr}
 80140ae:	4b08      	ldr	r3, [pc, #32]	@ (80140d0 <rmw_destroy_wait_set+0x24>)
 80140b0:	6819      	ldr	r1, [r3, #0]
 80140b2:	b911      	cbnz	r1, 80140ba <rmw_destroy_wait_set+0xe>
 80140b4:	e00a      	b.n	80140cc <rmw_destroy_wait_set+0x20>
 80140b6:	6849      	ldr	r1, [r1, #4]
 80140b8:	b141      	cbz	r1, 80140cc <rmw_destroy_wait_set+0x20>
 80140ba:	688b      	ldr	r3, [r1, #8]
 80140bc:	3310      	adds	r3, #16
 80140be:	4298      	cmp	r0, r3
 80140c0:	d1f9      	bne.n	80140b6 <rmw_destroy_wait_set+0xa>
 80140c2:	4803      	ldr	r0, [pc, #12]	@ (80140d0 <rmw_destroy_wait_set+0x24>)
 80140c4:	f005 fcd2 	bl	8019a6c <put_memory>
 80140c8:	2000      	movs	r0, #0
 80140ca:	bd08      	pop	{r3, pc}
 80140cc:	2001      	movs	r0, #1
 80140ce:	bd08      	pop	{r3, pc}
 80140d0:	2406864c 	.word	0x2406864c

080140d4 <rmw_uxrce_init_service_memory>:
 80140d4:	b1e2      	cbz	r2, 8014110 <rmw_uxrce_init_service_memory+0x3c>
 80140d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140da:	7b05      	ldrb	r5, [r0, #12]
 80140dc:	4606      	mov	r6, r0
 80140de:	b9ad      	cbnz	r5, 801410c <rmw_uxrce_init_service_memory+0x38>
 80140e0:	23c8      	movs	r3, #200	@ 0xc8
 80140e2:	4617      	mov	r7, r2
 80140e4:	460c      	mov	r4, r1
 80140e6:	46a8      	mov	r8, r5
 80140e8:	6083      	str	r3, [r0, #8]
 80140ea:	f240 1301 	movw	r3, #257	@ 0x101
 80140ee:	e9c0 5500 	strd	r5, r5, [r0]
 80140f2:	8183      	strh	r3, [r0, #12]
 80140f4:	3501      	adds	r5, #1
 80140f6:	4621      	mov	r1, r4
 80140f8:	4630      	mov	r0, r6
 80140fa:	f005 fcb7 	bl	8019a6c <put_memory>
 80140fe:	42af      	cmp	r7, r5
 8014100:	60a4      	str	r4, [r4, #8]
 8014102:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8014106:	f804 8cbc 	strb.w	r8, [r4, #-188]
 801410a:	d1f3      	bne.n	80140f4 <rmw_uxrce_init_service_memory+0x20>
 801410c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014110:	4770      	bx	lr
 8014112:	bf00      	nop

08014114 <rmw_uxrce_init_client_memory>:
 8014114:	b1e2      	cbz	r2, 8014150 <rmw_uxrce_init_client_memory+0x3c>
 8014116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801411a:	7b05      	ldrb	r5, [r0, #12]
 801411c:	4606      	mov	r6, r0
 801411e:	b9ad      	cbnz	r5, 801414c <rmw_uxrce_init_client_memory+0x38>
 8014120:	23c8      	movs	r3, #200	@ 0xc8
 8014122:	4617      	mov	r7, r2
 8014124:	460c      	mov	r4, r1
 8014126:	46a8      	mov	r8, r5
 8014128:	6083      	str	r3, [r0, #8]
 801412a:	f240 1301 	movw	r3, #257	@ 0x101
 801412e:	e9c0 5500 	strd	r5, r5, [r0]
 8014132:	8183      	strh	r3, [r0, #12]
 8014134:	3501      	adds	r5, #1
 8014136:	4621      	mov	r1, r4
 8014138:	4630      	mov	r0, r6
 801413a:	f005 fc97 	bl	8019a6c <put_memory>
 801413e:	42af      	cmp	r7, r5
 8014140:	60a4      	str	r4, [r4, #8]
 8014142:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8014146:	f804 8cbc 	strb.w	r8, [r4, #-188]
 801414a:	d1f3      	bne.n	8014134 <rmw_uxrce_init_client_memory+0x20>
 801414c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014150:	4770      	bx	lr
 8014152:	bf00      	nop

08014154 <rmw_uxrce_init_publisher_memory>:
 8014154:	b1e2      	cbz	r2, 8014190 <rmw_uxrce_init_publisher_memory+0x3c>
 8014156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801415a:	7b05      	ldrb	r5, [r0, #12]
 801415c:	4606      	mov	r6, r0
 801415e:	b9ad      	cbnz	r5, 801418c <rmw_uxrce_init_publisher_memory+0x38>
 8014160:	23d8      	movs	r3, #216	@ 0xd8
 8014162:	4617      	mov	r7, r2
 8014164:	460c      	mov	r4, r1
 8014166:	46a8      	mov	r8, r5
 8014168:	6083      	str	r3, [r0, #8]
 801416a:	f240 1301 	movw	r3, #257	@ 0x101
 801416e:	e9c0 5500 	strd	r5, r5, [r0]
 8014172:	8183      	strh	r3, [r0, #12]
 8014174:	3501      	adds	r5, #1
 8014176:	4621      	mov	r1, r4
 8014178:	4630      	mov	r0, r6
 801417a:	f005 fc77 	bl	8019a6c <put_memory>
 801417e:	42af      	cmp	r7, r5
 8014180:	60a4      	str	r4, [r4, #8]
 8014182:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8014186:	f804 8ccc 	strb.w	r8, [r4, #-204]
 801418a:	d1f3      	bne.n	8014174 <rmw_uxrce_init_publisher_memory+0x20>
 801418c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014190:	4770      	bx	lr
 8014192:	bf00      	nop

08014194 <rmw_uxrce_init_subscription_memory>:
 8014194:	b1e2      	cbz	r2, 80141d0 <rmw_uxrce_init_subscription_memory+0x3c>
 8014196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801419a:	7b05      	ldrb	r5, [r0, #12]
 801419c:	4606      	mov	r6, r0
 801419e:	b9ad      	cbnz	r5, 80141cc <rmw_uxrce_init_subscription_memory+0x38>
 80141a0:	23d8      	movs	r3, #216	@ 0xd8
 80141a2:	4617      	mov	r7, r2
 80141a4:	460c      	mov	r4, r1
 80141a6:	46a8      	mov	r8, r5
 80141a8:	6083      	str	r3, [r0, #8]
 80141aa:	f240 1301 	movw	r3, #257	@ 0x101
 80141ae:	e9c0 5500 	strd	r5, r5, [r0]
 80141b2:	8183      	strh	r3, [r0, #12]
 80141b4:	3501      	adds	r5, #1
 80141b6:	4621      	mov	r1, r4
 80141b8:	4630      	mov	r0, r6
 80141ba:	f005 fc57 	bl	8019a6c <put_memory>
 80141be:	42af      	cmp	r7, r5
 80141c0:	60a4      	str	r4, [r4, #8]
 80141c2:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 80141c6:	f804 8ccc 	strb.w	r8, [r4, #-204]
 80141ca:	d1f3      	bne.n	80141b4 <rmw_uxrce_init_subscription_memory+0x20>
 80141cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141d0:	4770      	bx	lr
 80141d2:	bf00      	nop

080141d4 <rmw_uxrce_init_node_memory>:
 80141d4:	b1e2      	cbz	r2, 8014210 <rmw_uxrce_init_node_memory+0x3c>
 80141d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141da:	7b05      	ldrb	r5, [r0, #12]
 80141dc:	4606      	mov	r6, r0
 80141de:	b9ad      	cbnz	r5, 801420c <rmw_uxrce_init_node_memory+0x38>
 80141e0:	23a4      	movs	r3, #164	@ 0xa4
 80141e2:	4617      	mov	r7, r2
 80141e4:	460c      	mov	r4, r1
 80141e6:	46a8      	mov	r8, r5
 80141e8:	6083      	str	r3, [r0, #8]
 80141ea:	f240 1301 	movw	r3, #257	@ 0x101
 80141ee:	e9c0 5500 	strd	r5, r5, [r0]
 80141f2:	8183      	strh	r3, [r0, #12]
 80141f4:	3501      	adds	r5, #1
 80141f6:	4621      	mov	r1, r4
 80141f8:	4630      	mov	r0, r6
 80141fa:	f005 fc37 	bl	8019a6c <put_memory>
 80141fe:	42af      	cmp	r7, r5
 8014200:	60a4      	str	r4, [r4, #8]
 8014202:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8014206:	f804 8c98 	strb.w	r8, [r4, #-152]
 801420a:	d1f3      	bne.n	80141f4 <rmw_uxrce_init_node_memory+0x20>
 801420c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014210:	4770      	bx	lr
 8014212:	bf00      	nop

08014214 <rmw_uxrce_init_session_memory>:
 8014214:	b1ea      	cbz	r2, 8014252 <rmw_uxrce_init_session_memory+0x3e>
 8014216:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801421a:	7b05      	ldrb	r5, [r0, #12]
 801421c:	4606      	mov	r6, r0
 801421e:	b9b5      	cbnz	r5, 801424e <rmw_uxrce_init_session_memory+0x3a>
 8014220:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8014224:	f240 1301 	movw	r3, #257	@ 0x101
 8014228:	4617      	mov	r7, r2
 801422a:	460c      	mov	r4, r1
 801422c:	46a9      	mov	r9, r5
 801422e:	f8c0 8008 	str.w	r8, [r0, #8]
 8014232:	8183      	strh	r3, [r0, #12]
 8014234:	e9c0 5500 	strd	r5, r5, [r0]
 8014238:	3501      	adds	r5, #1
 801423a:	4621      	mov	r1, r4
 801423c:	4630      	mov	r0, r6
 801423e:	f005 fc15 	bl	8019a6c <put_memory>
 8014242:	42af      	cmp	r7, r5
 8014244:	60a4      	str	r4, [r4, #8]
 8014246:	f884 900c 	strb.w	r9, [r4, #12]
 801424a:	4444      	add	r4, r8
 801424c:	d1f4      	bne.n	8014238 <rmw_uxrce_init_session_memory+0x24>
 801424e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014252:	4770      	bx	lr

08014254 <rmw_uxrce_init_topic_memory>:
 8014254:	b1e2      	cbz	r2, 8014290 <rmw_uxrce_init_topic_memory+0x3c>
 8014256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801425a:	7b05      	ldrb	r5, [r0, #12]
 801425c:	4606      	mov	r6, r0
 801425e:	b9ad      	cbnz	r5, 801428c <rmw_uxrce_init_topic_memory+0x38>
 8014260:	231c      	movs	r3, #28
 8014262:	4617      	mov	r7, r2
 8014264:	460c      	mov	r4, r1
 8014266:	46a8      	mov	r8, r5
 8014268:	6083      	str	r3, [r0, #8]
 801426a:	f240 1301 	movw	r3, #257	@ 0x101
 801426e:	e9c0 5500 	strd	r5, r5, [r0]
 8014272:	8183      	strh	r3, [r0, #12]
 8014274:	3501      	adds	r5, #1
 8014276:	4621      	mov	r1, r4
 8014278:	4630      	mov	r0, r6
 801427a:	f005 fbf7 	bl	8019a6c <put_memory>
 801427e:	42af      	cmp	r7, r5
 8014280:	60a4      	str	r4, [r4, #8]
 8014282:	f104 041c 	add.w	r4, r4, #28
 8014286:	f804 8c10 	strb.w	r8, [r4, #-16]
 801428a:	d1f3      	bne.n	8014274 <rmw_uxrce_init_topic_memory+0x20>
 801428c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014290:	4770      	bx	lr
 8014292:	bf00      	nop

08014294 <rmw_uxrce_init_static_input_buffer_memory>:
 8014294:	b1ea      	cbz	r2, 80142d2 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8014296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801429a:	7b05      	ldrb	r5, [r0, #12]
 801429c:	4606      	mov	r6, r0
 801429e:	b9b5      	cbnz	r5, 80142ce <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 80142a0:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 80142a4:	4617      	mov	r7, r2
 80142a6:	460c      	mov	r4, r1
 80142a8:	46a8      	mov	r8, r5
 80142aa:	6083      	str	r3, [r0, #8]
 80142ac:	f240 1301 	movw	r3, #257	@ 0x101
 80142b0:	e9c0 5500 	strd	r5, r5, [r0]
 80142b4:	8183      	strh	r3, [r0, #12]
 80142b6:	3501      	adds	r5, #1
 80142b8:	4621      	mov	r1, r4
 80142ba:	4630      	mov	r0, r6
 80142bc:	f005 fbd6 	bl	8019a6c <put_memory>
 80142c0:	42af      	cmp	r7, r5
 80142c2:	60a4      	str	r4, [r4, #8]
 80142c4:	f884 800c 	strb.w	r8, [r4, #12]
 80142c8:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 80142cc:	d1f3      	bne.n	80142b6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 80142ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142d2:	4770      	bx	lr

080142d4 <rmw_uxrce_init_init_options_impl_memory>:
 80142d4:	b1e2      	cbz	r2, 8014310 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 80142d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142da:	7b05      	ldrb	r5, [r0, #12]
 80142dc:	4606      	mov	r6, r0
 80142de:	b9ad      	cbnz	r5, 801430c <rmw_uxrce_init_init_options_impl_memory+0x38>
 80142e0:	232c      	movs	r3, #44	@ 0x2c
 80142e2:	4617      	mov	r7, r2
 80142e4:	460c      	mov	r4, r1
 80142e6:	46a8      	mov	r8, r5
 80142e8:	6083      	str	r3, [r0, #8]
 80142ea:	f240 1301 	movw	r3, #257	@ 0x101
 80142ee:	e9c0 5500 	strd	r5, r5, [r0]
 80142f2:	8183      	strh	r3, [r0, #12]
 80142f4:	3501      	adds	r5, #1
 80142f6:	4621      	mov	r1, r4
 80142f8:	4630      	mov	r0, r6
 80142fa:	f005 fbb7 	bl	8019a6c <put_memory>
 80142fe:	42af      	cmp	r7, r5
 8014300:	60a4      	str	r4, [r4, #8]
 8014302:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8014306:	f804 8c20 	strb.w	r8, [r4, #-32]
 801430a:	d1f3      	bne.n	80142f4 <rmw_uxrce_init_init_options_impl_memory+0x20>
 801430c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014310:	4770      	bx	lr
 8014312:	bf00      	nop

08014314 <rmw_uxrce_init_wait_set_memory>:
 8014314:	b1e2      	cbz	r2, 8014350 <rmw_uxrce_init_wait_set_memory+0x3c>
 8014316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801431a:	7b05      	ldrb	r5, [r0, #12]
 801431c:	4606      	mov	r6, r0
 801431e:	b9ad      	cbnz	r5, 801434c <rmw_uxrce_init_wait_set_memory+0x38>
 8014320:	231c      	movs	r3, #28
 8014322:	4617      	mov	r7, r2
 8014324:	460c      	mov	r4, r1
 8014326:	46a8      	mov	r8, r5
 8014328:	6083      	str	r3, [r0, #8]
 801432a:	f240 1301 	movw	r3, #257	@ 0x101
 801432e:	e9c0 5500 	strd	r5, r5, [r0]
 8014332:	8183      	strh	r3, [r0, #12]
 8014334:	3501      	adds	r5, #1
 8014336:	4621      	mov	r1, r4
 8014338:	4630      	mov	r0, r6
 801433a:	f005 fb97 	bl	8019a6c <put_memory>
 801433e:	42af      	cmp	r7, r5
 8014340:	60a4      	str	r4, [r4, #8]
 8014342:	f104 041c 	add.w	r4, r4, #28
 8014346:	f804 8c10 	strb.w	r8, [r4, #-16]
 801434a:	d1f3      	bne.n	8014334 <rmw_uxrce_init_wait_set_memory+0x20>
 801434c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014350:	4770      	bx	lr
 8014352:	bf00      	nop

08014354 <rmw_uxrce_init_guard_condition_memory>:
 8014354:	b1e2      	cbz	r2, 8014390 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8014356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801435a:	7b05      	ldrb	r5, [r0, #12]
 801435c:	4606      	mov	r6, r0
 801435e:	b9ad      	cbnz	r5, 801438c <rmw_uxrce_init_guard_condition_memory+0x38>
 8014360:	2320      	movs	r3, #32
 8014362:	4617      	mov	r7, r2
 8014364:	460c      	mov	r4, r1
 8014366:	46a8      	mov	r8, r5
 8014368:	6083      	str	r3, [r0, #8]
 801436a:	f240 1301 	movw	r3, #257	@ 0x101
 801436e:	e9c0 5500 	strd	r5, r5, [r0]
 8014372:	8183      	strh	r3, [r0, #12]
 8014374:	3501      	adds	r5, #1
 8014376:	4621      	mov	r1, r4
 8014378:	4630      	mov	r0, r6
 801437a:	f005 fb77 	bl	8019a6c <put_memory>
 801437e:	42af      	cmp	r7, r5
 8014380:	60a4      	str	r4, [r4, #8]
 8014382:	f104 0420 	add.w	r4, r4, #32
 8014386:	f804 8c14 	strb.w	r8, [r4, #-20]
 801438a:	d1f3      	bne.n	8014374 <rmw_uxrce_init_guard_condition_memory+0x20>
 801438c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014390:	4770      	bx	lr
 8014392:	bf00      	nop

08014394 <rmw_uxrce_fini_session_memory>:
 8014394:	4601      	mov	r1, r0
 8014396:	4801      	ldr	r0, [pc, #4]	@ (801439c <rmw_uxrce_fini_session_memory+0x8>)
 8014398:	f005 bb68 	b.w	8019a6c <put_memory>
 801439c:	2406860c 	.word	0x2406860c

080143a0 <rmw_uxrce_fini_node_memory>:
 80143a0:	b538      	push	{r3, r4, r5, lr}
 80143a2:	4604      	mov	r4, r0
 80143a4:	6800      	ldr	r0, [r0, #0]
 80143a6:	b128      	cbz	r0, 80143b4 <rmw_uxrce_fini_node_memory+0x14>
 80143a8:	4b07      	ldr	r3, [pc, #28]	@ (80143c8 <rmw_uxrce_fini_node_memory+0x28>)
 80143aa:	6819      	ldr	r1, [r3, #0]
 80143ac:	f7eb ff98 	bl	80002e0 <strcmp>
 80143b0:	b940      	cbnz	r0, 80143c4 <rmw_uxrce_fini_node_memory+0x24>
 80143b2:	6020      	str	r0, [r4, #0]
 80143b4:	6861      	ldr	r1, [r4, #4]
 80143b6:	b129      	cbz	r1, 80143c4 <rmw_uxrce_fini_node_memory+0x24>
 80143b8:	2500      	movs	r5, #0
 80143ba:	4804      	ldr	r0, [pc, #16]	@ (80143cc <rmw_uxrce_fini_node_memory+0x2c>)
 80143bc:	610d      	str	r5, [r1, #16]
 80143be:	f005 fb55 	bl	8019a6c <put_memory>
 80143c2:	6065      	str	r5, [r4, #4]
 80143c4:	bd38      	pop	{r3, r4, r5, pc}
 80143c6:	bf00      	nop
 80143c8:	0801ce28 	.word	0x0801ce28
 80143cc:	240685dc 	.word	0x240685dc

080143d0 <rmw_uxrce_fini_publisher_memory>:
 80143d0:	b510      	push	{r4, lr}
 80143d2:	4604      	mov	r4, r0
 80143d4:	6800      	ldr	r0, [r0, #0]
 80143d6:	b128      	cbz	r0, 80143e4 <rmw_uxrce_fini_publisher_memory+0x14>
 80143d8:	4b06      	ldr	r3, [pc, #24]	@ (80143f4 <rmw_uxrce_fini_publisher_memory+0x24>)
 80143da:	6819      	ldr	r1, [r3, #0]
 80143dc:	f7eb ff80 	bl	80002e0 <strcmp>
 80143e0:	b938      	cbnz	r0, 80143f2 <rmw_uxrce_fini_publisher_memory+0x22>
 80143e2:	6020      	str	r0, [r4, #0]
 80143e4:	6861      	ldr	r1, [r4, #4]
 80143e6:	b121      	cbz	r1, 80143f2 <rmw_uxrce_fini_publisher_memory+0x22>
 80143e8:	4803      	ldr	r0, [pc, #12]	@ (80143f8 <rmw_uxrce_fini_publisher_memory+0x28>)
 80143ea:	f005 fb3f 	bl	8019a6c <put_memory>
 80143ee:	2300      	movs	r3, #0
 80143f0:	6063      	str	r3, [r4, #4]
 80143f2:	bd10      	pop	{r4, pc}
 80143f4:	0801ce28 	.word	0x0801ce28
 80143f8:	240685ec 	.word	0x240685ec

080143fc <rmw_uxrce_fini_subscription_memory>:
 80143fc:	b510      	push	{r4, lr}
 80143fe:	4604      	mov	r4, r0
 8014400:	6800      	ldr	r0, [r0, #0]
 8014402:	b128      	cbz	r0, 8014410 <rmw_uxrce_fini_subscription_memory+0x14>
 8014404:	4b06      	ldr	r3, [pc, #24]	@ (8014420 <rmw_uxrce_fini_subscription_memory+0x24>)
 8014406:	6819      	ldr	r1, [r3, #0]
 8014408:	f7eb ff6a 	bl	80002e0 <strcmp>
 801440c:	b938      	cbnz	r0, 801441e <rmw_uxrce_fini_subscription_memory+0x22>
 801440e:	6020      	str	r0, [r4, #0]
 8014410:	6861      	ldr	r1, [r4, #4]
 8014412:	b121      	cbz	r1, 801441e <rmw_uxrce_fini_subscription_memory+0x22>
 8014414:	4803      	ldr	r0, [pc, #12]	@ (8014424 <rmw_uxrce_fini_subscription_memory+0x28>)
 8014416:	f005 fb29 	bl	8019a6c <put_memory>
 801441a:	2300      	movs	r3, #0
 801441c:	6063      	str	r3, [r4, #4]
 801441e:	bd10      	pop	{r4, pc}
 8014420:	0801ce28 	.word	0x0801ce28
 8014424:	2406862c 	.word	0x2406862c

08014428 <rmw_uxrce_fini_service_memory>:
 8014428:	b510      	push	{r4, lr}
 801442a:	4604      	mov	r4, r0
 801442c:	6800      	ldr	r0, [r0, #0]
 801442e:	b128      	cbz	r0, 801443c <rmw_uxrce_fini_service_memory+0x14>
 8014430:	4b06      	ldr	r3, [pc, #24]	@ (801444c <rmw_uxrce_fini_service_memory+0x24>)
 8014432:	6819      	ldr	r1, [r3, #0]
 8014434:	f7eb ff54 	bl	80002e0 <strcmp>
 8014438:	b938      	cbnz	r0, 801444a <rmw_uxrce_fini_service_memory+0x22>
 801443a:	6020      	str	r0, [r4, #0]
 801443c:	6861      	ldr	r1, [r4, #4]
 801443e:	b121      	cbz	r1, 801444a <rmw_uxrce_fini_service_memory+0x22>
 8014440:	4803      	ldr	r0, [pc, #12]	@ (8014450 <rmw_uxrce_fini_service_memory+0x28>)
 8014442:	f005 fb13 	bl	8019a6c <put_memory>
 8014446:	2300      	movs	r3, #0
 8014448:	6063      	str	r3, [r4, #4]
 801444a:	bd10      	pop	{r4, pc}
 801444c:	0801ce28 	.word	0x0801ce28
 8014450:	240685fc 	.word	0x240685fc

08014454 <rmw_uxrce_fini_client_memory>:
 8014454:	b510      	push	{r4, lr}
 8014456:	4604      	mov	r4, r0
 8014458:	6800      	ldr	r0, [r0, #0]
 801445a:	b128      	cbz	r0, 8014468 <rmw_uxrce_fini_client_memory+0x14>
 801445c:	4b06      	ldr	r3, [pc, #24]	@ (8014478 <rmw_uxrce_fini_client_memory+0x24>)
 801445e:	6819      	ldr	r1, [r3, #0]
 8014460:	f7eb ff3e 	bl	80002e0 <strcmp>
 8014464:	b938      	cbnz	r0, 8014476 <rmw_uxrce_fini_client_memory+0x22>
 8014466:	6020      	str	r0, [r4, #0]
 8014468:	6861      	ldr	r1, [r4, #4]
 801446a:	b121      	cbz	r1, 8014476 <rmw_uxrce_fini_client_memory+0x22>
 801446c:	4803      	ldr	r0, [pc, #12]	@ (801447c <rmw_uxrce_fini_client_memory+0x28>)
 801446e:	f005 fafd 	bl	8019a6c <put_memory>
 8014472:	2300      	movs	r3, #0
 8014474:	6063      	str	r3, [r4, #4]
 8014476:	bd10      	pop	{r4, pc}
 8014478:	0801ce28 	.word	0x0801ce28
 801447c:	24063d10 	.word	0x24063d10

08014480 <rmw_uxrce_fini_topic_memory>:
 8014480:	b510      	push	{r4, lr}
 8014482:	4604      	mov	r4, r0
 8014484:	4803      	ldr	r0, [pc, #12]	@ (8014494 <rmw_uxrce_fini_topic_memory+0x14>)
 8014486:	4621      	mov	r1, r4
 8014488:	f005 faf0 	bl	8019a6c <put_memory>
 801448c:	2300      	movs	r3, #0
 801448e:	61a3      	str	r3, [r4, #24]
 8014490:	bd10      	pop	{r4, pc}
 8014492:	bf00      	nop
 8014494:	2406863c 	.word	0x2406863c

08014498 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8014498:	b082      	sub	sp, #8
 801449a:	492b      	ldr	r1, [pc, #172]	@ (8014548 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 801449c:	b530      	push	{r4, r5, lr}
 801449e:	680d      	ldr	r5, [r1, #0]
 80144a0:	ac03      	add	r4, sp, #12
 80144a2:	e884 000c 	stmia.w	r4, {r2, r3}
 80144a6:	461c      	mov	r4, r3
 80144a8:	2d00      	cmp	r5, #0
 80144aa:	d04b      	beq.n	8014544 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 80144ac:	462b      	mov	r3, r5
 80144ae:	2100      	movs	r1, #0
 80144b0:	689a      	ldr	r2, [r3, #8]
 80144b2:	685b      	ldr	r3, [r3, #4]
 80144b4:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 80144b8:	4290      	cmp	r0, r2
 80144ba:	bf08      	it	eq
 80144bc:	3101      	addeq	r1, #1
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d1f6      	bne.n	80144b0 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 80144c2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80144c6:	2b02      	cmp	r3, #2
 80144c8:	d029      	beq.n	801451e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80144ca:	d820      	bhi.n	801450e <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 80144cc:	428c      	cmp	r4, r1
 80144ce:	d828      	bhi.n	8014522 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 80144d0:	fab4 f284 	clz	r2, r4
 80144d4:	0952      	lsrs	r2, r2, #5
 80144d6:	b324      	cbz	r4, 8014522 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 80144d8:	b1dd      	cbz	r5, 8014512 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 80144da:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80144de:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 80144e2:	e001      	b.n	80144e8 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 80144e4:	686d      	ldr	r5, [r5, #4]
 80144e6:	b1ad      	cbz	r5, 8014514 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 80144e8:	68ab      	ldr	r3, [r5, #8]
 80144ea:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 80144ee:	4288      	cmp	r0, r1
 80144f0:	d1f8      	bne.n	80144e4 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 80144f2:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 80144f6:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 80144fa:	4561      	cmp	r1, ip
 80144fc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8014500:	eb73 0e04 	sbcs.w	lr, r3, r4
 8014504:	daee      	bge.n	80144e4 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8014506:	468c      	mov	ip, r1
 8014508:	461c      	mov	r4, r3
 801450a:	462a      	mov	r2, r5
 801450c:	e7ea      	b.n	80144e4 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801450e:	2b03      	cmp	r3, #3
 8014510:	d0dc      	beq.n	80144cc <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8014512:	2200      	movs	r2, #0
 8014514:	4610      	mov	r0, r2
 8014516:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801451a:	b002      	add	sp, #8
 801451c:	4770      	bx	lr
 801451e:	428c      	cmp	r4, r1
 8014520:	d905      	bls.n	801452e <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8014522:	4809      	ldr	r0, [pc, #36]	@ (8014548 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8014524:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014528:	b002      	add	sp, #8
 801452a:	f005 ba8f 	b.w	8019a4c <get_memory>
 801452e:	fab4 f284 	clz	r2, r4
 8014532:	0952      	lsrs	r2, r2, #5
 8014534:	2c00      	cmp	r4, #0
 8014536:	d1ed      	bne.n	8014514 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8014538:	4803      	ldr	r0, [pc, #12]	@ (8014548 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 801453a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801453e:	b002      	add	sp, #8
 8014540:	f005 ba84 	b.w	8019a4c <get_memory>
 8014544:	4629      	mov	r1, r5
 8014546:	e7bc      	b.n	80144c2 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8014548:	2406861c 	.word	0x2406861c

0801454c <rmw_uxrce_find_static_input_buffer_by_owner>:
 801454c:	4b12      	ldr	r3, [pc, #72]	@ (8014598 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	b530      	push	{r4, r5, lr}
 8014552:	b1f3      	cbz	r3, 8014592 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8014554:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8014558:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 801455c:	2400      	movs	r4, #0
 801455e:	e001      	b.n	8014564 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8014560:	685b      	ldr	r3, [r3, #4]
 8014562:	b1a3      	cbz	r3, 801458e <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8014564:	689a      	ldr	r2, [r3, #8]
 8014566:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 801456a:	4288      	cmp	r0, r1
 801456c:	d1f8      	bne.n	8014560 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 801456e:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8014572:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 8014576:	4571      	cmp	r1, lr
 8014578:	f852 2c04 	ldr.w	r2, [r2, #-4]
 801457c:	eb72 050c 	sbcs.w	r5, r2, ip
 8014580:	daee      	bge.n	8014560 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8014582:	461c      	mov	r4, r3
 8014584:	685b      	ldr	r3, [r3, #4]
 8014586:	468e      	mov	lr, r1
 8014588:	4694      	mov	ip, r2
 801458a:	2b00      	cmp	r3, #0
 801458c:	d1ea      	bne.n	8014564 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 801458e:	4620      	mov	r0, r4
 8014590:	bd30      	pop	{r4, r5, pc}
 8014592:	461c      	mov	r4, r3
 8014594:	4620      	mov	r0, r4
 8014596:	bd30      	pop	{r4, r5, pc}
 8014598:	2406861c 	.word	0x2406861c
 801459c:	00000000 	.word	0x00000000

080145a0 <rmw_uxrce_clean_expired_static_input_buffer>:
 80145a0:	4b3d      	ldr	r3, [pc, #244]	@ (8014698 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80145a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145a6:	681f      	ldr	r7, [r3, #0]
 80145a8:	ed2d 8b06 	vpush	{d8-d10}
 80145ac:	b08d      	sub	sp, #52	@ 0x34
 80145ae:	f005 fb0d 	bl	8019bcc <rmw_uros_epoch_nanos>
 80145b2:	2f00      	cmp	r7, #0
 80145b4:	d05d      	beq.n	8014672 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 80145b6:	46b8      	mov	r8, r7
 80145b8:	4681      	mov	r9, r0
 80145ba:	468a      	mov	sl, r1
 80145bc:	ac04      	add	r4, sp, #16
 80145be:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80145c2:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 80145c6:	2b04      	cmp	r3, #4
 80145c8:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 8014680 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 80145cc:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 8014688 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 80145d0:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 8014690 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 80145d4:	d03f      	beq.n	8014656 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 80145d6:	2b05      	cmp	r3, #5
 80145d8:	d044      	beq.n	8014664 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 80145da:	2b03      	cmp	r3, #3
 80145dc:	d03b      	beq.n	8014656 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 80145de:	ed8d 8b04 	vstr	d8, [sp, #16]
 80145e2:	ed8d ab06 	vstr	d10, [sp, #24]
 80145e6:	ab08      	add	r3, sp, #32
 80145e8:	ed8d 8b08 	vstr	d8, [sp, #32]
 80145ec:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 80145f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80145f2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80145f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80145fa:	f005 f8b7 	bl	801976c <rmw_time_equal>
 80145fe:	b118      	cbz	r0, 8014608 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8014600:	ed8d 9b04 	vstr	d9, [sp, #16]
 8014604:	ed8d 8b06 	vstr	d8, [sp, #24]
 8014608:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 801460c:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8014610:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8014614:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8014618:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801461c:	f005 f8fc 	bl	8019818 <rmw_time_total_nsec>
 8014620:	1830      	adds	r0, r6, r0
 8014622:	eb47 0101 	adc.w	r1, r7, r1
 8014626:	4548      	cmp	r0, r9
 8014628:	eb71 030a 	sbcs.w	r3, r1, sl
 801462c:	db05      	blt.n	801463a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 801462e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8014632:	4591      	cmp	r9, r2
 8014634:	eb7a 0303 	sbcs.w	r3, sl, r3
 8014638:	da03      	bge.n	8014642 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 801463a:	4641      	mov	r1, r8
 801463c:	4816      	ldr	r0, [pc, #88]	@ (8014698 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801463e:	f005 fa15 	bl	8019a6c <put_memory>
 8014642:	f1bb 0f00 	cmp.w	fp, #0
 8014646:	d014      	beq.n	8014672 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8014648:	46d8      	mov	r8, fp
 801464a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801464e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8014652:	2b04      	cmp	r3, #4
 8014654:	d1bf      	bne.n	80145d6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8014656:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 801465a:	3340      	adds	r3, #64	@ 0x40
 801465c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801465e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014662:	e7c0      	b.n	80145e6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8014664:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8014668:	3348      	adds	r3, #72	@ 0x48
 801466a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801466c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014670:	e7b9      	b.n	80145e6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8014672:	b00d      	add	sp, #52	@ 0x34
 8014674:	ecbd 8b06 	vpop	{d8-d10}
 8014678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801467c:	f3af 8000 	nop.w
	...
 8014688:	00000001 	.word	0x00000001
 801468c:	00000000 	.word	0x00000000
 8014690:	0000001e 	.word	0x0000001e
 8014694:	00000000 	.word	0x00000000
 8014698:	2406861c 	.word	0x2406861c

0801469c <run_xrce_session>:
 801469c:	b510      	push	{r4, lr}
 801469e:	788c      	ldrb	r4, [r1, #2]
 80146a0:	b086      	sub	sp, #24
 80146a2:	2c01      	cmp	r4, #1
 80146a4:	f8ad 200e 	strh.w	r2, [sp, #14]
 80146a8:	d00c      	beq.n	80146c4 <run_xrce_session+0x28>
 80146aa:	2401      	movs	r4, #1
 80146ac:	4619      	mov	r1, r3
 80146ae:	f10d 020e 	add.w	r2, sp, #14
 80146b2:	f10d 0317 	add.w	r3, sp, #23
 80146b6:	9400      	str	r4, [sp, #0]
 80146b8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80146bc:	f002 fb3c 	bl	8016d38 <uxr_run_session_until_all_status>
 80146c0:	b006      	add	sp, #24
 80146c2:	bd10      	pop	{r4, pc}
 80146c4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80146c8:	f001 ff58 	bl	801657c <uxr_flash_output_streams>
 80146cc:	4620      	mov	r0, r4
 80146ce:	b006      	add	sp, #24
 80146d0:	bd10      	pop	{r4, pc}
 80146d2:	bf00      	nop

080146d4 <convert_qos_profile>:
 80146d4:	7a4a      	ldrb	r2, [r1, #9]
 80146d6:	f891 c008 	ldrb.w	ip, [r1, #8]
 80146da:	2a02      	cmp	r2, #2
 80146dc:	bf18      	it	ne
 80146de:	2200      	movne	r2, #0
 80146e0:	7002      	strb	r2, [r0, #0]
 80146e2:	f1ac 0202 	sub.w	r2, ip, #2
 80146e6:	fab2 f282 	clz	r2, r2
 80146ea:	0952      	lsrs	r2, r2, #5
 80146ec:	7042      	strb	r2, [r0, #1]
 80146ee:	780a      	ldrb	r2, [r1, #0]
 80146f0:	8889      	ldrh	r1, [r1, #4]
 80146f2:	f1a2 0202 	sub.w	r2, r2, #2
 80146f6:	8081      	strh	r1, [r0, #4]
 80146f8:	fab2 f282 	clz	r2, r2
 80146fc:	0952      	lsrs	r2, r2, #5
 80146fe:	7082      	strb	r2, [r0, #2]
 8014700:	4770      	bx	lr
 8014702:	bf00      	nop

08014704 <generate_type_name>:
 8014704:	2300      	movs	r3, #0
 8014706:	b530      	push	{r4, r5, lr}
 8014708:	700b      	strb	r3, [r1, #0]
 801470a:	b087      	sub	sp, #28
 801470c:	6803      	ldr	r3, [r0, #0]
 801470e:	4614      	mov	r4, r2
 8014710:	b1bb      	cbz	r3, 8014742 <generate_type_name+0x3e>
 8014712:	4a0e      	ldr	r2, [pc, #56]	@ (801474c <generate_type_name+0x48>)
 8014714:	4615      	mov	r5, r2
 8014716:	9500      	str	r5, [sp, #0]
 8014718:	9203      	str	r2, [sp, #12]
 801471a:	4d0d      	ldr	r5, [pc, #52]	@ (8014750 <generate_type_name+0x4c>)
 801471c:	6842      	ldr	r2, [r0, #4]
 801471e:	4608      	mov	r0, r1
 8014720:	490c      	ldr	r1, [pc, #48]	@ (8014754 <generate_type_name+0x50>)
 8014722:	9204      	str	r2, [sp, #16]
 8014724:	9105      	str	r1, [sp, #20]
 8014726:	9102      	str	r1, [sp, #8]
 8014728:	4621      	mov	r1, r4
 801472a:	4a0b      	ldr	r2, [pc, #44]	@ (8014758 <generate_type_name+0x54>)
 801472c:	9501      	str	r5, [sp, #4]
 801472e:	f006 fcc9 	bl	801b0c4 <sniprintf>
 8014732:	2800      	cmp	r0, #0
 8014734:	bfa8      	it	ge
 8014736:	4284      	cmpge	r4, r0
 8014738:	bfcc      	ite	gt
 801473a:	2001      	movgt	r0, #1
 801473c:	2000      	movle	r0, #0
 801473e:	b007      	add	sp, #28
 8014740:	bd30      	pop	{r4, r5, pc}
 8014742:	4b06      	ldr	r3, [pc, #24]	@ (801475c <generate_type_name+0x58>)
 8014744:	4a01      	ldr	r2, [pc, #4]	@ (801474c <generate_type_name+0x48>)
 8014746:	461d      	mov	r5, r3
 8014748:	e7e5      	b.n	8014716 <generate_type_name+0x12>
 801474a:	bf00      	nop
 801474c:	0801cb5c 	.word	0x0801cb5c
 8014750:	0801cb74 	.word	0x0801cb74
 8014754:	0801cb70 	.word	0x0801cb70
 8014758:	0801cb60 	.word	0x0801cb60
 801475c:	0801cec0 	.word	0x0801cec0

08014760 <generate_topic_name>:
 8014760:	b530      	push	{r4, r5, lr}
 8014762:	4614      	mov	r4, r2
 8014764:	b083      	sub	sp, #12
 8014766:	4605      	mov	r5, r0
 8014768:	4b07      	ldr	r3, [pc, #28]	@ (8014788 <generate_topic_name+0x28>)
 801476a:	4a08      	ldr	r2, [pc, #32]	@ (801478c <generate_topic_name+0x2c>)
 801476c:	4608      	mov	r0, r1
 801476e:	9500      	str	r5, [sp, #0]
 8014770:	4621      	mov	r1, r4
 8014772:	f006 fca7 	bl	801b0c4 <sniprintf>
 8014776:	2800      	cmp	r0, #0
 8014778:	bfa8      	it	ge
 801477a:	4284      	cmpge	r4, r0
 801477c:	bfcc      	ite	gt
 801477e:	2001      	movgt	r0, #1
 8014780:	2000      	movle	r0, #0
 8014782:	b003      	add	sp, #12
 8014784:	bd30      	pop	{r4, r5, pc}
 8014786:	bf00      	nop
 8014788:	0801cb78 	.word	0x0801cb78
 801478c:	0801c5dc 	.word	0x0801c5dc

08014790 <is_uxrce_rmw_identifier_valid>:
 8014790:	b510      	push	{r4, lr}
 8014792:	4604      	mov	r4, r0
 8014794:	b140      	cbz	r0, 80147a8 <is_uxrce_rmw_identifier_valid+0x18>
 8014796:	f7fe fbd9 	bl	8012f4c <rmw_get_implementation_identifier>
 801479a:	4601      	mov	r1, r0
 801479c:	4620      	mov	r0, r4
 801479e:	f7eb fd9f 	bl	80002e0 <strcmp>
 80147a2:	fab0 f080 	clz	r0, r0
 80147a6:	0940      	lsrs	r0, r0, #5
 80147a8:	bd10      	pop	{r4, pc}
 80147aa:	bf00      	nop

080147ac <get_message_typesupport_handle>:
 80147ac:	6883      	ldr	r3, [r0, #8]
 80147ae:	4718      	bx	r3

080147b0 <get_message_typesupport_handle_function>:
 80147b0:	b510      	push	{r4, lr}
 80147b2:	4604      	mov	r4, r0
 80147b4:	6800      	ldr	r0, [r0, #0]
 80147b6:	f7eb fd93 	bl	80002e0 <strcmp>
 80147ba:	2800      	cmp	r0, #0
 80147bc:	bf0c      	ite	eq
 80147be:	4620      	moveq	r0, r4
 80147c0:	2000      	movne	r0, #0
 80147c2:	bd10      	pop	{r4, pc}

080147c4 <rosidl_runtime_c__uint8__Sequence__init>:
 80147c4:	b530      	push	{r4, r5, lr}
 80147c6:	4604      	mov	r4, r0
 80147c8:	b087      	sub	sp, #28
 80147ca:	b130      	cbz	r0, 80147da <rosidl_runtime_c__uint8__Sequence__init+0x16>
 80147cc:	460d      	mov	r5, r1
 80147ce:	b931      	cbnz	r1, 80147de <rosidl_runtime_c__uint8__Sequence__init+0x1a>
 80147d0:	460b      	mov	r3, r1
 80147d2:	2001      	movs	r0, #1
 80147d4:	60a5      	str	r5, [r4, #8]
 80147d6:	e9c4 3500 	strd	r3, r5, [r4]
 80147da:	b007      	add	sp, #28
 80147dc:	bd30      	pop	{r4, r5, pc}
 80147de:	a801      	add	r0, sp, #4
 80147e0:	f7fa fdd2 	bl	800f388 <rcutils_get_default_allocator>
 80147e4:	9b01      	ldr	r3, [sp, #4]
 80147e6:	9905      	ldr	r1, [sp, #20]
 80147e8:	4628      	mov	r0, r5
 80147ea:	4798      	blx	r3
 80147ec:	4603      	mov	r3, r0
 80147ee:	2800      	cmp	r0, #0
 80147f0:	d1ef      	bne.n	80147d2 <rosidl_runtime_c__uint8__Sequence__init+0xe>
 80147f2:	e7f2      	b.n	80147da <rosidl_runtime_c__uint8__Sequence__init+0x16>

080147f4 <rosidl_runtime_c__uint8__Sequence__fini>:
 80147f4:	b188      	cbz	r0, 801481a <rosidl_runtime_c__uint8__Sequence__fini+0x26>
 80147f6:	6803      	ldr	r3, [r0, #0]
 80147f8:	b510      	push	{r4, lr}
 80147fa:	4604      	mov	r4, r0
 80147fc:	b086      	sub	sp, #24
 80147fe:	b153      	cbz	r3, 8014816 <rosidl_runtime_c__uint8__Sequence__fini+0x22>
 8014800:	a801      	add	r0, sp, #4
 8014802:	f7fa fdc1 	bl	800f388 <rcutils_get_default_allocator>
 8014806:	9b02      	ldr	r3, [sp, #8]
 8014808:	9905      	ldr	r1, [sp, #20]
 801480a:	6820      	ldr	r0, [r4, #0]
 801480c:	4798      	blx	r3
 801480e:	2300      	movs	r3, #0
 8014810:	e9c4 3300 	strd	r3, r3, [r4]
 8014814:	60a3      	str	r3, [r4, #8]
 8014816:	b006      	add	sp, #24
 8014818:	bd10      	pop	{r4, pc}
 801481a:	4770      	bx	lr

0801481c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 801481c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014820:	6805      	ldr	r5, [r0, #0]
 8014822:	4604      	mov	r4, r0
 8014824:	460e      	mov	r6, r1
 8014826:	4628      	mov	r0, r5
 8014828:	f7eb fd5a 	bl	80002e0 <strcmp>
 801482c:	b1c8      	cbz	r0, 8014862 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801482e:	4b11      	ldr	r3, [pc, #68]	@ (8014874 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	429d      	cmp	r5, r3
 8014834:	d112      	bne.n	801485c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8014836:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801483a:	f8d8 4000 	ldr.w	r4, [r8]
 801483e:	b16c      	cbz	r4, 801485c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8014840:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8014844:	2700      	movs	r7, #0
 8014846:	3d04      	subs	r5, #4
 8014848:	4631      	mov	r1, r6
 801484a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801484e:	f7eb fd47 	bl	80002e0 <strcmp>
 8014852:	00bb      	lsls	r3, r7, #2
 8014854:	b140      	cbz	r0, 8014868 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8014856:	3701      	adds	r7, #1
 8014858:	42bc      	cmp	r4, r7
 801485a:	d1f5      	bne.n	8014848 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 801485c:	2000      	movs	r0, #0
 801485e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014862:	4620      	mov	r0, r4
 8014864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014868:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801486c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014870:	58d3      	ldr	r3, [r2, r3]
 8014872:	4718      	bx	r3
 8014874:	240000ec 	.word	0x240000ec

08014878 <std_msgs__msg__UInt8MultiArray__init>:
 8014878:	b570      	push	{r4, r5, r6, lr}
 801487a:	4605      	mov	r5, r0
 801487c:	b1b0      	cbz	r0, 80148ac <std_msgs__msg__UInt8MultiArray__init+0x34>
 801487e:	f005 fa3b 	bl	8019cf8 <std_msgs__msg__MultiArrayLayout__init>
 8014882:	4604      	mov	r4, r0
 8014884:	b148      	cbz	r0, 801489a <std_msgs__msg__UInt8MultiArray__init+0x22>
 8014886:	f105 0610 	add.w	r6, r5, #16
 801488a:	2100      	movs	r1, #0
 801488c:	4630      	mov	r0, r6
 801488e:	f7ff ff99 	bl	80147c4 <rosidl_runtime_c__uint8__Sequence__init>
 8014892:	4604      	mov	r4, r0
 8014894:	b168      	cbz	r0, 80148b2 <std_msgs__msg__UInt8MultiArray__init+0x3a>
 8014896:	4620      	mov	r0, r4
 8014898:	bd70      	pop	{r4, r5, r6, pc}
 801489a:	4628      	mov	r0, r5
 801489c:	f005 fa3e 	bl	8019d1c <std_msgs__msg__MultiArrayLayout__fini>
 80148a0:	f105 0010 	add.w	r0, r5, #16
 80148a4:	f7ff ffa6 	bl	80147f4 <rosidl_runtime_c__uint8__Sequence__fini>
 80148a8:	4620      	mov	r0, r4
 80148aa:	bd70      	pop	{r4, r5, r6, pc}
 80148ac:	4604      	mov	r4, r0
 80148ae:	4620      	mov	r0, r4
 80148b0:	bd70      	pop	{r4, r5, r6, pc}
 80148b2:	4628      	mov	r0, r5
 80148b4:	f005 fa32 	bl	8019d1c <std_msgs__msg__MultiArrayLayout__fini>
 80148b8:	4630      	mov	r0, r6
 80148ba:	f7ff ff9b 	bl	80147f4 <rosidl_runtime_c__uint8__Sequence__fini>
 80148be:	e7ea      	b.n	8014896 <std_msgs__msg__UInt8MultiArray__init+0x1e>

080148c0 <std_msgs__msg__UInt8MultiArray__fini>:
 80148c0:	b148      	cbz	r0, 80148d6 <std_msgs__msg__UInt8MultiArray__fini+0x16>
 80148c2:	b510      	push	{r4, lr}
 80148c4:	4604      	mov	r4, r0
 80148c6:	f005 fa29 	bl	8019d1c <std_msgs__msg__MultiArrayLayout__fini>
 80148ca:	f104 0010 	add.w	r0, r4, #16
 80148ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148d2:	f7ff bf8f 	b.w	80147f4 <rosidl_runtime_c__uint8__Sequence__fini>
 80148d6:	4770      	bx	lr

080148d8 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 80148d8:	6840      	ldr	r0, [r0, #4]
 80148da:	4770      	bx	lr

080148dc <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 80148dc:	6800      	ldr	r0, [r0, #0]
 80148de:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80148e2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80148e6:	4770      	bx	lr

080148e8 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 80148e8:	6803      	ldr	r3, [r0, #0]
 80148ea:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80148ee:	4694      	mov	ip, r2
 80148f0:	b500      	push	{lr}
 80148f2:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 80148f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80148fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80148fe:	f8de 3000 	ldr.w	r3, [lr]
 8014902:	f8cc 3000 	str.w	r3, [ip]
 8014906:	f85d fb04 	ldr.w	pc, [sp], #4
 801490a:	bf00      	nop

0801490c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 801490c:	6803      	ldr	r3, [r0, #0]
 801490e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8014912:	b500      	push	{lr}
 8014914:	4696      	mov	lr, r2
 8014916:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 801491a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801491e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014922:	f8de 3000 	ldr.w	r3, [lr]
 8014926:	f8cc 3000 	str.w	r3, [ip]
 801492a:	f85d fb04 	ldr.w	pc, [sp], #4
 801492e:	bf00      	nop

08014930 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 8014930:	f005 b9e2 	b.w	8019cf8 <std_msgs__msg__MultiArrayLayout__init>

08014934 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 8014934:	f005 b9f2 	b.w	8019d1c <std_msgs__msg__MultiArrayLayout__fini>

08014938 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 8014938:	b510      	push	{r4, lr}
 801493a:	4604      	mov	r4, r0
 801493c:	b082      	sub	sp, #8
 801493e:	9101      	str	r1, [sp, #4]
 8014940:	f005 f9b2 	bl	8019ca8 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 8014944:	9901      	ldr	r1, [sp, #4]
 8014946:	4620      	mov	r0, r4
 8014948:	b002      	add	sp, #8
 801494a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801494e:	f005 b9a7 	b.w	8019ca0 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 8014952:	bf00      	nop

08014954 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 8014954:	6800      	ldr	r0, [r0, #0]
 8014956:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801495a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801495e:	4770      	bx	lr

08014960 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 8014960:	b508      	push	{r3, lr}
 8014962:	f005 f9e3 	bl	8019d2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8014966:	4b06      	ldr	r3, [pc, #24]	@ (8014980 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 8014968:	4906      	ldr	r1, [pc, #24]	@ (8014984 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 801496a:	681a      	ldr	r2, [r3, #0]
 801496c:	60c8      	str	r0, [r1, #12]
 801496e:	b10a      	cbz	r2, 8014974 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 8014970:	4803      	ldr	r0, [pc, #12]	@ (8014980 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 8014972:	bd08      	pop	{r3, pc}
 8014974:	4a04      	ldr	r2, [pc, #16]	@ (8014988 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 8014976:	4802      	ldr	r0, [pc, #8]	@ (8014980 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 8014978:	6812      	ldr	r2, [r2, #0]
 801497a:	601a      	str	r2, [r3, #0]
 801497c:	bd08      	pop	{r3, pc}
 801497e:	bf00      	nop
 8014980:	2400016c 	.word	0x2400016c
 8014984:	240000f4 	.word	0x240000f4
 8014988:	240000f0 	.word	0x240000f0

0801498c <_MultiArrayLayout__max_serialized_size>:
 801498c:	2104      	movs	r1, #4
 801498e:	2000      	movs	r0, #0
 8014990:	b508      	push	{r3, lr}
 8014992:	f7fa fedf 	bl	800f754 <ucdr_alignment>
 8014996:	3004      	adds	r0, #4
 8014998:	bd08      	pop	{r3, pc}
 801499a:	bf00      	nop

0801499c <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 801499c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80149a0:	4689      	mov	r9, r1
 80149a2:	4607      	mov	r7, r0
 80149a4:	2104      	movs	r1, #4
 80149a6:	4648      	mov	r0, r9
 80149a8:	f8d7 8004 	ldr.w	r8, [r7, #4]
 80149ac:	f7fa fed2 	bl	800f754 <ucdr_alignment>
 80149b0:	f109 0304 	add.w	r3, r9, #4
 80149b4:	18c6      	adds	r6, r0, r3
 80149b6:	f1b8 0f00 	cmp.w	r8, #0
 80149ba:	d018      	beq.n	80149ee <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 80149bc:	2500      	movs	r5, #0
 80149be:	f005 fa53 	bl	8019e68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 80149c2:	683a      	ldr	r2, [r7, #0]
 80149c4:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 80149c8:	6843      	ldr	r3, [r0, #4]
 80149ca:	4631      	mov	r1, r6
 80149cc:	3501      	adds	r5, #1
 80149ce:	eb02 0084 	add.w	r0, r2, r4, lsl #2
 80149d2:	695b      	ldr	r3, [r3, #20]
 80149d4:	4798      	blx	r3
 80149d6:	4604      	mov	r4, r0
 80149d8:	4630      	mov	r0, r6
 80149da:	2c04      	cmp	r4, #4
 80149dc:	4621      	mov	r1, r4
 80149de:	bf28      	it	cs
 80149e0:	2104      	movcs	r1, #4
 80149e2:	f7fa feb7 	bl	800f754 <ucdr_alignment>
 80149e6:	45a8      	cmp	r8, r5
 80149e8:	4404      	add	r4, r0
 80149ea:	4426      	add	r6, r4
 80149ec:	d1e7      	bne.n	80149be <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 80149ee:	f1c9 0904 	rsb	r9, r9, #4
 80149f2:	4630      	mov	r0, r6
 80149f4:	2104      	movs	r1, #4
 80149f6:	444e      	add	r6, r9
 80149f8:	f7fa feac 	bl	800f754 <ucdr_alignment>
 80149fc:	4430      	add	r0, r6
 80149fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a02:	bf00      	nop

08014a04 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8014a04:	b108      	cbz	r0, 8014a0a <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 8014a06:	f7ff bfc9 	b.w	801499c <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 8014a0a:	4770      	bx	lr

08014a0c <_MultiArrayLayout__get_serialized_size>:
 8014a0c:	b110      	cbz	r0, 8014a14 <_MultiArrayLayout__get_serialized_size+0x8>
 8014a0e:	2100      	movs	r1, #0
 8014a10:	f7ff bfc4 	b.w	801499c <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 8014a14:	4770      	bx	lr
 8014a16:	bf00      	nop

08014a18 <_MultiArrayLayout__cdr_deserialize>:
 8014a18:	b349      	cbz	r1, 8014a6e <_MultiArrayLayout__cdr_deserialize+0x56>
 8014a1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a1c:	b083      	sub	sp, #12
 8014a1e:	460e      	mov	r6, r1
 8014a20:	4607      	mov	r7, r0
 8014a22:	a901      	add	r1, sp, #4
 8014a24:	f000 fcfe 	bl	8015424 <ucdr_deserialize_uint32_t>
 8014a28:	9b01      	ldr	r3, [sp, #4]
 8014a2a:	68b2      	ldr	r2, [r6, #8]
 8014a2c:	429a      	cmp	r2, r3
 8014a2e:	d31b      	bcc.n	8014a68 <_MultiArrayLayout__cdr_deserialize+0x50>
 8014a30:	6073      	str	r3, [r6, #4]
 8014a32:	b18b      	cbz	r3, 8014a58 <_MultiArrayLayout__cdr_deserialize+0x40>
 8014a34:	2400      	movs	r4, #0
 8014a36:	4625      	mov	r5, r4
 8014a38:	e002      	b.n	8014a40 <_MultiArrayLayout__cdr_deserialize+0x28>
 8014a3a:	9b01      	ldr	r3, [sp, #4]
 8014a3c:	429d      	cmp	r5, r3
 8014a3e:	d20b      	bcs.n	8014a58 <_MultiArrayLayout__cdr_deserialize+0x40>
 8014a40:	f005 fa12 	bl	8019e68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8014a44:	6831      	ldr	r1, [r6, #0]
 8014a46:	6843      	ldr	r3, [r0, #4]
 8014a48:	4638      	mov	r0, r7
 8014a4a:	4421      	add	r1, r4
 8014a4c:	3501      	adds	r5, #1
 8014a4e:	68db      	ldr	r3, [r3, #12]
 8014a50:	3414      	adds	r4, #20
 8014a52:	4798      	blx	r3
 8014a54:	2800      	cmp	r0, #0
 8014a56:	d1f0      	bne.n	8014a3a <_MultiArrayLayout__cdr_deserialize+0x22>
 8014a58:	f106 010c 	add.w	r1, r6, #12
 8014a5c:	4638      	mov	r0, r7
 8014a5e:	b003      	add	sp, #12
 8014a60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014a64:	f000 bcde 	b.w	8015424 <ucdr_deserialize_uint32_t>
 8014a68:	2000      	movs	r0, #0
 8014a6a:	b003      	add	sp, #12
 8014a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a6e:	2000      	movs	r0, #0
 8014a70:	4770      	bx	lr
 8014a72:	bf00      	nop

08014a74 <_MultiArrayLayout__cdr_serialize>:
 8014a74:	b308      	cbz	r0, 8014aba <_MultiArrayLayout__cdr_serialize+0x46>
 8014a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a78:	6847      	ldr	r7, [r0, #4]
 8014a7a:	4605      	mov	r5, r0
 8014a7c:	460e      	mov	r6, r1
 8014a7e:	4608      	mov	r0, r1
 8014a80:	4639      	mov	r1, r7
 8014a82:	f000 fb9f 	bl	80151c4 <ucdr_serialize_uint32_t>
 8014a86:	b190      	cbz	r0, 8014aae <_MultiArrayLayout__cdr_serialize+0x3a>
 8014a88:	b18f      	cbz	r7, 8014aae <_MultiArrayLayout__cdr_serialize+0x3a>
 8014a8a:	2400      	movs	r4, #0
 8014a8c:	e001      	b.n	8014a92 <_MultiArrayLayout__cdr_serialize+0x1e>
 8014a8e:	42a7      	cmp	r7, r4
 8014a90:	d00d      	beq.n	8014aae <_MultiArrayLayout__cdr_serialize+0x3a>
 8014a92:	f005 f9e9 	bl	8019e68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8014a96:	682a      	ldr	r2, [r5, #0]
 8014a98:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8014a9c:	6843      	ldr	r3, [r0, #4]
 8014a9e:	4631      	mov	r1, r6
 8014aa0:	3401      	adds	r4, #1
 8014aa2:	eb02 008c 	add.w	r0, r2, ip, lsl #2
 8014aa6:	689b      	ldr	r3, [r3, #8]
 8014aa8:	4798      	blx	r3
 8014aaa:	2800      	cmp	r0, #0
 8014aac:	d1ef      	bne.n	8014a8e <_MultiArrayLayout__cdr_serialize+0x1a>
 8014aae:	68e9      	ldr	r1, [r5, #12]
 8014ab0:	4630      	mov	r0, r6
 8014ab2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014ab6:	f000 bb85 	b.w	80151c4 <ucdr_serialize_uint32_t>
 8014aba:	4770      	bx	lr

08014abc <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8014abc:	b508      	push	{r3, lr}
 8014abe:	2200      	movs	r2, #0
 8014ac0:	4603      	mov	r3, r0
 8014ac2:	4608      	mov	r0, r1
 8014ac4:	2104      	movs	r1, #4
 8014ac6:	701a      	strb	r2, [r3, #0]
 8014ac8:	f7fa fe44 	bl	800f754 <ucdr_alignment>
 8014acc:	3004      	adds	r0, #4
 8014ace:	bd08      	pop	{r3, pc}

08014ad0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 8014ad0:	4800      	ldr	r0, [pc, #0]	@ (8014ad4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 8014ad2:	4770      	bx	lr
 8014ad4:	24000178 	.word	0x24000178

08014ad8 <ucdr_serialize_endian_array_char>:
 8014ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014adc:	4619      	mov	r1, r3
 8014ade:	461f      	mov	r7, r3
 8014ae0:	4605      	mov	r5, r0
 8014ae2:	4690      	mov	r8, r2
 8014ae4:	f7fa fdde 	bl	800f6a4 <ucdr_check_buffer_available_for>
 8014ae8:	b9e0      	cbnz	r0, 8014b24 <ucdr_serialize_endian_array_char+0x4c>
 8014aea:	463e      	mov	r6, r7
 8014aec:	e00b      	b.n	8014b06 <ucdr_serialize_endian_array_char+0x2e>
 8014aee:	4441      	add	r1, r8
 8014af0:	68a8      	ldr	r0, [r5, #8]
 8014af2:	4622      	mov	r2, r4
 8014af4:	1b36      	subs	r6, r6, r4
 8014af6:	f006 fd72 	bl	801b5de <memcpy>
 8014afa:	68ab      	ldr	r3, [r5, #8]
 8014afc:	6928      	ldr	r0, [r5, #16]
 8014afe:	4423      	add	r3, r4
 8014b00:	4420      	add	r0, r4
 8014b02:	60ab      	str	r3, [r5, #8]
 8014b04:	6128      	str	r0, [r5, #16]
 8014b06:	4631      	mov	r1, r6
 8014b08:	2201      	movs	r2, #1
 8014b0a:	4628      	mov	r0, r5
 8014b0c:	f7fa fe54 	bl	800f7b8 <ucdr_check_final_buffer_behavior_array>
 8014b10:	1bb9      	subs	r1, r7, r6
 8014b12:	4604      	mov	r4, r0
 8014b14:	2800      	cmp	r0, #0
 8014b16:	d1ea      	bne.n	8014aee <ucdr_serialize_endian_array_char+0x16>
 8014b18:	2301      	movs	r3, #1
 8014b1a:	7da8      	ldrb	r0, [r5, #22]
 8014b1c:	756b      	strb	r3, [r5, #21]
 8014b1e:	4058      	eors	r0, r3
 8014b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b24:	463a      	mov	r2, r7
 8014b26:	4641      	mov	r1, r8
 8014b28:	68a8      	ldr	r0, [r5, #8]
 8014b2a:	f006 fd58 	bl	801b5de <memcpy>
 8014b2e:	68aa      	ldr	r2, [r5, #8]
 8014b30:	692b      	ldr	r3, [r5, #16]
 8014b32:	443a      	add	r2, r7
 8014b34:	443b      	add	r3, r7
 8014b36:	60aa      	str	r2, [r5, #8]
 8014b38:	612b      	str	r3, [r5, #16]
 8014b3a:	e7ed      	b.n	8014b18 <ucdr_serialize_endian_array_char+0x40>

08014b3c <ucdr_deserialize_endian_array_char>:
 8014b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b40:	4619      	mov	r1, r3
 8014b42:	461f      	mov	r7, r3
 8014b44:	4605      	mov	r5, r0
 8014b46:	4690      	mov	r8, r2
 8014b48:	f7fa fdac 	bl	800f6a4 <ucdr_check_buffer_available_for>
 8014b4c:	b9e8      	cbnz	r0, 8014b8a <ucdr_deserialize_endian_array_char+0x4e>
 8014b4e:	463e      	mov	r6, r7
 8014b50:	e00c      	b.n	8014b6c <ucdr_deserialize_endian_array_char+0x30>
 8014b52:	eb08 0003 	add.w	r0, r8, r3
 8014b56:	68a9      	ldr	r1, [r5, #8]
 8014b58:	4622      	mov	r2, r4
 8014b5a:	1b36      	subs	r6, r6, r4
 8014b5c:	f006 fd3f 	bl	801b5de <memcpy>
 8014b60:	68ab      	ldr	r3, [r5, #8]
 8014b62:	6928      	ldr	r0, [r5, #16]
 8014b64:	4423      	add	r3, r4
 8014b66:	4420      	add	r0, r4
 8014b68:	60ab      	str	r3, [r5, #8]
 8014b6a:	6128      	str	r0, [r5, #16]
 8014b6c:	4631      	mov	r1, r6
 8014b6e:	2201      	movs	r2, #1
 8014b70:	4628      	mov	r0, r5
 8014b72:	f7fa fe21 	bl	800f7b8 <ucdr_check_final_buffer_behavior_array>
 8014b76:	1bbb      	subs	r3, r7, r6
 8014b78:	4604      	mov	r4, r0
 8014b7a:	2800      	cmp	r0, #0
 8014b7c:	d1e9      	bne.n	8014b52 <ucdr_deserialize_endian_array_char+0x16>
 8014b7e:	2301      	movs	r3, #1
 8014b80:	7da8      	ldrb	r0, [r5, #22]
 8014b82:	756b      	strb	r3, [r5, #21]
 8014b84:	4058      	eors	r0, r3
 8014b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b8a:	463a      	mov	r2, r7
 8014b8c:	68a9      	ldr	r1, [r5, #8]
 8014b8e:	4640      	mov	r0, r8
 8014b90:	f006 fd25 	bl	801b5de <memcpy>
 8014b94:	68aa      	ldr	r2, [r5, #8]
 8014b96:	692b      	ldr	r3, [r5, #16]
 8014b98:	443a      	add	r2, r7
 8014b9a:	443b      	add	r3, r7
 8014b9c:	60aa      	str	r2, [r5, #8]
 8014b9e:	612b      	str	r3, [r5, #16]
 8014ba0:	e7ed      	b.n	8014b7e <ucdr_deserialize_endian_array_char+0x42>
 8014ba2:	bf00      	nop

08014ba4 <ucdr_serialize_array_uint8_t>:
 8014ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ba8:	4688      	mov	r8, r1
 8014baa:	4611      	mov	r1, r2
 8014bac:	4617      	mov	r7, r2
 8014bae:	4605      	mov	r5, r0
 8014bb0:	f7fa fd78 	bl	800f6a4 <ucdr_check_buffer_available_for>
 8014bb4:	b9e0      	cbnz	r0, 8014bf0 <ucdr_serialize_array_uint8_t+0x4c>
 8014bb6:	463e      	mov	r6, r7
 8014bb8:	e00b      	b.n	8014bd2 <ucdr_serialize_array_uint8_t+0x2e>
 8014bba:	4441      	add	r1, r8
 8014bbc:	68a8      	ldr	r0, [r5, #8]
 8014bbe:	4622      	mov	r2, r4
 8014bc0:	1b36      	subs	r6, r6, r4
 8014bc2:	f006 fd0c 	bl	801b5de <memcpy>
 8014bc6:	68ab      	ldr	r3, [r5, #8]
 8014bc8:	6928      	ldr	r0, [r5, #16]
 8014bca:	4423      	add	r3, r4
 8014bcc:	4420      	add	r0, r4
 8014bce:	60ab      	str	r3, [r5, #8]
 8014bd0:	6128      	str	r0, [r5, #16]
 8014bd2:	4631      	mov	r1, r6
 8014bd4:	2201      	movs	r2, #1
 8014bd6:	4628      	mov	r0, r5
 8014bd8:	f7fa fdee 	bl	800f7b8 <ucdr_check_final_buffer_behavior_array>
 8014bdc:	1bb9      	subs	r1, r7, r6
 8014bde:	4604      	mov	r4, r0
 8014be0:	2800      	cmp	r0, #0
 8014be2:	d1ea      	bne.n	8014bba <ucdr_serialize_array_uint8_t+0x16>
 8014be4:	2301      	movs	r3, #1
 8014be6:	7da8      	ldrb	r0, [r5, #22]
 8014be8:	756b      	strb	r3, [r5, #21]
 8014bea:	4058      	eors	r0, r3
 8014bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bf0:	463a      	mov	r2, r7
 8014bf2:	4641      	mov	r1, r8
 8014bf4:	68a8      	ldr	r0, [r5, #8]
 8014bf6:	f006 fcf2 	bl	801b5de <memcpy>
 8014bfa:	68aa      	ldr	r2, [r5, #8]
 8014bfc:	692b      	ldr	r3, [r5, #16]
 8014bfe:	443a      	add	r2, r7
 8014c00:	443b      	add	r3, r7
 8014c02:	60aa      	str	r2, [r5, #8]
 8014c04:	612b      	str	r3, [r5, #16]
 8014c06:	e7ed      	b.n	8014be4 <ucdr_serialize_array_uint8_t+0x40>

08014c08 <ucdr_serialize_endian_array_uint8_t>:
 8014c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c0c:	4619      	mov	r1, r3
 8014c0e:	461f      	mov	r7, r3
 8014c10:	4605      	mov	r5, r0
 8014c12:	4690      	mov	r8, r2
 8014c14:	f7fa fd46 	bl	800f6a4 <ucdr_check_buffer_available_for>
 8014c18:	b9e0      	cbnz	r0, 8014c54 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8014c1a:	463e      	mov	r6, r7
 8014c1c:	e00b      	b.n	8014c36 <ucdr_serialize_endian_array_uint8_t+0x2e>
 8014c1e:	4441      	add	r1, r8
 8014c20:	68a8      	ldr	r0, [r5, #8]
 8014c22:	4622      	mov	r2, r4
 8014c24:	1b36      	subs	r6, r6, r4
 8014c26:	f006 fcda 	bl	801b5de <memcpy>
 8014c2a:	68ab      	ldr	r3, [r5, #8]
 8014c2c:	6928      	ldr	r0, [r5, #16]
 8014c2e:	4423      	add	r3, r4
 8014c30:	4420      	add	r0, r4
 8014c32:	60ab      	str	r3, [r5, #8]
 8014c34:	6128      	str	r0, [r5, #16]
 8014c36:	4631      	mov	r1, r6
 8014c38:	2201      	movs	r2, #1
 8014c3a:	4628      	mov	r0, r5
 8014c3c:	f7fa fdbc 	bl	800f7b8 <ucdr_check_final_buffer_behavior_array>
 8014c40:	1bb9      	subs	r1, r7, r6
 8014c42:	4604      	mov	r4, r0
 8014c44:	2800      	cmp	r0, #0
 8014c46:	d1ea      	bne.n	8014c1e <ucdr_serialize_endian_array_uint8_t+0x16>
 8014c48:	2301      	movs	r3, #1
 8014c4a:	7da8      	ldrb	r0, [r5, #22]
 8014c4c:	756b      	strb	r3, [r5, #21]
 8014c4e:	4058      	eors	r0, r3
 8014c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c54:	463a      	mov	r2, r7
 8014c56:	4641      	mov	r1, r8
 8014c58:	68a8      	ldr	r0, [r5, #8]
 8014c5a:	f006 fcc0 	bl	801b5de <memcpy>
 8014c5e:	68aa      	ldr	r2, [r5, #8]
 8014c60:	692b      	ldr	r3, [r5, #16]
 8014c62:	443a      	add	r2, r7
 8014c64:	443b      	add	r3, r7
 8014c66:	60aa      	str	r2, [r5, #8]
 8014c68:	612b      	str	r3, [r5, #16]
 8014c6a:	e7ed      	b.n	8014c48 <ucdr_serialize_endian_array_uint8_t+0x40>

08014c6c <ucdr_deserialize_array_uint8_t>:
 8014c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c70:	4688      	mov	r8, r1
 8014c72:	4611      	mov	r1, r2
 8014c74:	4617      	mov	r7, r2
 8014c76:	4605      	mov	r5, r0
 8014c78:	f7fa fd14 	bl	800f6a4 <ucdr_check_buffer_available_for>
 8014c7c:	b9e8      	cbnz	r0, 8014cba <ucdr_deserialize_array_uint8_t+0x4e>
 8014c7e:	463e      	mov	r6, r7
 8014c80:	e00c      	b.n	8014c9c <ucdr_deserialize_array_uint8_t+0x30>
 8014c82:	eb08 0003 	add.w	r0, r8, r3
 8014c86:	68a9      	ldr	r1, [r5, #8]
 8014c88:	4622      	mov	r2, r4
 8014c8a:	1b36      	subs	r6, r6, r4
 8014c8c:	f006 fca7 	bl	801b5de <memcpy>
 8014c90:	68ab      	ldr	r3, [r5, #8]
 8014c92:	6928      	ldr	r0, [r5, #16]
 8014c94:	4423      	add	r3, r4
 8014c96:	4420      	add	r0, r4
 8014c98:	60ab      	str	r3, [r5, #8]
 8014c9a:	6128      	str	r0, [r5, #16]
 8014c9c:	4631      	mov	r1, r6
 8014c9e:	2201      	movs	r2, #1
 8014ca0:	4628      	mov	r0, r5
 8014ca2:	f7fa fd89 	bl	800f7b8 <ucdr_check_final_buffer_behavior_array>
 8014ca6:	1bbb      	subs	r3, r7, r6
 8014ca8:	4604      	mov	r4, r0
 8014caa:	2800      	cmp	r0, #0
 8014cac:	d1e9      	bne.n	8014c82 <ucdr_deserialize_array_uint8_t+0x16>
 8014cae:	2301      	movs	r3, #1
 8014cb0:	7da8      	ldrb	r0, [r5, #22]
 8014cb2:	756b      	strb	r3, [r5, #21]
 8014cb4:	4058      	eors	r0, r3
 8014cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cba:	463a      	mov	r2, r7
 8014cbc:	68a9      	ldr	r1, [r5, #8]
 8014cbe:	4640      	mov	r0, r8
 8014cc0:	f006 fc8d 	bl	801b5de <memcpy>
 8014cc4:	68aa      	ldr	r2, [r5, #8]
 8014cc6:	692b      	ldr	r3, [r5, #16]
 8014cc8:	443a      	add	r2, r7
 8014cca:	443b      	add	r3, r7
 8014ccc:	60aa      	str	r2, [r5, #8]
 8014cce:	612b      	str	r3, [r5, #16]
 8014cd0:	e7ed      	b.n	8014cae <ucdr_deserialize_array_uint8_t+0x42>
 8014cd2:	bf00      	nop

08014cd4 <ucdr_deserialize_endian_array_uint8_t>:
 8014cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cd8:	4619      	mov	r1, r3
 8014cda:	461f      	mov	r7, r3
 8014cdc:	4605      	mov	r5, r0
 8014cde:	4690      	mov	r8, r2
 8014ce0:	f7fa fce0 	bl	800f6a4 <ucdr_check_buffer_available_for>
 8014ce4:	b9e8      	cbnz	r0, 8014d22 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8014ce6:	463e      	mov	r6, r7
 8014ce8:	e00c      	b.n	8014d04 <ucdr_deserialize_endian_array_uint8_t+0x30>
 8014cea:	eb08 0003 	add.w	r0, r8, r3
 8014cee:	68a9      	ldr	r1, [r5, #8]
 8014cf0:	4622      	mov	r2, r4
 8014cf2:	1b36      	subs	r6, r6, r4
 8014cf4:	f006 fc73 	bl	801b5de <memcpy>
 8014cf8:	68ab      	ldr	r3, [r5, #8]
 8014cfa:	6928      	ldr	r0, [r5, #16]
 8014cfc:	4423      	add	r3, r4
 8014cfe:	4420      	add	r0, r4
 8014d00:	60ab      	str	r3, [r5, #8]
 8014d02:	6128      	str	r0, [r5, #16]
 8014d04:	4631      	mov	r1, r6
 8014d06:	2201      	movs	r2, #1
 8014d08:	4628      	mov	r0, r5
 8014d0a:	f7fa fd55 	bl	800f7b8 <ucdr_check_final_buffer_behavior_array>
 8014d0e:	1bbb      	subs	r3, r7, r6
 8014d10:	4604      	mov	r4, r0
 8014d12:	2800      	cmp	r0, #0
 8014d14:	d1e9      	bne.n	8014cea <ucdr_deserialize_endian_array_uint8_t+0x16>
 8014d16:	2301      	movs	r3, #1
 8014d18:	7da8      	ldrb	r0, [r5, #22]
 8014d1a:	756b      	strb	r3, [r5, #21]
 8014d1c:	4058      	eors	r0, r3
 8014d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d22:	463a      	mov	r2, r7
 8014d24:	68a9      	ldr	r1, [r5, #8]
 8014d26:	4640      	mov	r0, r8
 8014d28:	f006 fc59 	bl	801b5de <memcpy>
 8014d2c:	68aa      	ldr	r2, [r5, #8]
 8014d2e:	692b      	ldr	r3, [r5, #16]
 8014d30:	443a      	add	r2, r7
 8014d32:	443b      	add	r3, r7
 8014d34:	60aa      	str	r2, [r5, #8]
 8014d36:	612b      	str	r3, [r5, #16]
 8014d38:	e7ed      	b.n	8014d16 <ucdr_deserialize_endian_array_uint8_t+0x42>
 8014d3a:	bf00      	nop

08014d3c <ucdr_serialize_bool>:
 8014d3c:	b538      	push	{r3, r4, r5, lr}
 8014d3e:	460d      	mov	r5, r1
 8014d40:	2101      	movs	r1, #1
 8014d42:	4604      	mov	r4, r0
 8014d44:	f7fa fcba 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 8014d48:	b148      	cbz	r0, 8014d5e <ucdr_serialize_bool+0x22>
 8014d4a:	68a3      	ldr	r3, [r4, #8]
 8014d4c:	2101      	movs	r1, #1
 8014d4e:	701d      	strb	r5, [r3, #0]
 8014d50:	68a2      	ldr	r2, [r4, #8]
 8014d52:	6923      	ldr	r3, [r4, #16]
 8014d54:	440a      	add	r2, r1
 8014d56:	7561      	strb	r1, [r4, #21]
 8014d58:	440b      	add	r3, r1
 8014d5a:	60a2      	str	r2, [r4, #8]
 8014d5c:	6123      	str	r3, [r4, #16]
 8014d5e:	7da0      	ldrb	r0, [r4, #22]
 8014d60:	f080 0001 	eor.w	r0, r0, #1
 8014d64:	bd38      	pop	{r3, r4, r5, pc}
 8014d66:	bf00      	nop

08014d68 <ucdr_deserialize_bool>:
 8014d68:	b538      	push	{r3, r4, r5, lr}
 8014d6a:	460d      	mov	r5, r1
 8014d6c:	2101      	movs	r1, #1
 8014d6e:	4604      	mov	r4, r0
 8014d70:	f7fa fca4 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 8014d74:	b160      	cbz	r0, 8014d90 <ucdr_deserialize_bool+0x28>
 8014d76:	68a2      	ldr	r2, [r4, #8]
 8014d78:	2101      	movs	r1, #1
 8014d7a:	6923      	ldr	r3, [r4, #16]
 8014d7c:	f812 0b01 	ldrb.w	r0, [r2], #1
 8014d80:	440b      	add	r3, r1
 8014d82:	3800      	subs	r0, #0
 8014d84:	bf18      	it	ne
 8014d86:	2001      	movne	r0, #1
 8014d88:	7028      	strb	r0, [r5, #0]
 8014d8a:	60a2      	str	r2, [r4, #8]
 8014d8c:	6123      	str	r3, [r4, #16]
 8014d8e:	7561      	strb	r1, [r4, #21]
 8014d90:	7da0      	ldrb	r0, [r4, #22]
 8014d92:	f080 0001 	eor.w	r0, r0, #1
 8014d96:	bd38      	pop	{r3, r4, r5, pc}

08014d98 <ucdr_serialize_uint8_t>:
 8014d98:	b538      	push	{r3, r4, r5, lr}
 8014d9a:	460d      	mov	r5, r1
 8014d9c:	2101      	movs	r1, #1
 8014d9e:	4604      	mov	r4, r0
 8014da0:	f7fa fc8c 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 8014da4:	b148      	cbz	r0, 8014dba <ucdr_serialize_uint8_t+0x22>
 8014da6:	68a3      	ldr	r3, [r4, #8]
 8014da8:	2101      	movs	r1, #1
 8014daa:	701d      	strb	r5, [r3, #0]
 8014dac:	68a2      	ldr	r2, [r4, #8]
 8014dae:	6923      	ldr	r3, [r4, #16]
 8014db0:	440a      	add	r2, r1
 8014db2:	7561      	strb	r1, [r4, #21]
 8014db4:	440b      	add	r3, r1
 8014db6:	60a2      	str	r2, [r4, #8]
 8014db8:	6123      	str	r3, [r4, #16]
 8014dba:	7da0      	ldrb	r0, [r4, #22]
 8014dbc:	f080 0001 	eor.w	r0, r0, #1
 8014dc0:	bd38      	pop	{r3, r4, r5, pc}
 8014dc2:	bf00      	nop

08014dc4 <ucdr_deserialize_uint8_t>:
 8014dc4:	b538      	push	{r3, r4, r5, lr}
 8014dc6:	460d      	mov	r5, r1
 8014dc8:	2101      	movs	r1, #1
 8014dca:	4604      	mov	r4, r0
 8014dcc:	f7fa fc76 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 8014dd0:	b150      	cbz	r0, 8014de8 <ucdr_deserialize_uint8_t+0x24>
 8014dd2:	68a3      	ldr	r3, [r4, #8]
 8014dd4:	2101      	movs	r1, #1
 8014dd6:	781b      	ldrb	r3, [r3, #0]
 8014dd8:	702b      	strb	r3, [r5, #0]
 8014dda:	68a2      	ldr	r2, [r4, #8]
 8014ddc:	6923      	ldr	r3, [r4, #16]
 8014dde:	440a      	add	r2, r1
 8014de0:	7561      	strb	r1, [r4, #21]
 8014de2:	440b      	add	r3, r1
 8014de4:	60a2      	str	r2, [r4, #8]
 8014de6:	6123      	str	r3, [r4, #16]
 8014de8:	7da0      	ldrb	r0, [r4, #22]
 8014dea:	f080 0001 	eor.w	r0, r0, #1
 8014dee:	bd38      	pop	{r3, r4, r5, pc}

08014df0 <ucdr_serialize_uint16_t>:
 8014df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014df4:	460b      	mov	r3, r1
 8014df6:	b082      	sub	sp, #8
 8014df8:	4604      	mov	r4, r0
 8014dfa:	2102      	movs	r1, #2
 8014dfc:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014e00:	f7fa fcb0 	bl	800f764 <ucdr_buffer_alignment>
 8014e04:	4601      	mov	r1, r0
 8014e06:	4620      	mov	r0, r4
 8014e08:	7d67      	ldrb	r7, [r4, #21]
 8014e0a:	f7fa fcf3 	bl	800f7f4 <ucdr_advance_buffer>
 8014e0e:	2102      	movs	r1, #2
 8014e10:	4620      	mov	r0, r4
 8014e12:	f7fa fc47 	bl	800f6a4 <ucdr_check_buffer_available_for>
 8014e16:	bb78      	cbnz	r0, 8014e78 <ucdr_serialize_uint16_t+0x88>
 8014e18:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8014e1c:	42ab      	cmp	r3, r5
 8014e1e:	d926      	bls.n	8014e6e <ucdr_serialize_uint16_t+0x7e>
 8014e20:	1b5e      	subs	r6, r3, r5
 8014e22:	60a3      	str	r3, [r4, #8]
 8014e24:	6923      	ldr	r3, [r4, #16]
 8014e26:	4620      	mov	r0, r4
 8014e28:	f1c6 0802 	rsb	r8, r6, #2
 8014e2c:	4433      	add	r3, r6
 8014e2e:	4641      	mov	r1, r8
 8014e30:	6123      	str	r3, [r4, #16]
 8014e32:	f7fa fc43 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 8014e36:	2800      	cmp	r0, #0
 8014e38:	d03b      	beq.n	8014eb2 <ucdr_serialize_uint16_t+0xc2>
 8014e3a:	7d23      	ldrb	r3, [r4, #20]
 8014e3c:	2b01      	cmp	r3, #1
 8014e3e:	d04a      	beq.n	8014ed6 <ucdr_serialize_uint16_t+0xe6>
 8014e40:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014e44:	702b      	strb	r3, [r5, #0]
 8014e46:	2e00      	cmp	r6, #0
 8014e48:	d040      	beq.n	8014ecc <ucdr_serialize_uint16_t+0xdc>
 8014e4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014e4e:	706b      	strb	r3, [r5, #1]
 8014e50:	6923      	ldr	r3, [r4, #16]
 8014e52:	2102      	movs	r1, #2
 8014e54:	68a2      	ldr	r2, [r4, #8]
 8014e56:	3302      	adds	r3, #2
 8014e58:	7da0      	ldrb	r0, [r4, #22]
 8014e5a:	4442      	add	r2, r8
 8014e5c:	7561      	strb	r1, [r4, #21]
 8014e5e:	1b9e      	subs	r6, r3, r6
 8014e60:	f080 0001 	eor.w	r0, r0, #1
 8014e64:	60a2      	str	r2, [r4, #8]
 8014e66:	6126      	str	r6, [r4, #16]
 8014e68:	b002      	add	sp, #8
 8014e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e6e:	2102      	movs	r1, #2
 8014e70:	4620      	mov	r0, r4
 8014e72:	f7fa fc23 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 8014e76:	b190      	cbz	r0, 8014e9e <ucdr_serialize_uint16_t+0xae>
 8014e78:	7d23      	ldrb	r3, [r4, #20]
 8014e7a:	2b01      	cmp	r3, #1
 8014e7c:	68a3      	ldr	r3, [r4, #8]
 8014e7e:	d014      	beq.n	8014eaa <ucdr_serialize_uint16_t+0xba>
 8014e80:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014e84:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014e88:	7019      	strb	r1, [r3, #0]
 8014e8a:	68a3      	ldr	r3, [r4, #8]
 8014e8c:	705a      	strb	r2, [r3, #1]
 8014e8e:	2102      	movs	r1, #2
 8014e90:	68a2      	ldr	r2, [r4, #8]
 8014e92:	6923      	ldr	r3, [r4, #16]
 8014e94:	440a      	add	r2, r1
 8014e96:	7561      	strb	r1, [r4, #21]
 8014e98:	440b      	add	r3, r1
 8014e9a:	60a2      	str	r2, [r4, #8]
 8014e9c:	6123      	str	r3, [r4, #16]
 8014e9e:	7da0      	ldrb	r0, [r4, #22]
 8014ea0:	f080 0001 	eor.w	r0, r0, #1
 8014ea4:	b002      	add	sp, #8
 8014ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014eaa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014eae:	801a      	strh	r2, [r3, #0]
 8014eb0:	e7ed      	b.n	8014e8e <ucdr_serialize_uint16_t+0x9e>
 8014eb2:	68a2      	ldr	r2, [r4, #8]
 8014eb4:	6923      	ldr	r3, [r4, #16]
 8014eb6:	7da0      	ldrb	r0, [r4, #22]
 8014eb8:	1b92      	subs	r2, r2, r6
 8014eba:	1b9b      	subs	r3, r3, r6
 8014ebc:	7567      	strb	r7, [r4, #21]
 8014ebe:	f080 0001 	eor.w	r0, r0, #1
 8014ec2:	60a2      	str	r2, [r4, #8]
 8014ec4:	6123      	str	r3, [r4, #16]
 8014ec6:	b002      	add	sp, #8
 8014ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ecc:	68a3      	ldr	r3, [r4, #8]
 8014ece:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014ed2:	701a      	strb	r2, [r3, #0]
 8014ed4:	e7bc      	b.n	8014e50 <ucdr_serialize_uint16_t+0x60>
 8014ed6:	4628      	mov	r0, r5
 8014ed8:	f10d 0506 	add.w	r5, sp, #6
 8014edc:	4632      	mov	r2, r6
 8014ede:	4629      	mov	r1, r5
 8014ee0:	f006 fb7d 	bl	801b5de <memcpy>
 8014ee4:	4642      	mov	r2, r8
 8014ee6:	19a9      	adds	r1, r5, r6
 8014ee8:	68a0      	ldr	r0, [r4, #8]
 8014eea:	f006 fb78 	bl	801b5de <memcpy>
 8014eee:	e7af      	b.n	8014e50 <ucdr_serialize_uint16_t+0x60>

08014ef0 <ucdr_serialize_endian_uint16_t>:
 8014ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ef4:	4604      	mov	r4, r0
 8014ef6:	b083      	sub	sp, #12
 8014ef8:	460d      	mov	r5, r1
 8014efa:	2102      	movs	r1, #2
 8014efc:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014f00:	f7fa fc30 	bl	800f764 <ucdr_buffer_alignment>
 8014f04:	4601      	mov	r1, r0
 8014f06:	4620      	mov	r0, r4
 8014f08:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014f0c:	f7fa fc72 	bl	800f7f4 <ucdr_advance_buffer>
 8014f10:	2102      	movs	r1, #2
 8014f12:	4620      	mov	r0, r4
 8014f14:	f7fa fbc6 	bl	800f6a4 <ucdr_check_buffer_available_for>
 8014f18:	bb70      	cbnz	r0, 8014f78 <ucdr_serialize_endian_uint16_t+0x88>
 8014f1a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8014f1e:	42be      	cmp	r6, r7
 8014f20:	d925      	bls.n	8014f6e <ucdr_serialize_endian_uint16_t+0x7e>
 8014f22:	6923      	ldr	r3, [r4, #16]
 8014f24:	4620      	mov	r0, r4
 8014f26:	60a6      	str	r6, [r4, #8]
 8014f28:	1bf6      	subs	r6, r6, r7
 8014f2a:	4433      	add	r3, r6
 8014f2c:	f1c6 0902 	rsb	r9, r6, #2
 8014f30:	6123      	str	r3, [r4, #16]
 8014f32:	4649      	mov	r1, r9
 8014f34:	f7fa fbc2 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 8014f38:	2800      	cmp	r0, #0
 8014f3a:	d039      	beq.n	8014fb0 <ucdr_serialize_endian_uint16_t+0xc0>
 8014f3c:	2d01      	cmp	r5, #1
 8014f3e:	d04a      	beq.n	8014fd6 <ucdr_serialize_endian_uint16_t+0xe6>
 8014f40:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014f44:	703b      	strb	r3, [r7, #0]
 8014f46:	2e00      	cmp	r6, #0
 8014f48:	d040      	beq.n	8014fcc <ucdr_serialize_endian_uint16_t+0xdc>
 8014f4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014f4e:	707b      	strb	r3, [r7, #1]
 8014f50:	6923      	ldr	r3, [r4, #16]
 8014f52:	2102      	movs	r1, #2
 8014f54:	68a2      	ldr	r2, [r4, #8]
 8014f56:	7da0      	ldrb	r0, [r4, #22]
 8014f58:	3302      	adds	r3, #2
 8014f5a:	444a      	add	r2, r9
 8014f5c:	7561      	strb	r1, [r4, #21]
 8014f5e:	1b9b      	subs	r3, r3, r6
 8014f60:	f080 0001 	eor.w	r0, r0, #1
 8014f64:	60a2      	str	r2, [r4, #8]
 8014f66:	6123      	str	r3, [r4, #16]
 8014f68:	b003      	add	sp, #12
 8014f6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f6e:	2102      	movs	r1, #2
 8014f70:	4620      	mov	r0, r4
 8014f72:	f7fa fba3 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 8014f76:	b188      	cbz	r0, 8014f9c <ucdr_serialize_endian_uint16_t+0xac>
 8014f78:	2d01      	cmp	r5, #1
 8014f7a:	68a3      	ldr	r3, [r4, #8]
 8014f7c:	d014      	beq.n	8014fa8 <ucdr_serialize_endian_uint16_t+0xb8>
 8014f7e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014f82:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014f86:	7019      	strb	r1, [r3, #0]
 8014f88:	68a3      	ldr	r3, [r4, #8]
 8014f8a:	705a      	strb	r2, [r3, #1]
 8014f8c:	2102      	movs	r1, #2
 8014f8e:	68a2      	ldr	r2, [r4, #8]
 8014f90:	6923      	ldr	r3, [r4, #16]
 8014f92:	440a      	add	r2, r1
 8014f94:	7561      	strb	r1, [r4, #21]
 8014f96:	440b      	add	r3, r1
 8014f98:	60a2      	str	r2, [r4, #8]
 8014f9a:	6123      	str	r3, [r4, #16]
 8014f9c:	7da0      	ldrb	r0, [r4, #22]
 8014f9e:	f080 0001 	eor.w	r0, r0, #1
 8014fa2:	b003      	add	sp, #12
 8014fa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014fa8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014fac:	801a      	strh	r2, [r3, #0]
 8014fae:	e7ed      	b.n	8014f8c <ucdr_serialize_endian_uint16_t+0x9c>
 8014fb0:	68a2      	ldr	r2, [r4, #8]
 8014fb2:	6923      	ldr	r3, [r4, #16]
 8014fb4:	7da0      	ldrb	r0, [r4, #22]
 8014fb6:	1b92      	subs	r2, r2, r6
 8014fb8:	1b9b      	subs	r3, r3, r6
 8014fba:	f884 8015 	strb.w	r8, [r4, #21]
 8014fbe:	f080 0001 	eor.w	r0, r0, #1
 8014fc2:	60a2      	str	r2, [r4, #8]
 8014fc4:	6123      	str	r3, [r4, #16]
 8014fc6:	b003      	add	sp, #12
 8014fc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014fcc:	68a3      	ldr	r3, [r4, #8]
 8014fce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014fd2:	701a      	strb	r2, [r3, #0]
 8014fd4:	e7bc      	b.n	8014f50 <ucdr_serialize_endian_uint16_t+0x60>
 8014fd6:	f10d 0506 	add.w	r5, sp, #6
 8014fda:	4632      	mov	r2, r6
 8014fdc:	4638      	mov	r0, r7
 8014fde:	4629      	mov	r1, r5
 8014fe0:	f006 fafd 	bl	801b5de <memcpy>
 8014fe4:	464a      	mov	r2, r9
 8014fe6:	19a9      	adds	r1, r5, r6
 8014fe8:	68a0      	ldr	r0, [r4, #8]
 8014fea:	f006 faf8 	bl	801b5de <memcpy>
 8014fee:	e7af      	b.n	8014f50 <ucdr_serialize_endian_uint16_t+0x60>

08014ff0 <ucdr_deserialize_uint16_t>:
 8014ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ff4:	4604      	mov	r4, r0
 8014ff6:	460d      	mov	r5, r1
 8014ff8:	2102      	movs	r1, #2
 8014ffa:	f7fa fbb3 	bl	800f764 <ucdr_buffer_alignment>
 8014ffe:	4601      	mov	r1, r0
 8015000:	4620      	mov	r0, r4
 8015002:	f894 8015 	ldrb.w	r8, [r4, #21]
 8015006:	f7fa fbf5 	bl	800f7f4 <ucdr_advance_buffer>
 801500a:	2102      	movs	r1, #2
 801500c:	4620      	mov	r0, r4
 801500e:	f7fa fb49 	bl	800f6a4 <ucdr_check_buffer_available_for>
 8015012:	bb60      	cbnz	r0, 801506e <ucdr_deserialize_uint16_t+0x7e>
 8015014:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8015018:	42be      	cmp	r6, r7
 801501a:	d923      	bls.n	8015064 <ucdr_deserialize_uint16_t+0x74>
 801501c:	6923      	ldr	r3, [r4, #16]
 801501e:	4620      	mov	r0, r4
 8015020:	60a6      	str	r6, [r4, #8]
 8015022:	1bf6      	subs	r6, r6, r7
 8015024:	4433      	add	r3, r6
 8015026:	f1c6 0902 	rsb	r9, r6, #2
 801502a:	6123      	str	r3, [r4, #16]
 801502c:	4649      	mov	r1, r9
 801502e:	f7fa fb45 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 8015032:	2800      	cmp	r0, #0
 8015034:	d034      	beq.n	80150a0 <ucdr_deserialize_uint16_t+0xb0>
 8015036:	7d23      	ldrb	r3, [r4, #20]
 8015038:	2b01      	cmp	r3, #1
 801503a:	d042      	beq.n	80150c2 <ucdr_deserialize_uint16_t+0xd2>
 801503c:	787b      	ldrb	r3, [r7, #1]
 801503e:	702b      	strb	r3, [r5, #0]
 8015040:	2e00      	cmp	r6, #0
 8015042:	d03a      	beq.n	80150ba <ucdr_deserialize_uint16_t+0xca>
 8015044:	783b      	ldrb	r3, [r7, #0]
 8015046:	706b      	strb	r3, [r5, #1]
 8015048:	6923      	ldr	r3, [r4, #16]
 801504a:	2102      	movs	r1, #2
 801504c:	68a2      	ldr	r2, [r4, #8]
 801504e:	3302      	adds	r3, #2
 8015050:	7da0      	ldrb	r0, [r4, #22]
 8015052:	444a      	add	r2, r9
 8015054:	7561      	strb	r1, [r4, #21]
 8015056:	1b9b      	subs	r3, r3, r6
 8015058:	f080 0001 	eor.w	r0, r0, #1
 801505c:	60a2      	str	r2, [r4, #8]
 801505e:	6123      	str	r3, [r4, #16]
 8015060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015064:	2102      	movs	r1, #2
 8015066:	4620      	mov	r0, r4
 8015068:	f7fa fb28 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 801506c:	b180      	cbz	r0, 8015090 <ucdr_deserialize_uint16_t+0xa0>
 801506e:	7d23      	ldrb	r3, [r4, #20]
 8015070:	2b01      	cmp	r3, #1
 8015072:	68a3      	ldr	r3, [r4, #8]
 8015074:	d011      	beq.n	801509a <ucdr_deserialize_uint16_t+0xaa>
 8015076:	785b      	ldrb	r3, [r3, #1]
 8015078:	702b      	strb	r3, [r5, #0]
 801507a:	68a3      	ldr	r3, [r4, #8]
 801507c:	781b      	ldrb	r3, [r3, #0]
 801507e:	706b      	strb	r3, [r5, #1]
 8015080:	2102      	movs	r1, #2
 8015082:	68a2      	ldr	r2, [r4, #8]
 8015084:	6923      	ldr	r3, [r4, #16]
 8015086:	440a      	add	r2, r1
 8015088:	7561      	strb	r1, [r4, #21]
 801508a:	440b      	add	r3, r1
 801508c:	60a2      	str	r2, [r4, #8]
 801508e:	6123      	str	r3, [r4, #16]
 8015090:	7da0      	ldrb	r0, [r4, #22]
 8015092:	f080 0001 	eor.w	r0, r0, #1
 8015096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801509a:	881b      	ldrh	r3, [r3, #0]
 801509c:	802b      	strh	r3, [r5, #0]
 801509e:	e7ef      	b.n	8015080 <ucdr_deserialize_uint16_t+0x90>
 80150a0:	68a2      	ldr	r2, [r4, #8]
 80150a2:	6923      	ldr	r3, [r4, #16]
 80150a4:	1b92      	subs	r2, r2, r6
 80150a6:	7da0      	ldrb	r0, [r4, #22]
 80150a8:	1b9b      	subs	r3, r3, r6
 80150aa:	f884 8015 	strb.w	r8, [r4, #21]
 80150ae:	f080 0001 	eor.w	r0, r0, #1
 80150b2:	60a2      	str	r2, [r4, #8]
 80150b4:	6123      	str	r3, [r4, #16]
 80150b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80150ba:	68a3      	ldr	r3, [r4, #8]
 80150bc:	781b      	ldrb	r3, [r3, #0]
 80150be:	706b      	strb	r3, [r5, #1]
 80150c0:	e7c2      	b.n	8015048 <ucdr_deserialize_uint16_t+0x58>
 80150c2:	4639      	mov	r1, r7
 80150c4:	4632      	mov	r2, r6
 80150c6:	4628      	mov	r0, r5
 80150c8:	f006 fa89 	bl	801b5de <memcpy>
 80150cc:	464a      	mov	r2, r9
 80150ce:	19a8      	adds	r0, r5, r6
 80150d0:	68a1      	ldr	r1, [r4, #8]
 80150d2:	f006 fa84 	bl	801b5de <memcpy>
 80150d6:	e7b7      	b.n	8015048 <ucdr_deserialize_uint16_t+0x58>

080150d8 <ucdr_deserialize_endian_uint16_t>:
 80150d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150dc:	4604      	mov	r4, r0
 80150de:	460e      	mov	r6, r1
 80150e0:	2102      	movs	r1, #2
 80150e2:	4615      	mov	r5, r2
 80150e4:	f7fa fb3e 	bl	800f764 <ucdr_buffer_alignment>
 80150e8:	4601      	mov	r1, r0
 80150ea:	4620      	mov	r0, r4
 80150ec:	f894 8015 	ldrb.w	r8, [r4, #21]
 80150f0:	f7fa fb80 	bl	800f7f4 <ucdr_advance_buffer>
 80150f4:	2102      	movs	r1, #2
 80150f6:	4620      	mov	r0, r4
 80150f8:	f7fa fad4 	bl	800f6a4 <ucdr_check_buffer_available_for>
 80150fc:	bb70      	cbnz	r0, 801515c <ucdr_deserialize_endian_uint16_t+0x84>
 80150fe:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 8015102:	454f      	cmp	r7, r9
 8015104:	d925      	bls.n	8015152 <ucdr_deserialize_endian_uint16_t+0x7a>
 8015106:	6923      	ldr	r3, [r4, #16]
 8015108:	4620      	mov	r0, r4
 801510a:	60a7      	str	r7, [r4, #8]
 801510c:	eba7 0709 	sub.w	r7, r7, r9
 8015110:	443b      	add	r3, r7
 8015112:	f1c7 0a02 	rsb	sl, r7, #2
 8015116:	6123      	str	r3, [r4, #16]
 8015118:	4651      	mov	r1, sl
 801511a:	f7fa facf 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 801511e:	2800      	cmp	r0, #0
 8015120:	d034      	beq.n	801518c <ucdr_deserialize_endian_uint16_t+0xb4>
 8015122:	2e01      	cmp	r6, #1
 8015124:	d043      	beq.n	80151ae <ucdr_deserialize_endian_uint16_t+0xd6>
 8015126:	f899 3001 	ldrb.w	r3, [r9, #1]
 801512a:	702b      	strb	r3, [r5, #0]
 801512c:	2f00      	cmp	r7, #0
 801512e:	d03a      	beq.n	80151a6 <ucdr_deserialize_endian_uint16_t+0xce>
 8015130:	f899 3000 	ldrb.w	r3, [r9]
 8015134:	706b      	strb	r3, [r5, #1]
 8015136:	6923      	ldr	r3, [r4, #16]
 8015138:	2102      	movs	r1, #2
 801513a:	68a2      	ldr	r2, [r4, #8]
 801513c:	3302      	adds	r3, #2
 801513e:	7da0      	ldrb	r0, [r4, #22]
 8015140:	4452      	add	r2, sl
 8015142:	7561      	strb	r1, [r4, #21]
 8015144:	1bdb      	subs	r3, r3, r7
 8015146:	f080 0001 	eor.w	r0, r0, #1
 801514a:	60a2      	str	r2, [r4, #8]
 801514c:	6123      	str	r3, [r4, #16]
 801514e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015152:	2102      	movs	r1, #2
 8015154:	4620      	mov	r0, r4
 8015156:	f7fa fab1 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 801515a:	b178      	cbz	r0, 801517c <ucdr_deserialize_endian_uint16_t+0xa4>
 801515c:	2e01      	cmp	r6, #1
 801515e:	68a3      	ldr	r3, [r4, #8]
 8015160:	d011      	beq.n	8015186 <ucdr_deserialize_endian_uint16_t+0xae>
 8015162:	785b      	ldrb	r3, [r3, #1]
 8015164:	702b      	strb	r3, [r5, #0]
 8015166:	68a3      	ldr	r3, [r4, #8]
 8015168:	781b      	ldrb	r3, [r3, #0]
 801516a:	706b      	strb	r3, [r5, #1]
 801516c:	2102      	movs	r1, #2
 801516e:	68a2      	ldr	r2, [r4, #8]
 8015170:	6923      	ldr	r3, [r4, #16]
 8015172:	440a      	add	r2, r1
 8015174:	7561      	strb	r1, [r4, #21]
 8015176:	440b      	add	r3, r1
 8015178:	60a2      	str	r2, [r4, #8]
 801517a:	6123      	str	r3, [r4, #16]
 801517c:	7da0      	ldrb	r0, [r4, #22]
 801517e:	f080 0001 	eor.w	r0, r0, #1
 8015182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015186:	881b      	ldrh	r3, [r3, #0]
 8015188:	802b      	strh	r3, [r5, #0]
 801518a:	e7ef      	b.n	801516c <ucdr_deserialize_endian_uint16_t+0x94>
 801518c:	68a2      	ldr	r2, [r4, #8]
 801518e:	6923      	ldr	r3, [r4, #16]
 8015190:	1bd2      	subs	r2, r2, r7
 8015192:	7da0      	ldrb	r0, [r4, #22]
 8015194:	1bdb      	subs	r3, r3, r7
 8015196:	f884 8015 	strb.w	r8, [r4, #21]
 801519a:	f080 0001 	eor.w	r0, r0, #1
 801519e:	60a2      	str	r2, [r4, #8]
 80151a0:	6123      	str	r3, [r4, #16]
 80151a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151a6:	68a3      	ldr	r3, [r4, #8]
 80151a8:	781b      	ldrb	r3, [r3, #0]
 80151aa:	706b      	strb	r3, [r5, #1]
 80151ac:	e7c3      	b.n	8015136 <ucdr_deserialize_endian_uint16_t+0x5e>
 80151ae:	4649      	mov	r1, r9
 80151b0:	463a      	mov	r2, r7
 80151b2:	4628      	mov	r0, r5
 80151b4:	f006 fa13 	bl	801b5de <memcpy>
 80151b8:	4652      	mov	r2, sl
 80151ba:	19e8      	adds	r0, r5, r7
 80151bc:	68a1      	ldr	r1, [r4, #8]
 80151be:	f006 fa0e 	bl	801b5de <memcpy>
 80151c2:	e7b8      	b.n	8015136 <ucdr_deserialize_endian_uint16_t+0x5e>

080151c4 <ucdr_serialize_uint32_t>:
 80151c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151c8:	b082      	sub	sp, #8
 80151ca:	4604      	mov	r4, r0
 80151cc:	9101      	str	r1, [sp, #4]
 80151ce:	2104      	movs	r1, #4
 80151d0:	f7fa fac8 	bl	800f764 <ucdr_buffer_alignment>
 80151d4:	4601      	mov	r1, r0
 80151d6:	4620      	mov	r0, r4
 80151d8:	7d67      	ldrb	r7, [r4, #21]
 80151da:	f7fa fb0b 	bl	800f7f4 <ucdr_advance_buffer>
 80151de:	2104      	movs	r1, #4
 80151e0:	4620      	mov	r0, r4
 80151e2:	f7fa fa5f 	bl	800f6a4 <ucdr_check_buffer_available_for>
 80151e6:	2800      	cmp	r0, #0
 80151e8:	d139      	bne.n	801525e <ucdr_serialize_uint32_t+0x9a>
 80151ea:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80151ee:	42ab      	cmp	r3, r5
 80151f0:	d930      	bls.n	8015254 <ucdr_serialize_uint32_t+0x90>
 80151f2:	1b5e      	subs	r6, r3, r5
 80151f4:	60a3      	str	r3, [r4, #8]
 80151f6:	6923      	ldr	r3, [r4, #16]
 80151f8:	4620      	mov	r0, r4
 80151fa:	f1c6 0804 	rsb	r8, r6, #4
 80151fe:	4433      	add	r3, r6
 8015200:	4641      	mov	r1, r8
 8015202:	6123      	str	r3, [r4, #16]
 8015204:	f7fa fa5a 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 8015208:	2800      	cmp	r0, #0
 801520a:	d04c      	beq.n	80152a6 <ucdr_serialize_uint32_t+0xe2>
 801520c:	7d23      	ldrb	r3, [r4, #20]
 801520e:	2b01      	cmp	r3, #1
 8015210:	d063      	beq.n	80152da <ucdr_serialize_uint32_t+0x116>
 8015212:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015216:	702b      	strb	r3, [r5, #0]
 8015218:	2e00      	cmp	r6, #0
 801521a:	d051      	beq.n	80152c0 <ucdr_serialize_uint32_t+0xfc>
 801521c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8015220:	2e01      	cmp	r6, #1
 8015222:	706b      	strb	r3, [r5, #1]
 8015224:	d050      	beq.n	80152c8 <ucdr_serialize_uint32_t+0x104>
 8015226:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801522a:	2e02      	cmp	r6, #2
 801522c:	70ab      	strb	r3, [r5, #2]
 801522e:	d04f      	beq.n	80152d0 <ucdr_serialize_uint32_t+0x10c>
 8015230:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8015234:	70eb      	strb	r3, [r5, #3]
 8015236:	6923      	ldr	r3, [r4, #16]
 8015238:	2104      	movs	r1, #4
 801523a:	68a2      	ldr	r2, [r4, #8]
 801523c:	3304      	adds	r3, #4
 801523e:	7da0      	ldrb	r0, [r4, #22]
 8015240:	4442      	add	r2, r8
 8015242:	7561      	strb	r1, [r4, #21]
 8015244:	1b9e      	subs	r6, r3, r6
 8015246:	f080 0001 	eor.w	r0, r0, #1
 801524a:	60a2      	str	r2, [r4, #8]
 801524c:	6126      	str	r6, [r4, #16]
 801524e:	b002      	add	sp, #8
 8015250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015254:	2104      	movs	r1, #4
 8015256:	4620      	mov	r0, r4
 8015258:	f7fa fa30 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 801525c:	b1d0      	cbz	r0, 8015294 <ucdr_serialize_uint32_t+0xd0>
 801525e:	7d23      	ldrb	r3, [r4, #20]
 8015260:	2b01      	cmp	r3, #1
 8015262:	68a3      	ldr	r3, [r4, #8]
 8015264:	d01c      	beq.n	80152a0 <ucdr_serialize_uint32_t+0xdc>
 8015266:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801526a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801526e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8015272:	7018      	strb	r0, [r3, #0]
 8015274:	68a3      	ldr	r3, [r4, #8]
 8015276:	705a      	strb	r2, [r3, #1]
 8015278:	68a3      	ldr	r3, [r4, #8]
 801527a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801527e:	7099      	strb	r1, [r3, #2]
 8015280:	68a3      	ldr	r3, [r4, #8]
 8015282:	70da      	strb	r2, [r3, #3]
 8015284:	2104      	movs	r1, #4
 8015286:	68a2      	ldr	r2, [r4, #8]
 8015288:	6923      	ldr	r3, [r4, #16]
 801528a:	440a      	add	r2, r1
 801528c:	7561      	strb	r1, [r4, #21]
 801528e:	440b      	add	r3, r1
 8015290:	60a2      	str	r2, [r4, #8]
 8015292:	6123      	str	r3, [r4, #16]
 8015294:	7da0      	ldrb	r0, [r4, #22]
 8015296:	f080 0001 	eor.w	r0, r0, #1
 801529a:	b002      	add	sp, #8
 801529c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152a0:	9a01      	ldr	r2, [sp, #4]
 80152a2:	601a      	str	r2, [r3, #0]
 80152a4:	e7ee      	b.n	8015284 <ucdr_serialize_uint32_t+0xc0>
 80152a6:	68a2      	ldr	r2, [r4, #8]
 80152a8:	6923      	ldr	r3, [r4, #16]
 80152aa:	7da0      	ldrb	r0, [r4, #22]
 80152ac:	1b92      	subs	r2, r2, r6
 80152ae:	1b9b      	subs	r3, r3, r6
 80152b0:	7567      	strb	r7, [r4, #21]
 80152b2:	f080 0001 	eor.w	r0, r0, #1
 80152b6:	60a2      	str	r2, [r4, #8]
 80152b8:	6123      	str	r3, [r4, #16]
 80152ba:	b002      	add	sp, #8
 80152bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152c0:	68a3      	ldr	r3, [r4, #8]
 80152c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80152c6:	701a      	strb	r2, [r3, #0]
 80152c8:	68a3      	ldr	r3, [r4, #8]
 80152ca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80152ce:	701a      	strb	r2, [r3, #0]
 80152d0:	68a3      	ldr	r3, [r4, #8]
 80152d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80152d6:	701a      	strb	r2, [r3, #0]
 80152d8:	e7ad      	b.n	8015236 <ucdr_serialize_uint32_t+0x72>
 80152da:	4628      	mov	r0, r5
 80152dc:	ad01      	add	r5, sp, #4
 80152de:	4632      	mov	r2, r6
 80152e0:	4629      	mov	r1, r5
 80152e2:	f006 f97c 	bl	801b5de <memcpy>
 80152e6:	4642      	mov	r2, r8
 80152e8:	19a9      	adds	r1, r5, r6
 80152ea:	68a0      	ldr	r0, [r4, #8]
 80152ec:	f006 f977 	bl	801b5de <memcpy>
 80152f0:	e7a1      	b.n	8015236 <ucdr_serialize_uint32_t+0x72>
 80152f2:	bf00      	nop

080152f4 <ucdr_serialize_endian_uint32_t>:
 80152f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80152f8:	4604      	mov	r4, r0
 80152fa:	b083      	sub	sp, #12
 80152fc:	460d      	mov	r5, r1
 80152fe:	2104      	movs	r1, #4
 8015300:	9201      	str	r2, [sp, #4]
 8015302:	f7fa fa2f 	bl	800f764 <ucdr_buffer_alignment>
 8015306:	4601      	mov	r1, r0
 8015308:	4620      	mov	r0, r4
 801530a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801530e:	f7fa fa71 	bl	800f7f4 <ucdr_advance_buffer>
 8015312:	2104      	movs	r1, #4
 8015314:	4620      	mov	r0, r4
 8015316:	f7fa f9c5 	bl	800f6a4 <ucdr_check_buffer_available_for>
 801531a:	2800      	cmp	r0, #0
 801531c:	d138      	bne.n	8015390 <ucdr_serialize_endian_uint32_t+0x9c>
 801531e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8015322:	42b7      	cmp	r7, r6
 8015324:	d92f      	bls.n	8015386 <ucdr_serialize_endian_uint32_t+0x92>
 8015326:	6923      	ldr	r3, [r4, #16]
 8015328:	4620      	mov	r0, r4
 801532a:	60a7      	str	r7, [r4, #8]
 801532c:	1bbf      	subs	r7, r7, r6
 801532e:	443b      	add	r3, r7
 8015330:	f1c7 0904 	rsb	r9, r7, #4
 8015334:	6123      	str	r3, [r4, #16]
 8015336:	4649      	mov	r1, r9
 8015338:	f7fa f9c0 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 801533c:	2800      	cmp	r0, #0
 801533e:	d04a      	beq.n	80153d6 <ucdr_serialize_endian_uint32_t+0xe2>
 8015340:	2d01      	cmp	r5, #1
 8015342:	d063      	beq.n	801540c <ucdr_serialize_endian_uint32_t+0x118>
 8015344:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015348:	7033      	strb	r3, [r6, #0]
 801534a:	2f00      	cmp	r7, #0
 801534c:	d051      	beq.n	80153f2 <ucdr_serialize_endian_uint32_t+0xfe>
 801534e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8015352:	2f01      	cmp	r7, #1
 8015354:	7073      	strb	r3, [r6, #1]
 8015356:	d050      	beq.n	80153fa <ucdr_serialize_endian_uint32_t+0x106>
 8015358:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801535c:	2f02      	cmp	r7, #2
 801535e:	70b3      	strb	r3, [r6, #2]
 8015360:	d04f      	beq.n	8015402 <ucdr_serialize_endian_uint32_t+0x10e>
 8015362:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8015366:	70f3      	strb	r3, [r6, #3]
 8015368:	6923      	ldr	r3, [r4, #16]
 801536a:	2104      	movs	r1, #4
 801536c:	68a2      	ldr	r2, [r4, #8]
 801536e:	7da0      	ldrb	r0, [r4, #22]
 8015370:	3304      	adds	r3, #4
 8015372:	444a      	add	r2, r9
 8015374:	7561      	strb	r1, [r4, #21]
 8015376:	1bdb      	subs	r3, r3, r7
 8015378:	f080 0001 	eor.w	r0, r0, #1
 801537c:	60a2      	str	r2, [r4, #8]
 801537e:	6123      	str	r3, [r4, #16]
 8015380:	b003      	add	sp, #12
 8015382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015386:	2104      	movs	r1, #4
 8015388:	4620      	mov	r0, r4
 801538a:	f7fa f997 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 801538e:	b1c8      	cbz	r0, 80153c4 <ucdr_serialize_endian_uint32_t+0xd0>
 8015390:	2d01      	cmp	r5, #1
 8015392:	68a3      	ldr	r3, [r4, #8]
 8015394:	d01c      	beq.n	80153d0 <ucdr_serialize_endian_uint32_t+0xdc>
 8015396:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801539a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801539e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80153a2:	7018      	strb	r0, [r3, #0]
 80153a4:	68a3      	ldr	r3, [r4, #8]
 80153a6:	705a      	strb	r2, [r3, #1]
 80153a8:	68a3      	ldr	r3, [r4, #8]
 80153aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80153ae:	7099      	strb	r1, [r3, #2]
 80153b0:	68a3      	ldr	r3, [r4, #8]
 80153b2:	70da      	strb	r2, [r3, #3]
 80153b4:	2104      	movs	r1, #4
 80153b6:	68a2      	ldr	r2, [r4, #8]
 80153b8:	6923      	ldr	r3, [r4, #16]
 80153ba:	440a      	add	r2, r1
 80153bc:	7561      	strb	r1, [r4, #21]
 80153be:	440b      	add	r3, r1
 80153c0:	60a2      	str	r2, [r4, #8]
 80153c2:	6123      	str	r3, [r4, #16]
 80153c4:	7da0      	ldrb	r0, [r4, #22]
 80153c6:	f080 0001 	eor.w	r0, r0, #1
 80153ca:	b003      	add	sp, #12
 80153cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153d0:	9a01      	ldr	r2, [sp, #4]
 80153d2:	601a      	str	r2, [r3, #0]
 80153d4:	e7ee      	b.n	80153b4 <ucdr_serialize_endian_uint32_t+0xc0>
 80153d6:	68a2      	ldr	r2, [r4, #8]
 80153d8:	6923      	ldr	r3, [r4, #16]
 80153da:	7da0      	ldrb	r0, [r4, #22]
 80153dc:	1bd2      	subs	r2, r2, r7
 80153de:	1bdb      	subs	r3, r3, r7
 80153e0:	f884 8015 	strb.w	r8, [r4, #21]
 80153e4:	f080 0001 	eor.w	r0, r0, #1
 80153e8:	60a2      	str	r2, [r4, #8]
 80153ea:	6123      	str	r3, [r4, #16]
 80153ec:	b003      	add	sp, #12
 80153ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153f2:	68a3      	ldr	r3, [r4, #8]
 80153f4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80153f8:	701a      	strb	r2, [r3, #0]
 80153fa:	68a3      	ldr	r3, [r4, #8]
 80153fc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8015400:	701a      	strb	r2, [r3, #0]
 8015402:	68a3      	ldr	r3, [r4, #8]
 8015404:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8015408:	701a      	strb	r2, [r3, #0]
 801540a:	e7ad      	b.n	8015368 <ucdr_serialize_endian_uint32_t+0x74>
 801540c:	ad01      	add	r5, sp, #4
 801540e:	463a      	mov	r2, r7
 8015410:	4630      	mov	r0, r6
 8015412:	4629      	mov	r1, r5
 8015414:	f006 f8e3 	bl	801b5de <memcpy>
 8015418:	464a      	mov	r2, r9
 801541a:	19e9      	adds	r1, r5, r7
 801541c:	68a0      	ldr	r0, [r4, #8]
 801541e:	f006 f8de 	bl	801b5de <memcpy>
 8015422:	e7a1      	b.n	8015368 <ucdr_serialize_endian_uint32_t+0x74>

08015424 <ucdr_deserialize_uint32_t>:
 8015424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015428:	4604      	mov	r4, r0
 801542a:	460d      	mov	r5, r1
 801542c:	2104      	movs	r1, #4
 801542e:	f7fa f999 	bl	800f764 <ucdr_buffer_alignment>
 8015432:	4601      	mov	r1, r0
 8015434:	4620      	mov	r0, r4
 8015436:	f894 8015 	ldrb.w	r8, [r4, #21]
 801543a:	f7fa f9db 	bl	800f7f4 <ucdr_advance_buffer>
 801543e:	2104      	movs	r1, #4
 8015440:	4620      	mov	r0, r4
 8015442:	f7fa f92f 	bl	800f6a4 <ucdr_check_buffer_available_for>
 8015446:	2800      	cmp	r0, #0
 8015448:	d138      	bne.n	80154bc <ucdr_deserialize_uint32_t+0x98>
 801544a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801544e:	42b7      	cmp	r7, r6
 8015450:	d92f      	bls.n	80154b2 <ucdr_deserialize_uint32_t+0x8e>
 8015452:	6923      	ldr	r3, [r4, #16]
 8015454:	4620      	mov	r0, r4
 8015456:	60a7      	str	r7, [r4, #8]
 8015458:	1bbf      	subs	r7, r7, r6
 801545a:	443b      	add	r3, r7
 801545c:	f1c7 0904 	rsb	r9, r7, #4
 8015460:	6123      	str	r3, [r4, #16]
 8015462:	4649      	mov	r1, r9
 8015464:	f7fa f92a 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 8015468:	2800      	cmp	r0, #0
 801546a:	d046      	beq.n	80154fa <ucdr_deserialize_uint32_t+0xd6>
 801546c:	7d23      	ldrb	r3, [r4, #20]
 801546e:	2b01      	cmp	r3, #1
 8015470:	d05c      	beq.n	801552c <ucdr_deserialize_uint32_t+0x108>
 8015472:	78f3      	ldrb	r3, [r6, #3]
 8015474:	702b      	strb	r3, [r5, #0]
 8015476:	2f00      	cmp	r7, #0
 8015478:	d04c      	beq.n	8015514 <ucdr_deserialize_uint32_t+0xf0>
 801547a:	78b3      	ldrb	r3, [r6, #2]
 801547c:	2f01      	cmp	r7, #1
 801547e:	706b      	strb	r3, [r5, #1]
 8015480:	f105 0302 	add.w	r3, r5, #2
 8015484:	d04a      	beq.n	801551c <ucdr_deserialize_uint32_t+0xf8>
 8015486:	7873      	ldrb	r3, [r6, #1]
 8015488:	2f02      	cmp	r7, #2
 801548a:	70ab      	strb	r3, [r5, #2]
 801548c:	f105 0303 	add.w	r3, r5, #3
 8015490:	d048      	beq.n	8015524 <ucdr_deserialize_uint32_t+0x100>
 8015492:	7833      	ldrb	r3, [r6, #0]
 8015494:	70eb      	strb	r3, [r5, #3]
 8015496:	6923      	ldr	r3, [r4, #16]
 8015498:	2104      	movs	r1, #4
 801549a:	68a2      	ldr	r2, [r4, #8]
 801549c:	3304      	adds	r3, #4
 801549e:	7da0      	ldrb	r0, [r4, #22]
 80154a0:	444a      	add	r2, r9
 80154a2:	7561      	strb	r1, [r4, #21]
 80154a4:	1bdb      	subs	r3, r3, r7
 80154a6:	f080 0001 	eor.w	r0, r0, #1
 80154aa:	60a2      	str	r2, [r4, #8]
 80154ac:	6123      	str	r3, [r4, #16]
 80154ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80154b2:	2104      	movs	r1, #4
 80154b4:	4620      	mov	r0, r4
 80154b6:	f7fa f901 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 80154ba:	b1b0      	cbz	r0, 80154ea <ucdr_deserialize_uint32_t+0xc6>
 80154bc:	7d23      	ldrb	r3, [r4, #20]
 80154be:	2b01      	cmp	r3, #1
 80154c0:	68a3      	ldr	r3, [r4, #8]
 80154c2:	d017      	beq.n	80154f4 <ucdr_deserialize_uint32_t+0xd0>
 80154c4:	78db      	ldrb	r3, [r3, #3]
 80154c6:	702b      	strb	r3, [r5, #0]
 80154c8:	68a3      	ldr	r3, [r4, #8]
 80154ca:	789b      	ldrb	r3, [r3, #2]
 80154cc:	706b      	strb	r3, [r5, #1]
 80154ce:	68a3      	ldr	r3, [r4, #8]
 80154d0:	785b      	ldrb	r3, [r3, #1]
 80154d2:	70ab      	strb	r3, [r5, #2]
 80154d4:	68a3      	ldr	r3, [r4, #8]
 80154d6:	781b      	ldrb	r3, [r3, #0]
 80154d8:	70eb      	strb	r3, [r5, #3]
 80154da:	2104      	movs	r1, #4
 80154dc:	68a2      	ldr	r2, [r4, #8]
 80154de:	6923      	ldr	r3, [r4, #16]
 80154e0:	440a      	add	r2, r1
 80154e2:	7561      	strb	r1, [r4, #21]
 80154e4:	440b      	add	r3, r1
 80154e6:	60a2      	str	r2, [r4, #8]
 80154e8:	6123      	str	r3, [r4, #16]
 80154ea:	7da0      	ldrb	r0, [r4, #22]
 80154ec:	f080 0001 	eor.w	r0, r0, #1
 80154f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	602b      	str	r3, [r5, #0]
 80154f8:	e7ef      	b.n	80154da <ucdr_deserialize_uint32_t+0xb6>
 80154fa:	68a2      	ldr	r2, [r4, #8]
 80154fc:	6923      	ldr	r3, [r4, #16]
 80154fe:	1bd2      	subs	r2, r2, r7
 8015500:	7da0      	ldrb	r0, [r4, #22]
 8015502:	1bdb      	subs	r3, r3, r7
 8015504:	f884 8015 	strb.w	r8, [r4, #21]
 8015508:	f080 0001 	eor.w	r0, r0, #1
 801550c:	60a2      	str	r2, [r4, #8]
 801550e:	6123      	str	r3, [r4, #16]
 8015510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015514:	68a3      	ldr	r3, [r4, #8]
 8015516:	789b      	ldrb	r3, [r3, #2]
 8015518:	706b      	strb	r3, [r5, #1]
 801551a:	1cab      	adds	r3, r5, #2
 801551c:	68a2      	ldr	r2, [r4, #8]
 801551e:	7852      	ldrb	r2, [r2, #1]
 8015520:	f803 2b01 	strb.w	r2, [r3], #1
 8015524:	68a2      	ldr	r2, [r4, #8]
 8015526:	7812      	ldrb	r2, [r2, #0]
 8015528:	701a      	strb	r2, [r3, #0]
 801552a:	e7b4      	b.n	8015496 <ucdr_deserialize_uint32_t+0x72>
 801552c:	4631      	mov	r1, r6
 801552e:	463a      	mov	r2, r7
 8015530:	4628      	mov	r0, r5
 8015532:	f006 f854 	bl	801b5de <memcpy>
 8015536:	464a      	mov	r2, r9
 8015538:	19e8      	adds	r0, r5, r7
 801553a:	68a1      	ldr	r1, [r4, #8]
 801553c:	f006 f84f 	bl	801b5de <memcpy>
 8015540:	e7a9      	b.n	8015496 <ucdr_deserialize_uint32_t+0x72>
 8015542:	bf00      	nop

08015544 <ucdr_deserialize_endian_uint32_t>:
 8015544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015548:	4604      	mov	r4, r0
 801554a:	460e      	mov	r6, r1
 801554c:	2104      	movs	r1, #4
 801554e:	4615      	mov	r5, r2
 8015550:	f7fa f908 	bl	800f764 <ucdr_buffer_alignment>
 8015554:	4601      	mov	r1, r0
 8015556:	4620      	mov	r0, r4
 8015558:	f894 8015 	ldrb.w	r8, [r4, #21]
 801555c:	f7fa f94a 	bl	800f7f4 <ucdr_advance_buffer>
 8015560:	2104      	movs	r1, #4
 8015562:	4620      	mov	r0, r4
 8015564:	f7fa f89e 	bl	800f6a4 <ucdr_check_buffer_available_for>
 8015568:	2800      	cmp	r0, #0
 801556a:	d13c      	bne.n	80155e6 <ucdr_deserialize_endian_uint32_t+0xa2>
 801556c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8015570:	42bb      	cmp	r3, r7
 8015572:	d933      	bls.n	80155dc <ucdr_deserialize_endian_uint32_t+0x98>
 8015574:	eba3 0907 	sub.w	r9, r3, r7
 8015578:	60a3      	str	r3, [r4, #8]
 801557a:	6923      	ldr	r3, [r4, #16]
 801557c:	4620      	mov	r0, r4
 801557e:	f1c9 0a04 	rsb	sl, r9, #4
 8015582:	444b      	add	r3, r9
 8015584:	4651      	mov	r1, sl
 8015586:	6123      	str	r3, [r4, #16]
 8015588:	f7fa f898 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 801558c:	2800      	cmp	r0, #0
 801558e:	d048      	beq.n	8015622 <ucdr_deserialize_endian_uint32_t+0xde>
 8015590:	2e01      	cmp	r6, #1
 8015592:	d061      	beq.n	8015658 <ucdr_deserialize_endian_uint32_t+0x114>
 8015594:	78fb      	ldrb	r3, [r7, #3]
 8015596:	702b      	strb	r3, [r5, #0]
 8015598:	f1b9 0f00 	cmp.w	r9, #0
 801559c:	d050      	beq.n	8015640 <ucdr_deserialize_endian_uint32_t+0xfc>
 801559e:	78bb      	ldrb	r3, [r7, #2]
 80155a0:	f1b9 0f01 	cmp.w	r9, #1
 80155a4:	706b      	strb	r3, [r5, #1]
 80155a6:	f105 0302 	add.w	r3, r5, #2
 80155aa:	d04d      	beq.n	8015648 <ucdr_deserialize_endian_uint32_t+0x104>
 80155ac:	787b      	ldrb	r3, [r7, #1]
 80155ae:	f1b9 0f02 	cmp.w	r9, #2
 80155b2:	70ab      	strb	r3, [r5, #2]
 80155b4:	f105 0303 	add.w	r3, r5, #3
 80155b8:	d04a      	beq.n	8015650 <ucdr_deserialize_endian_uint32_t+0x10c>
 80155ba:	783b      	ldrb	r3, [r7, #0]
 80155bc:	70eb      	strb	r3, [r5, #3]
 80155be:	6923      	ldr	r3, [r4, #16]
 80155c0:	2104      	movs	r1, #4
 80155c2:	68a2      	ldr	r2, [r4, #8]
 80155c4:	3304      	adds	r3, #4
 80155c6:	7da0      	ldrb	r0, [r4, #22]
 80155c8:	4452      	add	r2, sl
 80155ca:	7561      	strb	r1, [r4, #21]
 80155cc:	eba3 0309 	sub.w	r3, r3, r9
 80155d0:	f080 0001 	eor.w	r0, r0, #1
 80155d4:	60a2      	str	r2, [r4, #8]
 80155d6:	6123      	str	r3, [r4, #16]
 80155d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155dc:	2104      	movs	r1, #4
 80155de:	4620      	mov	r0, r4
 80155e0:	f7fa f86c 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 80155e4:	b1a8      	cbz	r0, 8015612 <ucdr_deserialize_endian_uint32_t+0xce>
 80155e6:	2e01      	cmp	r6, #1
 80155e8:	68a3      	ldr	r3, [r4, #8]
 80155ea:	d017      	beq.n	801561c <ucdr_deserialize_endian_uint32_t+0xd8>
 80155ec:	78db      	ldrb	r3, [r3, #3]
 80155ee:	702b      	strb	r3, [r5, #0]
 80155f0:	68a3      	ldr	r3, [r4, #8]
 80155f2:	789b      	ldrb	r3, [r3, #2]
 80155f4:	706b      	strb	r3, [r5, #1]
 80155f6:	68a3      	ldr	r3, [r4, #8]
 80155f8:	785b      	ldrb	r3, [r3, #1]
 80155fa:	70ab      	strb	r3, [r5, #2]
 80155fc:	68a3      	ldr	r3, [r4, #8]
 80155fe:	781b      	ldrb	r3, [r3, #0]
 8015600:	70eb      	strb	r3, [r5, #3]
 8015602:	2104      	movs	r1, #4
 8015604:	68a2      	ldr	r2, [r4, #8]
 8015606:	6923      	ldr	r3, [r4, #16]
 8015608:	440a      	add	r2, r1
 801560a:	7561      	strb	r1, [r4, #21]
 801560c:	440b      	add	r3, r1
 801560e:	60a2      	str	r2, [r4, #8]
 8015610:	6123      	str	r3, [r4, #16]
 8015612:	7da0      	ldrb	r0, [r4, #22]
 8015614:	f080 0001 	eor.w	r0, r0, #1
 8015618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	602b      	str	r3, [r5, #0]
 8015620:	e7ef      	b.n	8015602 <ucdr_deserialize_endian_uint32_t+0xbe>
 8015622:	68a2      	ldr	r2, [r4, #8]
 8015624:	6923      	ldr	r3, [r4, #16]
 8015626:	eba2 0209 	sub.w	r2, r2, r9
 801562a:	7da0      	ldrb	r0, [r4, #22]
 801562c:	eba3 0309 	sub.w	r3, r3, r9
 8015630:	f884 8015 	strb.w	r8, [r4, #21]
 8015634:	f080 0001 	eor.w	r0, r0, #1
 8015638:	60a2      	str	r2, [r4, #8]
 801563a:	6123      	str	r3, [r4, #16]
 801563c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015640:	68a3      	ldr	r3, [r4, #8]
 8015642:	789b      	ldrb	r3, [r3, #2]
 8015644:	706b      	strb	r3, [r5, #1]
 8015646:	1cab      	adds	r3, r5, #2
 8015648:	68a2      	ldr	r2, [r4, #8]
 801564a:	7852      	ldrb	r2, [r2, #1]
 801564c:	f803 2b01 	strb.w	r2, [r3], #1
 8015650:	68a2      	ldr	r2, [r4, #8]
 8015652:	7812      	ldrb	r2, [r2, #0]
 8015654:	701a      	strb	r2, [r3, #0]
 8015656:	e7b2      	b.n	80155be <ucdr_deserialize_endian_uint32_t+0x7a>
 8015658:	4639      	mov	r1, r7
 801565a:	464a      	mov	r2, r9
 801565c:	4628      	mov	r0, r5
 801565e:	f005 ffbe 	bl	801b5de <memcpy>
 8015662:	4652      	mov	r2, sl
 8015664:	eb05 0009 	add.w	r0, r5, r9
 8015668:	68a1      	ldr	r1, [r4, #8]
 801566a:	f005 ffb8 	bl	801b5de <memcpy>
 801566e:	e7a6      	b.n	80155be <ucdr_deserialize_endian_uint32_t+0x7a>

08015670 <ucdr_serialize_uint64_t>:
 8015670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015674:	4604      	mov	r4, r0
 8015676:	b082      	sub	sp, #8
 8015678:	2108      	movs	r1, #8
 801567a:	e9cd 2300 	strd	r2, r3, [sp]
 801567e:	f7fa f871 	bl	800f764 <ucdr_buffer_alignment>
 8015682:	4601      	mov	r1, r0
 8015684:	4620      	mov	r0, r4
 8015686:	7d67      	ldrb	r7, [r4, #21]
 8015688:	f7fa f8b4 	bl	800f7f4 <ucdr_advance_buffer>
 801568c:	2108      	movs	r1, #8
 801568e:	4620      	mov	r0, r4
 8015690:	f7fa f808 	bl	800f6a4 <ucdr_check_buffer_available_for>
 8015694:	2800      	cmp	r0, #0
 8015696:	d14e      	bne.n	8015736 <ucdr_serialize_uint64_t+0xc6>
 8015698:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801569c:	42ab      	cmp	r3, r5
 801569e:	d945      	bls.n	801572c <ucdr_serialize_uint64_t+0xbc>
 80156a0:	1b5e      	subs	r6, r3, r5
 80156a2:	60a3      	str	r3, [r4, #8]
 80156a4:	6923      	ldr	r3, [r4, #16]
 80156a6:	4620      	mov	r0, r4
 80156a8:	f1c6 0808 	rsb	r8, r6, #8
 80156ac:	4433      	add	r3, r6
 80156ae:	4641      	mov	r1, r8
 80156b0:	6123      	str	r3, [r4, #16]
 80156b2:	f7fa f803 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 80156b6:	2800      	cmp	r0, #0
 80156b8:	d074      	beq.n	80157a4 <ucdr_serialize_uint64_t+0x134>
 80156ba:	7d23      	ldrb	r3, [r4, #20]
 80156bc:	2b01      	cmp	r3, #1
 80156be:	f000 809b 	beq.w	80157f8 <ucdr_serialize_uint64_t+0x188>
 80156c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80156c6:	702b      	strb	r3, [r5, #0]
 80156c8:	2e00      	cmp	r6, #0
 80156ca:	d078      	beq.n	80157be <ucdr_serialize_uint64_t+0x14e>
 80156cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80156d0:	2e01      	cmp	r6, #1
 80156d2:	706b      	strb	r3, [r5, #1]
 80156d4:	d077      	beq.n	80157c6 <ucdr_serialize_uint64_t+0x156>
 80156d6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80156da:	2e02      	cmp	r6, #2
 80156dc:	70ab      	strb	r3, [r5, #2]
 80156de:	d076      	beq.n	80157ce <ucdr_serialize_uint64_t+0x15e>
 80156e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80156e4:	2e03      	cmp	r6, #3
 80156e6:	70eb      	strb	r3, [r5, #3]
 80156e8:	d075      	beq.n	80157d6 <ucdr_serialize_uint64_t+0x166>
 80156ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80156ee:	2e04      	cmp	r6, #4
 80156f0:	712b      	strb	r3, [r5, #4]
 80156f2:	d074      	beq.n	80157de <ucdr_serialize_uint64_t+0x16e>
 80156f4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80156f8:	2e05      	cmp	r6, #5
 80156fa:	716b      	strb	r3, [r5, #5]
 80156fc:	d073      	beq.n	80157e6 <ucdr_serialize_uint64_t+0x176>
 80156fe:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8015702:	2e06      	cmp	r6, #6
 8015704:	71ab      	strb	r3, [r5, #6]
 8015706:	d072      	beq.n	80157ee <ucdr_serialize_uint64_t+0x17e>
 8015708:	f89d 3000 	ldrb.w	r3, [sp]
 801570c:	71eb      	strb	r3, [r5, #7]
 801570e:	6923      	ldr	r3, [r4, #16]
 8015710:	2108      	movs	r1, #8
 8015712:	68a2      	ldr	r2, [r4, #8]
 8015714:	3308      	adds	r3, #8
 8015716:	7da0      	ldrb	r0, [r4, #22]
 8015718:	4442      	add	r2, r8
 801571a:	7561      	strb	r1, [r4, #21]
 801571c:	1b9e      	subs	r6, r3, r6
 801571e:	f080 0001 	eor.w	r0, r0, #1
 8015722:	60a2      	str	r2, [r4, #8]
 8015724:	6126      	str	r6, [r4, #16]
 8015726:	b002      	add	sp, #8
 8015728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801572c:	2108      	movs	r1, #8
 801572e:	4620      	mov	r0, r4
 8015730:	f7f9 ffc4 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 8015734:	b350      	cbz	r0, 801578c <ucdr_serialize_uint64_t+0x11c>
 8015736:	7d23      	ldrb	r3, [r4, #20]
 8015738:	2b01      	cmp	r3, #1
 801573a:	d02d      	beq.n	8015798 <ucdr_serialize_uint64_t+0x128>
 801573c:	68a3      	ldr	r3, [r4, #8]
 801573e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8015742:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8015746:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801574a:	7018      	strb	r0, [r3, #0]
 801574c:	68a3      	ldr	r3, [r4, #8]
 801574e:	705a      	strb	r2, [r3, #1]
 8015750:	68a3      	ldr	r3, [r4, #8]
 8015752:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8015756:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801575a:	7099      	strb	r1, [r3, #2]
 801575c:	68a3      	ldr	r3, [r4, #8]
 801575e:	70da      	strb	r2, [r3, #3]
 8015760:	68a3      	ldr	r3, [r4, #8]
 8015762:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8015766:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801576a:	7118      	strb	r0, [r3, #4]
 801576c:	68a3      	ldr	r3, [r4, #8]
 801576e:	715a      	strb	r2, [r3, #5]
 8015770:	68a3      	ldr	r3, [r4, #8]
 8015772:	f89d 2000 	ldrb.w	r2, [sp]
 8015776:	7199      	strb	r1, [r3, #6]
 8015778:	68a3      	ldr	r3, [r4, #8]
 801577a:	71da      	strb	r2, [r3, #7]
 801577c:	2108      	movs	r1, #8
 801577e:	68a2      	ldr	r2, [r4, #8]
 8015780:	6923      	ldr	r3, [r4, #16]
 8015782:	440a      	add	r2, r1
 8015784:	7561      	strb	r1, [r4, #21]
 8015786:	440b      	add	r3, r1
 8015788:	60a2      	str	r2, [r4, #8]
 801578a:	6123      	str	r3, [r4, #16]
 801578c:	7da0      	ldrb	r0, [r4, #22]
 801578e:	f080 0001 	eor.w	r0, r0, #1
 8015792:	b002      	add	sp, #8
 8015794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015798:	466b      	mov	r3, sp
 801579a:	68a2      	ldr	r2, [r4, #8]
 801579c:	cb03      	ldmia	r3!, {r0, r1}
 801579e:	6010      	str	r0, [r2, #0]
 80157a0:	6051      	str	r1, [r2, #4]
 80157a2:	e7eb      	b.n	801577c <ucdr_serialize_uint64_t+0x10c>
 80157a4:	68a2      	ldr	r2, [r4, #8]
 80157a6:	6923      	ldr	r3, [r4, #16]
 80157a8:	7da0      	ldrb	r0, [r4, #22]
 80157aa:	1b92      	subs	r2, r2, r6
 80157ac:	1b9b      	subs	r3, r3, r6
 80157ae:	7567      	strb	r7, [r4, #21]
 80157b0:	f080 0001 	eor.w	r0, r0, #1
 80157b4:	60a2      	str	r2, [r4, #8]
 80157b6:	6123      	str	r3, [r4, #16]
 80157b8:	b002      	add	sp, #8
 80157ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157be:	68a3      	ldr	r3, [r4, #8]
 80157c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80157c4:	701a      	strb	r2, [r3, #0]
 80157c6:	68a3      	ldr	r3, [r4, #8]
 80157c8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80157cc:	701a      	strb	r2, [r3, #0]
 80157ce:	68a3      	ldr	r3, [r4, #8]
 80157d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80157d4:	701a      	strb	r2, [r3, #0]
 80157d6:	68a3      	ldr	r3, [r4, #8]
 80157d8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80157dc:	701a      	strb	r2, [r3, #0]
 80157de:	68a3      	ldr	r3, [r4, #8]
 80157e0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80157e4:	701a      	strb	r2, [r3, #0]
 80157e6:	68a3      	ldr	r3, [r4, #8]
 80157e8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80157ec:	701a      	strb	r2, [r3, #0]
 80157ee:	68a3      	ldr	r3, [r4, #8]
 80157f0:	f89d 2000 	ldrb.w	r2, [sp]
 80157f4:	701a      	strb	r2, [r3, #0]
 80157f6:	e78a      	b.n	801570e <ucdr_serialize_uint64_t+0x9e>
 80157f8:	4628      	mov	r0, r5
 80157fa:	466d      	mov	r5, sp
 80157fc:	4632      	mov	r2, r6
 80157fe:	4629      	mov	r1, r5
 8015800:	f005 feed 	bl	801b5de <memcpy>
 8015804:	4642      	mov	r2, r8
 8015806:	19a9      	adds	r1, r5, r6
 8015808:	68a0      	ldr	r0, [r4, #8]
 801580a:	f005 fee8 	bl	801b5de <memcpy>
 801580e:	e77e      	b.n	801570e <ucdr_serialize_uint64_t+0x9e>

08015810 <ucdr_serialize_int16_t>:
 8015810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015814:	460b      	mov	r3, r1
 8015816:	b082      	sub	sp, #8
 8015818:	4604      	mov	r4, r0
 801581a:	2102      	movs	r1, #2
 801581c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015820:	f7f9 ffa0 	bl	800f764 <ucdr_buffer_alignment>
 8015824:	4601      	mov	r1, r0
 8015826:	4620      	mov	r0, r4
 8015828:	7d67      	ldrb	r7, [r4, #21]
 801582a:	f7f9 ffe3 	bl	800f7f4 <ucdr_advance_buffer>
 801582e:	2102      	movs	r1, #2
 8015830:	4620      	mov	r0, r4
 8015832:	f7f9 ff37 	bl	800f6a4 <ucdr_check_buffer_available_for>
 8015836:	bb78      	cbnz	r0, 8015898 <ucdr_serialize_int16_t+0x88>
 8015838:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801583c:	42ab      	cmp	r3, r5
 801583e:	d926      	bls.n	801588e <ucdr_serialize_int16_t+0x7e>
 8015840:	1b5e      	subs	r6, r3, r5
 8015842:	60a3      	str	r3, [r4, #8]
 8015844:	6923      	ldr	r3, [r4, #16]
 8015846:	4620      	mov	r0, r4
 8015848:	f1c6 0802 	rsb	r8, r6, #2
 801584c:	4433      	add	r3, r6
 801584e:	4641      	mov	r1, r8
 8015850:	6123      	str	r3, [r4, #16]
 8015852:	f7f9 ff33 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 8015856:	2800      	cmp	r0, #0
 8015858:	d03b      	beq.n	80158d2 <ucdr_serialize_int16_t+0xc2>
 801585a:	7d23      	ldrb	r3, [r4, #20]
 801585c:	2b01      	cmp	r3, #1
 801585e:	d04a      	beq.n	80158f6 <ucdr_serialize_int16_t+0xe6>
 8015860:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015864:	702b      	strb	r3, [r5, #0]
 8015866:	2e00      	cmp	r6, #0
 8015868:	d040      	beq.n	80158ec <ucdr_serialize_int16_t+0xdc>
 801586a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801586e:	706b      	strb	r3, [r5, #1]
 8015870:	6923      	ldr	r3, [r4, #16]
 8015872:	2102      	movs	r1, #2
 8015874:	68a2      	ldr	r2, [r4, #8]
 8015876:	3302      	adds	r3, #2
 8015878:	7da0      	ldrb	r0, [r4, #22]
 801587a:	4442      	add	r2, r8
 801587c:	7561      	strb	r1, [r4, #21]
 801587e:	1b9e      	subs	r6, r3, r6
 8015880:	f080 0001 	eor.w	r0, r0, #1
 8015884:	60a2      	str	r2, [r4, #8]
 8015886:	6126      	str	r6, [r4, #16]
 8015888:	b002      	add	sp, #8
 801588a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801588e:	2102      	movs	r1, #2
 8015890:	4620      	mov	r0, r4
 8015892:	f7f9 ff13 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 8015896:	b190      	cbz	r0, 80158be <ucdr_serialize_int16_t+0xae>
 8015898:	7d23      	ldrb	r3, [r4, #20]
 801589a:	2b01      	cmp	r3, #1
 801589c:	68a3      	ldr	r3, [r4, #8]
 801589e:	d014      	beq.n	80158ca <ucdr_serialize_int16_t+0xba>
 80158a0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80158a4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80158a8:	7019      	strb	r1, [r3, #0]
 80158aa:	68a3      	ldr	r3, [r4, #8]
 80158ac:	705a      	strb	r2, [r3, #1]
 80158ae:	2102      	movs	r1, #2
 80158b0:	68a2      	ldr	r2, [r4, #8]
 80158b2:	6923      	ldr	r3, [r4, #16]
 80158b4:	440a      	add	r2, r1
 80158b6:	7561      	strb	r1, [r4, #21]
 80158b8:	440b      	add	r3, r1
 80158ba:	60a2      	str	r2, [r4, #8]
 80158bc:	6123      	str	r3, [r4, #16]
 80158be:	7da0      	ldrb	r0, [r4, #22]
 80158c0:	f080 0001 	eor.w	r0, r0, #1
 80158c4:	b002      	add	sp, #8
 80158c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158ca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80158ce:	801a      	strh	r2, [r3, #0]
 80158d0:	e7ed      	b.n	80158ae <ucdr_serialize_int16_t+0x9e>
 80158d2:	68a2      	ldr	r2, [r4, #8]
 80158d4:	6923      	ldr	r3, [r4, #16]
 80158d6:	7da0      	ldrb	r0, [r4, #22]
 80158d8:	1b92      	subs	r2, r2, r6
 80158da:	1b9b      	subs	r3, r3, r6
 80158dc:	7567      	strb	r7, [r4, #21]
 80158de:	f080 0001 	eor.w	r0, r0, #1
 80158e2:	60a2      	str	r2, [r4, #8]
 80158e4:	6123      	str	r3, [r4, #16]
 80158e6:	b002      	add	sp, #8
 80158e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158ec:	68a3      	ldr	r3, [r4, #8]
 80158ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80158f2:	701a      	strb	r2, [r3, #0]
 80158f4:	e7bc      	b.n	8015870 <ucdr_serialize_int16_t+0x60>
 80158f6:	4628      	mov	r0, r5
 80158f8:	f10d 0506 	add.w	r5, sp, #6
 80158fc:	4632      	mov	r2, r6
 80158fe:	4629      	mov	r1, r5
 8015900:	f005 fe6d 	bl	801b5de <memcpy>
 8015904:	4642      	mov	r2, r8
 8015906:	19a9      	adds	r1, r5, r6
 8015908:	68a0      	ldr	r0, [r4, #8]
 801590a:	f005 fe68 	bl	801b5de <memcpy>
 801590e:	e7af      	b.n	8015870 <ucdr_serialize_int16_t+0x60>

08015910 <ucdr_deserialize_int16_t>:
 8015910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015914:	4604      	mov	r4, r0
 8015916:	460d      	mov	r5, r1
 8015918:	2102      	movs	r1, #2
 801591a:	f7f9 ff23 	bl	800f764 <ucdr_buffer_alignment>
 801591e:	4601      	mov	r1, r0
 8015920:	4620      	mov	r0, r4
 8015922:	f894 8015 	ldrb.w	r8, [r4, #21]
 8015926:	f7f9 ff65 	bl	800f7f4 <ucdr_advance_buffer>
 801592a:	2102      	movs	r1, #2
 801592c:	4620      	mov	r0, r4
 801592e:	f7f9 feb9 	bl	800f6a4 <ucdr_check_buffer_available_for>
 8015932:	bb60      	cbnz	r0, 801598e <ucdr_deserialize_int16_t+0x7e>
 8015934:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8015938:	42be      	cmp	r6, r7
 801593a:	d923      	bls.n	8015984 <ucdr_deserialize_int16_t+0x74>
 801593c:	6923      	ldr	r3, [r4, #16]
 801593e:	4620      	mov	r0, r4
 8015940:	60a6      	str	r6, [r4, #8]
 8015942:	1bf6      	subs	r6, r6, r7
 8015944:	4433      	add	r3, r6
 8015946:	f1c6 0902 	rsb	r9, r6, #2
 801594a:	6123      	str	r3, [r4, #16]
 801594c:	4649      	mov	r1, r9
 801594e:	f7f9 feb5 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 8015952:	2800      	cmp	r0, #0
 8015954:	d034      	beq.n	80159c0 <ucdr_deserialize_int16_t+0xb0>
 8015956:	7d23      	ldrb	r3, [r4, #20]
 8015958:	2b01      	cmp	r3, #1
 801595a:	d042      	beq.n	80159e2 <ucdr_deserialize_int16_t+0xd2>
 801595c:	787b      	ldrb	r3, [r7, #1]
 801595e:	702b      	strb	r3, [r5, #0]
 8015960:	2e00      	cmp	r6, #0
 8015962:	d03a      	beq.n	80159da <ucdr_deserialize_int16_t+0xca>
 8015964:	783b      	ldrb	r3, [r7, #0]
 8015966:	706b      	strb	r3, [r5, #1]
 8015968:	6923      	ldr	r3, [r4, #16]
 801596a:	2102      	movs	r1, #2
 801596c:	68a2      	ldr	r2, [r4, #8]
 801596e:	3302      	adds	r3, #2
 8015970:	7da0      	ldrb	r0, [r4, #22]
 8015972:	444a      	add	r2, r9
 8015974:	7561      	strb	r1, [r4, #21]
 8015976:	1b9b      	subs	r3, r3, r6
 8015978:	f080 0001 	eor.w	r0, r0, #1
 801597c:	60a2      	str	r2, [r4, #8]
 801597e:	6123      	str	r3, [r4, #16]
 8015980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015984:	2102      	movs	r1, #2
 8015986:	4620      	mov	r0, r4
 8015988:	f7f9 fe98 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 801598c:	b180      	cbz	r0, 80159b0 <ucdr_deserialize_int16_t+0xa0>
 801598e:	7d23      	ldrb	r3, [r4, #20]
 8015990:	2b01      	cmp	r3, #1
 8015992:	68a3      	ldr	r3, [r4, #8]
 8015994:	d011      	beq.n	80159ba <ucdr_deserialize_int16_t+0xaa>
 8015996:	785b      	ldrb	r3, [r3, #1]
 8015998:	702b      	strb	r3, [r5, #0]
 801599a:	68a3      	ldr	r3, [r4, #8]
 801599c:	781b      	ldrb	r3, [r3, #0]
 801599e:	706b      	strb	r3, [r5, #1]
 80159a0:	2102      	movs	r1, #2
 80159a2:	68a2      	ldr	r2, [r4, #8]
 80159a4:	6923      	ldr	r3, [r4, #16]
 80159a6:	440a      	add	r2, r1
 80159a8:	7561      	strb	r1, [r4, #21]
 80159aa:	440b      	add	r3, r1
 80159ac:	60a2      	str	r2, [r4, #8]
 80159ae:	6123      	str	r3, [r4, #16]
 80159b0:	7da0      	ldrb	r0, [r4, #22]
 80159b2:	f080 0001 	eor.w	r0, r0, #1
 80159b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159ba:	881b      	ldrh	r3, [r3, #0]
 80159bc:	802b      	strh	r3, [r5, #0]
 80159be:	e7ef      	b.n	80159a0 <ucdr_deserialize_int16_t+0x90>
 80159c0:	68a2      	ldr	r2, [r4, #8]
 80159c2:	6923      	ldr	r3, [r4, #16]
 80159c4:	1b92      	subs	r2, r2, r6
 80159c6:	7da0      	ldrb	r0, [r4, #22]
 80159c8:	1b9b      	subs	r3, r3, r6
 80159ca:	f884 8015 	strb.w	r8, [r4, #21]
 80159ce:	f080 0001 	eor.w	r0, r0, #1
 80159d2:	60a2      	str	r2, [r4, #8]
 80159d4:	6123      	str	r3, [r4, #16]
 80159d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159da:	68a3      	ldr	r3, [r4, #8]
 80159dc:	781b      	ldrb	r3, [r3, #0]
 80159de:	706b      	strb	r3, [r5, #1]
 80159e0:	e7c2      	b.n	8015968 <ucdr_deserialize_int16_t+0x58>
 80159e2:	4639      	mov	r1, r7
 80159e4:	4632      	mov	r2, r6
 80159e6:	4628      	mov	r0, r5
 80159e8:	f005 fdf9 	bl	801b5de <memcpy>
 80159ec:	464a      	mov	r2, r9
 80159ee:	19a8      	adds	r0, r5, r6
 80159f0:	68a1      	ldr	r1, [r4, #8]
 80159f2:	f005 fdf4 	bl	801b5de <memcpy>
 80159f6:	e7b7      	b.n	8015968 <ucdr_deserialize_int16_t+0x58>

080159f8 <ucdr_serialize_int32_t>:
 80159f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159fc:	b082      	sub	sp, #8
 80159fe:	4604      	mov	r4, r0
 8015a00:	9101      	str	r1, [sp, #4]
 8015a02:	2104      	movs	r1, #4
 8015a04:	f7f9 feae 	bl	800f764 <ucdr_buffer_alignment>
 8015a08:	4601      	mov	r1, r0
 8015a0a:	4620      	mov	r0, r4
 8015a0c:	7d67      	ldrb	r7, [r4, #21]
 8015a0e:	f7f9 fef1 	bl	800f7f4 <ucdr_advance_buffer>
 8015a12:	2104      	movs	r1, #4
 8015a14:	4620      	mov	r0, r4
 8015a16:	f7f9 fe45 	bl	800f6a4 <ucdr_check_buffer_available_for>
 8015a1a:	2800      	cmp	r0, #0
 8015a1c:	d139      	bne.n	8015a92 <ucdr_serialize_int32_t+0x9a>
 8015a1e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8015a22:	42ab      	cmp	r3, r5
 8015a24:	d930      	bls.n	8015a88 <ucdr_serialize_int32_t+0x90>
 8015a26:	1b5e      	subs	r6, r3, r5
 8015a28:	60a3      	str	r3, [r4, #8]
 8015a2a:	6923      	ldr	r3, [r4, #16]
 8015a2c:	4620      	mov	r0, r4
 8015a2e:	f1c6 0804 	rsb	r8, r6, #4
 8015a32:	4433      	add	r3, r6
 8015a34:	4641      	mov	r1, r8
 8015a36:	6123      	str	r3, [r4, #16]
 8015a38:	f7f9 fe40 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 8015a3c:	2800      	cmp	r0, #0
 8015a3e:	d04c      	beq.n	8015ada <ucdr_serialize_int32_t+0xe2>
 8015a40:	7d23      	ldrb	r3, [r4, #20]
 8015a42:	2b01      	cmp	r3, #1
 8015a44:	d063      	beq.n	8015b0e <ucdr_serialize_int32_t+0x116>
 8015a46:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015a4a:	702b      	strb	r3, [r5, #0]
 8015a4c:	2e00      	cmp	r6, #0
 8015a4e:	d051      	beq.n	8015af4 <ucdr_serialize_int32_t+0xfc>
 8015a50:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8015a54:	2e01      	cmp	r6, #1
 8015a56:	706b      	strb	r3, [r5, #1]
 8015a58:	d050      	beq.n	8015afc <ucdr_serialize_int32_t+0x104>
 8015a5a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8015a5e:	2e02      	cmp	r6, #2
 8015a60:	70ab      	strb	r3, [r5, #2]
 8015a62:	d04f      	beq.n	8015b04 <ucdr_serialize_int32_t+0x10c>
 8015a64:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8015a68:	70eb      	strb	r3, [r5, #3]
 8015a6a:	6923      	ldr	r3, [r4, #16]
 8015a6c:	2104      	movs	r1, #4
 8015a6e:	68a2      	ldr	r2, [r4, #8]
 8015a70:	3304      	adds	r3, #4
 8015a72:	7da0      	ldrb	r0, [r4, #22]
 8015a74:	4442      	add	r2, r8
 8015a76:	7561      	strb	r1, [r4, #21]
 8015a78:	1b9e      	subs	r6, r3, r6
 8015a7a:	f080 0001 	eor.w	r0, r0, #1
 8015a7e:	60a2      	str	r2, [r4, #8]
 8015a80:	6126      	str	r6, [r4, #16]
 8015a82:	b002      	add	sp, #8
 8015a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a88:	2104      	movs	r1, #4
 8015a8a:	4620      	mov	r0, r4
 8015a8c:	f7f9 fe16 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 8015a90:	b1d0      	cbz	r0, 8015ac8 <ucdr_serialize_int32_t+0xd0>
 8015a92:	7d23      	ldrb	r3, [r4, #20]
 8015a94:	2b01      	cmp	r3, #1
 8015a96:	68a3      	ldr	r3, [r4, #8]
 8015a98:	d01c      	beq.n	8015ad4 <ucdr_serialize_int32_t+0xdc>
 8015a9a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8015a9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8015aa2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8015aa6:	7018      	strb	r0, [r3, #0]
 8015aa8:	68a3      	ldr	r3, [r4, #8]
 8015aaa:	705a      	strb	r2, [r3, #1]
 8015aac:	68a3      	ldr	r3, [r4, #8]
 8015aae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8015ab2:	7099      	strb	r1, [r3, #2]
 8015ab4:	68a3      	ldr	r3, [r4, #8]
 8015ab6:	70da      	strb	r2, [r3, #3]
 8015ab8:	2104      	movs	r1, #4
 8015aba:	68a2      	ldr	r2, [r4, #8]
 8015abc:	6923      	ldr	r3, [r4, #16]
 8015abe:	440a      	add	r2, r1
 8015ac0:	7561      	strb	r1, [r4, #21]
 8015ac2:	440b      	add	r3, r1
 8015ac4:	60a2      	str	r2, [r4, #8]
 8015ac6:	6123      	str	r3, [r4, #16]
 8015ac8:	7da0      	ldrb	r0, [r4, #22]
 8015aca:	f080 0001 	eor.w	r0, r0, #1
 8015ace:	b002      	add	sp, #8
 8015ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ad4:	9a01      	ldr	r2, [sp, #4]
 8015ad6:	601a      	str	r2, [r3, #0]
 8015ad8:	e7ee      	b.n	8015ab8 <ucdr_serialize_int32_t+0xc0>
 8015ada:	68a2      	ldr	r2, [r4, #8]
 8015adc:	6923      	ldr	r3, [r4, #16]
 8015ade:	7da0      	ldrb	r0, [r4, #22]
 8015ae0:	1b92      	subs	r2, r2, r6
 8015ae2:	1b9b      	subs	r3, r3, r6
 8015ae4:	7567      	strb	r7, [r4, #21]
 8015ae6:	f080 0001 	eor.w	r0, r0, #1
 8015aea:	60a2      	str	r2, [r4, #8]
 8015aec:	6123      	str	r3, [r4, #16]
 8015aee:	b002      	add	sp, #8
 8015af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015af4:	68a3      	ldr	r3, [r4, #8]
 8015af6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8015afa:	701a      	strb	r2, [r3, #0]
 8015afc:	68a3      	ldr	r3, [r4, #8]
 8015afe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8015b02:	701a      	strb	r2, [r3, #0]
 8015b04:	68a3      	ldr	r3, [r4, #8]
 8015b06:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8015b0a:	701a      	strb	r2, [r3, #0]
 8015b0c:	e7ad      	b.n	8015a6a <ucdr_serialize_int32_t+0x72>
 8015b0e:	4628      	mov	r0, r5
 8015b10:	ad01      	add	r5, sp, #4
 8015b12:	4632      	mov	r2, r6
 8015b14:	4629      	mov	r1, r5
 8015b16:	f005 fd62 	bl	801b5de <memcpy>
 8015b1a:	4642      	mov	r2, r8
 8015b1c:	19a9      	adds	r1, r5, r6
 8015b1e:	68a0      	ldr	r0, [r4, #8]
 8015b20:	f005 fd5d 	bl	801b5de <memcpy>
 8015b24:	e7a1      	b.n	8015a6a <ucdr_serialize_int32_t+0x72>
 8015b26:	bf00      	nop

08015b28 <ucdr_deserialize_int32_t>:
 8015b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b2c:	4604      	mov	r4, r0
 8015b2e:	460d      	mov	r5, r1
 8015b30:	2104      	movs	r1, #4
 8015b32:	f7f9 fe17 	bl	800f764 <ucdr_buffer_alignment>
 8015b36:	4601      	mov	r1, r0
 8015b38:	4620      	mov	r0, r4
 8015b3a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8015b3e:	f7f9 fe59 	bl	800f7f4 <ucdr_advance_buffer>
 8015b42:	2104      	movs	r1, #4
 8015b44:	4620      	mov	r0, r4
 8015b46:	f7f9 fdad 	bl	800f6a4 <ucdr_check_buffer_available_for>
 8015b4a:	2800      	cmp	r0, #0
 8015b4c:	d138      	bne.n	8015bc0 <ucdr_deserialize_int32_t+0x98>
 8015b4e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8015b52:	42b7      	cmp	r7, r6
 8015b54:	d92f      	bls.n	8015bb6 <ucdr_deserialize_int32_t+0x8e>
 8015b56:	6923      	ldr	r3, [r4, #16]
 8015b58:	4620      	mov	r0, r4
 8015b5a:	60a7      	str	r7, [r4, #8]
 8015b5c:	1bbf      	subs	r7, r7, r6
 8015b5e:	443b      	add	r3, r7
 8015b60:	f1c7 0904 	rsb	r9, r7, #4
 8015b64:	6123      	str	r3, [r4, #16]
 8015b66:	4649      	mov	r1, r9
 8015b68:	f7f9 fda8 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 8015b6c:	2800      	cmp	r0, #0
 8015b6e:	d046      	beq.n	8015bfe <ucdr_deserialize_int32_t+0xd6>
 8015b70:	7d23      	ldrb	r3, [r4, #20]
 8015b72:	2b01      	cmp	r3, #1
 8015b74:	d05c      	beq.n	8015c30 <ucdr_deserialize_int32_t+0x108>
 8015b76:	78f3      	ldrb	r3, [r6, #3]
 8015b78:	702b      	strb	r3, [r5, #0]
 8015b7a:	2f00      	cmp	r7, #0
 8015b7c:	d04c      	beq.n	8015c18 <ucdr_deserialize_int32_t+0xf0>
 8015b7e:	78b3      	ldrb	r3, [r6, #2]
 8015b80:	2f01      	cmp	r7, #1
 8015b82:	706b      	strb	r3, [r5, #1]
 8015b84:	f105 0302 	add.w	r3, r5, #2
 8015b88:	d04a      	beq.n	8015c20 <ucdr_deserialize_int32_t+0xf8>
 8015b8a:	7873      	ldrb	r3, [r6, #1]
 8015b8c:	2f02      	cmp	r7, #2
 8015b8e:	70ab      	strb	r3, [r5, #2]
 8015b90:	f105 0303 	add.w	r3, r5, #3
 8015b94:	d048      	beq.n	8015c28 <ucdr_deserialize_int32_t+0x100>
 8015b96:	7833      	ldrb	r3, [r6, #0]
 8015b98:	70eb      	strb	r3, [r5, #3]
 8015b9a:	6923      	ldr	r3, [r4, #16]
 8015b9c:	2104      	movs	r1, #4
 8015b9e:	68a2      	ldr	r2, [r4, #8]
 8015ba0:	3304      	adds	r3, #4
 8015ba2:	7da0      	ldrb	r0, [r4, #22]
 8015ba4:	444a      	add	r2, r9
 8015ba6:	7561      	strb	r1, [r4, #21]
 8015ba8:	1bdb      	subs	r3, r3, r7
 8015baa:	f080 0001 	eor.w	r0, r0, #1
 8015bae:	60a2      	str	r2, [r4, #8]
 8015bb0:	6123      	str	r3, [r4, #16]
 8015bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bb6:	2104      	movs	r1, #4
 8015bb8:	4620      	mov	r0, r4
 8015bba:	f7f9 fd7f 	bl	800f6bc <ucdr_check_final_buffer_behavior>
 8015bbe:	b1b0      	cbz	r0, 8015bee <ucdr_deserialize_int32_t+0xc6>
 8015bc0:	7d23      	ldrb	r3, [r4, #20]
 8015bc2:	2b01      	cmp	r3, #1
 8015bc4:	68a3      	ldr	r3, [r4, #8]
 8015bc6:	d017      	beq.n	8015bf8 <ucdr_deserialize_int32_t+0xd0>
 8015bc8:	78db      	ldrb	r3, [r3, #3]
 8015bca:	702b      	strb	r3, [r5, #0]
 8015bcc:	68a3      	ldr	r3, [r4, #8]
 8015bce:	789b      	ldrb	r3, [r3, #2]
 8015bd0:	706b      	strb	r3, [r5, #1]
 8015bd2:	68a3      	ldr	r3, [r4, #8]
 8015bd4:	785b      	ldrb	r3, [r3, #1]
 8015bd6:	70ab      	strb	r3, [r5, #2]
 8015bd8:	68a3      	ldr	r3, [r4, #8]
 8015bda:	781b      	ldrb	r3, [r3, #0]
 8015bdc:	70eb      	strb	r3, [r5, #3]
 8015bde:	2104      	movs	r1, #4
 8015be0:	68a2      	ldr	r2, [r4, #8]
 8015be2:	6923      	ldr	r3, [r4, #16]
 8015be4:	440a      	add	r2, r1
 8015be6:	7561      	strb	r1, [r4, #21]
 8015be8:	440b      	add	r3, r1
 8015bea:	60a2      	str	r2, [r4, #8]
 8015bec:	6123      	str	r3, [r4, #16]
 8015bee:	7da0      	ldrb	r0, [r4, #22]
 8015bf0:	f080 0001 	eor.w	r0, r0, #1
 8015bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	602b      	str	r3, [r5, #0]
 8015bfc:	e7ef      	b.n	8015bde <ucdr_deserialize_int32_t+0xb6>
 8015bfe:	68a2      	ldr	r2, [r4, #8]
 8015c00:	6923      	ldr	r3, [r4, #16]
 8015c02:	1bd2      	subs	r2, r2, r7
 8015c04:	7da0      	ldrb	r0, [r4, #22]
 8015c06:	1bdb      	subs	r3, r3, r7
 8015c08:	f884 8015 	strb.w	r8, [r4, #21]
 8015c0c:	f080 0001 	eor.w	r0, r0, #1
 8015c10:	60a2      	str	r2, [r4, #8]
 8015c12:	6123      	str	r3, [r4, #16]
 8015c14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c18:	68a3      	ldr	r3, [r4, #8]
 8015c1a:	789b      	ldrb	r3, [r3, #2]
 8015c1c:	706b      	strb	r3, [r5, #1]
 8015c1e:	1cab      	adds	r3, r5, #2
 8015c20:	68a2      	ldr	r2, [r4, #8]
 8015c22:	7852      	ldrb	r2, [r2, #1]
 8015c24:	f803 2b01 	strb.w	r2, [r3], #1
 8015c28:	68a2      	ldr	r2, [r4, #8]
 8015c2a:	7812      	ldrb	r2, [r2, #0]
 8015c2c:	701a      	strb	r2, [r3, #0]
 8015c2e:	e7b4      	b.n	8015b9a <ucdr_deserialize_int32_t+0x72>
 8015c30:	4631      	mov	r1, r6
 8015c32:	463a      	mov	r2, r7
 8015c34:	4628      	mov	r0, r5
 8015c36:	f005 fcd2 	bl	801b5de <memcpy>
 8015c3a:	464a      	mov	r2, r9
 8015c3c:	19e8      	adds	r0, r5, r7
 8015c3e:	68a1      	ldr	r1, [r4, #8]
 8015c40:	f005 fccd 	bl	801b5de <memcpy>
 8015c44:	e7a9      	b.n	8015b9a <ucdr_deserialize_int32_t+0x72>
 8015c46:	bf00      	nop

08015c48 <uxr_buffer_delete_entity>:
 8015c48:	b510      	push	{r4, lr}
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	b08e      	sub	sp, #56	@ 0x38
 8015c4e:	4604      	mov	r4, r0
 8015c50:	9103      	str	r1, [sp, #12]
 8015c52:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8015c56:	2303      	movs	r3, #3
 8015c58:	2204      	movs	r2, #4
 8015c5a:	9300      	str	r3, [sp, #0]
 8015c5c:	ab06      	add	r3, sp, #24
 8015c5e:	f001 fa97 	bl	8017190 <uxr_prepare_stream_to_write_submessage>
 8015c62:	b918      	cbnz	r0, 8015c6c <uxr_buffer_delete_entity+0x24>
 8015c64:	4604      	mov	r4, r0
 8015c66:	4620      	mov	r0, r4
 8015c68:	b00e      	add	sp, #56	@ 0x38
 8015c6a:	bd10      	pop	{r4, pc}
 8015c6c:	9902      	ldr	r1, [sp, #8]
 8015c6e:	aa05      	add	r2, sp, #20
 8015c70:	4620      	mov	r0, r4
 8015c72:	f001 fbc9 	bl	8017408 <uxr_init_base_object_request>
 8015c76:	4604      	mov	r4, r0
 8015c78:	a905      	add	r1, sp, #20
 8015c7a:	a806      	add	r0, sp, #24
 8015c7c:	f003 f86a 	bl	8018d54 <uxr_serialize_DELETE_Payload>
 8015c80:	4620      	mov	r0, r4
 8015c82:	b00e      	add	sp, #56	@ 0x38
 8015c84:	bd10      	pop	{r4, pc}
 8015c86:	bf00      	nop

08015c88 <uxr_common_create_entity>:
 8015c88:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8015c8c:	b510      	push	{r4, lr}
 8015c8e:	f1bc 0f01 	cmp.w	ip, #1
 8015c92:	b08c      	sub	sp, #48	@ 0x30
 8015c94:	4604      	mov	r4, r0
 8015c96:	9202      	str	r2, [sp, #8]
 8015c98:	bf0c      	ite	eq
 8015c9a:	f003 0201 	andeq.w	r2, r3, #1
 8015c9e:	2200      	movne	r2, #0
 8015ca0:	330e      	adds	r3, #14
 8015ca2:	9103      	str	r1, [sp, #12]
 8015ca4:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8015ca8:	441a      	add	r2, r3
 8015caa:	ab04      	add	r3, sp, #16
 8015cac:	9101      	str	r1, [sp, #4]
 8015cae:	2101      	movs	r1, #1
 8015cb0:	b292      	uxth	r2, r2
 8015cb2:	9100      	str	r1, [sp, #0]
 8015cb4:	9903      	ldr	r1, [sp, #12]
 8015cb6:	f001 fa6b 	bl	8017190 <uxr_prepare_stream_to_write_submessage>
 8015cba:	b918      	cbnz	r0, 8015cc4 <uxr_common_create_entity+0x3c>
 8015cbc:	4604      	mov	r4, r0
 8015cbe:	4620      	mov	r0, r4
 8015cc0:	b00c      	add	sp, #48	@ 0x30
 8015cc2:	bd10      	pop	{r4, pc}
 8015cc4:	9902      	ldr	r1, [sp, #8]
 8015cc6:	4620      	mov	r0, r4
 8015cc8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015cca:	f001 fb9d 	bl	8017408 <uxr_init_base_object_request>
 8015cce:	4604      	mov	r4, r0
 8015cd0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8015cd2:	a804      	add	r0, sp, #16
 8015cd4:	f002 ff98 	bl	8018c08 <uxr_serialize_CREATE_Payload>
 8015cd8:	4620      	mov	r0, r4
 8015cda:	b00c      	add	sp, #48	@ 0x30
 8015cdc:	bd10      	pop	{r4, pc}
 8015cde:	bf00      	nop

08015ce0 <uxr_buffer_create_participant_bin>:
 8015ce0:	b570      	push	{r4, r5, r6, lr}
 8015ce2:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8015ce6:	4605      	mov	r5, r0
 8015ce8:	ac11      	add	r4, sp, #68	@ 0x44
 8015cea:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8015cee:	2303      	movs	r3, #3
 8015cf0:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8015cf4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8015cf8:	7223      	strb	r3, [r4, #8]
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	2201      	movs	r2, #1
 8015cfe:	f88d 3014 	strb.w	r3, [sp, #20]
 8015d02:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8015d04:	7122      	strb	r2, [r4, #4]
 8015d06:	b1cb      	cbz	r3, 8015d3c <uxr_buffer_create_participant_bin+0x5c>
 8015d08:	f88d 201c 	strb.w	r2, [sp, #28]
 8015d0c:	9308      	str	r3, [sp, #32]
 8015d0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015d12:	a915      	add	r1, sp, #84	@ 0x54
 8015d14:	a809      	add	r0, sp, #36	@ 0x24
 8015d16:	f7f9 fd19 	bl	800f74c <ucdr_init_buffer>
 8015d1a:	a905      	add	r1, sp, #20
 8015d1c:	a809      	add	r0, sp, #36	@ 0x24
 8015d1e:	f002 fc39 	bl	8018594 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8015d22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015d24:	9600      	str	r6, [sp, #0]
 8015d26:	4628      	mov	r0, r5
 8015d28:	9401      	str	r4, [sp, #4]
 8015d2a:	60e3      	str	r3, [r4, #12]
 8015d2c:	b29b      	uxth	r3, r3
 8015d2e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015d32:	f7ff ffa9 	bl	8015c88 <uxr_common_create_entity>
 8015d36:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8015d3a:	bd70      	pop	{r4, r5, r6, pc}
 8015d3c:	f88d 301c 	strb.w	r3, [sp, #28]
 8015d40:	e7e5      	b.n	8015d0e <uxr_buffer_create_participant_bin+0x2e>
 8015d42:	bf00      	nop

08015d44 <uxr_buffer_create_topic_bin>:
 8015d44:	b570      	push	{r4, r5, r6, lr}
 8015d46:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8015d4a:	4605      	mov	r5, r0
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	9105      	str	r1, [sp, #20]
 8015d50:	a997      	add	r1, sp, #604	@ 0x25c
 8015d52:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8015d56:	ac13      	add	r4, sp, #76	@ 0x4c
 8015d58:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8015d5c:	2302      	movs	r3, #2
 8015d5e:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8015d62:	f000 f9ad 	bl	80160c0 <uxr_object_id_to_raw>
 8015d66:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8015d68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015d6c:	a917      	add	r1, sp, #92	@ 0x5c
 8015d6e:	a80b      	add	r0, sp, #44	@ 0x2c
 8015d70:	9306      	str	r3, [sp, #24]
 8015d72:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8015d74:	930a      	str	r3, [sp, #40]	@ 0x28
 8015d76:	2303      	movs	r3, #3
 8015d78:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8015d7c:	2301      	movs	r3, #1
 8015d7e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8015d82:	2300      	movs	r3, #0
 8015d84:	f88d 301c 	strb.w	r3, [sp, #28]
 8015d88:	f7f9 fce0 	bl	800f74c <ucdr_init_buffer>
 8015d8c:	a906      	add	r1, sp, #24
 8015d8e:	a80b      	add	r0, sp, #44	@ 0x2c
 8015d90:	f002 fc22 	bl	80185d8 <uxr_serialize_OBJK_Topic_Binary>
 8015d94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015d96:	4628      	mov	r0, r5
 8015d98:	9600      	str	r6, [sp, #0]
 8015d9a:	9316      	str	r3, [sp, #88]	@ 0x58
 8015d9c:	b29b      	uxth	r3, r3
 8015d9e:	9401      	str	r4, [sp, #4]
 8015da0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8015da4:	f7ff ff70 	bl	8015c88 <uxr_common_create_entity>
 8015da8:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8015dac:	bd70      	pop	{r4, r5, r6, pc}
 8015dae:	bf00      	nop

08015db0 <uxr_buffer_create_subscriber_bin>:
 8015db0:	b570      	push	{r4, r5, r6, lr}
 8015db2:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 8015db6:	4605      	mov	r5, r0
 8015db8:	4618      	mov	r0, r3
 8015dba:	9105      	str	r1, [sp, #20]
 8015dbc:	a992      	add	r1, sp, #584	@ 0x248
 8015dbe:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8015dc2:	ac0e      	add	r4, sp, #56	@ 0x38
 8015dc4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8015dc8:	2304      	movs	r3, #4
 8015dca:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8015dce:	f000 f977 	bl	80160c0 <uxr_object_id_to_raw>
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015dd8:	a912      	add	r1, sp, #72	@ 0x48
 8015dda:	a806      	add	r0, sp, #24
 8015ddc:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8015de0:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8015de4:	2303      	movs	r3, #3
 8015de6:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8015dea:	f7f9 fcaf 	bl	800f74c <ucdr_init_buffer>
 8015dee:	a993      	add	r1, sp, #588	@ 0x24c
 8015df0:	a806      	add	r0, sp, #24
 8015df2:	f002 fca5 	bl	8018740 <uxr_serialize_OBJK_Subscriber_Binary>
 8015df6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015df8:	4628      	mov	r0, r5
 8015dfa:	9600      	str	r6, [sp, #0]
 8015dfc:	9311      	str	r3, [sp, #68]	@ 0x44
 8015dfe:	b29b      	uxth	r3, r3
 8015e00:	9401      	str	r4, [sp, #4]
 8015e02:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8015e06:	f7ff ff3f 	bl	8015c88 <uxr_common_create_entity>
 8015e0a:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8015e0e:	bd70      	pop	{r4, r5, r6, pc}

08015e10 <uxr_buffer_create_datareader_bin>:
 8015e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e14:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8015e18:	4606      	mov	r6, r0
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	2703      	movs	r7, #3
 8015e1e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8015e20:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 8015e24:	9105      	str	r1, [sp, #20]
 8015e26:	a9a3      	add	r1, sp, #652	@ 0x28c
 8015e28:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8015e2c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8015e30:	2306      	movs	r3, #6
 8015e32:	7123      	strb	r3, [r4, #4]
 8015e34:	f000 f944 	bl	80160c0 <uxr_object_id_to_raw>
 8015e38:	a90e      	add	r1, sp, #56	@ 0x38
 8015e3a:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8015e3c:	7227      	strb	r7, [r4, #8]
 8015e3e:	f000 f93f 	bl	80160c0 <uxr_object_id_to_raw>
 8015e42:	2300      	movs	r3, #0
 8015e44:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8015e48:	3d00      	subs	r5, #0
 8015e4a:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 8015e4e:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8015e52:	bf18      	it	ne
 8015e54:	2501      	movne	r5, #1
 8015e56:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8015e5a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8015e5e:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8015e62:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8015e66:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8015e6a:	2301      	movs	r3, #1
 8015e6c:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8015e70:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8015e74:	bb8a      	cbnz	r2, 8015eda <uxr_buffer_create_datareader_bin+0xca>
 8015e76:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8015e7a:	f04f 0c13 	mov.w	ip, #19
 8015e7e:	250b      	movs	r5, #11
 8015e80:	2221      	movs	r2, #33	@ 0x21
 8015e82:	2111      	movs	r1, #17
 8015e84:	2009      	movs	r0, #9
 8015e86:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8015e8a:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 8015e8e:	b923      	cbnz	r3, 8015e9a <uxr_buffer_create_datareader_bin+0x8a>
 8015e90:	4672      	mov	r2, lr
 8015e92:	4661      	mov	r1, ip
 8015e94:	4628      	mov	r0, r5
 8015e96:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8015e9a:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 8015e9e:	2b01      	cmp	r3, #1
 8015ea0:	d025      	beq.n	8015eee <uxr_buffer_create_datareader_bin+0xde>
 8015ea2:	2b03      	cmp	r3, #3
 8015ea4:	d029      	beq.n	8015efa <uxr_buffer_create_datareader_bin+0xea>
 8015ea6:	b32b      	cbz	r3, 8015ef4 <uxr_buffer_create_datareader_bin+0xe4>
 8015ea8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015eac:	a923      	add	r1, sp, #140	@ 0x8c
 8015eae:	a806      	add	r0, sp, #24
 8015eb0:	f7f9 fc4c 	bl	800f74c <ucdr_init_buffer>
 8015eb4:	a90e      	add	r1, sp, #56	@ 0x38
 8015eb6:	a806      	add	r0, sp, #24
 8015eb8:	f002 fcb8 	bl	801882c <uxr_serialize_OBJK_DataReader_Binary>
 8015ebc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015ebe:	f8cd 8000 	str.w	r8, [sp]
 8015ec2:	4630      	mov	r0, r6
 8015ec4:	9401      	str	r4, [sp, #4]
 8015ec6:	60e3      	str	r3, [r4, #12]
 8015ec8:	b29b      	uxth	r3, r3
 8015eca:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8015ece:	f7ff fedb 	bl	8015c88 <uxr_common_create_entity>
 8015ed2:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8015ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015eda:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8015ede:	f04f 0c12 	mov.w	ip, #18
 8015ee2:	250a      	movs	r5, #10
 8015ee4:	2220      	movs	r2, #32
 8015ee6:	2110      	movs	r1, #16
 8015ee8:	2008      	movs	r0, #8
 8015eea:	2702      	movs	r7, #2
 8015eec:	e7cd      	b.n	8015e8a <uxr_buffer_create_datareader_bin+0x7a>
 8015eee:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8015ef2:	e7d9      	b.n	8015ea8 <uxr_buffer_create_datareader_bin+0x98>
 8015ef4:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8015ef8:	e7d6      	b.n	8015ea8 <uxr_buffer_create_datareader_bin+0x98>
 8015efa:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8015efe:	e7d3      	b.n	8015ea8 <uxr_buffer_create_datareader_bin+0x98>

08015f00 <get_custom_error>:
 8015f00:	4b01      	ldr	r3, [pc, #4]	@ (8015f08 <get_custom_error+0x8>)
 8015f02:	7818      	ldrb	r0, [r3, #0]
 8015f04:	4770      	bx	lr
 8015f06:	bf00      	nop
 8015f08:	2406865c 	.word	0x2406865c

08015f0c <recv_custom_msg>:
 8015f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f10:	4693      	mov	fp, r2
 8015f12:	b089      	sub	sp, #36	@ 0x24
 8015f14:	2200      	movs	r2, #0
 8015f16:	4604      	mov	r4, r0
 8015f18:	468a      	mov	sl, r1
 8015f1a:	9305      	str	r3, [sp, #20]
 8015f1c:	f88d 201e 	strb.w	r2, [sp, #30]
 8015f20:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8015f24:	b322      	cbz	r2, 8015f70 <recv_custom_msg+0x64>
 8015f26:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8015f2a:	f10d 081f 	add.w	r8, sp, #31
 8015f2e:	af05      	add	r7, sp, #20
 8015f30:	f10d 061e 	add.w	r6, sp, #30
 8015f34:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8015f38:	e002      	b.n	8015f40 <recv_custom_msg+0x34>
 8015f3a:	9b05      	ldr	r3, [sp, #20]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	dd0f      	ble.n	8015f60 <recv_custom_msg+0x54>
 8015f40:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8015f44:	4623      	mov	r3, r4
 8015f46:	4622      	mov	r2, r4
 8015f48:	4648      	mov	r0, r9
 8015f4a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8015f4e:	e9cd 5600 	strd	r5, r6, [sp]
 8015f52:	f001 fc6f 	bl	8017834 <uxr_read_framed_msg>
 8015f56:	2800      	cmp	r0, #0
 8015f58:	d0ef      	beq.n	8015f3a <recv_custom_msg+0x2e>
 8015f5a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015f5e:	b1b3      	cbz	r3, 8015f8e <recv_custom_msg+0x82>
 8015f60:	4b0f      	ldr	r3, [pc, #60]	@ (8015fa0 <recv_custom_msg+0x94>)
 8015f62:	2000      	movs	r0, #0
 8015f64:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8015f68:	701a      	strb	r2, [r3, #0]
 8015f6a:	b009      	add	sp, #36	@ 0x24
 8015f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f70:	f10d 021f 	add.w	r2, sp, #31
 8015f74:	4601      	mov	r1, r0
 8015f76:	9200      	str	r2, [sp, #0]
 8015f78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015f7c:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8015f80:	47a8      	blx	r5
 8015f82:	2800      	cmp	r0, #0
 8015f84:	d0ec      	beq.n	8015f60 <recv_custom_msg+0x54>
 8015f86:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d1e8      	bne.n	8015f60 <recv_custom_msg+0x54>
 8015f8e:	f8cb 0000 	str.w	r0, [fp]
 8015f92:	2001      	movs	r0, #1
 8015f94:	f8ca 4000 	str.w	r4, [sl]
 8015f98:	b009      	add	sp, #36	@ 0x24
 8015f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f9e:	bf00      	nop
 8015fa0:	2406865c 	.word	0x2406865c

08015fa4 <send_custom_msg>:
 8015fa4:	b530      	push	{r4, r5, lr}
 8015fa6:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8015faa:	b087      	sub	sp, #28
 8015fac:	4614      	mov	r4, r2
 8015fae:	b995      	cbnz	r5, 8015fd6 <send_custom_msg+0x32>
 8015fb0:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 8015fb4:	f10d 0317 	add.w	r3, sp, #23
 8015fb8:	47a8      	blx	r5
 8015fba:	1e03      	subs	r3, r0, #0
 8015fbc:	bf18      	it	ne
 8015fbe:	2301      	movne	r3, #1
 8015fc0:	42a0      	cmp	r0, r4
 8015fc2:	bf18      	it	ne
 8015fc4:	2300      	movne	r3, #0
 8015fc6:	b91b      	cbnz	r3, 8015fd0 <send_custom_msg+0x2c>
 8015fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8015ff4 <send_custom_msg+0x50>)
 8015fca:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8015fce:	7011      	strb	r1, [r2, #0]
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	b007      	add	sp, #28
 8015fd4:	bd30      	pop	{r4, r5, pc}
 8015fd6:	460b      	mov	r3, r1
 8015fd8:	2200      	movs	r2, #0
 8015fda:	f10d 0117 	add.w	r1, sp, #23
 8015fde:	9400      	str	r4, [sp, #0]
 8015fe0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8015fe4:	4602      	mov	r2, r0
 8015fe6:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8015fea:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8015fee:	f001 fa43 	bl	8017478 <uxr_write_framed_msg>
 8015ff2:	e7e2      	b.n	8015fba <send_custom_msg+0x16>
 8015ff4:	2406865c 	.word	0x2406865c

08015ff8 <uxr_set_custom_transport_callbacks>:
 8015ff8:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8015ffc:	9901      	ldr	r1, [sp, #4]
 8015ffe:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8016002:	9b00      	ldr	r3, [sp, #0]
 8016004:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 8016008:	4770      	bx	lr
 801600a:	bf00      	nop

0801600c <uxr_init_custom_transport>:
 801600c:	b538      	push	{r3, r4, r5, lr}
 801600e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8016012:	b303      	cbz	r3, 8016056 <uxr_init_custom_transport+0x4a>
 8016014:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8016018:	4604      	mov	r4, r0
 801601a:	b1e2      	cbz	r2, 8016056 <uxr_init_custom_transport+0x4a>
 801601c:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8016020:	b1ca      	cbz	r2, 8016056 <uxr_init_custom_transport+0x4a>
 8016022:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8016026:	b1b2      	cbz	r2, 8016056 <uxr_init_custom_transport+0x4a>
 8016028:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 801602c:	4798      	blx	r3
 801602e:	4605      	mov	r5, r0
 8016030:	b188      	cbz	r0, 8016056 <uxr_init_custom_transport+0x4a>
 8016032:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8016036:	b98b      	cbnz	r3, 801605c <uxr_init_custom_transport+0x50>
 8016038:	4b0b      	ldr	r3, [pc, #44]	@ (8016068 <uxr_init_custom_transport+0x5c>)
 801603a:	4628      	mov	r0, r5
 801603c:	490b      	ldr	r1, [pc, #44]	@ (801606c <uxr_init_custom_transport+0x60>)
 801603e:	4a0c      	ldr	r2, [pc, #48]	@ (8016070 <uxr_init_custom_transport+0x64>)
 8016040:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8016044:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016048:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 801604c:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8016050:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8016054:	bd38      	pop	{r3, r4, r5, pc}
 8016056:	2500      	movs	r5, #0
 8016058:	4628      	mov	r0, r5
 801605a:	bd38      	pop	{r3, r4, r5, pc}
 801605c:	2100      	movs	r1, #0
 801605e:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8016062:	f001 fa03 	bl	801746c <uxr_init_framing_io>
 8016066:	e7e7      	b.n	8016038 <uxr_init_custom_transport+0x2c>
 8016068:	08015f0d 	.word	0x08015f0d
 801606c:	08015fa5 	.word	0x08015fa5
 8016070:	08015f01 	.word	0x08015f01

08016074 <uxr_close_custom_transport>:
 8016074:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8016078:	4718      	bx	r3
 801607a:	bf00      	nop

0801607c <uxr_object_id>:
 801607c:	b082      	sub	sp, #8
 801607e:	2300      	movs	r3, #0
 8016080:	f88d 1006 	strb.w	r1, [sp, #6]
 8016084:	f360 030f 	bfi	r3, r0, #0, #16
 8016088:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801608c:	f362 431f 	bfi	r3, r2, #16, #16
 8016090:	4618      	mov	r0, r3
 8016092:	b002      	add	sp, #8
 8016094:	4770      	bx	lr
 8016096:	bf00      	nop

08016098 <uxr_object_id_from_raw>:
 8016098:	7843      	ldrb	r3, [r0, #1]
 801609a:	b082      	sub	sp, #8
 801609c:	7801      	ldrb	r1, [r0, #0]
 801609e:	2000      	movs	r0, #0
 80160a0:	091a      	lsrs	r2, r3, #4
 80160a2:	f003 030f 	and.w	r3, r3, #15
 80160a6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80160aa:	f88d 3006 	strb.w	r3, [sp, #6]
 80160ae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80160b2:	f362 000f 	bfi	r0, r2, #0, #16
 80160b6:	f363 401f 	bfi	r0, r3, #16, #16
 80160ba:	b002      	add	sp, #8
 80160bc:	4770      	bx	lr
 80160be:	bf00      	nop

080160c0 <uxr_object_id_to_raw>:
 80160c0:	4602      	mov	r2, r0
 80160c2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80160c6:	b082      	sub	sp, #8
 80160c8:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 80160cc:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80160d0:	f881 c000 	strb.w	ip, [r1]
 80160d4:	7048      	strb	r0, [r1, #1]
 80160d6:	b002      	add	sp, #8
 80160d8:	4770      	bx	lr
 80160da:	bf00      	nop

080160dc <uxr_buffer_request_data>:
 80160dc:	b530      	push	{r4, r5, lr}
 80160de:	b095      	sub	sp, #84	@ 0x54
 80160e0:	4604      	mov	r4, r0
 80160e2:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80160e4:	9303      	str	r3, [sp, #12]
 80160e6:	2d00      	cmp	r5, #0
 80160e8:	f88d 301c 	strb.w	r3, [sp, #28]
 80160ec:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80160f0:	f04f 0200 	mov.w	r2, #0
 80160f4:	bf14      	ite	ne
 80160f6:	2101      	movne	r1, #1
 80160f8:	4611      	moveq	r1, r2
 80160fa:	f88d 201d 	strb.w	r2, [sp, #29]
 80160fe:	f88d 201e 	strb.w	r2, [sp, #30]
 8016102:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8016106:	d021      	beq.n	801614c <uxr_buffer_request_data+0x70>
 8016108:	686b      	ldr	r3, [r5, #4]
 801610a:	2210      	movs	r2, #16
 801610c:	6829      	ldr	r1, [r5, #0]
 801610e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8016112:	f8cd 1026 	str.w	r1, [sp, #38]	@ 0x26
 8016116:	2308      	movs	r3, #8
 8016118:	2100      	movs	r1, #0
 801611a:	4620      	mov	r0, r4
 801611c:	e9cd 3100 	strd	r3, r1, [sp]
 8016120:	ab0c      	add	r3, sp, #48	@ 0x30
 8016122:	9905      	ldr	r1, [sp, #20]
 8016124:	f001 f834 	bl	8017190 <uxr_prepare_stream_to_write_submessage>
 8016128:	b918      	cbnz	r0, 8016132 <uxr_buffer_request_data+0x56>
 801612a:	4604      	mov	r4, r0
 801612c:	4620      	mov	r0, r4
 801612e:	b015      	add	sp, #84	@ 0x54
 8016130:	bd30      	pop	{r4, r5, pc}
 8016132:	9904      	ldr	r1, [sp, #16]
 8016134:	aa06      	add	r2, sp, #24
 8016136:	4620      	mov	r0, r4
 8016138:	f001 f966 	bl	8017408 <uxr_init_base_object_request>
 801613c:	4604      	mov	r4, r0
 801613e:	a906      	add	r1, sp, #24
 8016140:	a80c      	add	r0, sp, #48	@ 0x30
 8016142:	f002 feb1 	bl	8018ea8 <uxr_serialize_READ_DATA_Payload>
 8016146:	4620      	mov	r0, r4
 8016148:	b015      	add	sp, #84	@ 0x54
 801614a:	bd30      	pop	{r4, r5, pc}
 801614c:	2208      	movs	r2, #8
 801614e:	e7e2      	b.n	8016116 <uxr_buffer_request_data+0x3a>

08016150 <uxr_buffer_cancel_data>:
 8016150:	b510      	push	{r4, lr}
 8016152:	2300      	movs	r3, #0
 8016154:	b094      	sub	sp, #80	@ 0x50
 8016156:	4604      	mov	r4, r0
 8016158:	9205      	str	r2, [sp, #20]
 801615a:	9301      	str	r3, [sp, #4]
 801615c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016160:	f88d 301e 	strb.w	r3, [sp, #30]
 8016164:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8016168:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801616c:	2308      	movs	r3, #8
 801616e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8016172:	2201      	movs	r2, #1
 8016174:	9300      	str	r3, [sp, #0]
 8016176:	ab0c      	add	r3, sp, #48	@ 0x30
 8016178:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 801617c:	2210      	movs	r2, #16
 801617e:	f001 f807 	bl	8017190 <uxr_prepare_stream_to_write_submessage>
 8016182:	b918      	cbnz	r0, 801618c <uxr_buffer_cancel_data+0x3c>
 8016184:	4604      	mov	r4, r0
 8016186:	4620      	mov	r0, r4
 8016188:	b014      	add	sp, #80	@ 0x50
 801618a:	bd10      	pop	{r4, pc}
 801618c:	9905      	ldr	r1, [sp, #20]
 801618e:	aa06      	add	r2, sp, #24
 8016190:	4620      	mov	r0, r4
 8016192:	f001 f939 	bl	8017408 <uxr_init_base_object_request>
 8016196:	4604      	mov	r4, r0
 8016198:	a906      	add	r1, sp, #24
 801619a:	a80c      	add	r0, sp, #48	@ 0x30
 801619c:	f002 fe84 	bl	8018ea8 <uxr_serialize_READ_DATA_Payload>
 80161a0:	4620      	mov	r0, r4
 80161a2:	b014      	add	sp, #80	@ 0x50
 80161a4:	bd10      	pop	{r4, pc}
 80161a6:	bf00      	nop

080161a8 <read_submessage_format>:
 80161a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80161ac:	b095      	sub	sp, #84	@ 0x54
 80161ae:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 80161b2:	b113      	cbz	r3, 80161ba <read_submessage_format+0x12>
 80161b4:	b015      	add	sp, #84	@ 0x54
 80161b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80161ba:	4606      	mov	r6, r0
 80161bc:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80161be:	460c      	mov	r4, r1
 80161c0:	4615      	mov	r5, r2
 80161c2:	9004      	str	r0, [sp, #16]
 80161c4:	4699      	mov	r9, r3
 80161c6:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80161c8:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 80161cc:	9005      	str	r0, [sp, #20]
 80161ce:	a80c      	add	r0, sp, #48	@ 0x30
 80161d0:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80161d4:	1a52      	subs	r2, r2, r1
 80161d6:	f7f9 fab9 	bl	800f74c <ucdr_init_buffer>
 80161da:	a80c      	add	r0, sp, #48	@ 0x30
 80161dc:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80161e0:	f7f9 fa88 	bl	800f6f4 <ucdr_set_on_full_buffer_callback>
 80161e4:	69e2      	ldr	r2, [r4, #28]
 80161e6:	b19a      	cbz	r2, 8016210 <read_submessage_format+0x68>
 80161e8:	f1b8 0f07 	cmp.w	r8, #7
 80161ec:	f882 9014 	strb.w	r9, [r2, #20]
 80161f0:	d040      	beq.n	8016274 <read_submessage_format+0xcc>
 80161f2:	f1b8 0f08 	cmp.w	r8, #8
 80161f6:	d02e      	beq.n	8016256 <read_submessage_format+0xae>
 80161f8:	f1b8 0f06 	cmp.w	r8, #6
 80161fc:	d011      	beq.n	8016222 <read_submessage_format+0x7a>
 80161fe:	2301      	movs	r3, #1
 8016200:	7513      	strb	r3, [r2, #20]
 8016202:	4629      	mov	r1, r5
 8016204:	4620      	mov	r0, r4
 8016206:	f7f9 faf5 	bl	800f7f4 <ucdr_advance_buffer>
 801620a:	b015      	add	sp, #84	@ 0x54
 801620c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016210:	f1b8 0f07 	cmp.w	r8, #7
 8016214:	d02e      	beq.n	8016274 <read_submessage_format+0xcc>
 8016216:	f1b8 0f08 	cmp.w	r8, #8
 801621a:	d01c      	beq.n	8016256 <read_submessage_format+0xae>
 801621c:	f1b8 0f06 	cmp.w	r8, #6
 8016220:	d1ef      	bne.n	8016202 <read_submessage_format+0x5a>
 8016222:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 8016226:	f1b8 0f00 	cmp.w	r8, #0
 801622a:	d011      	beq.n	8016250 <read_submessage_format+0xa8>
 801622c:	ab0c      	add	r3, sp, #48	@ 0x30
 801622e:	9501      	str	r5, [sp, #4]
 8016230:	463a      	mov	r2, r7
 8016232:	4630      	mov	r0, r6
 8016234:	9300      	str	r3, [sp, #0]
 8016236:	2306      	movs	r3, #6
 8016238:	f88d 3016 	strb.w	r3, [sp, #22]
 801623c:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8016240:	9302      	str	r3, [sp, #8]
 8016242:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8016246:	47c0      	blx	r8
 8016248:	2301      	movs	r3, #1
 801624a:	69e2      	ldr	r2, [r4, #28]
 801624c:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8016250:	2a00      	cmp	r2, #0
 8016252:	d1d4      	bne.n	80161fe <read_submessage_format+0x56>
 8016254:	e7d5      	b.n	8016202 <read_submessage_format+0x5a>
 8016256:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 801625a:	2b00      	cmp	r3, #0
 801625c:	d0f8      	beq.n	8016250 <read_submessage_format+0xa8>
 801625e:	a80c      	add	r0, sp, #48	@ 0x30
 8016260:	a906      	add	r1, sp, #24
 8016262:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8016266:	f002 feeb 	bl	8019040 <uxr_deserialize_SampleIdentity>
 801626a:	b9a0      	cbnz	r0, 8016296 <read_submessage_format+0xee>
 801626c:	69e2      	ldr	r2, [r4, #28]
 801626e:	2a00      	cmp	r2, #0
 8016270:	d1c5      	bne.n	80161fe <read_submessage_format+0x56>
 8016272:	e7c6      	b.n	8016202 <read_submessage_format+0x5a>
 8016274:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 8016278:	b13b      	cbz	r3, 801628a <read_submessage_format+0xe2>
 801627a:	a906      	add	r1, sp, #24
 801627c:	a80c      	add	r0, sp, #48	@ 0x30
 801627e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8016282:	f002 fbb1 	bl	80189e8 <uxr_deserialize_BaseObjectRequest>
 8016286:	bb60      	cbnz	r0, 80162e2 <read_submessage_format+0x13a>
 8016288:	69e2      	ldr	r2, [r4, #28]
 801628a:	68a3      	ldr	r3, [r4, #8]
 801628c:	442b      	add	r3, r5
 801628e:	60a3      	str	r3, [r4, #8]
 8016290:	2a00      	cmp	r2, #0
 8016292:	d1b4      	bne.n	80161fe <read_submessage_format+0x56>
 8016294:	e7b5      	b.n	8016202 <read_submessage_format+0x5a>
 8016296:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016298:	a80c      	add	r0, sp, #48	@ 0x30
 801629a:	eba8 0803 	sub.w	r8, r8, r3
 801629e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80162a2:	44a8      	add	r8, r5
 80162a4:	1a52      	subs	r2, r2, r1
 80162a6:	f7f9 fa51 	bl	800f74c <ucdr_init_buffer>
 80162aa:	a80c      	add	r0, sp, #48	@ 0x30
 80162ac:	fa1f f888 	uxth.w	r8, r8
 80162b0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80162b4:	f7f9 fa1e 	bl	800f6f4 <ucdr_set_on_full_buffer_callback>
 80162b8:	ab0c      	add	r3, sp, #48	@ 0x30
 80162ba:	2108      	movs	r1, #8
 80162bc:	f8cd 8004 	str.w	r8, [sp, #4]
 80162c0:	9300      	str	r3, [sp, #0]
 80162c2:	463a      	mov	r2, r7
 80162c4:	f88d 1016 	strb.w	r1, [sp, #22]
 80162c8:	ab06      	add	r3, sp, #24
 80162ca:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 80162ce:	4630      	mov	r0, r6
 80162d0:	9102      	str	r1, [sp, #8]
 80162d2:	9905      	ldr	r1, [sp, #20]
 80162d4:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 80162d8:	47b8      	blx	r7
 80162da:	2301      	movs	r3, #1
 80162dc:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 80162e0:	e7c4      	b.n	801626c <read_submessage_format+0xc4>
 80162e2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80162e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80162e8:	a80c      	add	r0, sp, #48	@ 0x30
 80162ea:	1a52      	subs	r2, r2, r1
 80162ec:	eba8 0803 	sub.w	r8, r8, r3
 80162f0:	f7f9 fa2c 	bl	800f74c <ucdr_init_buffer>
 80162f4:	a80c      	add	r0, sp, #48	@ 0x30
 80162f6:	44a8      	add	r8, r5
 80162f8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80162fc:	f7f9 f9fa 	bl	800f6f4 <ucdr_set_on_full_buffer_callback>
 8016300:	ab0c      	add	r3, sp, #48	@ 0x30
 8016302:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8016306:	fa1f f888 	uxth.w	r8, r8
 801630a:	9300      	str	r3, [sp, #0]
 801630c:	463a      	mov	r2, r7
 801630e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8016312:	4630      	mov	r0, r6
 8016314:	f8cd 8004 	str.w	r8, [sp, #4]
 8016318:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801631c:	2107      	movs	r1, #7
 801631e:	f88d 1016 	strb.w	r1, [sp, #22]
 8016322:	b29b      	uxth	r3, r3
 8016324:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8016328:	9102      	str	r1, [sp, #8]
 801632a:	9905      	ldr	r1, [sp, #20]
 801632c:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8016330:	47b8      	blx	r7
 8016332:	2301      	movs	r3, #1
 8016334:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8016338:	e7a6      	b.n	8016288 <read_submessage_format+0xe0>
 801633a:	bf00      	nop

0801633c <on_get_fragmentation_info>:
 801633c:	b500      	push	{lr}
 801633e:	b08b      	sub	sp, #44	@ 0x2c
 8016340:	4601      	mov	r1, r0
 8016342:	2204      	movs	r2, #4
 8016344:	a802      	add	r0, sp, #8
 8016346:	f7f9 fa01 	bl	800f74c <ucdr_init_buffer>
 801634a:	f10d 0305 	add.w	r3, sp, #5
 801634e:	f10d 0206 	add.w	r2, sp, #6
 8016352:	a901      	add	r1, sp, #4
 8016354:	a802      	add	r0, sp, #8
 8016356:	f001 fe5d 	bl	8018014 <uxr_read_submessage_header>
 801635a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801635e:	2b0d      	cmp	r3, #13
 8016360:	d003      	beq.n	801636a <on_get_fragmentation_info+0x2e>
 8016362:	2000      	movs	r0, #0
 8016364:	b00b      	add	sp, #44	@ 0x2c
 8016366:	f85d fb04 	ldr.w	pc, [sp], #4
 801636a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801636e:	f013 0f02 	tst.w	r3, #2
 8016372:	bf14      	ite	ne
 8016374:	2002      	movne	r0, #2
 8016376:	2001      	moveq	r0, #1
 8016378:	b00b      	add	sp, #44	@ 0x2c
 801637a:	f85d fb04 	ldr.w	pc, [sp], #4
 801637e:	bf00      	nop

08016380 <read_submessage_get_info>:
 8016380:	b570      	push	{r4, r5, r6, lr}
 8016382:	2500      	movs	r5, #0
 8016384:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8016388:	460e      	mov	r6, r1
 801638a:	4604      	mov	r4, r0
 801638c:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8016390:	4629      	mov	r1, r5
 8016392:	a810      	add	r0, sp, #64	@ 0x40
 8016394:	9503      	str	r5, [sp, #12]
 8016396:	9504      	str	r5, [sp, #16]
 8016398:	f005 f802 	bl	801b3a0 <memset>
 801639c:	a903      	add	r1, sp, #12
 801639e:	4630      	mov	r0, r6
 80163a0:	f002 fcc2 	bl	8018d28 <uxr_deserialize_GET_INFO_Payload>
 80163a4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80163a8:	4620      	mov	r0, r4
 80163aa:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80163ae:	f001 f823 	bl	80173f8 <uxr_session_header_offset>
 80163b2:	462b      	mov	r3, r5
 80163b4:	220c      	movs	r2, #12
 80163b6:	a905      	add	r1, sp, #20
 80163b8:	9000      	str	r0, [sp, #0]
 80163ba:	a808      	add	r0, sp, #32
 80163bc:	f7f9 f9b4 	bl	800f728 <ucdr_init_buffer_origin_offset>
 80163c0:	a910      	add	r1, sp, #64	@ 0x40
 80163c2:	a808      	add	r0, sp, #32
 80163c4:	f002 fd24 	bl	8018e10 <uxr_serialize_INFO_Payload>
 80163c8:	9b08      	ldr	r3, [sp, #32]
 80163ca:	462a      	mov	r2, r5
 80163cc:	4629      	mov	r1, r5
 80163ce:	4620      	mov	r0, r4
 80163d0:	f000 ffbe 	bl	8017350 <uxr_stamp_session_header>
 80163d4:	a808      	add	r0, sp, #32
 80163d6:	f7f9 f9e7 	bl	800f7a8 <ucdr_buffer_length>
 80163da:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80163dc:	4602      	mov	r2, r0
 80163de:	a905      	add	r1, sp, #20
 80163e0:	e9d3 0400 	ldrd	r0, r4, [r3]
 80163e4:	47a0      	blx	r4
 80163e6:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 80163ea:	bd70      	pop	{r4, r5, r6, pc}

080163ec <write_submessage_acknack.isra.0>:
 80163ec:	b570      	push	{r4, r5, r6, lr}
 80163ee:	b092      	sub	sp, #72	@ 0x48
 80163f0:	4605      	mov	r5, r0
 80163f2:	460e      	mov	r6, r1
 80163f4:	4614      	mov	r4, r2
 80163f6:	f000 ffff 	bl	80173f8 <uxr_session_header_offset>
 80163fa:	a905      	add	r1, sp, #20
 80163fc:	9000      	str	r0, [sp, #0]
 80163fe:	2300      	movs	r3, #0
 8016400:	a80a      	add	r0, sp, #40	@ 0x28
 8016402:	2211      	movs	r2, #17
 8016404:	f7f9 f990 	bl	800f728 <ucdr_init_buffer_origin_offset>
 8016408:	2218      	movs	r2, #24
 801640a:	2300      	movs	r3, #0
 801640c:	210a      	movs	r1, #10
 801640e:	fb02 5404 	mla	r4, r2, r4, r5
 8016412:	a80a      	add	r0, sp, #40	@ 0x28
 8016414:	2205      	movs	r2, #5
 8016416:	3450      	adds	r4, #80	@ 0x50
 8016418:	f001 fde2 	bl	8017fe0 <uxr_buffer_submessage_header>
 801641c:	a903      	add	r1, sp, #12
 801641e:	4620      	mov	r0, r4
 8016420:	f003 fed8 	bl	801a1d4 <uxr_compute_acknack>
 8016424:	ba40      	rev16	r0, r0
 8016426:	a903      	add	r1, sp, #12
 8016428:	f88d 6010 	strb.w	r6, [sp, #16]
 801642c:	f8ad 000e 	strh.w	r0, [sp, #14]
 8016430:	a80a      	add	r0, sp, #40	@ 0x28
 8016432:	f002 fd5f 	bl	8018ef4 <uxr_serialize_ACKNACK_Payload>
 8016436:	2200      	movs	r2, #0
 8016438:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801643a:	4628      	mov	r0, r5
 801643c:	4611      	mov	r1, r2
 801643e:	f000 ff87 	bl	8017350 <uxr_stamp_session_header>
 8016442:	a80a      	add	r0, sp, #40	@ 0x28
 8016444:	f7f9 f9b0 	bl	800f7a8 <ucdr_buffer_length>
 8016448:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801644a:	4602      	mov	r2, r0
 801644c:	a905      	add	r1, sp, #20
 801644e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8016452:	47a0      	blx	r4
 8016454:	b012      	add	sp, #72	@ 0x48
 8016456:	bd70      	pop	{r4, r5, r6, pc}

08016458 <uxr_init_session>:
 8016458:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8016490 <uxr_init_session+0x38>
 801645c:	2300      	movs	r3, #0
 801645e:	b510      	push	{r4, lr}
 8016460:	4604      	mov	r4, r0
 8016462:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8016466:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 801646a:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 801646e:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8016472:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8016476:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 801647a:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 801647e:	2181      	movs	r1, #129	@ 0x81
 8016480:	f000 feca 	bl	8017218 <uxr_init_session_info>
 8016484:	f104 0008 	add.w	r0, r4, #8
 8016488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801648c:	f001 bcc4 	b.w	8017e18 <uxr_init_stream_storage>
	...

08016498 <uxr_set_status_callback>:
 8016498:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 801649c:	4770      	bx	lr
 801649e:	bf00      	nop

080164a0 <uxr_set_topic_callback>:
 80164a0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80164a4:	4770      	bx	lr
 80164a6:	bf00      	nop

080164a8 <uxr_set_request_callback>:
 80164a8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80164ac:	4770      	bx	lr
 80164ae:	bf00      	nop

080164b0 <uxr_set_reply_callback>:
 80164b0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 80164b4:	4770      	bx	lr
 80164b6:	bf00      	nop

080164b8 <uxr_create_output_best_effort_stream>:
 80164b8:	b510      	push	{r4, lr}
 80164ba:	4604      	mov	r4, r0
 80164bc:	b084      	sub	sp, #16
 80164be:	e9cd 2100 	strd	r2, r1, [sp]
 80164c2:	f000 ff99 	bl	80173f8 <uxr_session_header_offset>
 80164c6:	4603      	mov	r3, r0
 80164c8:	f104 0008 	add.w	r0, r4, #8
 80164cc:	e9dd 2100 	ldrd	r2, r1, [sp]
 80164d0:	b004      	add	sp, #16
 80164d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80164d6:	f001 bce5 	b.w	8017ea4 <uxr_add_output_best_effort_buffer>
 80164da:	bf00      	nop

080164dc <uxr_create_output_reliable_stream>:
 80164dc:	b530      	push	{r4, r5, lr}
 80164de:	b089      	sub	sp, #36	@ 0x24
 80164e0:	4604      	mov	r4, r0
 80164e2:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80164e6:	9303      	str	r3, [sp, #12]
 80164e8:	f000 ff86 	bl	80173f8 <uxr_session_header_offset>
 80164ec:	4605      	mov	r5, r0
 80164ee:	9905      	ldr	r1, [sp, #20]
 80164f0:	f104 0008 	add.w	r0, r4, #8
 80164f4:	9500      	str	r5, [sp, #0]
 80164f6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80164fa:	f001 fce7 	bl	8017ecc <uxr_add_output_reliable_buffer>
 80164fe:	2200      	movs	r2, #0
 8016500:	fa5f fc80 	uxtb.w	ip, r0
 8016504:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8016508:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801650c:	0e03      	lsrs	r3, r0, #24
 801650e:	f36c 0207 	bfi	r2, ip, #0, #8
 8016512:	f364 220f 	bfi	r2, r4, #8, #8
 8016516:	f361 4217 	bfi	r2, r1, #16, #8
 801651a:	f363 621f 	bfi	r2, r3, #24, #8
 801651e:	4610      	mov	r0, r2
 8016520:	b009      	add	sp, #36	@ 0x24
 8016522:	bd30      	pop	{r4, r5, pc}

08016524 <uxr_create_input_best_effort_stream>:
 8016524:	b082      	sub	sp, #8
 8016526:	3008      	adds	r0, #8
 8016528:	b002      	add	sp, #8
 801652a:	f001 bce9 	b.w	8017f00 <uxr_add_input_best_effort_buffer>
 801652e:	bf00      	nop

08016530 <uxr_create_input_reliable_stream>:
 8016530:	b510      	push	{r4, lr}
 8016532:	4c0c      	ldr	r4, [pc, #48]	@ (8016564 <uxr_create_input_reliable_stream+0x34>)
 8016534:	b084      	sub	sp, #16
 8016536:	3008      	adds	r0, #8
 8016538:	9400      	str	r4, [sp, #0]
 801653a:	f001 fcf7 	bl	8017f2c <uxr_add_input_reliable_buffer>
 801653e:	2200      	movs	r2, #0
 8016540:	fa5f fe80 	uxtb.w	lr, r0
 8016544:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8016548:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801654c:	0e03      	lsrs	r3, r0, #24
 801654e:	f36e 0207 	bfi	r2, lr, #0, #8
 8016552:	f36c 220f 	bfi	r2, ip, #8, #8
 8016556:	f361 4217 	bfi	r2, r1, #16, #8
 801655a:	f363 621f 	bfi	r2, r3, #24, #8
 801655e:	4610      	mov	r0, r2
 8016560:	b004      	add	sp, #16
 8016562:	bd10      	pop	{r4, pc}
 8016564:	0801633d 	.word	0x0801633d

08016568 <uxr_epoch_nanos>:
 8016568:	b510      	push	{r4, lr}
 801656a:	4604      	mov	r4, r0
 801656c:	f001 fd9a 	bl	80180a4 <uxr_nanos>
 8016570:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8016574:	1ac0      	subs	r0, r0, r3
 8016576:	eb61 0102 	sbc.w	r1, r1, r2
 801657a:	bd10      	pop	{r4, pc}

0801657c <uxr_flash_output_streams>:
 801657c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016580:	7e03      	ldrb	r3, [r0, #24]
 8016582:	b084      	sub	sp, #16
 8016584:	4604      	mov	r4, r0
 8016586:	b1fb      	cbz	r3, 80165c8 <uxr_flash_output_streams+0x4c>
 8016588:	f04f 0900 	mov.w	r9, #0
 801658c:	f10d 0802 	add.w	r8, sp, #2
 8016590:	af03      	add	r7, sp, #12
 8016592:	ae02      	add	r6, sp, #8
 8016594:	4648      	mov	r0, r9
 8016596:	2201      	movs	r2, #1
 8016598:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801659c:	4611      	mov	r1, r2
 801659e:	3508      	adds	r5, #8
 80165a0:	f001 fbe0 	bl	8017d64 <uxr_stream_id>
 80165a4:	4684      	mov	ip, r0
 80165a6:	4643      	mov	r3, r8
 80165a8:	463a      	mov	r2, r7
 80165aa:	4631      	mov	r1, r6
 80165ac:	4628      	mov	r0, r5
 80165ae:	f8cd c004 	str.w	ip, [sp, #4]
 80165b2:	f003 fe99 	bl	801a2e8 <uxr_prepare_best_effort_buffer_to_send>
 80165b6:	2800      	cmp	r0, #0
 80165b8:	d13d      	bne.n	8016636 <uxr_flash_output_streams+0xba>
 80165ba:	f109 0901 	add.w	r9, r9, #1
 80165be:	7e23      	ldrb	r3, [r4, #24]
 80165c0:	fa5f f089 	uxtb.w	r0, r9
 80165c4:	4283      	cmp	r3, r0
 80165c6:	d8e6      	bhi.n	8016596 <uxr_flash_output_streams+0x1a>
 80165c8:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80165cc:	b383      	cbz	r3, 8016630 <uxr_flash_output_streams+0xb4>
 80165ce:	f04f 0900 	mov.w	r9, #0
 80165d2:	f10d 0802 	add.w	r8, sp, #2
 80165d6:	af03      	add	r7, sp, #12
 80165d8:	ae02      	add	r6, sp, #8
 80165da:	4648      	mov	r0, r9
 80165dc:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80165e0:	2201      	movs	r2, #1
 80165e2:	2102      	movs	r1, #2
 80165e4:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80165e8:	f001 fbbc 	bl	8017d64 <uxr_stream_id>
 80165ec:	9001      	str	r0, [sp, #4]
 80165ee:	3520      	adds	r5, #32
 80165f0:	e00c      	b.n	801660c <uxr_flash_output_streams+0x90>
 80165f2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80165f6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80165fa:	9b02      	ldr	r3, [sp, #8]
 80165fc:	f000 fea8 	bl	8017350 <uxr_stamp_session_header>
 8016600:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8016602:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8016606:	e9d3 0a00 	ldrd	r0, sl, [r3]
 801660a:	47d0      	blx	sl
 801660c:	4643      	mov	r3, r8
 801660e:	463a      	mov	r2, r7
 8016610:	4631      	mov	r1, r6
 8016612:	4628      	mov	r0, r5
 8016614:	f004 f88c 	bl	801a730 <uxr_prepare_next_reliable_buffer_to_send>
 8016618:	4603      	mov	r3, r0
 801661a:	4620      	mov	r0, r4
 801661c:	2b00      	cmp	r3, #0
 801661e:	d1e8      	bne.n	80165f2 <uxr_flash_output_streams+0x76>
 8016620:	f109 0901 	add.w	r9, r9, #1
 8016624:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8016628:	fa5f f089 	uxtb.w	r0, r9
 801662c:	4283      	cmp	r3, r0
 801662e:	d8d5      	bhi.n	80165dc <uxr_flash_output_streams+0x60>
 8016630:	b004      	add	sp, #16
 8016632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016636:	9b02      	ldr	r3, [sp, #8]
 8016638:	4620      	mov	r0, r4
 801663a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801663e:	f109 0901 	add.w	r9, r9, #1
 8016642:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8016646:	f000 fe83 	bl	8017350 <uxr_stamp_session_header>
 801664a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801664c:	9a03      	ldr	r2, [sp, #12]
 801664e:	685d      	ldr	r5, [r3, #4]
 8016650:	6818      	ldr	r0, [r3, #0]
 8016652:	9902      	ldr	r1, [sp, #8]
 8016654:	47a8      	blx	r5
 8016656:	7e23      	ldrb	r3, [r4, #24]
 8016658:	fa5f f089 	uxtb.w	r0, r9
 801665c:	4283      	cmp	r3, r0
 801665e:	d89a      	bhi.n	8016596 <uxr_flash_output_streams+0x1a>
 8016660:	e7b2      	b.n	80165c8 <uxr_flash_output_streams+0x4c>
 8016662:	bf00      	nop

08016664 <read_submessage_info>:
 8016664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016668:	460d      	mov	r5, r1
 801666a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801666e:	4606      	mov	r6, r0
 8016670:	4669      	mov	r1, sp
 8016672:	4628      	mov	r0, r5
 8016674:	f002 fa6a 	bl	8018b4c <uxr_deserialize_BaseObjectReply>
 8016678:	4604      	mov	r4, r0
 801667a:	a902      	add	r1, sp, #8
 801667c:	4628      	mov	r0, r5
 801667e:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8016682:	f7fe fb71 	bl	8014d68 <ucdr_deserialize_bool>
 8016686:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801668a:	4004      	ands	r4, r0
 801668c:	b2e4      	uxtb	r4, r4
 801668e:	b95b      	cbnz	r3, 80166a8 <read_submessage_info+0x44>
 8016690:	a987      	add	r1, sp, #540	@ 0x21c
 8016692:	4628      	mov	r0, r5
 8016694:	f7fe fb68 	bl	8014d68 <ucdr_deserialize_bool>
 8016698:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 801669c:	4680      	mov	r8, r0
 801669e:	b94b      	cbnz	r3, 80166b4 <read_submessage_info+0x50>
 80166a0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80166a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166a8:	a903      	add	r1, sp, #12
 80166aa:	4628      	mov	r0, r5
 80166ac:	f002 f8fa 	bl	80188a4 <uxr_deserialize_ObjectVariant>
 80166b0:	4004      	ands	r4, r0
 80166b2:	e7ed      	b.n	8016690 <read_submessage_info+0x2c>
 80166b4:	a988      	add	r1, sp, #544	@ 0x220
 80166b6:	4628      	mov	r0, r5
 80166b8:	f7fe fb84 	bl	8014dc4 <ucdr_deserialize_uint8_t>
 80166bc:	ea14 0f08 	tst.w	r4, r8
 80166c0:	d0ee      	beq.n	80166a0 <read_submessage_info+0x3c>
 80166c2:	2800      	cmp	r0, #0
 80166c4:	d0ec      	beq.n	80166a0 <read_submessage_info+0x3c>
 80166c6:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 80166ca:	2b0d      	cmp	r3, #13
 80166cc:	d1e8      	bne.n	80166a0 <read_submessage_info+0x3c>
 80166ce:	a98a      	add	r1, sp, #552	@ 0x228
 80166d0:	4628      	mov	r0, r5
 80166d2:	f7ff f91d 	bl	8015910 <ucdr_deserialize_int16_t>
 80166d6:	b138      	cbz	r0, 80166e8 <read_submessage_info+0x84>
 80166d8:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 80166dc:	2b00      	cmp	r3, #0
 80166de:	dd06      	ble.n	80166ee <read_submessage_info+0x8a>
 80166e0:	2f00      	cmp	r7, #0
 80166e2:	bf14      	ite	ne
 80166e4:	2001      	movne	r0, #1
 80166e6:	2002      	moveq	r0, #2
 80166e8:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 80166ec:	e7d8      	b.n	80166a0 <read_submessage_info+0x3c>
 80166ee:	2000      	movs	r0, #0
 80166f0:	e7fa      	b.n	80166e8 <read_submessage_info+0x84>
 80166f2:	bf00      	nop

080166f4 <read_submessage_list>:
 80166f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166f8:	4604      	mov	r4, r0
 80166fa:	b097      	sub	sp, #92	@ 0x5c
 80166fc:	460d      	mov	r5, r1
 80166fe:	4ec1      	ldr	r6, [pc, #772]	@ (8016a04 <read_submessage_list+0x310>)
 8016700:	9209      	str	r2, [sp, #36]	@ 0x24
 8016702:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8016706:	aa0c      	add	r2, sp, #48	@ 0x30
 8016708:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 801670c:	4628      	mov	r0, r5
 801670e:	f001 fc81 	bl	8018014 <uxr_read_submessage_header>
 8016712:	2800      	cmp	r0, #0
 8016714:	f000 8142 	beq.w	801699c <read_submessage_list+0x2a8>
 8016718:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 801671c:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8016720:	3b02      	subs	r3, #2
 8016722:	2b0d      	cmp	r3, #13
 8016724:	d8ed      	bhi.n	8016702 <read_submessage_list+0xe>
 8016726:	a101      	add	r1, pc, #4	@ (adr r1, 801672c <read_submessage_list+0x38>)
 8016728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801672c:	08016993 	.word	0x08016993
 8016730:	08016703 	.word	0x08016703
 8016734:	08016983 	.word	0x08016983
 8016738:	08016921 	.word	0x08016921
 801673c:	08016917 	.word	0x08016917
 8016740:	08016703 	.word	0x08016703
 8016744:	08016703 	.word	0x08016703
 8016748:	0801686d 	.word	0x0801686d
 801674c:	080167ff 	.word	0x080167ff
 8016750:	080167bf 	.word	0x080167bf
 8016754:	08016703 	.word	0x08016703
 8016758:	08016703 	.word	0x08016703
 801675c:	08016703 	.word	0x08016703
 8016760:	08016765 	.word	0x08016765
 8016764:	a910      	add	r1, sp, #64	@ 0x40
 8016766:	4628      	mov	r0, r5
 8016768:	f002 fc18 	bl	8018f9c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 801676c:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 8016770:	f1b8 0f00 	cmp.w	r8, #0
 8016774:	f000 811a 	beq.w	80169ac <read_submessage_list+0x2b8>
 8016778:	f001 fc94 	bl	80180a4 <uxr_nanos>
 801677c:	4602      	mov	r2, r0
 801677e:	460b      	mov	r3, r1
 8016780:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8016784:	2100      	movs	r1, #0
 8016786:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8016788:	9006      	str	r0, [sp, #24]
 801678a:	468c      	mov	ip, r1
 801678c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801678e:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8016792:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8016794:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8016798:	468c      	mov	ip, r1
 801679a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801679c:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80167a0:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 80167a4:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 80167a8:	fbc7 0106 	smlal	r0, r1, r7, r6
 80167ac:	e9cd 0100 	strd	r0, r1, [sp]
 80167b0:	4620      	mov	r0, r4
 80167b2:	47c0      	blx	r8
 80167b4:	f04f 0301 	mov.w	r3, #1
 80167b8:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 80167bc:	e7a1      	b.n	8016702 <read_submessage_list+0xe>
 80167be:	a910      	add	r1, sp, #64	@ 0x40
 80167c0:	4628      	mov	r0, r5
 80167c2:	f002 fbd7 	bl	8018f74 <uxr_deserialize_HEARTBEAT_Payload>
 80167c6:	2100      	movs	r1, #0
 80167c8:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80167cc:	f001 faf8 	bl	8017dc0 <uxr_stream_id_from_raw>
 80167d0:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80167d4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80167d6:	f104 0008 	add.w	r0, r4, #8
 80167da:	4641      	mov	r1, r8
 80167dc:	f001 fbde 	bl	8017f9c <uxr_get_input_reliable_stream>
 80167e0:	2800      	cmp	r0, #0
 80167e2:	d08e      	beq.n	8016702 <read_submessage_list+0xe>
 80167e4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80167e8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80167ec:	f003 fce6 	bl	801a1bc <uxr_process_heartbeat>
 80167f0:	4642      	mov	r2, r8
 80167f2:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 80167f6:	4620      	mov	r0, r4
 80167f8:	f7ff fdf8 	bl	80163ec <write_submessage_acknack.isra.0>
 80167fc:	e781      	b.n	8016702 <read_submessage_list+0xe>
 80167fe:	a910      	add	r1, sp, #64	@ 0x40
 8016800:	4628      	mov	r0, r5
 8016802:	f002 fb8f 	bl	8018f24 <uxr_deserialize_ACKNACK_Payload>
 8016806:	2100      	movs	r1, #0
 8016808:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801680c:	f001 fad8 	bl	8017dc0 <uxr_stream_id_from_raw>
 8016810:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8016814:	900d      	str	r0, [sp, #52]	@ 0x34
 8016816:	f104 0008 	add.w	r0, r4, #8
 801681a:	f001 fba9 	bl	8017f70 <uxr_get_output_reliable_stream>
 801681e:	4680      	mov	r8, r0
 8016820:	2800      	cmp	r0, #0
 8016822:	f43f af6e 	beq.w	8016702 <read_submessage_list+0xe>
 8016826:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 801682a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801682e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8016832:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8016836:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801683a:	b289      	uxth	r1, r1
 801683c:	f004 f820 	bl	801a880 <uxr_process_acknack>
 8016840:	4640      	mov	r0, r8
 8016842:	f003 ffe1 	bl	801a808 <uxr_begin_output_nack_buffer_it>
 8016846:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801684a:	e005      	b.n	8016858 <read_submessage_list+0x164>
 801684c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801684e:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 8016852:	e9d3 0900 	ldrd	r0, r9, [r3]
 8016856:	47c8      	blx	r9
 8016858:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 801685c:	aa0f      	add	r2, sp, #60	@ 0x3c
 801685e:	4651      	mov	r1, sl
 8016860:	4640      	mov	r0, r8
 8016862:	f003 ffd3 	bl	801a80c <uxr_next_reliable_nack_buffer_to_send>
 8016866:	2800      	cmp	r0, #0
 8016868:	d1f0      	bne.n	801684c <read_submessage_list+0x158>
 801686a:	e74a      	b.n	8016702 <read_submessage_list+0xe>
 801686c:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8016870:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8016874:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 8016878:	4628      	mov	r0, r5
 801687a:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 801687e:	4651      	mov	r1, sl
 8016880:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8016884:	f1a8 0804 	sub.w	r8, r8, #4
 8016888:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 801688c:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8016890:	fa1f f888 	uxth.w	r8, r8
 8016894:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8016898:	f009 090e 	and.w	r9, r9, #14
 801689c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 80168a0:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 80168a4:	f002 f8a0 	bl	80189e8 <uxr_deserialize_BaseObjectRequest>
 80168a8:	4650      	mov	r0, sl
 80168aa:	a90f      	add	r1, sp, #60	@ 0x3c
 80168ac:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80168b0:	f000 fdca 	bl	8017448 <uxr_parse_base_object_request>
 80168b4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80168b6:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 80168ba:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 80168be:	9110      	str	r1, [sp, #64]	@ 0x40
 80168c0:	f1bb 0f00 	cmp.w	fp, #0
 80168c4:	d006      	beq.n	80168d4 <read_submessage_list+0x1e0>
 80168c6:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80168ca:	4652      	mov	r2, sl
 80168cc:	4620      	mov	r0, r4
 80168ce:	9300      	str	r3, [sp, #0]
 80168d0:	2300      	movs	r3, #0
 80168d2:	47d8      	blx	fp
 80168d4:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80168d6:	b182      	cbz	r2, 80168fa <read_submessage_list+0x206>
 80168d8:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80168da:	f04f 0c00 	mov.w	ip, #0
 80168de:	3902      	subs	r1, #2
 80168e0:	e003      	b.n	80168ea <read_submessage_list+0x1f6>
 80168e2:	f10c 0c01 	add.w	ip, ip, #1
 80168e6:	4594      	cmp	ip, r2
 80168e8:	d007      	beq.n	80168fa <read_submessage_list+0x206>
 80168ea:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 80168ee:	4553      	cmp	r3, sl
 80168f0:	d1f7      	bne.n	80168e2 <read_submessage_list+0x1ee>
 80168f2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80168f4:	2200      	movs	r2, #0
 80168f6:	f803 200c 	strb.w	r2, [r3, ip]
 80168fa:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80168fe:	464b      	mov	r3, r9
 8016900:	4642      	mov	r2, r8
 8016902:	4620      	mov	r0, r4
 8016904:	9102      	str	r1, [sp, #8]
 8016906:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016908:	9101      	str	r1, [sp, #4]
 801690a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801690c:	9100      	str	r1, [sp, #0]
 801690e:	4629      	mov	r1, r5
 8016910:	f7ff fc4a 	bl	80161a8 <read_submessage_format>
 8016914:	e6f5      	b.n	8016702 <read_submessage_list+0xe>
 8016916:	4629      	mov	r1, r5
 8016918:	4620      	mov	r0, r4
 801691a:	f7ff fea3 	bl	8016664 <read_submessage_info>
 801691e:	e6f0      	b.n	8016702 <read_submessage_list+0xe>
 8016920:	2a00      	cmp	r2, #0
 8016922:	d03e      	beq.n	80169a2 <read_submessage_list+0x2ae>
 8016924:	a910      	add	r1, sp, #64	@ 0x40
 8016926:	4628      	mov	r0, r5
 8016928:	f002 fa54 	bl	8018dd4 <uxr_deserialize_STATUS_Payload>
 801692c:	a90e      	add	r1, sp, #56	@ 0x38
 801692e:	aa0d      	add	r2, sp, #52	@ 0x34
 8016930:	a810      	add	r0, sp, #64	@ 0x40
 8016932:	f000 fd89 	bl	8017448 <uxr_parse_base_object_request>
 8016936:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8016938:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 801693c:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8016940:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 8016944:	910f      	str	r1, [sp, #60]	@ 0x3c
 8016946:	f1ba 0f00 	cmp.w	sl, #0
 801694a:	d006      	beq.n	801695a <read_submessage_list+0x266>
 801694c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8016950:	4642      	mov	r2, r8
 8016952:	4620      	mov	r0, r4
 8016954:	9300      	str	r3, [sp, #0]
 8016956:	464b      	mov	r3, r9
 8016958:	47d0      	blx	sl
 801695a:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801695c:	2a00      	cmp	r2, #0
 801695e:	f43f aed0 	beq.w	8016702 <read_submessage_list+0xe>
 8016962:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8016964:	2100      	movs	r1, #0
 8016966:	3802      	subs	r0, #2
 8016968:	e003      	b.n	8016972 <read_submessage_list+0x27e>
 801696a:	3101      	adds	r1, #1
 801696c:	4291      	cmp	r1, r2
 801696e:	f43f aec8 	beq.w	8016702 <read_submessage_list+0xe>
 8016972:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8016976:	4543      	cmp	r3, r8
 8016978:	d1f7      	bne.n	801696a <read_submessage_list+0x276>
 801697a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801697c:	f803 9001 	strb.w	r9, [r3, r1]
 8016980:	e6bf      	b.n	8016702 <read_submessage_list+0xe>
 8016982:	2a00      	cmp	r2, #0
 8016984:	f47f aebd 	bne.w	8016702 <read_submessage_list+0xe>
 8016988:	4629      	mov	r1, r5
 801698a:	4620      	mov	r0, r4
 801698c:	f000 fca0 	bl	80172d0 <uxr_read_create_session_status>
 8016990:	e6b7      	b.n	8016702 <read_submessage_list+0xe>
 8016992:	4629      	mov	r1, r5
 8016994:	4620      	mov	r0, r4
 8016996:	f7ff fcf3 	bl	8016380 <read_submessage_get_info>
 801699a:	e6b2      	b.n	8016702 <read_submessage_list+0xe>
 801699c:	b017      	add	sp, #92	@ 0x5c
 801699e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169a2:	4629      	mov	r1, r5
 80169a4:	4620      	mov	r0, r4
 80169a6:	f000 fca1 	bl	80172ec <uxr_read_delete_session_status>
 80169aa:	e6aa      	b.n	8016702 <read_submessage_list+0xe>
 80169ac:	f001 fb7a 	bl	80180a4 <uxr_nanos>
 80169b0:	4642      	mov	r2, r8
 80169b2:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80169b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80169b6:	fbc7 3206 	smlal	r3, r2, r7, r6
 80169ba:	1818      	adds	r0, r3, r0
 80169bc:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80169be:	eb42 0101 	adc.w	r1, r2, r1
 80169c2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80169c4:	4642      	mov	r2, r8
 80169c6:	fbc7 3206 	smlal	r3, r2, r7, r6
 80169ca:	469c      	mov	ip, r3
 80169cc:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 80169d0:	fbc3 7806 	smlal	r7, r8, r3, r6
 80169d4:	4643      	mov	r3, r8
 80169d6:	eb1c 0c07 	adds.w	ip, ip, r7
 80169da:	eb42 0203 	adc.w	r2, r2, r3
 80169de:	ebb0 030c 	subs.w	r3, r0, ip
 80169e2:	eb61 0202 	sbc.w	r2, r1, r2
 80169e6:	2a00      	cmp	r2, #0
 80169e8:	db08      	blt.n	80169fc <read_submessage_list+0x308>
 80169ea:	085b      	lsrs	r3, r3, #1
 80169ec:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80169f0:	1052      	asrs	r2, r2, #1
 80169f2:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 80169f6:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 80169fa:	e6db      	b.n	80167b4 <read_submessage_list+0xc0>
 80169fc:	3301      	adds	r3, #1
 80169fe:	f142 0200 	adc.w	r2, r2, #0
 8016a02:	e7f2      	b.n	80169ea <read_submessage_list+0x2f6>
 8016a04:	3b9aca00 	.word	0x3b9aca00

08016a08 <listen_message_reliably>:
 8016a08:	1e0b      	subs	r3, r1, #0
 8016a0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a0e:	bfb8      	it	lt
 8016a10:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8016a14:	b09d      	sub	sp, #116	@ 0x74
 8016a16:	4680      	mov	r8, r0
 8016a18:	9305      	str	r3, [sp, #20]
 8016a1a:	f001 fb27 	bl	801806c <uxr_millis>
 8016a1e:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8016a22:	4681      	mov	r9, r0
 8016a24:	2a00      	cmp	r2, #0
 8016a26:	f000 809a 	beq.w	8016b5e <listen_message_reliably+0x156>
 8016a2a:	2600      	movs	r6, #0
 8016a2c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016a30:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8016a34:	460f      	mov	r7, r1
 8016a36:	4630      	mov	r0, r6
 8016a38:	9303      	str	r3, [sp, #12]
 8016a3a:	e00e      	b.n	8016a5a <listen_message_reliably+0x52>
 8016a3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016a3e:	3601      	adds	r6, #1
 8016a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016a42:	455a      	cmp	r2, fp
 8016a44:	9903      	ldr	r1, [sp, #12]
 8016a46:	b2f0      	uxtb	r0, r6
 8016a48:	eb73 0101 	sbcs.w	r1, r3, r1
 8016a4c:	da01      	bge.n	8016a52 <listen_message_reliably+0x4a>
 8016a4e:	4693      	mov	fp, r2
 8016a50:	9303      	str	r3, [sp, #12]
 8016a52:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8016a56:	4283      	cmp	r3, r0
 8016a58:	d95f      	bls.n	8016b1a <listen_message_reliably+0x112>
 8016a5a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8016a5e:	2102      	movs	r1, #2
 8016a60:	2201      	movs	r2, #1
 8016a62:	00e4      	lsls	r4, r4, #3
 8016a64:	f001 f97e 	bl	8017d64 <uxr_stream_id>
 8016a68:	4601      	mov	r1, r0
 8016a6a:	f104 0520 	add.w	r5, r4, #32
 8016a6e:	463b      	mov	r3, r7
 8016a70:	464a      	mov	r2, r9
 8016a72:	9109      	str	r1, [sp, #36]	@ 0x24
 8016a74:	4445      	add	r5, r8
 8016a76:	4628      	mov	r0, r5
 8016a78:	f003 fe9a 	bl	801a7b0 <uxr_update_output_stream_heartbeat_timestamp>
 8016a7c:	eb08 0304 	add.w	r3, r8, r4
 8016a80:	2800      	cmp	r0, #0
 8016a82:	d0db      	beq.n	8016a3c <listen_message_reliably+0x34>
 8016a84:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8016a88:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8016a8c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8016a90:	4640      	mov	r0, r8
 8016a92:	3501      	adds	r5, #1
 8016a94:	4444      	add	r4, r8
 8016a96:	9304      	str	r3, [sp, #16]
 8016a98:	f000 fcae 	bl	80173f8 <uxr_session_header_offset>
 8016a9c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8016aa0:	2300      	movs	r3, #0
 8016aa2:	2211      	movs	r2, #17
 8016aa4:	a90c      	add	r1, sp, #48	@ 0x30
 8016aa6:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8016aaa:	9000      	str	r0, [sp, #0]
 8016aac:	4650      	mov	r0, sl
 8016aae:	3601      	adds	r6, #1
 8016ab0:	f7f8 fe3a 	bl	800f728 <ucdr_init_buffer_origin_offset>
 8016ab4:	2300      	movs	r3, #0
 8016ab6:	2205      	movs	r2, #5
 8016ab8:	210b      	movs	r1, #11
 8016aba:	4650      	mov	r0, sl
 8016abc:	f001 fa90 	bl	8017fe0 <uxr_buffer_submessage_header>
 8016ac0:	2101      	movs	r1, #1
 8016ac2:	8968      	ldrh	r0, [r5, #10]
 8016ac4:	f003 ff16 	bl	801a8f4 <uxr_seq_num_add>
 8016ac8:	892b      	ldrh	r3, [r5, #8]
 8016aca:	4602      	mov	r2, r0
 8016acc:	a90a      	add	r1, sp, #40	@ 0x28
 8016ace:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8016ad2:	4650      	mov	r0, sl
 8016ad4:	9b04      	ldr	r3, [sp, #16]
 8016ad6:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8016ada:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8016ade:	f002 fa35 	bl	8018f4c <uxr_serialize_HEARTBEAT_Payload>
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8016ae6:	4640      	mov	r0, r8
 8016ae8:	4611      	mov	r1, r2
 8016aea:	f000 fc31 	bl	8017350 <uxr_stamp_session_header>
 8016aee:	4650      	mov	r0, sl
 8016af0:	f7f8 fe5a 	bl	800f7a8 <ucdr_buffer_length>
 8016af4:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8016af8:	4602      	mov	r2, r0
 8016afa:	a90c      	add	r1, sp, #48	@ 0x30
 8016afc:	e9d3 0500 	ldrd	r0, r5, [r3]
 8016b00:	47a8      	blx	r5
 8016b02:	9903      	ldr	r1, [sp, #12]
 8016b04:	b2f0      	uxtb	r0, r6
 8016b06:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8016b0a:	455a      	cmp	r2, fp
 8016b0c:	eb73 0101 	sbcs.w	r1, r3, r1
 8016b10:	db9d      	blt.n	8016a4e <listen_message_reliably+0x46>
 8016b12:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8016b16:	4283      	cmp	r3, r0
 8016b18:	d89f      	bhi.n	8016a5a <listen_message_reliably+0x52>
 8016b1a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016b1e:	9a03      	ldr	r2, [sp, #12]
 8016b20:	429a      	cmp	r2, r3
 8016b22:	bf08      	it	eq
 8016b24:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8016b28:	d019      	beq.n	8016b5e <listen_message_reliably+0x156>
 8016b2a:	ebab 0309 	sub.w	r3, fp, r9
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	9d05      	ldr	r5, [sp, #20]
 8016b32:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 8016b36:	aa08      	add	r2, sp, #32
 8016b38:	bf08      	it	eq
 8016b3a:	2301      	moveq	r3, #1
 8016b3c:	a907      	add	r1, sp, #28
 8016b3e:	6884      	ldr	r4, [r0, #8]
 8016b40:	429d      	cmp	r5, r3
 8016b42:	6800      	ldr	r0, [r0, #0]
 8016b44:	bfa8      	it	ge
 8016b46:	461d      	movge	r5, r3
 8016b48:	462b      	mov	r3, r5
 8016b4a:	47a0      	blx	r4
 8016b4c:	b948      	cbnz	r0, 8016b62 <listen_message_reliably+0x15a>
 8016b4e:	9b05      	ldr	r3, [sp, #20]
 8016b50:	1b5b      	subs	r3, r3, r5
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	9305      	str	r3, [sp, #20]
 8016b56:	f73f af60 	bgt.w	8016a1a <listen_message_reliably+0x12>
 8016b5a:	4604      	mov	r4, r0
 8016b5c:	e012      	b.n	8016b84 <listen_message_reliably+0x17c>
 8016b5e:	9b05      	ldr	r3, [sp, #20]
 8016b60:	e7e5      	b.n	8016b2e <listen_message_reliably+0x126>
 8016b62:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8016b66:	4604      	mov	r4, r0
 8016b68:	2500      	movs	r5, #0
 8016b6a:	a80c      	add	r0, sp, #48	@ 0x30
 8016b6c:	f7f8 fdee 	bl	800f74c <ucdr_init_buffer>
 8016b70:	f10d 031a 	add.w	r3, sp, #26
 8016b74:	aa06      	add	r2, sp, #24
 8016b76:	a90c      	add	r1, sp, #48	@ 0x30
 8016b78:	4640      	mov	r0, r8
 8016b7a:	f88d 5018 	strb.w	r5, [sp, #24]
 8016b7e:	f000 fbfb 	bl	8017378 <uxr_read_session_header>
 8016b82:	b918      	cbnz	r0, 8016b8c <listen_message_reliably+0x184>
 8016b84:	4620      	mov	r0, r4
 8016b86:	b01d      	add	sp, #116	@ 0x74
 8016b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b8c:	4629      	mov	r1, r5
 8016b8e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8016b92:	f001 f915 	bl	8017dc0 <uxr_stream_id_from_raw>
 8016b96:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8016b9a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8016b9e:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8016ba2:	2e01      	cmp	r6, #1
 8016ba4:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8016ba8:	d04b      	beq.n	8016c42 <listen_message_reliably+0x23a>
 8016baa:	2e02      	cmp	r6, #2
 8016bac:	d00f      	beq.n	8016bce <listen_message_reliably+0x1c6>
 8016bae:	2e00      	cmp	r6, #0
 8016bb0:	d1e8      	bne.n	8016b84 <listen_message_reliably+0x17c>
 8016bb2:	4631      	mov	r1, r6
 8016bb4:	4630      	mov	r0, r6
 8016bb6:	f001 f903 	bl	8017dc0 <uxr_stream_id_from_raw>
 8016bba:	4602      	mov	r2, r0
 8016bbc:	a90c      	add	r1, sp, #48	@ 0x30
 8016bbe:	4640      	mov	r0, r8
 8016bc0:	920a      	str	r2, [sp, #40]	@ 0x28
 8016bc2:	f7ff fd97 	bl	80166f4 <read_submessage_list>
 8016bc6:	4620      	mov	r0, r4
 8016bc8:	b01d      	add	sp, #116	@ 0x74
 8016bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bce:	4629      	mov	r1, r5
 8016bd0:	f108 0008 	add.w	r0, r8, #8
 8016bd4:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8016bd8:	f001 f9e0 	bl	8017f9c <uxr_get_input_reliable_stream>
 8016bdc:	4607      	mov	r7, r0
 8016bde:	b338      	cbz	r0, 8016c30 <listen_message_reliably+0x228>
 8016be0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016be2:	a80c      	add	r0, sp, #48	@ 0x30
 8016be4:	9203      	str	r2, [sp, #12]
 8016be6:	f7f8 fde3 	bl	800f7b0 <ucdr_buffer_remaining>
 8016bea:	4603      	mov	r3, r0
 8016bec:	f10d 0019 	add.w	r0, sp, #25
 8016bf0:	9a03      	ldr	r2, [sp, #12]
 8016bf2:	4651      	mov	r1, sl
 8016bf4:	9000      	str	r0, [sp, #0]
 8016bf6:	4638      	mov	r0, r7
 8016bf8:	f003 f9e4 	bl	8019fc4 <uxr_receive_reliable_message>
 8016bfc:	b1c0      	cbz	r0, 8016c30 <listen_message_reliably+0x228>
 8016bfe:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8016c02:	b393      	cbz	r3, 8016c6a <listen_message_reliably+0x262>
 8016c04:	ae14      	add	r6, sp, #80	@ 0x50
 8016c06:	f04f 0a02 	mov.w	sl, #2
 8016c0a:	e00a      	b.n	8016c22 <listen_message_reliably+0x21a>
 8016c0c:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8016c10:	4631      	mov	r1, r6
 8016c12:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 8016c16:	4640      	mov	r0, r8
 8016c18:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8016c1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016c1e:	f7ff fd69 	bl	80166f4 <read_submessage_list>
 8016c22:	2204      	movs	r2, #4
 8016c24:	4631      	mov	r1, r6
 8016c26:	4638      	mov	r0, r7
 8016c28:	f003 fa4e 	bl	801a0c8 <uxr_next_input_reliable_buffer_available>
 8016c2c:	2800      	cmp	r0, #0
 8016c2e:	d1ed      	bne.n	8016c0c <listen_message_reliably+0x204>
 8016c30:	4640      	mov	r0, r8
 8016c32:	462a      	mov	r2, r5
 8016c34:	4649      	mov	r1, r9
 8016c36:	f7ff fbd9 	bl	80163ec <write_submessage_acknack.isra.0>
 8016c3a:	4620      	mov	r0, r4
 8016c3c:	b01d      	add	sp, #116	@ 0x74
 8016c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c42:	4629      	mov	r1, r5
 8016c44:	f108 0008 	add.w	r0, r8, #8
 8016c48:	f001 f99e 	bl	8017f88 <uxr_get_input_best_effort_stream>
 8016c4c:	2800      	cmp	r0, #0
 8016c4e:	d099      	beq.n	8016b84 <listen_message_reliably+0x17c>
 8016c50:	4651      	mov	r1, sl
 8016c52:	f003 f92d 	bl	8019eb0 <uxr_receive_best_effort_message>
 8016c56:	2800      	cmp	r0, #0
 8016c58:	d094      	beq.n	8016b84 <listen_message_reliably+0x17c>
 8016c5a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8016c5e:	a90c      	add	r1, sp, #48	@ 0x30
 8016c60:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016c62:	4640      	mov	r0, r8
 8016c64:	f7ff fd46 	bl	80166f4 <read_submessage_list>
 8016c68:	e78c      	b.n	8016b84 <listen_message_reliably+0x17c>
 8016c6a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8016c6e:	a90c      	add	r1, sp, #48	@ 0x30
 8016c70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016c72:	4640      	mov	r0, r8
 8016c74:	f7ff fd3e 	bl	80166f4 <read_submessage_list>
 8016c78:	e7c4      	b.n	8016c04 <listen_message_reliably+0x1fc>
 8016c7a:	bf00      	nop

08016c7c <uxr_run_session_timeout>:
 8016c7c:	b570      	push	{r4, r5, r6, lr}
 8016c7e:	4604      	mov	r4, r0
 8016c80:	460d      	mov	r5, r1
 8016c82:	f001 f9f3 	bl	801806c <uxr_millis>
 8016c86:	4606      	mov	r6, r0
 8016c88:	4620      	mov	r0, r4
 8016c8a:	f7ff fc77 	bl	801657c <uxr_flash_output_streams>
 8016c8e:	4629      	mov	r1, r5
 8016c90:	4620      	mov	r0, r4
 8016c92:	f7ff feb9 	bl	8016a08 <listen_message_reliably>
 8016c96:	f001 f9e9 	bl	801806c <uxr_millis>
 8016c9a:	1b83      	subs	r3, r0, r6
 8016c9c:	1ae9      	subs	r1, r5, r3
 8016c9e:	2900      	cmp	r1, #0
 8016ca0:	dcf6      	bgt.n	8016c90 <uxr_run_session_timeout+0x14>
 8016ca2:	f104 0008 	add.w	r0, r4, #8
 8016ca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016caa:	f001 b983 	b.w	8017fb4 <uxr_output_streams_confirmed>
 8016cae:	bf00      	nop

08016cb0 <uxr_run_session_until_data>:
 8016cb0:	b570      	push	{r4, r5, r6, lr}
 8016cb2:	4604      	mov	r4, r0
 8016cb4:	460d      	mov	r5, r1
 8016cb6:	f001 f9d9 	bl	801806c <uxr_millis>
 8016cba:	4606      	mov	r6, r0
 8016cbc:	4620      	mov	r0, r4
 8016cbe:	f7ff fc5d 	bl	801657c <uxr_flash_output_streams>
 8016cc2:	2300      	movs	r3, #0
 8016cc4:	4629      	mov	r1, r5
 8016cc6:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8016cca:	e005      	b.n	8016cd8 <uxr_run_session_until_data+0x28>
 8016ccc:	f001 f9ce 	bl	801806c <uxr_millis>
 8016cd0:	1b83      	subs	r3, r0, r6
 8016cd2:	1ae9      	subs	r1, r5, r3
 8016cd4:	2900      	cmp	r1, #0
 8016cd6:	dd07      	ble.n	8016ce8 <uxr_run_session_until_data+0x38>
 8016cd8:	4620      	mov	r0, r4
 8016cda:	f7ff fe95 	bl	8016a08 <listen_message_reliably>
 8016cde:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8016ce2:	2800      	cmp	r0, #0
 8016ce4:	d0f2      	beq.n	8016ccc <uxr_run_session_until_data+0x1c>
 8016ce6:	bd70      	pop	{r4, r5, r6, pc}
 8016ce8:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8016cec:	bd70      	pop	{r4, r5, r6, pc}
 8016cee:	bf00      	nop

08016cf0 <uxr_run_session_until_confirm_delivery>:
 8016cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cf4:	4606      	mov	r6, r0
 8016cf6:	460d      	mov	r5, r1
 8016cf8:	f001 f9b8 	bl	801806c <uxr_millis>
 8016cfc:	4607      	mov	r7, r0
 8016cfe:	4630      	mov	r0, r6
 8016d00:	f106 0808 	add.w	r8, r6, #8
 8016d04:	f7ff fc3a 	bl	801657c <uxr_flash_output_streams>
 8016d08:	2d00      	cmp	r5, #0
 8016d0a:	db10      	blt.n	8016d2e <uxr_run_session_until_confirm_delivery+0x3e>
 8016d0c:	462c      	mov	r4, r5
 8016d0e:	e006      	b.n	8016d1e <uxr_run_session_until_confirm_delivery+0x2e>
 8016d10:	f7ff fe7a 	bl	8016a08 <listen_message_reliably>
 8016d14:	f001 f9aa 	bl	801806c <uxr_millis>
 8016d18:	1bc3      	subs	r3, r0, r7
 8016d1a:	1aec      	subs	r4, r5, r3
 8016d1c:	d407      	bmi.n	8016d2e <uxr_run_session_until_confirm_delivery+0x3e>
 8016d1e:	4640      	mov	r0, r8
 8016d20:	f001 f948 	bl	8017fb4 <uxr_output_streams_confirmed>
 8016d24:	4603      	mov	r3, r0
 8016d26:	4621      	mov	r1, r4
 8016d28:	4630      	mov	r0, r6
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d0f0      	beq.n	8016d10 <uxr_run_session_until_confirm_delivery+0x20>
 8016d2e:	4640      	mov	r0, r8
 8016d30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016d34:	f001 b93e 	b.w	8017fb4 <uxr_output_streams_confirmed>

08016d38 <uxr_run_session_until_all_status>:
 8016d38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d3c:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8016d40:	4606      	mov	r6, r0
 8016d42:	4688      	mov	r8, r1
 8016d44:	4692      	mov	sl, r2
 8016d46:	461f      	mov	r7, r3
 8016d48:	f7ff fc18 	bl	801657c <uxr_flash_output_streams>
 8016d4c:	f1bb 0f00 	cmp.w	fp, #0
 8016d50:	d004      	beq.n	8016d5c <uxr_run_session_until_all_status+0x24>
 8016d52:	465a      	mov	r2, fp
 8016d54:	21ff      	movs	r1, #255	@ 0xff
 8016d56:	4638      	mov	r0, r7
 8016d58:	f004 fb22 	bl	801b3a0 <memset>
 8016d5c:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8016d60:	1e7d      	subs	r5, r7, #1
 8016d62:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 8016d66:	f001 f981 	bl	801806c <uxr_millis>
 8016d6a:	4641      	mov	r1, r8
 8016d6c:	4681      	mov	r9, r0
 8016d6e:	4630      	mov	r0, r6
 8016d70:	f7ff fe4a 	bl	8016a08 <listen_message_reliably>
 8016d74:	f001 f97a 	bl	801806c <uxr_millis>
 8016d78:	eba0 0009 	sub.w	r0, r0, r9
 8016d7c:	eba8 0100 	sub.w	r1, r8, r0
 8016d80:	f1bb 0f00 	cmp.w	fp, #0
 8016d84:	d029      	beq.n	8016dda <uxr_run_session_until_all_status+0xa2>
 8016d86:	46ae      	mov	lr, r5
 8016d88:	f04f 0c00 	mov.w	ip, #0
 8016d8c:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8016d90:	2cff      	cmp	r4, #255	@ 0xff
 8016d92:	d015      	beq.n	8016dc0 <uxr_run_session_until_all_status+0x88>
 8016d94:	f10c 0c01 	add.w	ip, ip, #1
 8016d98:	45e3      	cmp	fp, ip
 8016d9a:	d8f7      	bhi.n	8016d8c <uxr_run_session_until_all_status+0x54>
 8016d9c:	2300      	movs	r3, #0
 8016d9e:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8016da0:	e000      	b.n	8016da4 <uxr_run_session_until_all_status+0x6c>
 8016da2:	b158      	cbz	r0, 8016dbc <uxr_run_session_until_all_status+0x84>
 8016da4:	462b      	mov	r3, r5
 8016da6:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8016daa:	3302      	adds	r3, #2
 8016dac:	2801      	cmp	r0, #1
 8016dae:	eba3 0307 	sub.w	r3, r3, r7
 8016db2:	bf8c      	ite	hi
 8016db4:	2000      	movhi	r0, #0
 8016db6:	2001      	movls	r0, #1
 8016db8:	459b      	cmp	fp, r3
 8016dba:	d8f2      	bhi.n	8016da2 <uxr_run_session_until_all_status+0x6a>
 8016dbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dc0:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8016dc4:	f10c 0c01 	add.w	ip, ip, #1
 8016dc8:	45dc      	cmp	ip, fp
 8016dca:	d201      	bcs.n	8016dd0 <uxr_run_session_until_all_status+0x98>
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d0dd      	beq.n	8016d8c <uxr_run_session_until_all_status+0x54>
 8016dd0:	2900      	cmp	r1, #0
 8016dd2:	dde3      	ble.n	8016d9c <uxr_run_session_until_all_status+0x64>
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d1ca      	bne.n	8016d6e <uxr_run_session_until_all_status+0x36>
 8016dd8:	e7e0      	b.n	8016d9c <uxr_run_session_until_all_status+0x64>
 8016dda:	2001      	movs	r0, #1
 8016ddc:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8016de0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016de4 <wait_session_status>:
 8016de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016de8:	4604      	mov	r4, r0
 8016dea:	b09d      	sub	sp, #116	@ 0x74
 8016dec:	20ff      	movs	r0, #255	@ 0xff
 8016dee:	9303      	str	r3, [sp, #12]
 8016df0:	7160      	strb	r0, [r4, #5]
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	f000 80b6 	beq.w	8016f64 <wait_session_status+0x180>
 8016df8:	4689      	mov	r9, r1
 8016dfa:	4692      	mov	sl, r2
 8016dfc:	f04f 0b00 	mov.w	fp, #0
 8016e00:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8016e02:	4652      	mov	r2, sl
 8016e04:	4649      	mov	r1, r9
 8016e06:	e9d3 0500 	ldrd	r0, r5, [r3]
 8016e0a:	47a8      	blx	r5
 8016e0c:	f001 f92e 	bl	801806c <uxr_millis>
 8016e10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016e14:	4605      	mov	r5, r0
 8016e16:	e009      	b.n	8016e2c <wait_session_status+0x48>
 8016e18:	f001 f928 	bl	801806c <uxr_millis>
 8016e1c:	1b40      	subs	r0, r0, r5
 8016e1e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	dd40      	ble.n	8016ea8 <wait_session_status+0xc4>
 8016e26:	7960      	ldrb	r0, [r4, #5]
 8016e28:	28ff      	cmp	r0, #255	@ 0xff
 8016e2a:	d145      	bne.n	8016eb8 <wait_session_status+0xd4>
 8016e2c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8016e2e:	a908      	add	r1, sp, #32
 8016e30:	6896      	ldr	r6, [r2, #8]
 8016e32:	6810      	ldr	r0, [r2, #0]
 8016e34:	aa09      	add	r2, sp, #36	@ 0x24
 8016e36:	47b0      	blx	r6
 8016e38:	2800      	cmp	r0, #0
 8016e3a:	d0ed      	beq.n	8016e18 <wait_session_status+0x34>
 8016e3c:	a80c      	add	r0, sp, #48	@ 0x30
 8016e3e:	2600      	movs	r6, #0
 8016e40:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8016e44:	f7f8 fc82 	bl	800f74c <ucdr_init_buffer>
 8016e48:	f10d 031e 	add.w	r3, sp, #30
 8016e4c:	aa07      	add	r2, sp, #28
 8016e4e:	a90c      	add	r1, sp, #48	@ 0x30
 8016e50:	4620      	mov	r0, r4
 8016e52:	f88d 601c 	strb.w	r6, [sp, #28]
 8016e56:	f000 fa8f 	bl	8017378 <uxr_read_session_header>
 8016e5a:	2800      	cmp	r0, #0
 8016e5c:	d0dc      	beq.n	8016e18 <wait_session_status+0x34>
 8016e5e:	4631      	mov	r1, r6
 8016e60:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8016e64:	f000 ffac 	bl	8017dc0 <uxr_stream_id_from_raw>
 8016e68:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8016e6c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8016e70:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8016e74:	2f01      	cmp	r7, #1
 8016e76:	9302      	str	r3, [sp, #8]
 8016e78:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8016e7c:	d05c      	beq.n	8016f38 <wait_session_status+0x154>
 8016e7e:	2f02      	cmp	r7, #2
 8016e80:	d020      	beq.n	8016ec4 <wait_session_status+0xe0>
 8016e82:	2f00      	cmp	r7, #0
 8016e84:	d1c8      	bne.n	8016e18 <wait_session_status+0x34>
 8016e86:	4639      	mov	r1, r7
 8016e88:	4638      	mov	r0, r7
 8016e8a:	f000 ff99 	bl	8017dc0 <uxr_stream_id_from_raw>
 8016e8e:	a90c      	add	r1, sp, #48	@ 0x30
 8016e90:	4602      	mov	r2, r0
 8016e92:	900b      	str	r0, [sp, #44]	@ 0x2c
 8016e94:	4620      	mov	r0, r4
 8016e96:	f7ff fc2d 	bl	80166f4 <read_submessage_list>
 8016e9a:	f001 f8e7 	bl	801806c <uxr_millis>
 8016e9e:	1b40      	subs	r0, r0, r5
 8016ea0:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	dcbe      	bgt.n	8016e26 <wait_session_status+0x42>
 8016ea8:	f10b 0b01 	add.w	fp, fp, #1
 8016eac:	9b03      	ldr	r3, [sp, #12]
 8016eae:	7960      	ldrb	r0, [r4, #5]
 8016eb0:	455b      	cmp	r3, fp
 8016eb2:	d001      	beq.n	8016eb8 <wait_session_status+0xd4>
 8016eb4:	28ff      	cmp	r0, #255	@ 0xff
 8016eb6:	d0a3      	beq.n	8016e00 <wait_session_status+0x1c>
 8016eb8:	38ff      	subs	r0, #255	@ 0xff
 8016eba:	bf18      	it	ne
 8016ebc:	2001      	movne	r0, #1
 8016ebe:	b01d      	add	sp, #116	@ 0x74
 8016ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ec4:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8016ec8:	4631      	mov	r1, r6
 8016eca:	f104 0008 	add.w	r0, r4, #8
 8016ece:	9304      	str	r3, [sp, #16]
 8016ed0:	f001 f864 	bl	8017f9c <uxr_get_input_reliable_stream>
 8016ed4:	4680      	mov	r8, r0
 8016ed6:	b348      	cbz	r0, 8016f2c <wait_session_status+0x148>
 8016ed8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016eda:	a80c      	add	r0, sp, #48	@ 0x30
 8016edc:	9205      	str	r2, [sp, #20]
 8016ede:	f7f8 fc67 	bl	800f7b0 <ucdr_buffer_remaining>
 8016ee2:	4603      	mov	r3, r0
 8016ee4:	f10d 001d 	add.w	r0, sp, #29
 8016ee8:	9a05      	ldr	r2, [sp, #20]
 8016eea:	9000      	str	r0, [sp, #0]
 8016eec:	4640      	mov	r0, r8
 8016eee:	9902      	ldr	r1, [sp, #8]
 8016ef0:	f003 f868 	bl	8019fc4 <uxr_receive_reliable_message>
 8016ef4:	b1d0      	cbz	r0, 8016f2c <wait_session_status+0x148>
 8016ef6:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d03a      	beq.n	8016f74 <wait_session_status+0x190>
 8016efe:	9f04      	ldr	r7, [sp, #16]
 8016f00:	e00a      	b.n	8016f18 <wait_session_status+0x134>
 8016f02:	f04f 0302 	mov.w	r3, #2
 8016f06:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8016f0a:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8016f0e:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8016f12:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016f14:	f7ff fbee 	bl	80166f4 <read_submessage_list>
 8016f18:	a914      	add	r1, sp, #80	@ 0x50
 8016f1a:	2204      	movs	r2, #4
 8016f1c:	4640      	mov	r0, r8
 8016f1e:	f003 f8d3 	bl	801a0c8 <uxr_next_input_reliable_buffer_available>
 8016f22:	4603      	mov	r3, r0
 8016f24:	a914      	add	r1, sp, #80	@ 0x50
 8016f26:	4620      	mov	r0, r4
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d1ea      	bne.n	8016f02 <wait_session_status+0x11e>
 8016f2c:	4632      	mov	r2, r6
 8016f2e:	9904      	ldr	r1, [sp, #16]
 8016f30:	4620      	mov	r0, r4
 8016f32:	f7ff fa5b 	bl	80163ec <write_submessage_acknack.isra.0>
 8016f36:	e76f      	b.n	8016e18 <wait_session_status+0x34>
 8016f38:	4631      	mov	r1, r6
 8016f3a:	f104 0008 	add.w	r0, r4, #8
 8016f3e:	f001 f823 	bl	8017f88 <uxr_get_input_best_effort_stream>
 8016f42:	2800      	cmp	r0, #0
 8016f44:	f43f af68 	beq.w	8016e18 <wait_session_status+0x34>
 8016f48:	9902      	ldr	r1, [sp, #8]
 8016f4a:	f002 ffb1 	bl	8019eb0 <uxr_receive_best_effort_message>
 8016f4e:	2800      	cmp	r0, #0
 8016f50:	f43f af62 	beq.w	8016e18 <wait_session_status+0x34>
 8016f54:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8016f58:	a90c      	add	r1, sp, #48	@ 0x30
 8016f5a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016f5c:	4620      	mov	r0, r4
 8016f5e:	f7ff fbc9 	bl	80166f4 <read_submessage_list>
 8016f62:	e759      	b.n	8016e18 <wait_session_status+0x34>
 8016f64:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8016f66:	e9d3 0400 	ldrd	r0, r4, [r3]
 8016f6a:	47a0      	blx	r4
 8016f6c:	2001      	movs	r0, #1
 8016f6e:	b01d      	add	sp, #116	@ 0x74
 8016f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f74:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8016f78:	a90c      	add	r1, sp, #48	@ 0x30
 8016f7a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016f7c:	4620      	mov	r0, r4
 8016f7e:	f7ff fbb9 	bl	80166f4 <read_submessage_list>
 8016f82:	e7bc      	b.n	8016efe <wait_session_status+0x11a>

08016f84 <uxr_delete_session_retries>:
 8016f84:	b530      	push	{r4, r5, lr}
 8016f86:	b08f      	sub	sp, #60	@ 0x3c
 8016f88:	4604      	mov	r4, r0
 8016f8a:	460d      	mov	r5, r1
 8016f8c:	f000 fa34 	bl	80173f8 <uxr_session_header_offset>
 8016f90:	2300      	movs	r3, #0
 8016f92:	2210      	movs	r2, #16
 8016f94:	a902      	add	r1, sp, #8
 8016f96:	9000      	str	r0, [sp, #0]
 8016f98:	a806      	add	r0, sp, #24
 8016f9a:	f7f8 fbc5 	bl	800f728 <ucdr_init_buffer_origin_offset>
 8016f9e:	a906      	add	r1, sp, #24
 8016fa0:	4620      	mov	r0, r4
 8016fa2:	f000 f979 	bl	8017298 <uxr_buffer_delete_session>
 8016fa6:	2200      	movs	r2, #0
 8016fa8:	9b06      	ldr	r3, [sp, #24]
 8016faa:	4620      	mov	r0, r4
 8016fac:	4611      	mov	r1, r2
 8016fae:	f000 f9cf 	bl	8017350 <uxr_stamp_session_header>
 8016fb2:	a806      	add	r0, sp, #24
 8016fb4:	f7f8 fbf8 	bl	800f7a8 <ucdr_buffer_length>
 8016fb8:	462b      	mov	r3, r5
 8016fba:	4602      	mov	r2, r0
 8016fbc:	a902      	add	r1, sp, #8
 8016fbe:	4620      	mov	r0, r4
 8016fc0:	f7ff ff10 	bl	8016de4 <wait_session_status>
 8016fc4:	b118      	cbz	r0, 8016fce <uxr_delete_session_retries+0x4a>
 8016fc6:	7960      	ldrb	r0, [r4, #5]
 8016fc8:	fab0 f080 	clz	r0, r0
 8016fcc:	0940      	lsrs	r0, r0, #5
 8016fce:	b00f      	add	sp, #60	@ 0x3c
 8016fd0:	bd30      	pop	{r4, r5, pc}
 8016fd2:	bf00      	nop

08016fd4 <uxr_create_session>:
 8016fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fd8:	f100 0b08 	add.w	fp, r0, #8
 8016fdc:	4604      	mov	r4, r0
 8016fde:	b0ab      	sub	sp, #172	@ 0xac
 8016fe0:	4658      	mov	r0, fp
 8016fe2:	465e      	mov	r6, fp
 8016fe4:	f000 ff22 	bl	8017e2c <uxr_reset_stream_storage>
 8016fe8:	4620      	mov	r0, r4
 8016fea:	f000 fa05 	bl	80173f8 <uxr_session_header_offset>
 8016fee:	2300      	movs	r3, #0
 8016ff0:	221c      	movs	r2, #28
 8016ff2:	a90b      	add	r1, sp, #44	@ 0x2c
 8016ff4:	9000      	str	r0, [sp, #0]
 8016ff6:	a812      	add	r0, sp, #72	@ 0x48
 8016ff8:	f7f8 fb96 	bl	800f728 <ucdr_init_buffer_origin_offset>
 8016ffc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8016ffe:	a912      	add	r1, sp, #72	@ 0x48
 8017000:	4620      	mov	r0, r4
 8017002:	8a1a      	ldrh	r2, [r3, #16]
 8017004:	3a04      	subs	r2, #4
 8017006:	b292      	uxth	r2, r2
 8017008:	f000 f91c 	bl	8017244 <uxr_buffer_create_session>
 801700c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801700e:	4620      	mov	r0, r4
 8017010:	f000 f98a 	bl	8017328 <uxr_stamp_create_session_header>
 8017014:	a812      	add	r0, sp, #72	@ 0x48
 8017016:	f7f8 fbc7 	bl	800f7a8 <ucdr_buffer_length>
 801701a:	23ff      	movs	r3, #255	@ 0xff
 801701c:	4681      	mov	r9, r0
 801701e:	7163      	strb	r3, [r4, #5]
 8017020:	230a      	movs	r3, #10
 8017022:	9303      	str	r3, [sp, #12]
 8017024:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8017026:	464a      	mov	r2, r9
 8017028:	a90b      	add	r1, sp, #44	@ 0x2c
 801702a:	e9d3 0500 	ldrd	r0, r5, [r3]
 801702e:	47a8      	blx	r5
 8017030:	f001 f81c 	bl	801806c <uxr_millis>
 8017034:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017038:	4605      	mov	r5, r0
 801703a:	e009      	b.n	8017050 <uxr_create_session+0x7c>
 801703c:	f001 f816 	bl	801806c <uxr_millis>
 8017040:	1b40      	subs	r0, r0, r5
 8017042:	7962      	ldrb	r2, [r4, #5]
 8017044:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8017048:	2b00      	cmp	r3, #0
 801704a:	dd38      	ble.n	80170be <uxr_create_session+0xea>
 801704c:	2aff      	cmp	r2, #255	@ 0xff
 801704e:	d13c      	bne.n	80170ca <uxr_create_session+0xf6>
 8017050:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8017052:	a907      	add	r1, sp, #28
 8017054:	6897      	ldr	r7, [r2, #8]
 8017056:	6810      	ldr	r0, [r2, #0]
 8017058:	aa08      	add	r2, sp, #32
 801705a:	47b8      	blx	r7
 801705c:	2800      	cmp	r0, #0
 801705e:	d0ed      	beq.n	801703c <uxr_create_session+0x68>
 8017060:	a81a      	add	r0, sp, #104	@ 0x68
 8017062:	2700      	movs	r7, #0
 8017064:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8017068:	f7f8 fb70 	bl	800f74c <ucdr_init_buffer>
 801706c:	f10d 031a 	add.w	r3, sp, #26
 8017070:	aa06      	add	r2, sp, #24
 8017072:	a91a      	add	r1, sp, #104	@ 0x68
 8017074:	4620      	mov	r0, r4
 8017076:	f88d 7018 	strb.w	r7, [sp, #24]
 801707a:	f000 f97d 	bl	8017378 <uxr_read_session_header>
 801707e:	2800      	cmp	r0, #0
 8017080:	d0dc      	beq.n	801703c <uxr_create_session+0x68>
 8017082:	4639      	mov	r1, r7
 8017084:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8017088:	f000 fe9a 	bl	8017dc0 <uxr_stream_id_from_raw>
 801708c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8017090:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8017094:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8017098:	2f01      	cmp	r7, #1
 801709a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801709e:	d053      	beq.n	8017148 <uxr_create_session+0x174>
 80170a0:	2f02      	cmp	r7, #2
 80170a2:	d018      	beq.n	80170d6 <uxr_create_session+0x102>
 80170a4:	2f00      	cmp	r7, #0
 80170a6:	d1c9      	bne.n	801703c <uxr_create_session+0x68>
 80170a8:	4639      	mov	r1, r7
 80170aa:	4638      	mov	r0, r7
 80170ac:	f000 fe88 	bl	8017dc0 <uxr_stream_id_from_raw>
 80170b0:	a91a      	add	r1, sp, #104	@ 0x68
 80170b2:	4602      	mov	r2, r0
 80170b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80170b6:	4620      	mov	r0, r4
 80170b8:	f7ff fb1c 	bl	80166f4 <read_submessage_list>
 80170bc:	e7be      	b.n	801703c <uxr_create_session+0x68>
 80170be:	9b03      	ldr	r3, [sp, #12]
 80170c0:	3b01      	subs	r3, #1
 80170c2:	9303      	str	r3, [sp, #12]
 80170c4:	d001      	beq.n	80170ca <uxr_create_session+0xf6>
 80170c6:	2aff      	cmp	r2, #255	@ 0xff
 80170c8:	d0ac      	beq.n	8017024 <uxr_create_session+0x50>
 80170ca:	2a00      	cmp	r2, #0
 80170cc:	d051      	beq.n	8017172 <uxr_create_session+0x19e>
 80170ce:	2000      	movs	r0, #0
 80170d0:	b02b      	add	sp, #172	@ 0xac
 80170d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170d6:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80170da:	4641      	mov	r1, r8
 80170dc:	4630      	mov	r0, r6
 80170de:	9304      	str	r3, [sp, #16]
 80170e0:	f000 ff5c 	bl	8017f9c <uxr_get_input_reliable_stream>
 80170e4:	4682      	mov	sl, r0
 80170e6:	b348      	cbz	r0, 801713c <uxr_create_session+0x168>
 80170e8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80170ea:	a81a      	add	r0, sp, #104	@ 0x68
 80170ec:	9205      	str	r2, [sp, #20]
 80170ee:	f7f8 fb5f 	bl	800f7b0 <ucdr_buffer_remaining>
 80170f2:	4603      	mov	r3, r0
 80170f4:	f10d 0019 	add.w	r0, sp, #25
 80170f8:	9a05      	ldr	r2, [sp, #20]
 80170fa:	4659      	mov	r1, fp
 80170fc:	9000      	str	r0, [sp, #0]
 80170fe:	4650      	mov	r0, sl
 8017100:	f002 ff60 	bl	8019fc4 <uxr_receive_reliable_message>
 8017104:	b1d0      	cbz	r0, 801713c <uxr_create_session+0x168>
 8017106:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801710a:	2b00      	cmp	r3, #0
 801710c:	d038      	beq.n	8017180 <uxr_create_session+0x1ac>
 801710e:	9f04      	ldr	r7, [sp, #16]
 8017110:	e00a      	b.n	8017128 <uxr_create_session+0x154>
 8017112:	f04f 0302 	mov.w	r3, #2
 8017116:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 801711a:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 801711e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017122:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017124:	f7ff fae6 	bl	80166f4 <read_submessage_list>
 8017128:	a922      	add	r1, sp, #136	@ 0x88
 801712a:	2204      	movs	r2, #4
 801712c:	4650      	mov	r0, sl
 801712e:	f002 ffcb 	bl	801a0c8 <uxr_next_input_reliable_buffer_available>
 8017132:	4603      	mov	r3, r0
 8017134:	a922      	add	r1, sp, #136	@ 0x88
 8017136:	4620      	mov	r0, r4
 8017138:	2b00      	cmp	r3, #0
 801713a:	d1ea      	bne.n	8017112 <uxr_create_session+0x13e>
 801713c:	4642      	mov	r2, r8
 801713e:	9904      	ldr	r1, [sp, #16]
 8017140:	4620      	mov	r0, r4
 8017142:	f7ff f953 	bl	80163ec <write_submessage_acknack.isra.0>
 8017146:	e779      	b.n	801703c <uxr_create_session+0x68>
 8017148:	4641      	mov	r1, r8
 801714a:	4630      	mov	r0, r6
 801714c:	f000 ff1c 	bl	8017f88 <uxr_get_input_best_effort_stream>
 8017150:	2800      	cmp	r0, #0
 8017152:	f43f af73 	beq.w	801703c <uxr_create_session+0x68>
 8017156:	4659      	mov	r1, fp
 8017158:	f002 feaa 	bl	8019eb0 <uxr_receive_best_effort_message>
 801715c:	2800      	cmp	r0, #0
 801715e:	f43f af6d 	beq.w	801703c <uxr_create_session+0x68>
 8017162:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8017166:	a91a      	add	r1, sp, #104	@ 0x68
 8017168:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801716a:	4620      	mov	r0, r4
 801716c:	f7ff fac2 	bl	80166f4 <read_submessage_list>
 8017170:	e764      	b.n	801703c <uxr_create_session+0x68>
 8017172:	4630      	mov	r0, r6
 8017174:	f000 fe5a 	bl	8017e2c <uxr_reset_stream_storage>
 8017178:	2001      	movs	r0, #1
 801717a:	b02b      	add	sp, #172	@ 0xac
 801717c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017180:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8017184:	a91a      	add	r1, sp, #104	@ 0x68
 8017186:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017188:	4620      	mov	r0, r4
 801718a:	f7ff fab3 	bl	80166f4 <read_submessage_list>
 801718e:	e7be      	b.n	801710e <uxr_create_session+0x13a>

08017190 <uxr_prepare_stream_to_write_submessage>:
 8017190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017194:	b082      	sub	sp, #8
 8017196:	4604      	mov	r4, r0
 8017198:	4610      	mov	r0, r2
 801719a:	4615      	mov	r5, r2
 801719c:	461e      	mov	r6, r3
 801719e:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 80171a2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80171a6:	f105 0904 	add.w	r9, r5, #4
 80171aa:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80171ae:	9101      	str	r1, [sp, #4]
 80171b0:	f000 ff56 	bl	8018060 <uxr_submessage_padding>
 80171b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80171b8:	4481      	add	r9, r0
 80171ba:	2b01      	cmp	r3, #1
 80171bc:	d01d      	beq.n	80171fa <uxr_prepare_stream_to_write_submessage+0x6a>
 80171be:	2b02      	cmp	r3, #2
 80171c0:	d116      	bne.n	80171f0 <uxr_prepare_stream_to_write_submessage+0x60>
 80171c2:	f104 0008 	add.w	r0, r4, #8
 80171c6:	4651      	mov	r1, sl
 80171c8:	f000 fed2 	bl	8017f70 <uxr_get_output_reliable_stream>
 80171cc:	4604      	mov	r4, r0
 80171ce:	b158      	cbz	r0, 80171e8 <uxr_prepare_stream_to_write_submessage+0x58>
 80171d0:	4649      	mov	r1, r9
 80171d2:	4632      	mov	r2, r6
 80171d4:	f003 f93e 	bl	801a454 <uxr_prepare_reliable_buffer_to_write>
 80171d8:	4604      	mov	r4, r0
 80171da:	b12c      	cbz	r4, 80171e8 <uxr_prepare_stream_to_write_submessage+0x58>
 80171dc:	4643      	mov	r3, r8
 80171de:	b2aa      	uxth	r2, r5
 80171e0:	4639      	mov	r1, r7
 80171e2:	4630      	mov	r0, r6
 80171e4:	f000 fefc 	bl	8017fe0 <uxr_buffer_submessage_header>
 80171e8:	4620      	mov	r0, r4
 80171ea:	b002      	add	sp, #8
 80171ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171f0:	2400      	movs	r4, #0
 80171f2:	4620      	mov	r0, r4
 80171f4:	b002      	add	sp, #8
 80171f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171fa:	f104 0008 	add.w	r0, r4, #8
 80171fe:	4651      	mov	r1, sl
 8017200:	f000 feae 	bl	8017f60 <uxr_get_output_best_effort_stream>
 8017204:	4604      	mov	r4, r0
 8017206:	2800      	cmp	r0, #0
 8017208:	d0ee      	beq.n	80171e8 <uxr_prepare_stream_to_write_submessage+0x58>
 801720a:	4649      	mov	r1, r9
 801720c:	4632      	mov	r2, r6
 801720e:	f003 f84b 	bl	801a2a8 <uxr_prepare_best_effort_buffer_to_write>
 8017212:	4604      	mov	r4, r0
 8017214:	e7e1      	b.n	80171da <uxr_prepare_stream_to_write_submessage+0x4a>
 8017216:	bf00      	nop

08017218 <uxr_init_session_info>:
 8017218:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801721c:	23ff      	movs	r3, #255	@ 0xff
 801721e:	7102      	strb	r2, [r0, #4]
 8017220:	f880 c001 	strb.w	ip, [r0, #1]
 8017224:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8017228:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801722c:	7001      	strb	r1, [r0, #0]
 801722e:	f880 c002 	strb.w	ip, [r0, #2]
 8017232:	7143      	strb	r3, [r0, #5]
 8017234:	70c2      	strb	r2, [r0, #3]
 8017236:	b500      	push	{lr}
 8017238:	f04f 0e09 	mov.w	lr, #9
 801723c:	f8a0 e006 	strh.w	lr, [r0, #6]
 8017240:	f85d fb04 	ldr.w	pc, [sp], #4

08017244 <uxr_buffer_create_session>:
 8017244:	b530      	push	{r4, r5, lr}
 8017246:	2300      	movs	r3, #0
 8017248:	b089      	sub	sp, #36	@ 0x24
 801724a:	4d12      	ldr	r5, [pc, #72]	@ (8017294 <uxr_buffer_create_session+0x50>)
 801724c:	460c      	mov	r4, r1
 801724e:	9307      	str	r3, [sp, #28]
 8017250:	4619      	mov	r1, r3
 8017252:	f8ad 201c 	strh.w	r2, [sp, #28]
 8017256:	2201      	movs	r2, #1
 8017258:	9301      	str	r3, [sp, #4]
 801725a:	80c2      	strh	r2, [r0, #6]
 801725c:	f88d 2004 	strb.w	r2, [sp, #4]
 8017260:	682a      	ldr	r2, [r5, #0]
 8017262:	9303      	str	r3, [sp, #12]
 8017264:	9200      	str	r2, [sp, #0]
 8017266:	88aa      	ldrh	r2, [r5, #4]
 8017268:	9306      	str	r3, [sp, #24]
 801726a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801726e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8017272:	9202      	str	r2, [sp, #8]
 8017274:	7802      	ldrb	r2, [r0, #0]
 8017276:	4620      	mov	r0, r4
 8017278:	f88d 200c 	strb.w	r2, [sp, #12]
 801727c:	2210      	movs	r2, #16
 801727e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8017282:	f000 fead 	bl	8017fe0 <uxr_buffer_submessage_header>
 8017286:	4669      	mov	r1, sp
 8017288:	4620      	mov	r0, r4
 801728a:	f001 fcbb 	bl	8018c04 <uxr_serialize_CREATE_CLIENT_Payload>
 801728e:	b009      	add	sp, #36	@ 0x24
 8017290:	bd30      	pop	{r4, r5, pc}
 8017292:	bf00      	nop
 8017294:	0801c2c8 	.word	0x0801c2c8

08017298 <uxr_buffer_delete_session>:
 8017298:	4a0c      	ldr	r2, [pc, #48]	@ (80172cc <uxr_buffer_delete_session+0x34>)
 801729a:	2302      	movs	r3, #2
 801729c:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 80172a0:	b510      	push	{r4, lr}
 80172a2:	460c      	mov	r4, r1
 80172a4:	b082      	sub	sp, #8
 80172a6:	8911      	ldrh	r1, [r2, #8]
 80172a8:	2204      	movs	r2, #4
 80172aa:	80c3      	strh	r3, [r0, #6]
 80172ac:	2300      	movs	r3, #0
 80172ae:	f8ad 1006 	strh.w	r1, [sp, #6]
 80172b2:	4620      	mov	r0, r4
 80172b4:	2103      	movs	r1, #3
 80172b6:	f8ad c004 	strh.w	ip, [sp, #4]
 80172ba:	f000 fe91 	bl	8017fe0 <uxr_buffer_submessage_header>
 80172be:	a901      	add	r1, sp, #4
 80172c0:	4620      	mov	r0, r4
 80172c2:	f001 fd47 	bl	8018d54 <uxr_serialize_DELETE_Payload>
 80172c6:	b002      	add	sp, #8
 80172c8:	bd10      	pop	{r4, pc}
 80172ca:	bf00      	nop
 80172cc:	0801c2c8 	.word	0x0801c2c8

080172d0 <uxr_read_create_session_status>:
 80172d0:	b510      	push	{r4, lr}
 80172d2:	460b      	mov	r3, r1
 80172d4:	b088      	sub	sp, #32
 80172d6:	4604      	mov	r4, r0
 80172d8:	a901      	add	r1, sp, #4
 80172da:	4618      	mov	r0, r3
 80172dc:	f001 fd4a 	bl	8018d74 <uxr_deserialize_STATUS_AGENT_Payload>
 80172e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80172e4:	7163      	strb	r3, [r4, #5]
 80172e6:	b008      	add	sp, #32
 80172e8:	bd10      	pop	{r4, pc}
 80172ea:	bf00      	nop

080172ec <uxr_read_delete_session_status>:
 80172ec:	b510      	push	{r4, lr}
 80172ee:	b084      	sub	sp, #16
 80172f0:	4604      	mov	r4, r0
 80172f2:	4608      	mov	r0, r1
 80172f4:	a902      	add	r1, sp, #8
 80172f6:	f001 fd6d 	bl	8018dd4 <uxr_deserialize_STATUS_Payload>
 80172fa:	88e3      	ldrh	r3, [r4, #6]
 80172fc:	2b02      	cmp	r3, #2
 80172fe:	d001      	beq.n	8017304 <uxr_read_delete_session_status+0x18>
 8017300:	b004      	add	sp, #16
 8017302:	bd10      	pop	{r4, pc}
 8017304:	f10d 000a 	add.w	r0, sp, #10
 8017308:	f7fe fec6 	bl	8016098 <uxr_object_id_from_raw>
 801730c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8017310:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8017314:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8017318:	b29b      	uxth	r3, r3
 801731a:	2b02      	cmp	r3, #2
 801731c:	d1f0      	bne.n	8017300 <uxr_read_delete_session_status+0x14>
 801731e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8017322:	7163      	strb	r3, [r4, #5]
 8017324:	e7ec      	b.n	8017300 <uxr_read_delete_session_status+0x14>
 8017326:	bf00      	nop

08017328 <uxr_stamp_create_session_header>:
 8017328:	b510      	push	{r4, lr}
 801732a:	2208      	movs	r2, #8
 801732c:	b08a      	sub	sp, #40	@ 0x28
 801732e:	4604      	mov	r4, r0
 8017330:	eb0d 0002 	add.w	r0, sp, r2
 8017334:	f7f8 fa0a 	bl	800f74c <ucdr_init_buffer>
 8017338:	f814 1b01 	ldrb.w	r1, [r4], #1
 801733c:	2300      	movs	r3, #0
 801733e:	a802      	add	r0, sp, #8
 8017340:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8017344:	9400      	str	r4, [sp, #0]
 8017346:	461a      	mov	r2, r3
 8017348:	f000 fef2 	bl	8018130 <uxr_serialize_message_header>
 801734c:	b00a      	add	sp, #40	@ 0x28
 801734e:	bd10      	pop	{r4, pc}

08017350 <uxr_stamp_session_header>:
 8017350:	b530      	push	{r4, r5, lr}
 8017352:	b08d      	sub	sp, #52	@ 0x34
 8017354:	4604      	mov	r4, r0
 8017356:	460d      	mov	r5, r1
 8017358:	4619      	mov	r1, r3
 801735a:	a804      	add	r0, sp, #16
 801735c:	9203      	str	r2, [sp, #12]
 801735e:	2208      	movs	r2, #8
 8017360:	f7f8 f9f4 	bl	800f74c <ucdr_init_buffer>
 8017364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017368:	9b03      	ldr	r3, [sp, #12]
 801736a:	462a      	mov	r2, r5
 801736c:	a804      	add	r0, sp, #16
 801736e:	9400      	str	r4, [sp, #0]
 8017370:	f000 fede 	bl	8018130 <uxr_serialize_message_header>
 8017374:	b00d      	add	sp, #52	@ 0x34
 8017376:	bd30      	pop	{r4, r5, pc}

08017378 <uxr_read_session_header>:
 8017378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801737c:	4607      	mov	r7, r0
 801737e:	b084      	sub	sp, #16
 8017380:	4608      	mov	r0, r1
 8017382:	460c      	mov	r4, r1
 8017384:	4615      	mov	r5, r2
 8017386:	461e      	mov	r6, r3
 8017388:	f7f8 fa12 	bl	800f7b0 <ucdr_buffer_remaining>
 801738c:	2808      	cmp	r0, #8
 801738e:	d803      	bhi.n	8017398 <uxr_read_session_header+0x20>
 8017390:	2000      	movs	r0, #0
 8017392:	b004      	add	sp, #16
 8017394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017398:	f10d 080c 	add.w	r8, sp, #12
 801739c:	4633      	mov	r3, r6
 801739e:	462a      	mov	r2, r5
 80173a0:	4620      	mov	r0, r4
 80173a2:	f10d 010b 	add.w	r1, sp, #11
 80173a6:	f8cd 8000 	str.w	r8, [sp]
 80173aa:	f000 fedf 	bl	801816c <uxr_deserialize_message_header>
 80173ae:	783a      	ldrb	r2, [r7, #0]
 80173b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80173b4:	4293      	cmp	r3, r2
 80173b6:	d1eb      	bne.n	8017390 <uxr_read_session_header+0x18>
 80173b8:	061b      	lsls	r3, r3, #24
 80173ba:	d41b      	bmi.n	80173f4 <uxr_read_session_header+0x7c>
 80173bc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80173c0:	787b      	ldrb	r3, [r7, #1]
 80173c2:	429a      	cmp	r2, r3
 80173c4:	d003      	beq.n	80173ce <uxr_read_session_header+0x56>
 80173c6:	2001      	movs	r0, #1
 80173c8:	f080 0001 	eor.w	r0, r0, #1
 80173cc:	e7e1      	b.n	8017392 <uxr_read_session_header+0x1a>
 80173ce:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80173d2:	1cb8      	adds	r0, r7, #2
 80173d4:	78bb      	ldrb	r3, [r7, #2]
 80173d6:	429a      	cmp	r2, r3
 80173d8:	d1f5      	bne.n	80173c6 <uxr_read_session_header+0x4e>
 80173da:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80173de:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80173e2:	429a      	cmp	r2, r3
 80173e4:	d1ef      	bne.n	80173c6 <uxr_read_session_header+0x4e>
 80173e6:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80173ea:	7843      	ldrb	r3, [r0, #1]
 80173ec:	429a      	cmp	r2, r3
 80173ee:	d1ea      	bne.n	80173c6 <uxr_read_session_header+0x4e>
 80173f0:	2000      	movs	r0, #0
 80173f2:	e7e9      	b.n	80173c8 <uxr_read_session_header+0x50>
 80173f4:	2001      	movs	r0, #1
 80173f6:	e7cc      	b.n	8017392 <uxr_read_session_header+0x1a>

080173f8 <uxr_session_header_offset>:
 80173f8:	f990 3000 	ldrsb.w	r3, [r0]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	bfac      	ite	ge
 8017400:	2008      	movge	r0, #8
 8017402:	2004      	movlt	r0, #4
 8017404:	4770      	bx	lr
 8017406:	bf00      	nop

08017408 <uxr_init_base_object_request>:
 8017408:	b510      	push	{r4, lr}
 801740a:	b082      	sub	sp, #8
 801740c:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8017410:	9101      	str	r1, [sp, #4]
 8017412:	88c3      	ldrh	r3, [r0, #6]
 8017414:	f1a3 010a 	sub.w	r1, r3, #10
 8017418:	b289      	uxth	r1, r1
 801741a:	42a1      	cmp	r1, r4
 801741c:	d80f      	bhi.n	801743e <uxr_init_base_object_request+0x36>
 801741e:	3301      	adds	r3, #1
 8017420:	b29c      	uxth	r4, r3
 8017422:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8017426:	b2db      	uxtb	r3, r3
 8017428:	80c4      	strh	r4, [r0, #6]
 801742a:	1c91      	adds	r1, r2, #2
 801742c:	9801      	ldr	r0, [sp, #4]
 801742e:	f882 c000 	strb.w	ip, [r2]
 8017432:	7053      	strb	r3, [r2, #1]
 8017434:	f7fe fe44 	bl	80160c0 <uxr_object_id_to_raw>
 8017438:	4620      	mov	r0, r4
 801743a:	b002      	add	sp, #8
 801743c:	bd10      	pop	{r4, pc}
 801743e:	230a      	movs	r3, #10
 8017440:	f04f 0c00 	mov.w	ip, #0
 8017444:	461c      	mov	r4, r3
 8017446:	e7ef      	b.n	8017428 <uxr_init_base_object_request+0x20>

08017448 <uxr_parse_base_object_request>:
 8017448:	b570      	push	{r4, r5, r6, lr}
 801744a:	4604      	mov	r4, r0
 801744c:	3002      	adds	r0, #2
 801744e:	460d      	mov	r5, r1
 8017450:	4616      	mov	r6, r2
 8017452:	f7fe fe21 	bl	8016098 <uxr_object_id_from_raw>
 8017456:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801745a:	8028      	strh	r0, [r5, #0]
 801745c:	806b      	strh	r3, [r5, #2]
 801745e:	7822      	ldrb	r2, [r4, #0]
 8017460:	7863      	ldrb	r3, [r4, #1]
 8017462:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8017466:	8033      	strh	r3, [r6, #0]
 8017468:	bd70      	pop	{r4, r5, r6, pc}
 801746a:	bf00      	nop

0801746c <uxr_init_framing_io>:
 801746c:	2300      	movs	r3, #0
 801746e:	7041      	strb	r1, [r0, #1]
 8017470:	7003      	strb	r3, [r0, #0]
 8017472:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8017474:	4770      	bx	lr
 8017476:	bf00      	nop

08017478 <uxr_write_framed_msg>:
 8017478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801747c:	4617      	mov	r7, r2
 801747e:	7842      	ldrb	r2, [r0, #1]
 8017480:	460e      	mov	r6, r1
 8017482:	b083      	sub	sp, #12
 8017484:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8017488:	469b      	mov	fp, r3
 801748a:	237e      	movs	r3, #126	@ 0x7e
 801748c:	4604      	mov	r4, r0
 801748e:	2901      	cmp	r1, #1
 8017490:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8017494:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8017498:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801749c:	f240 8115 	bls.w	80176ca <uxr_write_framed_msg+0x252>
 80174a0:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80174a4:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80174a8:	2202      	movs	r2, #2
 80174aa:	2901      	cmp	r1, #1
 80174ac:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80174b0:	d952      	bls.n	8017558 <uxr_write_framed_msg+0xe0>
 80174b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80174b4:	2103      	movs	r1, #3
 80174b6:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80174ba:	b2dd      	uxtb	r5, r3
 80174bc:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80174c0:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 80174c4:	2a01      	cmp	r2, #1
 80174c6:	d95c      	bls.n	8017582 <uxr_write_framed_msg+0x10a>
 80174c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80174ca:	1862      	adds	r2, r4, r1
 80174cc:	3101      	adds	r1, #1
 80174ce:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80174d2:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 80174d6:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80174da:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80174de:	2a01      	cmp	r2, #1
 80174e0:	d961      	bls.n	80175a6 <uxr_write_framed_msg+0x12e>
 80174e2:	1c4a      	adds	r2, r1, #1
 80174e4:	4421      	add	r1, r4
 80174e6:	b2d2      	uxtb	r2, r2
 80174e8:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80174ec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d06a      	beq.n	80175ca <uxr_write_framed_msg+0x152>
 80174f4:	f04f 0800 	mov.w	r8, #0
 80174f8:	46c1      	mov	r9, r8
 80174fa:	e016      	b.n	801752a <uxr_write_framed_msg+0xb2>
 80174fc:	2a29      	cmp	r2, #41	@ 0x29
 80174fe:	d868      	bhi.n	80175d2 <uxr_write_framed_msg+0x15a>
 8017500:	18a0      	adds	r0, r4, r2
 8017502:	3201      	adds	r2, #1
 8017504:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8017508:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801750c:	ea88 0101 	eor.w	r1, r8, r1
 8017510:	4b7d      	ldr	r3, [pc, #500]	@ (8017708 <uxr_write_framed_msg+0x290>)
 8017512:	f109 0901 	add.w	r9, r9, #1
 8017516:	b2c9      	uxtb	r1, r1
 8017518:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801751c:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8017520:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017522:	454b      	cmp	r3, r9
 8017524:	d969      	bls.n	80175fa <uxr_write_framed_msg+0x182>
 8017526:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801752a:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801752e:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8017532:	2801      	cmp	r0, #1
 8017534:	d8e2      	bhi.n	80174fc <uxr_write_framed_msg+0x84>
 8017536:	1c50      	adds	r0, r2, #1
 8017538:	b2c0      	uxtb	r0, r0
 801753a:	2829      	cmp	r0, #41	@ 0x29
 801753c:	d849      	bhi.n	80175d2 <uxr_write_framed_msg+0x15a>
 801753e:	18a0      	adds	r0, r4, r2
 8017540:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8017544:	3202      	adds	r2, #2
 8017546:	f081 0520 	eor.w	r5, r1, #32
 801754a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801754e:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8017552:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017556:	e7d9      	b.n	801750c <uxr_write_framed_msg+0x94>
 8017558:	2104      	movs	r1, #4
 801755a:	f04f 0c03 	mov.w	ip, #3
 801755e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017560:	4422      	add	r2, r4
 8017562:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8017566:	44a4      	add	ip, r4
 8017568:	b2dd      	uxtb	r5, r3
 801756a:	f080 0020 	eor.w	r0, r0, #32
 801756e:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 8017572:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8017576:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 801757a:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801757e:	2a01      	cmp	r2, #1
 8017580:	d8a2      	bhi.n	80174c8 <uxr_write_framed_msg+0x50>
 8017582:	1862      	adds	r2, r4, r1
 8017584:	207d      	movs	r0, #125	@ 0x7d
 8017586:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017588:	f085 0520 	eor.w	r5, r5, #32
 801758c:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 8017590:	3102      	adds	r1, #2
 8017592:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8017596:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 801759a:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801759e:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80175a2:	2a01      	cmp	r2, #1
 80175a4:	d89d      	bhi.n	80174e2 <uxr_write_framed_msg+0x6a>
 80175a6:	1c4d      	adds	r5, r1, #1
 80175a8:	1c8a      	adds	r2, r1, #2
 80175aa:	f080 0020 	eor.w	r0, r0, #32
 80175ae:	4421      	add	r1, r4
 80175b0:	fa54 f585 	uxtab	r5, r4, r5
 80175b4:	b2d2      	uxtb	r2, r2
 80175b6:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80175ba:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 80175be:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 80175c2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d194      	bne.n	80174f4 <uxr_write_framed_msg+0x7c>
 80175ca:	4619      	mov	r1, r3
 80175cc:	f8ad 3004 	strh.w	r3, [sp, #4]
 80175d0:	e019      	b.n	8017606 <uxr_write_framed_msg+0x18e>
 80175d2:	2500      	movs	r5, #0
 80175d4:	e000      	b.n	80175d8 <uxr_write_framed_msg+0x160>
 80175d6:	b160      	cbz	r0, 80175f2 <uxr_write_framed_msg+0x17a>
 80175d8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80175dc:	1b52      	subs	r2, r2, r5
 80175de:	4653      	mov	r3, sl
 80175e0:	4638      	mov	r0, r7
 80175e2:	4421      	add	r1, r4
 80175e4:	47b0      	blx	r6
 80175e6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80175ea:	4405      	add	r5, r0
 80175ec:	4295      	cmp	r5, r2
 80175ee:	d3f2      	bcc.n	80175d6 <uxr_write_framed_msg+0x15e>
 80175f0:	d066      	beq.n	80176c0 <uxr_write_framed_msg+0x248>
 80175f2:	2000      	movs	r0, #0
 80175f4:	b003      	add	sp, #12
 80175f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175fa:	fa5f f188 	uxtb.w	r1, r8
 80175fe:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8017602:	f8ad 8004 	strh.w	r8, [sp, #4]
 8017606:	f04f 0900 	mov.w	r9, #0
 801760a:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 801760e:	46c8      	mov	r8, r9
 8017610:	e013      	b.n	801763a <uxr_write_framed_msg+0x1c2>
 8017612:	2a29      	cmp	r2, #41	@ 0x29
 8017614:	d824      	bhi.n	8017660 <uxr_write_framed_msg+0x1e8>
 8017616:	18a3      	adds	r3, r4, r2
 8017618:	3201      	adds	r2, #1
 801761a:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 801761e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017622:	f109 0901 	add.w	r9, r9, #1
 8017626:	f1b9 0f02 	cmp.w	r9, #2
 801762a:	d02d      	beq.n	8017688 <uxr_write_framed_msg+0x210>
 801762c:	f109 0308 	add.w	r3, r9, #8
 8017630:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8017634:	446b      	add	r3, sp
 8017636:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 801763a:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 801763e:	2b01      	cmp	r3, #1
 8017640:	d8e7      	bhi.n	8017612 <uxr_write_framed_msg+0x19a>
 8017642:	1c53      	adds	r3, r2, #1
 8017644:	b2db      	uxtb	r3, r3
 8017646:	2b29      	cmp	r3, #41	@ 0x29
 8017648:	d80a      	bhi.n	8017660 <uxr_write_framed_msg+0x1e8>
 801764a:	18a3      	adds	r3, r4, r2
 801764c:	f081 0120 	eor.w	r1, r1, #32
 8017650:	3202      	adds	r2, #2
 8017652:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 8017656:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 801765a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801765e:	e7e0      	b.n	8017622 <uxr_write_framed_msg+0x1aa>
 8017660:	2500      	movs	r5, #0
 8017662:	e001      	b.n	8017668 <uxr_write_framed_msg+0x1f0>
 8017664:	2800      	cmp	r0, #0
 8017666:	d0c4      	beq.n	80175f2 <uxr_write_framed_msg+0x17a>
 8017668:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801766c:	1b52      	subs	r2, r2, r5
 801766e:	4653      	mov	r3, sl
 8017670:	4638      	mov	r0, r7
 8017672:	4421      	add	r1, r4
 8017674:	47b0      	blx	r6
 8017676:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801767a:	4405      	add	r5, r0
 801767c:	4295      	cmp	r5, r2
 801767e:	d3f1      	bcc.n	8017664 <uxr_write_framed_msg+0x1ec>
 8017680:	d1b7      	bne.n	80175f2 <uxr_write_framed_msg+0x17a>
 8017682:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 8017686:	e7d1      	b.n	801762c <uxr_write_framed_msg+0x1b4>
 8017688:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801768c:	b19a      	cbz	r2, 80176b6 <uxr_write_framed_msg+0x23e>
 801768e:	2500      	movs	r5, #0
 8017690:	e001      	b.n	8017696 <uxr_write_framed_msg+0x21e>
 8017692:	2800      	cmp	r0, #0
 8017694:	d0ad      	beq.n	80175f2 <uxr_write_framed_msg+0x17a>
 8017696:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801769a:	1b52      	subs	r2, r2, r5
 801769c:	4653      	mov	r3, sl
 801769e:	4638      	mov	r0, r7
 80176a0:	4421      	add	r1, r4
 80176a2:	47b0      	blx	r6
 80176a4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80176a8:	4405      	add	r5, r0
 80176aa:	4295      	cmp	r5, r2
 80176ac:	d3f1      	bcc.n	8017692 <uxr_write_framed_msg+0x21a>
 80176ae:	d1a0      	bne.n	80175f2 <uxr_write_framed_msg+0x17a>
 80176b0:	2300      	movs	r3, #0
 80176b2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80176b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80176b8:	b298      	uxth	r0, r3
 80176ba:	b003      	add	sp, #12
 80176bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176c0:	f04f 0300 	mov.w	r3, #0
 80176c4:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80176c8:	e72a      	b.n	8017520 <uxr_write_framed_msg+0xa8>
 80176ca:	217d      	movs	r1, #125	@ 0x7d
 80176cc:	f082 0220 	eor.w	r2, r2, #32
 80176d0:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 80176d4:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80176d8:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 80176dc:	2203      	movs	r2, #3
 80176de:	2901      	cmp	r1, #1
 80176e0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80176e4:	d803      	bhi.n	80176ee <uxr_write_framed_msg+0x276>
 80176e6:	2105      	movs	r1, #5
 80176e8:	f04f 0c04 	mov.w	ip, #4
 80176ec:	e737      	b.n	801755e <uxr_write_framed_msg+0xe6>
 80176ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80176f0:	2104      	movs	r1, #4
 80176f2:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 80176f6:	b2dd      	uxtb	r5, r3
 80176f8:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80176fc:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8017700:	2a01      	cmp	r2, #1
 8017702:	f63f aee1 	bhi.w	80174c8 <uxr_write_framed_msg+0x50>
 8017706:	e73c      	b.n	8017582 <uxr_write_framed_msg+0x10a>
 8017708:	0801cbd4 	.word	0x0801cbd4

0801770c <uxr_framing_read_transport>:
 801770c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017710:	4604      	mov	r4, r0
 8017712:	b085      	sub	sp, #20
 8017714:	4692      	mov	sl, r2
 8017716:	4689      	mov	r9, r1
 8017718:	461d      	mov	r5, r3
 801771a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801771c:	f000 fca6 	bl	801806c <uxr_millis>
 8017720:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8017724:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8017728:	4680      	mov	r8, r0
 801772a:	42ba      	cmp	r2, r7
 801772c:	d05f      	beq.n	80177ee <uxr_framing_read_transport+0xe2>
 801772e:	d817      	bhi.n	8017760 <uxr_framing_read_transport+0x54>
 8017730:	3f01      	subs	r7, #1
 8017732:	1aba      	subs	r2, r7, r2
 8017734:	2700      	movs	r7, #0
 8017736:	b2d2      	uxtb	r2, r2
 8017738:	42b2      	cmp	r2, r6
 801773a:	d81a      	bhi.n	8017772 <uxr_framing_read_transport+0x66>
 801773c:	19d3      	adds	r3, r2, r7
 801773e:	42b3      	cmp	r3, r6
 8017740:	d852      	bhi.n	80177e8 <uxr_framing_read_transport+0xdc>
 8017742:	b9d2      	cbnz	r2, 801777a <uxr_framing_read_transport+0x6e>
 8017744:	2600      	movs	r6, #0
 8017746:	f000 fc91 	bl	801806c <uxr_millis>
 801774a:	682b      	ldr	r3, [r5, #0]
 801774c:	eba0 0008 	sub.w	r0, r0, r8
 8017750:	1a1b      	subs	r3, r3, r0
 8017752:	4630      	mov	r0, r6
 8017754:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017758:	602b      	str	r3, [r5, #0]
 801775a:	b005      	add	sp, #20
 801775c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017760:	2f00      	cmp	r7, #0
 8017762:	d060      	beq.n	8017826 <uxr_framing_read_transport+0x11a>
 8017764:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 8017768:	3f01      	subs	r7, #1
 801776a:	b2d2      	uxtb	r2, r2
 801776c:	b2ff      	uxtb	r7, r7
 801776e:	42b2      	cmp	r2, r6
 8017770:	d9e4      	bls.n	801773c <uxr_framing_read_transport+0x30>
 8017772:	b2f2      	uxtb	r2, r6
 8017774:	2700      	movs	r7, #0
 8017776:	2a00      	cmp	r2, #0
 8017778:	d0e4      	beq.n	8017744 <uxr_framing_read_transport+0x38>
 801777a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801777c:	4650      	mov	r0, sl
 801777e:	9203      	str	r2, [sp, #12]
 8017780:	9300      	str	r3, [sp, #0]
 8017782:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017786:	682b      	ldr	r3, [r5, #0]
 8017788:	3102      	adds	r1, #2
 801778a:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 8017830 <uxr_framing_read_transport+0x124>
 801778e:	4421      	add	r1, r4
 8017790:	47c8      	blx	r9
 8017792:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8017796:	4606      	mov	r6, r0
 8017798:	4403      	add	r3, r0
 801779a:	0859      	lsrs	r1, r3, #1
 801779c:	fbab 2101 	umull	r2, r1, fp, r1
 80177a0:	222a      	movs	r2, #42	@ 0x2a
 80177a2:	0889      	lsrs	r1, r1, #2
 80177a4:	fb02 3111 	mls	r1, r2, r1, r3
 80177a8:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80177ac:	2800      	cmp	r0, #0
 80177ae:	d0c9      	beq.n	8017744 <uxr_framing_read_transport+0x38>
 80177b0:	9a03      	ldr	r2, [sp, #12]
 80177b2:	4290      	cmp	r0, r2
 80177b4:	d1c7      	bne.n	8017746 <uxr_framing_read_transport+0x3a>
 80177b6:	2f00      	cmp	r7, #0
 80177b8:	d0c5      	beq.n	8017746 <uxr_framing_read_transport+0x3a>
 80177ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80177bc:	3102      	adds	r1, #2
 80177be:	463a      	mov	r2, r7
 80177c0:	4650      	mov	r0, sl
 80177c2:	4421      	add	r1, r4
 80177c4:	9300      	str	r3, [sp, #0]
 80177c6:	2300      	movs	r3, #0
 80177c8:	47c8      	blx	r9
 80177ca:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 80177ce:	4406      	add	r6, r0
 80177d0:	1813      	adds	r3, r2, r0
 80177d2:	085a      	lsrs	r2, r3, #1
 80177d4:	fbab 1b02 	umull	r1, fp, fp, r2
 80177d8:	222a      	movs	r2, #42	@ 0x2a
 80177da:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 80177de:	fb02 331b 	mls	r3, r2, fp, r3
 80177e2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80177e6:	e7ae      	b.n	8017746 <uxr_framing_read_transport+0x3a>
 80177e8:	1ab6      	subs	r6, r6, r2
 80177ea:	b2f7      	uxtb	r7, r6
 80177ec:	e7a9      	b.n	8017742 <uxr_framing_read_transport+0x36>
 80177ee:	2300      	movs	r3, #0
 80177f0:	2e28      	cmp	r6, #40	@ 0x28
 80177f2:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 80177f4:	d9bd      	bls.n	8017772 <uxr_framing_read_transport+0x66>
 80177f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80177f8:	2229      	movs	r2, #41	@ 0x29
 80177fa:	1ca1      	adds	r1, r4, #2
 80177fc:	4650      	mov	r0, sl
 80177fe:	9300      	str	r3, [sp, #0]
 8017800:	682b      	ldr	r3, [r5, #0]
 8017802:	47c8      	blx	r9
 8017804:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8017808:	4606      	mov	r6, r0
 801780a:	212a      	movs	r1, #42	@ 0x2a
 801780c:	4403      	add	r3, r0
 801780e:	4808      	ldr	r0, [pc, #32]	@ (8017830 <uxr_framing_read_transport+0x124>)
 8017810:	085a      	lsrs	r2, r3, #1
 8017812:	fba0 0202 	umull	r0, r2, r0, r2
 8017816:	0892      	lsrs	r2, r2, #2
 8017818:	fb01 3312 	mls	r3, r1, r2, r3
 801781c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8017820:	2e00      	cmp	r6, #0
 8017822:	d08f      	beq.n	8017744 <uxr_framing_read_transport+0x38>
 8017824:	e78f      	b.n	8017746 <uxr_framing_read_transport+0x3a>
 8017826:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 801782a:	b2d2      	uxtb	r2, r2
 801782c:	e784      	b.n	8017738 <uxr_framing_read_transport+0x2c>
 801782e:	bf00      	nop
 8017830:	30c30c31 	.word	0x30c30c31

08017834 <uxr_read_framed_msg>:
 8017834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017838:	461e      	mov	r6, r3
 801783a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801783e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8017842:	b083      	sub	sp, #12
 8017844:	4604      	mov	r4, r0
 8017846:	4688      	mov	r8, r1
 8017848:	429d      	cmp	r5, r3
 801784a:	4691      	mov	r9, r2
 801784c:	f000 818c 	beq.w	8017b68 <uxr_read_framed_msg+0x334>
 8017850:	7823      	ldrb	r3, [r4, #0]
 8017852:	4dc3      	ldr	r5, [pc, #780]	@ (8017b60 <uxr_read_framed_msg+0x32c>)
 8017854:	4fc3      	ldr	r7, [pc, #780]	@ (8017b64 <uxr_read_framed_msg+0x330>)
 8017856:	2b07      	cmp	r3, #7
 8017858:	d8fd      	bhi.n	8017856 <uxr_read_framed_msg+0x22>
 801785a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801785e:	011c      	.short	0x011c
 8017860:	00d900fb 	.word	0x00d900fb
 8017864:	008f00ba 	.word	0x008f00ba
 8017868:	00320051 	.word	0x00320051
 801786c:	0008      	.short	0x0008
 801786e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017872:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017876:	4299      	cmp	r1, r3
 8017878:	f000 814d 	beq.w	8017b16 <uxr_read_framed_msg+0x2e2>
 801787c:	18e2      	adds	r2, r4, r3
 801787e:	7892      	ldrb	r2, [r2, #2]
 8017880:	2a7d      	cmp	r2, #125	@ 0x7d
 8017882:	f000 81b8 	beq.w	8017bf6 <uxr_read_framed_msg+0x3c2>
 8017886:	3301      	adds	r3, #1
 8017888:	212a      	movs	r1, #42	@ 0x2a
 801788a:	2a7e      	cmp	r2, #126	@ 0x7e
 801788c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8017890:	fba5 c000 	umull	ip, r0, r5, r0
 8017894:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8017898:	fb01 3310 	mls	r3, r1, r0, r3
 801789c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80178a0:	f000 8257 	beq.w	8017d52 <uxr_read_framed_msg+0x51e>
 80178a4:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80178a6:	2000      	movs	r0, #0
 80178a8:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80178aa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80178ae:	7020      	strb	r0, [r4, #0]
 80178b0:	b29b      	uxth	r3, r3
 80178b2:	4299      	cmp	r1, r3
 80178b4:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80178b6:	f000 8178 	beq.w	8017baa <uxr_read_framed_msg+0x376>
 80178ba:	2000      	movs	r0, #0
 80178bc:	b003      	add	sp, #12
 80178be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178c2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80178c6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80178ca:	4298      	cmp	r0, r3
 80178cc:	f000 8132 	beq.w	8017b34 <uxr_read_framed_msg+0x300>
 80178d0:	18e2      	adds	r2, r4, r3
 80178d2:	7891      	ldrb	r1, [r2, #2]
 80178d4:	297d      	cmp	r1, #125	@ 0x7d
 80178d6:	f000 8170 	beq.w	8017bba <uxr_read_framed_msg+0x386>
 80178da:	3301      	adds	r3, #1
 80178dc:	202a      	movs	r0, #42	@ 0x2a
 80178de:	297e      	cmp	r1, #126	@ 0x7e
 80178e0:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80178e4:	fba5 c202 	umull	ip, r2, r5, r2
 80178e8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80178ec:	fb00 3312 	mls	r3, r0, r2, r3
 80178f0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80178f4:	f000 821d 	beq.w	8017d32 <uxr_read_framed_msg+0x4fe>
 80178f8:	2307      	movs	r3, #7
 80178fa:	86a1      	strh	r1, [r4, #52]	@ 0x34
 80178fc:	7023      	strb	r3, [r4, #0]
 80178fe:	e7aa      	b.n	8017856 <uxr_read_framed_msg+0x22>
 8017900:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8017902:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8017906:	459e      	cmp	lr, r3
 8017908:	d827      	bhi.n	801795a <uxr_read_framed_msg+0x126>
 801790a:	e032      	b.n	8017972 <uxr_read_framed_msg+0x13e>
 801790c:	fba5 b101 	umull	fp, r1, r5, r1
 8017910:	f89c c002 	ldrb.w	ip, [ip, #2]
 8017914:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8017918:	0889      	lsrs	r1, r1, #2
 801791a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801791e:	fb0b 0111 	mls	r1, fp, r1, r0
 8017922:	f000 80d4 	beq.w	8017ace <uxr_read_framed_msg+0x29a>
 8017926:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801792a:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 801792e:	f000 80cb 	beq.w	8017ac8 <uxr_read_framed_msg+0x294>
 8017932:	f806 c003 	strb.w	ip, [r6, r3]
 8017936:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8017938:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801793a:	ea80 010c 	eor.w	r1, r0, ip
 801793e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8017942:	3301      	adds	r3, #1
 8017944:	b2c9      	uxtb	r1, r1
 8017946:	b29b      	uxth	r3, r3
 8017948:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 801794c:	4573      	cmp	r3, lr
 801794e:	8663      	strh	r3, [r4, #50]	@ 0x32
 8017950:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8017954:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8017956:	f080 811d 	bcs.w	8017b94 <uxr_read_framed_msg+0x360>
 801795a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801795e:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8017962:	1c50      	adds	r0, r2, #1
 8017964:	eb04 0c02 	add.w	ip, r4, r2
 8017968:	4592      	cmp	sl, r2
 801796a:	ea4f 0150 	mov.w	r1, r0, lsr #1
 801796e:	d1cd      	bne.n	801790c <uxr_read_framed_msg+0xd8>
 8017970:	459e      	cmp	lr, r3
 8017972:	f040 8114 	bne.w	8017b9e <uxr_read_framed_msg+0x36a>
 8017976:	2306      	movs	r3, #6
 8017978:	7023      	strb	r3, [r4, #0]
 801797a:	e76c      	b.n	8017856 <uxr_read_framed_msg+0x22>
 801797c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8017980:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017984:	4298      	cmp	r0, r3
 8017986:	f000 80c6 	beq.w	8017b16 <uxr_read_framed_msg+0x2e2>
 801798a:	18e2      	adds	r2, r4, r3
 801798c:	7891      	ldrb	r1, [r2, #2]
 801798e:	297d      	cmp	r1, #125	@ 0x7d
 8017990:	f000 8193 	beq.w	8017cba <uxr_read_framed_msg+0x486>
 8017994:	3301      	adds	r3, #1
 8017996:	202a      	movs	r0, #42	@ 0x2a
 8017998:	297e      	cmp	r1, #126	@ 0x7e
 801799a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801799e:	fba5 c202 	umull	ip, r2, r5, r2
 80179a2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80179a6:	fb00 3312 	mls	r3, r0, r2, r3
 80179aa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80179ae:	f000 81d0 	beq.w	8017d52 <uxr_read_framed_msg+0x51e>
 80179b2:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80179b4:	2000      	movs	r0, #0
 80179b6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80179ba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80179bc:	8660      	strh	r0, [r4, #50]	@ 0x32
 80179be:	b29b      	uxth	r3, r3
 80179c0:	86e0      	strh	r0, [r4, #54]	@ 0x36
 80179c2:	428b      	cmp	r3, r1
 80179c4:	8623      	strh	r3, [r4, #48]	@ 0x30
 80179c6:	f240 80e2 	bls.w	8017b8e <uxr_read_framed_msg+0x35a>
 80179ca:	7020      	strb	r0, [r4, #0]
 80179cc:	b003      	add	sp, #12
 80179ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179d2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80179d6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80179da:	4298      	cmp	r0, r3
 80179dc:	f000 80aa 	beq.w	8017b34 <uxr_read_framed_msg+0x300>
 80179e0:	18e2      	adds	r2, r4, r3
 80179e2:	7891      	ldrb	r1, [r2, #2]
 80179e4:	297d      	cmp	r1, #125	@ 0x7d
 80179e6:	f000 8186 	beq.w	8017cf6 <uxr_read_framed_msg+0x4c2>
 80179ea:	3301      	adds	r3, #1
 80179ec:	202a      	movs	r0, #42	@ 0x2a
 80179ee:	297e      	cmp	r1, #126	@ 0x7e
 80179f0:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80179f4:	fba5 c202 	umull	ip, r2, r5, r2
 80179f8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80179fc:	fb00 3312 	mls	r3, r0, r2, r3
 8017a00:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017a04:	f000 8195 	beq.w	8017d32 <uxr_read_framed_msg+0x4fe>
 8017a08:	2304      	movs	r3, #4
 8017a0a:	8621      	strh	r1, [r4, #48]	@ 0x30
 8017a0c:	7023      	strb	r3, [r4, #0]
 8017a0e:	e722      	b.n	8017856 <uxr_read_framed_msg+0x22>
 8017a10:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8017a14:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8017a18:	4290      	cmp	r0, r2
 8017a1a:	f000 80b4 	beq.w	8017b86 <uxr_read_framed_msg+0x352>
 8017a1e:	18a3      	adds	r3, r4, r2
 8017a20:	7899      	ldrb	r1, [r3, #2]
 8017a22:	297d      	cmp	r1, #125	@ 0x7d
 8017a24:	f000 8107 	beq.w	8017c36 <uxr_read_framed_msg+0x402>
 8017a28:	3201      	adds	r2, #1
 8017a2a:	232a      	movs	r3, #42	@ 0x2a
 8017a2c:	297e      	cmp	r1, #126	@ 0x7e
 8017a2e:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8017a32:	fba5 c000 	umull	ip, r0, r5, r0
 8017a36:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8017a3a:	fb03 2210 	mls	r2, r3, r0, r2
 8017a3e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8017a42:	f000 818a 	beq.w	8017d5a <uxr_read_framed_msg+0x526>
 8017a46:	7863      	ldrb	r3, [r4, #1]
 8017a48:	428b      	cmp	r3, r1
 8017a4a:	bf0c      	ite	eq
 8017a4c:	2303      	moveq	r3, #3
 8017a4e:	2300      	movne	r3, #0
 8017a50:	7023      	strb	r3, [r4, #0]
 8017a52:	e700      	b.n	8017856 <uxr_read_framed_msg+0x22>
 8017a54:	2300      	movs	r3, #0
 8017a56:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017a5a:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8017a5e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017a62:	4299      	cmp	r1, r3
 8017a64:	d06a      	beq.n	8017b3c <uxr_read_framed_msg+0x308>
 8017a66:	18e2      	adds	r2, r4, r3
 8017a68:	7890      	ldrb	r0, [r2, #2]
 8017a6a:	287d      	cmp	r0, #125	@ 0x7d
 8017a6c:	f000 8100 	beq.w	8017c70 <uxr_read_framed_msg+0x43c>
 8017a70:	3301      	adds	r3, #1
 8017a72:	212a      	movs	r1, #42	@ 0x2a
 8017a74:	287e      	cmp	r0, #126	@ 0x7e
 8017a76:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8017a7a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8017a7e:	fba5 c202 	umull	ip, r2, r5, r2
 8017a82:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8017a86:	fb01 3312 	mls	r3, r1, r2, r3
 8017a8a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017a8e:	d055      	beq.n	8017b3c <uxr_read_framed_msg+0x308>
 8017a90:	2302      	movs	r3, #2
 8017a92:	7023      	strb	r3, [r4, #0]
 8017a94:	e6df      	b.n	8017856 <uxr_read_framed_msg+0x22>
 8017a96:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 8017a9a:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8017a9e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017aa2:	1c5a      	adds	r2, r3, #1
 8017aa4:	459c      	cmp	ip, r3
 8017aa6:	eb04 0103 	add.w	r1, r4, r3
 8017aaa:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8017aae:	f43f af04 	beq.w	80178ba <uxr_read_framed_msg+0x86>
 8017ab2:	fba5 0303 	umull	r0, r3, r5, r3
 8017ab6:	7889      	ldrb	r1, [r1, #2]
 8017ab8:	089b      	lsrs	r3, r3, #2
 8017aba:	297e      	cmp	r1, #126	@ 0x7e
 8017abc:	fb0e 2313 	mls	r3, lr, r3, r2
 8017ac0:	b2db      	uxtb	r3, r3
 8017ac2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017ac6:	d1ec      	bne.n	8017aa2 <uxr_read_framed_msg+0x26e>
 8017ac8:	2301      	movs	r3, #1
 8017aca:	7023      	strb	r3, [r4, #0]
 8017acc:	e6c3      	b.n	8017856 <uxr_read_framed_msg+0x22>
 8017ace:	1c50      	adds	r0, r2, #1
 8017ad0:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8017ad4:	3202      	adds	r2, #2
 8017ad6:	0841      	lsrs	r1, r0, #1
 8017ad8:	fba5 c101 	umull	ip, r1, r5, r1
 8017adc:	0889      	lsrs	r1, r1, #2
 8017ade:	fb0b 0111 	mls	r1, fp, r1, r0
 8017ae2:	1860      	adds	r0, r4, r1
 8017ae4:	b2c9      	uxtb	r1, r1
 8017ae6:	458a      	cmp	sl, r1
 8017ae8:	f43f af42 	beq.w	8017970 <uxr_read_framed_msg+0x13c>
 8017aec:	0851      	lsrs	r1, r2, #1
 8017aee:	7880      	ldrb	r0, [r0, #2]
 8017af0:	fba5 a101 	umull	sl, r1, r5, r1
 8017af4:	287e      	cmp	r0, #126	@ 0x7e
 8017af6:	f080 0c20 	eor.w	ip, r0, #32
 8017afa:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8017afe:	fb0b 2211 	mls	r2, fp, r1, r2
 8017b02:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8017b06:	f47f af14 	bne.w	8017932 <uxr_read_framed_msg+0xfe>
 8017b0a:	459e      	cmp	lr, r3
 8017b0c:	f43f af33 	beq.w	8017976 <uxr_read_framed_msg+0x142>
 8017b10:	2301      	movs	r3, #1
 8017b12:	7023      	strb	r3, [r4, #0]
 8017b14:	e69f      	b.n	8017856 <uxr_read_framed_msg+0x22>
 8017b16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017b18:	9300      	str	r3, [sp, #0]
 8017b1a:	2301      	movs	r3, #1
 8017b1c:	9301      	str	r3, [sp, #4]
 8017b1e:	464a      	mov	r2, r9
 8017b20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017b22:	4641      	mov	r1, r8
 8017b24:	4620      	mov	r0, r4
 8017b26:	f7ff fdf1 	bl	801770c <uxr_framing_read_transport>
 8017b2a:	2800      	cmp	r0, #0
 8017b2c:	f43f aec5 	beq.w	80178ba <uxr_read_framed_msg+0x86>
 8017b30:	7823      	ldrb	r3, [r4, #0]
 8017b32:	e690      	b.n	8017856 <uxr_read_framed_msg+0x22>
 8017b34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017b36:	9300      	str	r3, [sp, #0]
 8017b38:	2302      	movs	r3, #2
 8017b3a:	e7ef      	b.n	8017b1c <uxr_read_framed_msg+0x2e8>
 8017b3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017b3e:	464a      	mov	r2, r9
 8017b40:	4641      	mov	r1, r8
 8017b42:	4620      	mov	r0, r4
 8017b44:	9300      	str	r3, [sp, #0]
 8017b46:	2304      	movs	r3, #4
 8017b48:	9301      	str	r3, [sp, #4]
 8017b4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017b4c:	f7ff fdde 	bl	801770c <uxr_framing_read_transport>
 8017b50:	2800      	cmp	r0, #0
 8017b52:	d1ed      	bne.n	8017b30 <uxr_read_framed_msg+0x2fc>
 8017b54:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8017b58:	2b7e      	cmp	r3, #126	@ 0x7e
 8017b5a:	d0e9      	beq.n	8017b30 <uxr_read_framed_msg+0x2fc>
 8017b5c:	e6ad      	b.n	80178ba <uxr_read_framed_msg+0x86>
 8017b5e:	bf00      	nop
 8017b60:	30c30c31 	.word	0x30c30c31
 8017b64:	0801cbd4 	.word	0x0801cbd4
 8017b68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017b6a:	9300      	str	r3, [sp, #0]
 8017b6c:	2305      	movs	r3, #5
 8017b6e:	9301      	str	r3, [sp, #4]
 8017b70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017b72:	f7ff fdcb 	bl	801770c <uxr_framing_read_transport>
 8017b76:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8017b7a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8017b7e:	429a      	cmp	r2, r3
 8017b80:	f43f ae9b 	beq.w	80178ba <uxr_read_framed_msg+0x86>
 8017b84:	e664      	b.n	8017850 <uxr_read_framed_msg+0x1c>
 8017b86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017b88:	9300      	str	r3, [sp, #0]
 8017b8a:	2303      	movs	r3, #3
 8017b8c:	e7c6      	b.n	8017b1c <uxr_read_framed_msg+0x2e8>
 8017b8e:	2305      	movs	r3, #5
 8017b90:	7023      	strb	r3, [r4, #0]
 8017b92:	e660      	b.n	8017856 <uxr_read_framed_msg+0x22>
 8017b94:	f43f aeef 	beq.w	8017976 <uxr_read_framed_msg+0x142>
 8017b98:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8017b9c:	d094      	beq.n	8017ac8 <uxr_read_framed_msg+0x294>
 8017b9e:	ebae 0303 	sub.w	r3, lr, r3
 8017ba2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017ba4:	3302      	adds	r3, #2
 8017ba6:	9200      	str	r2, [sp, #0]
 8017ba8:	e7b8      	b.n	8017b1c <uxr_read_framed_msg+0x2e8>
 8017baa:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8017bae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017bb0:	7013      	strb	r3, [r2, #0]
 8017bb2:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8017bb4:	b003      	add	sp, #12
 8017bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bba:	1c59      	adds	r1, r3, #1
 8017bbc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8017bc0:	084a      	lsrs	r2, r1, #1
 8017bc2:	fba5 e202 	umull	lr, r2, r5, r2
 8017bc6:	0892      	lsrs	r2, r2, #2
 8017bc8:	fb0c 1212 	mls	r2, ip, r2, r1
 8017bcc:	b2d1      	uxtb	r1, r2
 8017bce:	4288      	cmp	r0, r1
 8017bd0:	d0b0      	beq.n	8017b34 <uxr_read_framed_msg+0x300>
 8017bd2:	3302      	adds	r3, #2
 8017bd4:	4422      	add	r2, r4
 8017bd6:	7891      	ldrb	r1, [r2, #2]
 8017bd8:	085a      	lsrs	r2, r3, #1
 8017bda:	fba5 0202 	umull	r0, r2, r5, r2
 8017bde:	297e      	cmp	r1, #126	@ 0x7e
 8017be0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8017be4:	fb0c 3312 	mls	r3, ip, r2, r3
 8017be8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017bec:	f000 80a1 	beq.w	8017d32 <uxr_read_framed_msg+0x4fe>
 8017bf0:	f081 0120 	eor.w	r1, r1, #32
 8017bf4:	e680      	b.n	80178f8 <uxr_read_framed_msg+0xc4>
 8017bf6:	f103 0c01 	add.w	ip, r3, #1
 8017bfa:	202a      	movs	r0, #42	@ 0x2a
 8017bfc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017c00:	fba5 e202 	umull	lr, r2, r5, r2
 8017c04:	0892      	lsrs	r2, r2, #2
 8017c06:	fb00 c212 	mls	r2, r0, r2, ip
 8017c0a:	fa5f fc82 	uxtb.w	ip, r2
 8017c0e:	4561      	cmp	r1, ip
 8017c10:	d081      	beq.n	8017b16 <uxr_read_framed_msg+0x2e2>
 8017c12:	3302      	adds	r3, #2
 8017c14:	4422      	add	r2, r4
 8017c16:	0859      	lsrs	r1, r3, #1
 8017c18:	7892      	ldrb	r2, [r2, #2]
 8017c1a:	fba5 c101 	umull	ip, r1, r5, r1
 8017c1e:	2a7e      	cmp	r2, #126	@ 0x7e
 8017c20:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8017c24:	fb00 3311 	mls	r3, r0, r1, r3
 8017c28:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017c2c:	f000 8091 	beq.w	8017d52 <uxr_read_framed_msg+0x51e>
 8017c30:	f082 0220 	eor.w	r2, r2, #32
 8017c34:	e636      	b.n	80178a4 <uxr_read_framed_msg+0x70>
 8017c36:	1c51      	adds	r1, r2, #1
 8017c38:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8017c3c:	084b      	lsrs	r3, r1, #1
 8017c3e:	fba5 e303 	umull	lr, r3, r5, r3
 8017c42:	089b      	lsrs	r3, r3, #2
 8017c44:	fb0c 1313 	mls	r3, ip, r3, r1
 8017c48:	b2d9      	uxtb	r1, r3
 8017c4a:	4288      	cmp	r0, r1
 8017c4c:	d09b      	beq.n	8017b86 <uxr_read_framed_msg+0x352>
 8017c4e:	3202      	adds	r2, #2
 8017c50:	4423      	add	r3, r4
 8017c52:	0850      	lsrs	r0, r2, #1
 8017c54:	789b      	ldrb	r3, [r3, #2]
 8017c56:	fba5 1000 	umull	r1, r0, r5, r0
 8017c5a:	2b7e      	cmp	r3, #126	@ 0x7e
 8017c5c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8017c60:	fb0c 2210 	mls	r2, ip, r0, r2
 8017c64:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8017c68:	d077      	beq.n	8017d5a <uxr_read_framed_msg+0x526>
 8017c6a:	f083 0120 	eor.w	r1, r3, #32
 8017c6e:	e6ea      	b.n	8017a46 <uxr_read_framed_msg+0x212>
 8017c70:	f103 0c01 	add.w	ip, r3, #1
 8017c74:	202a      	movs	r0, #42	@ 0x2a
 8017c76:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017c7a:	fba5 e202 	umull	lr, r2, r5, r2
 8017c7e:	0892      	lsrs	r2, r2, #2
 8017c80:	fb00 c212 	mls	r2, r0, r2, ip
 8017c84:	fa5f fc82 	uxtb.w	ip, r2
 8017c88:	4561      	cmp	r1, ip
 8017c8a:	f43f af57 	beq.w	8017b3c <uxr_read_framed_msg+0x308>
 8017c8e:	3302      	adds	r3, #2
 8017c90:	4422      	add	r2, r4
 8017c92:	7891      	ldrb	r1, [r2, #2]
 8017c94:	085a      	lsrs	r2, r3, #1
 8017c96:	fba5 c202 	umull	ip, r2, r5, r2
 8017c9a:	297e      	cmp	r1, #126	@ 0x7e
 8017c9c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8017ca0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8017ca4:	fb00 3312 	mls	r3, r0, r2, r3
 8017ca8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017cac:	f43f af46 	beq.w	8017b3c <uxr_read_framed_msg+0x308>
 8017cb0:	f081 0120 	eor.w	r1, r1, #32
 8017cb4:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8017cb8:	e6ea      	b.n	8017a90 <uxr_read_framed_msg+0x25c>
 8017cba:	1c59      	adds	r1, r3, #1
 8017cbc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8017cc0:	084a      	lsrs	r2, r1, #1
 8017cc2:	fba5 e202 	umull	lr, r2, r5, r2
 8017cc6:	0892      	lsrs	r2, r2, #2
 8017cc8:	fb0c 1212 	mls	r2, ip, r2, r1
 8017ccc:	b2d1      	uxtb	r1, r2
 8017cce:	4288      	cmp	r0, r1
 8017cd0:	f43f af21 	beq.w	8017b16 <uxr_read_framed_msg+0x2e2>
 8017cd4:	3302      	adds	r3, #2
 8017cd6:	4422      	add	r2, r4
 8017cd8:	7891      	ldrb	r1, [r2, #2]
 8017cda:	085a      	lsrs	r2, r3, #1
 8017cdc:	fba5 0202 	umull	r0, r2, r5, r2
 8017ce0:	297e      	cmp	r1, #126	@ 0x7e
 8017ce2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8017ce6:	fb0c 3312 	mls	r3, ip, r2, r3
 8017cea:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017cee:	d030      	beq.n	8017d52 <uxr_read_framed_msg+0x51e>
 8017cf0:	f081 0120 	eor.w	r1, r1, #32
 8017cf4:	e65d      	b.n	80179b2 <uxr_read_framed_msg+0x17e>
 8017cf6:	1c59      	adds	r1, r3, #1
 8017cf8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8017cfc:	084a      	lsrs	r2, r1, #1
 8017cfe:	fba5 e202 	umull	lr, r2, r5, r2
 8017d02:	0892      	lsrs	r2, r2, #2
 8017d04:	fb0c 1212 	mls	r2, ip, r2, r1
 8017d08:	b2d1      	uxtb	r1, r2
 8017d0a:	4288      	cmp	r0, r1
 8017d0c:	f43f af12 	beq.w	8017b34 <uxr_read_framed_msg+0x300>
 8017d10:	3302      	adds	r3, #2
 8017d12:	4422      	add	r2, r4
 8017d14:	7891      	ldrb	r1, [r2, #2]
 8017d16:	085a      	lsrs	r2, r3, #1
 8017d18:	fba5 0202 	umull	r0, r2, r5, r2
 8017d1c:	297e      	cmp	r1, #126	@ 0x7e
 8017d1e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8017d22:	fb0c 3312 	mls	r3, ip, r2, r3
 8017d26:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017d2a:	d002      	beq.n	8017d32 <uxr_read_framed_msg+0x4fe>
 8017d2c:	f081 0120 	eor.w	r1, r1, #32
 8017d30:	e66a      	b.n	8017a08 <uxr_read_framed_msg+0x1d4>
 8017d32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017d34:	9300      	str	r3, [sp, #0]
 8017d36:	2302      	movs	r3, #2
 8017d38:	9301      	str	r3, [sp, #4]
 8017d3a:	464a      	mov	r2, r9
 8017d3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017d3e:	4641      	mov	r1, r8
 8017d40:	4620      	mov	r0, r4
 8017d42:	f7ff fce3 	bl	801770c <uxr_framing_read_transport>
 8017d46:	2800      	cmp	r0, #0
 8017d48:	f47f aef2 	bne.w	8017b30 <uxr_read_framed_msg+0x2fc>
 8017d4c:	2301      	movs	r3, #1
 8017d4e:	7023      	strb	r3, [r4, #0]
 8017d50:	e581      	b.n	8017856 <uxr_read_framed_msg+0x22>
 8017d52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017d54:	9300      	str	r3, [sp, #0]
 8017d56:	2301      	movs	r3, #1
 8017d58:	e7ee      	b.n	8017d38 <uxr_read_framed_msg+0x504>
 8017d5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017d5c:	9300      	str	r3, [sp, #0]
 8017d5e:	2303      	movs	r3, #3
 8017d60:	e7ea      	b.n	8017d38 <uxr_read_framed_msg+0x504>
 8017d62:	bf00      	nop

08017d64 <uxr_stream_id>:
 8017d64:	2901      	cmp	r1, #1
 8017d66:	4684      	mov	ip, r0
 8017d68:	b500      	push	{lr}
 8017d6a:	b083      	sub	sp, #12
 8017d6c:	d01f      	beq.n	8017dae <uxr_stream_id+0x4a>
 8017d6e:	2902      	cmp	r1, #2
 8017d70:	f04f 0e00 	mov.w	lr, #0
 8017d74:	d020      	beq.n	8017db8 <uxr_stream_id+0x54>
 8017d76:	2300      	movs	r3, #0
 8017d78:	2000      	movs	r0, #0
 8017d7a:	f36e 0307 	bfi	r3, lr, #0, #8
 8017d7e:	f36c 230f 	bfi	r3, ip, #8, #8
 8017d82:	f361 4317 	bfi	r3, r1, #16, #8
 8017d86:	f362 631f 	bfi	r3, r2, #24, #8
 8017d8a:	fa5f fc83 	uxtb.w	ip, r3
 8017d8e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8017d92:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8017d96:	0e1b      	lsrs	r3, r3, #24
 8017d98:	f36c 0007 	bfi	r0, ip, #0, #8
 8017d9c:	f361 200f 	bfi	r0, r1, #8, #8
 8017da0:	f362 4017 	bfi	r0, r2, #16, #8
 8017da4:	f363 601f 	bfi	r0, r3, #24, #8
 8017da8:	b003      	add	sp, #12
 8017daa:	f85d fb04 	ldr.w	pc, [sp], #4
 8017dae:	f100 0e01 	add.w	lr, r0, #1
 8017db2:	fa5f fe8e 	uxtb.w	lr, lr
 8017db6:	e7de      	b.n	8017d76 <uxr_stream_id+0x12>
 8017db8:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 8017dbc:	e7db      	b.n	8017d76 <uxr_stream_id+0x12>
 8017dbe:	bf00      	nop

08017dc0 <uxr_stream_id_from_raw>:
 8017dc0:	b082      	sub	sp, #8
 8017dc2:	b130      	cbz	r0, 8017dd2 <uxr_stream_id_from_raw+0x12>
 8017dc4:	0603      	lsls	r3, r0, #24
 8017dc6:	d421      	bmi.n	8017e0c <uxr_stream_id_from_raw+0x4c>
 8017dc8:	1e42      	subs	r2, r0, #1
 8017dca:	f04f 0c01 	mov.w	ip, #1
 8017dce:	b2d2      	uxtb	r2, r2
 8017dd0:	e001      	b.n	8017dd6 <uxr_stream_id_from_raw+0x16>
 8017dd2:	4684      	mov	ip, r0
 8017dd4:	4602      	mov	r2, r0
 8017dd6:	2300      	movs	r3, #0
 8017dd8:	f360 0307 	bfi	r3, r0, #0, #8
 8017ddc:	2000      	movs	r0, #0
 8017dde:	f362 230f 	bfi	r3, r2, #8, #8
 8017de2:	f36c 4317 	bfi	r3, ip, #16, #8
 8017de6:	f361 631f 	bfi	r3, r1, #24, #8
 8017dea:	fa5f fc83 	uxtb.w	ip, r3
 8017dee:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8017df2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8017df6:	0e1b      	lsrs	r3, r3, #24
 8017df8:	f36c 0007 	bfi	r0, ip, #0, #8
 8017dfc:	f361 200f 	bfi	r0, r1, #8, #8
 8017e00:	f362 4017 	bfi	r0, r2, #16, #8
 8017e04:	f363 601f 	bfi	r0, r3, #24, #8
 8017e08:	b002      	add	sp, #8
 8017e0a:	4770      	bx	lr
 8017e0c:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8017e10:	f04f 0c02 	mov.w	ip, #2
 8017e14:	e7df      	b.n	8017dd6 <uxr_stream_id_from_raw+0x16>
 8017e16:	bf00      	nop

08017e18 <uxr_init_stream_storage>:
 8017e18:	2300      	movs	r3, #0
 8017e1a:	7403      	strb	r3, [r0, #16]
 8017e1c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8017e20:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8017e24:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8017e28:	4770      	bx	lr
 8017e2a:	bf00      	nop

08017e2c <uxr_reset_stream_storage>:
 8017e2c:	b570      	push	{r4, r5, r6, lr}
 8017e2e:	7c03      	ldrb	r3, [r0, #16]
 8017e30:	4604      	mov	r4, r0
 8017e32:	b14b      	cbz	r3, 8017e48 <uxr_reset_stream_storage+0x1c>
 8017e34:	4606      	mov	r6, r0
 8017e36:	2500      	movs	r5, #0
 8017e38:	4630      	mov	r0, r6
 8017e3a:	3501      	adds	r5, #1
 8017e3c:	f002 fa2e 	bl	801a29c <uxr_reset_output_best_effort_stream>
 8017e40:	7c23      	ldrb	r3, [r4, #16]
 8017e42:	3610      	adds	r6, #16
 8017e44:	42ab      	cmp	r3, r5
 8017e46:	d8f7      	bhi.n	8017e38 <uxr_reset_stream_storage+0xc>
 8017e48:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8017e4c:	b15b      	cbz	r3, 8017e66 <uxr_reset_stream_storage+0x3a>
 8017e4e:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017e52:	2500      	movs	r5, #0
 8017e54:	4630      	mov	r0, r6
 8017e56:	3501      	adds	r5, #1
 8017e58:	f002 f826 	bl	8019ea8 <uxr_reset_input_best_effort_stream>
 8017e5c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8017e60:	3602      	adds	r6, #2
 8017e62:	42ab      	cmp	r3, r5
 8017e64:	d8f6      	bhi.n	8017e54 <uxr_reset_stream_storage+0x28>
 8017e66:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8017e6a:	b15b      	cbz	r3, 8017e84 <uxr_reset_stream_storage+0x58>
 8017e6c:	f104 0618 	add.w	r6, r4, #24
 8017e70:	2500      	movs	r5, #0
 8017e72:	4630      	mov	r0, r6
 8017e74:	3501      	adds	r5, #1
 8017e76:	f002 fabf 	bl	801a3f8 <uxr_reset_output_reliable_stream>
 8017e7a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8017e7e:	3628      	adds	r6, #40	@ 0x28
 8017e80:	42ab      	cmp	r3, r5
 8017e82:	d8f6      	bhi.n	8017e72 <uxr_reset_stream_storage+0x46>
 8017e84:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8017e88:	b15b      	cbz	r3, 8017ea2 <uxr_reset_stream_storage+0x76>
 8017e8a:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8017e8e:	2500      	movs	r5, #0
 8017e90:	4630      	mov	r0, r6
 8017e92:	3501      	adds	r5, #1
 8017e94:	f002 f874 	bl	8019f80 <uxr_reset_input_reliable_stream>
 8017e98:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8017e9c:	3618      	adds	r6, #24
 8017e9e:	42ab      	cmp	r3, r5
 8017ea0:	d8f6      	bhi.n	8017e90 <uxr_reset_stream_storage+0x64>
 8017ea2:	bd70      	pop	{r4, r5, r6, pc}

08017ea4 <uxr_add_output_best_effort_buffer>:
 8017ea4:	b510      	push	{r4, lr}
 8017ea6:	7c04      	ldrb	r4, [r0, #16]
 8017ea8:	b082      	sub	sp, #8
 8017eaa:	f104 0c01 	add.w	ip, r4, #1
 8017eae:	f880 c010 	strb.w	ip, [r0, #16]
 8017eb2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8017eb6:	f002 f9e7 	bl	801a288 <uxr_init_output_best_effort_stream>
 8017eba:	2201      	movs	r2, #1
 8017ebc:	4620      	mov	r0, r4
 8017ebe:	4611      	mov	r1, r2
 8017ec0:	b002      	add	sp, #8
 8017ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ec6:	f7ff bf4d 	b.w	8017d64 <uxr_stream_id>
 8017eca:	bf00      	nop

08017ecc <uxr_add_output_reliable_buffer>:
 8017ecc:	b510      	push	{r4, lr}
 8017ece:	b084      	sub	sp, #16
 8017ed0:	4684      	mov	ip, r0
 8017ed2:	2028      	movs	r0, #40	@ 0x28
 8017ed4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8017ed8:	9400      	str	r4, [sp, #0]
 8017eda:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8017ede:	fb00 c004 	mla	r0, r0, r4, ip
 8017ee2:	f104 0e01 	add.w	lr, r4, #1
 8017ee6:	3018      	adds	r0, #24
 8017ee8:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8017eec:	f002 fa4c 	bl	801a388 <uxr_init_output_reliable_stream>
 8017ef0:	2201      	movs	r2, #1
 8017ef2:	2102      	movs	r1, #2
 8017ef4:	4620      	mov	r0, r4
 8017ef6:	b004      	add	sp, #16
 8017ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017efc:	f7ff bf32 	b.w	8017d64 <uxr_stream_id>

08017f00 <uxr_add_input_best_effort_buffer>:
 8017f00:	b510      	push	{r4, lr}
 8017f02:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8017f06:	b082      	sub	sp, #8
 8017f08:	1c62      	adds	r2, r4, #1
 8017f0a:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8017f0e:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8017f12:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8017f16:	f001 ffc3 	bl	8019ea0 <uxr_init_input_best_effort_stream>
 8017f1a:	2200      	movs	r2, #0
 8017f1c:	2101      	movs	r1, #1
 8017f1e:	4620      	mov	r0, r4
 8017f20:	b002      	add	sp, #8
 8017f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f26:	f7ff bf1d 	b.w	8017d64 <uxr_stream_id>
 8017f2a:	bf00      	nop

08017f2c <uxr_add_input_reliable_buffer>:
 8017f2c:	b510      	push	{r4, lr}
 8017f2e:	b084      	sub	sp, #16
 8017f30:	4684      	mov	ip, r0
 8017f32:	2018      	movs	r0, #24
 8017f34:	9c06      	ldr	r4, [sp, #24]
 8017f36:	9400      	str	r4, [sp, #0]
 8017f38:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8017f3c:	fb00 c004 	mla	r0, r0, r4, ip
 8017f40:	f104 0e01 	add.w	lr, r4, #1
 8017f44:	3048      	adds	r0, #72	@ 0x48
 8017f46:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8017f4a:	f001 fff3 	bl	8019f34 <uxr_init_input_reliable_stream>
 8017f4e:	2200      	movs	r2, #0
 8017f50:	2102      	movs	r1, #2
 8017f52:	4620      	mov	r0, r4
 8017f54:	b004      	add	sp, #16
 8017f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f5a:	f7ff bf03 	b.w	8017d64 <uxr_stream_id>
 8017f5e:	bf00      	nop

08017f60 <uxr_get_output_best_effort_stream>:
 8017f60:	7c03      	ldrb	r3, [r0, #16]
 8017f62:	428b      	cmp	r3, r1
 8017f64:	bf8c      	ite	hi
 8017f66:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8017f6a:	2000      	movls	r0, #0
 8017f6c:	4770      	bx	lr
 8017f6e:	bf00      	nop

08017f70 <uxr_get_output_reliable_stream>:
 8017f70:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8017f74:	428b      	cmp	r3, r1
 8017f76:	d904      	bls.n	8017f82 <uxr_get_output_reliable_stream+0x12>
 8017f78:	2328      	movs	r3, #40	@ 0x28
 8017f7a:	fb03 0001 	mla	r0, r3, r1, r0
 8017f7e:	3018      	adds	r0, #24
 8017f80:	4770      	bx	lr
 8017f82:	2000      	movs	r0, #0
 8017f84:	4770      	bx	lr
 8017f86:	bf00      	nop

08017f88 <uxr_get_input_best_effort_stream>:
 8017f88:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8017f8c:	428b      	cmp	r3, r1
 8017f8e:	d903      	bls.n	8017f98 <uxr_get_input_best_effort_stream+0x10>
 8017f90:	3121      	adds	r1, #33	@ 0x21
 8017f92:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8017f96:	4770      	bx	lr
 8017f98:	2000      	movs	r0, #0
 8017f9a:	4770      	bx	lr

08017f9c <uxr_get_input_reliable_stream>:
 8017f9c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8017fa0:	428b      	cmp	r3, r1
 8017fa2:	d904      	bls.n	8017fae <uxr_get_input_reliable_stream+0x12>
 8017fa4:	2318      	movs	r3, #24
 8017fa6:	fb03 0001 	mla	r0, r3, r1, r0
 8017faa:	3048      	adds	r0, #72	@ 0x48
 8017fac:	4770      	bx	lr
 8017fae:	2000      	movs	r0, #0
 8017fb0:	4770      	bx	lr
 8017fb2:	bf00      	nop

08017fb4 <uxr_output_streams_confirmed>:
 8017fb4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8017fb8:	b183      	cbz	r3, 8017fdc <uxr_output_streams_confirmed+0x28>
 8017fba:	b570      	push	{r4, r5, r6, lr}
 8017fbc:	4606      	mov	r6, r0
 8017fbe:	f100 0518 	add.w	r5, r0, #24
 8017fc2:	2400      	movs	r4, #0
 8017fc4:	e000      	b.n	8017fc8 <uxr_output_streams_confirmed+0x14>
 8017fc6:	b140      	cbz	r0, 8017fda <uxr_output_streams_confirmed+0x26>
 8017fc8:	4628      	mov	r0, r5
 8017fca:	3401      	adds	r4, #1
 8017fcc:	f002 fc88 	bl	801a8e0 <uxr_is_output_up_to_date>
 8017fd0:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8017fd4:	3528      	adds	r5, #40	@ 0x28
 8017fd6:	42a3      	cmp	r3, r4
 8017fd8:	d8f5      	bhi.n	8017fc6 <uxr_output_streams_confirmed+0x12>
 8017fda:	bd70      	pop	{r4, r5, r6, pc}
 8017fdc:	2001      	movs	r0, #1
 8017fde:	4770      	bx	lr

08017fe0 <uxr_buffer_submessage_header>:
 8017fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fe2:	460e      	mov	r6, r1
 8017fe4:	2104      	movs	r1, #4
 8017fe6:	4604      	mov	r4, r0
 8017fe8:	4615      	mov	r5, r2
 8017fea:	461f      	mov	r7, r3
 8017fec:	f7f7 fbca 	bl	800f784 <ucdr_align_to>
 8017ff0:	2301      	movs	r3, #1
 8017ff2:	4631      	mov	r1, r6
 8017ff4:	4620      	mov	r0, r4
 8017ff6:	ea47 0203 	orr.w	r2, r7, r3
 8017ffa:	7523      	strb	r3, [r4, #20]
 8017ffc:	462b      	mov	r3, r5
 8017ffe:	f000 f8d5 	bl	80181ac <uxr_serialize_submessage_header>
 8018002:	4620      	mov	r0, r4
 8018004:	f7f7 fbd4 	bl	800f7b0 <ucdr_buffer_remaining>
 8018008:	42a8      	cmp	r0, r5
 801800a:	bf34      	ite	cc
 801800c:	2000      	movcc	r0, #0
 801800e:	2001      	movcs	r0, #1
 8018010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018012:	bf00      	nop

08018014 <uxr_read_submessage_header>:
 8018014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018018:	4604      	mov	r4, r0
 801801a:	460d      	mov	r5, r1
 801801c:	2104      	movs	r1, #4
 801801e:	4616      	mov	r6, r2
 8018020:	4698      	mov	r8, r3
 8018022:	f7f7 fbaf 	bl	800f784 <ucdr_align_to>
 8018026:	4620      	mov	r0, r4
 8018028:	f7f7 fbc2 	bl	800f7b0 <ucdr_buffer_remaining>
 801802c:	2803      	cmp	r0, #3
 801802e:	bf8c      	ite	hi
 8018030:	2701      	movhi	r7, #1
 8018032:	2700      	movls	r7, #0
 8018034:	d802      	bhi.n	801803c <uxr_read_submessage_header+0x28>
 8018036:	4638      	mov	r0, r7
 8018038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801803c:	4633      	mov	r3, r6
 801803e:	4642      	mov	r2, r8
 8018040:	4620      	mov	r0, r4
 8018042:	4629      	mov	r1, r5
 8018044:	f000 f8c6 	bl	80181d4 <uxr_deserialize_submessage_header>
 8018048:	f898 3000 	ldrb.w	r3, [r8]
 801804c:	4638      	mov	r0, r7
 801804e:	f003 0201 	and.w	r2, r3, #1
 8018052:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8018056:	f888 3000 	strb.w	r3, [r8]
 801805a:	7522      	strb	r2, [r4, #20]
 801805c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018060 <uxr_submessage_padding>:
 8018060:	f010 0003 	ands.w	r0, r0, #3
 8018064:	bf18      	it	ne
 8018066:	f1c0 0004 	rsbne	r0, r0, #4
 801806a:	4770      	bx	lr

0801806c <uxr_millis>:
 801806c:	b510      	push	{r4, lr}
 801806e:	b084      	sub	sp, #16
 8018070:	2001      	movs	r0, #1
 8018072:	4669      	mov	r1, sp
 8018074:	f7e9 fb90 	bl	8001798 <clock_gettime>
 8018078:	4908      	ldr	r1, [pc, #32]	@ (801809c <uxr_millis+0x30>)
 801807a:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 801807e:	fba0 0301 	umull	r0, r3, r0, r1
 8018082:	1900      	adds	r0, r0, r4
 8018084:	fb01 3102 	mla	r1, r1, r2, r3
 8018088:	4a05      	ldr	r2, [pc, #20]	@ (80180a0 <uxr_millis+0x34>)
 801808a:	f04f 0300 	mov.w	r3, #0
 801808e:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8018092:	f7e8 f98d 	bl	80003b0 <__aeabi_ldivmod>
 8018096:	b004      	add	sp, #16
 8018098:	bd10      	pop	{r4, pc}
 801809a:	bf00      	nop
 801809c:	3b9aca00 	.word	0x3b9aca00
 80180a0:	000f4240 	.word	0x000f4240

080180a4 <uxr_nanos>:
 80180a4:	b510      	push	{r4, lr}
 80180a6:	b084      	sub	sp, #16
 80180a8:	2001      	movs	r0, #1
 80180aa:	4669      	mov	r1, sp
 80180ac:	f7e9 fb74 	bl	8001798 <clock_gettime>
 80180b0:	4a06      	ldr	r2, [pc, #24]	@ (80180cc <uxr_nanos+0x28>)
 80180b2:	9800      	ldr	r0, [sp, #0]
 80180b4:	9902      	ldr	r1, [sp, #8]
 80180b6:	fba0 0302 	umull	r0, r3, r0, r2
 80180ba:	9c01      	ldr	r4, [sp, #4]
 80180bc:	1840      	adds	r0, r0, r1
 80180be:	fb02 3304 	mla	r3, r2, r4, r3
 80180c2:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80180c6:	b004      	add	sp, #16
 80180c8:	bd10      	pop	{r4, pc}
 80180ca:	bf00      	nop
 80180cc:	3b9aca00 	.word	0x3b9aca00

080180d0 <uxr_prepare_output_stream>:
 80180d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180d2:	b087      	sub	sp, #28
 80180d4:	2707      	movs	r7, #7
 80180d6:	2500      	movs	r5, #0
 80180d8:	461c      	mov	r4, r3
 80180da:	4606      	mov	r6, r0
 80180dc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80180e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80180e2:	e9cd 7500 	strd	r7, r5, [sp]
 80180e6:	3204      	adds	r2, #4
 80180e8:	f7ff f852 	bl	8017190 <uxr_prepare_stream_to_write_submessage>
 80180ec:	f080 0201 	eor.w	r2, r0, #1
 80180f0:	b2d2      	uxtb	r2, r2
 80180f2:	75a2      	strb	r2, [r4, #22]
 80180f4:	b112      	cbz	r2, 80180fc <uxr_prepare_output_stream+0x2c>
 80180f6:	4628      	mov	r0, r5
 80180f8:	b007      	add	sp, #28
 80180fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180fc:	aa05      	add	r2, sp, #20
 80180fe:	9902      	ldr	r1, [sp, #8]
 8018100:	4630      	mov	r0, r6
 8018102:	f7ff f981 	bl	8017408 <uxr_init_base_object_request>
 8018106:	a905      	add	r1, sp, #20
 8018108:	4605      	mov	r5, r0
 801810a:	4620      	mov	r0, r4
 801810c:	f000 fee2 	bl	8018ed4 <uxr_serialize_WRITE_DATA_Payload_Data>
 8018110:	69a6      	ldr	r6, [r4, #24]
 8018112:	69e7      	ldr	r7, [r4, #28]
 8018114:	4620      	mov	r0, r4
 8018116:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801811a:	1a52      	subs	r2, r2, r1
 801811c:	f7f7 fb16 	bl	800f74c <ucdr_init_buffer>
 8018120:	4620      	mov	r0, r4
 8018122:	463a      	mov	r2, r7
 8018124:	4631      	mov	r1, r6
 8018126:	f7f7 fae5 	bl	800f6f4 <ucdr_set_on_full_buffer_callback>
 801812a:	4628      	mov	r0, r5
 801812c:	b007      	add	sp, #28
 801812e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018130 <uxr_serialize_message_header>:
 8018130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018132:	4616      	mov	r6, r2
 8018134:	b083      	sub	sp, #12
 8018136:	4604      	mov	r4, r0
 8018138:	460d      	mov	r5, r1
 801813a:	9301      	str	r3, [sp, #4]
 801813c:	9f08      	ldr	r7, [sp, #32]
 801813e:	f7fc fe2b 	bl	8014d98 <ucdr_serialize_uint8_t>
 8018142:	4631      	mov	r1, r6
 8018144:	4620      	mov	r0, r4
 8018146:	f7fc fe27 	bl	8014d98 <ucdr_serialize_uint8_t>
 801814a:	9a01      	ldr	r2, [sp, #4]
 801814c:	2101      	movs	r1, #1
 801814e:	4620      	mov	r0, r4
 8018150:	f7fc fece 	bl	8014ef0 <ucdr_serialize_endian_uint16_t>
 8018154:	062b      	lsls	r3, r5, #24
 8018156:	d501      	bpl.n	801815c <uxr_serialize_message_header+0x2c>
 8018158:	b003      	add	sp, #12
 801815a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801815c:	2204      	movs	r2, #4
 801815e:	4639      	mov	r1, r7
 8018160:	4620      	mov	r0, r4
 8018162:	b003      	add	sp, #12
 8018164:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018168:	f7fc bd1c 	b.w	8014ba4 <ucdr_serialize_array_uint8_t>

0801816c <uxr_deserialize_message_header>:
 801816c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801816e:	4616      	mov	r6, r2
 8018170:	b083      	sub	sp, #12
 8018172:	4604      	mov	r4, r0
 8018174:	460d      	mov	r5, r1
 8018176:	9301      	str	r3, [sp, #4]
 8018178:	9f08      	ldr	r7, [sp, #32]
 801817a:	f7fc fe23 	bl	8014dc4 <ucdr_deserialize_uint8_t>
 801817e:	4631      	mov	r1, r6
 8018180:	4620      	mov	r0, r4
 8018182:	f7fc fe1f 	bl	8014dc4 <ucdr_deserialize_uint8_t>
 8018186:	9a01      	ldr	r2, [sp, #4]
 8018188:	2101      	movs	r1, #1
 801818a:	4620      	mov	r0, r4
 801818c:	f7fc ffa4 	bl	80150d8 <ucdr_deserialize_endian_uint16_t>
 8018190:	f995 3000 	ldrsb.w	r3, [r5]
 8018194:	2b00      	cmp	r3, #0
 8018196:	da01      	bge.n	801819c <uxr_deserialize_message_header+0x30>
 8018198:	b003      	add	sp, #12
 801819a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801819c:	2204      	movs	r2, #4
 801819e:	4639      	mov	r1, r7
 80181a0:	4620      	mov	r0, r4
 80181a2:	b003      	add	sp, #12
 80181a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80181a8:	f7fc bd60 	b.w	8014c6c <ucdr_deserialize_array_uint8_t>

080181ac <uxr_serialize_submessage_header>:
 80181ac:	b530      	push	{r4, r5, lr}
 80181ae:	4615      	mov	r5, r2
 80181b0:	b083      	sub	sp, #12
 80181b2:	4604      	mov	r4, r0
 80181b4:	9301      	str	r3, [sp, #4]
 80181b6:	f7fc fdef 	bl	8014d98 <ucdr_serialize_uint8_t>
 80181ba:	4629      	mov	r1, r5
 80181bc:	4620      	mov	r0, r4
 80181be:	f7fc fdeb 	bl	8014d98 <ucdr_serialize_uint8_t>
 80181c2:	9a01      	ldr	r2, [sp, #4]
 80181c4:	2101      	movs	r1, #1
 80181c6:	4620      	mov	r0, r4
 80181c8:	b003      	add	sp, #12
 80181ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80181ce:	f7fc be8f 	b.w	8014ef0 <ucdr_serialize_endian_uint16_t>
 80181d2:	bf00      	nop

080181d4 <uxr_deserialize_submessage_header>:
 80181d4:	b530      	push	{r4, r5, lr}
 80181d6:	4615      	mov	r5, r2
 80181d8:	b083      	sub	sp, #12
 80181da:	4604      	mov	r4, r0
 80181dc:	9301      	str	r3, [sp, #4]
 80181de:	f7fc fdf1 	bl	8014dc4 <ucdr_deserialize_uint8_t>
 80181e2:	4629      	mov	r1, r5
 80181e4:	4620      	mov	r0, r4
 80181e6:	f7fc fded 	bl	8014dc4 <ucdr_deserialize_uint8_t>
 80181ea:	9a01      	ldr	r2, [sp, #4]
 80181ec:	2101      	movs	r1, #1
 80181ee:	4620      	mov	r0, r4
 80181f0:	b003      	add	sp, #12
 80181f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80181f6:	f7fc bf6f 	b.w	80150d8 <ucdr_deserialize_endian_uint16_t>
 80181fa:	bf00      	nop

080181fc <uxr_serialize_CLIENT_Representation>:
 80181fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018200:	2204      	movs	r2, #4
 8018202:	460e      	mov	r6, r1
 8018204:	4605      	mov	r5, r0
 8018206:	f7fc fccd 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 801820a:	4607      	mov	r7, r0
 801820c:	2202      	movs	r2, #2
 801820e:	1d31      	adds	r1, r6, #4
 8018210:	4628      	mov	r0, r5
 8018212:	f7fc fcc7 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 8018216:	4038      	ands	r0, r7
 8018218:	2202      	movs	r2, #2
 801821a:	1db1      	adds	r1, r6, #6
 801821c:	b2c7      	uxtb	r7, r0
 801821e:	4628      	mov	r0, r5
 8018220:	f7fc fcc0 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 8018224:	2204      	movs	r2, #4
 8018226:	4007      	ands	r7, r0
 8018228:	f106 0108 	add.w	r1, r6, #8
 801822c:	4628      	mov	r0, r5
 801822e:	f7fc fcb9 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 8018232:	4007      	ands	r7, r0
 8018234:	7b31      	ldrb	r1, [r6, #12]
 8018236:	4628      	mov	r0, r5
 8018238:	f7fc fdae 	bl	8014d98 <ucdr_serialize_uint8_t>
 801823c:	7b71      	ldrb	r1, [r6, #13]
 801823e:	4007      	ands	r7, r0
 8018240:	4628      	mov	r0, r5
 8018242:	f7fc fd7b 	bl	8014d3c <ucdr_serialize_bool>
 8018246:	7b73      	ldrb	r3, [r6, #13]
 8018248:	ea07 0800 	and.w	r8, r7, r0
 801824c:	b93b      	cbnz	r3, 801825e <uxr_serialize_CLIENT_Representation+0x62>
 801824e:	8bb1      	ldrh	r1, [r6, #28]
 8018250:	4628      	mov	r0, r5
 8018252:	f7fc fdcd 	bl	8014df0 <ucdr_serialize_uint16_t>
 8018256:	ea08 0000 	and.w	r0, r8, r0
 801825a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801825e:	6931      	ldr	r1, [r6, #16]
 8018260:	4628      	mov	r0, r5
 8018262:	f7fc ffaf 	bl	80151c4 <ucdr_serialize_uint32_t>
 8018266:	6933      	ldr	r3, [r6, #16]
 8018268:	b1e3      	cbz	r3, 80182a4 <uxr_serialize_CLIENT_Representation+0xa8>
 801826a:	b1c0      	cbz	r0, 801829e <uxr_serialize_CLIENT_Representation+0xa2>
 801826c:	4637      	mov	r7, r6
 801826e:	f04f 0900 	mov.w	r9, #0
 8018272:	e000      	b.n	8018276 <uxr_serialize_CLIENT_Representation+0x7a>
 8018274:	b19c      	cbz	r4, 801829e <uxr_serialize_CLIENT_Representation+0xa2>
 8018276:	6979      	ldr	r1, [r7, #20]
 8018278:	4628      	mov	r0, r5
 801827a:	f001 fdf9 	bl	8019e70 <ucdr_serialize_string>
 801827e:	69b9      	ldr	r1, [r7, #24]
 8018280:	4604      	mov	r4, r0
 8018282:	4628      	mov	r0, r5
 8018284:	f001 fdf4 	bl	8019e70 <ucdr_serialize_string>
 8018288:	f109 0901 	add.w	r9, r9, #1
 801828c:	6933      	ldr	r3, [r6, #16]
 801828e:	4004      	ands	r4, r0
 8018290:	3708      	adds	r7, #8
 8018292:	4599      	cmp	r9, r3
 8018294:	b2e4      	uxtb	r4, r4
 8018296:	d3ed      	bcc.n	8018274 <uxr_serialize_CLIENT_Representation+0x78>
 8018298:	ea08 0804 	and.w	r8, r8, r4
 801829c:	e7d7      	b.n	801824e <uxr_serialize_CLIENT_Representation+0x52>
 801829e:	f04f 0800 	mov.w	r8, #0
 80182a2:	e7d4      	b.n	801824e <uxr_serialize_CLIENT_Representation+0x52>
 80182a4:	ea08 0800 	and.w	r8, r8, r0
 80182a8:	e7d1      	b.n	801824e <uxr_serialize_CLIENT_Representation+0x52>
 80182aa:	bf00      	nop

080182ac <uxr_deserialize_CLIENT_Representation>:
 80182ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182b0:	2204      	movs	r2, #4
 80182b2:	460c      	mov	r4, r1
 80182b4:	4605      	mov	r5, r0
 80182b6:	f7fc fcd9 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 80182ba:	4607      	mov	r7, r0
 80182bc:	2202      	movs	r2, #2
 80182be:	1d21      	adds	r1, r4, #4
 80182c0:	4628      	mov	r0, r5
 80182c2:	f7fc fcd3 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 80182c6:	4038      	ands	r0, r7
 80182c8:	2202      	movs	r2, #2
 80182ca:	1da1      	adds	r1, r4, #6
 80182cc:	b2c6      	uxtb	r6, r0
 80182ce:	4628      	mov	r0, r5
 80182d0:	f7fc fccc 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 80182d4:	2204      	movs	r2, #4
 80182d6:	4006      	ands	r6, r0
 80182d8:	f104 0108 	add.w	r1, r4, #8
 80182dc:	4628      	mov	r0, r5
 80182de:	f7fc fcc5 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 80182e2:	4006      	ands	r6, r0
 80182e4:	f104 010c 	add.w	r1, r4, #12
 80182e8:	4628      	mov	r0, r5
 80182ea:	f7fc fd6b 	bl	8014dc4 <ucdr_deserialize_uint8_t>
 80182ee:	f104 010d 	add.w	r1, r4, #13
 80182f2:	ea06 0700 	and.w	r7, r6, r0
 80182f6:	4628      	mov	r0, r5
 80182f8:	f7fc fd36 	bl	8014d68 <ucdr_deserialize_bool>
 80182fc:	7b63      	ldrb	r3, [r4, #13]
 80182fe:	4007      	ands	r7, r0
 8018300:	b93b      	cbnz	r3, 8018312 <uxr_deserialize_CLIENT_Representation+0x66>
 8018302:	f104 011c 	add.w	r1, r4, #28
 8018306:	4628      	mov	r0, r5
 8018308:	f7fc fe72 	bl	8014ff0 <ucdr_deserialize_uint16_t>
 801830c:	4038      	ands	r0, r7
 801830e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018312:	f104 0110 	add.w	r1, r4, #16
 8018316:	4628      	mov	r0, r5
 8018318:	f7fd f884 	bl	8015424 <ucdr_deserialize_uint32_t>
 801831c:	6923      	ldr	r3, [r4, #16]
 801831e:	2b01      	cmp	r3, #1
 8018320:	d903      	bls.n	801832a <uxr_deserialize_CLIENT_Representation+0x7e>
 8018322:	2301      	movs	r3, #1
 8018324:	2700      	movs	r7, #0
 8018326:	75ab      	strb	r3, [r5, #22]
 8018328:	e7eb      	b.n	8018302 <uxr_deserialize_CLIENT_Representation+0x56>
 801832a:	b30b      	cbz	r3, 8018370 <uxr_deserialize_CLIENT_Representation+0xc4>
 801832c:	b1f0      	cbz	r0, 801836c <uxr_deserialize_CLIENT_Representation+0xc0>
 801832e:	46a0      	mov	r8, r4
 8018330:	f04f 0900 	mov.w	r9, #0
 8018334:	e000      	b.n	8018338 <uxr_deserialize_CLIENT_Representation+0x8c>
 8018336:	b1ce      	cbz	r6, 801836c <uxr_deserialize_CLIENT_Representation+0xc0>
 8018338:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801833c:	f108 0808 	add.w	r8, r8, #8
 8018340:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018344:	4628      	mov	r0, r5
 8018346:	f001 fda3 	bl	8019e90 <ucdr_deserialize_string>
 801834a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801834e:	4606      	mov	r6, r0
 8018350:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018354:	4628      	mov	r0, r5
 8018356:	f109 0901 	add.w	r9, r9, #1
 801835a:	f001 fd99 	bl	8019e90 <ucdr_deserialize_string>
 801835e:	6923      	ldr	r3, [r4, #16]
 8018360:	4006      	ands	r6, r0
 8018362:	4599      	cmp	r9, r3
 8018364:	b2f6      	uxtb	r6, r6
 8018366:	d3e6      	bcc.n	8018336 <uxr_deserialize_CLIENT_Representation+0x8a>
 8018368:	4037      	ands	r7, r6
 801836a:	e7ca      	b.n	8018302 <uxr_deserialize_CLIENT_Representation+0x56>
 801836c:	2700      	movs	r7, #0
 801836e:	e7c8      	b.n	8018302 <uxr_deserialize_CLIENT_Representation+0x56>
 8018370:	4007      	ands	r7, r0
 8018372:	e7c6      	b.n	8018302 <uxr_deserialize_CLIENT_Representation+0x56>

08018374 <uxr_serialize_AGENT_Representation>:
 8018374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018378:	2204      	movs	r2, #4
 801837a:	460f      	mov	r7, r1
 801837c:	4605      	mov	r5, r0
 801837e:	f7fc fc11 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 8018382:	4604      	mov	r4, r0
 8018384:	2202      	movs	r2, #2
 8018386:	1d39      	adds	r1, r7, #4
 8018388:	4628      	mov	r0, r5
 801838a:	f7fc fc0b 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 801838e:	4020      	ands	r0, r4
 8018390:	2202      	movs	r2, #2
 8018392:	1db9      	adds	r1, r7, #6
 8018394:	b2c4      	uxtb	r4, r0
 8018396:	4628      	mov	r0, r5
 8018398:	f7fc fc04 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 801839c:	7a39      	ldrb	r1, [r7, #8]
 801839e:	4004      	ands	r4, r0
 80183a0:	4628      	mov	r0, r5
 80183a2:	f7fc fccb 	bl	8014d3c <ucdr_serialize_bool>
 80183a6:	7a3b      	ldrb	r3, [r7, #8]
 80183a8:	ea00 0804 	and.w	r8, r0, r4
 80183ac:	b913      	cbnz	r3, 80183b4 <uxr_serialize_AGENT_Representation+0x40>
 80183ae:	4640      	mov	r0, r8
 80183b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80183b4:	68f9      	ldr	r1, [r7, #12]
 80183b6:	4628      	mov	r0, r5
 80183b8:	f7fc ff04 	bl	80151c4 <ucdr_serialize_uint32_t>
 80183bc:	68fb      	ldr	r3, [r7, #12]
 80183be:	b303      	cbz	r3, 8018402 <uxr_serialize_AGENT_Representation+0x8e>
 80183c0:	b1d0      	cbz	r0, 80183f8 <uxr_serialize_AGENT_Representation+0x84>
 80183c2:	463e      	mov	r6, r7
 80183c4:	f04f 0900 	mov.w	r9, #0
 80183c8:	e000      	b.n	80183cc <uxr_serialize_AGENT_Representation+0x58>
 80183ca:	b1ac      	cbz	r4, 80183f8 <uxr_serialize_AGENT_Representation+0x84>
 80183cc:	6931      	ldr	r1, [r6, #16]
 80183ce:	4628      	mov	r0, r5
 80183d0:	f001 fd4e 	bl	8019e70 <ucdr_serialize_string>
 80183d4:	6971      	ldr	r1, [r6, #20]
 80183d6:	4604      	mov	r4, r0
 80183d8:	4628      	mov	r0, r5
 80183da:	f001 fd49 	bl	8019e70 <ucdr_serialize_string>
 80183de:	f109 0901 	add.w	r9, r9, #1
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	4004      	ands	r4, r0
 80183e6:	3608      	adds	r6, #8
 80183e8:	4599      	cmp	r9, r3
 80183ea:	b2e4      	uxtb	r4, r4
 80183ec:	d3ed      	bcc.n	80183ca <uxr_serialize_AGENT_Representation+0x56>
 80183ee:	ea08 0804 	and.w	r8, r8, r4
 80183f2:	4640      	mov	r0, r8
 80183f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80183f8:	f04f 0800 	mov.w	r8, #0
 80183fc:	4640      	mov	r0, r8
 80183fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018402:	ea08 0800 	and.w	r8, r8, r0
 8018406:	e7d2      	b.n	80183ae <uxr_serialize_AGENT_Representation+0x3a>

08018408 <uxr_serialize_DATAWRITER_Representation>:
 8018408:	b570      	push	{r4, r5, r6, lr}
 801840a:	460d      	mov	r5, r1
 801840c:	7809      	ldrb	r1, [r1, #0]
 801840e:	4606      	mov	r6, r0
 8018410:	f7fc fcc2 	bl	8014d98 <ucdr_serialize_uint8_t>
 8018414:	4604      	mov	r4, r0
 8018416:	b130      	cbz	r0, 8018426 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8018418:	782b      	ldrb	r3, [r5, #0]
 801841a:	2b02      	cmp	r3, #2
 801841c:	d00c      	beq.n	8018438 <uxr_serialize_DATAWRITER_Representation+0x30>
 801841e:	2b03      	cmp	r3, #3
 8018420:	d010      	beq.n	8018444 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8018422:	2b01      	cmp	r3, #1
 8018424:	d008      	beq.n	8018438 <uxr_serialize_DATAWRITER_Representation+0x30>
 8018426:	2202      	movs	r2, #2
 8018428:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801842c:	4630      	mov	r0, r6
 801842e:	f7fc fbb9 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 8018432:	4020      	ands	r0, r4
 8018434:	b2c0      	uxtb	r0, r0
 8018436:	bd70      	pop	{r4, r5, r6, pc}
 8018438:	6869      	ldr	r1, [r5, #4]
 801843a:	4630      	mov	r0, r6
 801843c:	f001 fd18 	bl	8019e70 <ucdr_serialize_string>
 8018440:	4604      	mov	r4, r0
 8018442:	e7f0      	b.n	8018426 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8018444:	4629      	mov	r1, r5
 8018446:	4630      	mov	r0, r6
 8018448:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801844c:	3104      	adds	r1, #4
 801844e:	f7f7 fa1d 	bl	800f88c <ucdr_serialize_sequence_uint8_t>
 8018452:	4604      	mov	r4, r0
 8018454:	e7e7      	b.n	8018426 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8018456:	bf00      	nop

08018458 <uxr_serialize_ObjectVariant.part.0>:
 8018458:	b570      	push	{r4, r5, r6, lr}
 801845a:	780b      	ldrb	r3, [r1, #0]
 801845c:	460c      	mov	r4, r1
 801845e:	4605      	mov	r5, r0
 8018460:	3b01      	subs	r3, #1
 8018462:	2b0d      	cmp	r3, #13
 8018464:	d854      	bhi.n	8018510 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8018466:	e8df f003 	tbb	[pc, r3]
 801846a:	0730      	.short	0x0730
 801846c:	07071b1b 	.word	0x07071b1b
 8018470:	0c530707 	.word	0x0c530707
 8018474:	494e0c0c 	.word	0x494e0c0c
 8018478:	3104      	adds	r1, #4
 801847a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801847e:	f7ff bfc3 	b.w	8018408 <uxr_serialize_DATAWRITER_Representation>
 8018482:	7909      	ldrb	r1, [r1, #4]
 8018484:	f7fc fc88 	bl	8014d98 <ucdr_serialize_uint8_t>
 8018488:	b1e8      	cbz	r0, 80184c6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801848a:	7923      	ldrb	r3, [r4, #4]
 801848c:	2b01      	cmp	r3, #1
 801848e:	d001      	beq.n	8018494 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8018490:	2b02      	cmp	r3, #2
 8018492:	d13d      	bne.n	8018510 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8018494:	68a1      	ldr	r1, [r4, #8]
 8018496:	4628      	mov	r0, r5
 8018498:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801849c:	f001 bce8 	b.w	8019e70 <ucdr_serialize_string>
 80184a0:	7909      	ldrb	r1, [r1, #4]
 80184a2:	f7fc fc79 	bl	8014d98 <ucdr_serialize_uint8_t>
 80184a6:	4606      	mov	r6, r0
 80184a8:	b120      	cbz	r0, 80184b4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80184aa:	7923      	ldrb	r3, [r4, #4]
 80184ac:	2b02      	cmp	r3, #2
 80184ae:	d039      	beq.n	8018524 <uxr_serialize_ObjectVariant.part.0+0xcc>
 80184b0:	2b03      	cmp	r3, #3
 80184b2:	d02f      	beq.n	8018514 <uxr_serialize_ObjectVariant.part.0+0xbc>
 80184b4:	2202      	movs	r2, #2
 80184b6:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80184ba:	4628      	mov	r0, r5
 80184bc:	f7fc fb72 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 80184c0:	4030      	ands	r0, r6
 80184c2:	b2c0      	uxtb	r0, r0
 80184c4:	bd70      	pop	{r4, r5, r6, pc}
 80184c6:	2000      	movs	r0, #0
 80184c8:	bd70      	pop	{r4, r5, r6, pc}
 80184ca:	7909      	ldrb	r1, [r1, #4]
 80184cc:	f7fc fc64 	bl	8014d98 <ucdr_serialize_uint8_t>
 80184d0:	4606      	mov	r6, r0
 80184d2:	b158      	cbz	r0, 80184ec <uxr_serialize_ObjectVariant.part.0+0x94>
 80184d4:	7923      	ldrb	r3, [r4, #4]
 80184d6:	2b02      	cmp	r3, #2
 80184d8:	d003      	beq.n	80184e2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 80184da:	2b03      	cmp	r3, #3
 80184dc:	d028      	beq.n	8018530 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80184de:	2b01      	cmp	r3, #1
 80184e0:	d104      	bne.n	80184ec <uxr_serialize_ObjectVariant.part.0+0x94>
 80184e2:	68a1      	ldr	r1, [r4, #8]
 80184e4:	4628      	mov	r0, r5
 80184e6:	f001 fcc3 	bl	8019e70 <ucdr_serialize_string>
 80184ea:	4606      	mov	r6, r0
 80184ec:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80184f0:	4628      	mov	r0, r5
 80184f2:	f7fd f98d 	bl	8015810 <ucdr_serialize_int16_t>
 80184f6:	4030      	ands	r0, r6
 80184f8:	b2c0      	uxtb	r0, r0
 80184fa:	bd70      	pop	{r4, r5, r6, pc}
 80184fc:	3104      	adds	r1, #4
 80184fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018502:	f7ff be7b 	b.w	80181fc <uxr_serialize_CLIENT_Representation>
 8018506:	3104      	adds	r1, #4
 8018508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801850c:	f7ff bf32 	b.w	8018374 <uxr_serialize_AGENT_Representation>
 8018510:	2001      	movs	r0, #1
 8018512:	bd70      	pop	{r4, r5, r6, pc}
 8018514:	68a2      	ldr	r2, [r4, #8]
 8018516:	f104 010c 	add.w	r1, r4, #12
 801851a:	4628      	mov	r0, r5
 801851c:	f7f7 f9b6 	bl	800f88c <ucdr_serialize_sequence_uint8_t>
 8018520:	4606      	mov	r6, r0
 8018522:	e7c7      	b.n	80184b4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8018524:	68a1      	ldr	r1, [r4, #8]
 8018526:	4628      	mov	r0, r5
 8018528:	f001 fca2 	bl	8019e70 <ucdr_serialize_string>
 801852c:	4606      	mov	r6, r0
 801852e:	e7c1      	b.n	80184b4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8018530:	68a2      	ldr	r2, [r4, #8]
 8018532:	f104 010c 	add.w	r1, r4, #12
 8018536:	4628      	mov	r0, r5
 8018538:	f7f7 f9a8 	bl	800f88c <ucdr_serialize_sequence_uint8_t>
 801853c:	4606      	mov	r6, r0
 801853e:	e7d5      	b.n	80184ec <uxr_serialize_ObjectVariant.part.0+0x94>

08018540 <uxr_deserialize_DATAWRITER_Representation>:
 8018540:	b570      	push	{r4, r5, r6, lr}
 8018542:	4606      	mov	r6, r0
 8018544:	460d      	mov	r5, r1
 8018546:	f7fc fc3d 	bl	8014dc4 <ucdr_deserialize_uint8_t>
 801854a:	4604      	mov	r4, r0
 801854c:	b130      	cbz	r0, 801855c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801854e:	782b      	ldrb	r3, [r5, #0]
 8018550:	2b02      	cmp	r3, #2
 8018552:	d00c      	beq.n	801856e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8018554:	2b03      	cmp	r3, #3
 8018556:	d012      	beq.n	801857e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8018558:	2b01      	cmp	r3, #1
 801855a:	d008      	beq.n	801856e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801855c:	2202      	movs	r2, #2
 801855e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8018562:	4630      	mov	r0, r6
 8018564:	f7fc fb82 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 8018568:	4020      	ands	r0, r4
 801856a:	b2c0      	uxtb	r0, r0
 801856c:	bd70      	pop	{r4, r5, r6, pc}
 801856e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018572:	6869      	ldr	r1, [r5, #4]
 8018574:	4630      	mov	r0, r6
 8018576:	f001 fc8b 	bl	8019e90 <ucdr_deserialize_string>
 801857a:	4604      	mov	r4, r0
 801857c:	e7ee      	b.n	801855c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801857e:	1d2b      	adds	r3, r5, #4
 8018580:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018584:	f105 0108 	add.w	r1, r5, #8
 8018588:	4630      	mov	r0, r6
 801858a:	f7f7 f991 	bl	800f8b0 <ucdr_deserialize_sequence_uint8_t>
 801858e:	4604      	mov	r4, r0
 8018590:	e7e4      	b.n	801855c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8018592:	bf00      	nop

08018594 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8018594:	b570      	push	{r4, r5, r6, lr}
 8018596:	460d      	mov	r5, r1
 8018598:	7809      	ldrb	r1, [r1, #0]
 801859a:	4606      	mov	r6, r0
 801859c:	f7fc fbce 	bl	8014d3c <ucdr_serialize_bool>
 80185a0:	782b      	ldrb	r3, [r5, #0]
 80185a2:	4604      	mov	r4, r0
 80185a4:	b94b      	cbnz	r3, 80185ba <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80185a6:	7a29      	ldrb	r1, [r5, #8]
 80185a8:	4630      	mov	r0, r6
 80185aa:	f7fc fbc7 	bl	8014d3c <ucdr_serialize_bool>
 80185ae:	7a2b      	ldrb	r3, [r5, #8]
 80185b0:	4004      	ands	r4, r0
 80185b2:	b2e4      	uxtb	r4, r4
 80185b4:	b943      	cbnz	r3, 80185c8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80185b6:	4620      	mov	r0, r4
 80185b8:	bd70      	pop	{r4, r5, r6, pc}
 80185ba:	6869      	ldr	r1, [r5, #4]
 80185bc:	4630      	mov	r0, r6
 80185be:	f001 fc57 	bl	8019e70 <ucdr_serialize_string>
 80185c2:	4004      	ands	r4, r0
 80185c4:	b2e4      	uxtb	r4, r4
 80185c6:	e7ee      	b.n	80185a6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80185c8:	68e9      	ldr	r1, [r5, #12]
 80185ca:	4630      	mov	r0, r6
 80185cc:	f001 fc50 	bl	8019e70 <ucdr_serialize_string>
 80185d0:	4004      	ands	r4, r0
 80185d2:	4620      	mov	r0, r4
 80185d4:	bd70      	pop	{r4, r5, r6, pc}
 80185d6:	bf00      	nop

080185d8 <uxr_serialize_OBJK_Topic_Binary>:
 80185d8:	b570      	push	{r4, r5, r6, lr}
 80185da:	460d      	mov	r5, r1
 80185dc:	4606      	mov	r6, r0
 80185de:	6809      	ldr	r1, [r1, #0]
 80185e0:	f001 fc46 	bl	8019e70 <ucdr_serialize_string>
 80185e4:	4604      	mov	r4, r0
 80185e6:	7929      	ldrb	r1, [r5, #4]
 80185e8:	4630      	mov	r0, r6
 80185ea:	f7fc fba7 	bl	8014d3c <ucdr_serialize_bool>
 80185ee:	792b      	ldrb	r3, [r5, #4]
 80185f0:	4004      	ands	r4, r0
 80185f2:	b2e4      	uxtb	r4, r4
 80185f4:	b943      	cbnz	r3, 8018608 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80185f6:	7b29      	ldrb	r1, [r5, #12]
 80185f8:	4630      	mov	r0, r6
 80185fa:	f7fc fb9f 	bl	8014d3c <ucdr_serialize_bool>
 80185fe:	7b2b      	ldrb	r3, [r5, #12]
 8018600:	4004      	ands	r4, r0
 8018602:	b93b      	cbnz	r3, 8018614 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8018604:	4620      	mov	r0, r4
 8018606:	bd70      	pop	{r4, r5, r6, pc}
 8018608:	68a9      	ldr	r1, [r5, #8]
 801860a:	4630      	mov	r0, r6
 801860c:	f001 fc30 	bl	8019e70 <ucdr_serialize_string>
 8018610:	4004      	ands	r4, r0
 8018612:	e7f0      	b.n	80185f6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8018614:	6929      	ldr	r1, [r5, #16]
 8018616:	4630      	mov	r0, r6
 8018618:	f001 fc2a 	bl	8019e70 <ucdr_serialize_string>
 801861c:	4004      	ands	r4, r0
 801861e:	b2e4      	uxtb	r4, r4
 8018620:	4620      	mov	r0, r4
 8018622:	bd70      	pop	{r4, r5, r6, pc}

08018624 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8018624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018628:	460c      	mov	r4, r1
 801862a:	7809      	ldrb	r1, [r1, #0]
 801862c:	4606      	mov	r6, r0
 801862e:	f7fc fb85 	bl	8014d3c <ucdr_serialize_bool>
 8018632:	7823      	ldrb	r3, [r4, #0]
 8018634:	4605      	mov	r5, r0
 8018636:	b96b      	cbnz	r3, 8018654 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8018638:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801863c:	4630      	mov	r0, r6
 801863e:	f7fc fb7d 	bl	8014d3c <ucdr_serialize_bool>
 8018642:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8018646:	4005      	ands	r5, r0
 8018648:	b2ed      	uxtb	r5, r5
 801864a:	2b00      	cmp	r3, #0
 801864c:	d169      	bne.n	8018722 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801864e:	4628      	mov	r0, r5
 8018650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018654:	6861      	ldr	r1, [r4, #4]
 8018656:	4630      	mov	r0, r6
 8018658:	f7fc fdb4 	bl	80151c4 <ucdr_serialize_uint32_t>
 801865c:	6863      	ldr	r3, [r4, #4]
 801865e:	2b00      	cmp	r3, #0
 8018660:	d06b      	beq.n	801873a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8018662:	2800      	cmp	r0, #0
 8018664:	d067      	beq.n	8018736 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8018666:	68a1      	ldr	r1, [r4, #8]
 8018668:	4630      	mov	r0, r6
 801866a:	f001 fc01 	bl	8019e70 <ucdr_serialize_string>
 801866e:	6863      	ldr	r3, [r4, #4]
 8018670:	2b01      	cmp	r3, #1
 8018672:	d953      	bls.n	801871c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8018674:	2800      	cmp	r0, #0
 8018676:	d05e      	beq.n	8018736 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8018678:	68e1      	ldr	r1, [r4, #12]
 801867a:	4630      	mov	r0, r6
 801867c:	f001 fbf8 	bl	8019e70 <ucdr_serialize_string>
 8018680:	6863      	ldr	r3, [r4, #4]
 8018682:	2b02      	cmp	r3, #2
 8018684:	d94a      	bls.n	801871c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8018686:	2800      	cmp	r0, #0
 8018688:	d055      	beq.n	8018736 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801868a:	6921      	ldr	r1, [r4, #16]
 801868c:	4630      	mov	r0, r6
 801868e:	f001 fbef 	bl	8019e70 <ucdr_serialize_string>
 8018692:	6863      	ldr	r3, [r4, #4]
 8018694:	2b03      	cmp	r3, #3
 8018696:	d941      	bls.n	801871c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8018698:	2800      	cmp	r0, #0
 801869a:	d04c      	beq.n	8018736 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801869c:	6961      	ldr	r1, [r4, #20]
 801869e:	4630      	mov	r0, r6
 80186a0:	f001 fbe6 	bl	8019e70 <ucdr_serialize_string>
 80186a4:	6863      	ldr	r3, [r4, #4]
 80186a6:	2b04      	cmp	r3, #4
 80186a8:	d938      	bls.n	801871c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80186aa:	2800      	cmp	r0, #0
 80186ac:	d043      	beq.n	8018736 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80186ae:	69a1      	ldr	r1, [r4, #24]
 80186b0:	4630      	mov	r0, r6
 80186b2:	f001 fbdd 	bl	8019e70 <ucdr_serialize_string>
 80186b6:	6863      	ldr	r3, [r4, #4]
 80186b8:	2b05      	cmp	r3, #5
 80186ba:	d92f      	bls.n	801871c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80186bc:	2800      	cmp	r0, #0
 80186be:	d03a      	beq.n	8018736 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80186c0:	69e1      	ldr	r1, [r4, #28]
 80186c2:	4630      	mov	r0, r6
 80186c4:	f001 fbd4 	bl	8019e70 <ucdr_serialize_string>
 80186c8:	6863      	ldr	r3, [r4, #4]
 80186ca:	2b06      	cmp	r3, #6
 80186cc:	d926      	bls.n	801871c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80186ce:	b390      	cbz	r0, 8018736 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80186d0:	6a21      	ldr	r1, [r4, #32]
 80186d2:	4630      	mov	r0, r6
 80186d4:	f001 fbcc 	bl	8019e70 <ucdr_serialize_string>
 80186d8:	6863      	ldr	r3, [r4, #4]
 80186da:	2b07      	cmp	r3, #7
 80186dc:	d91e      	bls.n	801871c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80186de:	b350      	cbz	r0, 8018736 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80186e0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80186e2:	4630      	mov	r0, r6
 80186e4:	f001 fbc4 	bl	8019e70 <ucdr_serialize_string>
 80186e8:	6863      	ldr	r3, [r4, #4]
 80186ea:	2b08      	cmp	r3, #8
 80186ec:	d916      	bls.n	801871c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80186ee:	b310      	cbz	r0, 8018736 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80186f0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80186f2:	4630      	mov	r0, r6
 80186f4:	f001 fbbc 	bl	8019e70 <ucdr_serialize_string>
 80186f8:	6863      	ldr	r3, [r4, #4]
 80186fa:	2b09      	cmp	r3, #9
 80186fc:	d90e      	bls.n	801871c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80186fe:	b1d0      	cbz	r0, 8018736 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8018700:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8018704:	2709      	movs	r7, #9
 8018706:	e000      	b.n	801870a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8018708:	b1a8      	cbz	r0, 8018736 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801870a:	f858 1b04 	ldr.w	r1, [r8], #4
 801870e:	4630      	mov	r0, r6
 8018710:	f001 fbae 	bl	8019e70 <ucdr_serialize_string>
 8018714:	3701      	adds	r7, #1
 8018716:	6862      	ldr	r2, [r4, #4]
 8018718:	4297      	cmp	r7, r2
 801871a:	d3f5      	bcc.n	8018708 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801871c:	4005      	ands	r5, r0
 801871e:	b2ed      	uxtb	r5, r5
 8018720:	e78a      	b.n	8018638 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8018722:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8018724:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8018728:	4630      	mov	r0, r6
 801872a:	f7f7 f8af 	bl	800f88c <ucdr_serialize_sequence_uint8_t>
 801872e:	4005      	ands	r5, r0
 8018730:	4628      	mov	r0, r5
 8018732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018736:	2500      	movs	r5, #0
 8018738:	e77e      	b.n	8018638 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801873a:	4028      	ands	r0, r5
 801873c:	b2c5      	uxtb	r5, r0
 801873e:	e77b      	b.n	8018638 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08018740 <uxr_serialize_OBJK_Subscriber_Binary>:
 8018740:	b570      	push	{r4, r5, r6, lr}
 8018742:	460d      	mov	r5, r1
 8018744:	7809      	ldrb	r1, [r1, #0]
 8018746:	4606      	mov	r6, r0
 8018748:	f7fc faf8 	bl	8014d3c <ucdr_serialize_bool>
 801874c:	782b      	ldrb	r3, [r5, #0]
 801874e:	4604      	mov	r4, r0
 8018750:	b94b      	cbnz	r3, 8018766 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8018752:	7a29      	ldrb	r1, [r5, #8]
 8018754:	4630      	mov	r0, r6
 8018756:	f7fc faf1 	bl	8014d3c <ucdr_serialize_bool>
 801875a:	7a2b      	ldrb	r3, [r5, #8]
 801875c:	4004      	ands	r4, r0
 801875e:	b2e4      	uxtb	r4, r4
 8018760:	b943      	cbnz	r3, 8018774 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8018762:	4620      	mov	r0, r4
 8018764:	bd70      	pop	{r4, r5, r6, pc}
 8018766:	6869      	ldr	r1, [r5, #4]
 8018768:	4630      	mov	r0, r6
 801876a:	f001 fb81 	bl	8019e70 <ucdr_serialize_string>
 801876e:	4004      	ands	r4, r0
 8018770:	b2e4      	uxtb	r4, r4
 8018772:	e7ee      	b.n	8018752 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8018774:	f105 010c 	add.w	r1, r5, #12
 8018778:	4630      	mov	r0, r6
 801877a:	f7ff ff53 	bl	8018624 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801877e:	4004      	ands	r4, r0
 8018780:	4620      	mov	r0, r4
 8018782:	bd70      	pop	{r4, r5, r6, pc}

08018784 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8018784:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8018788:	4688      	mov	r8, r1
 801878a:	4681      	mov	r9, r0
 801878c:	8809      	ldrh	r1, [r1, #0]
 801878e:	f7fc fb2f 	bl	8014df0 <ucdr_serialize_uint16_t>
 8018792:	4606      	mov	r6, r0
 8018794:	f898 1002 	ldrb.w	r1, [r8, #2]
 8018798:	4648      	mov	r0, r9
 801879a:	f7fc facf 	bl	8014d3c <ucdr_serialize_bool>
 801879e:	f898 3002 	ldrb.w	r3, [r8, #2]
 80187a2:	4006      	ands	r6, r0
 80187a4:	b2f5      	uxtb	r5, r6
 80187a6:	b9eb      	cbnz	r3, 80187e4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80187a8:	f898 1006 	ldrb.w	r1, [r8, #6]
 80187ac:	4648      	mov	r0, r9
 80187ae:	f7fc fac5 	bl	8014d3c <ucdr_serialize_bool>
 80187b2:	f898 3006 	ldrb.w	r3, [r8, #6]
 80187b6:	4005      	ands	r5, r0
 80187b8:	bb7b      	cbnz	r3, 801881a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80187ba:	f898 100c 	ldrb.w	r1, [r8, #12]
 80187be:	4648      	mov	r0, r9
 80187c0:	f7fc fabc 	bl	8014d3c <ucdr_serialize_bool>
 80187c4:	f898 300c 	ldrb.w	r3, [r8, #12]
 80187c8:	4005      	ands	r5, r0
 80187ca:	b9f3      	cbnz	r3, 801880a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80187cc:	f898 1014 	ldrb.w	r1, [r8, #20]
 80187d0:	4648      	mov	r0, r9
 80187d2:	f7fc fab3 	bl	8014d3c <ucdr_serialize_bool>
 80187d6:	f898 3014 	ldrb.w	r3, [r8, #20]
 80187da:	4005      	ands	r5, r0
 80187dc:	b94b      	cbnz	r3, 80187f2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80187de:	4628      	mov	r0, r5
 80187e0:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80187e4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80187e8:	4648      	mov	r0, r9
 80187ea:	f7fc fb01 	bl	8014df0 <ucdr_serialize_uint16_t>
 80187ee:	4005      	ands	r5, r0
 80187f0:	e7da      	b.n	80187a8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80187f2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80187f6:	f108 011c 	add.w	r1, r8, #28
 80187fa:	4648      	mov	r0, r9
 80187fc:	f7f7 f846 	bl	800f88c <ucdr_serialize_sequence_uint8_t>
 8018800:	4028      	ands	r0, r5
 8018802:	b2c5      	uxtb	r5, r0
 8018804:	4628      	mov	r0, r5
 8018806:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801880a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801880e:	4648      	mov	r0, r9
 8018810:	f7fc fcd8 	bl	80151c4 <ucdr_serialize_uint32_t>
 8018814:	4028      	ands	r0, r5
 8018816:	b2c5      	uxtb	r5, r0
 8018818:	e7d8      	b.n	80187cc <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801881a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801881e:	4648      	mov	r0, r9
 8018820:	f7fc fcd0 	bl	80151c4 <ucdr_serialize_uint32_t>
 8018824:	4028      	ands	r0, r5
 8018826:	b2c5      	uxtb	r5, r0
 8018828:	e7c7      	b.n	80187ba <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801882a:	bf00      	nop

0801882c <uxr_serialize_OBJK_DataReader_Binary>:
 801882c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801882e:	2202      	movs	r2, #2
 8018830:	460c      	mov	r4, r1
 8018832:	4606      	mov	r6, r0
 8018834:	f7fc f9b6 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 8018838:	4605      	mov	r5, r0
 801883a:	78a1      	ldrb	r1, [r4, #2]
 801883c:	4630      	mov	r0, r6
 801883e:	f7fc fa7d 	bl	8014d3c <ucdr_serialize_bool>
 8018842:	78a3      	ldrb	r3, [r4, #2]
 8018844:	4005      	ands	r5, r0
 8018846:	b2ed      	uxtb	r5, r5
 8018848:	b90b      	cbnz	r3, 801884e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801884a:	4628      	mov	r0, r5
 801884c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801884e:	f104 0108 	add.w	r1, r4, #8
 8018852:	4630      	mov	r0, r6
 8018854:	f7ff ff96 	bl	8018784 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8018858:	4607      	mov	r7, r0
 801885a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801885e:	4630      	mov	r0, r6
 8018860:	f7fc fa6c 	bl	8014d3c <ucdr_serialize_bool>
 8018864:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018868:	4038      	ands	r0, r7
 801886a:	b2c7      	uxtb	r7, r0
 801886c:	b95b      	cbnz	r3, 8018886 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801886e:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8018872:	4630      	mov	r0, r6
 8018874:	f7fc fa62 	bl	8014d3c <ucdr_serialize_bool>
 8018878:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801887c:	4007      	ands	r7, r0
 801887e:	b94b      	cbnz	r3, 8018894 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8018880:	403d      	ands	r5, r7
 8018882:	4628      	mov	r0, r5
 8018884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018886:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 801888a:	4630      	mov	r0, r6
 801888c:	f7fc fef0 	bl	8015670 <ucdr_serialize_uint64_t>
 8018890:	4007      	ands	r7, r0
 8018892:	e7ec      	b.n	801886e <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8018894:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8018896:	4630      	mov	r0, r6
 8018898:	f001 faea 	bl	8019e70 <ucdr_serialize_string>
 801889c:	4007      	ands	r7, r0
 801889e:	b2ff      	uxtb	r7, r7
 80188a0:	e7ee      	b.n	8018880 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 80188a2:	bf00      	nop

080188a4 <uxr_deserialize_ObjectVariant>:
 80188a4:	b570      	push	{r4, r5, r6, lr}
 80188a6:	4605      	mov	r5, r0
 80188a8:	460e      	mov	r6, r1
 80188aa:	f7fc fa8b 	bl	8014dc4 <ucdr_deserialize_uint8_t>
 80188ae:	b168      	cbz	r0, 80188cc <uxr_deserialize_ObjectVariant+0x28>
 80188b0:	7833      	ldrb	r3, [r6, #0]
 80188b2:	4604      	mov	r4, r0
 80188b4:	3b01      	subs	r3, #1
 80188b6:	2b0d      	cmp	r3, #13
 80188b8:	d809      	bhi.n	80188ce <uxr_deserialize_ObjectVariant+0x2a>
 80188ba:	e8df f003 	tbb	[pc, r3]
 80188be:	0a41      	.short	0x0a41
 80188c0:	0a0a2323 	.word	0x0a0a2323
 80188c4:	10080a0a 	.word	0x10080a0a
 80188c8:	565c1010 	.word	0x565c1010
 80188cc:	2400      	movs	r4, #0
 80188ce:	4620      	mov	r0, r4
 80188d0:	bd70      	pop	{r4, r5, r6, pc}
 80188d2:	1d31      	adds	r1, r6, #4
 80188d4:	4628      	mov	r0, r5
 80188d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80188da:	f7ff be31 	b.w	8018540 <uxr_deserialize_DATAWRITER_Representation>
 80188de:	1d31      	adds	r1, r6, #4
 80188e0:	4628      	mov	r0, r5
 80188e2:	f7fc fa6f 	bl	8014dc4 <ucdr_deserialize_uint8_t>
 80188e6:	2800      	cmp	r0, #0
 80188e8:	d0f0      	beq.n	80188cc <uxr_deserialize_ObjectVariant+0x28>
 80188ea:	7933      	ldrb	r3, [r6, #4]
 80188ec:	2b01      	cmp	r3, #1
 80188ee:	d001      	beq.n	80188f4 <uxr_deserialize_ObjectVariant+0x50>
 80188f0:	2b02      	cmp	r3, #2
 80188f2:	d1ec      	bne.n	80188ce <uxr_deserialize_ObjectVariant+0x2a>
 80188f4:	68b1      	ldr	r1, [r6, #8]
 80188f6:	4628      	mov	r0, r5
 80188f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80188fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018900:	f001 bac6 	b.w	8019e90 <ucdr_deserialize_string>
 8018904:	1d31      	adds	r1, r6, #4
 8018906:	4628      	mov	r0, r5
 8018908:	f7fc fa5c 	bl	8014dc4 <ucdr_deserialize_uint8_t>
 801890c:	4604      	mov	r4, r0
 801890e:	b170      	cbz	r0, 801892e <uxr_deserialize_ObjectVariant+0x8a>
 8018910:	7933      	ldrb	r3, [r6, #4]
 8018912:	2b02      	cmp	r3, #2
 8018914:	d04c      	beq.n	80189b0 <uxr_deserialize_ObjectVariant+0x10c>
 8018916:	2b03      	cmp	r3, #3
 8018918:	d109      	bne.n	801892e <uxr_deserialize_ObjectVariant+0x8a>
 801891a:	f106 0308 	add.w	r3, r6, #8
 801891e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018922:	f106 010c 	add.w	r1, r6, #12
 8018926:	4628      	mov	r0, r5
 8018928:	f7f6 ffc2 	bl	800f8b0 <ucdr_deserialize_sequence_uint8_t>
 801892c:	4604      	mov	r4, r0
 801892e:	2202      	movs	r2, #2
 8018930:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8018934:	4628      	mov	r0, r5
 8018936:	f7fc f999 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 801893a:	4020      	ands	r0, r4
 801893c:	b2c4      	uxtb	r4, r0
 801893e:	e7c6      	b.n	80188ce <uxr_deserialize_ObjectVariant+0x2a>
 8018940:	1d31      	adds	r1, r6, #4
 8018942:	4628      	mov	r0, r5
 8018944:	f7fc fa3e 	bl	8014dc4 <ucdr_deserialize_uint8_t>
 8018948:	4604      	mov	r4, r0
 801894a:	b130      	cbz	r0, 801895a <uxr_deserialize_ObjectVariant+0xb6>
 801894c:	7933      	ldrb	r3, [r6, #4]
 801894e:	2b02      	cmp	r3, #2
 8018950:	d036      	beq.n	80189c0 <uxr_deserialize_ObjectVariant+0x11c>
 8018952:	2b03      	cmp	r3, #3
 8018954:	d03c      	beq.n	80189d0 <uxr_deserialize_ObjectVariant+0x12c>
 8018956:	2b01      	cmp	r3, #1
 8018958:	d032      	beq.n	80189c0 <uxr_deserialize_ObjectVariant+0x11c>
 801895a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801895e:	4628      	mov	r0, r5
 8018960:	f7fc ffd6 	bl	8015910 <ucdr_deserialize_int16_t>
 8018964:	4020      	ands	r0, r4
 8018966:	b2c4      	uxtb	r4, r0
 8018968:	e7b1      	b.n	80188ce <uxr_deserialize_ObjectVariant+0x2a>
 801896a:	1d31      	adds	r1, r6, #4
 801896c:	4628      	mov	r0, r5
 801896e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018972:	f7ff bc9b 	b.w	80182ac <uxr_deserialize_CLIENT_Representation>
 8018976:	2204      	movs	r2, #4
 8018978:	4628      	mov	r0, r5
 801897a:	18b1      	adds	r1, r6, r2
 801897c:	f7fc f976 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 8018980:	4604      	mov	r4, r0
 8018982:	2202      	movs	r2, #2
 8018984:	f106 0108 	add.w	r1, r6, #8
 8018988:	4628      	mov	r0, r5
 801898a:	f7fc f96f 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 801898e:	4004      	ands	r4, r0
 8018990:	2202      	movs	r2, #2
 8018992:	f106 010a 	add.w	r1, r6, #10
 8018996:	4628      	mov	r0, r5
 8018998:	b2e4      	uxtb	r4, r4
 801899a:	f7fc f967 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 801899e:	4603      	mov	r3, r0
 80189a0:	f106 010c 	add.w	r1, r6, #12
 80189a4:	4628      	mov	r0, r5
 80189a6:	401c      	ands	r4, r3
 80189a8:	f7fc f9de 	bl	8014d68 <ucdr_deserialize_bool>
 80189ac:	4004      	ands	r4, r0
 80189ae:	e78e      	b.n	80188ce <uxr_deserialize_ObjectVariant+0x2a>
 80189b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80189b4:	68b1      	ldr	r1, [r6, #8]
 80189b6:	4628      	mov	r0, r5
 80189b8:	f001 fa6a 	bl	8019e90 <ucdr_deserialize_string>
 80189bc:	4604      	mov	r4, r0
 80189be:	e7b6      	b.n	801892e <uxr_deserialize_ObjectVariant+0x8a>
 80189c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80189c4:	68b1      	ldr	r1, [r6, #8]
 80189c6:	4628      	mov	r0, r5
 80189c8:	f001 fa62 	bl	8019e90 <ucdr_deserialize_string>
 80189cc:	4604      	mov	r4, r0
 80189ce:	e7c4      	b.n	801895a <uxr_deserialize_ObjectVariant+0xb6>
 80189d0:	f106 0308 	add.w	r3, r6, #8
 80189d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80189d8:	f106 010c 	add.w	r1, r6, #12
 80189dc:	4628      	mov	r0, r5
 80189de:	f7f6 ff67 	bl	800f8b0 <ucdr_deserialize_sequence_uint8_t>
 80189e2:	4604      	mov	r4, r0
 80189e4:	e7b9      	b.n	801895a <uxr_deserialize_ObjectVariant+0xb6>
 80189e6:	bf00      	nop

080189e8 <uxr_deserialize_BaseObjectRequest>:
 80189e8:	b570      	push	{r4, r5, r6, lr}
 80189ea:	2202      	movs	r2, #2
 80189ec:	4605      	mov	r5, r0
 80189ee:	460e      	mov	r6, r1
 80189f0:	f7fc f93c 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 80189f4:	2202      	movs	r2, #2
 80189f6:	4604      	mov	r4, r0
 80189f8:	4628      	mov	r0, r5
 80189fa:	18b1      	adds	r1, r6, r2
 80189fc:	f7fc f936 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 8018a00:	4020      	ands	r0, r4
 8018a02:	b2c0      	uxtb	r0, r0
 8018a04:	bd70      	pop	{r4, r5, r6, pc}
 8018a06:	bf00      	nop

08018a08 <uxr_serialize_ActivityInfoVariant>:
 8018a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a0c:	460e      	mov	r6, r1
 8018a0e:	7809      	ldrb	r1, [r1, #0]
 8018a10:	4680      	mov	r8, r0
 8018a12:	f7fc f9c1 	bl	8014d98 <ucdr_serialize_uint8_t>
 8018a16:	4607      	mov	r7, r0
 8018a18:	b138      	cbz	r0, 8018a2a <uxr_serialize_ActivityInfoVariant+0x22>
 8018a1a:	7833      	ldrb	r3, [r6, #0]
 8018a1c:	2b06      	cmp	r3, #6
 8018a1e:	f000 8081 	beq.w	8018b24 <uxr_serialize_ActivityInfoVariant+0x11c>
 8018a22:	2b0d      	cmp	r3, #13
 8018a24:	d014      	beq.n	8018a50 <uxr_serialize_ActivityInfoVariant+0x48>
 8018a26:	2b05      	cmp	r3, #5
 8018a28:	d002      	beq.n	8018a30 <uxr_serialize_ActivityInfoVariant+0x28>
 8018a2a:	4638      	mov	r0, r7
 8018a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a30:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8018a34:	4640      	mov	r0, r8
 8018a36:	f7fc feeb 	bl	8015810 <ucdr_serialize_int16_t>
 8018a3a:	4607      	mov	r7, r0
 8018a3c:	4640      	mov	r0, r8
 8018a3e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8018a42:	f7fc fe15 	bl	8015670 <ucdr_serialize_uint64_t>
 8018a46:	4038      	ands	r0, r7
 8018a48:	b2c7      	uxtb	r7, r0
 8018a4a:	4638      	mov	r0, r7
 8018a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a50:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8018a54:	4640      	mov	r0, r8
 8018a56:	f7fc fedb 	bl	8015810 <ucdr_serialize_int16_t>
 8018a5a:	68f1      	ldr	r1, [r6, #12]
 8018a5c:	4607      	mov	r7, r0
 8018a5e:	4640      	mov	r0, r8
 8018a60:	f7fc fbb0 	bl	80151c4 <ucdr_serialize_uint32_t>
 8018a64:	68f3      	ldr	r3, [r6, #12]
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d0ed      	beq.n	8018a46 <uxr_serialize_ActivityInfoVariant+0x3e>
 8018a6a:	b318      	cbz	r0, 8018ab4 <uxr_serialize_ActivityInfoVariant+0xac>
 8018a6c:	f106 090c 	add.w	r9, r6, #12
 8018a70:	2400      	movs	r4, #0
 8018a72:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8018a76:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8018a7a:	7c29      	ldrb	r1, [r5, #16]
 8018a7c:	4640      	mov	r0, r8
 8018a7e:	f7fc f98b 	bl	8014d98 <ucdr_serialize_uint8_t>
 8018a82:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8018a86:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8018a8a:	2800      	cmp	r0, #0
 8018a8c:	d051      	beq.n	8018b32 <uxr_serialize_ActivityInfoVariant+0x12a>
 8018a8e:	7c2b      	ldrb	r3, [r5, #16]
 8018a90:	00c9      	lsls	r1, r1, #3
 8018a92:	2b03      	cmp	r3, #3
 8018a94:	d854      	bhi.n	8018b40 <uxr_serialize_ActivityInfoVariant+0x138>
 8018a96:	e8df f003 	tbb	[pc, r3]
 8018a9a:	2133      	.short	0x2133
 8018a9c:	020f      	.short	0x020f
 8018a9e:	4449      	add	r1, r9
 8018aa0:	4640      	mov	r0, r8
 8018aa2:	6889      	ldr	r1, [r1, #8]
 8018aa4:	f001 f9e4 	bl	8019e70 <ucdr_serialize_string>
 8018aa8:	3401      	adds	r4, #1
 8018aaa:	68f2      	ldr	r2, [r6, #12]
 8018aac:	4294      	cmp	r4, r2
 8018aae:	d244      	bcs.n	8018b3a <uxr_serialize_ActivityInfoVariant+0x132>
 8018ab0:	2800      	cmp	r0, #0
 8018ab2:	d1de      	bne.n	8018a72 <uxr_serialize_ActivityInfoVariant+0x6a>
 8018ab4:	2700      	movs	r7, #0
 8018ab6:	e7b8      	b.n	8018a2a <uxr_serialize_ActivityInfoVariant+0x22>
 8018ab8:	3108      	adds	r1, #8
 8018aba:	44a2      	add	sl, r4
 8018abc:	2210      	movs	r2, #16
 8018abe:	4640      	mov	r0, r8
 8018ac0:	4449      	add	r1, r9
 8018ac2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8018ac6:	f7fc f86d 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 8018aca:	4605      	mov	r5, r0
 8018acc:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 8018ad0:	4640      	mov	r0, r8
 8018ad2:	f7fc fb77 	bl	80151c4 <ucdr_serialize_uint32_t>
 8018ad6:	4028      	ands	r0, r5
 8018ad8:	b2c0      	uxtb	r0, r0
 8018ada:	e7e5      	b.n	8018aa8 <uxr_serialize_ActivityInfoVariant+0xa0>
 8018adc:	3108      	adds	r1, #8
 8018ade:	44a2      	add	sl, r4
 8018ae0:	2204      	movs	r2, #4
 8018ae2:	4640      	mov	r0, r8
 8018ae4:	4449      	add	r1, r9
 8018ae6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8018aea:	f7fc f85b 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 8018aee:	4605      	mov	r5, r0
 8018af0:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 8018af4:	4640      	mov	r0, r8
 8018af6:	f7fc f97b 	bl	8014df0 <ucdr_serialize_uint16_t>
 8018afa:	4028      	ands	r0, r5
 8018afc:	b2c0      	uxtb	r0, r0
 8018afe:	e7d3      	b.n	8018aa8 <uxr_serialize_ActivityInfoVariant+0xa0>
 8018b00:	3108      	adds	r1, #8
 8018b02:	44a2      	add	sl, r4
 8018b04:	2202      	movs	r2, #2
 8018b06:	4640      	mov	r0, r8
 8018b08:	4449      	add	r1, r9
 8018b0a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8018b0e:	f7fc f849 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 8018b12:	4605      	mov	r5, r0
 8018b14:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8018b18:	4640      	mov	r0, r8
 8018b1a:	f7fc f93d 	bl	8014d98 <ucdr_serialize_uint8_t>
 8018b1e:	4028      	ands	r0, r5
 8018b20:	b2c0      	uxtb	r0, r0
 8018b22:	e7c1      	b.n	8018aa8 <uxr_serialize_ActivityInfoVariant+0xa0>
 8018b24:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8018b28:	4640      	mov	r0, r8
 8018b2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b2e:	f7fc be6f 	b.w	8015810 <ucdr_serialize_int16_t>
 8018b32:	3401      	adds	r4, #1
 8018b34:	68f2      	ldr	r2, [r6, #12]
 8018b36:	42a2      	cmp	r2, r4
 8018b38:	d8bc      	bhi.n	8018ab4 <uxr_serialize_ActivityInfoVariant+0xac>
 8018b3a:	4007      	ands	r7, r0
 8018b3c:	b2ff      	uxtb	r7, r7
 8018b3e:	e774      	b.n	8018a2a <uxr_serialize_ActivityInfoVariant+0x22>
 8018b40:	3401      	adds	r4, #1
 8018b42:	68f3      	ldr	r3, [r6, #12]
 8018b44:	3518      	adds	r5, #24
 8018b46:	429c      	cmp	r4, r3
 8018b48:	d397      	bcc.n	8018a7a <uxr_serialize_ActivityInfoVariant+0x72>
 8018b4a:	e76e      	b.n	8018a2a <uxr_serialize_ActivityInfoVariant+0x22>

08018b4c <uxr_deserialize_BaseObjectReply>:
 8018b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b50:	2202      	movs	r2, #2
 8018b52:	4606      	mov	r6, r0
 8018b54:	460f      	mov	r7, r1
 8018b56:	f7fc f889 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 8018b5a:	2202      	movs	r2, #2
 8018b5c:	4605      	mov	r5, r0
 8018b5e:	4630      	mov	r0, r6
 8018b60:	18b9      	adds	r1, r7, r2
 8018b62:	f7fc f883 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 8018b66:	4680      	mov	r8, r0
 8018b68:	1d39      	adds	r1, r7, #4
 8018b6a:	4630      	mov	r0, r6
 8018b6c:	f7fc f92a 	bl	8014dc4 <ucdr_deserialize_uint8_t>
 8018b70:	ea05 0508 	and.w	r5, r5, r8
 8018b74:	4604      	mov	r4, r0
 8018b76:	1d79      	adds	r1, r7, #5
 8018b78:	4630      	mov	r0, r6
 8018b7a:	402c      	ands	r4, r5
 8018b7c:	f7fc f922 	bl	8014dc4 <ucdr_deserialize_uint8_t>
 8018b80:	4020      	ands	r0, r4
 8018b82:	b2c0      	uxtb	r0, r0
 8018b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018b88 <uxr_serialize_ReadSpecification>:
 8018b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b8a:	460e      	mov	r6, r1
 8018b8c:	4607      	mov	r7, r0
 8018b8e:	7809      	ldrb	r1, [r1, #0]
 8018b90:	f7fc f902 	bl	8014d98 <ucdr_serialize_uint8_t>
 8018b94:	4604      	mov	r4, r0
 8018b96:	7871      	ldrb	r1, [r6, #1]
 8018b98:	4638      	mov	r0, r7
 8018b9a:	f7fc f8fd 	bl	8014d98 <ucdr_serialize_uint8_t>
 8018b9e:	4004      	ands	r4, r0
 8018ba0:	78b1      	ldrb	r1, [r6, #2]
 8018ba2:	4638      	mov	r0, r7
 8018ba4:	f7fc f8ca 	bl	8014d3c <ucdr_serialize_bool>
 8018ba8:	78b3      	ldrb	r3, [r6, #2]
 8018baa:	b2e4      	uxtb	r4, r4
 8018bac:	4004      	ands	r4, r0
 8018bae:	b943      	cbnz	r3, 8018bc2 <uxr_serialize_ReadSpecification+0x3a>
 8018bb0:	7a31      	ldrb	r1, [r6, #8]
 8018bb2:	4638      	mov	r0, r7
 8018bb4:	f7fc f8c2 	bl	8014d3c <ucdr_serialize_bool>
 8018bb8:	7a33      	ldrb	r3, [r6, #8]
 8018bba:	4004      	ands	r4, r0
 8018bbc:	b93b      	cbnz	r3, 8018bce <uxr_serialize_ReadSpecification+0x46>
 8018bbe:	4620      	mov	r0, r4
 8018bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018bc2:	6871      	ldr	r1, [r6, #4]
 8018bc4:	4638      	mov	r0, r7
 8018bc6:	f001 f953 	bl	8019e70 <ucdr_serialize_string>
 8018bca:	4004      	ands	r4, r0
 8018bcc:	e7f0      	b.n	8018bb0 <uxr_serialize_ReadSpecification+0x28>
 8018bce:	8971      	ldrh	r1, [r6, #10]
 8018bd0:	4638      	mov	r0, r7
 8018bd2:	f7fc f90d 	bl	8014df0 <ucdr_serialize_uint16_t>
 8018bd6:	4605      	mov	r5, r0
 8018bd8:	89b1      	ldrh	r1, [r6, #12]
 8018bda:	4638      	mov	r0, r7
 8018bdc:	f7fc f908 	bl	8014df0 <ucdr_serialize_uint16_t>
 8018be0:	4005      	ands	r5, r0
 8018be2:	89f1      	ldrh	r1, [r6, #14]
 8018be4:	4638      	mov	r0, r7
 8018be6:	b2ed      	uxtb	r5, r5
 8018be8:	f7fc f902 	bl	8014df0 <ucdr_serialize_uint16_t>
 8018bec:	8a31      	ldrh	r1, [r6, #16]
 8018bee:	4025      	ands	r5, r4
 8018bf0:	4604      	mov	r4, r0
 8018bf2:	4638      	mov	r0, r7
 8018bf4:	4025      	ands	r5, r4
 8018bf6:	f7fc f8fb 	bl	8014df0 <ucdr_serialize_uint16_t>
 8018bfa:	ea00 0405 	and.w	r4, r0, r5
 8018bfe:	4620      	mov	r0, r4
 8018c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c02:	bf00      	nop

08018c04 <uxr_serialize_CREATE_CLIENT_Payload>:
 8018c04:	f7ff bafa 	b.w	80181fc <uxr_serialize_CLIENT_Representation>

08018c08 <uxr_serialize_CREATE_Payload>:
 8018c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c0a:	2202      	movs	r2, #2
 8018c0c:	4607      	mov	r7, r0
 8018c0e:	460e      	mov	r6, r1
 8018c10:	f7fb ffc8 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 8018c14:	2202      	movs	r2, #2
 8018c16:	4605      	mov	r5, r0
 8018c18:	4638      	mov	r0, r7
 8018c1a:	18b1      	adds	r1, r6, r2
 8018c1c:	f7fb ffc2 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 8018c20:	7931      	ldrb	r1, [r6, #4]
 8018c22:	4604      	mov	r4, r0
 8018c24:	4638      	mov	r0, r7
 8018c26:	f7fc f8b7 	bl	8014d98 <ucdr_serialize_uint8_t>
 8018c2a:	b170      	cbz	r0, 8018c4a <uxr_serialize_CREATE_Payload+0x42>
 8018c2c:	7933      	ldrb	r3, [r6, #4]
 8018c2e:	402c      	ands	r4, r5
 8018c30:	3b01      	subs	r3, #1
 8018c32:	b2e4      	uxtb	r4, r4
 8018c34:	2b0d      	cmp	r3, #13
 8018c36:	d809      	bhi.n	8018c4c <uxr_serialize_CREATE_Payload+0x44>
 8018c38:	e8df f003 	tbb	[pc, r3]
 8018c3c:	23230a4c 	.word	0x23230a4c
 8018c40:	0a0a0a0a 	.word	0x0a0a0a0a
 8018c44:	12121208 	.word	0x12121208
 8018c48:	3e45      	.short	0x3e45
 8018c4a:	2400      	movs	r4, #0
 8018c4c:	4620      	mov	r0, r4
 8018c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c50:	f106 0108 	add.w	r1, r6, #8
 8018c54:	4638      	mov	r0, r7
 8018c56:	f7ff fbd7 	bl	8018408 <uxr_serialize_DATAWRITER_Representation>
 8018c5a:	4004      	ands	r4, r0
 8018c5c:	4620      	mov	r0, r4
 8018c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c60:	7a31      	ldrb	r1, [r6, #8]
 8018c62:	4638      	mov	r0, r7
 8018c64:	f7fc f898 	bl	8014d98 <ucdr_serialize_uint8_t>
 8018c68:	2800      	cmp	r0, #0
 8018c6a:	d0ee      	beq.n	8018c4a <uxr_serialize_CREATE_Payload+0x42>
 8018c6c:	7a33      	ldrb	r3, [r6, #8]
 8018c6e:	2b01      	cmp	r3, #1
 8018c70:	d001      	beq.n	8018c76 <uxr_serialize_CREATE_Payload+0x6e>
 8018c72:	2b02      	cmp	r3, #2
 8018c74:	d1ea      	bne.n	8018c4c <uxr_serialize_CREATE_Payload+0x44>
 8018c76:	68f1      	ldr	r1, [r6, #12]
 8018c78:	4638      	mov	r0, r7
 8018c7a:	f001 f8f9 	bl	8019e70 <ucdr_serialize_string>
 8018c7e:	4004      	ands	r4, r0
 8018c80:	e7e4      	b.n	8018c4c <uxr_serialize_CREATE_Payload+0x44>
 8018c82:	7a31      	ldrb	r1, [r6, #8]
 8018c84:	4638      	mov	r0, r7
 8018c86:	f7fc f887 	bl	8014d98 <ucdr_serialize_uint8_t>
 8018c8a:	4605      	mov	r5, r0
 8018c8c:	b158      	cbz	r0, 8018ca6 <uxr_serialize_CREATE_Payload+0x9e>
 8018c8e:	7a33      	ldrb	r3, [r6, #8]
 8018c90:	2b02      	cmp	r3, #2
 8018c92:	d034      	beq.n	8018cfe <uxr_serialize_CREATE_Payload+0xf6>
 8018c94:	2b03      	cmp	r3, #3
 8018c96:	d106      	bne.n	8018ca6 <uxr_serialize_CREATE_Payload+0x9e>
 8018c98:	68f2      	ldr	r2, [r6, #12]
 8018c9a:	f106 0110 	add.w	r1, r6, #16
 8018c9e:	4638      	mov	r0, r7
 8018ca0:	f7f6 fdf4 	bl	800f88c <ucdr_serialize_sequence_uint8_t>
 8018ca4:	4605      	mov	r5, r0
 8018ca6:	2202      	movs	r2, #2
 8018ca8:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8018cac:	4638      	mov	r0, r7
 8018cae:	f7fb ff79 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 8018cb2:	4028      	ands	r0, r5
 8018cb4:	4004      	ands	r4, r0
 8018cb6:	e7c9      	b.n	8018c4c <uxr_serialize_CREATE_Payload+0x44>
 8018cb8:	f106 0108 	add.w	r1, r6, #8
 8018cbc:	4638      	mov	r0, r7
 8018cbe:	f7ff fa9d 	bl	80181fc <uxr_serialize_CLIENT_Representation>
 8018cc2:	4004      	ands	r4, r0
 8018cc4:	e7c2      	b.n	8018c4c <uxr_serialize_CREATE_Payload+0x44>
 8018cc6:	f106 0108 	add.w	r1, r6, #8
 8018cca:	4638      	mov	r0, r7
 8018ccc:	f7ff fb52 	bl	8018374 <uxr_serialize_AGENT_Representation>
 8018cd0:	4004      	ands	r4, r0
 8018cd2:	e7bb      	b.n	8018c4c <uxr_serialize_CREATE_Payload+0x44>
 8018cd4:	7a31      	ldrb	r1, [r6, #8]
 8018cd6:	4638      	mov	r0, r7
 8018cd8:	f7fc f85e 	bl	8014d98 <ucdr_serialize_uint8_t>
 8018cdc:	4605      	mov	r5, r0
 8018cde:	b130      	cbz	r0, 8018cee <uxr_serialize_CREATE_Payload+0xe6>
 8018ce0:	7a33      	ldrb	r3, [r6, #8]
 8018ce2:	2b02      	cmp	r3, #2
 8018ce4:	d011      	beq.n	8018d0a <uxr_serialize_CREATE_Payload+0x102>
 8018ce6:	2b03      	cmp	r3, #3
 8018ce8:	d015      	beq.n	8018d16 <uxr_serialize_CREATE_Payload+0x10e>
 8018cea:	2b01      	cmp	r3, #1
 8018cec:	d00d      	beq.n	8018d0a <uxr_serialize_CREATE_Payload+0x102>
 8018cee:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8018cf2:	4638      	mov	r0, r7
 8018cf4:	f7fc fd8c 	bl	8015810 <ucdr_serialize_int16_t>
 8018cf8:	4028      	ands	r0, r5
 8018cfa:	4004      	ands	r4, r0
 8018cfc:	e7a6      	b.n	8018c4c <uxr_serialize_CREATE_Payload+0x44>
 8018cfe:	68f1      	ldr	r1, [r6, #12]
 8018d00:	4638      	mov	r0, r7
 8018d02:	f001 f8b5 	bl	8019e70 <ucdr_serialize_string>
 8018d06:	4605      	mov	r5, r0
 8018d08:	e7cd      	b.n	8018ca6 <uxr_serialize_CREATE_Payload+0x9e>
 8018d0a:	68f1      	ldr	r1, [r6, #12]
 8018d0c:	4638      	mov	r0, r7
 8018d0e:	f001 f8af 	bl	8019e70 <ucdr_serialize_string>
 8018d12:	4605      	mov	r5, r0
 8018d14:	e7eb      	b.n	8018cee <uxr_serialize_CREATE_Payload+0xe6>
 8018d16:	68f2      	ldr	r2, [r6, #12]
 8018d18:	f106 0110 	add.w	r1, r6, #16
 8018d1c:	4638      	mov	r0, r7
 8018d1e:	f7f6 fdb5 	bl	800f88c <ucdr_serialize_sequence_uint8_t>
 8018d22:	4605      	mov	r5, r0
 8018d24:	e7e3      	b.n	8018cee <uxr_serialize_CREATE_Payload+0xe6>
 8018d26:	bf00      	nop

08018d28 <uxr_deserialize_GET_INFO_Payload>:
 8018d28:	b570      	push	{r4, r5, r6, lr}
 8018d2a:	2202      	movs	r2, #2
 8018d2c:	4605      	mov	r5, r0
 8018d2e:	460e      	mov	r6, r1
 8018d30:	f7fb ff9c 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 8018d34:	2202      	movs	r2, #2
 8018d36:	4604      	mov	r4, r0
 8018d38:	4628      	mov	r0, r5
 8018d3a:	18b1      	adds	r1, r6, r2
 8018d3c:	f7fb ff96 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 8018d40:	4603      	mov	r3, r0
 8018d42:	1d31      	adds	r1, r6, #4
 8018d44:	4628      	mov	r0, r5
 8018d46:	401c      	ands	r4, r3
 8018d48:	f7fc fb6c 	bl	8015424 <ucdr_deserialize_uint32_t>
 8018d4c:	b2e4      	uxtb	r4, r4
 8018d4e:	4020      	ands	r0, r4
 8018d50:	bd70      	pop	{r4, r5, r6, pc}
 8018d52:	bf00      	nop

08018d54 <uxr_serialize_DELETE_Payload>:
 8018d54:	b570      	push	{r4, r5, r6, lr}
 8018d56:	2202      	movs	r2, #2
 8018d58:	4605      	mov	r5, r0
 8018d5a:	460e      	mov	r6, r1
 8018d5c:	f7fb ff22 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 8018d60:	2202      	movs	r2, #2
 8018d62:	4604      	mov	r4, r0
 8018d64:	4628      	mov	r0, r5
 8018d66:	18b1      	adds	r1, r6, r2
 8018d68:	f7fb ff1c 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 8018d6c:	4020      	ands	r0, r4
 8018d6e:	b2c0      	uxtb	r0, r0
 8018d70:	bd70      	pop	{r4, r5, r6, pc}
 8018d72:	bf00      	nop

08018d74 <uxr_deserialize_STATUS_AGENT_Payload>:
 8018d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d78:	460e      	mov	r6, r1
 8018d7a:	4605      	mov	r5, r0
 8018d7c:	f7fc f822 	bl	8014dc4 <ucdr_deserialize_uint8_t>
 8018d80:	4604      	mov	r4, r0
 8018d82:	1c71      	adds	r1, r6, #1
 8018d84:	4628      	mov	r0, r5
 8018d86:	f7fc f81d 	bl	8014dc4 <ucdr_deserialize_uint8_t>
 8018d8a:	2204      	movs	r2, #4
 8018d8c:	4681      	mov	r9, r0
 8018d8e:	4628      	mov	r0, r5
 8018d90:	18b1      	adds	r1, r6, r2
 8018d92:	f7fb ff6b 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 8018d96:	f106 0108 	add.w	r1, r6, #8
 8018d9a:	4680      	mov	r8, r0
 8018d9c:	2202      	movs	r2, #2
 8018d9e:	4628      	mov	r0, r5
 8018da0:	f7fb ff64 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 8018da4:	ea04 0309 	and.w	r3, r4, r9
 8018da8:	4607      	mov	r7, r0
 8018daa:	2202      	movs	r2, #2
 8018dac:	b2db      	uxtb	r3, r3
 8018dae:	f106 010a 	add.w	r1, r6, #10
 8018db2:	4628      	mov	r0, r5
 8018db4:	ea03 0408 	and.w	r4, r3, r8
 8018db8:	f7fb ff58 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 8018dbc:	4603      	mov	r3, r0
 8018dbe:	4628      	mov	r0, r5
 8018dc0:	403c      	ands	r4, r7
 8018dc2:	f106 010c 	add.w	r1, r6, #12
 8018dc6:	461d      	mov	r5, r3
 8018dc8:	f7fb ffce 	bl	8014d68 <ucdr_deserialize_bool>
 8018dcc:	4025      	ands	r5, r4
 8018dce:	4028      	ands	r0, r5
 8018dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018dd4 <uxr_deserialize_STATUS_Payload>:
 8018dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018dd8:	2202      	movs	r2, #2
 8018dda:	4606      	mov	r6, r0
 8018ddc:	460f      	mov	r7, r1
 8018dde:	f7fb ff45 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 8018de2:	2202      	movs	r2, #2
 8018de4:	4605      	mov	r5, r0
 8018de6:	4630      	mov	r0, r6
 8018de8:	18b9      	adds	r1, r7, r2
 8018dea:	f7fb ff3f 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 8018dee:	4680      	mov	r8, r0
 8018df0:	1d39      	adds	r1, r7, #4
 8018df2:	4630      	mov	r0, r6
 8018df4:	f7fb ffe6 	bl	8014dc4 <ucdr_deserialize_uint8_t>
 8018df8:	ea05 0508 	and.w	r5, r5, r8
 8018dfc:	4604      	mov	r4, r0
 8018dfe:	1d79      	adds	r1, r7, #5
 8018e00:	4630      	mov	r0, r6
 8018e02:	402c      	ands	r4, r5
 8018e04:	f7fb ffde 	bl	8014dc4 <ucdr_deserialize_uint8_t>
 8018e08:	4020      	ands	r0, r4
 8018e0a:	b2c0      	uxtb	r0, r0
 8018e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018e10 <uxr_serialize_INFO_Payload>:
 8018e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e14:	2202      	movs	r2, #2
 8018e16:	460c      	mov	r4, r1
 8018e18:	4605      	mov	r5, r0
 8018e1a:	f7fb fec3 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 8018e1e:	2202      	movs	r2, #2
 8018e20:	4680      	mov	r8, r0
 8018e22:	4628      	mov	r0, r5
 8018e24:	18a1      	adds	r1, r4, r2
 8018e26:	f7fb febd 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 8018e2a:	4607      	mov	r7, r0
 8018e2c:	7921      	ldrb	r1, [r4, #4]
 8018e2e:	4628      	mov	r0, r5
 8018e30:	f7fb ffb2 	bl	8014d98 <ucdr_serialize_uint8_t>
 8018e34:	ea08 0807 	and.w	r8, r8, r7
 8018e38:	4606      	mov	r6, r0
 8018e3a:	7961      	ldrb	r1, [r4, #5]
 8018e3c:	4628      	mov	r0, r5
 8018e3e:	ea06 0608 	and.w	r6, r6, r8
 8018e42:	f7fb ffa9 	bl	8014d98 <ucdr_serialize_uint8_t>
 8018e46:	7a21      	ldrb	r1, [r4, #8]
 8018e48:	4030      	ands	r0, r6
 8018e4a:	b2c7      	uxtb	r7, r0
 8018e4c:	4628      	mov	r0, r5
 8018e4e:	f7fb ff75 	bl	8014d3c <ucdr_serialize_bool>
 8018e52:	7a23      	ldrb	r3, [r4, #8]
 8018e54:	4606      	mov	r6, r0
 8018e56:	b96b      	cbnz	r3, 8018e74 <uxr_serialize_INFO_Payload+0x64>
 8018e58:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8018e5c:	4628      	mov	r0, r5
 8018e5e:	f7fb ff6d 	bl	8014d3c <ucdr_serialize_bool>
 8018e62:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8018e66:	4030      	ands	r0, r6
 8018e68:	b2c6      	uxtb	r6, r0
 8018e6a:	b983      	cbnz	r3, 8018e8e <uxr_serialize_INFO_Payload+0x7e>
 8018e6c:	ea06 0007 	and.w	r0, r6, r7
 8018e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e74:	7b21      	ldrb	r1, [r4, #12]
 8018e76:	4628      	mov	r0, r5
 8018e78:	f7fb ff8e 	bl	8014d98 <ucdr_serialize_uint8_t>
 8018e7c:	b188      	cbz	r0, 8018ea2 <uxr_serialize_INFO_Payload+0x92>
 8018e7e:	f104 010c 	add.w	r1, r4, #12
 8018e82:	4628      	mov	r0, r5
 8018e84:	f7ff fae8 	bl	8018458 <uxr_serialize_ObjectVariant.part.0>
 8018e88:	4030      	ands	r0, r6
 8018e8a:	b2c6      	uxtb	r6, r0
 8018e8c:	e7e4      	b.n	8018e58 <uxr_serialize_INFO_Payload+0x48>
 8018e8e:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8018e92:	4628      	mov	r0, r5
 8018e94:	f7ff fdb8 	bl	8018a08 <uxr_serialize_ActivityInfoVariant>
 8018e98:	4006      	ands	r6, r0
 8018e9a:	ea06 0007 	and.w	r0, r6, r7
 8018e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ea2:	4606      	mov	r6, r0
 8018ea4:	e7d8      	b.n	8018e58 <uxr_serialize_INFO_Payload+0x48>
 8018ea6:	bf00      	nop

08018ea8 <uxr_serialize_READ_DATA_Payload>:
 8018ea8:	b570      	push	{r4, r5, r6, lr}
 8018eaa:	2202      	movs	r2, #2
 8018eac:	4605      	mov	r5, r0
 8018eae:	460e      	mov	r6, r1
 8018eb0:	f7fb fe78 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 8018eb4:	2202      	movs	r2, #2
 8018eb6:	4604      	mov	r4, r0
 8018eb8:	4628      	mov	r0, r5
 8018eba:	18b1      	adds	r1, r6, r2
 8018ebc:	f7fb fe72 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 8018ec0:	4603      	mov	r3, r0
 8018ec2:	1d31      	adds	r1, r6, #4
 8018ec4:	4628      	mov	r0, r5
 8018ec6:	401c      	ands	r4, r3
 8018ec8:	f7ff fe5e 	bl	8018b88 <uxr_serialize_ReadSpecification>
 8018ecc:	b2e4      	uxtb	r4, r4
 8018ece:	4020      	ands	r0, r4
 8018ed0:	bd70      	pop	{r4, r5, r6, pc}
 8018ed2:	bf00      	nop

08018ed4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8018ed4:	b570      	push	{r4, r5, r6, lr}
 8018ed6:	2202      	movs	r2, #2
 8018ed8:	4605      	mov	r5, r0
 8018eda:	460e      	mov	r6, r1
 8018edc:	f7fb fe62 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 8018ee0:	2202      	movs	r2, #2
 8018ee2:	4604      	mov	r4, r0
 8018ee4:	4628      	mov	r0, r5
 8018ee6:	18b1      	adds	r1, r6, r2
 8018ee8:	f7fb fe5c 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 8018eec:	4020      	ands	r0, r4
 8018eee:	b2c0      	uxtb	r0, r0
 8018ef0:	bd70      	pop	{r4, r5, r6, pc}
 8018ef2:	bf00      	nop

08018ef4 <uxr_serialize_ACKNACK_Payload>:
 8018ef4:	b570      	push	{r4, r5, r6, lr}
 8018ef6:	460c      	mov	r4, r1
 8018ef8:	4605      	mov	r5, r0
 8018efa:	460e      	mov	r6, r1
 8018efc:	f834 1b02 	ldrh.w	r1, [r4], #2
 8018f00:	f7fb ff76 	bl	8014df0 <ucdr_serialize_uint16_t>
 8018f04:	2202      	movs	r2, #2
 8018f06:	4621      	mov	r1, r4
 8018f08:	4604      	mov	r4, r0
 8018f0a:	4628      	mov	r0, r5
 8018f0c:	f7fb fe4a 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 8018f10:	4603      	mov	r3, r0
 8018f12:	7931      	ldrb	r1, [r6, #4]
 8018f14:	4628      	mov	r0, r5
 8018f16:	401c      	ands	r4, r3
 8018f18:	f7fb ff3e 	bl	8014d98 <ucdr_serialize_uint8_t>
 8018f1c:	b2e4      	uxtb	r4, r4
 8018f1e:	4020      	ands	r0, r4
 8018f20:	bd70      	pop	{r4, r5, r6, pc}
 8018f22:	bf00      	nop

08018f24 <uxr_deserialize_ACKNACK_Payload>:
 8018f24:	b570      	push	{r4, r5, r6, lr}
 8018f26:	460e      	mov	r6, r1
 8018f28:	4605      	mov	r5, r0
 8018f2a:	f7fc f861 	bl	8014ff0 <ucdr_deserialize_uint16_t>
 8018f2e:	2202      	movs	r2, #2
 8018f30:	4604      	mov	r4, r0
 8018f32:	4628      	mov	r0, r5
 8018f34:	18b1      	adds	r1, r6, r2
 8018f36:	f7fb fe99 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 8018f3a:	4603      	mov	r3, r0
 8018f3c:	1d31      	adds	r1, r6, #4
 8018f3e:	4628      	mov	r0, r5
 8018f40:	401c      	ands	r4, r3
 8018f42:	f7fb ff3f 	bl	8014dc4 <ucdr_deserialize_uint8_t>
 8018f46:	b2e4      	uxtb	r4, r4
 8018f48:	4020      	ands	r0, r4
 8018f4a:	bd70      	pop	{r4, r5, r6, pc}

08018f4c <uxr_serialize_HEARTBEAT_Payload>:
 8018f4c:	b570      	push	{r4, r5, r6, lr}
 8018f4e:	460d      	mov	r5, r1
 8018f50:	4606      	mov	r6, r0
 8018f52:	8809      	ldrh	r1, [r1, #0]
 8018f54:	f7fb ff4c 	bl	8014df0 <ucdr_serialize_uint16_t>
 8018f58:	8869      	ldrh	r1, [r5, #2]
 8018f5a:	4604      	mov	r4, r0
 8018f5c:	4630      	mov	r0, r6
 8018f5e:	f7fb ff47 	bl	8014df0 <ucdr_serialize_uint16_t>
 8018f62:	4603      	mov	r3, r0
 8018f64:	7929      	ldrb	r1, [r5, #4]
 8018f66:	4630      	mov	r0, r6
 8018f68:	401c      	ands	r4, r3
 8018f6a:	f7fb ff15 	bl	8014d98 <ucdr_serialize_uint8_t>
 8018f6e:	b2e4      	uxtb	r4, r4
 8018f70:	4020      	ands	r0, r4
 8018f72:	bd70      	pop	{r4, r5, r6, pc}

08018f74 <uxr_deserialize_HEARTBEAT_Payload>:
 8018f74:	b570      	push	{r4, r5, r6, lr}
 8018f76:	460e      	mov	r6, r1
 8018f78:	4605      	mov	r5, r0
 8018f7a:	f7fc f839 	bl	8014ff0 <ucdr_deserialize_uint16_t>
 8018f7e:	4604      	mov	r4, r0
 8018f80:	1cb1      	adds	r1, r6, #2
 8018f82:	4628      	mov	r0, r5
 8018f84:	f7fc f834 	bl	8014ff0 <ucdr_deserialize_uint16_t>
 8018f88:	4603      	mov	r3, r0
 8018f8a:	1d31      	adds	r1, r6, #4
 8018f8c:	4628      	mov	r0, r5
 8018f8e:	401c      	ands	r4, r3
 8018f90:	f7fb ff18 	bl	8014dc4 <ucdr_deserialize_uint8_t>
 8018f94:	b2e4      	uxtb	r4, r4
 8018f96:	4020      	ands	r0, r4
 8018f98:	bd70      	pop	{r4, r5, r6, pc}
 8018f9a:	bf00      	nop

08018f9c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8018f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018fa0:	460e      	mov	r6, r1
 8018fa2:	4605      	mov	r5, r0
 8018fa4:	f7fc fdc0 	bl	8015b28 <ucdr_deserialize_int32_t>
 8018fa8:	4607      	mov	r7, r0
 8018faa:	1d31      	adds	r1, r6, #4
 8018fac:	4628      	mov	r0, r5
 8018fae:	f7fc fa39 	bl	8015424 <ucdr_deserialize_uint32_t>
 8018fb2:	4680      	mov	r8, r0
 8018fb4:	f106 0108 	add.w	r1, r6, #8
 8018fb8:	4628      	mov	r0, r5
 8018fba:	f7fc fdb5 	bl	8015b28 <ucdr_deserialize_int32_t>
 8018fbe:	ea07 0708 	and.w	r7, r7, r8
 8018fc2:	4604      	mov	r4, r0
 8018fc4:	f106 010c 	add.w	r1, r6, #12
 8018fc8:	4628      	mov	r0, r5
 8018fca:	403c      	ands	r4, r7
 8018fcc:	f7fc fa2a 	bl	8015424 <ucdr_deserialize_uint32_t>
 8018fd0:	f106 0110 	add.w	r1, r6, #16
 8018fd4:	4004      	ands	r4, r0
 8018fd6:	4628      	mov	r0, r5
 8018fd8:	f7fc fda6 	bl	8015b28 <ucdr_deserialize_int32_t>
 8018fdc:	4603      	mov	r3, r0
 8018fde:	b2e4      	uxtb	r4, r4
 8018fe0:	4628      	mov	r0, r5
 8018fe2:	461d      	mov	r5, r3
 8018fe4:	f106 0114 	add.w	r1, r6, #20
 8018fe8:	f7fc fa1c 	bl	8015424 <ucdr_deserialize_uint32_t>
 8018fec:	402c      	ands	r4, r5
 8018fee:	4020      	ands	r0, r4
 8018ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018ff4 <uxr_serialize_SampleIdentity>:
 8018ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ff8:	4604      	mov	r4, r0
 8018ffa:	460d      	mov	r5, r1
 8018ffc:	220c      	movs	r2, #12
 8018ffe:	f7fb fdd1 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 8019002:	2203      	movs	r2, #3
 8019004:	f105 010c 	add.w	r1, r5, #12
 8019008:	4607      	mov	r7, r0
 801900a:	4620      	mov	r0, r4
 801900c:	f7fb fdca 	bl	8014ba4 <ucdr_serialize_array_uint8_t>
 8019010:	7be9      	ldrb	r1, [r5, #15]
 8019012:	4680      	mov	r8, r0
 8019014:	4620      	mov	r0, r4
 8019016:	f7fb febf 	bl	8014d98 <ucdr_serialize_uint8_t>
 801901a:	6929      	ldr	r1, [r5, #16]
 801901c:	4606      	mov	r6, r0
 801901e:	4620      	mov	r0, r4
 8019020:	f7fc fcea 	bl	80159f8 <ucdr_serialize_int32_t>
 8019024:	ea07 0708 	and.w	r7, r7, r8
 8019028:	4603      	mov	r3, r0
 801902a:	4620      	mov	r0, r4
 801902c:	403e      	ands	r6, r7
 801902e:	6969      	ldr	r1, [r5, #20]
 8019030:	461c      	mov	r4, r3
 8019032:	f7fc f8c7 	bl	80151c4 <ucdr_serialize_uint32_t>
 8019036:	4034      	ands	r4, r6
 8019038:	4020      	ands	r0, r4
 801903a:	b2c0      	uxtb	r0, r0
 801903c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019040 <uxr_deserialize_SampleIdentity>:
 8019040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019044:	4604      	mov	r4, r0
 8019046:	460d      	mov	r5, r1
 8019048:	220c      	movs	r2, #12
 801904a:	f7fb fe0f 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 801904e:	2203      	movs	r2, #3
 8019050:	f105 010c 	add.w	r1, r5, #12
 8019054:	4607      	mov	r7, r0
 8019056:	4620      	mov	r0, r4
 8019058:	f7fb fe08 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 801905c:	f105 010f 	add.w	r1, r5, #15
 8019060:	4680      	mov	r8, r0
 8019062:	4620      	mov	r0, r4
 8019064:	f7fb feae 	bl	8014dc4 <ucdr_deserialize_uint8_t>
 8019068:	f105 0110 	add.w	r1, r5, #16
 801906c:	4606      	mov	r6, r0
 801906e:	4620      	mov	r0, r4
 8019070:	f7fc fd5a 	bl	8015b28 <ucdr_deserialize_int32_t>
 8019074:	ea07 0708 	and.w	r7, r7, r8
 8019078:	4603      	mov	r3, r0
 801907a:	4620      	mov	r0, r4
 801907c:	403e      	ands	r6, r7
 801907e:	f105 0114 	add.w	r1, r5, #20
 8019082:	461c      	mov	r4, r3
 8019084:	f7fc f9ce 	bl	8015424 <ucdr_deserialize_uint32_t>
 8019088:	4034      	ands	r4, r6
 801908a:	4020      	ands	r0, r4
 801908c:	b2c0      	uxtb	r0, r0
 801908e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019092:	bf00      	nop

08019094 <rcl_convert_rmw_ret_to_rcl_ret>:
 8019094:	280b      	cmp	r0, #11
 8019096:	dc0d      	bgt.n	80190b4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8019098:	2800      	cmp	r0, #0
 801909a:	db09      	blt.n	80190b0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801909c:	280b      	cmp	r0, #11
 801909e:	d807      	bhi.n	80190b0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80190a0:	e8df f000 	tbb	[pc, r0]
 80190a4:	07060607 	.word	0x07060607
 80190a8:	06060606 	.word	0x06060606
 80190ac:	07070606 	.word	0x07070606
 80190b0:	2001      	movs	r0, #1
 80190b2:	4770      	bx	lr
 80190b4:	28cb      	cmp	r0, #203	@ 0xcb
 80190b6:	bf18      	it	ne
 80190b8:	2001      	movne	r0, #1
 80190ba:	4770      	bx	lr

080190bc <rcl_get_default_domain_id>:
 80190bc:	b530      	push	{r4, r5, lr}
 80190be:	2300      	movs	r3, #0
 80190c0:	b083      	sub	sp, #12
 80190c2:	9300      	str	r3, [sp, #0]
 80190c4:	b1d0      	cbz	r0, 80190fc <rcl_get_default_domain_id+0x40>
 80190c6:	4604      	mov	r4, r0
 80190c8:	4669      	mov	r1, sp
 80190ca:	4815      	ldr	r0, [pc, #84]	@ (8019120 <rcl_get_default_domain_id+0x64>)
 80190cc:	f7f9 fa8c 	bl	80125e8 <rcutils_get_env>
 80190d0:	4602      	mov	r2, r0
 80190d2:	b110      	cbz	r0, 80190da <rcl_get_default_domain_id+0x1e>
 80190d4:	2001      	movs	r0, #1
 80190d6:	b003      	add	sp, #12
 80190d8:	bd30      	pop	{r4, r5, pc}
 80190da:	9b00      	ldr	r3, [sp, #0]
 80190dc:	b18b      	cbz	r3, 8019102 <rcl_get_default_domain_id+0x46>
 80190de:	7818      	ldrb	r0, [r3, #0]
 80190e0:	2800      	cmp	r0, #0
 80190e2:	d0f8      	beq.n	80190d6 <rcl_get_default_domain_id+0x1a>
 80190e4:	a901      	add	r1, sp, #4
 80190e6:	4618      	mov	r0, r3
 80190e8:	9201      	str	r2, [sp, #4]
 80190ea:	f001 fec5 	bl	801ae78 <strtoul>
 80190ee:	4605      	mov	r5, r0
 80190f0:	b150      	cbz	r0, 8019108 <rcl_get_default_domain_id+0x4c>
 80190f2:	1c43      	adds	r3, r0, #1
 80190f4:	d00d      	beq.n	8019112 <rcl_get_default_domain_id+0x56>
 80190f6:	2000      	movs	r0, #0
 80190f8:	6025      	str	r5, [r4, #0]
 80190fa:	e7ec      	b.n	80190d6 <rcl_get_default_domain_id+0x1a>
 80190fc:	200b      	movs	r0, #11
 80190fe:	b003      	add	sp, #12
 8019100:	bd30      	pop	{r4, r5, pc}
 8019102:	4618      	mov	r0, r3
 8019104:	b003      	add	sp, #12
 8019106:	bd30      	pop	{r4, r5, pc}
 8019108:	9b01      	ldr	r3, [sp, #4]
 801910a:	781b      	ldrb	r3, [r3, #0]
 801910c:	2b00      	cmp	r3, #0
 801910e:	d0f2      	beq.n	80190f6 <rcl_get_default_domain_id+0x3a>
 8019110:	e7e0      	b.n	80190d4 <rcl_get_default_domain_id+0x18>
 8019112:	f002 fa2f 	bl	801b574 <__errno>
 8019116:	6803      	ldr	r3, [r0, #0]
 8019118:	2b22      	cmp	r3, #34	@ 0x22
 801911a:	d1ec      	bne.n	80190f6 <rcl_get_default_domain_id+0x3a>
 801911c:	e7da      	b.n	80190d4 <rcl_get_default_domain_id+0x18>
 801911e:	bf00      	nop
 8019120:	0801cdd4 	.word	0x0801cdd4

08019124 <rcl_expand_topic_name>:
 8019124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019128:	b08d      	sub	sp, #52	@ 0x34
 801912a:	4698      	mov	r8, r3
 801912c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801912e:	9207      	str	r2, [sp, #28]
 8019130:	2b00      	cmp	r3, #0
 8019132:	bf18      	it	ne
 8019134:	f1b8 0f00 	cmpne.w	r8, #0
 8019138:	bf0c      	ite	eq
 801913a:	2301      	moveq	r3, #1
 801913c:	2300      	movne	r3, #0
 801913e:	2a00      	cmp	r2, #0
 8019140:	bf08      	it	eq
 8019142:	f043 0301 	orreq.w	r3, r3, #1
 8019146:	2900      	cmp	r1, #0
 8019148:	bf08      	it	eq
 801914a:	f043 0301 	orreq.w	r3, r3, #1
 801914e:	2b00      	cmp	r3, #0
 8019150:	d13d      	bne.n	80191ce <rcl_expand_topic_name+0xaa>
 8019152:	fab0 f280 	clz	r2, r0
 8019156:	4604      	mov	r4, r0
 8019158:	0952      	lsrs	r2, r2, #5
 801915a:	2800      	cmp	r0, #0
 801915c:	d037      	beq.n	80191ce <rcl_expand_topic_name+0xaa>
 801915e:	460f      	mov	r7, r1
 8019160:	a90b      	add	r1, sp, #44	@ 0x2c
 8019162:	f000 fa15 	bl	8019590 <rcl_validate_topic_name>
 8019166:	4605      	mov	r5, r0
 8019168:	bb68      	cbnz	r0, 80191c6 <rcl_expand_topic_name+0xa2>
 801916a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801916c:	2b00      	cmp	r3, #0
 801916e:	d137      	bne.n	80191e0 <rcl_expand_topic_name+0xbc>
 8019170:	4602      	mov	r2, r0
 8019172:	a90b      	add	r1, sp, #44	@ 0x2c
 8019174:	4638      	mov	r0, r7
 8019176:	f7f9 fe45 	bl	8012e04 <rmw_validate_node_name>
 801917a:	bb68      	cbnz	r0, 80191d8 <rcl_expand_topic_name+0xb4>
 801917c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801917e:	2b00      	cmp	r3, #0
 8019180:	d133      	bne.n	80191ea <rcl_expand_topic_name+0xc6>
 8019182:	462a      	mov	r2, r5
 8019184:	a90b      	add	r1, sp, #44	@ 0x2c
 8019186:	9807      	ldr	r0, [sp, #28]
 8019188:	f7f9 fe1e 	bl	8012dc8 <rmw_validate_namespace>
 801918c:	bb20      	cbnz	r0, 80191d8 <rcl_expand_topic_name+0xb4>
 801918e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8019190:	2d00      	cmp	r5, #0
 8019192:	f040 80a2 	bne.w	80192da <rcl_expand_topic_name+0x1b6>
 8019196:	217b      	movs	r1, #123	@ 0x7b
 8019198:	4620      	mov	r0, r4
 801919a:	f002 f909 	bl	801b3b0 <strchr>
 801919e:	7823      	ldrb	r3, [r4, #0]
 80191a0:	4681      	mov	r9, r0
 80191a2:	bb20      	cbnz	r0, 80191ee <rcl_expand_topic_name+0xca>
 80191a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80191a6:	d122      	bne.n	80191ee <rcl_expand_topic_name+0xca>
 80191a8:	ab19      	add	r3, sp, #100	@ 0x64
 80191aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80191ae:	ab16      	add	r3, sp, #88	@ 0x58
 80191b0:	e88d 0003 	stmia.w	sp, {r0, r1}
 80191b4:	4620      	mov	r0, r4
 80191b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80191b8:	f7f9 fb78 	bl	80128ac <rcutils_strdup>
 80191bc:	2800      	cmp	r0, #0
 80191be:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80191c0:	bf08      	it	eq
 80191c2:	250a      	moveq	r5, #10
 80191c4:	6018      	str	r0, [r3, #0]
 80191c6:	4628      	mov	r0, r5
 80191c8:	b00d      	add	sp, #52	@ 0x34
 80191ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191ce:	250b      	movs	r5, #11
 80191d0:	4628      	mov	r0, r5
 80191d2:	b00d      	add	sp, #52	@ 0x34
 80191d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191d8:	f7ff ff5c 	bl	8019094 <rcl_convert_rmw_ret_to_rcl_ret>
 80191dc:	4605      	mov	r5, r0
 80191de:	e7f2      	b.n	80191c6 <rcl_expand_topic_name+0xa2>
 80191e0:	2567      	movs	r5, #103	@ 0x67
 80191e2:	4628      	mov	r0, r5
 80191e4:	b00d      	add	sp, #52	@ 0x34
 80191e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191ea:	25c9      	movs	r5, #201	@ 0xc9
 80191ec:	e7eb      	b.n	80191c6 <rcl_expand_topic_name+0xa2>
 80191ee:	2b7e      	cmp	r3, #126	@ 0x7e
 80191f0:	d075      	beq.n	80192de <rcl_expand_topic_name+0x1ba>
 80191f2:	f1b9 0f00 	cmp.w	r9, #0
 80191f6:	f000 80c2 	beq.w	801937e <rcl_expand_topic_name+0x25a>
 80191fa:	2300      	movs	r3, #0
 80191fc:	46a2      	mov	sl, r4
 80191fe:	461e      	mov	r6, r3
 8019200:	9508      	str	r5, [sp, #32]
 8019202:	4655      	mov	r5, sl
 8019204:	9409      	str	r4, [sp, #36]	@ 0x24
 8019206:	46b2      	mov	sl, r6
 8019208:	464c      	mov	r4, r9
 801920a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801920e:	2c00      	cmp	r4, #0
 8019210:	f000 80ae 	beq.w	8019370 <rcl_expand_topic_name+0x24c>
 8019214:	217d      	movs	r1, #125	@ 0x7d
 8019216:	4628      	mov	r0, r5
 8019218:	f002 f8ca 	bl	801b3b0 <strchr>
 801921c:	eba0 0904 	sub.w	r9, r0, r4
 8019220:	4621      	mov	r1, r4
 8019222:	4869      	ldr	r0, [pc, #420]	@ (80193c8 <rcl_expand_topic_name+0x2a4>)
 8019224:	f109 0601 	add.w	r6, r9, #1
 8019228:	4632      	mov	r2, r6
 801922a:	f002 f8ce 	bl	801b3ca <strncmp>
 801922e:	2800      	cmp	r0, #0
 8019230:	d051      	beq.n	80192d6 <rcl_expand_topic_name+0x1b2>
 8019232:	4632      	mov	r2, r6
 8019234:	4621      	mov	r1, r4
 8019236:	4865      	ldr	r0, [pc, #404]	@ (80193cc <rcl_expand_topic_name+0x2a8>)
 8019238:	f002 f8c7 	bl	801b3ca <strncmp>
 801923c:	b128      	cbz	r0, 801924a <rcl_expand_topic_name+0x126>
 801923e:	4632      	mov	r2, r6
 8019240:	4621      	mov	r1, r4
 8019242:	4863      	ldr	r0, [pc, #396]	@ (80193d0 <rcl_expand_topic_name+0x2ac>)
 8019244:	f002 f8c1 	bl	801b3ca <strncmp>
 8019248:	bb38      	cbnz	r0, 801929a <rcl_expand_topic_name+0x176>
 801924a:	46d9      	mov	r9, fp
 801924c:	ab18      	add	r3, sp, #96	@ 0x60
 801924e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019252:	ab16      	add	r3, sp, #88	@ 0x58
 8019254:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019258:	4620      	mov	r0, r4
 801925a:	4631      	mov	r1, r6
 801925c:	cb0c      	ldmia	r3, {r2, r3}
 801925e:	f7f9 fb47 	bl	80128f0 <rcutils_strndup>
 8019262:	4604      	mov	r4, r0
 8019264:	2800      	cmp	r0, #0
 8019266:	f000 80a3 	beq.w	80193b0 <rcl_expand_topic_name+0x28c>
 801926a:	464a      	mov	r2, r9
 801926c:	4628      	mov	r0, r5
 801926e:	ab16      	add	r3, sp, #88	@ 0x58
 8019270:	4621      	mov	r1, r4
 8019272:	f7f9 fa1b 	bl	80126ac <rcutils_repl_str>
 8019276:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019278:	4605      	mov	r5, r0
 801927a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801927c:	4620      	mov	r0, r4
 801927e:	4798      	blx	r3
 8019280:	4650      	mov	r0, sl
 8019282:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8019284:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019286:	4798      	blx	r3
 8019288:	2d00      	cmp	r5, #0
 801928a:	d06c      	beq.n	8019366 <rcl_expand_topic_name+0x242>
 801928c:	217b      	movs	r1, #123	@ 0x7b
 801928e:	4628      	mov	r0, r5
 8019290:	f002 f88e 	bl	801b3b0 <strchr>
 8019294:	46aa      	mov	sl, r5
 8019296:	4604      	mov	r4, r0
 8019298:	e7b9      	b.n	801920e <rcl_expand_topic_name+0xea>
 801929a:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801929e:	1c61      	adds	r1, r4, #1
 80192a0:	4640      	mov	r0, r8
 80192a2:	f7f9 fc3d 	bl	8012b20 <rcutils_string_map_getn>
 80192a6:	4681      	mov	r9, r0
 80192a8:	2800      	cmp	r0, #0
 80192aa:	d1cf      	bne.n	801924c <rcl_expand_topic_name+0x128>
 80192ac:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80192ae:	aa18      	add	r2, sp, #96	@ 0x60
 80192b0:	2569      	movs	r5, #105	@ 0x69
 80192b2:	6018      	str	r0, [r3, #0]
 80192b4:	ab16      	add	r3, sp, #88	@ 0x58
 80192b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80192b8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80192bc:	4631      	mov	r1, r6
 80192be:	4620      	mov	r0, r4
 80192c0:	cb0c      	ldmia	r3, {r2, r3}
 80192c2:	f7f9 fb15 	bl	80128f0 <rcutils_strndup>
 80192c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80192c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80192ca:	4798      	blx	r3
 80192cc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80192ce:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80192d0:	4650      	mov	r0, sl
 80192d2:	4798      	blx	r3
 80192d4:	e777      	b.n	80191c6 <rcl_expand_topic_name+0xa2>
 80192d6:	46b9      	mov	r9, r7
 80192d8:	e7b8      	b.n	801924c <rcl_expand_topic_name+0x128>
 80192da:	25ca      	movs	r5, #202	@ 0xca
 80192dc:	e773      	b.n	80191c6 <rcl_expand_topic_name+0xa2>
 80192de:	9e07      	ldr	r6, [sp, #28]
 80192e0:	4630      	mov	r0, r6
 80192e2:	f7e7 f807 	bl	80002f4 <strlen>
 80192e6:	4a3b      	ldr	r2, [pc, #236]	@ (80193d4 <rcl_expand_topic_name+0x2b0>)
 80192e8:	4b3b      	ldr	r3, [pc, #236]	@ (80193d8 <rcl_expand_topic_name+0x2b4>)
 80192ea:	9603      	str	r6, [sp, #12]
 80192ec:	2801      	cmp	r0, #1
 80192ee:	bf18      	it	ne
 80192f0:	4613      	movne	r3, r2
 80192f2:	9704      	str	r7, [sp, #16]
 80192f4:	9302      	str	r3, [sp, #8]
 80192f6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80192f8:	9300      	str	r3, [sp, #0]
 80192fa:	1c63      	adds	r3, r4, #1
 80192fc:	9305      	str	r3, [sp, #20]
 80192fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8019302:	9301      	str	r3, [sp, #4]
 8019304:	ab16      	add	r3, sp, #88	@ 0x58
 8019306:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019308:	f7f9 f996 	bl	8012638 <rcutils_format_string_limit>
 801930c:	4606      	mov	r6, r0
 801930e:	b350      	cbz	r0, 8019366 <rcl_expand_topic_name+0x242>
 8019310:	f1b9 0f00 	cmp.w	r9, #0
 8019314:	d005      	beq.n	8019322 <rcl_expand_topic_name+0x1fe>
 8019316:	217b      	movs	r1, #123	@ 0x7b
 8019318:	46b2      	mov	sl, r6
 801931a:	f002 f849 	bl	801b3b0 <strchr>
 801931e:	4681      	mov	r9, r0
 8019320:	e76e      	b.n	8019200 <rcl_expand_topic_name+0xdc>
 8019322:	7833      	ldrb	r3, [r6, #0]
 8019324:	2b2f      	cmp	r3, #47	@ 0x2f
 8019326:	d01b      	beq.n	8019360 <rcl_expand_topic_name+0x23c>
 8019328:	9c07      	ldr	r4, [sp, #28]
 801932a:	4620      	mov	r0, r4
 801932c:	f7e6 ffe2 	bl	80002f4 <strlen>
 8019330:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8019334:	4a29      	ldr	r2, [pc, #164]	@ (80193dc <rcl_expand_topic_name+0x2b8>)
 8019336:	9301      	str	r3, [sp, #4]
 8019338:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801933a:	9604      	str	r6, [sp, #16]
 801933c:	9300      	str	r3, [sp, #0]
 801933e:	4b28      	ldr	r3, [pc, #160]	@ (80193e0 <rcl_expand_topic_name+0x2bc>)
 8019340:	9403      	str	r4, [sp, #12]
 8019342:	2801      	cmp	r0, #1
 8019344:	bf18      	it	ne
 8019346:	4613      	movne	r3, r2
 8019348:	9302      	str	r3, [sp, #8]
 801934a:	ab16      	add	r3, sp, #88	@ 0x58
 801934c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801934e:	f7f9 f973 	bl	8012638 <rcutils_format_string_limit>
 8019352:	4603      	mov	r3, r0
 8019354:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8019356:	4630      	mov	r0, r6
 8019358:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801935a:	461e      	mov	r6, r3
 801935c:	4790      	blx	r2
 801935e:	b116      	cbz	r6, 8019366 <rcl_expand_topic_name+0x242>
 8019360:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8019362:	601e      	str	r6, [r3, #0]
 8019364:	e72f      	b.n	80191c6 <rcl_expand_topic_name+0xa2>
 8019366:	2300      	movs	r3, #0
 8019368:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801936a:	250a      	movs	r5, #10
 801936c:	6013      	str	r3, [r2, #0]
 801936e:	e72a      	b.n	80191c6 <rcl_expand_topic_name+0xa2>
 8019370:	4653      	mov	r3, sl
 8019372:	4656      	mov	r6, sl
 8019374:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 8019378:	2b00      	cmp	r3, #0
 801937a:	d1d2      	bne.n	8019322 <rcl_expand_topic_name+0x1fe>
 801937c:	7823      	ldrb	r3, [r4, #0]
 801937e:	2b2f      	cmp	r3, #47	@ 0x2f
 8019380:	d01e      	beq.n	80193c0 <rcl_expand_topic_name+0x29c>
 8019382:	9e07      	ldr	r6, [sp, #28]
 8019384:	4630      	mov	r0, r6
 8019386:	f7e6 ffb5 	bl	80002f4 <strlen>
 801938a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801938c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8019390:	9603      	str	r6, [sp, #12]
 8019392:	9404      	str	r4, [sp, #16]
 8019394:	e9cd 2300 	strd	r2, r3, [sp]
 8019398:	4a10      	ldr	r2, [pc, #64]	@ (80193dc <rcl_expand_topic_name+0x2b8>)
 801939a:	4b11      	ldr	r3, [pc, #68]	@ (80193e0 <rcl_expand_topic_name+0x2bc>)
 801939c:	2801      	cmp	r0, #1
 801939e:	bf18      	it	ne
 80193a0:	4613      	movne	r3, r2
 80193a2:	9302      	str	r3, [sp, #8]
 80193a4:	ab16      	add	r3, sp, #88	@ 0x58
 80193a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80193a8:	f7f9 f946 	bl	8012638 <rcutils_format_string_limit>
 80193ac:	4606      	mov	r6, r0
 80193ae:	e7d6      	b.n	801935e <rcl_expand_topic_name+0x23a>
 80193b0:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 80193b4:	4650      	mov	r0, sl
 80193b6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80193b8:	6014      	str	r4, [r2, #0]
 80193ba:	250a      	movs	r5, #10
 80193bc:	4798      	blx	r3
 80193be:	e702      	b.n	80191c6 <rcl_expand_topic_name+0xa2>
 80193c0:	2300      	movs	r3, #0
 80193c2:	461e      	mov	r6, r3
 80193c4:	e7cc      	b.n	8019360 <rcl_expand_topic_name+0x23c>
 80193c6:	bf00      	nop
 80193c8:	0801cdec 	.word	0x0801cdec
 80193cc:	0801cdf4 	.word	0x0801cdf4
 80193d0:	0801cdfc 	.word	0x0801cdfc
 80193d4:	0801cde4 	.word	0x0801cde4
 80193d8:	0801cb68 	.word	0x0801cb68
 80193dc:	0801c5e4 	.word	0x0801c5e4
 80193e0:	0801c5dc 	.word	0x0801c5dc

080193e4 <rcl_get_default_topic_name_substitutions>:
 80193e4:	2800      	cmp	r0, #0
 80193e6:	bf0c      	ite	eq
 80193e8:	200b      	moveq	r0, #11
 80193ea:	2000      	movne	r0, #0
 80193ec:	4770      	bx	lr
 80193ee:	bf00      	nop

080193f0 <rcl_get_zero_initialized_guard_condition>:
 80193f0:	4a03      	ldr	r2, [pc, #12]	@ (8019400 <rcl_get_zero_initialized_guard_condition+0x10>)
 80193f2:	4603      	mov	r3, r0
 80193f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80193f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80193fc:	4618      	mov	r0, r3
 80193fe:	4770      	bx	lr
 8019400:	0801ce08 	.word	0x0801ce08

08019404 <rcl_guard_condition_init_from_rmw>:
 8019404:	b082      	sub	sp, #8
 8019406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801940a:	b086      	sub	sp, #24
 801940c:	4604      	mov	r4, r0
 801940e:	460e      	mov	r6, r1
 8019410:	4615      	mov	r5, r2
 8019412:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8019416:	f10d 0e04 	add.w	lr, sp, #4
 801941a:	f84c 3f04 	str.w	r3, [ip, #4]!
 801941e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019422:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019426:	f8dc 3000 	ldr.w	r3, [ip]
 801942a:	a801      	add	r0, sp, #4
 801942c:	f8ce 3000 	str.w	r3, [lr]
 8019430:	f7f5 ffb8 	bl	800f3a4 <rcutils_allocator_is_valid>
 8019434:	f080 0301 	eor.w	r3, r0, #1
 8019438:	b2db      	uxtb	r3, r3
 801943a:	bb3b      	cbnz	r3, 801948c <rcl_guard_condition_init_from_rmw+0x88>
 801943c:	b334      	cbz	r4, 801948c <rcl_guard_condition_init_from_rmw+0x88>
 801943e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8019442:	f1b8 0f00 	cmp.w	r8, #0
 8019446:	d11a      	bne.n	801947e <rcl_guard_condition_init_from_rmw+0x7a>
 8019448:	b305      	cbz	r5, 801948c <rcl_guard_condition_init_from_rmw+0x88>
 801944a:	4628      	mov	r0, r5
 801944c:	f7f6 fae4 	bl	800fa18 <rcl_context_is_valid>
 8019450:	b1f0      	cbz	r0, 8019490 <rcl_guard_condition_init_from_rmw+0x8c>
 8019452:	9b01      	ldr	r3, [sp, #4]
 8019454:	201c      	movs	r0, #28
 8019456:	9905      	ldr	r1, [sp, #20]
 8019458:	4798      	blx	r3
 801945a:	4607      	mov	r7, r0
 801945c:	6060      	str	r0, [r4, #4]
 801945e:	b320      	cbz	r0, 80194aa <rcl_guard_condition_init_from_rmw+0xa6>
 8019460:	b1c6      	cbz	r6, 8019494 <rcl_guard_condition_init_from_rmw+0x90>
 8019462:	6006      	str	r6, [r0, #0]
 8019464:	f880 8004 	strb.w	r8, [r0, #4]
 8019468:	ac01      	add	r4, sp, #4
 801946a:	f107 0c08 	add.w	ip, r7, #8
 801946e:	2500      	movs	r5, #0
 8019470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019472:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019476:	6823      	ldr	r3, [r4, #0]
 8019478:	f8cc 3000 	str.w	r3, [ip]
 801947c:	e000      	b.n	8019480 <rcl_guard_condition_init_from_rmw+0x7c>
 801947e:	2564      	movs	r5, #100	@ 0x64
 8019480:	4628      	mov	r0, r5
 8019482:	b006      	add	sp, #24
 8019484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019488:	b002      	add	sp, #8
 801948a:	4770      	bx	lr
 801948c:	250b      	movs	r5, #11
 801948e:	e7f7      	b.n	8019480 <rcl_guard_condition_init_from_rmw+0x7c>
 8019490:	2565      	movs	r5, #101	@ 0x65
 8019492:	e7f5      	b.n	8019480 <rcl_guard_condition_init_from_rmw+0x7c>
 8019494:	6828      	ldr	r0, [r5, #0]
 8019496:	3028      	adds	r0, #40	@ 0x28
 8019498:	f000 fafc 	bl	8019a94 <rmw_create_guard_condition>
 801949c:	6038      	str	r0, [r7, #0]
 801949e:	6867      	ldr	r7, [r4, #4]
 80194a0:	683e      	ldr	r6, [r7, #0]
 80194a2:	b126      	cbz	r6, 80194ae <rcl_guard_condition_init_from_rmw+0xaa>
 80194a4:	2301      	movs	r3, #1
 80194a6:	713b      	strb	r3, [r7, #4]
 80194a8:	e7de      	b.n	8019468 <rcl_guard_condition_init_from_rmw+0x64>
 80194aa:	250a      	movs	r5, #10
 80194ac:	e7e8      	b.n	8019480 <rcl_guard_condition_init_from_rmw+0x7c>
 80194ae:	9b02      	ldr	r3, [sp, #8]
 80194b0:	4638      	mov	r0, r7
 80194b2:	9905      	ldr	r1, [sp, #20]
 80194b4:	2501      	movs	r5, #1
 80194b6:	4798      	blx	r3
 80194b8:	6066      	str	r6, [r4, #4]
 80194ba:	e7e1      	b.n	8019480 <rcl_guard_condition_init_from_rmw+0x7c>

080194bc <rcl_guard_condition_fini>:
 80194bc:	b570      	push	{r4, r5, r6, lr}
 80194be:	b082      	sub	sp, #8
 80194c0:	b1f0      	cbz	r0, 8019500 <rcl_guard_condition_fini+0x44>
 80194c2:	6843      	ldr	r3, [r0, #4]
 80194c4:	4604      	mov	r4, r0
 80194c6:	b163      	cbz	r3, 80194e2 <rcl_guard_condition_fini+0x26>
 80194c8:	6818      	ldr	r0, [r3, #0]
 80194ca:	68de      	ldr	r6, [r3, #12]
 80194cc:	6999      	ldr	r1, [r3, #24]
 80194ce:	b160      	cbz	r0, 80194ea <rcl_guard_condition_fini+0x2e>
 80194d0:	791d      	ldrb	r5, [r3, #4]
 80194d2:	b965      	cbnz	r5, 80194ee <rcl_guard_condition_fini+0x32>
 80194d4:	4618      	mov	r0, r3
 80194d6:	47b0      	blx	r6
 80194d8:	2300      	movs	r3, #0
 80194da:	4628      	mov	r0, r5
 80194dc:	6063      	str	r3, [r4, #4]
 80194de:	b002      	add	sp, #8
 80194e0:	bd70      	pop	{r4, r5, r6, pc}
 80194e2:	461d      	mov	r5, r3
 80194e4:	4628      	mov	r0, r5
 80194e6:	b002      	add	sp, #8
 80194e8:	bd70      	pop	{r4, r5, r6, pc}
 80194ea:	4605      	mov	r5, r0
 80194ec:	e7f2      	b.n	80194d4 <rcl_guard_condition_fini+0x18>
 80194ee:	9101      	str	r1, [sp, #4]
 80194f0:	f000 fae6 	bl	8019ac0 <rmw_destroy_guard_condition>
 80194f4:	1e05      	subs	r5, r0, #0
 80194f6:	6863      	ldr	r3, [r4, #4]
 80194f8:	9901      	ldr	r1, [sp, #4]
 80194fa:	bf18      	it	ne
 80194fc:	2501      	movne	r5, #1
 80194fe:	e7e9      	b.n	80194d4 <rcl_guard_condition_fini+0x18>
 8019500:	250b      	movs	r5, #11
 8019502:	4628      	mov	r0, r5
 8019504:	b002      	add	sp, #8
 8019506:	bd70      	pop	{r4, r5, r6, pc}

08019508 <rcl_guard_condition_get_default_options>:
 8019508:	b5f0      	push	{r4, r5, r6, r7, lr}
 801950a:	b087      	sub	sp, #28
 801950c:	4606      	mov	r6, r0
 801950e:	4c0b      	ldr	r4, [pc, #44]	@ (801953c <rcl_guard_condition_get_default_options+0x34>)
 8019510:	4668      	mov	r0, sp
 8019512:	f7f5 ff39 	bl	800f388 <rcutils_get_default_allocator>
 8019516:	46ee      	mov	lr, sp
 8019518:	46a4      	mov	ip, r4
 801951a:	4625      	mov	r5, r4
 801951c:	4634      	mov	r4, r6
 801951e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019522:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019528:	f8de 7000 	ldr.w	r7, [lr]
 801952c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801952e:	4630      	mov	r0, r6
 8019530:	f8cc 7000 	str.w	r7, [ip]
 8019534:	6027      	str	r7, [r4, #0]
 8019536:	b007      	add	sp, #28
 8019538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801953a:	bf00      	nop
 801953c:	24068660 	.word	0x24068660

08019540 <rcl_guard_condition_get_rmw_handle>:
 8019540:	b110      	cbz	r0, 8019548 <rcl_guard_condition_get_rmw_handle+0x8>
 8019542:	6840      	ldr	r0, [r0, #4]
 8019544:	b100      	cbz	r0, 8019548 <rcl_guard_condition_get_rmw_handle+0x8>
 8019546:	6800      	ldr	r0, [r0, #0]
 8019548:	4770      	bx	lr
 801954a:	bf00      	nop

0801954c <rcl_publisher_is_valid>:
 801954c:	b1a0      	cbz	r0, 8019578 <rcl_publisher_is_valid+0x2c>
 801954e:	6803      	ldr	r3, [r0, #0]
 8019550:	b510      	push	{r4, lr}
 8019552:	4604      	mov	r4, r0
 8019554:	b173      	cbz	r3, 8019574 <rcl_publisher_is_valid+0x28>
 8019556:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 801955a:	b15a      	cbz	r2, 8019574 <rcl_publisher_is_valid+0x28>
 801955c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8019560:	f7f6 fa5a 	bl	800fa18 <rcl_context_is_valid>
 8019564:	b130      	cbz	r0, 8019574 <rcl_publisher_is_valid+0x28>
 8019566:	6823      	ldr	r3, [r4, #0]
 8019568:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 801956c:	3800      	subs	r0, #0
 801956e:	bf18      	it	ne
 8019570:	2001      	movne	r0, #1
 8019572:	bd10      	pop	{r4, pc}
 8019574:	2000      	movs	r0, #0
 8019576:	bd10      	pop	{r4, pc}
 8019578:	2000      	movs	r0, #0
 801957a:	4770      	bx	lr

0801957c <rcl_publisher_is_valid_except_context>:
 801957c:	b130      	cbz	r0, 801958c <rcl_publisher_is_valid_except_context+0x10>
 801957e:	6800      	ldr	r0, [r0, #0]
 8019580:	b120      	cbz	r0, 801958c <rcl_publisher_is_valid_except_context+0x10>
 8019582:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 8019586:	3800      	subs	r0, #0
 8019588:	bf18      	it	ne
 801958a:	2001      	movne	r0, #1
 801958c:	4770      	bx	lr
 801958e:	bf00      	nop

08019590 <rcl_validate_topic_name>:
 8019590:	2800      	cmp	r0, #0
 8019592:	f000 8089 	beq.w	80196a8 <rcl_validate_topic_name+0x118>
 8019596:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801959a:	460e      	mov	r6, r1
 801959c:	2900      	cmp	r1, #0
 801959e:	f000 8085 	beq.w	80196ac <rcl_validate_topic_name+0x11c>
 80195a2:	4604      	mov	r4, r0
 80195a4:	4617      	mov	r7, r2
 80195a6:	f7e6 fea5 	bl	80002f4 <strlen>
 80195aa:	b1b0      	cbz	r0, 80195da <rcl_validate_topic_name+0x4a>
 80195ac:	f894 e000 	ldrb.w	lr, [r4]
 80195b0:	f8df c160 	ldr.w	ip, [pc, #352]	@ 8019714 <rcl_validate_topic_name+0x184>
 80195b4:	f81c 300e 	ldrb.w	r3, [ip, lr]
 80195b8:	f013 0304 	ands.w	r3, r3, #4
 80195bc:	d139      	bne.n	8019632 <rcl_validate_topic_name+0xa2>
 80195be:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80195c2:	f814 2008 	ldrb.w	r2, [r4, r8]
 80195c6:	2a2f      	cmp	r2, #47	@ 0x2f
 80195c8:	d10f      	bne.n	80195ea <rcl_validate_topic_name+0x5a>
 80195ca:	2202      	movs	r2, #2
 80195cc:	6032      	str	r2, [r6, #0]
 80195ce:	b3a7      	cbz	r7, 801963a <rcl_validate_topic_name+0xaa>
 80195d0:	4618      	mov	r0, r3
 80195d2:	f8c7 8000 	str.w	r8, [r7]
 80195d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195da:	2301      	movs	r3, #1
 80195dc:	6033      	str	r3, [r6, #0]
 80195de:	b367      	cbz	r7, 801963a <rcl_validate_topic_name+0xaa>
 80195e0:	2300      	movs	r3, #0
 80195e2:	4618      	mov	r0, r3
 80195e4:	603b      	str	r3, [r7, #0]
 80195e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195ea:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 80195ee:	461d      	mov	r5, r3
 80195f0:	4619      	mov	r1, r3
 80195f2:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80195f6:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 80195fa:	f1b9 0f09 	cmp.w	r9, #9
 80195fe:	d91f      	bls.n	8019640 <rcl_validate_topic_name+0xb0>
 8019600:	f022 0920 	bic.w	r9, r2, #32
 8019604:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 8019608:	f1b9 0f19 	cmp.w	r9, #25
 801960c:	d918      	bls.n	8019640 <rcl_validate_topic_name+0xb0>
 801960e:	2a5f      	cmp	r2, #95	@ 0x5f
 8019610:	d024      	beq.n	801965c <rcl_validate_topic_name+0xcc>
 8019612:	2a2f      	cmp	r2, #47	@ 0x2f
 8019614:	d058      	beq.n	80196c8 <rcl_validate_topic_name+0x138>
 8019616:	2a7e      	cmp	r2, #126	@ 0x7e
 8019618:	d04a      	beq.n	80196b0 <rcl_validate_topic_name+0x120>
 801961a:	2a7b      	cmp	r2, #123	@ 0x7b
 801961c:	d05b      	beq.n	80196d6 <rcl_validate_topic_name+0x146>
 801961e:	2a7d      	cmp	r2, #125	@ 0x7d
 8019620:	d169      	bne.n	80196f6 <rcl_validate_topic_name+0x166>
 8019622:	2d00      	cmp	r5, #0
 8019624:	d15c      	bne.n	80196e0 <rcl_validate_topic_name+0x150>
 8019626:	2305      	movs	r3, #5
 8019628:	6033      	str	r3, [r6, #0]
 801962a:	b137      	cbz	r7, 801963a <rcl_validate_topic_name+0xaa>
 801962c:	2000      	movs	r0, #0
 801962e:	6039      	str	r1, [r7, #0]
 8019630:	e7d9      	b.n	80195e6 <rcl_validate_topic_name+0x56>
 8019632:	2304      	movs	r3, #4
 8019634:	6033      	str	r3, [r6, #0]
 8019636:	2f00      	cmp	r7, #0
 8019638:	d1d2      	bne.n	80195e0 <rcl_validate_topic_name+0x50>
 801963a:	2000      	movs	r0, #0
 801963c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019640:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019644:	0752      	lsls	r2, r2, #29
 8019646:	d509      	bpl.n	801965c <rcl_validate_topic_name+0xcc>
 8019648:	2900      	cmp	r1, #0
 801964a:	bf0c      	ite	eq
 801964c:	2200      	moveq	r2, #0
 801964e:	f005 0201 	andne.w	r2, r5, #1
 8019652:	b11a      	cbz	r2, 801965c <rcl_validate_topic_name+0xcc>
 8019654:	1e4d      	subs	r5, r1, #1
 8019656:	429d      	cmp	r5, r3
 8019658:	d031      	beq.n	80196be <rcl_validate_topic_name+0x12e>
 801965a:	4615      	mov	r5, r2
 801965c:	3101      	adds	r1, #1
 801965e:	4288      	cmp	r0, r1
 8019660:	d1c7      	bne.n	80195f2 <rcl_validate_topic_name+0x62>
 8019662:	2d00      	cmp	r5, #0
 8019664:	d142      	bne.n	80196ec <rcl_validate_topic_name+0x15c>
 8019666:	4628      	mov	r0, r5
 8019668:	2301      	movs	r3, #1
 801966a:	e00c      	b.n	8019686 <rcl_validate_topic_name+0xf6>
 801966c:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8019670:	d101      	bne.n	8019676 <rcl_validate_topic_name+0xe6>
 8019672:	2801      	cmp	r0, #1
 8019674:	d047      	beq.n	8019706 <rcl_validate_topic_name+0x176>
 8019676:	1c5a      	adds	r2, r3, #1
 8019678:	428b      	cmp	r3, r1
 801967a:	f100 0001 	add.w	r0, r0, #1
 801967e:	f104 0401 	add.w	r4, r4, #1
 8019682:	4613      	mov	r3, r2
 8019684:	d22e      	bcs.n	80196e4 <rcl_validate_topic_name+0x154>
 8019686:	4580      	cmp	r8, r0
 8019688:	d0f5      	beq.n	8019676 <rcl_validate_topic_name+0xe6>
 801968a:	7822      	ldrb	r2, [r4, #0]
 801968c:	2a2f      	cmp	r2, #47	@ 0x2f
 801968e:	d1ed      	bne.n	801966c <rcl_validate_topic_name+0xdc>
 8019690:	7862      	ldrb	r2, [r4, #1]
 8019692:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019696:	0752      	lsls	r2, r2, #29
 8019698:	d5ed      	bpl.n	8019676 <rcl_validate_topic_name+0xe6>
 801969a:	2204      	movs	r2, #4
 801969c:	6032      	str	r2, [r6, #0]
 801969e:	2f00      	cmp	r7, #0
 80196a0:	d0cb      	beq.n	801963a <rcl_validate_topic_name+0xaa>
 80196a2:	2000      	movs	r0, #0
 80196a4:	603b      	str	r3, [r7, #0]
 80196a6:	e79e      	b.n	80195e6 <rcl_validate_topic_name+0x56>
 80196a8:	200b      	movs	r0, #11
 80196aa:	4770      	bx	lr
 80196ac:	200b      	movs	r0, #11
 80196ae:	e79a      	b.n	80195e6 <rcl_validate_topic_name+0x56>
 80196b0:	2900      	cmp	r1, #0
 80196b2:	d0d3      	beq.n	801965c <rcl_validate_topic_name+0xcc>
 80196b4:	2306      	movs	r3, #6
 80196b6:	6033      	str	r3, [r6, #0]
 80196b8:	2f00      	cmp	r7, #0
 80196ba:	d1b7      	bne.n	801962c <rcl_validate_topic_name+0x9c>
 80196bc:	e7bd      	b.n	801963a <rcl_validate_topic_name+0xaa>
 80196be:	2309      	movs	r3, #9
 80196c0:	6033      	str	r3, [r6, #0]
 80196c2:	2f00      	cmp	r7, #0
 80196c4:	d1b2      	bne.n	801962c <rcl_validate_topic_name+0x9c>
 80196c6:	e7b8      	b.n	801963a <rcl_validate_topic_name+0xaa>
 80196c8:	2d00      	cmp	r5, #0
 80196ca:	d0c7      	beq.n	801965c <rcl_validate_topic_name+0xcc>
 80196cc:	2308      	movs	r3, #8
 80196ce:	6033      	str	r3, [r6, #0]
 80196d0:	2f00      	cmp	r7, #0
 80196d2:	d1ab      	bne.n	801962c <rcl_validate_topic_name+0x9c>
 80196d4:	e7b1      	b.n	801963a <rcl_validate_topic_name+0xaa>
 80196d6:	2d00      	cmp	r5, #0
 80196d8:	d1f8      	bne.n	80196cc <rcl_validate_topic_name+0x13c>
 80196da:	460b      	mov	r3, r1
 80196dc:	2501      	movs	r5, #1
 80196de:	e7bd      	b.n	801965c <rcl_validate_topic_name+0xcc>
 80196e0:	2500      	movs	r5, #0
 80196e2:	e7bb      	b.n	801965c <rcl_validate_topic_name+0xcc>
 80196e4:	2300      	movs	r3, #0
 80196e6:	4618      	mov	r0, r3
 80196e8:	6033      	str	r3, [r6, #0]
 80196ea:	e77c      	b.n	80195e6 <rcl_validate_topic_name+0x56>
 80196ec:	2205      	movs	r2, #5
 80196ee:	6032      	str	r2, [r6, #0]
 80196f0:	2f00      	cmp	r7, #0
 80196f2:	d1d6      	bne.n	80196a2 <rcl_validate_topic_name+0x112>
 80196f4:	e7a1      	b.n	801963a <rcl_validate_topic_name+0xaa>
 80196f6:	2d00      	cmp	r5, #0
 80196f8:	bf14      	ite	ne
 80196fa:	2308      	movne	r3, #8
 80196fc:	2303      	moveq	r3, #3
 80196fe:	6033      	str	r3, [r6, #0]
 8019700:	2f00      	cmp	r7, #0
 8019702:	d193      	bne.n	801962c <rcl_validate_topic_name+0x9c>
 8019704:	e799      	b.n	801963a <rcl_validate_topic_name+0xaa>
 8019706:	2307      	movs	r3, #7
 8019708:	6033      	str	r3, [r6, #0]
 801970a:	2f00      	cmp	r7, #0
 801970c:	d095      	beq.n	801963a <rcl_validate_topic_name+0xaa>
 801970e:	2301      	movs	r3, #1
 8019710:	e7c7      	b.n	80196a2 <rcl_validate_topic_name+0x112>
 8019712:	bf00      	nop
 8019714:	0801cfd6 	.word	0x0801cfd6

08019718 <rcutils_string_array_fini>:
 8019718:	b328      	cbz	r0, 8019766 <rcutils_string_array_fini+0x4e>
 801971a:	b570      	push	{r4, r5, r6, lr}
 801971c:	4604      	mov	r4, r0
 801971e:	6840      	ldr	r0, [r0, #4]
 8019720:	b1e0      	cbz	r0, 801975c <rcutils_string_array_fini+0x44>
 8019722:	f104 0008 	add.w	r0, r4, #8
 8019726:	f7f5 fe3d 	bl	800f3a4 <rcutils_allocator_is_valid>
 801972a:	b1c0      	cbz	r0, 801975e <rcutils_string_array_fini+0x46>
 801972c:	6823      	ldr	r3, [r4, #0]
 801972e:	b1c3      	cbz	r3, 8019762 <rcutils_string_array_fini+0x4a>
 8019730:	2500      	movs	r5, #0
 8019732:	6860      	ldr	r0, [r4, #4]
 8019734:	462e      	mov	r6, r5
 8019736:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801973a:	68e3      	ldr	r3, [r4, #12]
 801973c:	69a1      	ldr	r1, [r4, #24]
 801973e:	4798      	blx	r3
 8019740:	e9d4 3000 	ldrd	r3, r0, [r4]
 8019744:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8019748:	3501      	adds	r5, #1
 801974a:	429d      	cmp	r5, r3
 801974c:	d3f3      	bcc.n	8019736 <rcutils_string_array_fini+0x1e>
 801974e:	68e3      	ldr	r3, [r4, #12]
 8019750:	69a1      	ldr	r1, [r4, #24]
 8019752:	4798      	blx	r3
 8019754:	2300      	movs	r3, #0
 8019756:	4618      	mov	r0, r3
 8019758:	e9c4 3300 	strd	r3, r3, [r4]
 801975c:	bd70      	pop	{r4, r5, r6, pc}
 801975e:	200b      	movs	r0, #11
 8019760:	bd70      	pop	{r4, r5, r6, pc}
 8019762:	6860      	ldr	r0, [r4, #4]
 8019764:	e7f3      	b.n	801974e <rcutils_string_array_fini+0x36>
 8019766:	200b      	movs	r0, #11
 8019768:	4770      	bx	lr
 801976a:	bf00      	nop

0801976c <rmw_time_equal>:
 801976c:	b4f0      	push	{r4, r5, r6, r7}
 801976e:	b084      	sub	sp, #16
 8019770:	ac04      	add	r4, sp, #16
 8019772:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8019776:	4603      	mov	r3, r0
 8019778:	4925      	ldr	r1, [pc, #148]	@ (8019810 <rmw_time_equal+0xa4>)
 801977a:	9d01      	ldr	r5, [sp, #4]
 801977c:	4610      	mov	r0, r2
 801977e:	4299      	cmp	r1, r3
 8019780:	f04f 0202 	mov.w	r2, #2
 8019784:	9e03      	ldr	r6, [sp, #12]
 8019786:	41aa      	sbcs	r2, r5
 8019788:	d330      	bcc.n	80197ec <rmw_time_equal+0x80>
 801978a:	4c22      	ldr	r4, [pc, #136]	@ (8019814 <rmw_time_equal+0xa8>)
 801978c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019790:	fba3 3204 	umull	r3, r2, r3, r4
 8019794:	fb04 2205 	mla	r2, r4, r5, r2
 8019798:	43dd      	mvns	r5, r3
 801979a:	1a8c      	subs	r4, r1, r2
 801979c:	4285      	cmp	r5, r0
 801979e:	41b4      	sbcs	r4, r6
 80197a0:	d332      	bcc.n	8019808 <rmw_time_equal+0x9c>
 80197a2:	eb10 0c03 	adds.w	ip, r0, r3
 80197a6:	eb42 0106 	adc.w	r1, r2, r6
 80197aa:	4819      	ldr	r0, [pc, #100]	@ (8019810 <rmw_time_equal+0xa4>)
 80197ac:	2202      	movs	r2, #2
 80197ae:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80197b0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80197b2:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80197b6:	4298      	cmp	r0, r3
 80197b8:	41b2      	sbcs	r2, r6
 80197ba:	d31c      	bcc.n	80197f6 <rmw_time_equal+0x8a>
 80197bc:	4c15      	ldr	r4, [pc, #84]	@ (8019814 <rmw_time_equal+0xa8>)
 80197be:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80197c2:	fba3 3204 	umull	r3, r2, r3, r4
 80197c6:	fb04 2206 	mla	r2, r4, r6, r2
 80197ca:	43de      	mvns	r6, r3
 80197cc:	1a84      	subs	r4, r0, r2
 80197ce:	42ae      	cmp	r6, r5
 80197d0:	41bc      	sbcs	r4, r7
 80197d2:	d315      	bcc.n	8019800 <rmw_time_equal+0x94>
 80197d4:	195b      	adds	r3, r3, r5
 80197d6:	eb42 0207 	adc.w	r2, r2, r7
 80197da:	428a      	cmp	r2, r1
 80197dc:	bf08      	it	eq
 80197de:	4563      	cmpeq	r3, ip
 80197e0:	bf0c      	ite	eq
 80197e2:	2001      	moveq	r0, #1
 80197e4:	2000      	movne	r0, #0
 80197e6:	b004      	add	sp, #16
 80197e8:	bcf0      	pop	{r4, r5, r6, r7}
 80197ea:	4770      	bx	lr
 80197ec:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80197f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80197f4:	e7d9      	b.n	80197aa <rmw_time_equal+0x3e>
 80197f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80197fa:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80197fe:	e7ec      	b.n	80197da <rmw_time_equal+0x6e>
 8019800:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019804:	4602      	mov	r2, r0
 8019806:	e7e8      	b.n	80197da <rmw_time_equal+0x6e>
 8019808:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801980c:	e7cd      	b.n	80197aa <rmw_time_equal+0x3e>
 801980e:	bf00      	nop
 8019810:	25c17d04 	.word	0x25c17d04
 8019814:	3b9aca00 	.word	0x3b9aca00

08019818 <rmw_time_total_nsec>:
 8019818:	b470      	push	{r4, r5, r6}
 801981a:	b085      	sub	sp, #20
 801981c:	ac04      	add	r4, sp, #16
 801981e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8019822:	4603      	mov	r3, r0
 8019824:	4913      	ldr	r1, [pc, #76]	@ (8019874 <rmw_time_total_nsec+0x5c>)
 8019826:	9d01      	ldr	r5, [sp, #4]
 8019828:	4610      	mov	r0, r2
 801982a:	4299      	cmp	r1, r3
 801982c:	f04f 0202 	mov.w	r2, #2
 8019830:	9e03      	ldr	r6, [sp, #12]
 8019832:	41aa      	sbcs	r2, r5
 8019834:	d311      	bcc.n	801985a <rmw_time_total_nsec+0x42>
 8019836:	4c10      	ldr	r4, [pc, #64]	@ (8019878 <rmw_time_total_nsec+0x60>)
 8019838:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801983c:	fba3 3204 	umull	r3, r2, r3, r4
 8019840:	fb04 2205 	mla	r2, r4, r5, r2
 8019844:	43dd      	mvns	r5, r3
 8019846:	1a8c      	subs	r4, r1, r2
 8019848:	4285      	cmp	r5, r0
 801984a:	41b4      	sbcs	r4, r6
 801984c:	d30c      	bcc.n	8019868 <rmw_time_total_nsec+0x50>
 801984e:	1818      	adds	r0, r3, r0
 8019850:	eb42 0106 	adc.w	r1, r2, r6
 8019854:	b005      	add	sp, #20
 8019856:	bc70      	pop	{r4, r5, r6}
 8019858:	4770      	bx	lr
 801985a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801985e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019862:	b005      	add	sp, #20
 8019864:	bc70      	pop	{r4, r5, r6}
 8019866:	4770      	bx	lr
 8019868:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801986c:	b005      	add	sp, #20
 801986e:	bc70      	pop	{r4, r5, r6}
 8019870:	4770      	bx	lr
 8019872:	bf00      	nop
 8019874:	25c17d04 	.word	0x25c17d04
 8019878:	3b9aca00 	.word	0x3b9aca00

0801987c <on_status>:
 801987c:	b082      	sub	sp, #8
 801987e:	b002      	add	sp, #8
 8019880:	4770      	bx	lr
 8019882:	bf00      	nop

08019884 <on_topic>:
 8019884:	4a23      	ldr	r2, [pc, #140]	@ (8019914 <on_topic+0x90>)
 8019886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801988a:	6812      	ldr	r2, [r2, #0]
 801988c:	b094      	sub	sp, #80	@ 0x50
 801988e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8019890:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8019894:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019896:	9312      	str	r3, [sp, #72]	@ 0x48
 8019898:	b3c2      	cbz	r2, 801990c <on_topic+0x88>
 801989a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801989e:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 80198a2:	e001      	b.n	80198a8 <on_topic+0x24>
 80198a4:	6852      	ldr	r2, [r2, #4]
 80198a6:	b38a      	cbz	r2, 801990c <on_topic+0x88>
 80198a8:	6894      	ldr	r4, [r2, #8]
 80198aa:	8aa3      	ldrh	r3, [r4, #20]
 80198ac:	428b      	cmp	r3, r1
 80198ae:	d1f9      	bne.n	80198a4 <on_topic+0x20>
 80198b0:	7da3      	ldrb	r3, [r4, #22]
 80198b2:	4283      	cmp	r3, r0
 80198b4:	d1f6      	bne.n	80198a4 <on_topic+0x20>
 80198b6:	2248      	movs	r2, #72	@ 0x48
 80198b8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80198bc:	4668      	mov	r0, sp
 80198be:	f001 fe8e 	bl	801b5de <memcpy>
 80198c2:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80198c6:	4620      	mov	r0, r4
 80198c8:	cb0c      	ldmia	r3, {r2, r3}
 80198ca:	f7fa fde5 	bl	8014498 <rmw_uxrce_get_static_input_buffer_for_entity>
 80198ce:	4607      	mov	r7, r0
 80198d0:	b1e0      	cbz	r0, 801990c <on_topic+0x88>
 80198d2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80198d6:	462a      	mov	r2, r5
 80198d8:	4630      	mov	r0, r6
 80198da:	f108 0110 	add.w	r1, r8, #16
 80198de:	f7fb f9c5 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 80198e2:	b930      	cbnz	r0, 80198f2 <on_topic+0x6e>
 80198e4:	4639      	mov	r1, r7
 80198e6:	480c      	ldr	r0, [pc, #48]	@ (8019918 <on_topic+0x94>)
 80198e8:	b014      	add	sp, #80	@ 0x50
 80198ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80198ee:	f000 b8bd 	b.w	8019a6c <put_memory>
 80198f2:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80198f6:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 80198fa:	f000 f967 	bl	8019bcc <rmw_uros_epoch_nanos>
 80198fe:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8019902:	2305      	movs	r3, #5
 8019904:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019908:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801990c:	b014      	add	sp, #80	@ 0x50
 801990e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019912:	bf00      	nop
 8019914:	2406862c 	.word	0x2406862c
 8019918:	2406861c 	.word	0x2406861c

0801991c <on_request>:
 801991c:	4824      	ldr	r0, [pc, #144]	@ (80199b0 <on_request+0x94>)
 801991e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019922:	6800      	ldr	r0, [r0, #0]
 8019924:	b094      	sub	sp, #80	@ 0x50
 8019926:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8019928:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801992c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801992e:	2800      	cmp	r0, #0
 8019930:	d03b      	beq.n	80199aa <on_request+0x8e>
 8019932:	461d      	mov	r5, r3
 8019934:	e001      	b.n	801993a <on_request+0x1e>
 8019936:	6840      	ldr	r0, [r0, #4]
 8019938:	b3b8      	cbz	r0, 80199aa <on_request+0x8e>
 801993a:	6884      	ldr	r4, [r0, #8]
 801993c:	8b21      	ldrh	r1, [r4, #24]
 801993e:	4291      	cmp	r1, r2
 8019940:	d1f9      	bne.n	8019936 <on_request+0x1a>
 8019942:	2248      	movs	r2, #72	@ 0x48
 8019944:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8019948:	4668      	mov	r0, sp
 801994a:	f001 fe48 	bl	801b5de <memcpy>
 801994e:	f104 0320 	add.w	r3, r4, #32
 8019952:	4620      	mov	r0, r4
 8019954:	cb0c      	ldmia	r3, {r2, r3}
 8019956:	f7fa fd9f 	bl	8014498 <rmw_uxrce_get_static_input_buffer_for_entity>
 801995a:	4680      	mov	r8, r0
 801995c:	b328      	cbz	r0, 80199aa <on_request+0x8e>
 801995e:	4630      	mov	r0, r6
 8019960:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8019964:	463a      	mov	r2, r7
 8019966:	f106 0110 	add.w	r1, r6, #16
 801996a:	f7fb f97f 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 801996e:	b930      	cbnz	r0, 801997e <on_request+0x62>
 8019970:	4641      	mov	r1, r8
 8019972:	4810      	ldr	r0, [pc, #64]	@ (80199b4 <on_request+0x98>)
 8019974:	b014      	add	sp, #80	@ 0x50
 8019976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801997a:	f000 b877 	b.w	8019a6c <put_memory>
 801997e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019980:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 8019984:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8019988:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801998c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019990:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019994:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019998:	f000 f918 	bl	8019bcc <rmw_uros_epoch_nanos>
 801999c:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 80199a0:	2303      	movs	r3, #3
 80199a2:	e942 0102 	strd	r0, r1, [r2, #-8]
 80199a6:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 80199aa:	b014      	add	sp, #80	@ 0x50
 80199ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199b0:	240685fc 	.word	0x240685fc
 80199b4:	2406861c 	.word	0x2406861c

080199b8 <on_reply>:
 80199b8:	4822      	ldr	r0, [pc, #136]	@ (8019a44 <on_reply+0x8c>)
 80199ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199be:	6800      	ldr	r0, [r0, #0]
 80199c0:	b094      	sub	sp, #80	@ 0x50
 80199c2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80199c4:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 80199c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80199ca:	b3b8      	cbz	r0, 8019a3c <on_reply+0x84>
 80199cc:	461d      	mov	r5, r3
 80199ce:	e001      	b.n	80199d4 <on_reply+0x1c>
 80199d0:	6840      	ldr	r0, [r0, #4]
 80199d2:	b398      	cbz	r0, 8019a3c <on_reply+0x84>
 80199d4:	6884      	ldr	r4, [r0, #8]
 80199d6:	8b21      	ldrh	r1, [r4, #24]
 80199d8:	4291      	cmp	r1, r2
 80199da:	d1f9      	bne.n	80199d0 <on_reply+0x18>
 80199dc:	2248      	movs	r2, #72	@ 0x48
 80199de:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80199e2:	4668      	mov	r0, sp
 80199e4:	f001 fdfb 	bl	801b5de <memcpy>
 80199e8:	f104 0320 	add.w	r3, r4, #32
 80199ec:	4620      	mov	r0, r4
 80199ee:	cb0c      	ldmia	r3, {r2, r3}
 80199f0:	f7fa fd52 	bl	8014498 <rmw_uxrce_get_static_input_buffer_for_entity>
 80199f4:	4680      	mov	r8, r0
 80199f6:	b308      	cbz	r0, 8019a3c <on_reply+0x84>
 80199f8:	4630      	mov	r0, r6
 80199fa:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80199fe:	463a      	mov	r2, r7
 8019a00:	f106 0110 	add.w	r1, r6, #16
 8019a04:	f7fb f932 	bl	8014c6c <ucdr_deserialize_array_uint8_t>
 8019a08:	b930      	cbnz	r0, 8019a18 <on_reply+0x60>
 8019a0a:	4641      	mov	r1, r8
 8019a0c:	480e      	ldr	r0, [pc, #56]	@ (8019a48 <on_reply+0x90>)
 8019a0e:	b014      	add	sp, #80	@ 0x50
 8019a10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019a14:	f000 b82a 	b.w	8019a6c <put_memory>
 8019a18:	2200      	movs	r2, #0
 8019a1a:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8019a1e:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8019a22:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 8019a26:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 8019a2a:	f000 f8cf 	bl	8019bcc <rmw_uros_epoch_nanos>
 8019a2e:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8019a32:	2304      	movs	r3, #4
 8019a34:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019a38:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 8019a3c:	b014      	add	sp, #80	@ 0x50
 8019a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a42:	bf00      	nop
 8019a44:	24063d10 	.word	0x24063d10
 8019a48:	2406861c 	.word	0x2406861c

08019a4c <get_memory>:
 8019a4c:	4603      	mov	r3, r0
 8019a4e:	6840      	ldr	r0, [r0, #4]
 8019a50:	b158      	cbz	r0, 8019a6a <get_memory+0x1e>
 8019a52:	6842      	ldr	r2, [r0, #4]
 8019a54:	605a      	str	r2, [r3, #4]
 8019a56:	b10a      	cbz	r2, 8019a5c <get_memory+0x10>
 8019a58:	2100      	movs	r1, #0
 8019a5a:	6011      	str	r1, [r2, #0]
 8019a5c:	681a      	ldr	r2, [r3, #0]
 8019a5e:	6042      	str	r2, [r0, #4]
 8019a60:	b102      	cbz	r2, 8019a64 <get_memory+0x18>
 8019a62:	6010      	str	r0, [r2, #0]
 8019a64:	2200      	movs	r2, #0
 8019a66:	6002      	str	r2, [r0, #0]
 8019a68:	6018      	str	r0, [r3, #0]
 8019a6a:	4770      	bx	lr

08019a6c <put_memory>:
 8019a6c:	680b      	ldr	r3, [r1, #0]
 8019a6e:	b10b      	cbz	r3, 8019a74 <put_memory+0x8>
 8019a70:	684a      	ldr	r2, [r1, #4]
 8019a72:	605a      	str	r2, [r3, #4]
 8019a74:	684a      	ldr	r2, [r1, #4]
 8019a76:	b102      	cbz	r2, 8019a7a <put_memory+0xe>
 8019a78:	6013      	str	r3, [r2, #0]
 8019a7a:	6803      	ldr	r3, [r0, #0]
 8019a7c:	428b      	cmp	r3, r1
 8019a7e:	6843      	ldr	r3, [r0, #4]
 8019a80:	bf08      	it	eq
 8019a82:	6002      	streq	r2, [r0, #0]
 8019a84:	604b      	str	r3, [r1, #4]
 8019a86:	b103      	cbz	r3, 8019a8a <put_memory+0x1e>
 8019a88:	6019      	str	r1, [r3, #0]
 8019a8a:	2300      	movs	r3, #0
 8019a8c:	600b      	str	r3, [r1, #0]
 8019a8e:	6041      	str	r1, [r0, #4]
 8019a90:	4770      	bx	lr
 8019a92:	bf00      	nop

08019a94 <rmw_create_guard_condition>:
 8019a94:	b538      	push	{r3, r4, r5, lr}
 8019a96:	4605      	mov	r5, r0
 8019a98:	4808      	ldr	r0, [pc, #32]	@ (8019abc <rmw_create_guard_condition+0x28>)
 8019a9a:	f7ff ffd7 	bl	8019a4c <get_memory>
 8019a9e:	4603      	mov	r3, r0
 8019aa0:	b148      	cbz	r0, 8019ab6 <rmw_create_guard_condition+0x22>
 8019aa2:	6884      	ldr	r4, [r0, #8]
 8019aa4:	2300      	movs	r3, #0
 8019aa6:	61e5      	str	r5, [r4, #28]
 8019aa8:	7423      	strb	r3, [r4, #16]
 8019aaa:	f7f9 fa4f 	bl	8012f4c <rmw_get_implementation_identifier>
 8019aae:	f104 0314 	add.w	r3, r4, #20
 8019ab2:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8019ab6:	4618      	mov	r0, r3
 8019ab8:	bd38      	pop	{r3, r4, r5, pc}
 8019aba:	bf00      	nop
 8019abc:	240685bc 	.word	0x240685bc

08019ac0 <rmw_destroy_guard_condition>:
 8019ac0:	b508      	push	{r3, lr}
 8019ac2:	4b08      	ldr	r3, [pc, #32]	@ (8019ae4 <rmw_destroy_guard_condition+0x24>)
 8019ac4:	6819      	ldr	r1, [r3, #0]
 8019ac6:	b911      	cbnz	r1, 8019ace <rmw_destroy_guard_condition+0xe>
 8019ac8:	e00a      	b.n	8019ae0 <rmw_destroy_guard_condition+0x20>
 8019aca:	6849      	ldr	r1, [r1, #4]
 8019acc:	b141      	cbz	r1, 8019ae0 <rmw_destroy_guard_condition+0x20>
 8019ace:	688b      	ldr	r3, [r1, #8]
 8019ad0:	3314      	adds	r3, #20
 8019ad2:	4298      	cmp	r0, r3
 8019ad4:	d1f9      	bne.n	8019aca <rmw_destroy_guard_condition+0xa>
 8019ad6:	4803      	ldr	r0, [pc, #12]	@ (8019ae4 <rmw_destroy_guard_condition+0x24>)
 8019ad8:	f7ff ffc8 	bl	8019a6c <put_memory>
 8019adc:	2000      	movs	r0, #0
 8019ade:	bd08      	pop	{r3, pc}
 8019ae0:	2001      	movs	r0, #1
 8019ae2:	bd08      	pop	{r3, pc}
 8019ae4:	240685bc 	.word	0x240685bc

08019ae8 <create_topic>:
 8019ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019aec:	4605      	mov	r5, r0
 8019aee:	b084      	sub	sp, #16
 8019af0:	4822      	ldr	r0, [pc, #136]	@ (8019b7c <create_topic+0x94>)
 8019af2:	460f      	mov	r7, r1
 8019af4:	4616      	mov	r6, r2
 8019af6:	f7ff ffa9 	bl	8019a4c <get_memory>
 8019afa:	4604      	mov	r4, r0
 8019afc:	2800      	cmp	r0, #0
 8019afe:	d039      	beq.n	8019b74 <create_topic+0x8c>
 8019b00:	692b      	ldr	r3, [r5, #16]
 8019b02:	2102      	movs	r1, #2
 8019b04:	6884      	ldr	r4, [r0, #8]
 8019b06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019b0a:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 8019b84 <create_topic+0x9c>
 8019b0e:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8019b12:	1c42      	adds	r2, r0, #1
 8019b14:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8019b18:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8019b1c:	f7fc faae 	bl	801607c <uxr_object_id>
 8019b20:	223c      	movs	r2, #60	@ 0x3c
 8019b22:	6120      	str	r0, [r4, #16]
 8019b24:	4641      	mov	r1, r8
 8019b26:	4638      	mov	r0, r7
 8019b28:	f7fa fe1a 	bl	8014760 <generate_topic_name>
 8019b2c:	b1f0      	cbz	r0, 8019b6c <create_topic+0x84>
 8019b2e:	4f14      	ldr	r7, [pc, #80]	@ (8019b80 <create_topic+0x98>)
 8019b30:	4630      	mov	r0, r6
 8019b32:	2264      	movs	r2, #100	@ 0x64
 8019b34:	4639      	mov	r1, r7
 8019b36:	f7fa fde5 	bl	8014704 <generate_type_name>
 8019b3a:	b1b8      	cbz	r0, 8019b6c <create_topic+0x84>
 8019b3c:	6928      	ldr	r0, [r5, #16]
 8019b3e:	2106      	movs	r1, #6
 8019b40:	696b      	ldr	r3, [r5, #20]
 8019b42:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8019b46:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019b4a:	f8cd 8000 	str.w	r8, [sp]
 8019b4e:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8019b52:	6811      	ldr	r1, [r2, #0]
 8019b54:	6922      	ldr	r2, [r4, #16]
 8019b56:	f7fc f8f5 	bl	8015d44 <uxr_buffer_create_topic_bin>
 8019b5a:	4602      	mov	r2, r0
 8019b5c:	6928      	ldr	r0, [r5, #16]
 8019b5e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8019b62:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8019b66:	f7fa fd99 	bl	801469c <run_xrce_session>
 8019b6a:	b918      	cbnz	r0, 8019b74 <create_topic+0x8c>
 8019b6c:	4620      	mov	r0, r4
 8019b6e:	2400      	movs	r4, #0
 8019b70:	f7fa fc86 	bl	8014480 <rmw_uxrce_fini_topic_memory>
 8019b74:	4620      	mov	r0, r4
 8019b76:	b004      	add	sp, #16
 8019b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b7c:	2406863c 	.word	0x2406863c
 8019b80:	240686b0 	.word	0x240686b0
 8019b84:	24068674 	.word	0x24068674

08019b88 <destroy_topic>:
 8019b88:	b538      	push	{r3, r4, r5, lr}
 8019b8a:	6985      	ldr	r5, [r0, #24]
 8019b8c:	b1dd      	cbz	r5, 8019bc6 <destroy_topic+0x3e>
 8019b8e:	4604      	mov	r4, r0
 8019b90:	6928      	ldr	r0, [r5, #16]
 8019b92:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019b96:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019b9a:	6922      	ldr	r2, [r4, #16]
 8019b9c:	6819      	ldr	r1, [r3, #0]
 8019b9e:	f7fc f853 	bl	8015c48 <uxr_buffer_delete_entity>
 8019ba2:	4602      	mov	r2, r0
 8019ba4:	6928      	ldr	r0, [r5, #16]
 8019ba6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8019baa:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8019bae:	f7fa fd75 	bl	801469c <run_xrce_session>
 8019bb2:	4603      	mov	r3, r0
 8019bb4:	4620      	mov	r0, r4
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	bf14      	ite	ne
 8019bba:	2400      	movne	r4, #0
 8019bbc:	2402      	moveq	r4, #2
 8019bbe:	f7fa fc5f 	bl	8014480 <rmw_uxrce_fini_topic_memory>
 8019bc2:	4620      	mov	r0, r4
 8019bc4:	bd38      	pop	{r3, r4, r5, pc}
 8019bc6:	2401      	movs	r4, #1
 8019bc8:	4620      	mov	r0, r4
 8019bca:	bd38      	pop	{r3, r4, r5, pc}

08019bcc <rmw_uros_epoch_nanos>:
 8019bcc:	4b05      	ldr	r3, [pc, #20]	@ (8019be4 <rmw_uros_epoch_nanos+0x18>)
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	b123      	cbz	r3, 8019bdc <rmw_uros_epoch_nanos+0x10>
 8019bd2:	6898      	ldr	r0, [r3, #8]
 8019bd4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019bd8:	f7fc bcc6 	b.w	8016568 <uxr_epoch_nanos>
 8019bdc:	2000      	movs	r0, #0
 8019bde:	2100      	movs	r1, #0
 8019be0:	4770      	bx	lr
 8019be2:	bf00      	nop
 8019be4:	2406860c 	.word	0x2406860c

08019be8 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>:
 8019be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019bec:	b086      	sub	sp, #24
 8019bee:	4689      	mov	r9, r1
 8019bf0:	4682      	mov	sl, r0
 8019bf2:	a801      	add	r0, sp, #4
 8019bf4:	f7f5 fbc8 	bl	800f388 <rcutils_get_default_allocator>
 8019bf8:	f1b9 0f00 	cmp.w	r9, #0
 8019bfc:	d02e      	beq.n	8019c5c <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x74>
 8019bfe:	2114      	movs	r1, #20
 8019c00:	4648      	mov	r0, r9
 8019c02:	e9dd 3804 	ldrd	r3, r8, [sp, #16]
 8019c06:	4642      	mov	r2, r8
 8019c08:	4798      	blx	r3
 8019c0a:	4607      	mov	r7, r0
 8019c0c:	b380      	cbz	r0, 8019c70 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x88>
 8019c0e:	4606      	mov	r6, r0
 8019c10:	2400      	movs	r4, #0
 8019c12:	e003      	b.n	8019c1c <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x34>
 8019c14:	3401      	adds	r4, #1
 8019c16:	3614      	adds	r6, #20
 8019c18:	45a1      	cmp	r9, r4
 8019c1a:	d020      	beq.n	8019c5e <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 8019c1c:	4630      	mov	r0, r6
 8019c1e:	f000 fe89 	bl	801a934 <rosidl_runtime_c__String__init>
 8019c22:	4605      	mov	r5, r0
 8019c24:	2800      	cmp	r0, #0
 8019c26:	d1f5      	bne.n	8019c14 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x2c>
 8019c28:	4630      	mov	r0, r6
 8019c2a:	f000 fe99 	bl	801a960 <rosidl_runtime_c__String__fini>
 8019c2e:	45a1      	cmp	r9, r4
 8019c30:	d915      	bls.n	8019c5e <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 8019c32:	b15c      	cbz	r4, 8019c4c <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x64>
 8019c34:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8019c38:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8019c3c:	3c14      	subs	r4, #20
 8019c3e:	4620      	mov	r0, r4
 8019c40:	f000 fe8e 	bl	801a960 <rosidl_runtime_c__String__fini>
 8019c44:	42a7      	cmp	r7, r4
 8019c46:	f1a4 0414 	sub.w	r4, r4, #20
 8019c4a:	d1f8      	bne.n	8019c3e <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x56>
 8019c4c:	4638      	mov	r0, r7
 8019c4e:	9b02      	ldr	r3, [sp, #8]
 8019c50:	4641      	mov	r1, r8
 8019c52:	4798      	blx	r3
 8019c54:	4628      	mov	r0, r5
 8019c56:	b006      	add	sp, #24
 8019c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c5c:	464f      	mov	r7, r9
 8019c5e:	2501      	movs	r5, #1
 8019c60:	f8ca 9008 	str.w	r9, [sl, #8]
 8019c64:	e9ca 7900 	strd	r7, r9, [sl]
 8019c68:	4628      	mov	r0, r5
 8019c6a:	b006      	add	sp, #24
 8019c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c70:	4605      	mov	r5, r0
 8019c72:	e7f9      	b.n	8019c68 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x80>

08019c74 <std_msgs__msg__MultiArrayDimension__init>:
 8019c74:	b538      	push	{r3, r4, r5, lr}
 8019c76:	4604      	mov	r4, r0
 8019c78:	b128      	cbz	r0, 8019c86 <std_msgs__msg__MultiArrayDimension__init+0x12>
 8019c7a:	f000 fe5b 	bl	801a934 <rosidl_runtime_c__String__init>
 8019c7e:	4605      	mov	r5, r0
 8019c80:	b120      	cbz	r0, 8019c8c <std_msgs__msg__MultiArrayDimension__init+0x18>
 8019c82:	4628      	mov	r0, r5
 8019c84:	bd38      	pop	{r3, r4, r5, pc}
 8019c86:	4605      	mov	r5, r0
 8019c88:	4628      	mov	r0, r5
 8019c8a:	bd38      	pop	{r3, r4, r5, pc}
 8019c8c:	4620      	mov	r0, r4
 8019c8e:	f000 fe67 	bl	801a960 <rosidl_runtime_c__String__fini>
 8019c92:	4628      	mov	r0, r5
 8019c94:	bd38      	pop	{r3, r4, r5, pc}
 8019c96:	bf00      	nop

08019c98 <std_msgs__msg__MultiArrayDimension__fini>:
 8019c98:	b108      	cbz	r0, 8019c9e <std_msgs__msg__MultiArrayDimension__fini+0x6>
 8019c9a:	f000 be61 	b.w	801a960 <rosidl_runtime_c__String__fini>
 8019c9e:	4770      	bx	lr

08019ca0 <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 8019ca0:	b108      	cbz	r0, 8019ca6 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6>
 8019ca2:	f7ff bfa1 	b.w	8019be8 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>
 8019ca6:	4770      	bx	lr

08019ca8 <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 8019ca8:	b320      	cbz	r0, 8019cf4 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 8019caa:	b530      	push	{r4, r5, lr}
 8019cac:	b087      	sub	sp, #28
 8019cae:	4605      	mov	r5, r0
 8019cb0:	a801      	add	r0, sp, #4
 8019cb2:	f7f5 fb69 	bl	800f388 <rcutils_get_default_allocator>
 8019cb6:	682a      	ldr	r2, [r5, #0]
 8019cb8:	b1b2      	cbz	r2, 8019ce8 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 8019cba:	68a9      	ldr	r1, [r5, #8]
 8019cbc:	b161      	cbz	r1, 8019cd8 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 8019cbe:	2400      	movs	r4, #0
 8019cc0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8019cc4:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 8019cc8:	d010      	beq.n	8019cec <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 8019cca:	f000 fe49 	bl	801a960 <rosidl_runtime_c__String__fini>
 8019cce:	3401      	adds	r4, #1
 8019cd0:	68a9      	ldr	r1, [r5, #8]
 8019cd2:	682a      	ldr	r2, [r5, #0]
 8019cd4:	428c      	cmp	r4, r1
 8019cd6:	d3f3      	bcc.n	8019cc0 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 8019cd8:	9b02      	ldr	r3, [sp, #8]
 8019cda:	4610      	mov	r0, r2
 8019cdc:	9905      	ldr	r1, [sp, #20]
 8019cde:	4798      	blx	r3
 8019ce0:	2300      	movs	r3, #0
 8019ce2:	e9c5 3300 	strd	r3, r3, [r5]
 8019ce6:	60ab      	str	r3, [r5, #8]
 8019ce8:	b007      	add	sp, #28
 8019cea:	bd30      	pop	{r4, r5, pc}
 8019cec:	3401      	adds	r4, #1
 8019cee:	428c      	cmp	r4, r1
 8019cf0:	d3e6      	bcc.n	8019cc0 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 8019cf2:	e7f1      	b.n	8019cd8 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 8019cf4:	4770      	bx	lr
 8019cf6:	bf00      	nop

08019cf8 <std_msgs__msg__MultiArrayLayout__init>:
 8019cf8:	b538      	push	{r3, r4, r5, lr}
 8019cfa:	4604      	mov	r4, r0
 8019cfc:	b130      	cbz	r0, 8019d0c <std_msgs__msg__MultiArrayLayout__init+0x14>
 8019cfe:	2100      	movs	r1, #0
 8019d00:	f7ff ffce 	bl	8019ca0 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 8019d04:	4605      	mov	r5, r0
 8019d06:	b120      	cbz	r0, 8019d12 <std_msgs__msg__MultiArrayLayout__init+0x1a>
 8019d08:	4628      	mov	r0, r5
 8019d0a:	bd38      	pop	{r3, r4, r5, pc}
 8019d0c:	4605      	mov	r5, r0
 8019d0e:	4628      	mov	r0, r5
 8019d10:	bd38      	pop	{r3, r4, r5, pc}
 8019d12:	4620      	mov	r0, r4
 8019d14:	f7ff ffc8 	bl	8019ca8 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 8019d18:	4628      	mov	r0, r5
 8019d1a:	bd38      	pop	{r3, r4, r5, pc}

08019d1c <std_msgs__msg__MultiArrayLayout__fini>:
 8019d1c:	b108      	cbz	r0, 8019d22 <std_msgs__msg__MultiArrayLayout__fini+0x6>
 8019d1e:	f7ff bfc3 	b.w	8019ca8 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 8019d22:	4770      	bx	lr

08019d24 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 8019d24:	f7ff bfa6 	b.w	8019c74 <std_msgs__msg__MultiArrayDimension__init>

08019d28 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 8019d28:	f7ff bfb6 	b.w	8019c98 <std_msgs__msg__MultiArrayDimension__fini>

08019d2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8019d2c:	4b04      	ldr	r3, [pc, #16]	@ (8019d40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8019d2e:	681a      	ldr	r2, [r3, #0]
 8019d30:	b10a      	cbz	r2, 8019d36 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 8019d32:	4803      	ldr	r0, [pc, #12]	@ (8019d40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8019d34:	4770      	bx	lr
 8019d36:	4a03      	ldr	r2, [pc, #12]	@ (8019d44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 8019d38:	4801      	ldr	r0, [pc, #4]	@ (8019d40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8019d3a:	6812      	ldr	r2, [r2, #0]
 8019d3c:	601a      	str	r2, [r3, #0]
 8019d3e:	4770      	bx	lr
 8019d40:	24000254 	.word	0x24000254
 8019d44:	240000f0 	.word	0x240000f0

08019d48 <_MultiArrayDimension__cdr_serialize>:
 8019d48:	b1d0      	cbz	r0, 8019d80 <_MultiArrayDimension__cdr_serialize+0x38>
 8019d4a:	b570      	push	{r4, r5, r6, lr}
 8019d4c:	6806      	ldr	r6, [r0, #0]
 8019d4e:	4604      	mov	r4, r0
 8019d50:	460d      	mov	r5, r1
 8019d52:	b196      	cbz	r6, 8019d7a <_MultiArrayDimension__cdr_serialize+0x32>
 8019d54:	4630      	mov	r0, r6
 8019d56:	f7e6 facd 	bl	80002f4 <strlen>
 8019d5a:	1c42      	adds	r2, r0, #1
 8019d5c:	4631      	mov	r1, r6
 8019d5e:	6060      	str	r0, [r4, #4]
 8019d60:	4628      	mov	r0, r5
 8019d62:	f7f5 fd67 	bl	800f834 <ucdr_serialize_sequence_char>
 8019d66:	68e1      	ldr	r1, [r4, #12]
 8019d68:	4628      	mov	r0, r5
 8019d6a:	f7fb fa2b 	bl	80151c4 <ucdr_serialize_uint32_t>
 8019d6e:	6921      	ldr	r1, [r4, #16]
 8019d70:	4628      	mov	r0, r5
 8019d72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019d76:	f7fb ba25 	b.w	80151c4 <ucdr_serialize_uint32_t>
 8019d7a:	4632      	mov	r2, r6
 8019d7c:	4630      	mov	r0, r6
 8019d7e:	e7ed      	b.n	8019d5c <_MultiArrayDimension__cdr_serialize+0x14>
 8019d80:	4770      	bx	lr
 8019d82:	bf00      	nop

08019d84 <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 8019d84:	b570      	push	{r4, r5, r6, lr}
 8019d86:	4604      	mov	r4, r0
 8019d88:	b1b0      	cbz	r0, 8019db8 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 8019d8a:	460d      	mov	r5, r1
 8019d8c:	2104      	movs	r1, #4
 8019d8e:	4628      	mov	r0, r5
 8019d90:	f7f5 fce0 	bl	800f754 <ucdr_alignment>
 8019d94:	6866      	ldr	r6, [r4, #4]
 8019d96:	1d6b      	adds	r3, r5, #5
 8019d98:	2104      	movs	r1, #4
 8019d9a:	f1c5 0504 	rsb	r5, r5, #4
 8019d9e:	4433      	add	r3, r6
 8019da0:	181e      	adds	r6, r3, r0
 8019da2:	4630      	mov	r0, r6
 8019da4:	f7f5 fcd6 	bl	800f754 <ucdr_alignment>
 8019da8:	2104      	movs	r1, #4
 8019daa:	1844      	adds	r4, r0, r1
 8019dac:	4434      	add	r4, r6
 8019dae:	4620      	mov	r0, r4
 8019db0:	f7f5 fcd0 	bl	800f754 <ucdr_alignment>
 8019db4:	4428      	add	r0, r5
 8019db6:	4420      	add	r0, r4
 8019db8:	bd70      	pop	{r4, r5, r6, pc}
 8019dba:	bf00      	nop

08019dbc <_MultiArrayDimension__cdr_deserialize>:
 8019dbc:	b570      	push	{r4, r5, r6, lr}
 8019dbe:	460c      	mov	r4, r1
 8019dc0:	b082      	sub	sp, #8
 8019dc2:	b1d9      	cbz	r1, 8019dfc <_MultiArrayDimension__cdr_deserialize+0x40>
 8019dc4:	688e      	ldr	r6, [r1, #8]
 8019dc6:	ab01      	add	r3, sp, #4
 8019dc8:	6809      	ldr	r1, [r1, #0]
 8019dca:	4605      	mov	r5, r0
 8019dcc:	4632      	mov	r2, r6
 8019dce:	f7f5 fd43 	bl	800f858 <ucdr_deserialize_sequence_char>
 8019dd2:	9b01      	ldr	r3, [sp, #4]
 8019dd4:	b970      	cbnz	r0, 8019df4 <_MultiArrayDimension__cdr_deserialize+0x38>
 8019dd6:	429e      	cmp	r6, r3
 8019dd8:	d313      	bcc.n	8019e02 <_MultiArrayDimension__cdr_deserialize+0x46>
 8019dda:	f104 010c 	add.w	r1, r4, #12
 8019dde:	4628      	mov	r0, r5
 8019de0:	f7fb fb20 	bl	8015424 <ucdr_deserialize_uint32_t>
 8019de4:	f104 0110 	add.w	r1, r4, #16
 8019de8:	4628      	mov	r0, r5
 8019dea:	b002      	add	sp, #8
 8019dec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019df0:	f7fb bb18 	b.w	8015424 <ucdr_deserialize_uint32_t>
 8019df4:	b103      	cbz	r3, 8019df8 <_MultiArrayDimension__cdr_deserialize+0x3c>
 8019df6:	3b01      	subs	r3, #1
 8019df8:	6063      	str	r3, [r4, #4]
 8019dfa:	e7ee      	b.n	8019dda <_MultiArrayDimension__cdr_deserialize+0x1e>
 8019dfc:	4608      	mov	r0, r1
 8019dfe:	b002      	add	sp, #8
 8019e00:	bd70      	pop	{r4, r5, r6, pc}
 8019e02:	2101      	movs	r1, #1
 8019e04:	75a8      	strb	r0, [r5, #22]
 8019e06:	7569      	strb	r1, [r5, #21]
 8019e08:	6060      	str	r0, [r4, #4]
 8019e0a:	4628      	mov	r0, r5
 8019e0c:	f7f5 fcba 	bl	800f784 <ucdr_align_to>
 8019e10:	9901      	ldr	r1, [sp, #4]
 8019e12:	4628      	mov	r0, r5
 8019e14:	f7f5 fcee 	bl	800f7f4 <ucdr_advance_buffer>
 8019e18:	e7df      	b.n	8019dda <_MultiArrayDimension__cdr_deserialize+0x1e>
 8019e1a:	bf00      	nop

08019e1c <_MultiArrayDimension__max_serialized_size>:
 8019e1c:	b510      	push	{r4, lr}
 8019e1e:	2104      	movs	r1, #4
 8019e20:	2000      	movs	r0, #0
 8019e22:	f7f5 fc97 	bl	800f754 <ucdr_alignment>
 8019e26:	2104      	movs	r1, #4
 8019e28:	1844      	adds	r4, r0, r1
 8019e2a:	4620      	mov	r0, r4
 8019e2c:	f7f5 fc92 	bl	800f754 <ucdr_alignment>
 8019e30:	3004      	adds	r0, #4
 8019e32:	4420      	add	r0, r4
 8019e34:	bd10      	pop	{r4, pc}
 8019e36:	bf00      	nop

08019e38 <_MultiArrayDimension__get_serialized_size>:
 8019e38:	b510      	push	{r4, lr}
 8019e3a:	4604      	mov	r4, r0
 8019e3c:	b190      	cbz	r0, 8019e64 <_MultiArrayDimension__get_serialized_size+0x2c>
 8019e3e:	2104      	movs	r1, #4
 8019e40:	2000      	movs	r0, #0
 8019e42:	f7f5 fc87 	bl	800f754 <ucdr_alignment>
 8019e46:	6863      	ldr	r3, [r4, #4]
 8019e48:	2104      	movs	r1, #4
 8019e4a:	3305      	adds	r3, #5
 8019e4c:	181c      	adds	r4, r3, r0
 8019e4e:	4620      	mov	r0, r4
 8019e50:	f7f5 fc80 	bl	800f754 <ucdr_alignment>
 8019e54:	2104      	movs	r1, #4
 8019e56:	4408      	add	r0, r1
 8019e58:	4404      	add	r4, r0
 8019e5a:	4620      	mov	r0, r4
 8019e5c:	f7f5 fc7a 	bl	800f754 <ucdr_alignment>
 8019e60:	3004      	adds	r0, #4
 8019e62:	4420      	add	r0, r4
 8019e64:	bd10      	pop	{r4, pc}
 8019e66:	bf00      	nop

08019e68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8019e68:	4800      	ldr	r0, [pc, #0]	@ (8019e6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 8019e6a:	4770      	bx	lr
 8019e6c:	24000260 	.word	0x24000260

08019e70 <ucdr_serialize_string>:
 8019e70:	b510      	push	{r4, lr}
 8019e72:	b082      	sub	sp, #8
 8019e74:	4604      	mov	r4, r0
 8019e76:	4608      	mov	r0, r1
 8019e78:	9101      	str	r1, [sp, #4]
 8019e7a:	f7e6 fa3b 	bl	80002f4 <strlen>
 8019e7e:	4602      	mov	r2, r0
 8019e80:	9901      	ldr	r1, [sp, #4]
 8019e82:	4620      	mov	r0, r4
 8019e84:	3201      	adds	r2, #1
 8019e86:	b002      	add	sp, #8
 8019e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e8c:	f7f5 bcd2 	b.w	800f834 <ucdr_serialize_sequence_char>

08019e90 <ucdr_deserialize_string>:
 8019e90:	b500      	push	{lr}
 8019e92:	b083      	sub	sp, #12
 8019e94:	ab01      	add	r3, sp, #4
 8019e96:	f7f5 fcdf 	bl	800f858 <ucdr_deserialize_sequence_char>
 8019e9a:	b003      	add	sp, #12
 8019e9c:	f85d fb04 	ldr.w	pc, [sp], #4

08019ea0 <uxr_init_input_best_effort_stream>:
 8019ea0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019ea4:	8003      	strh	r3, [r0, #0]
 8019ea6:	4770      	bx	lr

08019ea8 <uxr_reset_input_best_effort_stream>:
 8019ea8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019eac:	8003      	strh	r3, [r0, #0]
 8019eae:	4770      	bx	lr

08019eb0 <uxr_receive_best_effort_message>:
 8019eb0:	b538      	push	{r3, r4, r5, lr}
 8019eb2:	4604      	mov	r4, r0
 8019eb4:	8800      	ldrh	r0, [r0, #0]
 8019eb6:	460d      	mov	r5, r1
 8019eb8:	f000 fd24 	bl	801a904 <uxr_seq_num_cmp>
 8019ebc:	4603      	mov	r3, r0
 8019ebe:	0fc0      	lsrs	r0, r0, #31
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	bfb8      	it	lt
 8019ec4:	8025      	strhlt	r5, [r4, #0]
 8019ec6:	bd38      	pop	{r3, r4, r5, pc}

08019ec8 <on_full_input_buffer>:
 8019ec8:	b570      	push	{r4, r5, r6, lr}
 8019eca:	460c      	mov	r4, r1
 8019ecc:	4605      	mov	r5, r0
 8019ece:	8908      	ldrh	r0, [r1, #8]
 8019ed0:	682b      	ldr	r3, [r5, #0]
 8019ed2:	7d26      	ldrb	r6, [r4, #20]
 8019ed4:	e9d1 1200 	ldrd	r1, r2, [r1]
 8019ed8:	fbb2 f2f0 	udiv	r2, r2, r0
 8019edc:	eba3 0c01 	sub.w	ip, r3, r1
 8019ee0:	fbbc fcf2 	udiv	ip, ip, r2
 8019ee4:	f10c 0c01 	add.w	ip, ip, #1
 8019ee8:	fa1f f38c 	uxth.w	r3, ip
 8019eec:	fbb3 fcf0 	udiv	ip, r3, r0
 8019ef0:	fb00 331c 	mls	r3, r0, ip, r3
 8019ef4:	b29b      	uxth	r3, r3
 8019ef6:	fb02 f303 	mul.w	r3, r2, r3
 8019efa:	1d18      	adds	r0, r3, #4
 8019efc:	4408      	add	r0, r1
 8019efe:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8019f02:	b116      	cbz	r6, 8019f0a <on_full_input_buffer+0x42>
 8019f04:	2600      	movs	r6, #0
 8019f06:	f840 6c04 	str.w	r6, [r0, #-4]
 8019f0a:	2a03      	cmp	r2, #3
 8019f0c:	d801      	bhi.n	8019f12 <on_full_input_buffer+0x4a>
 8019f0e:	2001      	movs	r0, #1
 8019f10:	bd70      	pop	{r4, r5, r6, pc}
 8019f12:	3308      	adds	r3, #8
 8019f14:	4628      	mov	r0, r5
 8019f16:	3a04      	subs	r2, #4
 8019f18:	4419      	add	r1, r3
 8019f1a:	692b      	ldr	r3, [r5, #16]
 8019f1c:	f7f5 fc0e 	bl	800f73c <ucdr_init_buffer_origin>
 8019f20:	4628      	mov	r0, r5
 8019f22:	4622      	mov	r2, r4
 8019f24:	4902      	ldr	r1, [pc, #8]	@ (8019f30 <on_full_input_buffer+0x68>)
 8019f26:	f7f5 fbe5 	bl	800f6f4 <ucdr_set_on_full_buffer_callback>
 8019f2a:	2000      	movs	r0, #0
 8019f2c:	bd70      	pop	{r4, r5, r6, pc}
 8019f2e:	bf00      	nop
 8019f30:	08019ec9 	.word	0x08019ec9

08019f34 <uxr_init_input_reliable_stream>:
 8019f34:	b510      	push	{r4, lr}
 8019f36:	e9c0 1200 	strd	r1, r2, [r0]
 8019f3a:	2400      	movs	r4, #0
 8019f3c:	9a02      	ldr	r2, [sp, #8]
 8019f3e:	8103      	strh	r3, [r0, #8]
 8019f40:	6102      	str	r2, [r0, #16]
 8019f42:	7504      	strb	r4, [r0, #20]
 8019f44:	b1c3      	cbz	r3, 8019f78 <uxr_init_input_reliable_stream+0x44>
 8019f46:	600c      	str	r4, [r1, #0]
 8019f48:	8901      	ldrh	r1, [r0, #8]
 8019f4a:	2901      	cmp	r1, #1
 8019f4c:	d914      	bls.n	8019f78 <uxr_init_input_reliable_stream+0x44>
 8019f4e:	f04f 0c01 	mov.w	ip, #1
 8019f52:	6843      	ldr	r3, [r0, #4]
 8019f54:	f10c 0e01 	add.w	lr, ip, #1
 8019f58:	fbbc f2f1 	udiv	r2, ip, r1
 8019f5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8019f60:	fb01 c212 	mls	r2, r1, r2, ip
 8019f64:	fa1f fc8e 	uxth.w	ip, lr
 8019f68:	b292      	uxth	r2, r2
 8019f6a:	fb02 f303 	mul.w	r3, r2, r3
 8019f6e:	6802      	ldr	r2, [r0, #0]
 8019f70:	50d4      	str	r4, [r2, r3]
 8019f72:	8901      	ldrh	r1, [r0, #8]
 8019f74:	4561      	cmp	r1, ip
 8019f76:	d8ec      	bhi.n	8019f52 <uxr_init_input_reliable_stream+0x1e>
 8019f78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019f7c:	60c3      	str	r3, [r0, #12]
 8019f7e:	bd10      	pop	{r4, pc}

08019f80 <uxr_reset_input_reliable_stream>:
 8019f80:	8901      	ldrh	r1, [r0, #8]
 8019f82:	b1d9      	cbz	r1, 8019fbc <uxr_reset_input_reliable_stream+0x3c>
 8019f84:	b510      	push	{r4, lr}
 8019f86:	f04f 0e00 	mov.w	lr, #0
 8019f8a:	46f4      	mov	ip, lr
 8019f8c:	4674      	mov	r4, lr
 8019f8e:	6843      	ldr	r3, [r0, #4]
 8019f90:	f10e 0e01 	add.w	lr, lr, #1
 8019f94:	fbbc f2f1 	udiv	r2, ip, r1
 8019f98:	fbb3 f3f1 	udiv	r3, r3, r1
 8019f9c:	fb01 c212 	mls	r2, r1, r2, ip
 8019fa0:	fa1f fc8e 	uxth.w	ip, lr
 8019fa4:	b292      	uxth	r2, r2
 8019fa6:	fb02 f303 	mul.w	r3, r2, r3
 8019faa:	6802      	ldr	r2, [r0, #0]
 8019fac:	50d4      	str	r4, [r2, r3]
 8019fae:	8901      	ldrh	r1, [r0, #8]
 8019fb0:	4561      	cmp	r1, ip
 8019fb2:	d8ec      	bhi.n	8019f8e <uxr_reset_input_reliable_stream+0xe>
 8019fb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019fb8:	60c3      	str	r3, [r0, #12]
 8019fba:	bd10      	pop	{r4, pc}
 8019fbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019fc0:	60c3      	str	r3, [r0, #12]
 8019fc2:	4770      	bx	lr

08019fc4 <uxr_receive_reliable_message>:
 8019fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019fc8:	4604      	mov	r4, r0
 8019fca:	460d      	mov	r5, r1
 8019fcc:	8901      	ldrh	r1, [r0, #8]
 8019fce:	4617      	mov	r7, r2
 8019fd0:	8980      	ldrh	r0, [r0, #12]
 8019fd2:	4698      	mov	r8, r3
 8019fd4:	f000 fc8e 	bl	801a8f4 <uxr_seq_num_add>
 8019fd8:	4629      	mov	r1, r5
 8019fda:	4606      	mov	r6, r0
 8019fdc:	89a0      	ldrh	r0, [r4, #12]
 8019fde:	f000 fc91 	bl	801a904 <uxr_seq_num_cmp>
 8019fe2:	2800      	cmp	r0, #0
 8019fe4:	db0a      	blt.n	8019ffc <uxr_receive_reliable_message+0x38>
 8019fe6:	2600      	movs	r6, #0
 8019fe8:	4629      	mov	r1, r5
 8019fea:	89e0      	ldrh	r0, [r4, #14]
 8019fec:	f000 fc8a 	bl	801a904 <uxr_seq_num_cmp>
 8019ff0:	2800      	cmp	r0, #0
 8019ff2:	da00      	bge.n	8019ff6 <uxr_receive_reliable_message+0x32>
 8019ff4:	81e5      	strh	r5, [r4, #14]
 8019ff6:	4630      	mov	r0, r6
 8019ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019ffc:	4630      	mov	r0, r6
 8019ffe:	4629      	mov	r1, r5
 801a000:	f000 fc80 	bl	801a904 <uxr_seq_num_cmp>
 801a004:	2800      	cmp	r0, #0
 801a006:	dbee      	blt.n	8019fe6 <uxr_receive_reliable_message+0x22>
 801a008:	6923      	ldr	r3, [r4, #16]
 801a00a:	4638      	mov	r0, r7
 801a00c:	4798      	blx	r3
 801a00e:	4681      	mov	r9, r0
 801a010:	2101      	movs	r1, #1
 801a012:	89a0      	ldrh	r0, [r4, #12]
 801a014:	f000 fc6e 	bl	801a8f4 <uxr_seq_num_add>
 801a018:	f1b9 0f00 	cmp.w	r9, #0
 801a01c:	bf08      	it	eq
 801a01e:	4285      	cmpeq	r5, r0
 801a020:	bf0c      	ite	eq
 801a022:	2601      	moveq	r6, #1
 801a024:	2600      	movne	r6, #0
 801a026:	d104      	bne.n	801a032 <uxr_receive_reliable_message+0x6e>
 801a028:	2300      	movs	r3, #0
 801a02a:	9a08      	ldr	r2, [sp, #32]
 801a02c:	81a0      	strh	r0, [r4, #12]
 801a02e:	7013      	strb	r3, [r2, #0]
 801a030:	e7da      	b.n	8019fe8 <uxr_receive_reliable_message+0x24>
 801a032:	8922      	ldrh	r2, [r4, #8]
 801a034:	6863      	ldr	r3, [r4, #4]
 801a036:	fbb5 f0f2 	udiv	r0, r5, r2
 801a03a:	fbb3 f3f2 	udiv	r3, r3, r2
 801a03e:	fb02 5010 	mls	r0, r2, r0, r5
 801a042:	b280      	uxth	r0, r0
 801a044:	fb03 f000 	mul.w	r0, r3, r0
 801a048:	6823      	ldr	r3, [r4, #0]
 801a04a:	3004      	adds	r0, #4
 801a04c:	4418      	add	r0, r3
 801a04e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a052:	2b00      	cmp	r3, #0
 801a054:	d1c7      	bne.n	8019fe6 <uxr_receive_reliable_message+0x22>
 801a056:	4639      	mov	r1, r7
 801a058:	4642      	mov	r2, r8
 801a05a:	f001 fac0 	bl	801b5de <memcpy>
 801a05e:	8921      	ldrh	r1, [r4, #8]
 801a060:	6863      	ldr	r3, [r4, #4]
 801a062:	fbb5 f2f1 	udiv	r2, r5, r1
 801a066:	fbb3 f3f1 	udiv	r3, r3, r1
 801a06a:	fb01 5212 	mls	r2, r1, r2, r5
 801a06e:	b292      	uxth	r2, r2
 801a070:	fb02 f303 	mul.w	r3, r2, r3
 801a074:	6822      	ldr	r2, [r4, #0]
 801a076:	f842 8003 	str.w	r8, [r2, r3]
 801a07a:	2301      	movs	r3, #1
 801a07c:	9a08      	ldr	r2, [sp, #32]
 801a07e:	7013      	strb	r3, [r2, #0]
 801a080:	f1b9 0f00 	cmp.w	r9, #0
 801a084:	d0af      	beq.n	8019fe6 <uxr_receive_reliable_message+0x22>
 801a086:	89a6      	ldrh	r6, [r4, #12]
 801a088:	2101      	movs	r1, #1
 801a08a:	4630      	mov	r0, r6
 801a08c:	f000 fc32 	bl	801a8f4 <uxr_seq_num_add>
 801a090:	8921      	ldrh	r1, [r4, #8]
 801a092:	6863      	ldr	r3, [r4, #4]
 801a094:	4606      	mov	r6, r0
 801a096:	fbb0 f2f1 	udiv	r2, r0, r1
 801a09a:	fbb3 f3f1 	udiv	r3, r3, r1
 801a09e:	fb01 0212 	mls	r2, r1, r2, r0
 801a0a2:	6820      	ldr	r0, [r4, #0]
 801a0a4:	b292      	uxth	r2, r2
 801a0a6:	fb02 f303 	mul.w	r3, r2, r3
 801a0aa:	3304      	adds	r3, #4
 801a0ac:	4418      	add	r0, r3
 801a0ae:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a0b2:	2b00      	cmp	r3, #0
 801a0b4:	d097      	beq.n	8019fe6 <uxr_receive_reliable_message+0x22>
 801a0b6:	6923      	ldr	r3, [r4, #16]
 801a0b8:	4798      	blx	r3
 801a0ba:	2802      	cmp	r0, #2
 801a0bc:	d002      	beq.n	801a0c4 <uxr_receive_reliable_message+0x100>
 801a0be:	2801      	cmp	r0, #1
 801a0c0:	d0e2      	beq.n	801a088 <uxr_receive_reliable_message+0xc4>
 801a0c2:	e790      	b.n	8019fe6 <uxr_receive_reliable_message+0x22>
 801a0c4:	2601      	movs	r6, #1
 801a0c6:	e78f      	b.n	8019fe8 <uxr_receive_reliable_message+0x24>

0801a0c8 <uxr_next_input_reliable_buffer_available>:
 801a0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a0cc:	4604      	mov	r4, r0
 801a0ce:	460f      	mov	r7, r1
 801a0d0:	8980      	ldrh	r0, [r0, #12]
 801a0d2:	2101      	movs	r1, #1
 801a0d4:	4690      	mov	r8, r2
 801a0d6:	f000 fc0d 	bl	801a8f4 <uxr_seq_num_add>
 801a0da:	8922      	ldrh	r2, [r4, #8]
 801a0dc:	6866      	ldr	r6, [r4, #4]
 801a0de:	fbb0 f3f2 	udiv	r3, r0, r2
 801a0e2:	fbb6 f6f2 	udiv	r6, r6, r2
 801a0e6:	fb02 0313 	mls	r3, r2, r3, r0
 801a0ea:	b29b      	uxth	r3, r3
 801a0ec:	fb03 f606 	mul.w	r6, r3, r6
 801a0f0:	6823      	ldr	r3, [r4, #0]
 801a0f2:	3604      	adds	r6, #4
 801a0f4:	441e      	add	r6, r3
 801a0f6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801a0fa:	f1b9 0f00 	cmp.w	r9, #0
 801a0fe:	d023      	beq.n	801a148 <uxr_next_input_reliable_buffer_available+0x80>
 801a100:	4605      	mov	r5, r0
 801a102:	6923      	ldr	r3, [r4, #16]
 801a104:	4630      	mov	r0, r6
 801a106:	4798      	blx	r3
 801a108:	4682      	mov	sl, r0
 801a10a:	b300      	cbz	r0, 801a14e <uxr_next_input_reliable_buffer_available+0x86>
 801a10c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801a110:	2101      	movs	r1, #1
 801a112:	4650      	mov	r0, sl
 801a114:	f000 fbee 	bl	801a8f4 <uxr_seq_num_add>
 801a118:	8921      	ldrh	r1, [r4, #8]
 801a11a:	4682      	mov	sl, r0
 801a11c:	6863      	ldr	r3, [r4, #4]
 801a11e:	6820      	ldr	r0, [r4, #0]
 801a120:	fbba f2f1 	udiv	r2, sl, r1
 801a124:	fbb3 f3f1 	udiv	r3, r3, r1
 801a128:	fb01 a212 	mls	r2, r1, r2, sl
 801a12c:	b292      	uxth	r2, r2
 801a12e:	fb02 f303 	mul.w	r3, r2, r3
 801a132:	3304      	adds	r3, #4
 801a134:	4418      	add	r0, r3
 801a136:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a13a:	b12b      	cbz	r3, 801a148 <uxr_next_input_reliable_buffer_available+0x80>
 801a13c:	6923      	ldr	r3, [r4, #16]
 801a13e:	4798      	blx	r3
 801a140:	2802      	cmp	r0, #2
 801a142:	d01b      	beq.n	801a17c <uxr_next_input_reliable_buffer_available+0xb4>
 801a144:	2801      	cmp	r0, #1
 801a146:	d0e3      	beq.n	801a110 <uxr_next_input_reliable_buffer_available+0x48>
 801a148:	2000      	movs	r0, #0
 801a14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a14e:	464a      	mov	r2, r9
 801a150:	4631      	mov	r1, r6
 801a152:	4638      	mov	r0, r7
 801a154:	f7f5 fafa 	bl	800f74c <ucdr_init_buffer>
 801a158:	8921      	ldrh	r1, [r4, #8]
 801a15a:	6863      	ldr	r3, [r4, #4]
 801a15c:	2001      	movs	r0, #1
 801a15e:	fbb5 f2f1 	udiv	r2, r5, r1
 801a162:	fbb3 f3f1 	udiv	r3, r3, r1
 801a166:	fb01 5212 	mls	r2, r1, r2, r5
 801a16a:	b292      	uxth	r2, r2
 801a16c:	fb02 f303 	mul.w	r3, r2, r3
 801a170:	6822      	ldr	r2, [r4, #0]
 801a172:	f842 a003 	str.w	sl, [r2, r3]
 801a176:	81a5      	strh	r5, [r4, #12]
 801a178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a17c:	8920      	ldrh	r0, [r4, #8]
 801a17e:	eb06 0108 	add.w	r1, r6, r8
 801a182:	6863      	ldr	r3, [r4, #4]
 801a184:	eba9 0208 	sub.w	r2, r9, r8
 801a188:	fbb5 f6f0 	udiv	r6, r5, r0
 801a18c:	fbb3 f3f0 	udiv	r3, r3, r0
 801a190:	fb00 5516 	mls	r5, r0, r6, r5
 801a194:	2000      	movs	r0, #0
 801a196:	b2ad      	uxth	r5, r5
 801a198:	fb03 f505 	mul.w	r5, r3, r5
 801a19c:	6823      	ldr	r3, [r4, #0]
 801a19e:	5158      	str	r0, [r3, r5]
 801a1a0:	4638      	mov	r0, r7
 801a1a2:	f7f5 fad3 	bl	800f74c <ucdr_init_buffer>
 801a1a6:	4638      	mov	r0, r7
 801a1a8:	4622      	mov	r2, r4
 801a1aa:	4903      	ldr	r1, [pc, #12]	@ (801a1b8 <uxr_next_input_reliable_buffer_available+0xf0>)
 801a1ac:	f7f5 faa2 	bl	800f6f4 <ucdr_set_on_full_buffer_callback>
 801a1b0:	2001      	movs	r0, #1
 801a1b2:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801a1b6:	e7c8      	b.n	801a14a <uxr_next_input_reliable_buffer_available+0x82>
 801a1b8:	08019ec9 	.word	0x08019ec9

0801a1bc <uxr_process_heartbeat>:
 801a1bc:	b538      	push	{r3, r4, r5, lr}
 801a1be:	4611      	mov	r1, r2
 801a1c0:	4604      	mov	r4, r0
 801a1c2:	89c0      	ldrh	r0, [r0, #14]
 801a1c4:	4615      	mov	r5, r2
 801a1c6:	f000 fb9d 	bl	801a904 <uxr_seq_num_cmp>
 801a1ca:	2800      	cmp	r0, #0
 801a1cc:	bfb8      	it	lt
 801a1ce:	81e5      	strhlt	r5, [r4, #14]
 801a1d0:	bd38      	pop	{r3, r4, r5, pc}
 801a1d2:	bf00      	nop

0801a1d4 <uxr_compute_acknack>:
 801a1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a1d8:	8903      	ldrh	r3, [r0, #8]
 801a1da:	4604      	mov	r4, r0
 801a1dc:	460f      	mov	r7, r1
 801a1de:	8985      	ldrh	r5, [r0, #12]
 801a1e0:	b1db      	cbz	r3, 801a21a <uxr_compute_acknack+0x46>
 801a1e2:	4628      	mov	r0, r5
 801a1e4:	2601      	movs	r6, #1
 801a1e6:	e004      	b.n	801a1f2 <uxr_compute_acknack+0x1e>
 801a1e8:	4566      	cmp	r6, ip
 801a1ea:	f106 0601 	add.w	r6, r6, #1
 801a1ee:	d214      	bcs.n	801a21a <uxr_compute_acknack+0x46>
 801a1f0:	89a0      	ldrh	r0, [r4, #12]
 801a1f2:	b2b1      	uxth	r1, r6
 801a1f4:	f000 fb7e 	bl	801a8f4 <uxr_seq_num_add>
 801a1f8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a1fc:	fbb0 f2fc 	udiv	r2, r0, ip
 801a200:	e9d4 1300 	ldrd	r1, r3, [r4]
 801a204:	fb0c 0212 	mls	r2, ip, r2, r0
 801a208:	fbb3 f3fc 	udiv	r3, r3, ip
 801a20c:	b292      	uxth	r2, r2
 801a20e:	fb02 f303 	mul.w	r3, r2, r3
 801a212:	58cb      	ldr	r3, [r1, r3]
 801a214:	2b00      	cmp	r3, #0
 801a216:	d1e7      	bne.n	801a1e8 <uxr_compute_acknack+0x14>
 801a218:	4605      	mov	r5, r0
 801a21a:	803d      	strh	r5, [r7, #0]
 801a21c:	2101      	movs	r1, #1
 801a21e:	89e6      	ldrh	r6, [r4, #14]
 801a220:	4628      	mov	r0, r5
 801a222:	f000 fb6b 	bl	801a8fc <uxr_seq_num_sub>
 801a226:	4601      	mov	r1, r0
 801a228:	4630      	mov	r0, r6
 801a22a:	f000 fb67 	bl	801a8fc <uxr_seq_num_sub>
 801a22e:	4606      	mov	r6, r0
 801a230:	b328      	cbz	r0, 801a27e <uxr_compute_acknack+0xaa>
 801a232:	f04f 0900 	mov.w	r9, #0
 801a236:	f04f 0801 	mov.w	r8, #1
 801a23a:	464d      	mov	r5, r9
 801a23c:	fa1f f189 	uxth.w	r1, r9
 801a240:	8838      	ldrh	r0, [r7, #0]
 801a242:	f000 fb57 	bl	801a8f4 <uxr_seq_num_add>
 801a246:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a24a:	6861      	ldr	r1, [r4, #4]
 801a24c:	fa08 fe09 	lsl.w	lr, r8, r9
 801a250:	6822      	ldr	r2, [r4, #0]
 801a252:	f109 0901 	add.w	r9, r9, #1
 801a256:	ea4e 0e05 	orr.w	lr, lr, r5
 801a25a:	fbb0 f3fc 	udiv	r3, r0, ip
 801a25e:	fbb1 f1fc 	udiv	r1, r1, ip
 801a262:	fb03 001c 	mls	r0, r3, ip, r0
 801a266:	b283      	uxth	r3, r0
 801a268:	fb01 f303 	mul.w	r3, r1, r3
 801a26c:	58d3      	ldr	r3, [r2, r3]
 801a26e:	b90b      	cbnz	r3, 801a274 <uxr_compute_acknack+0xa0>
 801a270:	fa1f f58e 	uxth.w	r5, lr
 801a274:	454e      	cmp	r6, r9
 801a276:	d1e1      	bne.n	801a23c <uxr_compute_acknack+0x68>
 801a278:	4628      	mov	r0, r5
 801a27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a27e:	4605      	mov	r5, r0
 801a280:	4628      	mov	r0, r5
 801a282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a286:	bf00      	nop

0801a288 <uxr_init_output_best_effort_stream>:
 801a288:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801a28c:	6001      	str	r1, [r0, #0]
 801a28e:	7303      	strb	r3, [r0, #12]
 801a290:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801a294:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801a298:	4770      	bx	lr
 801a29a:	bf00      	nop

0801a29c <uxr_reset_output_best_effort_stream>:
 801a29c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a2a0:	7b03      	ldrb	r3, [r0, #12]
 801a2a2:	81c2      	strh	r2, [r0, #14]
 801a2a4:	6043      	str	r3, [r0, #4]
 801a2a6:	4770      	bx	lr

0801a2a8 <uxr_prepare_best_effort_buffer_to_write>:
 801a2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a2aa:	4604      	mov	r4, r0
 801a2ac:	b083      	sub	sp, #12
 801a2ae:	6840      	ldr	r0, [r0, #4]
 801a2b0:	460d      	mov	r5, r1
 801a2b2:	4616      	mov	r6, r2
 801a2b4:	f7fd fed4 	bl	8018060 <uxr_submessage_padding>
 801a2b8:	6863      	ldr	r3, [r4, #4]
 801a2ba:	4418      	add	r0, r3
 801a2bc:	68a3      	ldr	r3, [r4, #8]
 801a2be:	1942      	adds	r2, r0, r5
 801a2c0:	4293      	cmp	r3, r2
 801a2c2:	bf2c      	ite	cs
 801a2c4:	2701      	movcs	r7, #1
 801a2c6:	2700      	movcc	r7, #0
 801a2c8:	d202      	bcs.n	801a2d0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801a2ca:	4638      	mov	r0, r7
 801a2cc:	b003      	add	sp, #12
 801a2ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a2d0:	9000      	str	r0, [sp, #0]
 801a2d2:	2300      	movs	r3, #0
 801a2d4:	4630      	mov	r0, r6
 801a2d6:	6821      	ldr	r1, [r4, #0]
 801a2d8:	f7f5 fa26 	bl	800f728 <ucdr_init_buffer_origin_offset>
 801a2dc:	6861      	ldr	r1, [r4, #4]
 801a2de:	4638      	mov	r0, r7
 801a2e0:	4429      	add	r1, r5
 801a2e2:	6061      	str	r1, [r4, #4]
 801a2e4:	b003      	add	sp, #12
 801a2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a2e8 <uxr_prepare_best_effort_buffer_to_send>:
 801a2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2ec:	4604      	mov	r4, r0
 801a2ee:	461d      	mov	r5, r3
 801a2f0:	6840      	ldr	r0, [r0, #4]
 801a2f2:	7b23      	ldrb	r3, [r4, #12]
 801a2f4:	4298      	cmp	r0, r3
 801a2f6:	bf8c      	ite	hi
 801a2f8:	2601      	movhi	r6, #1
 801a2fa:	2600      	movls	r6, #0
 801a2fc:	d802      	bhi.n	801a304 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801a2fe:	4630      	mov	r0, r6
 801a300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a304:	4688      	mov	r8, r1
 801a306:	89e0      	ldrh	r0, [r4, #14]
 801a308:	2101      	movs	r1, #1
 801a30a:	4617      	mov	r7, r2
 801a30c:	f000 faf2 	bl	801a8f4 <uxr_seq_num_add>
 801a310:	6823      	ldr	r3, [r4, #0]
 801a312:	81e0      	strh	r0, [r4, #14]
 801a314:	8028      	strh	r0, [r5, #0]
 801a316:	4630      	mov	r0, r6
 801a318:	f8c8 3000 	str.w	r3, [r8]
 801a31c:	6863      	ldr	r3, [r4, #4]
 801a31e:	603b      	str	r3, [r7, #0]
 801a320:	7b23      	ldrb	r3, [r4, #12]
 801a322:	6063      	str	r3, [r4, #4]
 801a324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a328 <on_full_output_buffer>:
 801a328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a32a:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801a32e:	460c      	mov	r4, r1
 801a330:	6803      	ldr	r3, [r0, #0]
 801a332:	4605      	mov	r5, r0
 801a334:	7b26      	ldrb	r6, [r4, #12]
 801a336:	e9d1 1200 	ldrd	r1, r2, [r1]
 801a33a:	fbb2 f2fc 	udiv	r2, r2, ip
 801a33e:	eba3 0e01 	sub.w	lr, r3, r1
 801a342:	6903      	ldr	r3, [r0, #16]
 801a344:	fbbe fef2 	udiv	lr, lr, r2
 801a348:	f10e 0e01 	add.w	lr, lr, #1
 801a34c:	fa1f fe8e 	uxth.w	lr, lr
 801a350:	fbbe f7fc 	udiv	r7, lr, ip
 801a354:	fb0c ec17 	mls	ip, ip, r7, lr
 801a358:	fa1f fc8c 	uxth.w	ip, ip
 801a35c:	fb02 fc0c 	mul.w	ip, r2, ip
 801a360:	f851 200c 	ldr.w	r2, [r1, ip]
 801a364:	44b4      	add	ip, r6
 801a366:	1b92      	subs	r2, r2, r6
 801a368:	f10c 0c08 	add.w	ip, ip, #8
 801a36c:	3a04      	subs	r2, #4
 801a36e:	4461      	add	r1, ip
 801a370:	f7f5 f9e4 	bl	800f73c <ucdr_init_buffer_origin>
 801a374:	4628      	mov	r0, r5
 801a376:	4622      	mov	r2, r4
 801a378:	4902      	ldr	r1, [pc, #8]	@ (801a384 <on_full_output_buffer+0x5c>)
 801a37a:	f7f5 f9bb 	bl	800f6f4 <ucdr_set_on_full_buffer_callback>
 801a37e:	2000      	movs	r0, #0
 801a380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a382:	bf00      	nop
 801a384:	0801a329 	.word	0x0801a329

0801a388 <uxr_init_output_reliable_stream>:
 801a388:	b530      	push	{r4, r5, lr}
 801a38a:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801a38e:	8103      	strh	r3, [r0, #8]
 801a390:	7304      	strb	r4, [r0, #12]
 801a392:	e9c0 1200 	strd	r1, r2, [r0]
 801a396:	b1e3      	cbz	r3, 801a3d2 <uxr_init_output_reliable_stream+0x4a>
 801a398:	600c      	str	r4, [r1, #0]
 801a39a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a39e:	f1bc 0f01 	cmp.w	ip, #1
 801a3a2:	d916      	bls.n	801a3d2 <uxr_init_output_reliable_stream+0x4a>
 801a3a4:	f04f 0e01 	mov.w	lr, #1
 801a3a8:	6843      	ldr	r3, [r0, #4]
 801a3aa:	f10e 0501 	add.w	r5, lr, #1
 801a3ae:	7b04      	ldrb	r4, [r0, #12]
 801a3b0:	6801      	ldr	r1, [r0, #0]
 801a3b2:	fbbe f2fc 	udiv	r2, lr, ip
 801a3b6:	fbb3 f3fc 	udiv	r3, r3, ip
 801a3ba:	fb0c e212 	mls	r2, ip, r2, lr
 801a3be:	fa1f fe85 	uxth.w	lr, r5
 801a3c2:	b292      	uxth	r2, r2
 801a3c4:	fb02 f303 	mul.w	r3, r2, r3
 801a3c8:	50cc      	str	r4, [r1, r3]
 801a3ca:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a3ce:	45f4      	cmp	ip, lr
 801a3d0:	d8ea      	bhi.n	801a3a8 <uxr_init_output_reliable_stream+0x20>
 801a3d2:	4b07      	ldr	r3, [pc, #28]	@ (801a3f0 <uxr_init_output_reliable_stream+0x68>)
 801a3d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a3d8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801a3dc:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 801a3e0:	f8c0 300e 	str.w	r3, [r0, #14]
 801a3e4:	2300      	movs	r3, #0
 801a3e6:	8242      	strh	r2, [r0, #18]
 801a3e8:	8403      	strh	r3, [r0, #32]
 801a3ea:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801a3ee:	bd30      	pop	{r4, r5, pc}
 801a3f0:	ffff0000 	.word	0xffff0000
 801a3f4:	00000000 	.word	0x00000000

0801a3f8 <uxr_reset_output_reliable_stream>:
 801a3f8:	8901      	ldrh	r1, [r0, #8]
 801a3fa:	b510      	push	{r4, lr}
 801a3fc:	b1b1      	cbz	r1, 801a42c <uxr_reset_output_reliable_stream+0x34>
 801a3fe:	f04f 0e00 	mov.w	lr, #0
 801a402:	46f4      	mov	ip, lr
 801a404:	6843      	ldr	r3, [r0, #4]
 801a406:	f10e 0e01 	add.w	lr, lr, #1
 801a40a:	7b04      	ldrb	r4, [r0, #12]
 801a40c:	fbbc f2f1 	udiv	r2, ip, r1
 801a410:	fbb3 f3f1 	udiv	r3, r3, r1
 801a414:	fb01 c212 	mls	r2, r1, r2, ip
 801a418:	fa1f fc8e 	uxth.w	ip, lr
 801a41c:	b292      	uxth	r2, r2
 801a41e:	fb02 f303 	mul.w	r3, r2, r3
 801a422:	6802      	ldr	r2, [r0, #0]
 801a424:	50d4      	str	r4, [r2, r3]
 801a426:	8901      	ldrh	r1, [r0, #8]
 801a428:	4561      	cmp	r1, ip
 801a42a:	d8eb      	bhi.n	801a404 <uxr_reset_output_reliable_stream+0xc>
 801a42c:	4b08      	ldr	r3, [pc, #32]	@ (801a450 <uxr_reset_output_reliable_stream+0x58>)
 801a42e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a432:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 801a448 <uxr_reset_output_reliable_stream+0x50>
 801a436:	f8c0 300e 	str.w	r3, [r0, #14]
 801a43a:	2300      	movs	r3, #0
 801a43c:	8242      	strh	r2, [r0, #18]
 801a43e:	8403      	strh	r3, [r0, #32]
 801a440:	ed80 7b06 	vstr	d7, [r0, #24]
 801a444:	bd10      	pop	{r4, pc}
 801a446:	bf00      	nop
 801a448:	ffffffff 	.word	0xffffffff
 801a44c:	7fffffff 	.word	0x7fffffff
 801a450:	ffff0000 	.word	0xffff0000

0801a454 <uxr_prepare_reliable_buffer_to_write>:
 801a454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a458:	4604      	mov	r4, r0
 801a45a:	b091      	sub	sp, #68	@ 0x44
 801a45c:	8900      	ldrh	r0, [r0, #8]
 801a45e:	468b      	mov	fp, r1
 801a460:	89e6      	ldrh	r6, [r4, #14]
 801a462:	9204      	str	r2, [sp, #16]
 801a464:	6865      	ldr	r5, [r4, #4]
 801a466:	6823      	ldr	r3, [r4, #0]
 801a468:	f894 900c 	ldrb.w	r9, [r4, #12]
 801a46c:	fbb6 f2f0 	udiv	r2, r6, r0
 801a470:	fbb5 f5f0 	udiv	r5, r5, r0
 801a474:	fb00 6212 	mls	r2, r0, r2, r6
 801a478:	1f2f      	subs	r7, r5, #4
 801a47a:	b292      	uxth	r2, r2
 801a47c:	fb05 3202 	mla	r2, r5, r2, r3
 801a480:	1d11      	adds	r1, r2, #4
 801a482:	f8d2 8000 	ldr.w	r8, [r2]
 801a486:	9103      	str	r1, [sp, #12]
 801a488:	2800      	cmp	r0, #0
 801a48a:	f000 814a 	beq.w	801a722 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801a48e:	f04f 0c00 	mov.w	ip, #0
 801a492:	46e2      	mov	sl, ip
 801a494:	4661      	mov	r1, ip
 801a496:	f10c 0c01 	add.w	ip, ip, #1
 801a49a:	fbb1 f2f0 	udiv	r2, r1, r0
 801a49e:	fb00 1212 	mls	r2, r0, r2, r1
 801a4a2:	fa1f f18c 	uxth.w	r1, ip
 801a4a6:	b292      	uxth	r2, r2
 801a4a8:	fb05 f202 	mul.w	r2, r5, r2
 801a4ac:	589a      	ldr	r2, [r3, r2]
 801a4ae:	454a      	cmp	r2, r9
 801a4b0:	d103      	bne.n	801a4ba <uxr_prepare_reliable_buffer_to_write+0x66>
 801a4b2:	f10a 0a01 	add.w	sl, sl, #1
 801a4b6:	fa1f fa8a 	uxth.w	sl, sl
 801a4ba:	4281      	cmp	r1, r0
 801a4bc:	d3eb      	bcc.n	801a496 <uxr_prepare_reliable_buffer_to_write+0x42>
 801a4be:	4640      	mov	r0, r8
 801a4c0:	2104      	movs	r1, #4
 801a4c2:	f8cd a014 	str.w	sl, [sp, #20]
 801a4c6:	f7f5 f945 	bl	800f754 <ucdr_alignment>
 801a4ca:	4480      	add	r8, r0
 801a4cc:	eb08 020b 	add.w	r2, r8, fp
 801a4d0:	42ba      	cmp	r2, r7
 801a4d2:	f240 80ca 	bls.w	801a66a <uxr_prepare_reliable_buffer_to_write+0x216>
 801a4d6:	7b22      	ldrb	r2, [r4, #12]
 801a4d8:	445a      	add	r2, fp
 801a4da:	42ba      	cmp	r2, r7
 801a4dc:	f240 80b2 	bls.w	801a644 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801a4e0:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801a4e4:	b2bb      	uxth	r3, r7
 801a4e6:	eba2 0209 	sub.w	r2, r2, r9
 801a4ea:	441a      	add	r2, r3
 801a4ec:	b292      	uxth	r2, r2
 801a4ee:	fb0a f902 	mul.w	r9, sl, r2
 801a4f2:	9205      	str	r2, [sp, #20]
 801a4f4:	45d9      	cmp	r9, fp
 801a4f6:	9206      	str	r2, [sp, #24]
 801a4f8:	f0c0 80b3 	bcc.w	801a662 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a4fc:	f108 0204 	add.w	r2, r8, #4
 801a500:	42ba      	cmp	r2, r7
 801a502:	f080 80da 	bcs.w	801a6ba <uxr_prepare_reliable_buffer_to_write+0x266>
 801a506:	f1a3 0904 	sub.w	r9, r3, #4
 801a50a:	9b05      	ldr	r3, [sp, #20]
 801a50c:	eba9 0908 	sub.w	r9, r9, r8
 801a510:	fa1f f989 	uxth.w	r9, r9
 801a514:	ebab 0b09 	sub.w	fp, fp, r9
 801a518:	fbbb f2f3 	udiv	r2, fp, r3
 801a51c:	fb03 b312 	mls	r3, r3, r2, fp
 801a520:	2b00      	cmp	r3, #0
 801a522:	f040 80c4 	bne.w	801a6ae <uxr_prepare_reliable_buffer_to_write+0x25a>
 801a526:	b293      	uxth	r3, r2
 801a528:	4553      	cmp	r3, sl
 801a52a:	f200 809a 	bhi.w	801a662 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a52e:	2b00      	cmp	r3, #0
 801a530:	f000 80f9 	beq.w	801a726 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801a534:	f8cd 801c 	str.w	r8, [sp, #28]
 801a538:	f04f 0a00 	mov.w	sl, #0
 801a53c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801a540:	f10d 0b20 	add.w	fp, sp, #32
 801a544:	9505      	str	r5, [sp, #20]
 801a546:	461d      	mov	r5, r3
 801a548:	e000      	b.n	801a54c <uxr_prepare_reliable_buffer_to_write+0xf8>
 801a54a:	46c1      	mov	r9, r8
 801a54c:	8922      	ldrh	r2, [r4, #8]
 801a54e:	4658      	mov	r0, fp
 801a550:	6863      	ldr	r3, [r4, #4]
 801a552:	f10a 0a01 	add.w	sl, sl, #1
 801a556:	fbb6 f1f2 	udiv	r1, r6, r2
 801a55a:	fbb3 f3f2 	udiv	r3, r3, r2
 801a55e:	fb02 6111 	mls	r1, r2, r1, r6
 801a562:	463a      	mov	r2, r7
 801a564:	b289      	uxth	r1, r1
 801a566:	fb03 f101 	mul.w	r1, r3, r1
 801a56a:	6823      	ldr	r3, [r4, #0]
 801a56c:	3104      	adds	r1, #4
 801a56e:	4419      	add	r1, r3
 801a570:	2300      	movs	r3, #0
 801a572:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801a576:	f8cd c000 	str.w	ip, [sp]
 801a57a:	f7f5 f8d5 	bl	800f728 <ucdr_init_buffer_origin_offset>
 801a57e:	464a      	mov	r2, r9
 801a580:	2300      	movs	r3, #0
 801a582:	210d      	movs	r1, #13
 801a584:	4658      	mov	r0, fp
 801a586:	f7fd fd2b 	bl	8017fe0 <uxr_buffer_submessage_header>
 801a58a:	8921      	ldrh	r1, [r4, #8]
 801a58c:	6863      	ldr	r3, [r4, #4]
 801a58e:	4630      	mov	r0, r6
 801a590:	fbb6 f2f1 	udiv	r2, r6, r1
 801a594:	fbb3 f3f1 	udiv	r3, r3, r1
 801a598:	fb01 6212 	mls	r2, r1, r2, r6
 801a59c:	2101      	movs	r1, #1
 801a59e:	b292      	uxth	r2, r2
 801a5a0:	fb02 f303 	mul.w	r3, r2, r3
 801a5a4:	6822      	ldr	r2, [r4, #0]
 801a5a6:	50d7      	str	r7, [r2, r3]
 801a5a8:	f000 f9a4 	bl	801a8f4 <uxr_seq_num_add>
 801a5ac:	4606      	mov	r6, r0
 801a5ae:	fa1f f38a 	uxth.w	r3, sl
 801a5b2:	429d      	cmp	r5, r3
 801a5b4:	d8c9      	bhi.n	801a54a <uxr_prepare_reliable_buffer_to_write+0xf6>
 801a5b6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801a5ba:	9d05      	ldr	r5, [sp, #20]
 801a5bc:	8920      	ldrh	r0, [r4, #8]
 801a5be:	463a      	mov	r2, r7
 801a5c0:	6863      	ldr	r3, [r4, #4]
 801a5c2:	fbb6 f1f0 	udiv	r1, r6, r0
 801a5c6:	fbb3 f3f0 	udiv	r3, r3, r0
 801a5ca:	fb00 6111 	mls	r1, r0, r1, r6
 801a5ce:	4658      	mov	r0, fp
 801a5d0:	b289      	uxth	r1, r1
 801a5d2:	fb01 f303 	mul.w	r3, r1, r3
 801a5d6:	6821      	ldr	r1, [r4, #0]
 801a5d8:	3304      	adds	r3, #4
 801a5da:	4419      	add	r1, r3
 801a5dc:	2300      	movs	r3, #0
 801a5de:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801a5e2:	9700      	str	r7, [sp, #0]
 801a5e4:	f7f5 f8a0 	bl	800f728 <ucdr_init_buffer_origin_offset>
 801a5e8:	9f06      	ldr	r7, [sp, #24]
 801a5ea:	4658      	mov	r0, fp
 801a5ec:	2302      	movs	r3, #2
 801a5ee:	b2ba      	uxth	r2, r7
 801a5f0:	210d      	movs	r1, #13
 801a5f2:	f7fd fcf5 	bl	8017fe0 <uxr_buffer_submessage_header>
 801a5f6:	f108 0104 	add.w	r1, r8, #4
 801a5fa:	9b03      	ldr	r3, [sp, #12]
 801a5fc:	f1a5 0208 	sub.w	r2, r5, #8
 801a600:	8925      	ldrh	r5, [r4, #8]
 801a602:	440b      	add	r3, r1
 801a604:	eba2 0208 	sub.w	r2, r2, r8
 801a608:	fbb6 f0f5 	udiv	r0, r6, r5
 801a60c:	4619      	mov	r1, r3
 801a60e:	6863      	ldr	r3, [r4, #4]
 801a610:	fb05 6010 	mls	r0, r5, r0, r6
 801a614:	fbb3 f3f5 	udiv	r3, r3, r5
 801a618:	b280      	uxth	r0, r0
 801a61a:	6825      	ldr	r5, [r4, #0]
 801a61c:	fb00 f303 	mul.w	r3, r0, r3
 801a620:	7b20      	ldrb	r0, [r4, #12]
 801a622:	3004      	adds	r0, #4
 801a624:	4438      	add	r0, r7
 801a626:	50e8      	str	r0, [r5, r3]
 801a628:	9d04      	ldr	r5, [sp, #16]
 801a62a:	4628      	mov	r0, r5
 801a62c:	f7f5 f88e 	bl	800f74c <ucdr_init_buffer>
 801a630:	4628      	mov	r0, r5
 801a632:	4622      	mov	r2, r4
 801a634:	493d      	ldr	r1, [pc, #244]	@ (801a72c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801a636:	f7f5 f85d 	bl	800f6f4 <ucdr_set_on_full_buffer_callback>
 801a63a:	2001      	movs	r0, #1
 801a63c:	81e6      	strh	r6, [r4, #14]
 801a63e:	b011      	add	sp, #68	@ 0x44
 801a640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a644:	2101      	movs	r1, #1
 801a646:	89e0      	ldrh	r0, [r4, #14]
 801a648:	f000 f954 	bl	801a8f4 <uxr_seq_num_add>
 801a64c:	4605      	mov	r5, r0
 801a64e:	8921      	ldrh	r1, [r4, #8]
 801a650:	8a60      	ldrh	r0, [r4, #18]
 801a652:	f000 f94f 	bl	801a8f4 <uxr_seq_num_add>
 801a656:	4601      	mov	r1, r0
 801a658:	4628      	mov	r0, r5
 801a65a:	f000 f953 	bl	801a904 <uxr_seq_num_cmp>
 801a65e:	2800      	cmp	r0, #0
 801a660:	dd44      	ble.n	801a6ec <uxr_prepare_reliable_buffer_to_write+0x298>
 801a662:	2000      	movs	r0, #0
 801a664:	b011      	add	sp, #68	@ 0x44
 801a666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a66a:	8921      	ldrh	r1, [r4, #8]
 801a66c:	8a60      	ldrh	r0, [r4, #18]
 801a66e:	9205      	str	r2, [sp, #20]
 801a670:	f000 f940 	bl	801a8f4 <uxr_seq_num_add>
 801a674:	4601      	mov	r1, r0
 801a676:	4630      	mov	r0, r6
 801a678:	f000 f944 	bl	801a904 <uxr_seq_num_cmp>
 801a67c:	2800      	cmp	r0, #0
 801a67e:	9a05      	ldr	r2, [sp, #20]
 801a680:	dcef      	bgt.n	801a662 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a682:	8925      	ldrh	r5, [r4, #8]
 801a684:	e9d4 7300 	ldrd	r7, r3, [r4]
 801a688:	fbb6 f4f5 	udiv	r4, r6, r5
 801a68c:	fbb3 f3f5 	udiv	r3, r3, r5
 801a690:	fb05 6414 	mls	r4, r5, r4, r6
 801a694:	b2a4      	uxth	r4, r4
 801a696:	fb04 f303 	mul.w	r3, r4, r3
 801a69a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801a69e:	50fa      	str	r2, [r7, r3]
 801a6a0:	2300      	movs	r3, #0
 801a6a2:	f8cd 8000 	str.w	r8, [sp]
 801a6a6:	f7f5 f83f 	bl	800f728 <ucdr_init_buffer_origin_offset>
 801a6aa:	2001      	movs	r0, #1
 801a6ac:	e7da      	b.n	801a664 <uxr_prepare_reliable_buffer_to_write+0x210>
 801a6ae:	3201      	adds	r2, #1
 801a6b0:	9306      	str	r3, [sp, #24]
 801a6b2:	b293      	uxth	r3, r2
 801a6b4:	4553      	cmp	r3, sl
 801a6b6:	d8d4      	bhi.n	801a662 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a6b8:	e739      	b.n	801a52e <uxr_prepare_reliable_buffer_to_write+0xda>
 801a6ba:	4630      	mov	r0, r6
 801a6bc:	2101      	movs	r1, #1
 801a6be:	9307      	str	r3, [sp, #28]
 801a6c0:	f000 f918 	bl	801a8f4 <uxr_seq_num_add>
 801a6c4:	4606      	mov	r6, r0
 801a6c6:	8920      	ldrh	r0, [r4, #8]
 801a6c8:	6862      	ldr	r2, [r4, #4]
 801a6ca:	fbb6 f1f0 	udiv	r1, r6, r0
 801a6ce:	fbb2 f2f0 	udiv	r2, r2, r0
 801a6d2:	fb00 6111 	mls	r1, r0, r1, r6
 801a6d6:	b289      	uxth	r1, r1
 801a6d8:	fb01 f202 	mul.w	r2, r1, r2
 801a6dc:	6821      	ldr	r1, [r4, #0]
 801a6de:	3204      	adds	r2, #4
 801a6e0:	188b      	adds	r3, r1, r2
 801a6e2:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801a6e6:	9303      	str	r3, [sp, #12]
 801a6e8:	9b07      	ldr	r3, [sp, #28]
 801a6ea:	e70c      	b.n	801a506 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801a6ec:	8921      	ldrh	r1, [r4, #8]
 801a6ee:	6863      	ldr	r3, [r4, #4]
 801a6f0:	9804      	ldr	r0, [sp, #16]
 801a6f2:	fbb5 f2f1 	udiv	r2, r5, r1
 801a6f6:	fbb3 f3f1 	udiv	r3, r3, r1
 801a6fa:	fb01 5212 	mls	r2, r1, r2, r5
 801a6fe:	6821      	ldr	r1, [r4, #0]
 801a700:	b292      	uxth	r2, r2
 801a702:	fb02 f303 	mul.w	r3, r2, r3
 801a706:	7b22      	ldrb	r2, [r4, #12]
 801a708:	3304      	adds	r3, #4
 801a70a:	445a      	add	r2, fp
 801a70c:	4419      	add	r1, r3
 801a70e:	f841 2c04 	str.w	r2, [r1, #-4]
 801a712:	7b23      	ldrb	r3, [r4, #12]
 801a714:	9300      	str	r3, [sp, #0]
 801a716:	2300      	movs	r3, #0
 801a718:	f7f5 f806 	bl	800f728 <ucdr_init_buffer_origin_offset>
 801a71c:	2001      	movs	r0, #1
 801a71e:	81e5      	strh	r5, [r4, #14]
 801a720:	e7a0      	b.n	801a664 <uxr_prepare_reliable_buffer_to_write+0x210>
 801a722:	4682      	mov	sl, r0
 801a724:	e6cb      	b.n	801a4be <uxr_prepare_reliable_buffer_to_write+0x6a>
 801a726:	f10d 0b20 	add.w	fp, sp, #32
 801a72a:	e747      	b.n	801a5bc <uxr_prepare_reliable_buffer_to_write+0x168>
 801a72c:	0801a329 	.word	0x0801a329

0801a730 <uxr_prepare_next_reliable_buffer_to_send>:
 801a730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a732:	4604      	mov	r4, r0
 801a734:	461d      	mov	r5, r3
 801a736:	460f      	mov	r7, r1
 801a738:	8a00      	ldrh	r0, [r0, #16]
 801a73a:	2101      	movs	r1, #1
 801a73c:	4616      	mov	r6, r2
 801a73e:	f000 f8d9 	bl	801a8f4 <uxr_seq_num_add>
 801a742:	8028      	strh	r0, [r5, #0]
 801a744:	8922      	ldrh	r2, [r4, #8]
 801a746:	6863      	ldr	r3, [r4, #4]
 801a748:	fbb0 f1f2 	udiv	r1, r0, r2
 801a74c:	fbb3 f3f2 	udiv	r3, r3, r2
 801a750:	fb02 0c11 	mls	ip, r2, r1, r0
 801a754:	89e1      	ldrh	r1, [r4, #14]
 801a756:	fa1f fc8c 	uxth.w	ip, ip
 801a75a:	fb0c fc03 	mul.w	ip, ip, r3
 801a75e:	6823      	ldr	r3, [r4, #0]
 801a760:	f10c 0c04 	add.w	ip, ip, #4
 801a764:	4463      	add	r3, ip
 801a766:	603b      	str	r3, [r7, #0]
 801a768:	6823      	ldr	r3, [r4, #0]
 801a76a:	449c      	add	ip, r3
 801a76c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801a770:	6033      	str	r3, [r6, #0]
 801a772:	f000 f8c7 	bl	801a904 <uxr_seq_num_cmp>
 801a776:	2800      	cmp	r0, #0
 801a778:	dd01      	ble.n	801a77e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801a77a:	2000      	movs	r0, #0
 801a77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a77e:	7b23      	ldrb	r3, [r4, #12]
 801a780:	6832      	ldr	r2, [r6, #0]
 801a782:	429a      	cmp	r2, r3
 801a784:	d9f9      	bls.n	801a77a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a786:	8a61      	ldrh	r1, [r4, #18]
 801a788:	8a20      	ldrh	r0, [r4, #16]
 801a78a:	f000 f8b7 	bl	801a8fc <uxr_seq_num_sub>
 801a78e:	8923      	ldrh	r3, [r4, #8]
 801a790:	4283      	cmp	r3, r0
 801a792:	d0f2      	beq.n	801a77a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a794:	8828      	ldrh	r0, [r5, #0]
 801a796:	89e3      	ldrh	r3, [r4, #14]
 801a798:	8220      	strh	r0, [r4, #16]
 801a79a:	4298      	cmp	r0, r3
 801a79c:	d001      	beq.n	801a7a2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801a79e:	2001      	movs	r0, #1
 801a7a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7a2:	2101      	movs	r1, #1
 801a7a4:	f000 f8a6 	bl	801a8f4 <uxr_seq_num_add>
 801a7a8:	4603      	mov	r3, r0
 801a7aa:	2001      	movs	r0, #1
 801a7ac:	81e3      	strh	r3, [r4, #14]
 801a7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a7b0 <uxr_update_output_stream_heartbeat_timestamp>:
 801a7b0:	b570      	push	{r4, r5, r6, lr}
 801a7b2:	8a01      	ldrh	r1, [r0, #16]
 801a7b4:	4604      	mov	r4, r0
 801a7b6:	8a40      	ldrh	r0, [r0, #18]
 801a7b8:	4615      	mov	r5, r2
 801a7ba:	461e      	mov	r6, r3
 801a7bc:	f000 f8a2 	bl	801a904 <uxr_seq_num_cmp>
 801a7c0:	2800      	cmp	r0, #0
 801a7c2:	db07      	blt.n	801a7d4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801a7c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a7c8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a7cc:	2000      	movs	r0, #0
 801a7ce:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801a7d2:	bd70      	pop	{r4, r5, r6, pc}
 801a7d4:	f894 0020 	ldrb.w	r0, [r4, #32]
 801a7d8:	b940      	cbnz	r0, 801a7ec <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801a7da:	2301      	movs	r3, #1
 801a7dc:	f884 3020 	strb.w	r3, [r4, #32]
 801a7e0:	3564      	adds	r5, #100	@ 0x64
 801a7e2:	f146 0600 	adc.w	r6, r6, #0
 801a7e6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801a7ea:	bd70      	pop	{r4, r5, r6, pc}
 801a7ec:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801a7f0:	4295      	cmp	r5, r2
 801a7f2:	eb76 0303 	sbcs.w	r3, r6, r3
 801a7f6:	db04      	blt.n	801a802 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801a7f8:	1c43      	adds	r3, r0, #1
 801a7fa:	2001      	movs	r0, #1
 801a7fc:	f884 3020 	strb.w	r3, [r4, #32]
 801a800:	e7ee      	b.n	801a7e0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801a802:	2000      	movs	r0, #0
 801a804:	e7ec      	b.n	801a7e0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801a806:	bf00      	nop

0801a808 <uxr_begin_output_nack_buffer_it>:
 801a808:	8a40      	ldrh	r0, [r0, #18]
 801a80a:	4770      	bx	lr

0801a80c <uxr_next_reliable_nack_buffer_to_send>:
 801a80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a810:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 801a814:	b197      	cbz	r7, 801a83c <uxr_next_reliable_nack_buffer_to_send+0x30>
 801a816:	4680      	mov	r8, r0
 801a818:	460d      	mov	r5, r1
 801a81a:	4616      	mov	r6, r2
 801a81c:	461c      	mov	r4, r3
 801a81e:	8818      	ldrh	r0, [r3, #0]
 801a820:	2101      	movs	r1, #1
 801a822:	f000 f867 	bl	801a8f4 <uxr_seq_num_add>
 801a826:	8020      	strh	r0, [r4, #0]
 801a828:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801a82c:	f000 f86a 	bl	801a904 <uxr_seq_num_cmp>
 801a830:	2800      	cmp	r0, #0
 801a832:	dd06      	ble.n	801a842 <uxr_next_reliable_nack_buffer_to_send+0x36>
 801a834:	2300      	movs	r3, #0
 801a836:	461f      	mov	r7, r3
 801a838:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 801a83c:	4638      	mov	r0, r7
 801a83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a842:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801a846:	8820      	ldrh	r0, [r4, #0]
 801a848:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a84c:	fbb0 f3f2 	udiv	r3, r0, r2
 801a850:	fbb1 fcf2 	udiv	ip, r1, r2
 801a854:	fb02 0313 	mls	r3, r2, r3, r0
 801a858:	b29b      	uxth	r3, r3
 801a85a:	fb03 fc0c 	mul.w	ip, r3, ip
 801a85e:	f8d8 3000 	ldr.w	r3, [r8]
 801a862:	f10c 0c04 	add.w	ip, ip, #4
 801a866:	4463      	add	r3, ip
 801a868:	602b      	str	r3, [r5, #0]
 801a86a:	f8d8 3000 	ldr.w	r3, [r8]
 801a86e:	4463      	add	r3, ip
 801a870:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801a874:	6033      	str	r3, [r6, #0]
 801a876:	f898 200c 	ldrb.w	r2, [r8, #12]
 801a87a:	429a      	cmp	r2, r3
 801a87c:	d0d0      	beq.n	801a820 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801a87e:	e7dd      	b.n	801a83c <uxr_next_reliable_nack_buffer_to_send+0x30>

0801a880 <uxr_process_acknack>:
 801a880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a882:	4604      	mov	r4, r0
 801a884:	460e      	mov	r6, r1
 801a886:	4610      	mov	r0, r2
 801a888:	2101      	movs	r1, #1
 801a88a:	f000 f837 	bl	801a8fc <uxr_seq_num_sub>
 801a88e:	8a61      	ldrh	r1, [r4, #18]
 801a890:	f000 f834 	bl	801a8fc <uxr_seq_num_sub>
 801a894:	b1c8      	cbz	r0, 801a8ca <uxr_process_acknack+0x4a>
 801a896:	4605      	mov	r5, r0
 801a898:	2700      	movs	r7, #0
 801a89a:	2101      	movs	r1, #1
 801a89c:	8a60      	ldrh	r0, [r4, #18]
 801a89e:	f000 f829 	bl	801a8f4 <uxr_seq_num_add>
 801a8a2:	8923      	ldrh	r3, [r4, #8]
 801a8a4:	6862      	ldr	r2, [r4, #4]
 801a8a6:	3701      	adds	r7, #1
 801a8a8:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801a8ac:	6821      	ldr	r1, [r4, #0]
 801a8ae:	42bd      	cmp	r5, r7
 801a8b0:	8260      	strh	r0, [r4, #18]
 801a8b2:	fbb0 fef3 	udiv	lr, r0, r3
 801a8b6:	fbb2 f2f3 	udiv	r2, r2, r3
 801a8ba:	fb03 031e 	mls	r3, r3, lr, r0
 801a8be:	b29b      	uxth	r3, r3
 801a8c0:	fb02 f303 	mul.w	r3, r2, r3
 801a8c4:	f841 c003 	str.w	ip, [r1, r3]
 801a8c8:	d1e7      	bne.n	801a89a <uxr_process_acknack+0x1a>
 801a8ca:	3e00      	subs	r6, #0
 801a8cc:	f04f 0300 	mov.w	r3, #0
 801a8d0:	bf18      	it	ne
 801a8d2:	2601      	movne	r6, #1
 801a8d4:	f884 3020 	strb.w	r3, [r4, #32]
 801a8d8:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801a8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8de:	bf00      	nop

0801a8e0 <uxr_is_output_up_to_date>:
 801a8e0:	8a01      	ldrh	r1, [r0, #16]
 801a8e2:	8a40      	ldrh	r0, [r0, #18]
 801a8e4:	b508      	push	{r3, lr}
 801a8e6:	f000 f80d 	bl	801a904 <uxr_seq_num_cmp>
 801a8ea:	fab0 f080 	clz	r0, r0
 801a8ee:	0940      	lsrs	r0, r0, #5
 801a8f0:	bd08      	pop	{r3, pc}
 801a8f2:	bf00      	nop

0801a8f4 <uxr_seq_num_add>:
 801a8f4:	4408      	add	r0, r1
 801a8f6:	b280      	uxth	r0, r0
 801a8f8:	4770      	bx	lr
 801a8fa:	bf00      	nop

0801a8fc <uxr_seq_num_sub>:
 801a8fc:	1a40      	subs	r0, r0, r1
 801a8fe:	b280      	uxth	r0, r0
 801a900:	4770      	bx	lr
 801a902:	bf00      	nop

0801a904 <uxr_seq_num_cmp>:
 801a904:	4288      	cmp	r0, r1
 801a906:	d011      	beq.n	801a92c <uxr_seq_num_cmp+0x28>
 801a908:	d309      	bcc.n	801a91e <uxr_seq_num_cmp+0x1a>
 801a90a:	4288      	cmp	r0, r1
 801a90c:	d910      	bls.n	801a930 <uxr_seq_num_cmp+0x2c>
 801a90e:	1a40      	subs	r0, r0, r1
 801a910:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801a914:	bfd4      	ite	le
 801a916:	2001      	movle	r0, #1
 801a918:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801a91c:	4770      	bx	lr
 801a91e:	1a0b      	subs	r3, r1, r0
 801a920:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801a924:	daf1      	bge.n	801a90a <uxr_seq_num_cmp+0x6>
 801a926:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a92a:	4770      	bx	lr
 801a92c:	2000      	movs	r0, #0
 801a92e:	4770      	bx	lr
 801a930:	2001      	movs	r0, #1
 801a932:	4770      	bx	lr

0801a934 <rosidl_runtime_c__String__init>:
 801a934:	b510      	push	{r4, lr}
 801a936:	4604      	mov	r4, r0
 801a938:	b086      	sub	sp, #24
 801a93a:	b170      	cbz	r0, 801a95a <rosidl_runtime_c__String__init+0x26>
 801a93c:	a801      	add	r0, sp, #4
 801a93e:	f7f4 fd23 	bl	800f388 <rcutils_get_default_allocator>
 801a942:	9b01      	ldr	r3, [sp, #4]
 801a944:	9905      	ldr	r1, [sp, #20]
 801a946:	2001      	movs	r0, #1
 801a948:	4798      	blx	r3
 801a94a:	6020      	str	r0, [r4, #0]
 801a94c:	b128      	cbz	r0, 801a95a <rosidl_runtime_c__String__init+0x26>
 801a94e:	2100      	movs	r1, #0
 801a950:	2201      	movs	r2, #1
 801a952:	7001      	strb	r1, [r0, #0]
 801a954:	4610      	mov	r0, r2
 801a956:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801a95a:	b006      	add	sp, #24
 801a95c:	bd10      	pop	{r4, pc}
 801a95e:	bf00      	nop

0801a960 <rosidl_runtime_c__String__fini>:
 801a960:	b320      	cbz	r0, 801a9ac <rosidl_runtime_c__String__fini+0x4c>
 801a962:	6803      	ldr	r3, [r0, #0]
 801a964:	b510      	push	{r4, lr}
 801a966:	4604      	mov	r4, r0
 801a968:	b086      	sub	sp, #24
 801a96a:	b173      	cbz	r3, 801a98a <rosidl_runtime_c__String__fini+0x2a>
 801a96c:	6883      	ldr	r3, [r0, #8]
 801a96e:	b1f3      	cbz	r3, 801a9ae <rosidl_runtime_c__String__fini+0x4e>
 801a970:	a801      	add	r0, sp, #4
 801a972:	f7f4 fd09 	bl	800f388 <rcutils_get_default_allocator>
 801a976:	9b02      	ldr	r3, [sp, #8]
 801a978:	9905      	ldr	r1, [sp, #20]
 801a97a:	6820      	ldr	r0, [r4, #0]
 801a97c:	4798      	blx	r3
 801a97e:	2300      	movs	r3, #0
 801a980:	e9c4 3300 	strd	r3, r3, [r4]
 801a984:	60a3      	str	r3, [r4, #8]
 801a986:	b006      	add	sp, #24
 801a988:	bd10      	pop	{r4, pc}
 801a98a:	6843      	ldr	r3, [r0, #4]
 801a98c:	b9db      	cbnz	r3, 801a9c6 <rosidl_runtime_c__String__fini+0x66>
 801a98e:	6883      	ldr	r3, [r0, #8]
 801a990:	2b00      	cmp	r3, #0
 801a992:	d0f8      	beq.n	801a986 <rosidl_runtime_c__String__fini+0x26>
 801a994:	4b12      	ldr	r3, [pc, #72]	@ (801a9e0 <rosidl_runtime_c__String__fini+0x80>)
 801a996:	2251      	movs	r2, #81	@ 0x51
 801a998:	2101      	movs	r1, #1
 801a99a:	4812      	ldr	r0, [pc, #72]	@ (801a9e4 <rosidl_runtime_c__String__fini+0x84>)
 801a99c:	681b      	ldr	r3, [r3, #0]
 801a99e:	68db      	ldr	r3, [r3, #12]
 801a9a0:	f000 fb82 	bl	801b0a8 <fwrite>
 801a9a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a9a8:	f000 f83e 	bl	801aa28 <exit>
 801a9ac:	4770      	bx	lr
 801a9ae:	4b0c      	ldr	r3, [pc, #48]	@ (801a9e0 <rosidl_runtime_c__String__fini+0x80>)
 801a9b0:	224c      	movs	r2, #76	@ 0x4c
 801a9b2:	2101      	movs	r1, #1
 801a9b4:	480c      	ldr	r0, [pc, #48]	@ (801a9e8 <rosidl_runtime_c__String__fini+0x88>)
 801a9b6:	681b      	ldr	r3, [r3, #0]
 801a9b8:	68db      	ldr	r3, [r3, #12]
 801a9ba:	f000 fb75 	bl	801b0a8 <fwrite>
 801a9be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a9c2:	f000 f831 	bl	801aa28 <exit>
 801a9c6:	4b06      	ldr	r3, [pc, #24]	@ (801a9e0 <rosidl_runtime_c__String__fini+0x80>)
 801a9c8:	224e      	movs	r2, #78	@ 0x4e
 801a9ca:	2101      	movs	r1, #1
 801a9cc:	4807      	ldr	r0, [pc, #28]	@ (801a9ec <rosidl_runtime_c__String__fini+0x8c>)
 801a9ce:	681b      	ldr	r3, [r3, #0]
 801a9d0:	68db      	ldr	r3, [r3, #12]
 801a9d2:	f000 fb69 	bl	801b0a8 <fwrite>
 801a9d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a9da:	f000 f825 	bl	801aa28 <exit>
 801a9de:	bf00      	nop
 801a9e0:	24000294 	.word	0x24000294
 801a9e4:	0801cf14 	.word	0x0801cf14
 801a9e8:	0801ce74 	.word	0x0801ce74
 801a9ec:	0801cec4 	.word	0x0801cec4

0801a9f0 <calloc>:
 801a9f0:	4b02      	ldr	r3, [pc, #8]	@ (801a9fc <calloc+0xc>)
 801a9f2:	460a      	mov	r2, r1
 801a9f4:	4601      	mov	r1, r0
 801a9f6:	6818      	ldr	r0, [r3, #0]
 801a9f8:	f000 b802 	b.w	801aa00 <_calloc_r>
 801a9fc:	24000294 	.word	0x24000294

0801aa00 <_calloc_r>:
 801aa00:	b570      	push	{r4, r5, r6, lr}
 801aa02:	fba1 5402 	umull	r5, r4, r1, r2
 801aa06:	b93c      	cbnz	r4, 801aa18 <_calloc_r+0x18>
 801aa08:	4629      	mov	r1, r5
 801aa0a:	f000 f899 	bl	801ab40 <_malloc_r>
 801aa0e:	4606      	mov	r6, r0
 801aa10:	b928      	cbnz	r0, 801aa1e <_calloc_r+0x1e>
 801aa12:	2600      	movs	r6, #0
 801aa14:	4630      	mov	r0, r6
 801aa16:	bd70      	pop	{r4, r5, r6, pc}
 801aa18:	220c      	movs	r2, #12
 801aa1a:	6002      	str	r2, [r0, #0]
 801aa1c:	e7f9      	b.n	801aa12 <_calloc_r+0x12>
 801aa1e:	462a      	mov	r2, r5
 801aa20:	4621      	mov	r1, r4
 801aa22:	f000 fcbd 	bl	801b3a0 <memset>
 801aa26:	e7f5      	b.n	801aa14 <_calloc_r+0x14>

0801aa28 <exit>:
 801aa28:	b508      	push	{r3, lr}
 801aa2a:	4b06      	ldr	r3, [pc, #24]	@ (801aa44 <exit+0x1c>)
 801aa2c:	4604      	mov	r4, r0
 801aa2e:	b113      	cbz	r3, 801aa36 <exit+0xe>
 801aa30:	2100      	movs	r1, #0
 801aa32:	f3af 8000 	nop.w
 801aa36:	4b04      	ldr	r3, [pc, #16]	@ (801aa48 <exit+0x20>)
 801aa38:	681b      	ldr	r3, [r3, #0]
 801aa3a:	b103      	cbz	r3, 801aa3e <exit+0x16>
 801aa3c:	4798      	blx	r3
 801aa3e:	4620      	mov	r0, r4
 801aa40:	f7e7 f808 	bl	8001a54 <_exit>
 801aa44:	00000000 	.word	0x00000000
 801aa48:	24068854 	.word	0x24068854

0801aa4c <getenv>:
 801aa4c:	b507      	push	{r0, r1, r2, lr}
 801aa4e:	4b04      	ldr	r3, [pc, #16]	@ (801aa60 <getenv+0x14>)
 801aa50:	4601      	mov	r1, r0
 801aa52:	aa01      	add	r2, sp, #4
 801aa54:	6818      	ldr	r0, [r3, #0]
 801aa56:	f000 f805 	bl	801aa64 <_findenv_r>
 801aa5a:	b003      	add	sp, #12
 801aa5c:	f85d fb04 	ldr.w	pc, [sp], #4
 801aa60:	24000294 	.word	0x24000294

0801aa64 <_findenv_r>:
 801aa64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa68:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801aad8 <_findenv_r+0x74>
 801aa6c:	4606      	mov	r6, r0
 801aa6e:	4689      	mov	r9, r1
 801aa70:	4617      	mov	r7, r2
 801aa72:	f000 fde1 	bl	801b638 <__env_lock>
 801aa76:	f8da 4000 	ldr.w	r4, [sl]
 801aa7a:	b134      	cbz	r4, 801aa8a <_findenv_r+0x26>
 801aa7c:	464b      	mov	r3, r9
 801aa7e:	4698      	mov	r8, r3
 801aa80:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aa84:	b13a      	cbz	r2, 801aa96 <_findenv_r+0x32>
 801aa86:	2a3d      	cmp	r2, #61	@ 0x3d
 801aa88:	d1f9      	bne.n	801aa7e <_findenv_r+0x1a>
 801aa8a:	4630      	mov	r0, r6
 801aa8c:	f000 fdda 	bl	801b644 <__env_unlock>
 801aa90:	2000      	movs	r0, #0
 801aa92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa96:	eba8 0809 	sub.w	r8, r8, r9
 801aa9a:	46a3      	mov	fp, r4
 801aa9c:	f854 0b04 	ldr.w	r0, [r4], #4
 801aaa0:	2800      	cmp	r0, #0
 801aaa2:	d0f2      	beq.n	801aa8a <_findenv_r+0x26>
 801aaa4:	4642      	mov	r2, r8
 801aaa6:	4649      	mov	r1, r9
 801aaa8:	f000 fc8f 	bl	801b3ca <strncmp>
 801aaac:	2800      	cmp	r0, #0
 801aaae:	d1f4      	bne.n	801aa9a <_findenv_r+0x36>
 801aab0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801aab4:	eb03 0508 	add.w	r5, r3, r8
 801aab8:	f813 3008 	ldrb.w	r3, [r3, r8]
 801aabc:	2b3d      	cmp	r3, #61	@ 0x3d
 801aabe:	d1ec      	bne.n	801aa9a <_findenv_r+0x36>
 801aac0:	f8da 3000 	ldr.w	r3, [sl]
 801aac4:	ebab 0303 	sub.w	r3, fp, r3
 801aac8:	109b      	asrs	r3, r3, #2
 801aaca:	4630      	mov	r0, r6
 801aacc:	603b      	str	r3, [r7, #0]
 801aace:	f000 fdb9 	bl	801b644 <__env_unlock>
 801aad2:	1c68      	adds	r0, r5, #1
 801aad4:	e7dd      	b.n	801aa92 <_findenv_r+0x2e>
 801aad6:	bf00      	nop
 801aad8:	24000000 	.word	0x24000000

0801aadc <malloc>:
 801aadc:	4b02      	ldr	r3, [pc, #8]	@ (801aae8 <malloc+0xc>)
 801aade:	4601      	mov	r1, r0
 801aae0:	6818      	ldr	r0, [r3, #0]
 801aae2:	f000 b82d 	b.w	801ab40 <_malloc_r>
 801aae6:	bf00      	nop
 801aae8:	24000294 	.word	0x24000294

0801aaec <free>:
 801aaec:	4b02      	ldr	r3, [pc, #8]	@ (801aaf8 <free+0xc>)
 801aaee:	4601      	mov	r1, r0
 801aaf0:	6818      	ldr	r0, [r3, #0]
 801aaf2:	f000 bdad 	b.w	801b650 <_free_r>
 801aaf6:	bf00      	nop
 801aaf8:	24000294 	.word	0x24000294

0801aafc <sbrk_aligned>:
 801aafc:	b570      	push	{r4, r5, r6, lr}
 801aafe:	4e0f      	ldr	r6, [pc, #60]	@ (801ab3c <sbrk_aligned+0x40>)
 801ab00:	460c      	mov	r4, r1
 801ab02:	6831      	ldr	r1, [r6, #0]
 801ab04:	4605      	mov	r5, r0
 801ab06:	b911      	cbnz	r1, 801ab0e <sbrk_aligned+0x12>
 801ab08:	f000 fd12 	bl	801b530 <_sbrk_r>
 801ab0c:	6030      	str	r0, [r6, #0]
 801ab0e:	4621      	mov	r1, r4
 801ab10:	4628      	mov	r0, r5
 801ab12:	f000 fd0d 	bl	801b530 <_sbrk_r>
 801ab16:	1c43      	adds	r3, r0, #1
 801ab18:	d103      	bne.n	801ab22 <sbrk_aligned+0x26>
 801ab1a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801ab1e:	4620      	mov	r0, r4
 801ab20:	bd70      	pop	{r4, r5, r6, pc}
 801ab22:	1cc4      	adds	r4, r0, #3
 801ab24:	f024 0403 	bic.w	r4, r4, #3
 801ab28:	42a0      	cmp	r0, r4
 801ab2a:	d0f8      	beq.n	801ab1e <sbrk_aligned+0x22>
 801ab2c:	1a21      	subs	r1, r4, r0
 801ab2e:	4628      	mov	r0, r5
 801ab30:	f000 fcfe 	bl	801b530 <_sbrk_r>
 801ab34:	3001      	adds	r0, #1
 801ab36:	d1f2      	bne.n	801ab1e <sbrk_aligned+0x22>
 801ab38:	e7ef      	b.n	801ab1a <sbrk_aligned+0x1e>
 801ab3a:	bf00      	nop
 801ab3c:	24068714 	.word	0x24068714

0801ab40 <_malloc_r>:
 801ab40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ab44:	1ccd      	adds	r5, r1, #3
 801ab46:	f025 0503 	bic.w	r5, r5, #3
 801ab4a:	3508      	adds	r5, #8
 801ab4c:	2d0c      	cmp	r5, #12
 801ab4e:	bf38      	it	cc
 801ab50:	250c      	movcc	r5, #12
 801ab52:	2d00      	cmp	r5, #0
 801ab54:	4606      	mov	r6, r0
 801ab56:	db01      	blt.n	801ab5c <_malloc_r+0x1c>
 801ab58:	42a9      	cmp	r1, r5
 801ab5a:	d904      	bls.n	801ab66 <_malloc_r+0x26>
 801ab5c:	230c      	movs	r3, #12
 801ab5e:	6033      	str	r3, [r6, #0]
 801ab60:	2000      	movs	r0, #0
 801ab62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ab66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801ac3c <_malloc_r+0xfc>
 801ab6a:	f000 f869 	bl	801ac40 <__malloc_lock>
 801ab6e:	f8d8 3000 	ldr.w	r3, [r8]
 801ab72:	461c      	mov	r4, r3
 801ab74:	bb44      	cbnz	r4, 801abc8 <_malloc_r+0x88>
 801ab76:	4629      	mov	r1, r5
 801ab78:	4630      	mov	r0, r6
 801ab7a:	f7ff ffbf 	bl	801aafc <sbrk_aligned>
 801ab7e:	1c43      	adds	r3, r0, #1
 801ab80:	4604      	mov	r4, r0
 801ab82:	d158      	bne.n	801ac36 <_malloc_r+0xf6>
 801ab84:	f8d8 4000 	ldr.w	r4, [r8]
 801ab88:	4627      	mov	r7, r4
 801ab8a:	2f00      	cmp	r7, #0
 801ab8c:	d143      	bne.n	801ac16 <_malloc_r+0xd6>
 801ab8e:	2c00      	cmp	r4, #0
 801ab90:	d04b      	beq.n	801ac2a <_malloc_r+0xea>
 801ab92:	6823      	ldr	r3, [r4, #0]
 801ab94:	4639      	mov	r1, r7
 801ab96:	4630      	mov	r0, r6
 801ab98:	eb04 0903 	add.w	r9, r4, r3
 801ab9c:	f000 fcc8 	bl	801b530 <_sbrk_r>
 801aba0:	4581      	cmp	r9, r0
 801aba2:	d142      	bne.n	801ac2a <_malloc_r+0xea>
 801aba4:	6821      	ldr	r1, [r4, #0]
 801aba6:	1a6d      	subs	r5, r5, r1
 801aba8:	4629      	mov	r1, r5
 801abaa:	4630      	mov	r0, r6
 801abac:	f7ff ffa6 	bl	801aafc <sbrk_aligned>
 801abb0:	3001      	adds	r0, #1
 801abb2:	d03a      	beq.n	801ac2a <_malloc_r+0xea>
 801abb4:	6823      	ldr	r3, [r4, #0]
 801abb6:	442b      	add	r3, r5
 801abb8:	6023      	str	r3, [r4, #0]
 801abba:	f8d8 3000 	ldr.w	r3, [r8]
 801abbe:	685a      	ldr	r2, [r3, #4]
 801abc0:	bb62      	cbnz	r2, 801ac1c <_malloc_r+0xdc>
 801abc2:	f8c8 7000 	str.w	r7, [r8]
 801abc6:	e00f      	b.n	801abe8 <_malloc_r+0xa8>
 801abc8:	6822      	ldr	r2, [r4, #0]
 801abca:	1b52      	subs	r2, r2, r5
 801abcc:	d420      	bmi.n	801ac10 <_malloc_r+0xd0>
 801abce:	2a0b      	cmp	r2, #11
 801abd0:	d917      	bls.n	801ac02 <_malloc_r+0xc2>
 801abd2:	1961      	adds	r1, r4, r5
 801abd4:	42a3      	cmp	r3, r4
 801abd6:	6025      	str	r5, [r4, #0]
 801abd8:	bf18      	it	ne
 801abda:	6059      	strne	r1, [r3, #4]
 801abdc:	6863      	ldr	r3, [r4, #4]
 801abde:	bf08      	it	eq
 801abe0:	f8c8 1000 	streq.w	r1, [r8]
 801abe4:	5162      	str	r2, [r4, r5]
 801abe6:	604b      	str	r3, [r1, #4]
 801abe8:	4630      	mov	r0, r6
 801abea:	f000 f82f 	bl	801ac4c <__malloc_unlock>
 801abee:	f104 000b 	add.w	r0, r4, #11
 801abf2:	1d23      	adds	r3, r4, #4
 801abf4:	f020 0007 	bic.w	r0, r0, #7
 801abf8:	1ac2      	subs	r2, r0, r3
 801abfa:	bf1c      	itt	ne
 801abfc:	1a1b      	subne	r3, r3, r0
 801abfe:	50a3      	strne	r3, [r4, r2]
 801ac00:	e7af      	b.n	801ab62 <_malloc_r+0x22>
 801ac02:	6862      	ldr	r2, [r4, #4]
 801ac04:	42a3      	cmp	r3, r4
 801ac06:	bf0c      	ite	eq
 801ac08:	f8c8 2000 	streq.w	r2, [r8]
 801ac0c:	605a      	strne	r2, [r3, #4]
 801ac0e:	e7eb      	b.n	801abe8 <_malloc_r+0xa8>
 801ac10:	4623      	mov	r3, r4
 801ac12:	6864      	ldr	r4, [r4, #4]
 801ac14:	e7ae      	b.n	801ab74 <_malloc_r+0x34>
 801ac16:	463c      	mov	r4, r7
 801ac18:	687f      	ldr	r7, [r7, #4]
 801ac1a:	e7b6      	b.n	801ab8a <_malloc_r+0x4a>
 801ac1c:	461a      	mov	r2, r3
 801ac1e:	685b      	ldr	r3, [r3, #4]
 801ac20:	42a3      	cmp	r3, r4
 801ac22:	d1fb      	bne.n	801ac1c <_malloc_r+0xdc>
 801ac24:	2300      	movs	r3, #0
 801ac26:	6053      	str	r3, [r2, #4]
 801ac28:	e7de      	b.n	801abe8 <_malloc_r+0xa8>
 801ac2a:	230c      	movs	r3, #12
 801ac2c:	6033      	str	r3, [r6, #0]
 801ac2e:	4630      	mov	r0, r6
 801ac30:	f000 f80c 	bl	801ac4c <__malloc_unlock>
 801ac34:	e794      	b.n	801ab60 <_malloc_r+0x20>
 801ac36:	6005      	str	r5, [r0, #0]
 801ac38:	e7d6      	b.n	801abe8 <_malloc_r+0xa8>
 801ac3a:	bf00      	nop
 801ac3c:	24068718 	.word	0x24068718

0801ac40 <__malloc_lock>:
 801ac40:	4801      	ldr	r0, [pc, #4]	@ (801ac48 <__malloc_lock+0x8>)
 801ac42:	f000 bcc2 	b.w	801b5ca <__retarget_lock_acquire_recursive>
 801ac46:	bf00      	nop
 801ac48:	2406885d 	.word	0x2406885d

0801ac4c <__malloc_unlock>:
 801ac4c:	4801      	ldr	r0, [pc, #4]	@ (801ac54 <__malloc_unlock+0x8>)
 801ac4e:	f000 bcbd 	b.w	801b5cc <__retarget_lock_release_recursive>
 801ac52:	bf00      	nop
 801ac54:	2406885d 	.word	0x2406885d

0801ac58 <srand>:
 801ac58:	b538      	push	{r3, r4, r5, lr}
 801ac5a:	4b10      	ldr	r3, [pc, #64]	@ (801ac9c <srand+0x44>)
 801ac5c:	681d      	ldr	r5, [r3, #0]
 801ac5e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ac60:	4604      	mov	r4, r0
 801ac62:	b9b3      	cbnz	r3, 801ac92 <srand+0x3a>
 801ac64:	2018      	movs	r0, #24
 801ac66:	f7ff ff39 	bl	801aadc <malloc>
 801ac6a:	4602      	mov	r2, r0
 801ac6c:	6328      	str	r0, [r5, #48]	@ 0x30
 801ac6e:	b920      	cbnz	r0, 801ac7a <srand+0x22>
 801ac70:	4b0b      	ldr	r3, [pc, #44]	@ (801aca0 <srand+0x48>)
 801ac72:	480c      	ldr	r0, [pc, #48]	@ (801aca4 <srand+0x4c>)
 801ac74:	2146      	movs	r1, #70	@ 0x46
 801ac76:	f000 fcc1 	bl	801b5fc <__assert_func>
 801ac7a:	490b      	ldr	r1, [pc, #44]	@ (801aca8 <srand+0x50>)
 801ac7c:	4b0b      	ldr	r3, [pc, #44]	@ (801acac <srand+0x54>)
 801ac7e:	e9c0 1300 	strd	r1, r3, [r0]
 801ac82:	4b0b      	ldr	r3, [pc, #44]	@ (801acb0 <srand+0x58>)
 801ac84:	6083      	str	r3, [r0, #8]
 801ac86:	230b      	movs	r3, #11
 801ac88:	8183      	strh	r3, [r0, #12]
 801ac8a:	2100      	movs	r1, #0
 801ac8c:	2001      	movs	r0, #1
 801ac8e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801ac92:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ac94:	2200      	movs	r2, #0
 801ac96:	611c      	str	r4, [r3, #16]
 801ac98:	615a      	str	r2, [r3, #20]
 801ac9a:	bd38      	pop	{r3, r4, r5, pc}
 801ac9c:	24000294 	.word	0x24000294
 801aca0:	0801cf66 	.word	0x0801cf66
 801aca4:	0801cf7d 	.word	0x0801cf7d
 801aca8:	abcd330e 	.word	0xabcd330e
 801acac:	e66d1234 	.word	0xe66d1234
 801acb0:	0005deec 	.word	0x0005deec

0801acb4 <rand>:
 801acb4:	4b16      	ldr	r3, [pc, #88]	@ (801ad10 <rand+0x5c>)
 801acb6:	b510      	push	{r4, lr}
 801acb8:	681c      	ldr	r4, [r3, #0]
 801acba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801acbc:	b9b3      	cbnz	r3, 801acec <rand+0x38>
 801acbe:	2018      	movs	r0, #24
 801acc0:	f7ff ff0c 	bl	801aadc <malloc>
 801acc4:	4602      	mov	r2, r0
 801acc6:	6320      	str	r0, [r4, #48]	@ 0x30
 801acc8:	b920      	cbnz	r0, 801acd4 <rand+0x20>
 801acca:	4b12      	ldr	r3, [pc, #72]	@ (801ad14 <rand+0x60>)
 801accc:	4812      	ldr	r0, [pc, #72]	@ (801ad18 <rand+0x64>)
 801acce:	2152      	movs	r1, #82	@ 0x52
 801acd0:	f000 fc94 	bl	801b5fc <__assert_func>
 801acd4:	4911      	ldr	r1, [pc, #68]	@ (801ad1c <rand+0x68>)
 801acd6:	4b12      	ldr	r3, [pc, #72]	@ (801ad20 <rand+0x6c>)
 801acd8:	e9c0 1300 	strd	r1, r3, [r0]
 801acdc:	4b11      	ldr	r3, [pc, #68]	@ (801ad24 <rand+0x70>)
 801acde:	6083      	str	r3, [r0, #8]
 801ace0:	230b      	movs	r3, #11
 801ace2:	8183      	strh	r3, [r0, #12]
 801ace4:	2100      	movs	r1, #0
 801ace6:	2001      	movs	r0, #1
 801ace8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801acec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801acee:	480e      	ldr	r0, [pc, #56]	@ (801ad28 <rand+0x74>)
 801acf0:	690b      	ldr	r3, [r1, #16]
 801acf2:	694c      	ldr	r4, [r1, #20]
 801acf4:	4a0d      	ldr	r2, [pc, #52]	@ (801ad2c <rand+0x78>)
 801acf6:	4358      	muls	r0, r3
 801acf8:	fb02 0004 	mla	r0, r2, r4, r0
 801acfc:	fba3 3202 	umull	r3, r2, r3, r2
 801ad00:	3301      	adds	r3, #1
 801ad02:	eb40 0002 	adc.w	r0, r0, r2
 801ad06:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801ad0a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801ad0e:	bd10      	pop	{r4, pc}
 801ad10:	24000294 	.word	0x24000294
 801ad14:	0801cf66 	.word	0x0801cf66
 801ad18:	0801cf7d 	.word	0x0801cf7d
 801ad1c:	abcd330e 	.word	0xabcd330e
 801ad20:	e66d1234 	.word	0xe66d1234
 801ad24:	0005deec 	.word	0x0005deec
 801ad28:	5851f42d 	.word	0x5851f42d
 801ad2c:	4c957f2d 	.word	0x4c957f2d

0801ad30 <realloc>:
 801ad30:	4b02      	ldr	r3, [pc, #8]	@ (801ad3c <realloc+0xc>)
 801ad32:	460a      	mov	r2, r1
 801ad34:	4601      	mov	r1, r0
 801ad36:	6818      	ldr	r0, [r3, #0]
 801ad38:	f000 b802 	b.w	801ad40 <_realloc_r>
 801ad3c:	24000294 	.word	0x24000294

0801ad40 <_realloc_r>:
 801ad40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad44:	4680      	mov	r8, r0
 801ad46:	4615      	mov	r5, r2
 801ad48:	460c      	mov	r4, r1
 801ad4a:	b921      	cbnz	r1, 801ad56 <_realloc_r+0x16>
 801ad4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ad50:	4611      	mov	r1, r2
 801ad52:	f7ff bef5 	b.w	801ab40 <_malloc_r>
 801ad56:	b92a      	cbnz	r2, 801ad64 <_realloc_r+0x24>
 801ad58:	f000 fc7a 	bl	801b650 <_free_r>
 801ad5c:	2400      	movs	r4, #0
 801ad5e:	4620      	mov	r0, r4
 801ad60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad64:	f000 fcbe 	bl	801b6e4 <_malloc_usable_size_r>
 801ad68:	4285      	cmp	r5, r0
 801ad6a:	4606      	mov	r6, r0
 801ad6c:	d802      	bhi.n	801ad74 <_realloc_r+0x34>
 801ad6e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801ad72:	d8f4      	bhi.n	801ad5e <_realloc_r+0x1e>
 801ad74:	4629      	mov	r1, r5
 801ad76:	4640      	mov	r0, r8
 801ad78:	f7ff fee2 	bl	801ab40 <_malloc_r>
 801ad7c:	4607      	mov	r7, r0
 801ad7e:	2800      	cmp	r0, #0
 801ad80:	d0ec      	beq.n	801ad5c <_realloc_r+0x1c>
 801ad82:	42b5      	cmp	r5, r6
 801ad84:	462a      	mov	r2, r5
 801ad86:	4621      	mov	r1, r4
 801ad88:	bf28      	it	cs
 801ad8a:	4632      	movcs	r2, r6
 801ad8c:	f000 fc27 	bl	801b5de <memcpy>
 801ad90:	4621      	mov	r1, r4
 801ad92:	4640      	mov	r0, r8
 801ad94:	f000 fc5c 	bl	801b650 <_free_r>
 801ad98:	463c      	mov	r4, r7
 801ad9a:	e7e0      	b.n	801ad5e <_realloc_r+0x1e>

0801ad9c <_strtoul_l.constprop.0>:
 801ad9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ada0:	4e34      	ldr	r6, [pc, #208]	@ (801ae74 <_strtoul_l.constprop.0+0xd8>)
 801ada2:	4686      	mov	lr, r0
 801ada4:	460d      	mov	r5, r1
 801ada6:	4628      	mov	r0, r5
 801ada8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801adac:	5d37      	ldrb	r7, [r6, r4]
 801adae:	f017 0708 	ands.w	r7, r7, #8
 801adb2:	d1f8      	bne.n	801ada6 <_strtoul_l.constprop.0+0xa>
 801adb4:	2c2d      	cmp	r4, #45	@ 0x2d
 801adb6:	d12f      	bne.n	801ae18 <_strtoul_l.constprop.0+0x7c>
 801adb8:	782c      	ldrb	r4, [r5, #0]
 801adba:	2701      	movs	r7, #1
 801adbc:	1c85      	adds	r5, r0, #2
 801adbe:	f033 0010 	bics.w	r0, r3, #16
 801adc2:	d109      	bne.n	801add8 <_strtoul_l.constprop.0+0x3c>
 801adc4:	2c30      	cmp	r4, #48	@ 0x30
 801adc6:	d12c      	bne.n	801ae22 <_strtoul_l.constprop.0+0x86>
 801adc8:	7828      	ldrb	r0, [r5, #0]
 801adca:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801adce:	2858      	cmp	r0, #88	@ 0x58
 801add0:	d127      	bne.n	801ae22 <_strtoul_l.constprop.0+0x86>
 801add2:	786c      	ldrb	r4, [r5, #1]
 801add4:	2310      	movs	r3, #16
 801add6:	3502      	adds	r5, #2
 801add8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801addc:	2600      	movs	r6, #0
 801adde:	fbb8 f8f3 	udiv	r8, r8, r3
 801ade2:	fb03 f908 	mul.w	r9, r3, r8
 801ade6:	ea6f 0909 	mvn.w	r9, r9
 801adea:	4630      	mov	r0, r6
 801adec:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801adf0:	f1bc 0f09 	cmp.w	ip, #9
 801adf4:	d81c      	bhi.n	801ae30 <_strtoul_l.constprop.0+0x94>
 801adf6:	4664      	mov	r4, ip
 801adf8:	42a3      	cmp	r3, r4
 801adfa:	dd2a      	ble.n	801ae52 <_strtoul_l.constprop.0+0xb6>
 801adfc:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801ae00:	d007      	beq.n	801ae12 <_strtoul_l.constprop.0+0x76>
 801ae02:	4580      	cmp	r8, r0
 801ae04:	d322      	bcc.n	801ae4c <_strtoul_l.constprop.0+0xb0>
 801ae06:	d101      	bne.n	801ae0c <_strtoul_l.constprop.0+0x70>
 801ae08:	45a1      	cmp	r9, r4
 801ae0a:	db1f      	blt.n	801ae4c <_strtoul_l.constprop.0+0xb0>
 801ae0c:	fb00 4003 	mla	r0, r0, r3, r4
 801ae10:	2601      	movs	r6, #1
 801ae12:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ae16:	e7e9      	b.n	801adec <_strtoul_l.constprop.0+0x50>
 801ae18:	2c2b      	cmp	r4, #43	@ 0x2b
 801ae1a:	bf04      	itt	eq
 801ae1c:	782c      	ldrbeq	r4, [r5, #0]
 801ae1e:	1c85      	addeq	r5, r0, #2
 801ae20:	e7cd      	b.n	801adbe <_strtoul_l.constprop.0+0x22>
 801ae22:	2b00      	cmp	r3, #0
 801ae24:	d1d8      	bne.n	801add8 <_strtoul_l.constprop.0+0x3c>
 801ae26:	2c30      	cmp	r4, #48	@ 0x30
 801ae28:	bf0c      	ite	eq
 801ae2a:	2308      	moveq	r3, #8
 801ae2c:	230a      	movne	r3, #10
 801ae2e:	e7d3      	b.n	801add8 <_strtoul_l.constprop.0+0x3c>
 801ae30:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801ae34:	f1bc 0f19 	cmp.w	ip, #25
 801ae38:	d801      	bhi.n	801ae3e <_strtoul_l.constprop.0+0xa2>
 801ae3a:	3c37      	subs	r4, #55	@ 0x37
 801ae3c:	e7dc      	b.n	801adf8 <_strtoul_l.constprop.0+0x5c>
 801ae3e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801ae42:	f1bc 0f19 	cmp.w	ip, #25
 801ae46:	d804      	bhi.n	801ae52 <_strtoul_l.constprop.0+0xb6>
 801ae48:	3c57      	subs	r4, #87	@ 0x57
 801ae4a:	e7d5      	b.n	801adf8 <_strtoul_l.constprop.0+0x5c>
 801ae4c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801ae50:	e7df      	b.n	801ae12 <_strtoul_l.constprop.0+0x76>
 801ae52:	1c73      	adds	r3, r6, #1
 801ae54:	d106      	bne.n	801ae64 <_strtoul_l.constprop.0+0xc8>
 801ae56:	2322      	movs	r3, #34	@ 0x22
 801ae58:	f8ce 3000 	str.w	r3, [lr]
 801ae5c:	4630      	mov	r0, r6
 801ae5e:	b932      	cbnz	r2, 801ae6e <_strtoul_l.constprop.0+0xd2>
 801ae60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ae64:	b107      	cbz	r7, 801ae68 <_strtoul_l.constprop.0+0xcc>
 801ae66:	4240      	negs	r0, r0
 801ae68:	2a00      	cmp	r2, #0
 801ae6a:	d0f9      	beq.n	801ae60 <_strtoul_l.constprop.0+0xc4>
 801ae6c:	b106      	cbz	r6, 801ae70 <_strtoul_l.constprop.0+0xd4>
 801ae6e:	1e69      	subs	r1, r5, #1
 801ae70:	6011      	str	r1, [r2, #0]
 801ae72:	e7f5      	b.n	801ae60 <_strtoul_l.constprop.0+0xc4>
 801ae74:	0801cfd6 	.word	0x0801cfd6

0801ae78 <strtoul>:
 801ae78:	4613      	mov	r3, r2
 801ae7a:	460a      	mov	r2, r1
 801ae7c:	4601      	mov	r1, r0
 801ae7e:	4802      	ldr	r0, [pc, #8]	@ (801ae88 <strtoul+0x10>)
 801ae80:	6800      	ldr	r0, [r0, #0]
 801ae82:	f7ff bf8b 	b.w	801ad9c <_strtoul_l.constprop.0>
 801ae86:	bf00      	nop
 801ae88:	24000294 	.word	0x24000294

0801ae8c <std>:
 801ae8c:	2300      	movs	r3, #0
 801ae8e:	b510      	push	{r4, lr}
 801ae90:	4604      	mov	r4, r0
 801ae92:	e9c0 3300 	strd	r3, r3, [r0]
 801ae96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ae9a:	6083      	str	r3, [r0, #8]
 801ae9c:	8181      	strh	r1, [r0, #12]
 801ae9e:	6643      	str	r3, [r0, #100]	@ 0x64
 801aea0:	81c2      	strh	r2, [r0, #14]
 801aea2:	6183      	str	r3, [r0, #24]
 801aea4:	4619      	mov	r1, r3
 801aea6:	2208      	movs	r2, #8
 801aea8:	305c      	adds	r0, #92	@ 0x5c
 801aeaa:	f000 fa79 	bl	801b3a0 <memset>
 801aeae:	4b0d      	ldr	r3, [pc, #52]	@ (801aee4 <std+0x58>)
 801aeb0:	6263      	str	r3, [r4, #36]	@ 0x24
 801aeb2:	4b0d      	ldr	r3, [pc, #52]	@ (801aee8 <std+0x5c>)
 801aeb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 801aeb6:	4b0d      	ldr	r3, [pc, #52]	@ (801aeec <std+0x60>)
 801aeb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801aeba:	4b0d      	ldr	r3, [pc, #52]	@ (801aef0 <std+0x64>)
 801aebc:	6323      	str	r3, [r4, #48]	@ 0x30
 801aebe:	4b0d      	ldr	r3, [pc, #52]	@ (801aef4 <std+0x68>)
 801aec0:	6224      	str	r4, [r4, #32]
 801aec2:	429c      	cmp	r4, r3
 801aec4:	d006      	beq.n	801aed4 <std+0x48>
 801aec6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801aeca:	4294      	cmp	r4, r2
 801aecc:	d002      	beq.n	801aed4 <std+0x48>
 801aece:	33d0      	adds	r3, #208	@ 0xd0
 801aed0:	429c      	cmp	r4, r3
 801aed2:	d105      	bne.n	801aee0 <std+0x54>
 801aed4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801aed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aedc:	f000 bb74 	b.w	801b5c8 <__retarget_lock_init_recursive>
 801aee0:	bd10      	pop	{r4, pc}
 801aee2:	bf00      	nop
 801aee4:	0801b12d 	.word	0x0801b12d
 801aee8:	0801b14f 	.word	0x0801b14f
 801aeec:	0801b187 	.word	0x0801b187
 801aef0:	0801b1ab 	.word	0x0801b1ab
 801aef4:	2406871c 	.word	0x2406871c

0801aef8 <stdio_exit_handler>:
 801aef8:	4a02      	ldr	r2, [pc, #8]	@ (801af04 <stdio_exit_handler+0xc>)
 801aefa:	4903      	ldr	r1, [pc, #12]	@ (801af08 <stdio_exit_handler+0x10>)
 801aefc:	4803      	ldr	r0, [pc, #12]	@ (801af0c <stdio_exit_handler+0x14>)
 801aefe:	f000 b869 	b.w	801afd4 <_fwalk_sglue>
 801af02:	bf00      	nop
 801af04:	24000288 	.word	0x24000288
 801af08:	0801bdc9 	.word	0x0801bdc9
 801af0c:	24000298 	.word	0x24000298

0801af10 <cleanup_stdio>:
 801af10:	6841      	ldr	r1, [r0, #4]
 801af12:	4b0c      	ldr	r3, [pc, #48]	@ (801af44 <cleanup_stdio+0x34>)
 801af14:	4299      	cmp	r1, r3
 801af16:	b510      	push	{r4, lr}
 801af18:	4604      	mov	r4, r0
 801af1a:	d001      	beq.n	801af20 <cleanup_stdio+0x10>
 801af1c:	f000 ff54 	bl	801bdc8 <_fflush_r>
 801af20:	68a1      	ldr	r1, [r4, #8]
 801af22:	4b09      	ldr	r3, [pc, #36]	@ (801af48 <cleanup_stdio+0x38>)
 801af24:	4299      	cmp	r1, r3
 801af26:	d002      	beq.n	801af2e <cleanup_stdio+0x1e>
 801af28:	4620      	mov	r0, r4
 801af2a:	f000 ff4d 	bl	801bdc8 <_fflush_r>
 801af2e:	68e1      	ldr	r1, [r4, #12]
 801af30:	4b06      	ldr	r3, [pc, #24]	@ (801af4c <cleanup_stdio+0x3c>)
 801af32:	4299      	cmp	r1, r3
 801af34:	d004      	beq.n	801af40 <cleanup_stdio+0x30>
 801af36:	4620      	mov	r0, r4
 801af38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af3c:	f000 bf44 	b.w	801bdc8 <_fflush_r>
 801af40:	bd10      	pop	{r4, pc}
 801af42:	bf00      	nop
 801af44:	2406871c 	.word	0x2406871c
 801af48:	24068784 	.word	0x24068784
 801af4c:	240687ec 	.word	0x240687ec

0801af50 <global_stdio_init.part.0>:
 801af50:	b510      	push	{r4, lr}
 801af52:	4b0b      	ldr	r3, [pc, #44]	@ (801af80 <global_stdio_init.part.0+0x30>)
 801af54:	4c0b      	ldr	r4, [pc, #44]	@ (801af84 <global_stdio_init.part.0+0x34>)
 801af56:	4a0c      	ldr	r2, [pc, #48]	@ (801af88 <global_stdio_init.part.0+0x38>)
 801af58:	601a      	str	r2, [r3, #0]
 801af5a:	4620      	mov	r0, r4
 801af5c:	2200      	movs	r2, #0
 801af5e:	2104      	movs	r1, #4
 801af60:	f7ff ff94 	bl	801ae8c <std>
 801af64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801af68:	2201      	movs	r2, #1
 801af6a:	2109      	movs	r1, #9
 801af6c:	f7ff ff8e 	bl	801ae8c <std>
 801af70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801af74:	2202      	movs	r2, #2
 801af76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af7a:	2112      	movs	r1, #18
 801af7c:	f7ff bf86 	b.w	801ae8c <std>
 801af80:	24068854 	.word	0x24068854
 801af84:	2406871c 	.word	0x2406871c
 801af88:	0801aef9 	.word	0x0801aef9

0801af8c <__sfp_lock_acquire>:
 801af8c:	4801      	ldr	r0, [pc, #4]	@ (801af94 <__sfp_lock_acquire+0x8>)
 801af8e:	f000 bb1c 	b.w	801b5ca <__retarget_lock_acquire_recursive>
 801af92:	bf00      	nop
 801af94:	2406885e 	.word	0x2406885e

0801af98 <__sfp_lock_release>:
 801af98:	4801      	ldr	r0, [pc, #4]	@ (801afa0 <__sfp_lock_release+0x8>)
 801af9a:	f000 bb17 	b.w	801b5cc <__retarget_lock_release_recursive>
 801af9e:	bf00      	nop
 801afa0:	2406885e 	.word	0x2406885e

0801afa4 <__sinit>:
 801afa4:	b510      	push	{r4, lr}
 801afa6:	4604      	mov	r4, r0
 801afa8:	f7ff fff0 	bl	801af8c <__sfp_lock_acquire>
 801afac:	6a23      	ldr	r3, [r4, #32]
 801afae:	b11b      	cbz	r3, 801afb8 <__sinit+0x14>
 801afb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801afb4:	f7ff bff0 	b.w	801af98 <__sfp_lock_release>
 801afb8:	4b04      	ldr	r3, [pc, #16]	@ (801afcc <__sinit+0x28>)
 801afba:	6223      	str	r3, [r4, #32]
 801afbc:	4b04      	ldr	r3, [pc, #16]	@ (801afd0 <__sinit+0x2c>)
 801afbe:	681b      	ldr	r3, [r3, #0]
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d1f5      	bne.n	801afb0 <__sinit+0xc>
 801afc4:	f7ff ffc4 	bl	801af50 <global_stdio_init.part.0>
 801afc8:	e7f2      	b.n	801afb0 <__sinit+0xc>
 801afca:	bf00      	nop
 801afcc:	0801af11 	.word	0x0801af11
 801afd0:	24068854 	.word	0x24068854

0801afd4 <_fwalk_sglue>:
 801afd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801afd8:	4607      	mov	r7, r0
 801afda:	4688      	mov	r8, r1
 801afdc:	4614      	mov	r4, r2
 801afde:	2600      	movs	r6, #0
 801afe0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801afe4:	f1b9 0901 	subs.w	r9, r9, #1
 801afe8:	d505      	bpl.n	801aff6 <_fwalk_sglue+0x22>
 801afea:	6824      	ldr	r4, [r4, #0]
 801afec:	2c00      	cmp	r4, #0
 801afee:	d1f7      	bne.n	801afe0 <_fwalk_sglue+0xc>
 801aff0:	4630      	mov	r0, r6
 801aff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aff6:	89ab      	ldrh	r3, [r5, #12]
 801aff8:	2b01      	cmp	r3, #1
 801affa:	d907      	bls.n	801b00c <_fwalk_sglue+0x38>
 801affc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b000:	3301      	adds	r3, #1
 801b002:	d003      	beq.n	801b00c <_fwalk_sglue+0x38>
 801b004:	4629      	mov	r1, r5
 801b006:	4638      	mov	r0, r7
 801b008:	47c0      	blx	r8
 801b00a:	4306      	orrs	r6, r0
 801b00c:	3568      	adds	r5, #104	@ 0x68
 801b00e:	e7e9      	b.n	801afe4 <_fwalk_sglue+0x10>

0801b010 <_fwrite_r>:
 801b010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b014:	9c08      	ldr	r4, [sp, #32]
 801b016:	468a      	mov	sl, r1
 801b018:	4690      	mov	r8, r2
 801b01a:	fb02 f903 	mul.w	r9, r2, r3
 801b01e:	4606      	mov	r6, r0
 801b020:	b118      	cbz	r0, 801b02a <_fwrite_r+0x1a>
 801b022:	6a03      	ldr	r3, [r0, #32]
 801b024:	b90b      	cbnz	r3, 801b02a <_fwrite_r+0x1a>
 801b026:	f7ff ffbd 	bl	801afa4 <__sinit>
 801b02a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b02c:	07dd      	lsls	r5, r3, #31
 801b02e:	d405      	bmi.n	801b03c <_fwrite_r+0x2c>
 801b030:	89a3      	ldrh	r3, [r4, #12]
 801b032:	0598      	lsls	r0, r3, #22
 801b034:	d402      	bmi.n	801b03c <_fwrite_r+0x2c>
 801b036:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b038:	f000 fac7 	bl	801b5ca <__retarget_lock_acquire_recursive>
 801b03c:	89a3      	ldrh	r3, [r4, #12]
 801b03e:	0719      	lsls	r1, r3, #28
 801b040:	d516      	bpl.n	801b070 <_fwrite_r+0x60>
 801b042:	6923      	ldr	r3, [r4, #16]
 801b044:	b1a3      	cbz	r3, 801b070 <_fwrite_r+0x60>
 801b046:	2500      	movs	r5, #0
 801b048:	454d      	cmp	r5, r9
 801b04a:	d01f      	beq.n	801b08c <_fwrite_r+0x7c>
 801b04c:	68a7      	ldr	r7, [r4, #8]
 801b04e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801b052:	3f01      	subs	r7, #1
 801b054:	2f00      	cmp	r7, #0
 801b056:	60a7      	str	r7, [r4, #8]
 801b058:	da04      	bge.n	801b064 <_fwrite_r+0x54>
 801b05a:	69a3      	ldr	r3, [r4, #24]
 801b05c:	429f      	cmp	r7, r3
 801b05e:	db0f      	blt.n	801b080 <_fwrite_r+0x70>
 801b060:	290a      	cmp	r1, #10
 801b062:	d00d      	beq.n	801b080 <_fwrite_r+0x70>
 801b064:	6823      	ldr	r3, [r4, #0]
 801b066:	1c5a      	adds	r2, r3, #1
 801b068:	6022      	str	r2, [r4, #0]
 801b06a:	7019      	strb	r1, [r3, #0]
 801b06c:	3501      	adds	r5, #1
 801b06e:	e7eb      	b.n	801b048 <_fwrite_r+0x38>
 801b070:	4621      	mov	r1, r4
 801b072:	4630      	mov	r0, r6
 801b074:	f000 f914 	bl	801b2a0 <__swsetup_r>
 801b078:	2800      	cmp	r0, #0
 801b07a:	d0e4      	beq.n	801b046 <_fwrite_r+0x36>
 801b07c:	2500      	movs	r5, #0
 801b07e:	e005      	b.n	801b08c <_fwrite_r+0x7c>
 801b080:	4622      	mov	r2, r4
 801b082:	4630      	mov	r0, r6
 801b084:	f000 f8ce 	bl	801b224 <__swbuf_r>
 801b088:	3001      	adds	r0, #1
 801b08a:	d1ef      	bne.n	801b06c <_fwrite_r+0x5c>
 801b08c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b08e:	07da      	lsls	r2, r3, #31
 801b090:	d405      	bmi.n	801b09e <_fwrite_r+0x8e>
 801b092:	89a3      	ldrh	r3, [r4, #12]
 801b094:	059b      	lsls	r3, r3, #22
 801b096:	d402      	bmi.n	801b09e <_fwrite_r+0x8e>
 801b098:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b09a:	f000 fa97 	bl	801b5cc <__retarget_lock_release_recursive>
 801b09e:	fbb5 f0f8 	udiv	r0, r5, r8
 801b0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801b0a8 <fwrite>:
 801b0a8:	b507      	push	{r0, r1, r2, lr}
 801b0aa:	9300      	str	r3, [sp, #0]
 801b0ac:	4613      	mov	r3, r2
 801b0ae:	460a      	mov	r2, r1
 801b0b0:	4601      	mov	r1, r0
 801b0b2:	4803      	ldr	r0, [pc, #12]	@ (801b0c0 <fwrite+0x18>)
 801b0b4:	6800      	ldr	r0, [r0, #0]
 801b0b6:	f7ff ffab 	bl	801b010 <_fwrite_r>
 801b0ba:	b003      	add	sp, #12
 801b0bc:	f85d fb04 	ldr.w	pc, [sp], #4
 801b0c0:	24000294 	.word	0x24000294

0801b0c4 <sniprintf>:
 801b0c4:	b40c      	push	{r2, r3}
 801b0c6:	b530      	push	{r4, r5, lr}
 801b0c8:	4b17      	ldr	r3, [pc, #92]	@ (801b128 <sniprintf+0x64>)
 801b0ca:	1e0c      	subs	r4, r1, #0
 801b0cc:	681d      	ldr	r5, [r3, #0]
 801b0ce:	b09d      	sub	sp, #116	@ 0x74
 801b0d0:	da08      	bge.n	801b0e4 <sniprintf+0x20>
 801b0d2:	238b      	movs	r3, #139	@ 0x8b
 801b0d4:	602b      	str	r3, [r5, #0]
 801b0d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b0da:	b01d      	add	sp, #116	@ 0x74
 801b0dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b0e0:	b002      	add	sp, #8
 801b0e2:	4770      	bx	lr
 801b0e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b0e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b0ec:	bf14      	ite	ne
 801b0ee:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801b0f2:	4623      	moveq	r3, r4
 801b0f4:	9304      	str	r3, [sp, #16]
 801b0f6:	9307      	str	r3, [sp, #28]
 801b0f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b0fc:	9002      	str	r0, [sp, #8]
 801b0fe:	9006      	str	r0, [sp, #24]
 801b100:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b104:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b106:	ab21      	add	r3, sp, #132	@ 0x84
 801b108:	a902      	add	r1, sp, #8
 801b10a:	4628      	mov	r0, r5
 801b10c:	9301      	str	r3, [sp, #4]
 801b10e:	f000 fb4d 	bl	801b7ac <_svfiprintf_r>
 801b112:	1c43      	adds	r3, r0, #1
 801b114:	bfbc      	itt	lt
 801b116:	238b      	movlt	r3, #139	@ 0x8b
 801b118:	602b      	strlt	r3, [r5, #0]
 801b11a:	2c00      	cmp	r4, #0
 801b11c:	d0dd      	beq.n	801b0da <sniprintf+0x16>
 801b11e:	9b02      	ldr	r3, [sp, #8]
 801b120:	2200      	movs	r2, #0
 801b122:	701a      	strb	r2, [r3, #0]
 801b124:	e7d9      	b.n	801b0da <sniprintf+0x16>
 801b126:	bf00      	nop
 801b128:	24000294 	.word	0x24000294

0801b12c <__sread>:
 801b12c:	b510      	push	{r4, lr}
 801b12e:	460c      	mov	r4, r1
 801b130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b134:	f000 f9ea 	bl	801b50c <_read_r>
 801b138:	2800      	cmp	r0, #0
 801b13a:	bfab      	itete	ge
 801b13c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b13e:	89a3      	ldrhlt	r3, [r4, #12]
 801b140:	181b      	addge	r3, r3, r0
 801b142:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b146:	bfac      	ite	ge
 801b148:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b14a:	81a3      	strhlt	r3, [r4, #12]
 801b14c:	bd10      	pop	{r4, pc}

0801b14e <__swrite>:
 801b14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b152:	461f      	mov	r7, r3
 801b154:	898b      	ldrh	r3, [r1, #12]
 801b156:	05db      	lsls	r3, r3, #23
 801b158:	4605      	mov	r5, r0
 801b15a:	460c      	mov	r4, r1
 801b15c:	4616      	mov	r6, r2
 801b15e:	d505      	bpl.n	801b16c <__swrite+0x1e>
 801b160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b164:	2302      	movs	r3, #2
 801b166:	2200      	movs	r2, #0
 801b168:	f000 f9be 	bl	801b4e8 <_lseek_r>
 801b16c:	89a3      	ldrh	r3, [r4, #12]
 801b16e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b172:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b176:	81a3      	strh	r3, [r4, #12]
 801b178:	4632      	mov	r2, r6
 801b17a:	463b      	mov	r3, r7
 801b17c:	4628      	mov	r0, r5
 801b17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b182:	f000 b9e5 	b.w	801b550 <_write_r>

0801b186 <__sseek>:
 801b186:	b510      	push	{r4, lr}
 801b188:	460c      	mov	r4, r1
 801b18a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b18e:	f000 f9ab 	bl	801b4e8 <_lseek_r>
 801b192:	1c43      	adds	r3, r0, #1
 801b194:	89a3      	ldrh	r3, [r4, #12]
 801b196:	bf15      	itete	ne
 801b198:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b19a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b19e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b1a2:	81a3      	strheq	r3, [r4, #12]
 801b1a4:	bf18      	it	ne
 801b1a6:	81a3      	strhne	r3, [r4, #12]
 801b1a8:	bd10      	pop	{r4, pc}

0801b1aa <__sclose>:
 801b1aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b1ae:	f000 b935 	b.w	801b41c <_close_r>

0801b1b2 <_vsniprintf_r>:
 801b1b2:	b530      	push	{r4, r5, lr}
 801b1b4:	4614      	mov	r4, r2
 801b1b6:	2c00      	cmp	r4, #0
 801b1b8:	b09b      	sub	sp, #108	@ 0x6c
 801b1ba:	4605      	mov	r5, r0
 801b1bc:	461a      	mov	r2, r3
 801b1be:	da05      	bge.n	801b1cc <_vsniprintf_r+0x1a>
 801b1c0:	238b      	movs	r3, #139	@ 0x8b
 801b1c2:	6003      	str	r3, [r0, #0]
 801b1c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b1c8:	b01b      	add	sp, #108	@ 0x6c
 801b1ca:	bd30      	pop	{r4, r5, pc}
 801b1cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b1d0:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b1d4:	bf14      	ite	ne
 801b1d6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801b1da:	4623      	moveq	r3, r4
 801b1dc:	9302      	str	r3, [sp, #8]
 801b1de:	9305      	str	r3, [sp, #20]
 801b1e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b1e4:	9100      	str	r1, [sp, #0]
 801b1e6:	9104      	str	r1, [sp, #16]
 801b1e8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b1ec:	4669      	mov	r1, sp
 801b1ee:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b1f0:	f000 fadc 	bl	801b7ac <_svfiprintf_r>
 801b1f4:	1c43      	adds	r3, r0, #1
 801b1f6:	bfbc      	itt	lt
 801b1f8:	238b      	movlt	r3, #139	@ 0x8b
 801b1fa:	602b      	strlt	r3, [r5, #0]
 801b1fc:	2c00      	cmp	r4, #0
 801b1fe:	d0e3      	beq.n	801b1c8 <_vsniprintf_r+0x16>
 801b200:	9b00      	ldr	r3, [sp, #0]
 801b202:	2200      	movs	r2, #0
 801b204:	701a      	strb	r2, [r3, #0]
 801b206:	e7df      	b.n	801b1c8 <_vsniprintf_r+0x16>

0801b208 <vsniprintf>:
 801b208:	b507      	push	{r0, r1, r2, lr}
 801b20a:	9300      	str	r3, [sp, #0]
 801b20c:	4613      	mov	r3, r2
 801b20e:	460a      	mov	r2, r1
 801b210:	4601      	mov	r1, r0
 801b212:	4803      	ldr	r0, [pc, #12]	@ (801b220 <vsniprintf+0x18>)
 801b214:	6800      	ldr	r0, [r0, #0]
 801b216:	f7ff ffcc 	bl	801b1b2 <_vsniprintf_r>
 801b21a:	b003      	add	sp, #12
 801b21c:	f85d fb04 	ldr.w	pc, [sp], #4
 801b220:	24000294 	.word	0x24000294

0801b224 <__swbuf_r>:
 801b224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b226:	460e      	mov	r6, r1
 801b228:	4614      	mov	r4, r2
 801b22a:	4605      	mov	r5, r0
 801b22c:	b118      	cbz	r0, 801b236 <__swbuf_r+0x12>
 801b22e:	6a03      	ldr	r3, [r0, #32]
 801b230:	b90b      	cbnz	r3, 801b236 <__swbuf_r+0x12>
 801b232:	f7ff feb7 	bl	801afa4 <__sinit>
 801b236:	69a3      	ldr	r3, [r4, #24]
 801b238:	60a3      	str	r3, [r4, #8]
 801b23a:	89a3      	ldrh	r3, [r4, #12]
 801b23c:	071a      	lsls	r2, r3, #28
 801b23e:	d501      	bpl.n	801b244 <__swbuf_r+0x20>
 801b240:	6923      	ldr	r3, [r4, #16]
 801b242:	b943      	cbnz	r3, 801b256 <__swbuf_r+0x32>
 801b244:	4621      	mov	r1, r4
 801b246:	4628      	mov	r0, r5
 801b248:	f000 f82a 	bl	801b2a0 <__swsetup_r>
 801b24c:	b118      	cbz	r0, 801b256 <__swbuf_r+0x32>
 801b24e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801b252:	4638      	mov	r0, r7
 801b254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b256:	6823      	ldr	r3, [r4, #0]
 801b258:	6922      	ldr	r2, [r4, #16]
 801b25a:	1a98      	subs	r0, r3, r2
 801b25c:	6963      	ldr	r3, [r4, #20]
 801b25e:	b2f6      	uxtb	r6, r6
 801b260:	4283      	cmp	r3, r0
 801b262:	4637      	mov	r7, r6
 801b264:	dc05      	bgt.n	801b272 <__swbuf_r+0x4e>
 801b266:	4621      	mov	r1, r4
 801b268:	4628      	mov	r0, r5
 801b26a:	f000 fdad 	bl	801bdc8 <_fflush_r>
 801b26e:	2800      	cmp	r0, #0
 801b270:	d1ed      	bne.n	801b24e <__swbuf_r+0x2a>
 801b272:	68a3      	ldr	r3, [r4, #8]
 801b274:	3b01      	subs	r3, #1
 801b276:	60a3      	str	r3, [r4, #8]
 801b278:	6823      	ldr	r3, [r4, #0]
 801b27a:	1c5a      	adds	r2, r3, #1
 801b27c:	6022      	str	r2, [r4, #0]
 801b27e:	701e      	strb	r6, [r3, #0]
 801b280:	6962      	ldr	r2, [r4, #20]
 801b282:	1c43      	adds	r3, r0, #1
 801b284:	429a      	cmp	r2, r3
 801b286:	d004      	beq.n	801b292 <__swbuf_r+0x6e>
 801b288:	89a3      	ldrh	r3, [r4, #12]
 801b28a:	07db      	lsls	r3, r3, #31
 801b28c:	d5e1      	bpl.n	801b252 <__swbuf_r+0x2e>
 801b28e:	2e0a      	cmp	r6, #10
 801b290:	d1df      	bne.n	801b252 <__swbuf_r+0x2e>
 801b292:	4621      	mov	r1, r4
 801b294:	4628      	mov	r0, r5
 801b296:	f000 fd97 	bl	801bdc8 <_fflush_r>
 801b29a:	2800      	cmp	r0, #0
 801b29c:	d0d9      	beq.n	801b252 <__swbuf_r+0x2e>
 801b29e:	e7d6      	b.n	801b24e <__swbuf_r+0x2a>

0801b2a0 <__swsetup_r>:
 801b2a0:	b538      	push	{r3, r4, r5, lr}
 801b2a2:	4b29      	ldr	r3, [pc, #164]	@ (801b348 <__swsetup_r+0xa8>)
 801b2a4:	4605      	mov	r5, r0
 801b2a6:	6818      	ldr	r0, [r3, #0]
 801b2a8:	460c      	mov	r4, r1
 801b2aa:	b118      	cbz	r0, 801b2b4 <__swsetup_r+0x14>
 801b2ac:	6a03      	ldr	r3, [r0, #32]
 801b2ae:	b90b      	cbnz	r3, 801b2b4 <__swsetup_r+0x14>
 801b2b0:	f7ff fe78 	bl	801afa4 <__sinit>
 801b2b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b2b8:	0719      	lsls	r1, r3, #28
 801b2ba:	d422      	bmi.n	801b302 <__swsetup_r+0x62>
 801b2bc:	06da      	lsls	r2, r3, #27
 801b2be:	d407      	bmi.n	801b2d0 <__swsetup_r+0x30>
 801b2c0:	2209      	movs	r2, #9
 801b2c2:	602a      	str	r2, [r5, #0]
 801b2c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b2c8:	81a3      	strh	r3, [r4, #12]
 801b2ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b2ce:	e033      	b.n	801b338 <__swsetup_r+0x98>
 801b2d0:	0758      	lsls	r0, r3, #29
 801b2d2:	d512      	bpl.n	801b2fa <__swsetup_r+0x5a>
 801b2d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b2d6:	b141      	cbz	r1, 801b2ea <__swsetup_r+0x4a>
 801b2d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b2dc:	4299      	cmp	r1, r3
 801b2de:	d002      	beq.n	801b2e6 <__swsetup_r+0x46>
 801b2e0:	4628      	mov	r0, r5
 801b2e2:	f000 f9b5 	bl	801b650 <_free_r>
 801b2e6:	2300      	movs	r3, #0
 801b2e8:	6363      	str	r3, [r4, #52]	@ 0x34
 801b2ea:	89a3      	ldrh	r3, [r4, #12]
 801b2ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b2f0:	81a3      	strh	r3, [r4, #12]
 801b2f2:	2300      	movs	r3, #0
 801b2f4:	6063      	str	r3, [r4, #4]
 801b2f6:	6923      	ldr	r3, [r4, #16]
 801b2f8:	6023      	str	r3, [r4, #0]
 801b2fa:	89a3      	ldrh	r3, [r4, #12]
 801b2fc:	f043 0308 	orr.w	r3, r3, #8
 801b300:	81a3      	strh	r3, [r4, #12]
 801b302:	6923      	ldr	r3, [r4, #16]
 801b304:	b94b      	cbnz	r3, 801b31a <__swsetup_r+0x7a>
 801b306:	89a3      	ldrh	r3, [r4, #12]
 801b308:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b30c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b310:	d003      	beq.n	801b31a <__swsetup_r+0x7a>
 801b312:	4621      	mov	r1, r4
 801b314:	4628      	mov	r0, r5
 801b316:	f000 fdb7 	bl	801be88 <__smakebuf_r>
 801b31a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b31e:	f013 0201 	ands.w	r2, r3, #1
 801b322:	d00a      	beq.n	801b33a <__swsetup_r+0x9a>
 801b324:	2200      	movs	r2, #0
 801b326:	60a2      	str	r2, [r4, #8]
 801b328:	6962      	ldr	r2, [r4, #20]
 801b32a:	4252      	negs	r2, r2
 801b32c:	61a2      	str	r2, [r4, #24]
 801b32e:	6922      	ldr	r2, [r4, #16]
 801b330:	b942      	cbnz	r2, 801b344 <__swsetup_r+0xa4>
 801b332:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b336:	d1c5      	bne.n	801b2c4 <__swsetup_r+0x24>
 801b338:	bd38      	pop	{r3, r4, r5, pc}
 801b33a:	0799      	lsls	r1, r3, #30
 801b33c:	bf58      	it	pl
 801b33e:	6962      	ldrpl	r2, [r4, #20]
 801b340:	60a2      	str	r2, [r4, #8]
 801b342:	e7f4      	b.n	801b32e <__swsetup_r+0x8e>
 801b344:	2000      	movs	r0, #0
 801b346:	e7f7      	b.n	801b338 <__swsetup_r+0x98>
 801b348:	24000294 	.word	0x24000294

0801b34c <memcmp>:
 801b34c:	b510      	push	{r4, lr}
 801b34e:	3901      	subs	r1, #1
 801b350:	4402      	add	r2, r0
 801b352:	4290      	cmp	r0, r2
 801b354:	d101      	bne.n	801b35a <memcmp+0xe>
 801b356:	2000      	movs	r0, #0
 801b358:	e005      	b.n	801b366 <memcmp+0x1a>
 801b35a:	7803      	ldrb	r3, [r0, #0]
 801b35c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b360:	42a3      	cmp	r3, r4
 801b362:	d001      	beq.n	801b368 <memcmp+0x1c>
 801b364:	1b18      	subs	r0, r3, r4
 801b366:	bd10      	pop	{r4, pc}
 801b368:	3001      	adds	r0, #1
 801b36a:	e7f2      	b.n	801b352 <memcmp+0x6>

0801b36c <memmove>:
 801b36c:	4288      	cmp	r0, r1
 801b36e:	b510      	push	{r4, lr}
 801b370:	eb01 0402 	add.w	r4, r1, r2
 801b374:	d902      	bls.n	801b37c <memmove+0x10>
 801b376:	4284      	cmp	r4, r0
 801b378:	4623      	mov	r3, r4
 801b37a:	d807      	bhi.n	801b38c <memmove+0x20>
 801b37c:	1e43      	subs	r3, r0, #1
 801b37e:	42a1      	cmp	r1, r4
 801b380:	d008      	beq.n	801b394 <memmove+0x28>
 801b382:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b386:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b38a:	e7f8      	b.n	801b37e <memmove+0x12>
 801b38c:	4402      	add	r2, r0
 801b38e:	4601      	mov	r1, r0
 801b390:	428a      	cmp	r2, r1
 801b392:	d100      	bne.n	801b396 <memmove+0x2a>
 801b394:	bd10      	pop	{r4, pc}
 801b396:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b39a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b39e:	e7f7      	b.n	801b390 <memmove+0x24>

0801b3a0 <memset>:
 801b3a0:	4402      	add	r2, r0
 801b3a2:	4603      	mov	r3, r0
 801b3a4:	4293      	cmp	r3, r2
 801b3a6:	d100      	bne.n	801b3aa <memset+0xa>
 801b3a8:	4770      	bx	lr
 801b3aa:	f803 1b01 	strb.w	r1, [r3], #1
 801b3ae:	e7f9      	b.n	801b3a4 <memset+0x4>

0801b3b0 <strchr>:
 801b3b0:	b2c9      	uxtb	r1, r1
 801b3b2:	4603      	mov	r3, r0
 801b3b4:	4618      	mov	r0, r3
 801b3b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b3ba:	b112      	cbz	r2, 801b3c2 <strchr+0x12>
 801b3bc:	428a      	cmp	r2, r1
 801b3be:	d1f9      	bne.n	801b3b4 <strchr+0x4>
 801b3c0:	4770      	bx	lr
 801b3c2:	2900      	cmp	r1, #0
 801b3c4:	bf18      	it	ne
 801b3c6:	2000      	movne	r0, #0
 801b3c8:	4770      	bx	lr

0801b3ca <strncmp>:
 801b3ca:	b510      	push	{r4, lr}
 801b3cc:	b16a      	cbz	r2, 801b3ea <strncmp+0x20>
 801b3ce:	3901      	subs	r1, #1
 801b3d0:	1884      	adds	r4, r0, r2
 801b3d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b3d6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b3da:	429a      	cmp	r2, r3
 801b3dc:	d103      	bne.n	801b3e6 <strncmp+0x1c>
 801b3de:	42a0      	cmp	r0, r4
 801b3e0:	d001      	beq.n	801b3e6 <strncmp+0x1c>
 801b3e2:	2a00      	cmp	r2, #0
 801b3e4:	d1f5      	bne.n	801b3d2 <strncmp+0x8>
 801b3e6:	1ad0      	subs	r0, r2, r3
 801b3e8:	bd10      	pop	{r4, pc}
 801b3ea:	4610      	mov	r0, r2
 801b3ec:	e7fc      	b.n	801b3e8 <strncmp+0x1e>

0801b3ee <strstr>:
 801b3ee:	780a      	ldrb	r2, [r1, #0]
 801b3f0:	b570      	push	{r4, r5, r6, lr}
 801b3f2:	b96a      	cbnz	r2, 801b410 <strstr+0x22>
 801b3f4:	bd70      	pop	{r4, r5, r6, pc}
 801b3f6:	429a      	cmp	r2, r3
 801b3f8:	d109      	bne.n	801b40e <strstr+0x20>
 801b3fa:	460c      	mov	r4, r1
 801b3fc:	4605      	mov	r5, r0
 801b3fe:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b402:	2b00      	cmp	r3, #0
 801b404:	d0f6      	beq.n	801b3f4 <strstr+0x6>
 801b406:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b40a:	429e      	cmp	r6, r3
 801b40c:	d0f7      	beq.n	801b3fe <strstr+0x10>
 801b40e:	3001      	adds	r0, #1
 801b410:	7803      	ldrb	r3, [r0, #0]
 801b412:	2b00      	cmp	r3, #0
 801b414:	d1ef      	bne.n	801b3f6 <strstr+0x8>
 801b416:	4618      	mov	r0, r3
 801b418:	e7ec      	b.n	801b3f4 <strstr+0x6>
	...

0801b41c <_close_r>:
 801b41c:	b538      	push	{r3, r4, r5, lr}
 801b41e:	4d06      	ldr	r5, [pc, #24]	@ (801b438 <_close_r+0x1c>)
 801b420:	2300      	movs	r3, #0
 801b422:	4604      	mov	r4, r0
 801b424:	4608      	mov	r0, r1
 801b426:	602b      	str	r3, [r5, #0]
 801b428:	f7e6 fb58 	bl	8001adc <_close>
 801b42c:	1c43      	adds	r3, r0, #1
 801b42e:	d102      	bne.n	801b436 <_close_r+0x1a>
 801b430:	682b      	ldr	r3, [r5, #0]
 801b432:	b103      	cbz	r3, 801b436 <_close_r+0x1a>
 801b434:	6023      	str	r3, [r4, #0]
 801b436:	bd38      	pop	{r3, r4, r5, pc}
 801b438:	24068858 	.word	0x24068858

0801b43c <_reclaim_reent>:
 801b43c:	4b29      	ldr	r3, [pc, #164]	@ (801b4e4 <_reclaim_reent+0xa8>)
 801b43e:	681b      	ldr	r3, [r3, #0]
 801b440:	4283      	cmp	r3, r0
 801b442:	b570      	push	{r4, r5, r6, lr}
 801b444:	4604      	mov	r4, r0
 801b446:	d04b      	beq.n	801b4e0 <_reclaim_reent+0xa4>
 801b448:	69c3      	ldr	r3, [r0, #28]
 801b44a:	b1ab      	cbz	r3, 801b478 <_reclaim_reent+0x3c>
 801b44c:	68db      	ldr	r3, [r3, #12]
 801b44e:	b16b      	cbz	r3, 801b46c <_reclaim_reent+0x30>
 801b450:	2500      	movs	r5, #0
 801b452:	69e3      	ldr	r3, [r4, #28]
 801b454:	68db      	ldr	r3, [r3, #12]
 801b456:	5959      	ldr	r1, [r3, r5]
 801b458:	2900      	cmp	r1, #0
 801b45a:	d13b      	bne.n	801b4d4 <_reclaim_reent+0x98>
 801b45c:	3504      	adds	r5, #4
 801b45e:	2d80      	cmp	r5, #128	@ 0x80
 801b460:	d1f7      	bne.n	801b452 <_reclaim_reent+0x16>
 801b462:	69e3      	ldr	r3, [r4, #28]
 801b464:	4620      	mov	r0, r4
 801b466:	68d9      	ldr	r1, [r3, #12]
 801b468:	f000 f8f2 	bl	801b650 <_free_r>
 801b46c:	69e3      	ldr	r3, [r4, #28]
 801b46e:	6819      	ldr	r1, [r3, #0]
 801b470:	b111      	cbz	r1, 801b478 <_reclaim_reent+0x3c>
 801b472:	4620      	mov	r0, r4
 801b474:	f000 f8ec 	bl	801b650 <_free_r>
 801b478:	6961      	ldr	r1, [r4, #20]
 801b47a:	b111      	cbz	r1, 801b482 <_reclaim_reent+0x46>
 801b47c:	4620      	mov	r0, r4
 801b47e:	f000 f8e7 	bl	801b650 <_free_r>
 801b482:	69e1      	ldr	r1, [r4, #28]
 801b484:	b111      	cbz	r1, 801b48c <_reclaim_reent+0x50>
 801b486:	4620      	mov	r0, r4
 801b488:	f000 f8e2 	bl	801b650 <_free_r>
 801b48c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b48e:	b111      	cbz	r1, 801b496 <_reclaim_reent+0x5a>
 801b490:	4620      	mov	r0, r4
 801b492:	f000 f8dd 	bl	801b650 <_free_r>
 801b496:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b498:	b111      	cbz	r1, 801b4a0 <_reclaim_reent+0x64>
 801b49a:	4620      	mov	r0, r4
 801b49c:	f000 f8d8 	bl	801b650 <_free_r>
 801b4a0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801b4a2:	b111      	cbz	r1, 801b4aa <_reclaim_reent+0x6e>
 801b4a4:	4620      	mov	r0, r4
 801b4a6:	f000 f8d3 	bl	801b650 <_free_r>
 801b4aa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801b4ac:	b111      	cbz	r1, 801b4b4 <_reclaim_reent+0x78>
 801b4ae:	4620      	mov	r0, r4
 801b4b0:	f000 f8ce 	bl	801b650 <_free_r>
 801b4b4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801b4b6:	b111      	cbz	r1, 801b4be <_reclaim_reent+0x82>
 801b4b8:	4620      	mov	r0, r4
 801b4ba:	f000 f8c9 	bl	801b650 <_free_r>
 801b4be:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801b4c0:	b111      	cbz	r1, 801b4c8 <_reclaim_reent+0x8c>
 801b4c2:	4620      	mov	r0, r4
 801b4c4:	f000 f8c4 	bl	801b650 <_free_r>
 801b4c8:	6a23      	ldr	r3, [r4, #32]
 801b4ca:	b14b      	cbz	r3, 801b4e0 <_reclaim_reent+0xa4>
 801b4cc:	4620      	mov	r0, r4
 801b4ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b4d2:	4718      	bx	r3
 801b4d4:	680e      	ldr	r6, [r1, #0]
 801b4d6:	4620      	mov	r0, r4
 801b4d8:	f000 f8ba 	bl	801b650 <_free_r>
 801b4dc:	4631      	mov	r1, r6
 801b4de:	e7bb      	b.n	801b458 <_reclaim_reent+0x1c>
 801b4e0:	bd70      	pop	{r4, r5, r6, pc}
 801b4e2:	bf00      	nop
 801b4e4:	24000294 	.word	0x24000294

0801b4e8 <_lseek_r>:
 801b4e8:	b538      	push	{r3, r4, r5, lr}
 801b4ea:	4d07      	ldr	r5, [pc, #28]	@ (801b508 <_lseek_r+0x20>)
 801b4ec:	4604      	mov	r4, r0
 801b4ee:	4608      	mov	r0, r1
 801b4f0:	4611      	mov	r1, r2
 801b4f2:	2200      	movs	r2, #0
 801b4f4:	602a      	str	r2, [r5, #0]
 801b4f6:	461a      	mov	r2, r3
 801b4f8:	f7e6 fb17 	bl	8001b2a <_lseek>
 801b4fc:	1c43      	adds	r3, r0, #1
 801b4fe:	d102      	bne.n	801b506 <_lseek_r+0x1e>
 801b500:	682b      	ldr	r3, [r5, #0]
 801b502:	b103      	cbz	r3, 801b506 <_lseek_r+0x1e>
 801b504:	6023      	str	r3, [r4, #0]
 801b506:	bd38      	pop	{r3, r4, r5, pc}
 801b508:	24068858 	.word	0x24068858

0801b50c <_read_r>:
 801b50c:	b538      	push	{r3, r4, r5, lr}
 801b50e:	4d07      	ldr	r5, [pc, #28]	@ (801b52c <_read_r+0x20>)
 801b510:	4604      	mov	r4, r0
 801b512:	4608      	mov	r0, r1
 801b514:	4611      	mov	r1, r2
 801b516:	2200      	movs	r2, #0
 801b518:	602a      	str	r2, [r5, #0]
 801b51a:	461a      	mov	r2, r3
 801b51c:	f7e6 faa5 	bl	8001a6a <_read>
 801b520:	1c43      	adds	r3, r0, #1
 801b522:	d102      	bne.n	801b52a <_read_r+0x1e>
 801b524:	682b      	ldr	r3, [r5, #0]
 801b526:	b103      	cbz	r3, 801b52a <_read_r+0x1e>
 801b528:	6023      	str	r3, [r4, #0]
 801b52a:	bd38      	pop	{r3, r4, r5, pc}
 801b52c:	24068858 	.word	0x24068858

0801b530 <_sbrk_r>:
 801b530:	b538      	push	{r3, r4, r5, lr}
 801b532:	4d06      	ldr	r5, [pc, #24]	@ (801b54c <_sbrk_r+0x1c>)
 801b534:	2300      	movs	r3, #0
 801b536:	4604      	mov	r4, r0
 801b538:	4608      	mov	r0, r1
 801b53a:	602b      	str	r3, [r5, #0]
 801b53c:	f7e6 fb02 	bl	8001b44 <_sbrk>
 801b540:	1c43      	adds	r3, r0, #1
 801b542:	d102      	bne.n	801b54a <_sbrk_r+0x1a>
 801b544:	682b      	ldr	r3, [r5, #0]
 801b546:	b103      	cbz	r3, 801b54a <_sbrk_r+0x1a>
 801b548:	6023      	str	r3, [r4, #0]
 801b54a:	bd38      	pop	{r3, r4, r5, pc}
 801b54c:	24068858 	.word	0x24068858

0801b550 <_write_r>:
 801b550:	b538      	push	{r3, r4, r5, lr}
 801b552:	4d07      	ldr	r5, [pc, #28]	@ (801b570 <_write_r+0x20>)
 801b554:	4604      	mov	r4, r0
 801b556:	4608      	mov	r0, r1
 801b558:	4611      	mov	r1, r2
 801b55a:	2200      	movs	r2, #0
 801b55c:	602a      	str	r2, [r5, #0]
 801b55e:	461a      	mov	r2, r3
 801b560:	f7e6 faa0 	bl	8001aa4 <_write>
 801b564:	1c43      	adds	r3, r0, #1
 801b566:	d102      	bne.n	801b56e <_write_r+0x1e>
 801b568:	682b      	ldr	r3, [r5, #0]
 801b56a:	b103      	cbz	r3, 801b56e <_write_r+0x1e>
 801b56c:	6023      	str	r3, [r4, #0]
 801b56e:	bd38      	pop	{r3, r4, r5, pc}
 801b570:	24068858 	.word	0x24068858

0801b574 <__errno>:
 801b574:	4b01      	ldr	r3, [pc, #4]	@ (801b57c <__errno+0x8>)
 801b576:	6818      	ldr	r0, [r3, #0]
 801b578:	4770      	bx	lr
 801b57a:	bf00      	nop
 801b57c:	24000294 	.word	0x24000294

0801b580 <__libc_init_array>:
 801b580:	b570      	push	{r4, r5, r6, lr}
 801b582:	4d0d      	ldr	r5, [pc, #52]	@ (801b5b8 <__libc_init_array+0x38>)
 801b584:	4c0d      	ldr	r4, [pc, #52]	@ (801b5bc <__libc_init_array+0x3c>)
 801b586:	1b64      	subs	r4, r4, r5
 801b588:	10a4      	asrs	r4, r4, #2
 801b58a:	2600      	movs	r6, #0
 801b58c:	42a6      	cmp	r6, r4
 801b58e:	d109      	bne.n	801b5a4 <__libc_init_array+0x24>
 801b590:	4d0b      	ldr	r5, [pc, #44]	@ (801b5c0 <__libc_init_array+0x40>)
 801b592:	4c0c      	ldr	r4, [pc, #48]	@ (801b5c4 <__libc_init_array+0x44>)
 801b594:	f000 fe62 	bl	801c25c <_init>
 801b598:	1b64      	subs	r4, r4, r5
 801b59a:	10a4      	asrs	r4, r4, #2
 801b59c:	2600      	movs	r6, #0
 801b59e:	42a6      	cmp	r6, r4
 801b5a0:	d105      	bne.n	801b5ae <__libc_init_array+0x2e>
 801b5a2:	bd70      	pop	{r4, r5, r6, pc}
 801b5a4:	f855 3b04 	ldr.w	r3, [r5], #4
 801b5a8:	4798      	blx	r3
 801b5aa:	3601      	adds	r6, #1
 801b5ac:	e7ee      	b.n	801b58c <__libc_init_array+0xc>
 801b5ae:	f855 3b04 	ldr.w	r3, [r5], #4
 801b5b2:	4798      	blx	r3
 801b5b4:	3601      	adds	r6, #1
 801b5b6:	e7f2      	b.n	801b59e <__libc_init_array+0x1e>
 801b5b8:	0801d150 	.word	0x0801d150
 801b5bc:	0801d150 	.word	0x0801d150
 801b5c0:	0801d150 	.word	0x0801d150
 801b5c4:	0801d158 	.word	0x0801d158

0801b5c8 <__retarget_lock_init_recursive>:
 801b5c8:	4770      	bx	lr

0801b5ca <__retarget_lock_acquire_recursive>:
 801b5ca:	4770      	bx	lr

0801b5cc <__retarget_lock_release_recursive>:
 801b5cc:	4770      	bx	lr

0801b5ce <strcpy>:
 801b5ce:	4603      	mov	r3, r0
 801b5d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b5d4:	f803 2b01 	strb.w	r2, [r3], #1
 801b5d8:	2a00      	cmp	r2, #0
 801b5da:	d1f9      	bne.n	801b5d0 <strcpy+0x2>
 801b5dc:	4770      	bx	lr

0801b5de <memcpy>:
 801b5de:	440a      	add	r2, r1
 801b5e0:	4291      	cmp	r1, r2
 801b5e2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801b5e6:	d100      	bne.n	801b5ea <memcpy+0xc>
 801b5e8:	4770      	bx	lr
 801b5ea:	b510      	push	{r4, lr}
 801b5ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b5f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b5f4:	4291      	cmp	r1, r2
 801b5f6:	d1f9      	bne.n	801b5ec <memcpy+0xe>
 801b5f8:	bd10      	pop	{r4, pc}
	...

0801b5fc <__assert_func>:
 801b5fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b5fe:	4614      	mov	r4, r2
 801b600:	461a      	mov	r2, r3
 801b602:	4b09      	ldr	r3, [pc, #36]	@ (801b628 <__assert_func+0x2c>)
 801b604:	681b      	ldr	r3, [r3, #0]
 801b606:	4605      	mov	r5, r0
 801b608:	68d8      	ldr	r0, [r3, #12]
 801b60a:	b954      	cbnz	r4, 801b622 <__assert_func+0x26>
 801b60c:	4b07      	ldr	r3, [pc, #28]	@ (801b62c <__assert_func+0x30>)
 801b60e:	461c      	mov	r4, r3
 801b610:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b614:	9100      	str	r1, [sp, #0]
 801b616:	462b      	mov	r3, r5
 801b618:	4905      	ldr	r1, [pc, #20]	@ (801b630 <__assert_func+0x34>)
 801b61a:	f000 fbfd 	bl	801be18 <fiprintf>
 801b61e:	f000 fc91 	bl	801bf44 <abort>
 801b622:	4b04      	ldr	r3, [pc, #16]	@ (801b634 <__assert_func+0x38>)
 801b624:	e7f4      	b.n	801b610 <__assert_func+0x14>
 801b626:	bf00      	nop
 801b628:	24000294 	.word	0x24000294
 801b62c:	0801d111 	.word	0x0801d111
 801b630:	0801d0e3 	.word	0x0801d0e3
 801b634:	0801d0d6 	.word	0x0801d0d6

0801b638 <__env_lock>:
 801b638:	4801      	ldr	r0, [pc, #4]	@ (801b640 <__env_lock+0x8>)
 801b63a:	f7ff bfc6 	b.w	801b5ca <__retarget_lock_acquire_recursive>
 801b63e:	bf00      	nop
 801b640:	2406885c 	.word	0x2406885c

0801b644 <__env_unlock>:
 801b644:	4801      	ldr	r0, [pc, #4]	@ (801b64c <__env_unlock+0x8>)
 801b646:	f7ff bfc1 	b.w	801b5cc <__retarget_lock_release_recursive>
 801b64a:	bf00      	nop
 801b64c:	2406885c 	.word	0x2406885c

0801b650 <_free_r>:
 801b650:	b538      	push	{r3, r4, r5, lr}
 801b652:	4605      	mov	r5, r0
 801b654:	2900      	cmp	r1, #0
 801b656:	d041      	beq.n	801b6dc <_free_r+0x8c>
 801b658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b65c:	1f0c      	subs	r4, r1, #4
 801b65e:	2b00      	cmp	r3, #0
 801b660:	bfb8      	it	lt
 801b662:	18e4      	addlt	r4, r4, r3
 801b664:	f7ff faec 	bl	801ac40 <__malloc_lock>
 801b668:	4a1d      	ldr	r2, [pc, #116]	@ (801b6e0 <_free_r+0x90>)
 801b66a:	6813      	ldr	r3, [r2, #0]
 801b66c:	b933      	cbnz	r3, 801b67c <_free_r+0x2c>
 801b66e:	6063      	str	r3, [r4, #4]
 801b670:	6014      	str	r4, [r2, #0]
 801b672:	4628      	mov	r0, r5
 801b674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b678:	f7ff bae8 	b.w	801ac4c <__malloc_unlock>
 801b67c:	42a3      	cmp	r3, r4
 801b67e:	d908      	bls.n	801b692 <_free_r+0x42>
 801b680:	6820      	ldr	r0, [r4, #0]
 801b682:	1821      	adds	r1, r4, r0
 801b684:	428b      	cmp	r3, r1
 801b686:	bf01      	itttt	eq
 801b688:	6819      	ldreq	r1, [r3, #0]
 801b68a:	685b      	ldreq	r3, [r3, #4]
 801b68c:	1809      	addeq	r1, r1, r0
 801b68e:	6021      	streq	r1, [r4, #0]
 801b690:	e7ed      	b.n	801b66e <_free_r+0x1e>
 801b692:	461a      	mov	r2, r3
 801b694:	685b      	ldr	r3, [r3, #4]
 801b696:	b10b      	cbz	r3, 801b69c <_free_r+0x4c>
 801b698:	42a3      	cmp	r3, r4
 801b69a:	d9fa      	bls.n	801b692 <_free_r+0x42>
 801b69c:	6811      	ldr	r1, [r2, #0]
 801b69e:	1850      	adds	r0, r2, r1
 801b6a0:	42a0      	cmp	r0, r4
 801b6a2:	d10b      	bne.n	801b6bc <_free_r+0x6c>
 801b6a4:	6820      	ldr	r0, [r4, #0]
 801b6a6:	4401      	add	r1, r0
 801b6a8:	1850      	adds	r0, r2, r1
 801b6aa:	4283      	cmp	r3, r0
 801b6ac:	6011      	str	r1, [r2, #0]
 801b6ae:	d1e0      	bne.n	801b672 <_free_r+0x22>
 801b6b0:	6818      	ldr	r0, [r3, #0]
 801b6b2:	685b      	ldr	r3, [r3, #4]
 801b6b4:	6053      	str	r3, [r2, #4]
 801b6b6:	4408      	add	r0, r1
 801b6b8:	6010      	str	r0, [r2, #0]
 801b6ba:	e7da      	b.n	801b672 <_free_r+0x22>
 801b6bc:	d902      	bls.n	801b6c4 <_free_r+0x74>
 801b6be:	230c      	movs	r3, #12
 801b6c0:	602b      	str	r3, [r5, #0]
 801b6c2:	e7d6      	b.n	801b672 <_free_r+0x22>
 801b6c4:	6820      	ldr	r0, [r4, #0]
 801b6c6:	1821      	adds	r1, r4, r0
 801b6c8:	428b      	cmp	r3, r1
 801b6ca:	bf04      	itt	eq
 801b6cc:	6819      	ldreq	r1, [r3, #0]
 801b6ce:	685b      	ldreq	r3, [r3, #4]
 801b6d0:	6063      	str	r3, [r4, #4]
 801b6d2:	bf04      	itt	eq
 801b6d4:	1809      	addeq	r1, r1, r0
 801b6d6:	6021      	streq	r1, [r4, #0]
 801b6d8:	6054      	str	r4, [r2, #4]
 801b6da:	e7ca      	b.n	801b672 <_free_r+0x22>
 801b6dc:	bd38      	pop	{r3, r4, r5, pc}
 801b6de:	bf00      	nop
 801b6e0:	24068718 	.word	0x24068718

0801b6e4 <_malloc_usable_size_r>:
 801b6e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b6e8:	1f18      	subs	r0, r3, #4
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	bfbc      	itt	lt
 801b6ee:	580b      	ldrlt	r3, [r1, r0]
 801b6f0:	18c0      	addlt	r0, r0, r3
 801b6f2:	4770      	bx	lr

0801b6f4 <__ssputs_r>:
 801b6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b6f8:	688e      	ldr	r6, [r1, #8]
 801b6fa:	461f      	mov	r7, r3
 801b6fc:	42be      	cmp	r6, r7
 801b6fe:	680b      	ldr	r3, [r1, #0]
 801b700:	4682      	mov	sl, r0
 801b702:	460c      	mov	r4, r1
 801b704:	4690      	mov	r8, r2
 801b706:	d82d      	bhi.n	801b764 <__ssputs_r+0x70>
 801b708:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b70c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801b710:	d026      	beq.n	801b760 <__ssputs_r+0x6c>
 801b712:	6965      	ldr	r5, [r4, #20]
 801b714:	6909      	ldr	r1, [r1, #16]
 801b716:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b71a:	eba3 0901 	sub.w	r9, r3, r1
 801b71e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b722:	1c7b      	adds	r3, r7, #1
 801b724:	444b      	add	r3, r9
 801b726:	106d      	asrs	r5, r5, #1
 801b728:	429d      	cmp	r5, r3
 801b72a:	bf38      	it	cc
 801b72c:	461d      	movcc	r5, r3
 801b72e:	0553      	lsls	r3, r2, #21
 801b730:	d527      	bpl.n	801b782 <__ssputs_r+0x8e>
 801b732:	4629      	mov	r1, r5
 801b734:	f7ff fa04 	bl	801ab40 <_malloc_r>
 801b738:	4606      	mov	r6, r0
 801b73a:	b360      	cbz	r0, 801b796 <__ssputs_r+0xa2>
 801b73c:	6921      	ldr	r1, [r4, #16]
 801b73e:	464a      	mov	r2, r9
 801b740:	f7ff ff4d 	bl	801b5de <memcpy>
 801b744:	89a3      	ldrh	r3, [r4, #12]
 801b746:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b74a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b74e:	81a3      	strh	r3, [r4, #12]
 801b750:	6126      	str	r6, [r4, #16]
 801b752:	6165      	str	r5, [r4, #20]
 801b754:	444e      	add	r6, r9
 801b756:	eba5 0509 	sub.w	r5, r5, r9
 801b75a:	6026      	str	r6, [r4, #0]
 801b75c:	60a5      	str	r5, [r4, #8]
 801b75e:	463e      	mov	r6, r7
 801b760:	42be      	cmp	r6, r7
 801b762:	d900      	bls.n	801b766 <__ssputs_r+0x72>
 801b764:	463e      	mov	r6, r7
 801b766:	6820      	ldr	r0, [r4, #0]
 801b768:	4632      	mov	r2, r6
 801b76a:	4641      	mov	r1, r8
 801b76c:	f7ff fdfe 	bl	801b36c <memmove>
 801b770:	68a3      	ldr	r3, [r4, #8]
 801b772:	1b9b      	subs	r3, r3, r6
 801b774:	60a3      	str	r3, [r4, #8]
 801b776:	6823      	ldr	r3, [r4, #0]
 801b778:	4433      	add	r3, r6
 801b77a:	6023      	str	r3, [r4, #0]
 801b77c:	2000      	movs	r0, #0
 801b77e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b782:	462a      	mov	r2, r5
 801b784:	f7ff fadc 	bl	801ad40 <_realloc_r>
 801b788:	4606      	mov	r6, r0
 801b78a:	2800      	cmp	r0, #0
 801b78c:	d1e0      	bne.n	801b750 <__ssputs_r+0x5c>
 801b78e:	6921      	ldr	r1, [r4, #16]
 801b790:	4650      	mov	r0, sl
 801b792:	f7ff ff5d 	bl	801b650 <_free_r>
 801b796:	230c      	movs	r3, #12
 801b798:	f8ca 3000 	str.w	r3, [sl]
 801b79c:	89a3      	ldrh	r3, [r4, #12]
 801b79e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b7a2:	81a3      	strh	r3, [r4, #12]
 801b7a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b7a8:	e7e9      	b.n	801b77e <__ssputs_r+0x8a>
	...

0801b7ac <_svfiprintf_r>:
 801b7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7b0:	4698      	mov	r8, r3
 801b7b2:	898b      	ldrh	r3, [r1, #12]
 801b7b4:	061b      	lsls	r3, r3, #24
 801b7b6:	b09d      	sub	sp, #116	@ 0x74
 801b7b8:	4607      	mov	r7, r0
 801b7ba:	460d      	mov	r5, r1
 801b7bc:	4614      	mov	r4, r2
 801b7be:	d510      	bpl.n	801b7e2 <_svfiprintf_r+0x36>
 801b7c0:	690b      	ldr	r3, [r1, #16]
 801b7c2:	b973      	cbnz	r3, 801b7e2 <_svfiprintf_r+0x36>
 801b7c4:	2140      	movs	r1, #64	@ 0x40
 801b7c6:	f7ff f9bb 	bl	801ab40 <_malloc_r>
 801b7ca:	6028      	str	r0, [r5, #0]
 801b7cc:	6128      	str	r0, [r5, #16]
 801b7ce:	b930      	cbnz	r0, 801b7de <_svfiprintf_r+0x32>
 801b7d0:	230c      	movs	r3, #12
 801b7d2:	603b      	str	r3, [r7, #0]
 801b7d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b7d8:	b01d      	add	sp, #116	@ 0x74
 801b7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7de:	2340      	movs	r3, #64	@ 0x40
 801b7e0:	616b      	str	r3, [r5, #20]
 801b7e2:	2300      	movs	r3, #0
 801b7e4:	9309      	str	r3, [sp, #36]	@ 0x24
 801b7e6:	2320      	movs	r3, #32
 801b7e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b7ec:	f8cd 800c 	str.w	r8, [sp, #12]
 801b7f0:	2330      	movs	r3, #48	@ 0x30
 801b7f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801b990 <_svfiprintf_r+0x1e4>
 801b7f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b7fa:	f04f 0901 	mov.w	r9, #1
 801b7fe:	4623      	mov	r3, r4
 801b800:	469a      	mov	sl, r3
 801b802:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b806:	b10a      	cbz	r2, 801b80c <_svfiprintf_r+0x60>
 801b808:	2a25      	cmp	r2, #37	@ 0x25
 801b80a:	d1f9      	bne.n	801b800 <_svfiprintf_r+0x54>
 801b80c:	ebba 0b04 	subs.w	fp, sl, r4
 801b810:	d00b      	beq.n	801b82a <_svfiprintf_r+0x7e>
 801b812:	465b      	mov	r3, fp
 801b814:	4622      	mov	r2, r4
 801b816:	4629      	mov	r1, r5
 801b818:	4638      	mov	r0, r7
 801b81a:	f7ff ff6b 	bl	801b6f4 <__ssputs_r>
 801b81e:	3001      	adds	r0, #1
 801b820:	f000 80a7 	beq.w	801b972 <_svfiprintf_r+0x1c6>
 801b824:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b826:	445a      	add	r2, fp
 801b828:	9209      	str	r2, [sp, #36]	@ 0x24
 801b82a:	f89a 3000 	ldrb.w	r3, [sl]
 801b82e:	2b00      	cmp	r3, #0
 801b830:	f000 809f 	beq.w	801b972 <_svfiprintf_r+0x1c6>
 801b834:	2300      	movs	r3, #0
 801b836:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b83a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b83e:	f10a 0a01 	add.w	sl, sl, #1
 801b842:	9304      	str	r3, [sp, #16]
 801b844:	9307      	str	r3, [sp, #28]
 801b846:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b84a:	931a      	str	r3, [sp, #104]	@ 0x68
 801b84c:	4654      	mov	r4, sl
 801b84e:	2205      	movs	r2, #5
 801b850:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b854:	484e      	ldr	r0, [pc, #312]	@ (801b990 <_svfiprintf_r+0x1e4>)
 801b856:	f7e4 fd5b 	bl	8000310 <memchr>
 801b85a:	9a04      	ldr	r2, [sp, #16]
 801b85c:	b9d8      	cbnz	r0, 801b896 <_svfiprintf_r+0xea>
 801b85e:	06d0      	lsls	r0, r2, #27
 801b860:	bf44      	itt	mi
 801b862:	2320      	movmi	r3, #32
 801b864:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b868:	0711      	lsls	r1, r2, #28
 801b86a:	bf44      	itt	mi
 801b86c:	232b      	movmi	r3, #43	@ 0x2b
 801b86e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b872:	f89a 3000 	ldrb.w	r3, [sl]
 801b876:	2b2a      	cmp	r3, #42	@ 0x2a
 801b878:	d015      	beq.n	801b8a6 <_svfiprintf_r+0xfa>
 801b87a:	9a07      	ldr	r2, [sp, #28]
 801b87c:	4654      	mov	r4, sl
 801b87e:	2000      	movs	r0, #0
 801b880:	f04f 0c0a 	mov.w	ip, #10
 801b884:	4621      	mov	r1, r4
 801b886:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b88a:	3b30      	subs	r3, #48	@ 0x30
 801b88c:	2b09      	cmp	r3, #9
 801b88e:	d94b      	bls.n	801b928 <_svfiprintf_r+0x17c>
 801b890:	b1b0      	cbz	r0, 801b8c0 <_svfiprintf_r+0x114>
 801b892:	9207      	str	r2, [sp, #28]
 801b894:	e014      	b.n	801b8c0 <_svfiprintf_r+0x114>
 801b896:	eba0 0308 	sub.w	r3, r0, r8
 801b89a:	fa09 f303 	lsl.w	r3, r9, r3
 801b89e:	4313      	orrs	r3, r2
 801b8a0:	9304      	str	r3, [sp, #16]
 801b8a2:	46a2      	mov	sl, r4
 801b8a4:	e7d2      	b.n	801b84c <_svfiprintf_r+0xa0>
 801b8a6:	9b03      	ldr	r3, [sp, #12]
 801b8a8:	1d19      	adds	r1, r3, #4
 801b8aa:	681b      	ldr	r3, [r3, #0]
 801b8ac:	9103      	str	r1, [sp, #12]
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	bfbb      	ittet	lt
 801b8b2:	425b      	neglt	r3, r3
 801b8b4:	f042 0202 	orrlt.w	r2, r2, #2
 801b8b8:	9307      	strge	r3, [sp, #28]
 801b8ba:	9307      	strlt	r3, [sp, #28]
 801b8bc:	bfb8      	it	lt
 801b8be:	9204      	strlt	r2, [sp, #16]
 801b8c0:	7823      	ldrb	r3, [r4, #0]
 801b8c2:	2b2e      	cmp	r3, #46	@ 0x2e
 801b8c4:	d10a      	bne.n	801b8dc <_svfiprintf_r+0x130>
 801b8c6:	7863      	ldrb	r3, [r4, #1]
 801b8c8:	2b2a      	cmp	r3, #42	@ 0x2a
 801b8ca:	d132      	bne.n	801b932 <_svfiprintf_r+0x186>
 801b8cc:	9b03      	ldr	r3, [sp, #12]
 801b8ce:	1d1a      	adds	r2, r3, #4
 801b8d0:	681b      	ldr	r3, [r3, #0]
 801b8d2:	9203      	str	r2, [sp, #12]
 801b8d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b8d8:	3402      	adds	r4, #2
 801b8da:	9305      	str	r3, [sp, #20]
 801b8dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801b9a0 <_svfiprintf_r+0x1f4>
 801b8e0:	7821      	ldrb	r1, [r4, #0]
 801b8e2:	2203      	movs	r2, #3
 801b8e4:	4650      	mov	r0, sl
 801b8e6:	f7e4 fd13 	bl	8000310 <memchr>
 801b8ea:	b138      	cbz	r0, 801b8fc <_svfiprintf_r+0x150>
 801b8ec:	9b04      	ldr	r3, [sp, #16]
 801b8ee:	eba0 000a 	sub.w	r0, r0, sl
 801b8f2:	2240      	movs	r2, #64	@ 0x40
 801b8f4:	4082      	lsls	r2, r0
 801b8f6:	4313      	orrs	r3, r2
 801b8f8:	3401      	adds	r4, #1
 801b8fa:	9304      	str	r3, [sp, #16]
 801b8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b900:	4824      	ldr	r0, [pc, #144]	@ (801b994 <_svfiprintf_r+0x1e8>)
 801b902:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b906:	2206      	movs	r2, #6
 801b908:	f7e4 fd02 	bl	8000310 <memchr>
 801b90c:	2800      	cmp	r0, #0
 801b90e:	d036      	beq.n	801b97e <_svfiprintf_r+0x1d2>
 801b910:	4b21      	ldr	r3, [pc, #132]	@ (801b998 <_svfiprintf_r+0x1ec>)
 801b912:	bb1b      	cbnz	r3, 801b95c <_svfiprintf_r+0x1b0>
 801b914:	9b03      	ldr	r3, [sp, #12]
 801b916:	3307      	adds	r3, #7
 801b918:	f023 0307 	bic.w	r3, r3, #7
 801b91c:	3308      	adds	r3, #8
 801b91e:	9303      	str	r3, [sp, #12]
 801b920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b922:	4433      	add	r3, r6
 801b924:	9309      	str	r3, [sp, #36]	@ 0x24
 801b926:	e76a      	b.n	801b7fe <_svfiprintf_r+0x52>
 801b928:	fb0c 3202 	mla	r2, ip, r2, r3
 801b92c:	460c      	mov	r4, r1
 801b92e:	2001      	movs	r0, #1
 801b930:	e7a8      	b.n	801b884 <_svfiprintf_r+0xd8>
 801b932:	2300      	movs	r3, #0
 801b934:	3401      	adds	r4, #1
 801b936:	9305      	str	r3, [sp, #20]
 801b938:	4619      	mov	r1, r3
 801b93a:	f04f 0c0a 	mov.w	ip, #10
 801b93e:	4620      	mov	r0, r4
 801b940:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b944:	3a30      	subs	r2, #48	@ 0x30
 801b946:	2a09      	cmp	r2, #9
 801b948:	d903      	bls.n	801b952 <_svfiprintf_r+0x1a6>
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	d0c6      	beq.n	801b8dc <_svfiprintf_r+0x130>
 801b94e:	9105      	str	r1, [sp, #20]
 801b950:	e7c4      	b.n	801b8dc <_svfiprintf_r+0x130>
 801b952:	fb0c 2101 	mla	r1, ip, r1, r2
 801b956:	4604      	mov	r4, r0
 801b958:	2301      	movs	r3, #1
 801b95a:	e7f0      	b.n	801b93e <_svfiprintf_r+0x192>
 801b95c:	ab03      	add	r3, sp, #12
 801b95e:	9300      	str	r3, [sp, #0]
 801b960:	462a      	mov	r2, r5
 801b962:	4b0e      	ldr	r3, [pc, #56]	@ (801b99c <_svfiprintf_r+0x1f0>)
 801b964:	a904      	add	r1, sp, #16
 801b966:	4638      	mov	r0, r7
 801b968:	f3af 8000 	nop.w
 801b96c:	1c42      	adds	r2, r0, #1
 801b96e:	4606      	mov	r6, r0
 801b970:	d1d6      	bne.n	801b920 <_svfiprintf_r+0x174>
 801b972:	89ab      	ldrh	r3, [r5, #12]
 801b974:	065b      	lsls	r3, r3, #25
 801b976:	f53f af2d 	bmi.w	801b7d4 <_svfiprintf_r+0x28>
 801b97a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b97c:	e72c      	b.n	801b7d8 <_svfiprintf_r+0x2c>
 801b97e:	ab03      	add	r3, sp, #12
 801b980:	9300      	str	r3, [sp, #0]
 801b982:	462a      	mov	r2, r5
 801b984:	4b05      	ldr	r3, [pc, #20]	@ (801b99c <_svfiprintf_r+0x1f0>)
 801b986:	a904      	add	r1, sp, #16
 801b988:	4638      	mov	r0, r7
 801b98a:	f000 f879 	bl	801ba80 <_printf_i>
 801b98e:	e7ed      	b.n	801b96c <_svfiprintf_r+0x1c0>
 801b990:	0801d112 	.word	0x0801d112
 801b994:	0801d11c 	.word	0x0801d11c
 801b998:	00000000 	.word	0x00000000
 801b99c:	0801b6f5 	.word	0x0801b6f5
 801b9a0:	0801d118 	.word	0x0801d118

0801b9a4 <_printf_common>:
 801b9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b9a8:	4616      	mov	r6, r2
 801b9aa:	4698      	mov	r8, r3
 801b9ac:	688a      	ldr	r2, [r1, #8]
 801b9ae:	690b      	ldr	r3, [r1, #16]
 801b9b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801b9b4:	4293      	cmp	r3, r2
 801b9b6:	bfb8      	it	lt
 801b9b8:	4613      	movlt	r3, r2
 801b9ba:	6033      	str	r3, [r6, #0]
 801b9bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801b9c0:	4607      	mov	r7, r0
 801b9c2:	460c      	mov	r4, r1
 801b9c4:	b10a      	cbz	r2, 801b9ca <_printf_common+0x26>
 801b9c6:	3301      	adds	r3, #1
 801b9c8:	6033      	str	r3, [r6, #0]
 801b9ca:	6823      	ldr	r3, [r4, #0]
 801b9cc:	0699      	lsls	r1, r3, #26
 801b9ce:	bf42      	ittt	mi
 801b9d0:	6833      	ldrmi	r3, [r6, #0]
 801b9d2:	3302      	addmi	r3, #2
 801b9d4:	6033      	strmi	r3, [r6, #0]
 801b9d6:	6825      	ldr	r5, [r4, #0]
 801b9d8:	f015 0506 	ands.w	r5, r5, #6
 801b9dc:	d106      	bne.n	801b9ec <_printf_common+0x48>
 801b9de:	f104 0a19 	add.w	sl, r4, #25
 801b9e2:	68e3      	ldr	r3, [r4, #12]
 801b9e4:	6832      	ldr	r2, [r6, #0]
 801b9e6:	1a9b      	subs	r3, r3, r2
 801b9e8:	42ab      	cmp	r3, r5
 801b9ea:	dc26      	bgt.n	801ba3a <_printf_common+0x96>
 801b9ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801b9f0:	6822      	ldr	r2, [r4, #0]
 801b9f2:	3b00      	subs	r3, #0
 801b9f4:	bf18      	it	ne
 801b9f6:	2301      	movne	r3, #1
 801b9f8:	0692      	lsls	r2, r2, #26
 801b9fa:	d42b      	bmi.n	801ba54 <_printf_common+0xb0>
 801b9fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801ba00:	4641      	mov	r1, r8
 801ba02:	4638      	mov	r0, r7
 801ba04:	47c8      	blx	r9
 801ba06:	3001      	adds	r0, #1
 801ba08:	d01e      	beq.n	801ba48 <_printf_common+0xa4>
 801ba0a:	6823      	ldr	r3, [r4, #0]
 801ba0c:	6922      	ldr	r2, [r4, #16]
 801ba0e:	f003 0306 	and.w	r3, r3, #6
 801ba12:	2b04      	cmp	r3, #4
 801ba14:	bf02      	ittt	eq
 801ba16:	68e5      	ldreq	r5, [r4, #12]
 801ba18:	6833      	ldreq	r3, [r6, #0]
 801ba1a:	1aed      	subeq	r5, r5, r3
 801ba1c:	68a3      	ldr	r3, [r4, #8]
 801ba1e:	bf0c      	ite	eq
 801ba20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ba24:	2500      	movne	r5, #0
 801ba26:	4293      	cmp	r3, r2
 801ba28:	bfc4      	itt	gt
 801ba2a:	1a9b      	subgt	r3, r3, r2
 801ba2c:	18ed      	addgt	r5, r5, r3
 801ba2e:	2600      	movs	r6, #0
 801ba30:	341a      	adds	r4, #26
 801ba32:	42b5      	cmp	r5, r6
 801ba34:	d11a      	bne.n	801ba6c <_printf_common+0xc8>
 801ba36:	2000      	movs	r0, #0
 801ba38:	e008      	b.n	801ba4c <_printf_common+0xa8>
 801ba3a:	2301      	movs	r3, #1
 801ba3c:	4652      	mov	r2, sl
 801ba3e:	4641      	mov	r1, r8
 801ba40:	4638      	mov	r0, r7
 801ba42:	47c8      	blx	r9
 801ba44:	3001      	adds	r0, #1
 801ba46:	d103      	bne.n	801ba50 <_printf_common+0xac>
 801ba48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ba4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba50:	3501      	adds	r5, #1
 801ba52:	e7c6      	b.n	801b9e2 <_printf_common+0x3e>
 801ba54:	18e1      	adds	r1, r4, r3
 801ba56:	1c5a      	adds	r2, r3, #1
 801ba58:	2030      	movs	r0, #48	@ 0x30
 801ba5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801ba5e:	4422      	add	r2, r4
 801ba60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801ba64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801ba68:	3302      	adds	r3, #2
 801ba6a:	e7c7      	b.n	801b9fc <_printf_common+0x58>
 801ba6c:	2301      	movs	r3, #1
 801ba6e:	4622      	mov	r2, r4
 801ba70:	4641      	mov	r1, r8
 801ba72:	4638      	mov	r0, r7
 801ba74:	47c8      	blx	r9
 801ba76:	3001      	adds	r0, #1
 801ba78:	d0e6      	beq.n	801ba48 <_printf_common+0xa4>
 801ba7a:	3601      	adds	r6, #1
 801ba7c:	e7d9      	b.n	801ba32 <_printf_common+0x8e>
	...

0801ba80 <_printf_i>:
 801ba80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ba84:	7e0f      	ldrb	r7, [r1, #24]
 801ba86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ba88:	2f78      	cmp	r7, #120	@ 0x78
 801ba8a:	4691      	mov	r9, r2
 801ba8c:	4680      	mov	r8, r0
 801ba8e:	460c      	mov	r4, r1
 801ba90:	469a      	mov	sl, r3
 801ba92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801ba96:	d807      	bhi.n	801baa8 <_printf_i+0x28>
 801ba98:	2f62      	cmp	r7, #98	@ 0x62
 801ba9a:	d80a      	bhi.n	801bab2 <_printf_i+0x32>
 801ba9c:	2f00      	cmp	r7, #0
 801ba9e:	f000 80d2 	beq.w	801bc46 <_printf_i+0x1c6>
 801baa2:	2f58      	cmp	r7, #88	@ 0x58
 801baa4:	f000 80b9 	beq.w	801bc1a <_printf_i+0x19a>
 801baa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801baac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801bab0:	e03a      	b.n	801bb28 <_printf_i+0xa8>
 801bab2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801bab6:	2b15      	cmp	r3, #21
 801bab8:	d8f6      	bhi.n	801baa8 <_printf_i+0x28>
 801baba:	a101      	add	r1, pc, #4	@ (adr r1, 801bac0 <_printf_i+0x40>)
 801babc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bac0:	0801bb19 	.word	0x0801bb19
 801bac4:	0801bb2d 	.word	0x0801bb2d
 801bac8:	0801baa9 	.word	0x0801baa9
 801bacc:	0801baa9 	.word	0x0801baa9
 801bad0:	0801baa9 	.word	0x0801baa9
 801bad4:	0801baa9 	.word	0x0801baa9
 801bad8:	0801bb2d 	.word	0x0801bb2d
 801badc:	0801baa9 	.word	0x0801baa9
 801bae0:	0801baa9 	.word	0x0801baa9
 801bae4:	0801baa9 	.word	0x0801baa9
 801bae8:	0801baa9 	.word	0x0801baa9
 801baec:	0801bc2d 	.word	0x0801bc2d
 801baf0:	0801bb57 	.word	0x0801bb57
 801baf4:	0801bbe7 	.word	0x0801bbe7
 801baf8:	0801baa9 	.word	0x0801baa9
 801bafc:	0801baa9 	.word	0x0801baa9
 801bb00:	0801bc4f 	.word	0x0801bc4f
 801bb04:	0801baa9 	.word	0x0801baa9
 801bb08:	0801bb57 	.word	0x0801bb57
 801bb0c:	0801baa9 	.word	0x0801baa9
 801bb10:	0801baa9 	.word	0x0801baa9
 801bb14:	0801bbef 	.word	0x0801bbef
 801bb18:	6833      	ldr	r3, [r6, #0]
 801bb1a:	1d1a      	adds	r2, r3, #4
 801bb1c:	681b      	ldr	r3, [r3, #0]
 801bb1e:	6032      	str	r2, [r6, #0]
 801bb20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bb24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801bb28:	2301      	movs	r3, #1
 801bb2a:	e09d      	b.n	801bc68 <_printf_i+0x1e8>
 801bb2c:	6833      	ldr	r3, [r6, #0]
 801bb2e:	6820      	ldr	r0, [r4, #0]
 801bb30:	1d19      	adds	r1, r3, #4
 801bb32:	6031      	str	r1, [r6, #0]
 801bb34:	0606      	lsls	r6, r0, #24
 801bb36:	d501      	bpl.n	801bb3c <_printf_i+0xbc>
 801bb38:	681d      	ldr	r5, [r3, #0]
 801bb3a:	e003      	b.n	801bb44 <_printf_i+0xc4>
 801bb3c:	0645      	lsls	r5, r0, #25
 801bb3e:	d5fb      	bpl.n	801bb38 <_printf_i+0xb8>
 801bb40:	f9b3 5000 	ldrsh.w	r5, [r3]
 801bb44:	2d00      	cmp	r5, #0
 801bb46:	da03      	bge.n	801bb50 <_printf_i+0xd0>
 801bb48:	232d      	movs	r3, #45	@ 0x2d
 801bb4a:	426d      	negs	r5, r5
 801bb4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bb50:	4859      	ldr	r0, [pc, #356]	@ (801bcb8 <_printf_i+0x238>)
 801bb52:	230a      	movs	r3, #10
 801bb54:	e011      	b.n	801bb7a <_printf_i+0xfa>
 801bb56:	6821      	ldr	r1, [r4, #0]
 801bb58:	6833      	ldr	r3, [r6, #0]
 801bb5a:	0608      	lsls	r0, r1, #24
 801bb5c:	f853 5b04 	ldr.w	r5, [r3], #4
 801bb60:	d402      	bmi.n	801bb68 <_printf_i+0xe8>
 801bb62:	0649      	lsls	r1, r1, #25
 801bb64:	bf48      	it	mi
 801bb66:	b2ad      	uxthmi	r5, r5
 801bb68:	2f6f      	cmp	r7, #111	@ 0x6f
 801bb6a:	4853      	ldr	r0, [pc, #332]	@ (801bcb8 <_printf_i+0x238>)
 801bb6c:	6033      	str	r3, [r6, #0]
 801bb6e:	bf14      	ite	ne
 801bb70:	230a      	movne	r3, #10
 801bb72:	2308      	moveq	r3, #8
 801bb74:	2100      	movs	r1, #0
 801bb76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801bb7a:	6866      	ldr	r6, [r4, #4]
 801bb7c:	60a6      	str	r6, [r4, #8]
 801bb7e:	2e00      	cmp	r6, #0
 801bb80:	bfa2      	ittt	ge
 801bb82:	6821      	ldrge	r1, [r4, #0]
 801bb84:	f021 0104 	bicge.w	r1, r1, #4
 801bb88:	6021      	strge	r1, [r4, #0]
 801bb8a:	b90d      	cbnz	r5, 801bb90 <_printf_i+0x110>
 801bb8c:	2e00      	cmp	r6, #0
 801bb8e:	d04b      	beq.n	801bc28 <_printf_i+0x1a8>
 801bb90:	4616      	mov	r6, r2
 801bb92:	fbb5 f1f3 	udiv	r1, r5, r3
 801bb96:	fb03 5711 	mls	r7, r3, r1, r5
 801bb9a:	5dc7      	ldrb	r7, [r0, r7]
 801bb9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801bba0:	462f      	mov	r7, r5
 801bba2:	42bb      	cmp	r3, r7
 801bba4:	460d      	mov	r5, r1
 801bba6:	d9f4      	bls.n	801bb92 <_printf_i+0x112>
 801bba8:	2b08      	cmp	r3, #8
 801bbaa:	d10b      	bne.n	801bbc4 <_printf_i+0x144>
 801bbac:	6823      	ldr	r3, [r4, #0]
 801bbae:	07df      	lsls	r7, r3, #31
 801bbb0:	d508      	bpl.n	801bbc4 <_printf_i+0x144>
 801bbb2:	6923      	ldr	r3, [r4, #16]
 801bbb4:	6861      	ldr	r1, [r4, #4]
 801bbb6:	4299      	cmp	r1, r3
 801bbb8:	bfde      	ittt	le
 801bbba:	2330      	movle	r3, #48	@ 0x30
 801bbbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 801bbc0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801bbc4:	1b92      	subs	r2, r2, r6
 801bbc6:	6122      	str	r2, [r4, #16]
 801bbc8:	f8cd a000 	str.w	sl, [sp]
 801bbcc:	464b      	mov	r3, r9
 801bbce:	aa03      	add	r2, sp, #12
 801bbd0:	4621      	mov	r1, r4
 801bbd2:	4640      	mov	r0, r8
 801bbd4:	f7ff fee6 	bl	801b9a4 <_printf_common>
 801bbd8:	3001      	adds	r0, #1
 801bbda:	d14a      	bne.n	801bc72 <_printf_i+0x1f2>
 801bbdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bbe0:	b004      	add	sp, #16
 801bbe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bbe6:	6823      	ldr	r3, [r4, #0]
 801bbe8:	f043 0320 	orr.w	r3, r3, #32
 801bbec:	6023      	str	r3, [r4, #0]
 801bbee:	4833      	ldr	r0, [pc, #204]	@ (801bcbc <_printf_i+0x23c>)
 801bbf0:	2778      	movs	r7, #120	@ 0x78
 801bbf2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801bbf6:	6823      	ldr	r3, [r4, #0]
 801bbf8:	6831      	ldr	r1, [r6, #0]
 801bbfa:	061f      	lsls	r7, r3, #24
 801bbfc:	f851 5b04 	ldr.w	r5, [r1], #4
 801bc00:	d402      	bmi.n	801bc08 <_printf_i+0x188>
 801bc02:	065f      	lsls	r7, r3, #25
 801bc04:	bf48      	it	mi
 801bc06:	b2ad      	uxthmi	r5, r5
 801bc08:	6031      	str	r1, [r6, #0]
 801bc0a:	07d9      	lsls	r1, r3, #31
 801bc0c:	bf44      	itt	mi
 801bc0e:	f043 0320 	orrmi.w	r3, r3, #32
 801bc12:	6023      	strmi	r3, [r4, #0]
 801bc14:	b11d      	cbz	r5, 801bc1e <_printf_i+0x19e>
 801bc16:	2310      	movs	r3, #16
 801bc18:	e7ac      	b.n	801bb74 <_printf_i+0xf4>
 801bc1a:	4827      	ldr	r0, [pc, #156]	@ (801bcb8 <_printf_i+0x238>)
 801bc1c:	e7e9      	b.n	801bbf2 <_printf_i+0x172>
 801bc1e:	6823      	ldr	r3, [r4, #0]
 801bc20:	f023 0320 	bic.w	r3, r3, #32
 801bc24:	6023      	str	r3, [r4, #0]
 801bc26:	e7f6      	b.n	801bc16 <_printf_i+0x196>
 801bc28:	4616      	mov	r6, r2
 801bc2a:	e7bd      	b.n	801bba8 <_printf_i+0x128>
 801bc2c:	6833      	ldr	r3, [r6, #0]
 801bc2e:	6825      	ldr	r5, [r4, #0]
 801bc30:	6961      	ldr	r1, [r4, #20]
 801bc32:	1d18      	adds	r0, r3, #4
 801bc34:	6030      	str	r0, [r6, #0]
 801bc36:	062e      	lsls	r6, r5, #24
 801bc38:	681b      	ldr	r3, [r3, #0]
 801bc3a:	d501      	bpl.n	801bc40 <_printf_i+0x1c0>
 801bc3c:	6019      	str	r1, [r3, #0]
 801bc3e:	e002      	b.n	801bc46 <_printf_i+0x1c6>
 801bc40:	0668      	lsls	r0, r5, #25
 801bc42:	d5fb      	bpl.n	801bc3c <_printf_i+0x1bc>
 801bc44:	8019      	strh	r1, [r3, #0]
 801bc46:	2300      	movs	r3, #0
 801bc48:	6123      	str	r3, [r4, #16]
 801bc4a:	4616      	mov	r6, r2
 801bc4c:	e7bc      	b.n	801bbc8 <_printf_i+0x148>
 801bc4e:	6833      	ldr	r3, [r6, #0]
 801bc50:	1d1a      	adds	r2, r3, #4
 801bc52:	6032      	str	r2, [r6, #0]
 801bc54:	681e      	ldr	r6, [r3, #0]
 801bc56:	6862      	ldr	r2, [r4, #4]
 801bc58:	2100      	movs	r1, #0
 801bc5a:	4630      	mov	r0, r6
 801bc5c:	f7e4 fb58 	bl	8000310 <memchr>
 801bc60:	b108      	cbz	r0, 801bc66 <_printf_i+0x1e6>
 801bc62:	1b80      	subs	r0, r0, r6
 801bc64:	6060      	str	r0, [r4, #4]
 801bc66:	6863      	ldr	r3, [r4, #4]
 801bc68:	6123      	str	r3, [r4, #16]
 801bc6a:	2300      	movs	r3, #0
 801bc6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bc70:	e7aa      	b.n	801bbc8 <_printf_i+0x148>
 801bc72:	6923      	ldr	r3, [r4, #16]
 801bc74:	4632      	mov	r2, r6
 801bc76:	4649      	mov	r1, r9
 801bc78:	4640      	mov	r0, r8
 801bc7a:	47d0      	blx	sl
 801bc7c:	3001      	adds	r0, #1
 801bc7e:	d0ad      	beq.n	801bbdc <_printf_i+0x15c>
 801bc80:	6823      	ldr	r3, [r4, #0]
 801bc82:	079b      	lsls	r3, r3, #30
 801bc84:	d413      	bmi.n	801bcae <_printf_i+0x22e>
 801bc86:	68e0      	ldr	r0, [r4, #12]
 801bc88:	9b03      	ldr	r3, [sp, #12]
 801bc8a:	4298      	cmp	r0, r3
 801bc8c:	bfb8      	it	lt
 801bc8e:	4618      	movlt	r0, r3
 801bc90:	e7a6      	b.n	801bbe0 <_printf_i+0x160>
 801bc92:	2301      	movs	r3, #1
 801bc94:	4632      	mov	r2, r6
 801bc96:	4649      	mov	r1, r9
 801bc98:	4640      	mov	r0, r8
 801bc9a:	47d0      	blx	sl
 801bc9c:	3001      	adds	r0, #1
 801bc9e:	d09d      	beq.n	801bbdc <_printf_i+0x15c>
 801bca0:	3501      	adds	r5, #1
 801bca2:	68e3      	ldr	r3, [r4, #12]
 801bca4:	9903      	ldr	r1, [sp, #12]
 801bca6:	1a5b      	subs	r3, r3, r1
 801bca8:	42ab      	cmp	r3, r5
 801bcaa:	dcf2      	bgt.n	801bc92 <_printf_i+0x212>
 801bcac:	e7eb      	b.n	801bc86 <_printf_i+0x206>
 801bcae:	2500      	movs	r5, #0
 801bcb0:	f104 0619 	add.w	r6, r4, #25
 801bcb4:	e7f5      	b.n	801bca2 <_printf_i+0x222>
 801bcb6:	bf00      	nop
 801bcb8:	0801d123 	.word	0x0801d123
 801bcbc:	0801d134 	.word	0x0801d134

0801bcc0 <__sflush_r>:
 801bcc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801bcc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bcc8:	0716      	lsls	r6, r2, #28
 801bcca:	4605      	mov	r5, r0
 801bccc:	460c      	mov	r4, r1
 801bcce:	d454      	bmi.n	801bd7a <__sflush_r+0xba>
 801bcd0:	684b      	ldr	r3, [r1, #4]
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	dc02      	bgt.n	801bcdc <__sflush_r+0x1c>
 801bcd6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801bcd8:	2b00      	cmp	r3, #0
 801bcda:	dd48      	ble.n	801bd6e <__sflush_r+0xae>
 801bcdc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801bcde:	2e00      	cmp	r6, #0
 801bce0:	d045      	beq.n	801bd6e <__sflush_r+0xae>
 801bce2:	2300      	movs	r3, #0
 801bce4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801bce8:	682f      	ldr	r7, [r5, #0]
 801bcea:	6a21      	ldr	r1, [r4, #32]
 801bcec:	602b      	str	r3, [r5, #0]
 801bcee:	d030      	beq.n	801bd52 <__sflush_r+0x92>
 801bcf0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801bcf2:	89a3      	ldrh	r3, [r4, #12]
 801bcf4:	0759      	lsls	r1, r3, #29
 801bcf6:	d505      	bpl.n	801bd04 <__sflush_r+0x44>
 801bcf8:	6863      	ldr	r3, [r4, #4]
 801bcfa:	1ad2      	subs	r2, r2, r3
 801bcfc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801bcfe:	b10b      	cbz	r3, 801bd04 <__sflush_r+0x44>
 801bd00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801bd02:	1ad2      	subs	r2, r2, r3
 801bd04:	2300      	movs	r3, #0
 801bd06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801bd08:	6a21      	ldr	r1, [r4, #32]
 801bd0a:	4628      	mov	r0, r5
 801bd0c:	47b0      	blx	r6
 801bd0e:	1c43      	adds	r3, r0, #1
 801bd10:	89a3      	ldrh	r3, [r4, #12]
 801bd12:	d106      	bne.n	801bd22 <__sflush_r+0x62>
 801bd14:	6829      	ldr	r1, [r5, #0]
 801bd16:	291d      	cmp	r1, #29
 801bd18:	d82b      	bhi.n	801bd72 <__sflush_r+0xb2>
 801bd1a:	4a2a      	ldr	r2, [pc, #168]	@ (801bdc4 <__sflush_r+0x104>)
 801bd1c:	410a      	asrs	r2, r1
 801bd1e:	07d6      	lsls	r6, r2, #31
 801bd20:	d427      	bmi.n	801bd72 <__sflush_r+0xb2>
 801bd22:	2200      	movs	r2, #0
 801bd24:	6062      	str	r2, [r4, #4]
 801bd26:	04d9      	lsls	r1, r3, #19
 801bd28:	6922      	ldr	r2, [r4, #16]
 801bd2a:	6022      	str	r2, [r4, #0]
 801bd2c:	d504      	bpl.n	801bd38 <__sflush_r+0x78>
 801bd2e:	1c42      	adds	r2, r0, #1
 801bd30:	d101      	bne.n	801bd36 <__sflush_r+0x76>
 801bd32:	682b      	ldr	r3, [r5, #0]
 801bd34:	b903      	cbnz	r3, 801bd38 <__sflush_r+0x78>
 801bd36:	6560      	str	r0, [r4, #84]	@ 0x54
 801bd38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801bd3a:	602f      	str	r7, [r5, #0]
 801bd3c:	b1b9      	cbz	r1, 801bd6e <__sflush_r+0xae>
 801bd3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bd42:	4299      	cmp	r1, r3
 801bd44:	d002      	beq.n	801bd4c <__sflush_r+0x8c>
 801bd46:	4628      	mov	r0, r5
 801bd48:	f7ff fc82 	bl	801b650 <_free_r>
 801bd4c:	2300      	movs	r3, #0
 801bd4e:	6363      	str	r3, [r4, #52]	@ 0x34
 801bd50:	e00d      	b.n	801bd6e <__sflush_r+0xae>
 801bd52:	2301      	movs	r3, #1
 801bd54:	4628      	mov	r0, r5
 801bd56:	47b0      	blx	r6
 801bd58:	4602      	mov	r2, r0
 801bd5a:	1c50      	adds	r0, r2, #1
 801bd5c:	d1c9      	bne.n	801bcf2 <__sflush_r+0x32>
 801bd5e:	682b      	ldr	r3, [r5, #0]
 801bd60:	2b00      	cmp	r3, #0
 801bd62:	d0c6      	beq.n	801bcf2 <__sflush_r+0x32>
 801bd64:	2b1d      	cmp	r3, #29
 801bd66:	d001      	beq.n	801bd6c <__sflush_r+0xac>
 801bd68:	2b16      	cmp	r3, #22
 801bd6a:	d11e      	bne.n	801bdaa <__sflush_r+0xea>
 801bd6c:	602f      	str	r7, [r5, #0]
 801bd6e:	2000      	movs	r0, #0
 801bd70:	e022      	b.n	801bdb8 <__sflush_r+0xf8>
 801bd72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bd76:	b21b      	sxth	r3, r3
 801bd78:	e01b      	b.n	801bdb2 <__sflush_r+0xf2>
 801bd7a:	690f      	ldr	r7, [r1, #16]
 801bd7c:	2f00      	cmp	r7, #0
 801bd7e:	d0f6      	beq.n	801bd6e <__sflush_r+0xae>
 801bd80:	0793      	lsls	r3, r2, #30
 801bd82:	680e      	ldr	r6, [r1, #0]
 801bd84:	bf08      	it	eq
 801bd86:	694b      	ldreq	r3, [r1, #20]
 801bd88:	600f      	str	r7, [r1, #0]
 801bd8a:	bf18      	it	ne
 801bd8c:	2300      	movne	r3, #0
 801bd8e:	eba6 0807 	sub.w	r8, r6, r7
 801bd92:	608b      	str	r3, [r1, #8]
 801bd94:	f1b8 0f00 	cmp.w	r8, #0
 801bd98:	dde9      	ble.n	801bd6e <__sflush_r+0xae>
 801bd9a:	6a21      	ldr	r1, [r4, #32]
 801bd9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801bd9e:	4643      	mov	r3, r8
 801bda0:	463a      	mov	r2, r7
 801bda2:	4628      	mov	r0, r5
 801bda4:	47b0      	blx	r6
 801bda6:	2800      	cmp	r0, #0
 801bda8:	dc08      	bgt.n	801bdbc <__sflush_r+0xfc>
 801bdaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bdae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bdb2:	81a3      	strh	r3, [r4, #12]
 801bdb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bdb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bdbc:	4407      	add	r7, r0
 801bdbe:	eba8 0800 	sub.w	r8, r8, r0
 801bdc2:	e7e7      	b.n	801bd94 <__sflush_r+0xd4>
 801bdc4:	dfbffffe 	.word	0xdfbffffe

0801bdc8 <_fflush_r>:
 801bdc8:	b538      	push	{r3, r4, r5, lr}
 801bdca:	690b      	ldr	r3, [r1, #16]
 801bdcc:	4605      	mov	r5, r0
 801bdce:	460c      	mov	r4, r1
 801bdd0:	b913      	cbnz	r3, 801bdd8 <_fflush_r+0x10>
 801bdd2:	2500      	movs	r5, #0
 801bdd4:	4628      	mov	r0, r5
 801bdd6:	bd38      	pop	{r3, r4, r5, pc}
 801bdd8:	b118      	cbz	r0, 801bde2 <_fflush_r+0x1a>
 801bdda:	6a03      	ldr	r3, [r0, #32]
 801bddc:	b90b      	cbnz	r3, 801bde2 <_fflush_r+0x1a>
 801bdde:	f7ff f8e1 	bl	801afa4 <__sinit>
 801bde2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bde6:	2b00      	cmp	r3, #0
 801bde8:	d0f3      	beq.n	801bdd2 <_fflush_r+0xa>
 801bdea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801bdec:	07d0      	lsls	r0, r2, #31
 801bdee:	d404      	bmi.n	801bdfa <_fflush_r+0x32>
 801bdf0:	0599      	lsls	r1, r3, #22
 801bdf2:	d402      	bmi.n	801bdfa <_fflush_r+0x32>
 801bdf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bdf6:	f7ff fbe8 	bl	801b5ca <__retarget_lock_acquire_recursive>
 801bdfa:	4628      	mov	r0, r5
 801bdfc:	4621      	mov	r1, r4
 801bdfe:	f7ff ff5f 	bl	801bcc0 <__sflush_r>
 801be02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801be04:	07da      	lsls	r2, r3, #31
 801be06:	4605      	mov	r5, r0
 801be08:	d4e4      	bmi.n	801bdd4 <_fflush_r+0xc>
 801be0a:	89a3      	ldrh	r3, [r4, #12]
 801be0c:	059b      	lsls	r3, r3, #22
 801be0e:	d4e1      	bmi.n	801bdd4 <_fflush_r+0xc>
 801be10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801be12:	f7ff fbdb 	bl	801b5cc <__retarget_lock_release_recursive>
 801be16:	e7dd      	b.n	801bdd4 <_fflush_r+0xc>

0801be18 <fiprintf>:
 801be18:	b40e      	push	{r1, r2, r3}
 801be1a:	b503      	push	{r0, r1, lr}
 801be1c:	4601      	mov	r1, r0
 801be1e:	ab03      	add	r3, sp, #12
 801be20:	4805      	ldr	r0, [pc, #20]	@ (801be38 <fiprintf+0x20>)
 801be22:	f853 2b04 	ldr.w	r2, [r3], #4
 801be26:	6800      	ldr	r0, [r0, #0]
 801be28:	9301      	str	r3, [sp, #4]
 801be2a:	f000 f8bb 	bl	801bfa4 <_vfiprintf_r>
 801be2e:	b002      	add	sp, #8
 801be30:	f85d eb04 	ldr.w	lr, [sp], #4
 801be34:	b003      	add	sp, #12
 801be36:	4770      	bx	lr
 801be38:	24000294 	.word	0x24000294

0801be3c <__swhatbuf_r>:
 801be3c:	b570      	push	{r4, r5, r6, lr}
 801be3e:	460c      	mov	r4, r1
 801be40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801be44:	2900      	cmp	r1, #0
 801be46:	b096      	sub	sp, #88	@ 0x58
 801be48:	4615      	mov	r5, r2
 801be4a:	461e      	mov	r6, r3
 801be4c:	da0d      	bge.n	801be6a <__swhatbuf_r+0x2e>
 801be4e:	89a3      	ldrh	r3, [r4, #12]
 801be50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801be54:	f04f 0100 	mov.w	r1, #0
 801be58:	bf14      	ite	ne
 801be5a:	2340      	movne	r3, #64	@ 0x40
 801be5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801be60:	2000      	movs	r0, #0
 801be62:	6031      	str	r1, [r6, #0]
 801be64:	602b      	str	r3, [r5, #0]
 801be66:	b016      	add	sp, #88	@ 0x58
 801be68:	bd70      	pop	{r4, r5, r6, pc}
 801be6a:	466a      	mov	r2, sp
 801be6c:	f000 f848 	bl	801bf00 <_fstat_r>
 801be70:	2800      	cmp	r0, #0
 801be72:	dbec      	blt.n	801be4e <__swhatbuf_r+0x12>
 801be74:	9901      	ldr	r1, [sp, #4]
 801be76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801be7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801be7e:	4259      	negs	r1, r3
 801be80:	4159      	adcs	r1, r3
 801be82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801be86:	e7eb      	b.n	801be60 <__swhatbuf_r+0x24>

0801be88 <__smakebuf_r>:
 801be88:	898b      	ldrh	r3, [r1, #12]
 801be8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801be8c:	079d      	lsls	r5, r3, #30
 801be8e:	4606      	mov	r6, r0
 801be90:	460c      	mov	r4, r1
 801be92:	d507      	bpl.n	801bea4 <__smakebuf_r+0x1c>
 801be94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801be98:	6023      	str	r3, [r4, #0]
 801be9a:	6123      	str	r3, [r4, #16]
 801be9c:	2301      	movs	r3, #1
 801be9e:	6163      	str	r3, [r4, #20]
 801bea0:	b003      	add	sp, #12
 801bea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bea4:	ab01      	add	r3, sp, #4
 801bea6:	466a      	mov	r2, sp
 801bea8:	f7ff ffc8 	bl	801be3c <__swhatbuf_r>
 801beac:	9f00      	ldr	r7, [sp, #0]
 801beae:	4605      	mov	r5, r0
 801beb0:	4639      	mov	r1, r7
 801beb2:	4630      	mov	r0, r6
 801beb4:	f7fe fe44 	bl	801ab40 <_malloc_r>
 801beb8:	b948      	cbnz	r0, 801bece <__smakebuf_r+0x46>
 801beba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bebe:	059a      	lsls	r2, r3, #22
 801bec0:	d4ee      	bmi.n	801bea0 <__smakebuf_r+0x18>
 801bec2:	f023 0303 	bic.w	r3, r3, #3
 801bec6:	f043 0302 	orr.w	r3, r3, #2
 801beca:	81a3      	strh	r3, [r4, #12]
 801becc:	e7e2      	b.n	801be94 <__smakebuf_r+0xc>
 801bece:	89a3      	ldrh	r3, [r4, #12]
 801bed0:	6020      	str	r0, [r4, #0]
 801bed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801bed6:	81a3      	strh	r3, [r4, #12]
 801bed8:	9b01      	ldr	r3, [sp, #4]
 801beda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801bede:	b15b      	cbz	r3, 801bef8 <__smakebuf_r+0x70>
 801bee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bee4:	4630      	mov	r0, r6
 801bee6:	f000 f81d 	bl	801bf24 <_isatty_r>
 801beea:	b128      	cbz	r0, 801bef8 <__smakebuf_r+0x70>
 801beec:	89a3      	ldrh	r3, [r4, #12]
 801beee:	f023 0303 	bic.w	r3, r3, #3
 801bef2:	f043 0301 	orr.w	r3, r3, #1
 801bef6:	81a3      	strh	r3, [r4, #12]
 801bef8:	89a3      	ldrh	r3, [r4, #12]
 801befa:	431d      	orrs	r5, r3
 801befc:	81a5      	strh	r5, [r4, #12]
 801befe:	e7cf      	b.n	801bea0 <__smakebuf_r+0x18>

0801bf00 <_fstat_r>:
 801bf00:	b538      	push	{r3, r4, r5, lr}
 801bf02:	4d07      	ldr	r5, [pc, #28]	@ (801bf20 <_fstat_r+0x20>)
 801bf04:	2300      	movs	r3, #0
 801bf06:	4604      	mov	r4, r0
 801bf08:	4608      	mov	r0, r1
 801bf0a:	4611      	mov	r1, r2
 801bf0c:	602b      	str	r3, [r5, #0]
 801bf0e:	f7e5 fdf1 	bl	8001af4 <_fstat>
 801bf12:	1c43      	adds	r3, r0, #1
 801bf14:	d102      	bne.n	801bf1c <_fstat_r+0x1c>
 801bf16:	682b      	ldr	r3, [r5, #0]
 801bf18:	b103      	cbz	r3, 801bf1c <_fstat_r+0x1c>
 801bf1a:	6023      	str	r3, [r4, #0]
 801bf1c:	bd38      	pop	{r3, r4, r5, pc}
 801bf1e:	bf00      	nop
 801bf20:	24068858 	.word	0x24068858

0801bf24 <_isatty_r>:
 801bf24:	b538      	push	{r3, r4, r5, lr}
 801bf26:	4d06      	ldr	r5, [pc, #24]	@ (801bf40 <_isatty_r+0x1c>)
 801bf28:	2300      	movs	r3, #0
 801bf2a:	4604      	mov	r4, r0
 801bf2c:	4608      	mov	r0, r1
 801bf2e:	602b      	str	r3, [r5, #0]
 801bf30:	f7e5 fdf0 	bl	8001b14 <_isatty>
 801bf34:	1c43      	adds	r3, r0, #1
 801bf36:	d102      	bne.n	801bf3e <_isatty_r+0x1a>
 801bf38:	682b      	ldr	r3, [r5, #0]
 801bf3a:	b103      	cbz	r3, 801bf3e <_isatty_r+0x1a>
 801bf3c:	6023      	str	r3, [r4, #0]
 801bf3e:	bd38      	pop	{r3, r4, r5, pc}
 801bf40:	24068858 	.word	0x24068858

0801bf44 <abort>:
 801bf44:	b508      	push	{r3, lr}
 801bf46:	2006      	movs	r0, #6
 801bf48:	f000 f96c 	bl	801c224 <raise>
 801bf4c:	2001      	movs	r0, #1
 801bf4e:	f7e5 fd81 	bl	8001a54 <_exit>

0801bf52 <__sfputc_r>:
 801bf52:	6893      	ldr	r3, [r2, #8]
 801bf54:	3b01      	subs	r3, #1
 801bf56:	2b00      	cmp	r3, #0
 801bf58:	b410      	push	{r4}
 801bf5a:	6093      	str	r3, [r2, #8]
 801bf5c:	da08      	bge.n	801bf70 <__sfputc_r+0x1e>
 801bf5e:	6994      	ldr	r4, [r2, #24]
 801bf60:	42a3      	cmp	r3, r4
 801bf62:	db01      	blt.n	801bf68 <__sfputc_r+0x16>
 801bf64:	290a      	cmp	r1, #10
 801bf66:	d103      	bne.n	801bf70 <__sfputc_r+0x1e>
 801bf68:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bf6c:	f7ff b95a 	b.w	801b224 <__swbuf_r>
 801bf70:	6813      	ldr	r3, [r2, #0]
 801bf72:	1c58      	adds	r0, r3, #1
 801bf74:	6010      	str	r0, [r2, #0]
 801bf76:	7019      	strb	r1, [r3, #0]
 801bf78:	4608      	mov	r0, r1
 801bf7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bf7e:	4770      	bx	lr

0801bf80 <__sfputs_r>:
 801bf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf82:	4606      	mov	r6, r0
 801bf84:	460f      	mov	r7, r1
 801bf86:	4614      	mov	r4, r2
 801bf88:	18d5      	adds	r5, r2, r3
 801bf8a:	42ac      	cmp	r4, r5
 801bf8c:	d101      	bne.n	801bf92 <__sfputs_r+0x12>
 801bf8e:	2000      	movs	r0, #0
 801bf90:	e007      	b.n	801bfa2 <__sfputs_r+0x22>
 801bf92:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf96:	463a      	mov	r2, r7
 801bf98:	4630      	mov	r0, r6
 801bf9a:	f7ff ffda 	bl	801bf52 <__sfputc_r>
 801bf9e:	1c43      	adds	r3, r0, #1
 801bfa0:	d1f3      	bne.n	801bf8a <__sfputs_r+0xa>
 801bfa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801bfa4 <_vfiprintf_r>:
 801bfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfa8:	460d      	mov	r5, r1
 801bfaa:	b09d      	sub	sp, #116	@ 0x74
 801bfac:	4614      	mov	r4, r2
 801bfae:	4698      	mov	r8, r3
 801bfb0:	4606      	mov	r6, r0
 801bfb2:	b118      	cbz	r0, 801bfbc <_vfiprintf_r+0x18>
 801bfb4:	6a03      	ldr	r3, [r0, #32]
 801bfb6:	b90b      	cbnz	r3, 801bfbc <_vfiprintf_r+0x18>
 801bfb8:	f7fe fff4 	bl	801afa4 <__sinit>
 801bfbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bfbe:	07d9      	lsls	r1, r3, #31
 801bfc0:	d405      	bmi.n	801bfce <_vfiprintf_r+0x2a>
 801bfc2:	89ab      	ldrh	r3, [r5, #12]
 801bfc4:	059a      	lsls	r2, r3, #22
 801bfc6:	d402      	bmi.n	801bfce <_vfiprintf_r+0x2a>
 801bfc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bfca:	f7ff fafe 	bl	801b5ca <__retarget_lock_acquire_recursive>
 801bfce:	89ab      	ldrh	r3, [r5, #12]
 801bfd0:	071b      	lsls	r3, r3, #28
 801bfd2:	d501      	bpl.n	801bfd8 <_vfiprintf_r+0x34>
 801bfd4:	692b      	ldr	r3, [r5, #16]
 801bfd6:	b99b      	cbnz	r3, 801c000 <_vfiprintf_r+0x5c>
 801bfd8:	4629      	mov	r1, r5
 801bfda:	4630      	mov	r0, r6
 801bfdc:	f7ff f960 	bl	801b2a0 <__swsetup_r>
 801bfe0:	b170      	cbz	r0, 801c000 <_vfiprintf_r+0x5c>
 801bfe2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bfe4:	07dc      	lsls	r4, r3, #31
 801bfe6:	d504      	bpl.n	801bff2 <_vfiprintf_r+0x4e>
 801bfe8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bfec:	b01d      	add	sp, #116	@ 0x74
 801bfee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bff2:	89ab      	ldrh	r3, [r5, #12]
 801bff4:	0598      	lsls	r0, r3, #22
 801bff6:	d4f7      	bmi.n	801bfe8 <_vfiprintf_r+0x44>
 801bff8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bffa:	f7ff fae7 	bl	801b5cc <__retarget_lock_release_recursive>
 801bffe:	e7f3      	b.n	801bfe8 <_vfiprintf_r+0x44>
 801c000:	2300      	movs	r3, #0
 801c002:	9309      	str	r3, [sp, #36]	@ 0x24
 801c004:	2320      	movs	r3, #32
 801c006:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c00a:	f8cd 800c 	str.w	r8, [sp, #12]
 801c00e:	2330      	movs	r3, #48	@ 0x30
 801c010:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c1c0 <_vfiprintf_r+0x21c>
 801c014:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c018:	f04f 0901 	mov.w	r9, #1
 801c01c:	4623      	mov	r3, r4
 801c01e:	469a      	mov	sl, r3
 801c020:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c024:	b10a      	cbz	r2, 801c02a <_vfiprintf_r+0x86>
 801c026:	2a25      	cmp	r2, #37	@ 0x25
 801c028:	d1f9      	bne.n	801c01e <_vfiprintf_r+0x7a>
 801c02a:	ebba 0b04 	subs.w	fp, sl, r4
 801c02e:	d00b      	beq.n	801c048 <_vfiprintf_r+0xa4>
 801c030:	465b      	mov	r3, fp
 801c032:	4622      	mov	r2, r4
 801c034:	4629      	mov	r1, r5
 801c036:	4630      	mov	r0, r6
 801c038:	f7ff ffa2 	bl	801bf80 <__sfputs_r>
 801c03c:	3001      	adds	r0, #1
 801c03e:	f000 80a7 	beq.w	801c190 <_vfiprintf_r+0x1ec>
 801c042:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c044:	445a      	add	r2, fp
 801c046:	9209      	str	r2, [sp, #36]	@ 0x24
 801c048:	f89a 3000 	ldrb.w	r3, [sl]
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	f000 809f 	beq.w	801c190 <_vfiprintf_r+0x1ec>
 801c052:	2300      	movs	r3, #0
 801c054:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c058:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c05c:	f10a 0a01 	add.w	sl, sl, #1
 801c060:	9304      	str	r3, [sp, #16]
 801c062:	9307      	str	r3, [sp, #28]
 801c064:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c068:	931a      	str	r3, [sp, #104]	@ 0x68
 801c06a:	4654      	mov	r4, sl
 801c06c:	2205      	movs	r2, #5
 801c06e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c072:	4853      	ldr	r0, [pc, #332]	@ (801c1c0 <_vfiprintf_r+0x21c>)
 801c074:	f7e4 f94c 	bl	8000310 <memchr>
 801c078:	9a04      	ldr	r2, [sp, #16]
 801c07a:	b9d8      	cbnz	r0, 801c0b4 <_vfiprintf_r+0x110>
 801c07c:	06d1      	lsls	r1, r2, #27
 801c07e:	bf44      	itt	mi
 801c080:	2320      	movmi	r3, #32
 801c082:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c086:	0713      	lsls	r3, r2, #28
 801c088:	bf44      	itt	mi
 801c08a:	232b      	movmi	r3, #43	@ 0x2b
 801c08c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c090:	f89a 3000 	ldrb.w	r3, [sl]
 801c094:	2b2a      	cmp	r3, #42	@ 0x2a
 801c096:	d015      	beq.n	801c0c4 <_vfiprintf_r+0x120>
 801c098:	9a07      	ldr	r2, [sp, #28]
 801c09a:	4654      	mov	r4, sl
 801c09c:	2000      	movs	r0, #0
 801c09e:	f04f 0c0a 	mov.w	ip, #10
 801c0a2:	4621      	mov	r1, r4
 801c0a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c0a8:	3b30      	subs	r3, #48	@ 0x30
 801c0aa:	2b09      	cmp	r3, #9
 801c0ac:	d94b      	bls.n	801c146 <_vfiprintf_r+0x1a2>
 801c0ae:	b1b0      	cbz	r0, 801c0de <_vfiprintf_r+0x13a>
 801c0b0:	9207      	str	r2, [sp, #28]
 801c0b2:	e014      	b.n	801c0de <_vfiprintf_r+0x13a>
 801c0b4:	eba0 0308 	sub.w	r3, r0, r8
 801c0b8:	fa09 f303 	lsl.w	r3, r9, r3
 801c0bc:	4313      	orrs	r3, r2
 801c0be:	9304      	str	r3, [sp, #16]
 801c0c0:	46a2      	mov	sl, r4
 801c0c2:	e7d2      	b.n	801c06a <_vfiprintf_r+0xc6>
 801c0c4:	9b03      	ldr	r3, [sp, #12]
 801c0c6:	1d19      	adds	r1, r3, #4
 801c0c8:	681b      	ldr	r3, [r3, #0]
 801c0ca:	9103      	str	r1, [sp, #12]
 801c0cc:	2b00      	cmp	r3, #0
 801c0ce:	bfbb      	ittet	lt
 801c0d0:	425b      	neglt	r3, r3
 801c0d2:	f042 0202 	orrlt.w	r2, r2, #2
 801c0d6:	9307      	strge	r3, [sp, #28]
 801c0d8:	9307      	strlt	r3, [sp, #28]
 801c0da:	bfb8      	it	lt
 801c0dc:	9204      	strlt	r2, [sp, #16]
 801c0de:	7823      	ldrb	r3, [r4, #0]
 801c0e0:	2b2e      	cmp	r3, #46	@ 0x2e
 801c0e2:	d10a      	bne.n	801c0fa <_vfiprintf_r+0x156>
 801c0e4:	7863      	ldrb	r3, [r4, #1]
 801c0e6:	2b2a      	cmp	r3, #42	@ 0x2a
 801c0e8:	d132      	bne.n	801c150 <_vfiprintf_r+0x1ac>
 801c0ea:	9b03      	ldr	r3, [sp, #12]
 801c0ec:	1d1a      	adds	r2, r3, #4
 801c0ee:	681b      	ldr	r3, [r3, #0]
 801c0f0:	9203      	str	r2, [sp, #12]
 801c0f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c0f6:	3402      	adds	r4, #2
 801c0f8:	9305      	str	r3, [sp, #20]
 801c0fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801c1d0 <_vfiprintf_r+0x22c>
 801c0fe:	7821      	ldrb	r1, [r4, #0]
 801c100:	2203      	movs	r2, #3
 801c102:	4650      	mov	r0, sl
 801c104:	f7e4 f904 	bl	8000310 <memchr>
 801c108:	b138      	cbz	r0, 801c11a <_vfiprintf_r+0x176>
 801c10a:	9b04      	ldr	r3, [sp, #16]
 801c10c:	eba0 000a 	sub.w	r0, r0, sl
 801c110:	2240      	movs	r2, #64	@ 0x40
 801c112:	4082      	lsls	r2, r0
 801c114:	4313      	orrs	r3, r2
 801c116:	3401      	adds	r4, #1
 801c118:	9304      	str	r3, [sp, #16]
 801c11a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c11e:	4829      	ldr	r0, [pc, #164]	@ (801c1c4 <_vfiprintf_r+0x220>)
 801c120:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c124:	2206      	movs	r2, #6
 801c126:	f7e4 f8f3 	bl	8000310 <memchr>
 801c12a:	2800      	cmp	r0, #0
 801c12c:	d03f      	beq.n	801c1ae <_vfiprintf_r+0x20a>
 801c12e:	4b26      	ldr	r3, [pc, #152]	@ (801c1c8 <_vfiprintf_r+0x224>)
 801c130:	bb1b      	cbnz	r3, 801c17a <_vfiprintf_r+0x1d6>
 801c132:	9b03      	ldr	r3, [sp, #12]
 801c134:	3307      	adds	r3, #7
 801c136:	f023 0307 	bic.w	r3, r3, #7
 801c13a:	3308      	adds	r3, #8
 801c13c:	9303      	str	r3, [sp, #12]
 801c13e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c140:	443b      	add	r3, r7
 801c142:	9309      	str	r3, [sp, #36]	@ 0x24
 801c144:	e76a      	b.n	801c01c <_vfiprintf_r+0x78>
 801c146:	fb0c 3202 	mla	r2, ip, r2, r3
 801c14a:	460c      	mov	r4, r1
 801c14c:	2001      	movs	r0, #1
 801c14e:	e7a8      	b.n	801c0a2 <_vfiprintf_r+0xfe>
 801c150:	2300      	movs	r3, #0
 801c152:	3401      	adds	r4, #1
 801c154:	9305      	str	r3, [sp, #20]
 801c156:	4619      	mov	r1, r3
 801c158:	f04f 0c0a 	mov.w	ip, #10
 801c15c:	4620      	mov	r0, r4
 801c15e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c162:	3a30      	subs	r2, #48	@ 0x30
 801c164:	2a09      	cmp	r2, #9
 801c166:	d903      	bls.n	801c170 <_vfiprintf_r+0x1cc>
 801c168:	2b00      	cmp	r3, #0
 801c16a:	d0c6      	beq.n	801c0fa <_vfiprintf_r+0x156>
 801c16c:	9105      	str	r1, [sp, #20]
 801c16e:	e7c4      	b.n	801c0fa <_vfiprintf_r+0x156>
 801c170:	fb0c 2101 	mla	r1, ip, r1, r2
 801c174:	4604      	mov	r4, r0
 801c176:	2301      	movs	r3, #1
 801c178:	e7f0      	b.n	801c15c <_vfiprintf_r+0x1b8>
 801c17a:	ab03      	add	r3, sp, #12
 801c17c:	9300      	str	r3, [sp, #0]
 801c17e:	462a      	mov	r2, r5
 801c180:	4b12      	ldr	r3, [pc, #72]	@ (801c1cc <_vfiprintf_r+0x228>)
 801c182:	a904      	add	r1, sp, #16
 801c184:	4630      	mov	r0, r6
 801c186:	f3af 8000 	nop.w
 801c18a:	4607      	mov	r7, r0
 801c18c:	1c78      	adds	r0, r7, #1
 801c18e:	d1d6      	bne.n	801c13e <_vfiprintf_r+0x19a>
 801c190:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c192:	07d9      	lsls	r1, r3, #31
 801c194:	d405      	bmi.n	801c1a2 <_vfiprintf_r+0x1fe>
 801c196:	89ab      	ldrh	r3, [r5, #12]
 801c198:	059a      	lsls	r2, r3, #22
 801c19a:	d402      	bmi.n	801c1a2 <_vfiprintf_r+0x1fe>
 801c19c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c19e:	f7ff fa15 	bl	801b5cc <__retarget_lock_release_recursive>
 801c1a2:	89ab      	ldrh	r3, [r5, #12]
 801c1a4:	065b      	lsls	r3, r3, #25
 801c1a6:	f53f af1f 	bmi.w	801bfe8 <_vfiprintf_r+0x44>
 801c1aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c1ac:	e71e      	b.n	801bfec <_vfiprintf_r+0x48>
 801c1ae:	ab03      	add	r3, sp, #12
 801c1b0:	9300      	str	r3, [sp, #0]
 801c1b2:	462a      	mov	r2, r5
 801c1b4:	4b05      	ldr	r3, [pc, #20]	@ (801c1cc <_vfiprintf_r+0x228>)
 801c1b6:	a904      	add	r1, sp, #16
 801c1b8:	4630      	mov	r0, r6
 801c1ba:	f7ff fc61 	bl	801ba80 <_printf_i>
 801c1be:	e7e4      	b.n	801c18a <_vfiprintf_r+0x1e6>
 801c1c0:	0801d112 	.word	0x0801d112
 801c1c4:	0801d11c 	.word	0x0801d11c
 801c1c8:	00000000 	.word	0x00000000
 801c1cc:	0801bf81 	.word	0x0801bf81
 801c1d0:	0801d118 	.word	0x0801d118

0801c1d4 <_raise_r>:
 801c1d4:	291f      	cmp	r1, #31
 801c1d6:	b538      	push	{r3, r4, r5, lr}
 801c1d8:	4605      	mov	r5, r0
 801c1da:	460c      	mov	r4, r1
 801c1dc:	d904      	bls.n	801c1e8 <_raise_r+0x14>
 801c1de:	2316      	movs	r3, #22
 801c1e0:	6003      	str	r3, [r0, #0]
 801c1e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c1e6:	bd38      	pop	{r3, r4, r5, pc}
 801c1e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c1ea:	b112      	cbz	r2, 801c1f2 <_raise_r+0x1e>
 801c1ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c1f0:	b94b      	cbnz	r3, 801c206 <_raise_r+0x32>
 801c1f2:	4628      	mov	r0, r5
 801c1f4:	f000 f830 	bl	801c258 <_getpid_r>
 801c1f8:	4622      	mov	r2, r4
 801c1fa:	4601      	mov	r1, r0
 801c1fc:	4628      	mov	r0, r5
 801c1fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c202:	f000 b817 	b.w	801c234 <_kill_r>
 801c206:	2b01      	cmp	r3, #1
 801c208:	d00a      	beq.n	801c220 <_raise_r+0x4c>
 801c20a:	1c59      	adds	r1, r3, #1
 801c20c:	d103      	bne.n	801c216 <_raise_r+0x42>
 801c20e:	2316      	movs	r3, #22
 801c210:	6003      	str	r3, [r0, #0]
 801c212:	2001      	movs	r0, #1
 801c214:	e7e7      	b.n	801c1e6 <_raise_r+0x12>
 801c216:	2100      	movs	r1, #0
 801c218:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c21c:	4620      	mov	r0, r4
 801c21e:	4798      	blx	r3
 801c220:	2000      	movs	r0, #0
 801c222:	e7e0      	b.n	801c1e6 <_raise_r+0x12>

0801c224 <raise>:
 801c224:	4b02      	ldr	r3, [pc, #8]	@ (801c230 <raise+0xc>)
 801c226:	4601      	mov	r1, r0
 801c228:	6818      	ldr	r0, [r3, #0]
 801c22a:	f7ff bfd3 	b.w	801c1d4 <_raise_r>
 801c22e:	bf00      	nop
 801c230:	24000294 	.word	0x24000294

0801c234 <_kill_r>:
 801c234:	b538      	push	{r3, r4, r5, lr}
 801c236:	4d07      	ldr	r5, [pc, #28]	@ (801c254 <_kill_r+0x20>)
 801c238:	2300      	movs	r3, #0
 801c23a:	4604      	mov	r4, r0
 801c23c:	4608      	mov	r0, r1
 801c23e:	4611      	mov	r1, r2
 801c240:	602b      	str	r3, [r5, #0]
 801c242:	f7e5 fbf7 	bl	8001a34 <_kill>
 801c246:	1c43      	adds	r3, r0, #1
 801c248:	d102      	bne.n	801c250 <_kill_r+0x1c>
 801c24a:	682b      	ldr	r3, [r5, #0]
 801c24c:	b103      	cbz	r3, 801c250 <_kill_r+0x1c>
 801c24e:	6023      	str	r3, [r4, #0]
 801c250:	bd38      	pop	{r3, r4, r5, pc}
 801c252:	bf00      	nop
 801c254:	24068858 	.word	0x24068858

0801c258 <_getpid_r>:
 801c258:	f7e5 bbe4 	b.w	8001a24 <_getpid>

0801c25c <_init>:
 801c25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c25e:	bf00      	nop
 801c260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c262:	bc08      	pop	{r3}
 801c264:	469e      	mov	lr, r3
 801c266:	4770      	bx	lr

0801c268 <_fini>:
 801c268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c26a:	bf00      	nop
 801c26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c26e:	bc08      	pop	{r3}
 801c270:	469e      	mov	lr, r3
 801c272:	4770      	bx	lr
