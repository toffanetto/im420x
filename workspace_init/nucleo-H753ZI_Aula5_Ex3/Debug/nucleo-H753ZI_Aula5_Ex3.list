
nucleo-H753ZI_Aula5_Ex3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5e0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800a880  0800a880  0000b880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a984  0800a984  0000b984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a98c  0800a98c  0000b98c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a990  0800a990  0000b990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800a994  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800a9f8  0000c064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800aa58  0000c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005208  24000124  0800aab8  0000c124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400532c  0800aab8  0000c32c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c124  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029c3a  00000000  00000000  0000c152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fe7  00000000  00000000  00035d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dd8  00000000  00000000  0003ad78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001722  00000000  00000000  0003cb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c779  00000000  00000000  0003e272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025ba3  00000000  00000000  0007a9eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001776be  00000000  00000000  000a058e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00217c4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081f0  00000000  00000000  00217c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0021fe80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a868 	.word	0x0800a868

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800a868 	.word	0x0800a868

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000650 <MX_ETH_Init+0x80>)
 80005d6:	4a1f      	ldr	r2, [pc, #124]	@ (8000654 <MX_ETH_Init+0x84>)
 80005d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005da:	4b1f      	ldr	r3, [pc, #124]	@ (8000658 <MX_ETH_Init+0x88>)
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000658 <MX_ETH_Init+0x88>)
 80005e2:	2280      	movs	r2, #128	@ 0x80
 80005e4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000658 <MX_ETH_Init+0x88>)
 80005e8:	22e1      	movs	r2, #225	@ 0xe1
 80005ea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000658 <MX_ETH_Init+0x88>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005f2:	4b19      	ldr	r3, [pc, #100]	@ (8000658 <MX_ETH_Init+0x88>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80005f8:	4b17      	ldr	r3, [pc, #92]	@ (8000658 <MX_ETH_Init+0x88>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80005fe:	4b14      	ldr	r3, [pc, #80]	@ (8000650 <MX_ETH_Init+0x80>)
 8000600:	4a15      	ldr	r2, [pc, #84]	@ (8000658 <MX_ETH_Init+0x88>)
 8000602:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000604:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <MX_ETH_Init+0x80>)
 8000606:	2201      	movs	r2, #1
 8000608:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MX_ETH_Init+0x80>)
 800060c:	4a13      	ldr	r2, [pc, #76]	@ (800065c <MX_ETH_Init+0x8c>)
 800060e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000610:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <MX_ETH_Init+0x80>)
 8000612:	4a13      	ldr	r2, [pc, #76]	@ (8000660 <MX_ETH_Init+0x90>)
 8000614:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000616:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <MX_ETH_Init+0x80>)
 8000618:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800061c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800061e:	480c      	ldr	r0, [pc, #48]	@ (8000650 <MX_ETH_Init+0x80>)
 8000620:	f001 f902 	bl	8001828 <HAL_ETH_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800062a:	f000 fcb1 	bl	8000f90 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800062e:	2238      	movs	r2, #56	@ 0x38
 8000630:	2100      	movs	r1, #0
 8000632:	480c      	ldr	r0, [pc, #48]	@ (8000664 <MX_ETH_Init+0x94>)
 8000634:	f00a f830 	bl	800a698 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <MX_ETH_Init+0x94>)
 800063a:	2221      	movs	r2, #33	@ 0x21
 800063c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800063e:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <MX_ETH_Init+0x94>)
 8000640:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000644:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000646:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <MX_ETH_Init+0x94>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	24000178 	.word	0x24000178
 8000654:	40028000 	.word	0x40028000
 8000658:	24000228 	.word	0x24000228
 800065c:	240000c4 	.word	0x240000c4
 8000660:	24000064 	.word	0x24000064
 8000664:	24000140 	.word	0x24000140

08000668 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08e      	sub	sp, #56	@ 0x38
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a59      	ldr	r2, [pc, #356]	@ (80007ec <HAL_ETH_MspInit+0x184>)
 8000686:	4293      	cmp	r3, r2
 8000688:	f040 80ab 	bne.w	80007e2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800068c:	4b58      	ldr	r3, [pc, #352]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 800068e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000692:	4a57      	ldr	r2, [pc, #348]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000694:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000698:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800069c:	4b54      	ldr	r3, [pc, #336]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 800069e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80006a6:	623b      	str	r3, [r7, #32]
 80006a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80006aa:	4b51      	ldr	r3, [pc, #324]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006b0:	4a4f      	ldr	r2, [pc, #316]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006b6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006ba:	4b4d      	ldr	r3, [pc, #308]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006c4:	61fb      	str	r3, [r7, #28]
 80006c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80006c8:	4b49      	ldr	r3, [pc, #292]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006ce:	4a48      	ldr	r2, [pc, #288]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006d4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006d8:	4b45      	ldr	r3, [pc, #276]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006e2:	61bb      	str	r3, [r7, #24]
 80006e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	4b42      	ldr	r3, [pc, #264]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ec:	4a40      	ldr	r2, [pc, #256]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006ee:	f043 0304 	orr.w	r3, r3, #4
 80006f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006f6:	4b3e      	ldr	r3, [pc, #248]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	617b      	str	r3, [r7, #20]
 8000702:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	4b3a      	ldr	r3, [pc, #232]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800070a:	4a39      	ldr	r2, [pc, #228]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000714:	4b36      	ldr	r3, [pc, #216]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	4b33      	ldr	r3, [pc, #204]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000728:	4a31      	ldr	r2, [pc, #196]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 800072a:	f043 0302 	orr.w	r3, r3, #2
 800072e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000732:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000738:	f003 0302 	and.w	r3, r3, #2
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000740:	4b2b      	ldr	r3, [pc, #172]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000746:	4a2a      	ldr	r2, [pc, #168]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800074c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000750:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800075e:	2332      	movs	r3, #50	@ 0x32
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000762:	2302      	movs	r3, #2
 8000764:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800076e:	230b      	movs	r3, #11
 8000770:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000776:	4619      	mov	r1, r3
 8000778:	481e      	ldr	r0, [pc, #120]	@ (80007f4 <HAL_ETH_MspInit+0x18c>)
 800077a:	f001 fc89 	bl	8002090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800077e:	2386      	movs	r3, #134	@ 0x86
 8000780:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078e:	230b      	movs	r3, #11
 8000790:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000796:	4619      	mov	r1, r3
 8000798:	4817      	ldr	r0, [pc, #92]	@ (80007f8 <HAL_ETH_MspInit+0x190>)
 800079a:	f001 fc79 	bl	8002090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800079e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b0:	230b      	movs	r3, #11
 80007b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b8:	4619      	mov	r1, r3
 80007ba:	4810      	ldr	r0, [pc, #64]	@ (80007fc <HAL_ETH_MspInit+0x194>)
 80007bc:	f001 fc68 	bl	8002090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80007c0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d2:	230b      	movs	r3, #11
 80007d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007da:	4619      	mov	r1, r3
 80007dc:	4808      	ldr	r0, [pc, #32]	@ (8000800 <HAL_ETH_MspInit+0x198>)
 80007de:	f001 fc57 	bl	8002090 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007e2:	bf00      	nop
 80007e4:	3738      	adds	r7, #56	@ 0x38
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40028000 	.word	0x40028000
 80007f0:	58024400 	.word	0x58024400
 80007f4:	58020800 	.word	0x58020800
 80007f8:	58020000 	.word	0x58020000
 80007fc:	58020400 	.word	0x58020400
 8000800:	58021800 	.word	0x58021800

08000804 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexPrintf */
  MutexPrintfHandle = osMutexNew(&MutexPrintf_attributes);
 8000808:	480b      	ldr	r0, [pc, #44]	@ (8000838 <MX_FREERTOS_Init+0x34>)
 800080a:	f006 fe54 	bl	80074b6 <osMutexNew>
 800080e:	4603      	mov	r3, r0
 8000810:	4a0a      	ldr	r2, [pc, #40]	@ (800083c <MX_FREERTOS_Init+0x38>)
 8000812:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000814:	4a0a      	ldr	r2, [pc, #40]	@ (8000840 <MX_FREERTOS_Init+0x3c>)
 8000816:	2100      	movs	r1, #0
 8000818:	480a      	ldr	r0, [pc, #40]	@ (8000844 <MX_FREERTOS_Init+0x40>)
 800081a:	f006 fd9f 	bl	800735c <osThreadNew>
 800081e:	4603      	mov	r3, r0
 8000820:	4a09      	ldr	r2, [pc, #36]	@ (8000848 <MX_FREERTOS_Init+0x44>)
 8000822:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000824:	4a09      	ldr	r2, [pc, #36]	@ (800084c <MX_FREERTOS_Init+0x48>)
 8000826:	2100      	movs	r1, #0
 8000828:	4809      	ldr	r0, [pc, #36]	@ (8000850 <MX_FREERTOS_Init+0x4c>)
 800082a:	f006 fd97 	bl	800735c <osThreadNew>
 800082e:	4603      	mov	r3, r0
 8000830:	4a08      	ldr	r2, [pc, #32]	@ (8000854 <MX_FREERTOS_Init+0x50>)
 8000832:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	0800a93c 	.word	0x0800a93c
 800083c:	24000238 	.word	0x24000238
 8000840:	0800a8f4 	.word	0x0800a8f4
 8000844:	08000859 	.word	0x08000859
 8000848:	24000230 	.word	0x24000230
 800084c:	0800a918 	.word	0x0800a918
 8000850:	08000899 	.word	0x08000899
 8000854:	24000234 	.word	0x24000234

08000858 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask1 */
  /* Infinite loop */
  osDelay(1);  // Blocking Task1 for force Task2 to run first
 8000860:	2001      	movs	r0, #1
 8000862:	f006 fe0d 	bl	8007480 <osDelay>
  for(;;)
  {
	osMutexAcquire(MutexPrintfHandle, osWaitForever); // Acquiring mutex for printf
 8000866:	4b0a      	ldr	r3, [pc, #40]	@ (8000890 <StartTask1+0x38>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800086e:	4618      	mov	r0, r3
 8000870:	f006 fea7 	bl	80075c2 <osMutexAcquire>
    printf_("Printf escrito pela Task1\n\r"); // Running critical section
 8000874:	4807      	ldr	r0, [pc, #28]	@ (8000894 <StartTask1+0x3c>)
 8000876:	f000 facf 	bl	8000e18 <printf_>
    osMutexRelease(MutexPrintfHandle); // Releasing mutex for printf
 800087a:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <StartTask1+0x38>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4618      	mov	r0, r3
 8000880:	f006 feea 	bl	8007658 <osMutexRelease>
    osDelay(100);
 8000884:	2064      	movs	r0, #100	@ 0x64
 8000886:	f006 fdfb 	bl	8007480 <osDelay>
	osMutexAcquire(MutexPrintfHandle, osWaitForever); // Acquiring mutex for printf
 800088a:	bf00      	nop
 800088c:	e7eb      	b.n	8000866 <StartTask1+0xe>
 800088e:	bf00      	nop
 8000890:	24000238 	.word	0x24000238
 8000894:	0800a89c 	.word	0x0800a89c

08000898 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	osMutexAcquire(MutexPrintfHandle, osWaitForever); // Acquiring mutex for printf
 80008a0:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <StartTask2+0x30>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80008a8:	4618      	mov	r0, r3
 80008aa:	f006 fe8a 	bl	80075c2 <osMutexAcquire>
	printf_("Printf escrito pela Task2\n\r"); // Running critical section
 80008ae:	4807      	ldr	r0, [pc, #28]	@ (80008cc <StartTask2+0x34>)
 80008b0:	f000 fab2 	bl	8000e18 <printf_>
	osMutexRelease(MutexPrintfHandle); // Releasing mutex for printf
 80008b4:	4b04      	ldr	r3, [pc, #16]	@ (80008c8 <StartTask2+0x30>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f006 fecd 	bl	8007658 <osMutexRelease>
	osDelay(100);
 80008be:	2064      	movs	r0, #100	@ 0x64
 80008c0:	f006 fdde 	bl	8007480 <osDelay>
	osMutexAcquire(MutexPrintfHandle, osWaitForever); // Acquiring mutex for printf
 80008c4:	bf00      	nop
 80008c6:	e7eb      	b.n	80008a0 <StartTask2+0x8>
 80008c8:	24000238 	.word	0x24000238
 80008cc:	0800a8b8 	.word	0x0800a8b8

080008d0 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08c      	sub	sp, #48	@ 0x30
 80008d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	4b62      	ldr	r3, [pc, #392]	@ (8000a70 <MX_GPIO_Init+0x1a0>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ec:	4a60      	ldr	r2, [pc, #384]	@ (8000a70 <MX_GPIO_Init+0x1a0>)
 80008ee:	f043 0304 	orr.w	r3, r3, #4
 80008f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f6:	4b5e      	ldr	r3, [pc, #376]	@ (8000a70 <MX_GPIO_Init+0x1a0>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000904:	4b5a      	ldr	r3, [pc, #360]	@ (8000a70 <MX_GPIO_Init+0x1a0>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090a:	4a59      	ldr	r2, [pc, #356]	@ (8000a70 <MX_GPIO_Init+0x1a0>)
 800090c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000910:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000914:	4b56      	ldr	r3, [pc, #344]	@ (8000a70 <MX_GPIO_Init+0x1a0>)
 8000916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b53      	ldr	r3, [pc, #332]	@ (8000a70 <MX_GPIO_Init+0x1a0>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000928:	4a51      	ldr	r2, [pc, #324]	@ (8000a70 <MX_GPIO_Init+0x1a0>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000932:	4b4f      	ldr	r3, [pc, #316]	@ (8000a70 <MX_GPIO_Init+0x1a0>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000938:	f003 0301 	and.w	r3, r3, #1
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000940:	4b4b      	ldr	r3, [pc, #300]	@ (8000a70 <MX_GPIO_Init+0x1a0>)
 8000942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000946:	4a4a      	ldr	r2, [pc, #296]	@ (8000a70 <MX_GPIO_Init+0x1a0>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000950:	4b47      	ldr	r3, [pc, #284]	@ (8000a70 <MX_GPIO_Init+0x1a0>)
 8000952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095e:	4b44      	ldr	r3, [pc, #272]	@ (8000a70 <MX_GPIO_Init+0x1a0>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000964:	4a42      	ldr	r2, [pc, #264]	@ (8000a70 <MX_GPIO_Init+0x1a0>)
 8000966:	f043 0308 	orr.w	r3, r3, #8
 800096a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800096e:	4b40      	ldr	r3, [pc, #256]	@ (8000a70 <MX_GPIO_Init+0x1a0>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000974:	f003 0308 	and.w	r3, r3, #8
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800097c:	4b3c      	ldr	r3, [pc, #240]	@ (8000a70 <MX_GPIO_Init+0x1a0>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000982:	4a3b      	ldr	r2, [pc, #236]	@ (8000a70 <MX_GPIO_Init+0x1a0>)
 8000984:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000988:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800098c:	4b38      	ldr	r3, [pc, #224]	@ (8000a70 <MX_GPIO_Init+0x1a0>)
 800098e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800099a:	4b35      	ldr	r3, [pc, #212]	@ (8000a70 <MX_GPIO_Init+0x1a0>)
 800099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a0:	4a33      	ldr	r2, [pc, #204]	@ (8000a70 <MX_GPIO_Init+0x1a0>)
 80009a2:	f043 0310 	orr.w	r3, r3, #16
 80009a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009aa:	4b31      	ldr	r3, [pc, #196]	@ (8000a70 <MX_GPIO_Init+0x1a0>)
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b0:	f003 0310 	and.w	r3, r3, #16
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	f244 0101 	movw	r1, #16385	@ 0x4001
 80009be:	482d      	ldr	r0, [pc, #180]	@ (8000a74 <MX_GPIO_Init+0x1a4>)
 80009c0:	f001 fd16 	bl	80023f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009ca:	482b      	ldr	r0, [pc, #172]	@ (8000a78 <MX_GPIO_Init+0x1a8>)
 80009cc:	f001 fd10 	bl	80023f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2102      	movs	r1, #2
 80009d4:	4829      	ldr	r0, [pc, #164]	@ (8000a7c <MX_GPIO_Init+0x1ac>)
 80009d6:	f001 fd0b 	bl	80023f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	4824      	ldr	r0, [pc, #144]	@ (8000a80 <MX_GPIO_Init+0x1b0>)
 80009f0:	f001 fb4e 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009f4:	f244 0301 	movw	r3, #16385	@ 0x4001
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4819      	ldr	r0, [pc, #100]	@ (8000a74 <MX_GPIO_Init+0x1a4>)
 8000a0e:	f001 fb3f 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000a12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4813      	ldr	r0, [pc, #76]	@ (8000a78 <MX_GPIO_Init+0x1a8>)
 8000a2c:	f001 fb30 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000a30:	2380      	movs	r3, #128	@ 0x80
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a34:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	480f      	ldr	r0, [pc, #60]	@ (8000a84 <MX_GPIO_Init+0x1b4>)
 8000a46:	f001 fb23 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4806      	ldr	r0, [pc, #24]	@ (8000a7c <MX_GPIO_Init+0x1ac>)
 8000a62:	f001 fb15 	bl	8002090 <HAL_GPIO_Init>

}
 8000a66:	bf00      	nop
 8000a68:	3730      	adds	r7, #48	@ 0x30
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	58024400 	.word	0x58024400
 8000a74:	58020400 	.word	0x58020400
 8000a78:	58020c00 	.word	0x58020c00
 8000a7c:	58021000 	.word	0x58021000
 8000a80:	58020800 	.word	0x58020800
 8000a84:	58021800 	.word	0x58021800

08000a88 <printchar_>:

// Included added to allow for the use of HAL UART library
#include "usart.h"

static void printchar_(char **str, int c)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
	if (str) {
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d00a      	beq.n	8000aae <printchar_+0x26>
		**str = (char)c;
 8000a98:	683a      	ldr	r2, [r7, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	701a      	strb	r2, [r3, #0]
		++(*str);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	1c5a      	adds	r2, r3, #1
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	601a      	str	r2, [r3, #0]
	else
	{
		//(void)putchar_(c);
		HAL_UART_Transmit(&huart3,(uint8_t *)&c, 1, 10); // Using UART3
	}
}
 8000aac:	e005      	b.n	8000aba <printchar_+0x32>
		HAL_UART_Transmit(&huart3,(uint8_t *)&c, 1, 10); // Using UART3
 8000aae:	4639      	mov	r1, r7
 8000ab0:	230a      	movs	r3, #10
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4803      	ldr	r0, [pc, #12]	@ (8000ac4 <printchar_+0x3c>)
 8000ab6:	f004 ffa1 	bl	80059fc <HAL_UART_Transmit>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	24000288 	.word	0x24000288

08000ac8 <prints_>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints_(char **out, const char *string, int width, int pad)
{
 8000ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000acc:	b084      	sub	sp, #16
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	60f8      	str	r0, [r7, #12]
 8000ad2:	60b9      	str	r1, [r7, #8]
 8000ad4:	607a      	str	r2, [r7, #4]
 8000ad6:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8000ad8:	2400      	movs	r4, #0
 8000ada:	f04f 0820 	mov.w	r8, #32

	if (width > 0) {
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	dd17      	ble.n	8000b14 <prints_+0x4c>
		register int len = 0;
 8000ae4:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8000ae6:	68be      	ldr	r6, [r7, #8]
 8000ae8:	e001      	b.n	8000aee <prints_+0x26>
 8000aea:	3501      	adds	r5, #1
 8000aec:	3601      	adds	r6, #1
 8000aee:	7833      	ldrb	r3, [r6, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1fa      	bne.n	8000aea <prints_+0x22>
		if (len >= width) width = 0;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	429d      	cmp	r5, r3
 8000af8:	db02      	blt.n	8000b00 <prints_+0x38>
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	e002      	b.n	8000b06 <prints_+0x3e>
		else width -= len;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	1b5b      	subs	r3, r3, r5
 8000b04:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	f003 0302 	and.w	r3, r3, #2
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <prints_+0x4c>
 8000b10:	f04f 0830 	mov.w	r8, #48	@ 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d116      	bne.n	8000b4c <prints_+0x84>
		for ( ; width > 0; --width) {
 8000b1e:	e007      	b.n	8000b30 <prints_+0x68>
			printchar_(out, padchar);
 8000b20:	4641      	mov	r1, r8
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	f7ff ffb0 	bl	8000a88 <printchar_>
			++pc;
 8000b28:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	dcf4      	bgt.n	8000b20 <prints_+0x58>
		}
	}
	for ( ; *string ; ++string) {
 8000b36:	e009      	b.n	8000b4c <prints_+0x84>
		printchar_(out, *string);
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	68f8      	ldr	r0, [r7, #12]
 8000b40:	f7ff ffa2 	bl	8000a88 <printchar_>
		++pc;
 8000b44:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d1f1      	bne.n	8000b38 <prints_+0x70>
	}
	for ( ; width > 0; --width) {
 8000b54:	e007      	b.n	8000b66 <prints_+0x9e>
		printchar_(out, padchar);
 8000b56:	4641      	mov	r1, r8
 8000b58:	68f8      	ldr	r0, [r7, #12]
 8000b5a:	f7ff ff95 	bl	8000a88 <printchar_>
		++pc;
 8000b5e:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	dcf4      	bgt.n	8000b56 <prints_+0x8e>
	}

	return pc;
 8000b6c:	4623      	mov	r3, r4
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000b78 <printi_>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi_(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8000b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b7c:	b089      	sub	sp, #36	@ 0x24
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	60f8      	str	r0, [r7, #12]
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
 8000b86:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8000b88:	f04f 0900 	mov.w	r9, #0
 8000b8c:	2600      	movs	r6, #0
	register unsigned int u = (unsigned int)i;
 8000b8e:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d10c      	bne.n	8000bb0 <printi_+0x38>
		print_buf[0] = '0';
 8000b96:	2330      	movs	r3, #48	@ 0x30
 8000b98:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	757b      	strb	r3, [r7, #21]
		return prints_(out, print_buf, width, pad);
 8000b9e:	f107 0114 	add.w	r1, r7, #20
 8000ba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ba4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000ba6:	68f8      	ldr	r0, [r7, #12]
 8000ba8:	f7ff ff8e 	bl	8000ac8 <prints_>
 8000bac:	4603      	mov	r3, r0
 8000bae:	e04a      	b.n	8000c46 <printi_+0xce>
	}

	if (sg && b == 10 && i < 0) {
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d00a      	beq.n	8000bcc <printi_+0x54>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b0a      	cmp	r3, #10
 8000bba:	d107      	bne.n	8000bcc <printi_+0x54>
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	da04      	bge.n	8000bcc <printi_+0x54>
		neg = 1;
 8000bc2:	f04f 0901 	mov.w	r9, #1
		u = (unsigned int)-i;
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	425b      	negs	r3, r3
 8000bca:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8000bcc:	f107 0414 	add.w	r4, r7, #20
 8000bd0:	340b      	adds	r4, #11
	*s = '\0';
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	7023      	strb	r3, [r4, #0]

	while (u) {
 8000bd6:	e015      	b.n	8000c04 <printi_+0x8c>
		t = (unsigned int)u % b;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	fbb5 f2f3 	udiv	r2, r5, r3
 8000bde:	fb02 f303 	mul.w	r3, r2, r3
 8000be2:	1aeb      	subs	r3, r5, r3
 8000be4:	4698      	mov	r8, r3
		if( t >= 10 )
 8000be6:	f1b8 0f09 	cmp.w	r8, #9
 8000bea:	dd02      	ble.n	8000bf2 <printi_+0x7a>
			t += letbase - '0' - 10;
 8000bec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000bee:	3b3a      	subs	r3, #58	@ 0x3a
 8000bf0:	4498      	add	r8, r3
		*--s = (char)(t + '0');
 8000bf2:	fa5f f388 	uxtb.w	r3, r8
 8000bf6:	3c01      	subs	r4, #1
 8000bf8:	3330      	adds	r3, #48	@ 0x30
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	7023      	strb	r3, [r4, #0]
		u /= b;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	fbb5 f5f3 	udiv	r5, r5, r3
	while (u) {
 8000c04:	2d00      	cmp	r5, #0
 8000c06:	d1e7      	bne.n	8000bd8 <printi_+0x60>
	}

	if (neg) {
 8000c08:	f1b9 0f00 	cmp.w	r9, #0
 8000c0c:	d013      	beq.n	8000c36 <printi_+0xbe>
		if( width && (pad & PAD_ZERO) ) {
 8000c0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d00d      	beq.n	8000c30 <printi_+0xb8>
 8000c14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d008      	beq.n	8000c30 <printi_+0xb8>
			printchar_(out, '-');
 8000c1e:	212d      	movs	r1, #45	@ 0x2d
 8000c20:	68f8      	ldr	r0, [r7, #12]
 8000c22:	f7ff ff31 	bl	8000a88 <printchar_>
			++pc;
 8000c26:	3601      	adds	r6, #1
			--width;
 8000c28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8000c2e:	e002      	b.n	8000c36 <printi_+0xbe>
		}
		else {
			*--s = '-';
 8000c30:	3c01      	subs	r4, #1
 8000c32:	232d      	movs	r3, #45	@ 0x2d
 8000c34:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints_(out, s, width, pad);
 8000c36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000c3a:	4621      	mov	r1, r4
 8000c3c:	68f8      	ldr	r0, [r7, #12]
 8000c3e:	f7ff ff43 	bl	8000ac8 <prints_>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4433      	add	r3, r6
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	@ 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c50 <print_>:

static int print_( char **out, const char *format, va_list args )
{
 8000c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c54:	b08a      	sub	sp, #40	@ 0x28
 8000c56:	af04      	add	r7, sp, #16
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8000c5e:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8000c60:	e0c4      	b.n	8000dec <print_+0x19c>
		if (*format == '%') {
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b25      	cmp	r3, #37	@ 0x25
 8000c68:	f040 80b3 	bne.w	8000dd2 <print_+0x182>
			++format;
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8000c72:	2600      	movs	r6, #0
 8000c74:	4635      	mov	r5, r6
			if (*format == '\0') break;
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f000 80bc 	beq.w	8000df8 <print_+0x1a8>
			if (*format == '%') goto out;
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b25      	cmp	r3, #37	@ 0x25
 8000c86:	f000 80a6 	beq.w	8000dd6 <print_+0x186>
			if (*format == '-') {
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b2d      	cmp	r3, #45	@ 0x2d
 8000c90:	d109      	bne.n	8000ca6 <print_+0x56>
				++format;
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	3301      	adds	r3, #1
 8000c96:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8000c98:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8000c9a:	e004      	b.n	8000ca6 <print_+0x56>
				++format;
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8000ca2:	f046 0602 	orr.w	r6, r6, #2
			while (*format == '0') {
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b30      	cmp	r3, #48	@ 0x30
 8000cac:	d0f6      	beq.n	8000c9c <print_+0x4c>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000cae:	e00b      	b.n	8000cc8 <print_+0x78>
				width *= 10;
 8000cb0:	462b      	mov	r3, r5
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	442b      	add	r3, r5
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	461d      	mov	r5, r3
				width += *format - '0';
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	3b30      	subs	r3, #48	@ 0x30
 8000cc0:	441d      	add	r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b2f      	cmp	r3, #47	@ 0x2f
 8000cce:	d903      	bls.n	8000cd8 <print_+0x88>
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b39      	cmp	r3, #57	@ 0x39
 8000cd6:	d9eb      	bls.n	8000cb0 <print_+0x60>
			}
			if( *format == 's' ) {
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b73      	cmp	r3, #115	@ 0x73
 8000cde:	d112      	bne.n	8000d06 <print_+0xb6>
				register char *s = (char *)va_arg( args, int );
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	1d1a      	adds	r2, r3, #4
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4698      	mov	r8, r3
				pc += prints_(out, s?s:"(null)", width, pad);
 8000cea:	f1b8 0f00 	cmp.w	r8, #0
 8000cee:	d001      	beq.n	8000cf4 <print_+0xa4>
 8000cf0:	4641      	mov	r1, r8
 8000cf2:	e000      	b.n	8000cf6 <print_+0xa6>
 8000cf4:	4947      	ldr	r1, [pc, #284]	@ (8000e14 <print_+0x1c4>)
 8000cf6:	4633      	mov	r3, r6
 8000cf8:	462a      	mov	r2, r5
 8000cfa:	68f8      	ldr	r0, [r7, #12]
 8000cfc:	f7ff fee4 	bl	8000ac8 <prints_>
 8000d00:	4603      	mov	r3, r0
 8000d02:	441c      	add	r4, r3
				continue;
 8000d04:	e06f      	b.n	8000de6 <print_+0x196>
			}
			if( *format == 'd' ) {
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b64      	cmp	r3, #100	@ 0x64
 8000d0c:	d10f      	bne.n	8000d2e <print_+0xde>
				pc += printi_(out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	1d1a      	adds	r2, r3, #4
 8000d12:	607a      	str	r2, [r7, #4]
 8000d14:	6819      	ldr	r1, [r3, #0]
 8000d16:	2361      	movs	r3, #97	@ 0x61
 8000d18:	9302      	str	r3, [sp, #8]
 8000d1a:	9601      	str	r6, [sp, #4]
 8000d1c:	9500      	str	r5, [sp, #0]
 8000d1e:	2301      	movs	r3, #1
 8000d20:	220a      	movs	r2, #10
 8000d22:	68f8      	ldr	r0, [r7, #12]
 8000d24:	f7ff ff28 	bl	8000b78 <printi_>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	441c      	add	r4, r3
				continue;
 8000d2c:	e05b      	b.n	8000de6 <print_+0x196>
			}
			if( *format == 'x' ) {
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b78      	cmp	r3, #120	@ 0x78
 8000d34:	d10f      	bne.n	8000d56 <print_+0x106>
				pc += printi_(out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	1d1a      	adds	r2, r3, #4
 8000d3a:	607a      	str	r2, [r7, #4]
 8000d3c:	6819      	ldr	r1, [r3, #0]
 8000d3e:	2361      	movs	r3, #97	@ 0x61
 8000d40:	9302      	str	r3, [sp, #8]
 8000d42:	9601      	str	r6, [sp, #4]
 8000d44:	9500      	str	r5, [sp, #0]
 8000d46:	2300      	movs	r3, #0
 8000d48:	2210      	movs	r2, #16
 8000d4a:	68f8      	ldr	r0, [r7, #12]
 8000d4c:	f7ff ff14 	bl	8000b78 <printi_>
 8000d50:	4603      	mov	r3, r0
 8000d52:	441c      	add	r4, r3
				continue;
 8000d54:	e047      	b.n	8000de6 <print_+0x196>
			}
			if( *format == 'X' ) {
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b58      	cmp	r3, #88	@ 0x58
 8000d5c:	d10f      	bne.n	8000d7e <print_+0x12e>
				pc += printi_(out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	1d1a      	adds	r2, r3, #4
 8000d62:	607a      	str	r2, [r7, #4]
 8000d64:	6819      	ldr	r1, [r3, #0]
 8000d66:	2341      	movs	r3, #65	@ 0x41
 8000d68:	9302      	str	r3, [sp, #8]
 8000d6a:	9601      	str	r6, [sp, #4]
 8000d6c:	9500      	str	r5, [sp, #0]
 8000d6e:	2300      	movs	r3, #0
 8000d70:	2210      	movs	r2, #16
 8000d72:	68f8      	ldr	r0, [r7, #12]
 8000d74:	f7ff ff00 	bl	8000b78 <printi_>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	441c      	add	r4, r3
				continue;
 8000d7c:	e033      	b.n	8000de6 <print_+0x196>
			}
			if( *format == 'u' ) {
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b75      	cmp	r3, #117	@ 0x75
 8000d84:	d10f      	bne.n	8000da6 <print_+0x156>
				pc += printi_(out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	1d1a      	adds	r2, r3, #4
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	6819      	ldr	r1, [r3, #0]
 8000d8e:	2361      	movs	r3, #97	@ 0x61
 8000d90:	9302      	str	r3, [sp, #8]
 8000d92:	9601      	str	r6, [sp, #4]
 8000d94:	9500      	str	r5, [sp, #0]
 8000d96:	2300      	movs	r3, #0
 8000d98:	220a      	movs	r2, #10
 8000d9a:	68f8      	ldr	r0, [r7, #12]
 8000d9c:	f7ff feec 	bl	8000b78 <printi_>
 8000da0:	4603      	mov	r3, r0
 8000da2:	441c      	add	r4, r3
				continue;
 8000da4:	e01f      	b.n	8000de6 <print_+0x196>
			}
			if( *format == 'c' ) {
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b63      	cmp	r3, #99	@ 0x63
 8000dac:	d11b      	bne.n	8000de6 <print_+0x196>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	1d1a      	adds	r2, r3, #4
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 8000dba:	2300      	movs	r3, #0
 8000dbc:	757b      	strb	r3, [r7, #21]
				pc += prints_(out, scr, width, pad);
 8000dbe:	f107 0114 	add.w	r1, r7, #20
 8000dc2:	4633      	mov	r3, r6
 8000dc4:	462a      	mov	r2, r5
 8000dc6:	68f8      	ldr	r0, [r7, #12]
 8000dc8:	f7ff fe7e 	bl	8000ac8 <prints_>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	441c      	add	r4, r3
				continue;
 8000dd0:	e009      	b.n	8000de6 <print_+0x196>
			}
		}
		else {
		out:
 8000dd2:	bf00      	nop
 8000dd4:	e000      	b.n	8000dd8 <print_+0x188>
			if (*format == '%') goto out;
 8000dd6:	bf00      	nop
			printchar_(out, *format);
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	68f8      	ldr	r0, [r7, #12]
 8000de0:	f7ff fe52 	bl	8000a88 <printchar_>
			++pc;
 8000de4:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	3301      	adds	r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	f47f af36 	bne.w	8000c62 <print_+0x12>
 8000df6:	e000      	b.n	8000dfa <print_+0x1aa>
			if (*format == '\0') break;
 8000df8:	bf00      	nop
		}
	}
	if (out) **out = '\0';
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d003      	beq.n	8000e08 <print_+0x1b8>
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8000e08:	4623      	mov	r3, r4
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e14:	0800a8d4 	.word	0x0800a8d4

08000e18 <printf_>:

int printf_(const char *format, ...)
{
 8000e18:	b40f      	push	{r0, r1, r2, r3}
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
        va_list args;

        va_start( args, format );
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	607b      	str	r3, [r7, #4]
        return print_( 0, format, args );
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	6939      	ldr	r1, [r7, #16]
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff ff10 	bl	8000c50 <print_>
 8000e30:	4603      	mov	r3, r0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e3c:	b004      	add	sp, #16
 8000e3e:	4770      	bx	lr

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e44:	f000 fb70 	bl	8001528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e48:	f000 f810 	bl	8000e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4c:	f7ff fd40 	bl	80008d0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000e50:	f7ff fbbe 	bl	80005d0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000e54:	f000 f9da 	bl	800120c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e58:	f000 fa8e 	bl	8001378 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e5c:	f006 fa34 	bl	80072c8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000e60:	f7ff fcd0 	bl	8000804 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000e64:	f006 fa54 	bl	8007310 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <main+0x28>

08000e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b09c      	sub	sp, #112	@ 0x70
 8000e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e76:	224c      	movs	r2, #76	@ 0x4c
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f009 fc0c 	bl	800a698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2220      	movs	r2, #32
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f009 fc06 	bl	800a698 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	f001 fbf9 	bl	8002684 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e92:	2300      	movs	r3, #0
 8000e94:	603b      	str	r3, [r7, #0]
 8000e96:	4b33      	ldr	r3, [pc, #204]	@ (8000f64 <SystemClock_Config+0xf8>)
 8000e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e9a:	4a32      	ldr	r2, [pc, #200]	@ (8000f64 <SystemClock_Config+0xf8>)
 8000e9c:	f023 0301 	bic.w	r3, r3, #1
 8000ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000ea2:	4b30      	ldr	r3, [pc, #192]	@ (8000f64 <SystemClock_Config+0xf8>)
 8000ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	4b2e      	ldr	r3, [pc, #184]	@ (8000f68 <SystemClock_Config+0xfc>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000eb4:	4a2c      	ldr	r2, [pc, #176]	@ (8000f68 <SystemClock_Config+0xfc>)
 8000eb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000eba:	6193      	str	r3, [r2, #24]
 8000ebc:	4b2a      	ldr	r3, [pc, #168]	@ (8000f68 <SystemClock_Config+0xfc>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ec8:	bf00      	nop
 8000eca:	4b27      	ldr	r3, [pc, #156]	@ (8000f68 <SystemClock_Config+0xfc>)
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ed2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ed6:	d1f8      	bne.n	8000eca <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000edc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee6:	2340      	movs	r3, #64	@ 0x40
 8000ee8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eea:	2302      	movs	r3, #2
 8000eec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000ef6:	2318      	movs	r3, #24
 8000ef8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000efa:	2302      	movs	r3, #2
 8000efc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000efe:	2304      	movs	r3, #4
 8000f00:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f02:	2302      	movs	r3, #2
 8000f04:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f06:	230c      	movs	r3, #12
 8000f08:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f16:	4618      	mov	r0, r3
 8000f18:	f001 fbfe 	bl	8002718 <HAL_RCC_OscConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000f22:	f000 f835 	bl	8000f90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f26:	233f      	movs	r3, #63	@ 0x3f
 8000f28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 f83e 	bl	8002fcc <HAL_RCC_ClockConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000f56:	f000 f81b 	bl	8000f90 <Error_Handler>
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	3770      	adds	r7, #112	@ 0x70
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	58000400 	.word	0x58000400
 8000f68:	58024800 	.word	0x58024800

08000f6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a04      	ldr	r2, [pc, #16]	@ (8000f8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d101      	bne.n	8000f82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f7e:	f000 fb0f 	bl	80015a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40001000 	.word	0x40001000

08000f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f94:	b672      	cpsid	i
}
 8000f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <Error_Handler+0x8>

08000f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <HAL_MspInit+0x38>)
 8000fa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <HAL_MspInit+0x38>)
 8000faa:	f043 0302 	orr.w	r3, r3, #2
 8000fae:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000fb2:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <HAL_MspInit+0x38>)
 8000fb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fb8:	f003 0302 	and.w	r3, r3, #2
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	210f      	movs	r1, #15
 8000fc4:	f06f 0001 	mvn.w	r0, #1
 8000fc8:	f000 fc06 	bl	80017d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	58024400 	.word	0x58024400

08000fd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b090      	sub	sp, #64	@ 0x40
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b0f      	cmp	r3, #15
 8000fe4:	d827      	bhi.n	8001036 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	6879      	ldr	r1, [r7, #4]
 8000fea:	2036      	movs	r0, #54	@ 0x36
 8000fec:	f000 fbf4 	bl	80017d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ff0:	2036      	movs	r0, #54	@ 0x36
 8000ff2:	f000 fc0b 	bl	800180c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000ff6:	4a29      	ldr	r2, [pc, #164]	@ (800109c <HAL_InitTick+0xc4>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ffc:	4b28      	ldr	r3, [pc, #160]	@ (80010a0 <HAL_InitTick+0xc8>)
 8000ffe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001002:	4a27      	ldr	r2, [pc, #156]	@ (80010a0 <HAL_InitTick+0xc8>)
 8001004:	f043 0310 	orr.w	r3, r3, #16
 8001008:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800100c:	4b24      	ldr	r3, [pc, #144]	@ (80010a0 <HAL_InitTick+0xc8>)
 800100e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800101a:	f107 0210 	add.w	r2, r7, #16
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f002 fb5d 	bl	80036e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800102a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800102c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800102e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001030:	2b00      	cmp	r3, #0
 8001032:	d106      	bne.n	8001042 <HAL_InitTick+0x6a>
 8001034:	e001      	b.n	800103a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e02b      	b.n	8001092 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800103a:	f002 fb27 	bl	800368c <HAL_RCC_GetPCLK1Freq>
 800103e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001040:	e004      	b.n	800104c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001042:	f002 fb23 	bl	800368c <HAL_RCC_GetPCLK1Freq>
 8001046:	4603      	mov	r3, r0
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800104c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800104e:	4a15      	ldr	r2, [pc, #84]	@ (80010a4 <HAL_InitTick+0xcc>)
 8001050:	fba2 2303 	umull	r2, r3, r2, r3
 8001054:	0c9b      	lsrs	r3, r3, #18
 8001056:	3b01      	subs	r3, #1
 8001058:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800105a:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <HAL_InitTick+0xd0>)
 800105c:	4a13      	ldr	r2, [pc, #76]	@ (80010ac <HAL_InitTick+0xd4>)
 800105e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <HAL_InitTick+0xd0>)
 8001062:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001066:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001068:	4a0f      	ldr	r2, [pc, #60]	@ (80010a8 <HAL_InitTick+0xd0>)
 800106a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800106c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800106e:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <HAL_InitTick+0xd0>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001074:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <HAL_InitTick+0xd0>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800107a:	480b      	ldr	r0, [pc, #44]	@ (80010a8 <HAL_InitTick+0xd0>)
 800107c:	f004 f9a0 	bl	80053c0 <HAL_TIM_Base_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d104      	bne.n	8001090 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001086:	4808      	ldr	r0, [pc, #32]	@ (80010a8 <HAL_InitTick+0xd0>)
 8001088:	f004 f9fc 	bl	8005484 <HAL_TIM_Base_Start_IT>
 800108c:	4603      	mov	r3, r0
 800108e:	e000      	b.n	8001092 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
}
 8001092:	4618      	mov	r0, r3
 8001094:	3740      	adds	r7, #64	@ 0x40
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	24000008 	.word	0x24000008
 80010a0:	58024400 	.word	0x58024400
 80010a4:	431bde83 	.word	0x431bde83
 80010a8:	2400023c 	.word	0x2400023c
 80010ac:	40001000 	.word	0x40001000

080010b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <NMI_Handler+0x4>

080010b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <HardFault_Handler+0x4>

080010c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <MemManage_Handler+0x4>

080010c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <BusFault_Handler+0x4>

080010d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <UsageFault_Handler+0x4>

080010d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010ec:	4802      	ldr	r0, [pc, #8]	@ (80010f8 <TIM6_DAC_IRQHandler+0x10>)
 80010ee:	f004 fa41 	bl	8005574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2400023c 	.word	0x2400023c

080010fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001100:	4b37      	ldr	r3, [pc, #220]	@ (80011e0 <SystemInit+0xe4>)
 8001102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001106:	4a36      	ldr	r2, [pc, #216]	@ (80011e0 <SystemInit+0xe4>)
 8001108:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800110c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001110:	4b34      	ldr	r3, [pc, #208]	@ (80011e4 <SystemInit+0xe8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 030f 	and.w	r3, r3, #15
 8001118:	2b06      	cmp	r3, #6
 800111a:	d807      	bhi.n	800112c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800111c:	4b31      	ldr	r3, [pc, #196]	@ (80011e4 <SystemInit+0xe8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f023 030f 	bic.w	r3, r3, #15
 8001124:	4a2f      	ldr	r2, [pc, #188]	@ (80011e4 <SystemInit+0xe8>)
 8001126:	f043 0307 	orr.w	r3, r3, #7
 800112a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800112c:	4b2e      	ldr	r3, [pc, #184]	@ (80011e8 <SystemInit+0xec>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a2d      	ldr	r2, [pc, #180]	@ (80011e8 <SystemInit+0xec>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001138:	4b2b      	ldr	r3, [pc, #172]	@ (80011e8 <SystemInit+0xec>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800113e:	4b2a      	ldr	r3, [pc, #168]	@ (80011e8 <SystemInit+0xec>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4929      	ldr	r1, [pc, #164]	@ (80011e8 <SystemInit+0xec>)
 8001144:	4b29      	ldr	r3, [pc, #164]	@ (80011ec <SystemInit+0xf0>)
 8001146:	4013      	ands	r3, r2
 8001148:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800114a:	4b26      	ldr	r3, [pc, #152]	@ (80011e4 <SystemInit+0xe8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0308 	and.w	r3, r3, #8
 8001152:	2b00      	cmp	r3, #0
 8001154:	d007      	beq.n	8001166 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001156:	4b23      	ldr	r3, [pc, #140]	@ (80011e4 <SystemInit+0xe8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f023 030f 	bic.w	r3, r3, #15
 800115e:	4a21      	ldr	r2, [pc, #132]	@ (80011e4 <SystemInit+0xe8>)
 8001160:	f043 0307 	orr.w	r3, r3, #7
 8001164:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001166:	4b20      	ldr	r3, [pc, #128]	@ (80011e8 <SystemInit+0xec>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800116c:	4b1e      	ldr	r3, [pc, #120]	@ (80011e8 <SystemInit+0xec>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001172:	4b1d      	ldr	r3, [pc, #116]	@ (80011e8 <SystemInit+0xec>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001178:	4b1b      	ldr	r3, [pc, #108]	@ (80011e8 <SystemInit+0xec>)
 800117a:	4a1d      	ldr	r2, [pc, #116]	@ (80011f0 <SystemInit+0xf4>)
 800117c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800117e:	4b1a      	ldr	r3, [pc, #104]	@ (80011e8 <SystemInit+0xec>)
 8001180:	4a1c      	ldr	r2, [pc, #112]	@ (80011f4 <SystemInit+0xf8>)
 8001182:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001184:	4b18      	ldr	r3, [pc, #96]	@ (80011e8 <SystemInit+0xec>)
 8001186:	4a1c      	ldr	r2, [pc, #112]	@ (80011f8 <SystemInit+0xfc>)
 8001188:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800118a:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <SystemInit+0xec>)
 800118c:	2200      	movs	r2, #0
 800118e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001190:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <SystemInit+0xec>)
 8001192:	4a19      	ldr	r2, [pc, #100]	@ (80011f8 <SystemInit+0xfc>)
 8001194:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001196:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <SystemInit+0xec>)
 8001198:	2200      	movs	r2, #0
 800119a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800119c:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <SystemInit+0xec>)
 800119e:	4a16      	ldr	r2, [pc, #88]	@ (80011f8 <SystemInit+0xfc>)
 80011a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011a2:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <SystemInit+0xec>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <SystemInit+0xec>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0e      	ldr	r2, [pc, #56]	@ (80011e8 <SystemInit+0xec>)
 80011ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <SystemInit+0xec>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011ba:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <SystemInit+0x100>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <SystemInit+0x104>)
 80011c0:	4013      	ands	r3, r2
 80011c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011c6:	d202      	bcs.n	80011ce <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <SystemInit+0x108>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <SystemInit+0x10c>)
 80011d0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80011d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00
 80011e4:	52002000 	.word	0x52002000
 80011e8:	58024400 	.word	0x58024400
 80011ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80011f0:	02020200 	.word	0x02020200
 80011f4:	01ff0000 	.word	0x01ff0000
 80011f8:	01010280 	.word	0x01010280
 80011fc:	5c001000 	.word	0x5c001000
 8001200:	ffff0000 	.word	0xffff0000
 8001204:	51008108 	.word	0x51008108
 8001208:	52004000 	.word	0x52004000

0800120c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001210:	4b22      	ldr	r3, [pc, #136]	@ (800129c <MX_USART3_UART_Init+0x90>)
 8001212:	4a23      	ldr	r2, [pc, #140]	@ (80012a0 <MX_USART3_UART_Init+0x94>)
 8001214:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001216:	4b21      	ldr	r3, [pc, #132]	@ (800129c <MX_USART3_UART_Init+0x90>)
 8001218:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800121c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800121e:	4b1f      	ldr	r3, [pc, #124]	@ (800129c <MX_USART3_UART_Init+0x90>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001224:	4b1d      	ldr	r3, [pc, #116]	@ (800129c <MX_USART3_UART_Init+0x90>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800122a:	4b1c      	ldr	r3, [pc, #112]	@ (800129c <MX_USART3_UART_Init+0x90>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001230:	4b1a      	ldr	r3, [pc, #104]	@ (800129c <MX_USART3_UART_Init+0x90>)
 8001232:	220c      	movs	r2, #12
 8001234:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001236:	4b19      	ldr	r3, [pc, #100]	@ (800129c <MX_USART3_UART_Init+0x90>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800123c:	4b17      	ldr	r3, [pc, #92]	@ (800129c <MX_USART3_UART_Init+0x90>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001242:	4b16      	ldr	r3, [pc, #88]	@ (800129c <MX_USART3_UART_Init+0x90>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001248:	4b14      	ldr	r3, [pc, #80]	@ (800129c <MX_USART3_UART_Init+0x90>)
 800124a:	2200      	movs	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800124e:	4b13      	ldr	r3, [pc, #76]	@ (800129c <MX_USART3_UART_Init+0x90>)
 8001250:	2200      	movs	r2, #0
 8001252:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001254:	4811      	ldr	r0, [pc, #68]	@ (800129c <MX_USART3_UART_Init+0x90>)
 8001256:	f004 fb81 	bl	800595c <HAL_UART_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001260:	f7ff fe96 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001264:	2100      	movs	r1, #0
 8001266:	480d      	ldr	r0, [pc, #52]	@ (800129c <MX_USART3_UART_Init+0x90>)
 8001268:	f005 fc17 	bl	8006a9a <HAL_UARTEx_SetTxFifoThreshold>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001272:	f7ff fe8d 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001276:	2100      	movs	r1, #0
 8001278:	4808      	ldr	r0, [pc, #32]	@ (800129c <MX_USART3_UART_Init+0x90>)
 800127a:	f005 fc4c 	bl	8006b16 <HAL_UARTEx_SetRxFifoThreshold>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001284:	f7ff fe84 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001288:	4804      	ldr	r0, [pc, #16]	@ (800129c <MX_USART3_UART_Init+0x90>)
 800128a:	f005 fbcd 	bl	8006a28 <HAL_UARTEx_DisableFifoMode>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001294:	f7ff fe7c 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	24000288 	.word	0x24000288
 80012a0:	40004800 	.word	0x40004800

080012a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b0ba      	sub	sp, #232	@ 0xe8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	22c0      	movs	r2, #192	@ 0xc0
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f009 f9e7 	bl	800a698 <memset>
  if(uartHandle->Instance==USART3)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a27      	ldr	r2, [pc, #156]	@ (800136c <HAL_UART_MspInit+0xc8>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d146      	bne.n	8001362 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012d4:	f04f 0202 	mov.w	r2, #2
 80012d8:	f04f 0300 	mov.w	r3, #0
 80012dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 fa3c 	bl	8003768 <HAL_RCCEx_PeriphCLKConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012f6:	f7ff fe4b 	bl	8000f90 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001370 <HAL_UART_MspInit+0xcc>)
 80012fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001300:	4a1b      	ldr	r2, [pc, #108]	@ (8001370 <HAL_UART_MspInit+0xcc>)
 8001302:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001306:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800130a:	4b19      	ldr	r3, [pc, #100]	@ (8001370 <HAL_UART_MspInit+0xcc>)
 800130c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001310:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001318:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <HAL_UART_MspInit+0xcc>)
 800131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131e:	4a14      	ldr	r2, [pc, #80]	@ (8001370 <HAL_UART_MspInit+0xcc>)
 8001320:	f043 0308 	orr.w	r3, r3, #8
 8001324:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001328:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <HAL_UART_MspInit+0xcc>)
 800132a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001336:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800133a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001350:	2307      	movs	r3, #7
 8001352:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001356:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800135a:	4619      	mov	r1, r3
 800135c:	4805      	ldr	r0, [pc, #20]	@ (8001374 <HAL_UART_MspInit+0xd0>)
 800135e:	f000 fe97 	bl	8002090 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001362:	bf00      	nop
 8001364:	37e8      	adds	r7, #232	@ 0xe8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40004800 	.word	0x40004800
 8001370:	58024400 	.word	0x58024400
 8001374:	58020c00 	.word	0x58020c00

08001378 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800137c:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800137e:	4a16      	ldr	r2, [pc, #88]	@ (80013d8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001380:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001382:	4b14      	ldr	r3, [pc, #80]	@ (80013d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001384:	2209      	movs	r2, #9
 8001386:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001388:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800138a:	2202      	movs	r2, #2
 800138c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001390:	2200      	movs	r2, #0
 8001392:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001394:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001396:	2202      	movs	r2, #2
 8001398:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800139c:	2201      	movs	r2, #1
 800139e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80013ac:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013b8:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	@ (80013d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013c0:	f001 f82f 	bl	8002422 <HAL_PCD_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80013ca:	f7ff fde1 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2400031c 	.word	0x2400031c
 80013d8:	40080000 	.word	0x40080000

080013dc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b0ba      	sub	sp, #232	@ 0xe8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	22c0      	movs	r2, #192	@ 0xc0
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f009 f94b 	bl	800a698 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a30      	ldr	r2, [pc, #192]	@ (80014c8 <HAL_PCD_MspInit+0xec>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d159      	bne.n	80014c0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800140c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001418:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800141c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	4618      	mov	r0, r3
 8001426:	f002 f99f 	bl	8003768 <HAL_RCCEx_PeriphCLKConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001430:	f7ff fdae 	bl	8000f90 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001434:	f001 f960 	bl	80026f8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	4b24      	ldr	r3, [pc, #144]	@ (80014cc <HAL_PCD_MspInit+0xf0>)
 800143a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800143e:	4a23      	ldr	r2, [pc, #140]	@ (80014cc <HAL_PCD_MspInit+0xf0>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001448:	4b20      	ldr	r3, [pc, #128]	@ (80014cc <HAL_PCD_MspInit+0xf0>)
 800144a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001456:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800145a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001470:	230a      	movs	r3, #10
 8001472:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800147a:	4619      	mov	r1, r3
 800147c:	4814      	ldr	r0, [pc, #80]	@ (80014d0 <HAL_PCD_MspInit+0xf4>)
 800147e:	f000 fe07 	bl	8002090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001482:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001486:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800149a:	4619      	mov	r1, r3
 800149c:	480c      	ldr	r0, [pc, #48]	@ (80014d0 <HAL_PCD_MspInit+0xf4>)
 800149e:	f000 fdf7 	bl	8002090 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014a2:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <HAL_PCD_MspInit+0xf0>)
 80014a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014a8:	4a08      	ldr	r2, [pc, #32]	@ (80014cc <HAL_PCD_MspInit+0xf0>)
 80014aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80014ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_PCD_MspInit+0xf0>)
 80014b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80014c0:	bf00      	nop
 80014c2:	37e8      	adds	r7, #232	@ 0xe8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40080000 	.word	0x40080000
 80014cc:	58024400 	.word	0x58024400
 80014d0:	58020000 	.word	0x58020000

080014d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800150c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014d8:	f7ff fe10 	bl	80010fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014dc:	480c      	ldr	r0, [pc, #48]	@ (8001510 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014de:	490d      	ldr	r1, [pc, #52]	@ (8001514 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001518 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e4:	e002      	b.n	80014ec <LoopCopyDataInit>

080014e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ea:	3304      	adds	r3, #4

080014ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f0:	d3f9      	bcc.n	80014e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f2:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001520 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f8:	e001      	b.n	80014fe <LoopFillZerobss>

080014fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014fc:	3204      	adds	r2, #4

080014fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001500:	d3fb      	bcc.n	80014fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001502:	f009 f927 	bl	800a754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001506:	f7ff fc9b 	bl	8000e40 <main>
  bx  lr
 800150a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800150c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001510:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001514:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001518:	0800a994 	.word	0x0800a994
  ldr r2, =_sbss
 800151c:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 8001520:	2400532c 	.word	0x2400532c

08001524 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC3_IRQHandler>
	...

08001528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152e:	2003      	movs	r0, #3
 8001530:	f000 f947 	bl	80017c2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001534:	f001 ff00 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 8001538:	4602      	mov	r2, r0
 800153a:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <HAL_Init+0x68>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	0a1b      	lsrs	r3, r3, #8
 8001540:	f003 030f 	and.w	r3, r3, #15
 8001544:	4913      	ldr	r1, [pc, #76]	@ (8001594 <HAL_Init+0x6c>)
 8001546:	5ccb      	ldrb	r3, [r1, r3]
 8001548:	f003 031f 	and.w	r3, r3, #31
 800154c:	fa22 f303 	lsr.w	r3, r2, r3
 8001550:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001552:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <HAL_Init+0x68>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	4a0e      	ldr	r2, [pc, #56]	@ (8001594 <HAL_Init+0x6c>)
 800155c:	5cd3      	ldrb	r3, [r2, r3]
 800155e:	f003 031f 	and.w	r3, r3, #31
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
 8001568:	4a0b      	ldr	r2, [pc, #44]	@ (8001598 <HAL_Init+0x70>)
 800156a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800156c:	4a0b      	ldr	r2, [pc, #44]	@ (800159c <HAL_Init+0x74>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001572:	200f      	movs	r0, #15
 8001574:	f7ff fd30 	bl	8000fd8 <HAL_InitTick>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e002      	b.n	8001588 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001582:	f7ff fd0b 	bl	8000f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	58024400 	.word	0x58024400
 8001594:	0800a94c 	.word	0x0800a94c
 8001598:	24000004 	.word	0x24000004
 800159c:	24000000 	.word	0x24000000

080015a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <HAL_IncTick+0x20>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <HAL_IncTick+0x24>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	4a04      	ldr	r2, [pc, #16]	@ (80015c4 <HAL_IncTick+0x24>)
 80015b2:	6013      	str	r3, [r2, #0]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	2400000c 	.word	0x2400000c
 80015c4:	24000800 	.word	0x24000800

080015c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return uwTick;
 80015cc:	4b03      	ldr	r3, [pc, #12]	@ (80015dc <HAL_GetTick+0x14>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	24000800 	.word	0x24000800

080015e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e8:	f7ff ffee 	bl	80015c8 <HAL_GetTick>
 80015ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015f8:	d005      	beq.n	8001606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001624 <HAL_Delay+0x44>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4413      	add	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001606:	bf00      	nop
 8001608:	f7ff ffde 	bl	80015c8 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	429a      	cmp	r2, r3
 8001616:	d8f7      	bhi.n	8001608 <HAL_Delay+0x28>
  {
  }
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2400000c 	.word	0x2400000c

08001628 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800162c:	4b03      	ldr	r3, [pc, #12]	@ (800163c <HAL_GetREVID+0x14>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	0c1b      	lsrs	r3, r3, #16
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	5c001000 	.word	0x5c001000

08001640 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001648:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001650:	4904      	ldr	r1, [pc, #16]	@ (8001664 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	58000400 	.word	0x58000400

08001668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001678:	4b0b      	ldr	r3, [pc, #44]	@ (80016a8 <__NVIC_SetPriorityGrouping+0x40>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001684:	4013      	ands	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001690:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 8001692:	4313      	orrs	r3, r2
 8001694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001696:	4a04      	ldr	r2, [pc, #16]	@ (80016a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	60d3      	str	r3, [r2, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00
 80016ac:	05fa0000 	.word	0x05fa0000

080016b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b4:	4b04      	ldr	r3, [pc, #16]	@ (80016c8 <__NVIC_GetPriorityGrouping+0x18>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	f003 0307 	and.w	r3, r3, #7
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	db0b      	blt.n	80016f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	f003 021f 	and.w	r2, r3, #31
 80016e4:	4907      	ldr	r1, [pc, #28]	@ (8001704 <__NVIC_EnableIRQ+0x38>)
 80016e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	2001      	movs	r0, #1
 80016ee:	fa00 f202 	lsl.w	r2, r0, r2
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	@ (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	@ (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	@ 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	@ 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ff4c 	bl	8001668 <__NVIC_SetPriorityGrouping>
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
 80017e4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017e6:	f7ff ff63 	bl	80016b0 <__NVIC_GetPriorityGrouping>
 80017ea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	68b9      	ldr	r1, [r7, #8]
 80017f0:	6978      	ldr	r0, [r7, #20]
 80017f2:	f7ff ffb3 	bl	800175c <NVIC_EncodePriority>
 80017f6:	4602      	mov	r2, r0
 80017f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017fc:	4611      	mov	r1, r2
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff82 	bl	8001708 <__NVIC_SetPriority>
}
 8001804:	bf00      	nop
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ff56 	bl	80016cc <__NVIC_EnableIRQ>
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e0e3      	b.n	8001a02 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001840:	2b00      	cmp	r3, #0
 8001842:	d106      	bne.n	8001852 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2223      	movs	r2, #35	@ 0x23
 8001848:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7fe ff0b 	bl	8000668 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	4b6e      	ldr	r3, [pc, #440]	@ (8001a0c <HAL_ETH_Init+0x1e4>)
 8001854:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001858:	4a6c      	ldr	r2, [pc, #432]	@ (8001a0c <HAL_ETH_Init+0x1e4>)
 800185a:	f043 0302 	orr.w	r3, r3, #2
 800185e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001862:	4b6a      	ldr	r3, [pc, #424]	@ (8001a0c <HAL_ETH_Init+0x1e4>)
 8001864:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7a1b      	ldrb	r3, [r3, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d103      	bne.n	8001880 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001878:	2000      	movs	r0, #0
 800187a:	f7ff fee1 	bl	8001640 <HAL_SYSCFG_ETHInterfaceSelect>
 800187e:	e003      	b.n	8001888 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001880:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001884:	f7ff fedc 	bl	8001640 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001888:	4b61      	ldr	r3, [pc, #388]	@ (8001a10 <HAL_ETH_Init+0x1e8>)
 800188a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018a4:	f7ff fe90 	bl	80015c8 <HAL_GetTick>
 80018a8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80018aa:	e011      	b.n	80018d0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80018ac:	f7ff fe8c 	bl	80015c8 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80018ba:	d909      	bls.n	80018d0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2204      	movs	r2, #4
 80018c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	22e0      	movs	r2, #224	@ 0xe0
 80018c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e098      	b.n	8001a02 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1e4      	bne.n	80018ac <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f89e 	bl	8001a24 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80018e8:	f001 fea0 	bl	800362c <HAL_RCC_GetHCLKFreq>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4a49      	ldr	r2, [pc, #292]	@ (8001a14 <HAL_ETH_Init+0x1ec>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	0c9a      	lsrs	r2, r3, #18
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	3a01      	subs	r2, #1
 80018fc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 fa81 	bl	8001e08 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800190e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001912:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6812      	ldr	r2, [r2, #0]
 800191a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800191e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001922:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d009      	beq.n	8001946 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	22e0      	movs	r2, #224	@ 0xe0
 800193e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e05d      	b.n	8001a02 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800194e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001952:	4b31      	ldr	r3, [pc, #196]	@ (8001a18 <HAL_ETH_Init+0x1f0>)
 8001954:	4013      	ands	r3, r2
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6952      	ldr	r2, [r2, #20]
 800195a:	0051      	lsls	r1, r2, #1
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	430b      	orrs	r3, r1
 8001962:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001966:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 fae9 	bl	8001f42 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 fb2f 	bl	8001fd4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	3305      	adds	r3, #5
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	021a      	lsls	r2, r3, #8
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	3304      	adds	r3, #4
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	4619      	mov	r1, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	3303      	adds	r3, #3
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	061a      	lsls	r2, r3, #24
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	3302      	adds	r3, #2
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	041b      	lsls	r3, r3, #16
 80019a8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	3301      	adds	r3, #1
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019b4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019c2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019c4:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <HAL_ETH_Init+0x1f4>)
 80019d6:	430b      	orrs	r3, r1
 80019d8:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001a20 <HAL_ETH_Init+0x1f8>)
 80019ea:	430b      	orrs	r3, r1
 80019ec:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2210      	movs	r2, #16
 80019fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	58024400 	.word	0x58024400
 8001a10:	58000400 	.word	0x58000400
 8001a14:	431bde83 	.word	0x431bde83
 8001a18:	ffff8001 	.word	0xffff8001
 8001a1c:	0c020060 	.word	0x0c020060
 8001a20:	0c20c000 	.word	0x0c20c000

08001a24 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a34:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001a3e:	f001 fdf5 	bl	800362c <HAL_RCC_GetHCLKFreq>
 8001a42:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	4a1a      	ldr	r2, [pc, #104]	@ (8001ab0 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d804      	bhi.n	8001a56 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	e022      	b.n	8001a9c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	4a16      	ldr	r2, [pc, #88]	@ (8001ab4 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d204      	bcs.n	8001a68 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	e019      	b.n	8001a9c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4a13      	ldr	r2, [pc, #76]	@ (8001ab8 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d915      	bls.n	8001a9c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4a12      	ldr	r2, [pc, #72]	@ (8001abc <HAL_ETH_SetMDIOClockRange+0x98>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d804      	bhi.n	8001a82 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	e00c      	b.n	8001a9c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	4a0e      	ldr	r2, [pc, #56]	@ (8001ac0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d804      	bhi.n	8001a94 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	e003      	b.n	8001a9c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	02160ebf 	.word	0x02160ebf
 8001ab4:	03938700 	.word	0x03938700
 8001ab8:	05f5e0ff 	.word	0x05f5e0ff
 8001abc:	08f0d17f 	.word	0x08f0d17f
 8001ac0:	0ee6b27f 	.word	0x0ee6b27f

08001ac4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001ad6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	791b      	ldrb	r3, [r3, #4]
 8001adc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001ade:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	7b1b      	ldrb	r3, [r3, #12]
 8001ae4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001ae6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	7b5b      	ldrb	r3, [r3, #13]
 8001aec:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001aee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	7b9b      	ldrb	r3, [r3, #14]
 8001af4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001af6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	7bdb      	ldrb	r3, [r3, #15]
 8001afc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001afe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	7c12      	ldrb	r2, [r2, #16]
 8001b04:	2a00      	cmp	r2, #0
 8001b06:	d102      	bne.n	8001b0e <ETH_SetMACConfig+0x4a>
 8001b08:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b0c:	e000      	b.n	8001b10 <ETH_SetMACConfig+0x4c>
 8001b0e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b10:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	7c52      	ldrb	r2, [r2, #17]
 8001b16:	2a00      	cmp	r2, #0
 8001b18:	d102      	bne.n	8001b20 <ETH_SetMACConfig+0x5c>
 8001b1a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b1e:	e000      	b.n	8001b22 <ETH_SetMACConfig+0x5e>
 8001b20:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001b22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	7c9b      	ldrb	r3, [r3, #18]
 8001b28:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b2a:	431a      	orrs	r2, r3
               macconf->Speed |
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001b30:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001b36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	7f1b      	ldrb	r3, [r3, #28]
 8001b3c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001b3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	7f5b      	ldrb	r3, [r3, #29]
 8001b44:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001b46:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	7f92      	ldrb	r2, [r2, #30]
 8001b4c:	2a00      	cmp	r2, #0
 8001b4e:	d102      	bne.n	8001b56 <ETH_SetMACConfig+0x92>
 8001b50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b54:	e000      	b.n	8001b58 <ETH_SetMACConfig+0x94>
 8001b56:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001b58:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	7fdb      	ldrb	r3, [r3, #31]
 8001b5e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001b60:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001b68:	2a00      	cmp	r2, #0
 8001b6a:	d102      	bne.n	8001b72 <ETH_SetMACConfig+0xae>
 8001b6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b70:	e000      	b.n	8001b74 <ETH_SetMACConfig+0xb0>
 8001b72:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001b74:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001b7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001b82:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001b84:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b56      	ldr	r3, [pc, #344]	@ (8001cf0 <ETH_SetMACConfig+0x22c>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	68f9      	ldr	r1, [r7, #12]
 8001b9e:	430b      	orrs	r3, r1
 8001ba0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001bae:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001bb0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001bb8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001bba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001bc2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001bc4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001bcc:	2a00      	cmp	r2, #0
 8001bce:	d102      	bne.n	8001bd6 <ETH_SetMACConfig+0x112>
 8001bd0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001bd4:	e000      	b.n	8001bd8 <ETH_SetMACConfig+0x114>
 8001bd6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001bd8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001bde:	4313      	orrs	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	4b42      	ldr	r3, [pc, #264]	@ (8001cf4 <ETH_SetMACConfig+0x230>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	68f9      	ldr	r1, [r7, #12]
 8001bf2:	430b      	orrs	r3, r1
 8001bf4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bfc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c02:	4313      	orrs	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	4b3a      	ldr	r3, [pc, #232]	@ (8001cf8 <ETH_SetMACConfig+0x234>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	68f9      	ldr	r1, [r7, #12]
 8001c16:	430b      	orrs	r3, r1
 8001c18:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001c20:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c26:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001c2e:	2a00      	cmp	r2, #0
 8001c30:	d101      	bne.n	8001c36 <ETH_SetMACConfig+0x172>
 8001c32:	2280      	movs	r2, #128	@ 0x80
 8001c34:	e000      	b.n	8001c38 <ETH_SetMACConfig+0x174>
 8001c36:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001c38:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c3e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c40:	4313      	orrs	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001c4a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001c4e:	4013      	ands	r3, r2
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6812      	ldr	r2, [r2, #0]
 8001c54:	68f9      	ldr	r1, [r7, #12]
 8001c56:	430b      	orrs	r3, r1
 8001c58:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001c60:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001c68:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c76:	f023 0103 	bic.w	r1, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001c8e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001caa:	2a00      	cmp	r2, #0
 8001cac:	d101      	bne.n	8001cb2 <ETH_SetMACConfig+0x1ee>
 8001cae:	2240      	movs	r2, #64	@ 0x40
 8001cb0:	e000      	b.n	8001cb4 <ETH_SetMACConfig+0x1f0>
 8001cb2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001cb4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001cbc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001cbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001cc6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001cd4:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	00048083 	.word	0x00048083
 8001cf4:	c0f88000 	.word	0xc0f88000
 8001cf8:	fffffef0 	.word	0xfffffef0

08001cfc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b38      	ldr	r3, [pc, #224]	@ (8001df4 <ETH_SetDMAConfig+0xf8>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	6811      	ldr	r1, [r2, #0]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	430b      	orrs	r3, r1
 8001d1e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d22:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	791b      	ldrb	r3, [r3, #4]
 8001d28:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d2e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	7b1b      	ldrb	r3, [r3, #12]
 8001d34:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d36:	4313      	orrs	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	4b2c      	ldr	r3, [pc, #176]	@ (8001df8 <ETH_SetDMAConfig+0xfc>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	68f9      	ldr	r1, [r7, #12]
 8001d4e:	430b      	orrs	r3, r1
 8001d50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d54:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	7b5b      	ldrb	r3, [r3, #13]
 8001d5a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d60:	4313      	orrs	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d6c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001d70:	4b22      	ldr	r3, [pc, #136]	@ (8001dfc <ETH_SetDMAConfig+0x100>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	68f9      	ldr	r1, [r7, #12]
 8001d7a:	430b      	orrs	r3, r1
 8001d7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d80:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	7d1b      	ldrb	r3, [r3, #20]
 8001d8c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d8e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	7f5b      	ldrb	r3, [r3, #29]
 8001d94:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d96:	4313      	orrs	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001da2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001da6:	4b16      	ldr	r3, [pc, #88]	@ (8001e00 <ETH_SetDMAConfig+0x104>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	68f9      	ldr	r1, [r7, #12]
 8001db0:	430b      	orrs	r3, r1
 8001db2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001db6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	7f1b      	ldrb	r3, [r3, #28]
 8001dbe:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dd0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <ETH_SetDMAConfig+0x108>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	68f9      	ldr	r1, [r7, #12]
 8001dde:	430b      	orrs	r3, r1
 8001de0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001de4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	ffff87fd 	.word	0xffff87fd
 8001df8:	ffff2ffe 	.word	0xffff2ffe
 8001dfc:	fffec000 	.word	0xfffec000
 8001e00:	ffc0efef 	.word	0xffc0efef
 8001e04:	7fc0ffff 	.word	0x7fc0ffff

08001e08 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b0a4      	sub	sp, #144	@ 0x90
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001e10:	2301      	movs	r3, #1
 8001e12:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e16:	2300      	movs	r3, #0
 8001e18:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001e26:	2301      	movs	r3, #1
 8001e28:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001e32:	2301      	movs	r3, #1
 8001e34:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e48:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001e60:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001e64:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001e70:	2301      	movs	r3, #1
 8001e72:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001e82:	2300      	movs	r3, #0
 8001e84:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001ea0:	2320      	movs	r3, #32
 8001ea2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001eb2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001eb8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ebc:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001edc:	2301      	movs	r3, #1
 8001ede:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001eec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff fde6 	bl	8001ac4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001efc:	2301      	movs	r3, #1
 8001efe:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f12:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f16:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f1c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f20:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001f28:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001f2c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f2e:	f107 0308 	add.w	r3, r7, #8
 8001f32:	4619      	mov	r1, r3
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff fee1 	bl	8001cfc <ETH_SetDMAConfig>
}
 8001f3a:	bf00      	nop
 8001f3c:	3790      	adds	r7, #144	@ 0x90
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b085      	sub	sp, #20
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	e01d      	b.n	8001f8c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68d9      	ldr	r1, [r3, #12]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	4613      	mov	r3, r2
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	4413      	add	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	440b      	add	r3, r1
 8001f60:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2200      	movs	r2, #0
 8001f78:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f7a:	68b9      	ldr	r1, [r7, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	3206      	adds	r2, #6
 8001f82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d9de      	bls.n	8001f50 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fb4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fc4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	e023      	b.n	800202a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6919      	ldr	r1, [r3, #16]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4413      	add	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	440b      	add	r3, r1
 8001ff2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2200      	movs	r2, #0
 800200a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2200      	movs	r2, #0
 8002010:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2200      	movs	r2, #0
 8002016:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002018:	68b9      	ldr	r1, [r7, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	3212      	adds	r2, #18
 8002020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	3301      	adds	r3, #1
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d9d8      	bls.n	8001fe2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002056:	461a      	mov	r2, r3
 8002058:	2303      	movs	r3, #3
 800205a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691a      	ldr	r2, [r3, #16]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800206a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800207e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	@ 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800209e:	4b89      	ldr	r3, [pc, #548]	@ (80022c4 <HAL_GPIO_Init+0x234>)
 80020a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020a2:	e194      	b.n	80023ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	2101      	movs	r1, #1
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 8186 	beq.w	80023c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d005      	beq.n	80020d4 <HAL_GPIO_Init+0x44>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d130      	bne.n	8002136 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800210a:	2201      	movs	r2, #1
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	091b      	lsrs	r3, r3, #4
 8002120:	f003 0201 	and.w	r2, r3, #1
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	2b03      	cmp	r3, #3
 8002140:	d017      	beq.n	8002172 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	2203      	movs	r2, #3
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d123      	bne.n	80021c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	08da      	lsrs	r2, r3, #3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3208      	adds	r2, #8
 8002186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	220f      	movs	r2, #15
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	691a      	ldr	r2, [r3, #16]
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	08da      	lsrs	r2, r3, #3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3208      	adds	r2, #8
 80021c0:	69b9      	ldr	r1, [r7, #24]
 80021c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	2203      	movs	r2, #3
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4013      	ands	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 0203 	and.w	r2, r3, #3
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 80e0 	beq.w	80023c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002208:	4b2f      	ldr	r3, [pc, #188]	@ (80022c8 <HAL_GPIO_Init+0x238>)
 800220a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800220e:	4a2e      	ldr	r2, [pc, #184]	@ (80022c8 <HAL_GPIO_Init+0x238>)
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002218:	4b2b      	ldr	r3, [pc, #172]	@ (80022c8 <HAL_GPIO_Init+0x238>)
 800221a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002226:	4a29      	ldr	r2, [pc, #164]	@ (80022cc <HAL_GPIO_Init+0x23c>)
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	089b      	lsrs	r3, r3, #2
 800222c:	3302      	adds	r3, #2
 800222e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	220f      	movs	r2, #15
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a20      	ldr	r2, [pc, #128]	@ (80022d0 <HAL_GPIO_Init+0x240>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d052      	beq.n	80022f8 <HAL_GPIO_Init+0x268>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a1f      	ldr	r2, [pc, #124]	@ (80022d4 <HAL_GPIO_Init+0x244>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d031      	beq.n	80022be <HAL_GPIO_Init+0x22e>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a1e      	ldr	r2, [pc, #120]	@ (80022d8 <HAL_GPIO_Init+0x248>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d02b      	beq.n	80022ba <HAL_GPIO_Init+0x22a>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a1d      	ldr	r2, [pc, #116]	@ (80022dc <HAL_GPIO_Init+0x24c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d025      	beq.n	80022b6 <HAL_GPIO_Init+0x226>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a1c      	ldr	r2, [pc, #112]	@ (80022e0 <HAL_GPIO_Init+0x250>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d01f      	beq.n	80022b2 <HAL_GPIO_Init+0x222>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a1b      	ldr	r2, [pc, #108]	@ (80022e4 <HAL_GPIO_Init+0x254>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d019      	beq.n	80022ae <HAL_GPIO_Init+0x21e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a1a      	ldr	r2, [pc, #104]	@ (80022e8 <HAL_GPIO_Init+0x258>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d013      	beq.n	80022aa <HAL_GPIO_Init+0x21a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a19      	ldr	r2, [pc, #100]	@ (80022ec <HAL_GPIO_Init+0x25c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00d      	beq.n	80022a6 <HAL_GPIO_Init+0x216>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a18      	ldr	r2, [pc, #96]	@ (80022f0 <HAL_GPIO_Init+0x260>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d007      	beq.n	80022a2 <HAL_GPIO_Init+0x212>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a17      	ldr	r2, [pc, #92]	@ (80022f4 <HAL_GPIO_Init+0x264>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d101      	bne.n	800229e <HAL_GPIO_Init+0x20e>
 800229a:	2309      	movs	r3, #9
 800229c:	e02d      	b.n	80022fa <HAL_GPIO_Init+0x26a>
 800229e:	230a      	movs	r3, #10
 80022a0:	e02b      	b.n	80022fa <HAL_GPIO_Init+0x26a>
 80022a2:	2308      	movs	r3, #8
 80022a4:	e029      	b.n	80022fa <HAL_GPIO_Init+0x26a>
 80022a6:	2307      	movs	r3, #7
 80022a8:	e027      	b.n	80022fa <HAL_GPIO_Init+0x26a>
 80022aa:	2306      	movs	r3, #6
 80022ac:	e025      	b.n	80022fa <HAL_GPIO_Init+0x26a>
 80022ae:	2305      	movs	r3, #5
 80022b0:	e023      	b.n	80022fa <HAL_GPIO_Init+0x26a>
 80022b2:	2304      	movs	r3, #4
 80022b4:	e021      	b.n	80022fa <HAL_GPIO_Init+0x26a>
 80022b6:	2303      	movs	r3, #3
 80022b8:	e01f      	b.n	80022fa <HAL_GPIO_Init+0x26a>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e01d      	b.n	80022fa <HAL_GPIO_Init+0x26a>
 80022be:	2301      	movs	r3, #1
 80022c0:	e01b      	b.n	80022fa <HAL_GPIO_Init+0x26a>
 80022c2:	bf00      	nop
 80022c4:	58000080 	.word	0x58000080
 80022c8:	58024400 	.word	0x58024400
 80022cc:	58000400 	.word	0x58000400
 80022d0:	58020000 	.word	0x58020000
 80022d4:	58020400 	.word	0x58020400
 80022d8:	58020800 	.word	0x58020800
 80022dc:	58020c00 	.word	0x58020c00
 80022e0:	58021000 	.word	0x58021000
 80022e4:	58021400 	.word	0x58021400
 80022e8:	58021800 	.word	0x58021800
 80022ec:	58021c00 	.word	0x58021c00
 80022f0:	58022000 	.word	0x58022000
 80022f4:	58022400 	.word	0x58022400
 80022f8:	2300      	movs	r3, #0
 80022fa:	69fa      	ldr	r2, [r7, #28]
 80022fc:	f002 0203 	and.w	r2, r2, #3
 8002300:	0092      	lsls	r2, r2, #2
 8002302:	4093      	lsls	r3, r2
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800230a:	4938      	ldr	r1, [pc, #224]	@ (80023ec <HAL_GPIO_Init+0x35c>)
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	089b      	lsrs	r3, r3, #2
 8002310:	3302      	adds	r3, #2
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800233e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002346:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800236c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	3301      	adds	r3, #1
 80023cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f47f ae63 	bne.w	80020a4 <HAL_GPIO_Init+0x14>
  }
}
 80023de:	bf00      	nop
 80023e0:	bf00      	nop
 80023e2:	3724      	adds	r7, #36	@ 0x24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	58000400 	.word	0x58000400

080023f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	807b      	strh	r3, [r7, #2]
 80023fc:	4613      	mov	r3, r2
 80023fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002400:	787b      	ldrb	r3, [r7, #1]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002406:	887a      	ldrh	r2, [r7, #2]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800240c:	e003      	b.n	8002416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800240e:	887b      	ldrh	r3, [r7, #2]
 8002410:	041a      	lsls	r2, r3, #16
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	619a      	str	r2, [r3, #24]
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b086      	sub	sp, #24
 8002426:	af02      	add	r7, sp, #8
 8002428:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0fe      	b.n	8002632 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d106      	bne.n	800244e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7fe ffc7 	bl	80013dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2203      	movs	r2, #3
 8002452:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f004 fc5a 	bl	8006d14 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	7c1a      	ldrb	r2, [r3, #16]
 8002468:	f88d 2000 	strb.w	r2, [sp]
 800246c:	3304      	adds	r3, #4
 800246e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002470:	f004 fbde 	bl	8006c30 <USB_CoreInit>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2202      	movs	r2, #2
 800247e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e0d5      	b.n	8002632 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2100      	movs	r1, #0
 800248c:	4618      	mov	r0, r3
 800248e:	f004 fc52 	bl	8006d36 <USB_SetCurrentMode>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0c6      	b.n	8002632 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a4:	2300      	movs	r3, #0
 80024a6:	73fb      	strb	r3, [r7, #15]
 80024a8:	e04a      	b.n	8002540 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024aa:	7bfa      	ldrb	r2, [r7, #15]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4413      	add	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	3315      	adds	r3, #21
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024be:	7bfa      	ldrb	r2, [r7, #15]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	3314      	adds	r3, #20
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024d2:	7bfa      	ldrb	r2, [r7, #15]
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	b298      	uxth	r0, r3
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	332e      	adds	r3, #46	@ 0x2e
 80024e6:	4602      	mov	r2, r0
 80024e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024ea:	7bfa      	ldrb	r2, [r7, #15]
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	3318      	adds	r3, #24
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024fe:	7bfa      	ldrb	r2, [r7, #15]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	331c      	adds	r3, #28
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002512:	7bfa      	ldrb	r2, [r7, #15]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	3320      	adds	r3, #32
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002526:	7bfa      	ldrb	r2, [r7, #15]
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	3324      	adds	r3, #36	@ 0x24
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	3301      	adds	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	791b      	ldrb	r3, [r3, #4]
 8002544:	7bfa      	ldrb	r2, [r7, #15]
 8002546:	429a      	cmp	r2, r3
 8002548:	d3af      	bcc.n	80024aa <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800254a:	2300      	movs	r3, #0
 800254c:	73fb      	strb	r3, [r7, #15]
 800254e:	e044      	b.n	80025da <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002566:	7bfa      	ldrb	r2, [r7, #15]
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	4613      	mov	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	4413      	add	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	440b      	add	r3, r1
 8002574:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800257c:	7bfa      	ldrb	r2, [r7, #15]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4413      	add	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002592:	7bfa      	ldrb	r2, [r7, #15]
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	440b      	add	r3, r1
 80025a0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025be:	7bfa      	ldrb	r2, [r7, #15]
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	3301      	adds	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	791b      	ldrb	r3, [r3, #4]
 80025de:	7bfa      	ldrb	r2, [r7, #15]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d3b5      	bcc.n	8002550 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	7c1a      	ldrb	r2, [r3, #16]
 80025ec:	f88d 2000 	strb.w	r2, [sp]
 80025f0:	3304      	adds	r3, #4
 80025f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025f4:	f004 fbec 	bl	8006dd0 <USB_DevInit>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d005      	beq.n	800260a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2202      	movs	r2, #2
 8002602:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e013      	b.n	8002632 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	7b1b      	ldrb	r3, [r3, #12]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d102      	bne.n	8002626 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f80b 	bl	800263c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f004 fda7 	bl	800717e <USB_DevDisconnect>

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800266a:	4b05      	ldr	r3, [pc, #20]	@ (8002680 <HAL_PCDEx_ActivateLPM+0x44>)
 800266c:	4313      	orrs	r3, r2
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	10000003 	.word	0x10000003

08002684 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800268c:	4b19      	ldr	r3, [pc, #100]	@ (80026f4 <HAL_PWREx_ConfigSupply+0x70>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b04      	cmp	r3, #4
 8002696:	d00a      	beq.n	80026ae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002698:	4b16      	ldr	r3, [pc, #88]	@ (80026f4 <HAL_PWREx_ConfigSupply+0x70>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d001      	beq.n	80026aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e01f      	b.n	80026ea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	e01d      	b.n	80026ea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80026ae:	4b11      	ldr	r3, [pc, #68]	@ (80026f4 <HAL_PWREx_ConfigSupply+0x70>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f023 0207 	bic.w	r2, r3, #7
 80026b6:	490f      	ldr	r1, [pc, #60]	@ (80026f4 <HAL_PWREx_ConfigSupply+0x70>)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80026be:	f7fe ff83 	bl	80015c8 <HAL_GetTick>
 80026c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026c4:	e009      	b.n	80026da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80026c6:	f7fe ff7f 	bl	80015c8 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026d4:	d901      	bls.n	80026da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e007      	b.n	80026ea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026da:	4b06      	ldr	r3, [pc, #24]	@ (80026f4 <HAL_PWREx_ConfigSupply+0x70>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026e6:	d1ee      	bne.n	80026c6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	58024800 	.word	0x58024800

080026f8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80026fc:	4b05      	ldr	r3, [pc, #20]	@ (8002714 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4a04      	ldr	r2, [pc, #16]	@ (8002714 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002702:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002706:	60d3      	str	r3, [r2, #12]
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	58024800 	.word	0x58024800

08002718 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08c      	sub	sp, #48	@ 0x30
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d102      	bne.n	800272c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	f000 bc48 	b.w	8002fbc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 8088 	beq.w	800284a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800273a:	4b99      	ldr	r3, [pc, #612]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002742:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002744:	4b96      	ldr	r3, [pc, #600]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 8002746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002748:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800274a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800274c:	2b10      	cmp	r3, #16
 800274e:	d007      	beq.n	8002760 <HAL_RCC_OscConfig+0x48>
 8002750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002752:	2b18      	cmp	r3, #24
 8002754:	d111      	bne.n	800277a <HAL_RCC_OscConfig+0x62>
 8002756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d10c      	bne.n	800277a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002760:	4b8f      	ldr	r3, [pc, #572]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d06d      	beq.n	8002848 <HAL_RCC_OscConfig+0x130>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d169      	bne.n	8002848 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	f000 bc21 	b.w	8002fbc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002782:	d106      	bne.n	8002792 <HAL_RCC_OscConfig+0x7a>
 8002784:	4b86      	ldr	r3, [pc, #536]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a85      	ldr	r2, [pc, #532]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 800278a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	e02e      	b.n	80027f0 <HAL_RCC_OscConfig+0xd8>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10c      	bne.n	80027b4 <HAL_RCC_OscConfig+0x9c>
 800279a:	4b81      	ldr	r3, [pc, #516]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a80      	ldr	r2, [pc, #512]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 80027a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	4b7e      	ldr	r3, [pc, #504]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a7d      	ldr	r2, [pc, #500]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 80027ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e01d      	b.n	80027f0 <HAL_RCC_OscConfig+0xd8>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027bc:	d10c      	bne.n	80027d8 <HAL_RCC_OscConfig+0xc0>
 80027be:	4b78      	ldr	r3, [pc, #480]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a77      	ldr	r2, [pc, #476]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 80027c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	4b75      	ldr	r3, [pc, #468]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a74      	ldr	r2, [pc, #464]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 80027d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	e00b      	b.n	80027f0 <HAL_RCC_OscConfig+0xd8>
 80027d8:	4b71      	ldr	r3, [pc, #452]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a70      	ldr	r2, [pc, #448]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 80027de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	4b6e      	ldr	r3, [pc, #440]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a6d      	ldr	r2, [pc, #436]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 80027ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7fe fee6 	bl	80015c8 <HAL_GetTick>
 80027fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002800:	f7fe fee2 	bl	80015c8 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	@ 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e3d4      	b.n	8002fbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002812:	4b63      	ldr	r3, [pc, #396]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0xe8>
 800281e:	e014      	b.n	800284a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002820:	f7fe fed2 	bl	80015c8 <HAL_GetTick>
 8002824:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002828:	f7fe fece 	bl	80015c8 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b64      	cmp	r3, #100	@ 0x64
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e3c0      	b.n	8002fbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800283a:	4b59      	ldr	r3, [pc, #356]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x110>
 8002846:	e000      	b.n	800284a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 80ca 	beq.w	80029ec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002858:	4b51      	ldr	r3, [pc, #324]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002860:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002862:	4b4f      	ldr	r3, [pc, #316]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 8002864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002866:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d007      	beq.n	800287e <HAL_RCC_OscConfig+0x166>
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	2b18      	cmp	r3, #24
 8002872:	d156      	bne.n	8002922 <HAL_RCC_OscConfig+0x20a>
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d151      	bne.n	8002922 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800287e:	4b48      	ldr	r3, [pc, #288]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	2b00      	cmp	r3, #0
 8002888:	d005      	beq.n	8002896 <HAL_RCC_OscConfig+0x17e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e392      	b.n	8002fbc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002896:	4b42      	ldr	r3, [pc, #264]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 0219 	bic.w	r2, r3, #25
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	493f      	ldr	r1, [pc, #252]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a8:	f7fe fe8e 	bl	80015c8 <HAL_GetTick>
 80028ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b0:	f7fe fe8a 	bl	80015c8 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e37c      	b.n	8002fbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028c2:	4b37      	ldr	r3, [pc, #220]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ce:	f7fe feab 	bl	8001628 <HAL_GetREVID>
 80028d2:	4603      	mov	r3, r0
 80028d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028d8:	4293      	cmp	r3, r2
 80028da:	d817      	bhi.n	800290c <HAL_RCC_OscConfig+0x1f4>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	2b40      	cmp	r3, #64	@ 0x40
 80028e2:	d108      	bne.n	80028f6 <HAL_RCC_OscConfig+0x1de>
 80028e4:	4b2e      	ldr	r3, [pc, #184]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80028ec:	4a2c      	ldr	r2, [pc, #176]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 80028ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028f2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028f4:	e07a      	b.n	80029ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f6:	4b2a      	ldr	r3, [pc, #168]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	031b      	lsls	r3, r3, #12
 8002904:	4926      	ldr	r1, [pc, #152]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 8002906:	4313      	orrs	r3, r2
 8002908:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800290a:	e06f      	b.n	80029ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290c:	4b24      	ldr	r3, [pc, #144]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	061b      	lsls	r3, r3, #24
 800291a:	4921      	ldr	r1, [pc, #132]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 800291c:	4313      	orrs	r3, r2
 800291e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002920:	e064      	b.n	80029ec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d047      	beq.n	80029ba <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800292a:	4b1d      	ldr	r3, [pc, #116]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 0219 	bic.w	r2, r3, #25
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	491a      	ldr	r1, [pc, #104]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 8002938:	4313      	orrs	r3, r2
 800293a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7fe fe44 	bl	80015c8 <HAL_GetTick>
 8002940:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002944:	f7fe fe40 	bl	80015c8 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e332      	b.n	8002fbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002956:	4b12      	ldr	r3, [pc, #72]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f0      	beq.n	8002944 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002962:	f7fe fe61 	bl	8001628 <HAL_GetREVID>
 8002966:	4603      	mov	r3, r0
 8002968:	f241 0203 	movw	r2, #4099	@ 0x1003
 800296c:	4293      	cmp	r3, r2
 800296e:	d819      	bhi.n	80029a4 <HAL_RCC_OscConfig+0x28c>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	2b40      	cmp	r3, #64	@ 0x40
 8002976:	d108      	bne.n	800298a <HAL_RCC_OscConfig+0x272>
 8002978:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002980:	4a07      	ldr	r2, [pc, #28]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 8002982:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002986:	6053      	str	r3, [r2, #4]
 8002988:	e030      	b.n	80029ec <HAL_RCC_OscConfig+0x2d4>
 800298a:	4b05      	ldr	r3, [pc, #20]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	031b      	lsls	r3, r3, #12
 8002998:	4901      	ldr	r1, [pc, #4]	@ (80029a0 <HAL_RCC_OscConfig+0x288>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
 800299e:	e025      	b.n	80029ec <HAL_RCC_OscConfig+0x2d4>
 80029a0:	58024400 	.word	0x58024400
 80029a4:	4b9a      	ldr	r3, [pc, #616]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	061b      	lsls	r3, r3, #24
 80029b2:	4997      	ldr	r1, [pc, #604]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]
 80029b8:	e018      	b.n	80029ec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ba:	4b95      	ldr	r3, [pc, #596]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a94      	ldr	r2, [pc, #592]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 80029c0:	f023 0301 	bic.w	r3, r3, #1
 80029c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c6:	f7fe fdff 	bl	80015c8 <HAL_GetTick>
 80029ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ce:	f7fe fdfb 	bl	80015c8 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e2ed      	b.n	8002fbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029e0:	4b8b      	ldr	r3, [pc, #556]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f0      	bne.n	80029ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80a9 	beq.w	8002b4c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029fa:	4b85      	ldr	r3, [pc, #532]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a02:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a04:	4b82      	ldr	r3, [pc, #520]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a08:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d007      	beq.n	8002a20 <HAL_RCC_OscConfig+0x308>
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	2b18      	cmp	r3, #24
 8002a14:	d13a      	bne.n	8002a8c <HAL_RCC_OscConfig+0x374>
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d135      	bne.n	8002a8c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a20:	4b7b      	ldr	r3, [pc, #492]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_RCC_OscConfig+0x320>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	2b80      	cmp	r3, #128	@ 0x80
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e2c1      	b.n	8002fbc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a38:	f7fe fdf6 	bl	8001628 <HAL_GetREVID>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d817      	bhi.n	8002a76 <HAL_RCC_OscConfig+0x35e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	2b20      	cmp	r3, #32
 8002a4c:	d108      	bne.n	8002a60 <HAL_RCC_OscConfig+0x348>
 8002a4e:	4b70      	ldr	r3, [pc, #448]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002a56:	4a6e      	ldr	r2, [pc, #440]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002a58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a5c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a5e:	e075      	b.n	8002b4c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a60:	4b6b      	ldr	r3, [pc, #428]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	069b      	lsls	r3, r3, #26
 8002a6e:	4968      	ldr	r1, [pc, #416]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a74:	e06a      	b.n	8002b4c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a76:	4b66      	ldr	r3, [pc, #408]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	061b      	lsls	r3, r3, #24
 8002a84:	4962      	ldr	r1, [pc, #392]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a8a:	e05f      	b.n	8002b4c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d042      	beq.n	8002b1a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a94:	4b5e      	ldr	r3, [pc, #376]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a5d      	ldr	r2, [pc, #372]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002a9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa0:	f7fe fd92 	bl	80015c8 <HAL_GetTick>
 8002aa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002aa8:	f7fe fd8e 	bl	80015c8 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e280      	b.n	8002fbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002aba:	4b55      	ldr	r3, [pc, #340]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ac6:	f7fe fdaf 	bl	8001628 <HAL_GetREVID>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d817      	bhi.n	8002b04 <HAL_RCC_OscConfig+0x3ec>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	2b20      	cmp	r3, #32
 8002ada:	d108      	bne.n	8002aee <HAL_RCC_OscConfig+0x3d6>
 8002adc:	4b4c      	ldr	r3, [pc, #304]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002ae4:	4a4a      	ldr	r2, [pc, #296]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002ae6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002aea:	6053      	str	r3, [r2, #4]
 8002aec:	e02e      	b.n	8002b4c <HAL_RCC_OscConfig+0x434>
 8002aee:	4b48      	ldr	r3, [pc, #288]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	069b      	lsls	r3, r3, #26
 8002afc:	4944      	ldr	r1, [pc, #272]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	604b      	str	r3, [r1, #4]
 8002b02:	e023      	b.n	8002b4c <HAL_RCC_OscConfig+0x434>
 8002b04:	4b42      	ldr	r3, [pc, #264]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	061b      	lsls	r3, r3, #24
 8002b12:	493f      	ldr	r1, [pc, #252]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60cb      	str	r3, [r1, #12]
 8002b18:	e018      	b.n	8002b4c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a3c      	ldr	r2, [pc, #240]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002b20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b26:	f7fe fd4f 	bl	80015c8 <HAL_GetTick>
 8002b2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b2e:	f7fe fd4b 	bl	80015c8 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e23d      	b.n	8002fbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b40:	4b33      	ldr	r3, [pc, #204]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f0      	bne.n	8002b2e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d036      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d019      	beq.n	8002b94 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b60:	4b2b      	ldr	r3, [pc, #172]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002b62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b64:	4a2a      	ldr	r2, [pc, #168]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6c:	f7fe fd2c 	bl	80015c8 <HAL_GetTick>
 8002b70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b74:	f7fe fd28 	bl	80015c8 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e21a      	b.n	8002fbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b86:	4b22      	ldr	r3, [pc, #136]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x45c>
 8002b92:	e018      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b94:	4b1e      	ldr	r3, [pc, #120]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002b96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b98:	4a1d      	ldr	r2, [pc, #116]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002b9a:	f023 0301 	bic.w	r3, r3, #1
 8002b9e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7fe fd12 	bl	80015c8 <HAL_GetTick>
 8002ba4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba8:	f7fe fd0e 	bl	80015c8 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e200      	b.n	8002fbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bba:	4b15      	ldr	r3, [pc, #84]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d039      	beq.n	8002c46 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d01c      	beq.n	8002c14 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bda:	4b0d      	ldr	r3, [pc, #52]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a0c      	ldr	r2, [pc, #48]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002be0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002be4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002be6:	f7fe fcef 	bl	80015c8 <HAL_GetTick>
 8002bea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bee:	f7fe fceb 	bl	80015c8 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e1dd      	b.n	8002fbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c00:	4b03      	ldr	r3, [pc, #12]	@ (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x4d6>
 8002c0c:	e01b      	b.n	8002c46 <HAL_RCC_OscConfig+0x52e>
 8002c0e:	bf00      	nop
 8002c10:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c14:	4b9b      	ldr	r3, [pc, #620]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a9a      	ldr	r2, [pc, #616]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002c1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c1e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c20:	f7fe fcd2 	bl	80015c8 <HAL_GetTick>
 8002c24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c28:	f7fe fcce 	bl	80015c8 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e1c0      	b.n	8002fbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c3a:	4b92      	ldr	r3, [pc, #584]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 8081 	beq.w	8002d56 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c54:	4b8c      	ldr	r3, [pc, #560]	@ (8002e88 <HAL_RCC_OscConfig+0x770>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a8b      	ldr	r2, [pc, #556]	@ (8002e88 <HAL_RCC_OscConfig+0x770>)
 8002c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c60:	f7fe fcb2 	bl	80015c8 <HAL_GetTick>
 8002c64:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c68:	f7fe fcae 	bl	80015c8 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	@ 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e1a0      	b.n	8002fbc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c7a:	4b83      	ldr	r3, [pc, #524]	@ (8002e88 <HAL_RCC_OscConfig+0x770>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d106      	bne.n	8002c9c <HAL_RCC_OscConfig+0x584>
 8002c8e:	4b7d      	ldr	r3, [pc, #500]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c92:	4a7c      	ldr	r2, [pc, #496]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c9a:	e02d      	b.n	8002cf8 <HAL_RCC_OscConfig+0x5e0>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10c      	bne.n	8002cbe <HAL_RCC_OscConfig+0x5a6>
 8002ca4:	4b77      	ldr	r3, [pc, #476]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca8:	4a76      	ldr	r2, [pc, #472]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002caa:	f023 0301 	bic.w	r3, r3, #1
 8002cae:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb0:	4b74      	ldr	r3, [pc, #464]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb4:	4a73      	ldr	r2, [pc, #460]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002cb6:	f023 0304 	bic.w	r3, r3, #4
 8002cba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cbc:	e01c      	b.n	8002cf8 <HAL_RCC_OscConfig+0x5e0>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b05      	cmp	r3, #5
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x5c8>
 8002cc6:	4b6f      	ldr	r3, [pc, #444]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cca:	4a6e      	ldr	r2, [pc, #440]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002ccc:	f043 0304 	orr.w	r3, r3, #4
 8002cd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cd2:	4b6c      	ldr	r3, [pc, #432]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd6:	4a6b      	ldr	r2, [pc, #428]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cde:	e00b      	b.n	8002cf8 <HAL_RCC_OscConfig+0x5e0>
 8002ce0:	4b68      	ldr	r3, [pc, #416]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce4:	4a67      	ldr	r2, [pc, #412]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002ce6:	f023 0301 	bic.w	r3, r3, #1
 8002cea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cec:	4b65      	ldr	r3, [pc, #404]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf0:	4a64      	ldr	r2, [pc, #400]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002cf2:	f023 0304 	bic.w	r3, r3, #4
 8002cf6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d015      	beq.n	8002d2c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d00:	f7fe fc62 	bl	80015c8 <HAL_GetTick>
 8002d04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d08:	f7fe fc5e 	bl	80015c8 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e14e      	b.n	8002fbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d1e:	4b59      	ldr	r3, [pc, #356]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0ee      	beq.n	8002d08 <HAL_RCC_OscConfig+0x5f0>
 8002d2a:	e014      	b.n	8002d56 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2c:	f7fe fc4c 	bl	80015c8 <HAL_GetTick>
 8002d30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d32:	e00a      	b.n	8002d4a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d34:	f7fe fc48 	bl	80015c8 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e138      	b.n	8002fbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d4a:	4b4e      	ldr	r3, [pc, #312]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1ee      	bne.n	8002d34 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 812d 	beq.w	8002fba <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d60:	4b48      	ldr	r3, [pc, #288]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d68:	2b18      	cmp	r3, #24
 8002d6a:	f000 80bd 	beq.w	8002ee8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	f040 809e 	bne.w	8002eb4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d78:	4b42      	ldr	r3, [pc, #264]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a41      	ldr	r2, [pc, #260]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002d7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7fe fc20 	bl	80015c8 <HAL_GetTick>
 8002d88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8c:	f7fe fc1c 	bl	80015c8 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e10e      	b.n	8002fbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d9e:	4b39      	ldr	r3, [pc, #228]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002daa:	4b36      	ldr	r3, [pc, #216]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002dac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dae:	4b37      	ldr	r3, [pc, #220]	@ (8002e8c <HAL_RCC_OscConfig+0x774>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002dba:	0112      	lsls	r2, r2, #4
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	4931      	ldr	r1, [pc, #196]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	628b      	str	r3, [r1, #40]	@ 0x28
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	025b      	lsls	r3, r3, #9
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dde:	3b01      	subs	r3, #1
 8002de0:	041b      	lsls	r3, r3, #16
 8002de2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dec:	3b01      	subs	r3, #1
 8002dee:	061b      	lsls	r3, r3, #24
 8002df0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002df4:	4923      	ldr	r1, [pc, #140]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002dfa:	4b22      	ldr	r3, [pc, #136]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dfe:	4a21      	ldr	r2, [pc, #132]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e06:	4b1f      	ldr	r3, [pc, #124]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e0a:	4b21      	ldr	r3, [pc, #132]	@ (8002e90 <HAL_RCC_OscConfig+0x778>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e12:	00d2      	lsls	r2, r2, #3
 8002e14:	491b      	ldr	r1, [pc, #108]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1e:	f023 020c 	bic.w	r2, r3, #12
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e26:	4917      	ldr	r1, [pc, #92]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e2c:	4b15      	ldr	r3, [pc, #84]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e30:	f023 0202 	bic.w	r2, r3, #2
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e38:	4912      	ldr	r1, [pc, #72]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e3e:	4b11      	ldr	r3, [pc, #68]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e42:	4a10      	ldr	r2, [pc, #64]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4e:	4a0d      	ldr	r2, [pc, #52]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e56:	4b0b      	ldr	r3, [pc, #44]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002e62:	4b08      	ldr	r3, [pc, #32]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e66:	4a07      	ldr	r2, [pc, #28]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e6e:	4b05      	ldr	r3, [pc, #20]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a04      	ldr	r2, [pc, #16]	@ (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7a:	f7fe fba5 	bl	80015c8 <HAL_GetTick>
 8002e7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e80:	e011      	b.n	8002ea6 <HAL_RCC_OscConfig+0x78e>
 8002e82:	bf00      	nop
 8002e84:	58024400 	.word	0x58024400
 8002e88:	58024800 	.word	0x58024800
 8002e8c:	fffffc0c 	.word	0xfffffc0c
 8002e90:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e94:	f7fe fb98 	bl	80015c8 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e08a      	b.n	8002fbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ea6:	4b47      	ldr	r3, [pc, #284]	@ (8002fc4 <HAL_RCC_OscConfig+0x8ac>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0f0      	beq.n	8002e94 <HAL_RCC_OscConfig+0x77c>
 8002eb2:	e082      	b.n	8002fba <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb4:	4b43      	ldr	r3, [pc, #268]	@ (8002fc4 <HAL_RCC_OscConfig+0x8ac>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a42      	ldr	r2, [pc, #264]	@ (8002fc4 <HAL_RCC_OscConfig+0x8ac>)
 8002eba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7fe fb82 	bl	80015c8 <HAL_GetTick>
 8002ec4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec8:	f7fe fb7e 	bl	80015c8 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e070      	b.n	8002fbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eda:	4b3a      	ldr	r3, [pc, #232]	@ (8002fc4 <HAL_RCC_OscConfig+0x8ac>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x7b0>
 8002ee6:	e068      	b.n	8002fba <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ee8:	4b36      	ldr	r3, [pc, #216]	@ (8002fc4 <HAL_RCC_OscConfig+0x8ac>)
 8002eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002eee:	4b35      	ldr	r3, [pc, #212]	@ (8002fc4 <HAL_RCC_OscConfig+0x8ac>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d031      	beq.n	8002f60 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f003 0203 	and.w	r2, r3, #3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d12a      	bne.n	8002f60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d122      	bne.n	8002f60 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f24:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d11a      	bne.n	8002f60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	0a5b      	lsrs	r3, r3, #9
 8002f2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f36:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d111      	bne.n	8002f60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	0c1b      	lsrs	r3, r3, #16
 8002f40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f48:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d108      	bne.n	8002f60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	0e1b      	lsrs	r3, r3, #24
 8002f52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f5a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d001      	beq.n	8002f64 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e02b      	b.n	8002fbc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002f64:	4b17      	ldr	r3, [pc, #92]	@ (8002fc4 <HAL_RCC_OscConfig+0x8ac>)
 8002f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f68:	08db      	lsrs	r3, r3, #3
 8002f6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f6e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d01f      	beq.n	8002fba <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002f7a:	4b12      	ldr	r3, [pc, #72]	@ (8002fc4 <HAL_RCC_OscConfig+0x8ac>)
 8002f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7e:	4a11      	ldr	r2, [pc, #68]	@ (8002fc4 <HAL_RCC_OscConfig+0x8ac>)
 8002f80:	f023 0301 	bic.w	r3, r3, #1
 8002f84:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f86:	f7fe fb1f 	bl	80015c8 <HAL_GetTick>
 8002f8a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002f8c:	bf00      	nop
 8002f8e:	f7fe fb1b 	bl	80015c8 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d0f9      	beq.n	8002f8e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc4 <HAL_RCC_OscConfig+0x8ac>)
 8002f9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc8 <HAL_RCC_OscConfig+0x8b0>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002fa6:	00d2      	lsls	r2, r2, #3
 8002fa8:	4906      	ldr	r1, [pc, #24]	@ (8002fc4 <HAL_RCC_OscConfig+0x8ac>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002fae:	4b05      	ldr	r3, [pc, #20]	@ (8002fc4 <HAL_RCC_OscConfig+0x8ac>)
 8002fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb2:	4a04      	ldr	r2, [pc, #16]	@ (8002fc4 <HAL_RCC_OscConfig+0x8ac>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3730      	adds	r7, #48	@ 0x30
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	58024400 	.word	0x58024400
 8002fc8:	ffff0007 	.word	0xffff0007

08002fcc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e19c      	b.n	800331a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe0:	4b8a      	ldr	r3, [pc, #552]	@ (800320c <HAL_RCC_ClockConfig+0x240>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 030f 	and.w	r3, r3, #15
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d910      	bls.n	8003010 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fee:	4b87      	ldr	r3, [pc, #540]	@ (800320c <HAL_RCC_ClockConfig+0x240>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f023 020f 	bic.w	r2, r3, #15
 8002ff6:	4985      	ldr	r1, [pc, #532]	@ (800320c <HAL_RCC_ClockConfig+0x240>)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffe:	4b83      	ldr	r3, [pc, #524]	@ (800320c <HAL_RCC_ClockConfig+0x240>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d001      	beq.n	8003010 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e184      	b.n	800331a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d010      	beq.n	800303e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	4b7b      	ldr	r3, [pc, #492]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003028:	429a      	cmp	r2, r3
 800302a:	d908      	bls.n	800303e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800302c:	4b78      	ldr	r3, [pc, #480]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	4975      	ldr	r1, [pc, #468]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 800303a:	4313      	orrs	r3, r2
 800303c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d010      	beq.n	800306c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695a      	ldr	r2, [r3, #20]
 800304e:	4b70      	ldr	r3, [pc, #448]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003056:	429a      	cmp	r2, r3
 8003058:	d908      	bls.n	800306c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800305a:	4b6d      	ldr	r3, [pc, #436]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	496a      	ldr	r1, [pc, #424]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 8003068:	4313      	orrs	r3, r2
 800306a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b00      	cmp	r3, #0
 8003076:	d010      	beq.n	800309a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699a      	ldr	r2, [r3, #24]
 800307c:	4b64      	ldr	r3, [pc, #400]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003084:	429a      	cmp	r2, r3
 8003086:	d908      	bls.n	800309a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003088:	4b61      	ldr	r3, [pc, #388]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	495e      	ldr	r1, [pc, #376]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 8003096:	4313      	orrs	r3, r2
 8003098:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d010      	beq.n	80030c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69da      	ldr	r2, [r3, #28]
 80030aa:	4b59      	ldr	r3, [pc, #356]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d908      	bls.n	80030c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80030b6:	4b56      	ldr	r3, [pc, #344]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	4953      	ldr	r1, [pc, #332]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d010      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	4b4d      	ldr	r3, [pc, #308]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	f003 030f 	and.w	r3, r3, #15
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d908      	bls.n	80030f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e4:	4b4a      	ldr	r3, [pc, #296]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	f023 020f 	bic.w	r2, r3, #15
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4947      	ldr	r1, [pc, #284]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d055      	beq.n	80031ae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003102:	4b43      	ldr	r3, [pc, #268]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	4940      	ldr	r1, [pc, #256]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 8003110:	4313      	orrs	r3, r2
 8003112:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d107      	bne.n	800312c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800311c:	4b3c      	ldr	r3, [pc, #240]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d121      	bne.n	800316c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0f6      	b.n	800331a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b03      	cmp	r3, #3
 8003132:	d107      	bne.n	8003144 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003134:	4b36      	ldr	r3, [pc, #216]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d115      	bne.n	800316c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0ea      	b.n	800331a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d107      	bne.n	800315c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800314c:	4b30      	ldr	r3, [pc, #192]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003154:	2b00      	cmp	r3, #0
 8003156:	d109      	bne.n	800316c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e0de      	b.n	800331a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800315c:	4b2c      	ldr	r3, [pc, #176]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0d6      	b.n	800331a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800316c:	4b28      	ldr	r3, [pc, #160]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	f023 0207 	bic.w	r2, r3, #7
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	4925      	ldr	r1, [pc, #148]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 800317a:	4313      	orrs	r3, r2
 800317c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800317e:	f7fe fa23 	bl	80015c8 <HAL_GetTick>
 8003182:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003184:	e00a      	b.n	800319c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003186:	f7fe fa1f 	bl	80015c8 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003194:	4293      	cmp	r3, r2
 8003196:	d901      	bls.n	800319c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e0be      	b.n	800331a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319c:	4b1c      	ldr	r3, [pc, #112]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d1eb      	bne.n	8003186 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d010      	beq.n	80031dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	4b14      	ldr	r3, [pc, #80]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d208      	bcs.n	80031dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031ca:	4b11      	ldr	r3, [pc, #68]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	f023 020f 	bic.w	r2, r3, #15
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	490e      	ldr	r1, [pc, #56]	@ (8003210 <HAL_RCC_ClockConfig+0x244>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031dc:	4b0b      	ldr	r3, [pc, #44]	@ (800320c <HAL_RCC_ClockConfig+0x240>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 030f 	and.w	r3, r3, #15
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d214      	bcs.n	8003214 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b08      	ldr	r3, [pc, #32]	@ (800320c <HAL_RCC_ClockConfig+0x240>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 020f 	bic.w	r2, r3, #15
 80031f2:	4906      	ldr	r1, [pc, #24]	@ (800320c <HAL_RCC_ClockConfig+0x240>)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b04      	ldr	r3, [pc, #16]	@ (800320c <HAL_RCC_ClockConfig+0x240>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d005      	beq.n	8003214 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e086      	b.n	800331a <HAL_RCC_ClockConfig+0x34e>
 800320c:	52002000 	.word	0x52002000
 8003210:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d010      	beq.n	8003242 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	4b3f      	ldr	r3, [pc, #252]	@ (8003324 <HAL_RCC_ClockConfig+0x358>)
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800322c:	429a      	cmp	r2, r3
 800322e:	d208      	bcs.n	8003242 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003230:	4b3c      	ldr	r3, [pc, #240]	@ (8003324 <HAL_RCC_ClockConfig+0x358>)
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	4939      	ldr	r1, [pc, #228]	@ (8003324 <HAL_RCC_ClockConfig+0x358>)
 800323e:	4313      	orrs	r3, r2
 8003240:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d010      	beq.n	8003270 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695a      	ldr	r2, [r3, #20]
 8003252:	4b34      	ldr	r3, [pc, #208]	@ (8003324 <HAL_RCC_ClockConfig+0x358>)
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800325a:	429a      	cmp	r2, r3
 800325c:	d208      	bcs.n	8003270 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800325e:	4b31      	ldr	r3, [pc, #196]	@ (8003324 <HAL_RCC_ClockConfig+0x358>)
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	492e      	ldr	r1, [pc, #184]	@ (8003324 <HAL_RCC_ClockConfig+0x358>)
 800326c:	4313      	orrs	r3, r2
 800326e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b00      	cmp	r3, #0
 800327a:	d010      	beq.n	800329e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699a      	ldr	r2, [r3, #24]
 8003280:	4b28      	ldr	r3, [pc, #160]	@ (8003324 <HAL_RCC_ClockConfig+0x358>)
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003288:	429a      	cmp	r2, r3
 800328a:	d208      	bcs.n	800329e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800328c:	4b25      	ldr	r3, [pc, #148]	@ (8003324 <HAL_RCC_ClockConfig+0x358>)
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	4922      	ldr	r1, [pc, #136]	@ (8003324 <HAL_RCC_ClockConfig+0x358>)
 800329a:	4313      	orrs	r3, r2
 800329c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d010      	beq.n	80032cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69da      	ldr	r2, [r3, #28]
 80032ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003324 <HAL_RCC_ClockConfig+0x358>)
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d208      	bcs.n	80032cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80032ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003324 <HAL_RCC_ClockConfig+0x358>)
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	4917      	ldr	r1, [pc, #92]	@ (8003324 <HAL_RCC_ClockConfig+0x358>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032cc:	f000 f834 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 80032d0:	4602      	mov	r2, r0
 80032d2:	4b14      	ldr	r3, [pc, #80]	@ (8003324 <HAL_RCC_ClockConfig+0x358>)
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	0a1b      	lsrs	r3, r3, #8
 80032d8:	f003 030f 	and.w	r3, r3, #15
 80032dc:	4912      	ldr	r1, [pc, #72]	@ (8003328 <HAL_RCC_ClockConfig+0x35c>)
 80032de:	5ccb      	ldrb	r3, [r1, r3]
 80032e0:	f003 031f 	and.w	r3, r3, #31
 80032e4:	fa22 f303 	lsr.w	r3, r2, r3
 80032e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003324 <HAL_RCC_ClockConfig+0x358>)
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003328 <HAL_RCC_ClockConfig+0x35c>)
 80032f4:	5cd3      	ldrb	r3, [r2, r3]
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003300:	4a0a      	ldr	r2, [pc, #40]	@ (800332c <HAL_RCC_ClockConfig+0x360>)
 8003302:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003304:	4a0a      	ldr	r2, [pc, #40]	@ (8003330 <HAL_RCC_ClockConfig+0x364>)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800330a:	4b0a      	ldr	r3, [pc, #40]	@ (8003334 <HAL_RCC_ClockConfig+0x368>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7fd fe62 	bl	8000fd8 <HAL_InitTick>
 8003314:	4603      	mov	r3, r0
 8003316:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003318:	7bfb      	ldrb	r3, [r7, #15]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	58024400 	.word	0x58024400
 8003328:	0800a94c 	.word	0x0800a94c
 800332c:	24000004 	.word	0x24000004
 8003330:	24000000 	.word	0x24000000
 8003334:	24000008 	.word	0x24000008

08003338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003338:	b480      	push	{r7}
 800333a:	b089      	sub	sp, #36	@ 0x24
 800333c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800333e:	4bb3      	ldr	r3, [pc, #716]	@ (800360c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003346:	2b18      	cmp	r3, #24
 8003348:	f200 8155 	bhi.w	80035f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800334c:	a201      	add	r2, pc, #4	@ (adr r2, 8003354 <HAL_RCC_GetSysClockFreq+0x1c>)
 800334e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003352:	bf00      	nop
 8003354:	080033b9 	.word	0x080033b9
 8003358:	080035f7 	.word	0x080035f7
 800335c:	080035f7 	.word	0x080035f7
 8003360:	080035f7 	.word	0x080035f7
 8003364:	080035f7 	.word	0x080035f7
 8003368:	080035f7 	.word	0x080035f7
 800336c:	080035f7 	.word	0x080035f7
 8003370:	080035f7 	.word	0x080035f7
 8003374:	080033df 	.word	0x080033df
 8003378:	080035f7 	.word	0x080035f7
 800337c:	080035f7 	.word	0x080035f7
 8003380:	080035f7 	.word	0x080035f7
 8003384:	080035f7 	.word	0x080035f7
 8003388:	080035f7 	.word	0x080035f7
 800338c:	080035f7 	.word	0x080035f7
 8003390:	080035f7 	.word	0x080035f7
 8003394:	080033e5 	.word	0x080033e5
 8003398:	080035f7 	.word	0x080035f7
 800339c:	080035f7 	.word	0x080035f7
 80033a0:	080035f7 	.word	0x080035f7
 80033a4:	080035f7 	.word	0x080035f7
 80033a8:	080035f7 	.word	0x080035f7
 80033ac:	080035f7 	.word	0x080035f7
 80033b0:	080035f7 	.word	0x080035f7
 80033b4:	080033eb 	.word	0x080033eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033b8:	4b94      	ldr	r3, [pc, #592]	@ (800360c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0320 	and.w	r3, r3, #32
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d009      	beq.n	80033d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033c4:	4b91      	ldr	r3, [pc, #580]	@ (800360c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	08db      	lsrs	r3, r3, #3
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	4a90      	ldr	r2, [pc, #576]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
 80033d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80033d6:	e111      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80033d8:	4b8d      	ldr	r3, [pc, #564]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033da:	61bb      	str	r3, [r7, #24]
      break;
 80033dc:	e10e      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80033de:	4b8d      	ldr	r3, [pc, #564]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033e0:	61bb      	str	r3, [r7, #24]
      break;
 80033e2:	e10b      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80033e4:	4b8c      	ldr	r3, [pc, #560]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80033e6:	61bb      	str	r3, [r7, #24]
      break;
 80033e8:	e108      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033ea:	4b88      	ldr	r3, [pc, #544]	@ (800360c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80033f4:	4b85      	ldr	r3, [pc, #532]	@ (800360c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003400:	4b82      	ldr	r3, [pc, #520]	@ (800360c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800340a:	4b80      	ldr	r3, [pc, #512]	@ (800360c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800340c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800340e:	08db      	lsrs	r3, r3, #3
 8003410:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	fb02 f303 	mul.w	r3, r2, r3
 800341a:	ee07 3a90 	vmov	s15, r3
 800341e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003422:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 80e1 	beq.w	80035f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2b02      	cmp	r3, #2
 8003432:	f000 8083 	beq.w	800353c <HAL_RCC_GetSysClockFreq+0x204>
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b02      	cmp	r3, #2
 800343a:	f200 80a1 	bhi.w	8003580 <HAL_RCC_GetSysClockFreq+0x248>
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x114>
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d056      	beq.n	80034f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800344a:	e099      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800344c:	4b6f      	ldr	r3, [pc, #444]	@ (800360c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b00      	cmp	r3, #0
 8003456:	d02d      	beq.n	80034b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003458:	4b6c      	ldr	r3, [pc, #432]	@ (800360c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	08db      	lsrs	r3, r3, #3
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	4a6b      	ldr	r2, [pc, #428]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003464:	fa22 f303 	lsr.w	r3, r2, r3
 8003468:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	ee07 3a90 	vmov	s15, r3
 8003470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	ee07 3a90 	vmov	s15, r3
 800347a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800347e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003482:	4b62      	ldr	r3, [pc, #392]	@ (800360c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800348a:	ee07 3a90 	vmov	s15, r3
 800348e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003492:	ed97 6a02 	vldr	s12, [r7, #8]
 8003496:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800361c <HAL_RCC_GetSysClockFreq+0x2e4>
 800349a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800349e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80034b2:	e087      	b.n	80035c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	ee07 3a90 	vmov	s15, r3
 80034ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034be:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003620 <HAL_RCC_GetSysClockFreq+0x2e8>
 80034c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034c6:	4b51      	ldr	r3, [pc, #324]	@ (800360c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80034da:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800361c <HAL_RCC_GetSysClockFreq+0x2e4>
 80034de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034f6:	e065      	b.n	80035c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	ee07 3a90 	vmov	s15, r3
 80034fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003502:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003624 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800350a:	4b40      	ldr	r3, [pc, #256]	@ (800360c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003512:	ee07 3a90 	vmov	s15, r3
 8003516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800351a:	ed97 6a02 	vldr	s12, [r7, #8]
 800351e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800361c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800352a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800352e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003536:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800353a:	e043      	b.n	80035c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003546:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003628 <HAL_RCC_GetSysClockFreq+0x2f0>
 800354a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800354e:	4b2f      	ldr	r3, [pc, #188]	@ (800360c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003556:	ee07 3a90 	vmov	s15, r3
 800355a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800355e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003562:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800361c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800356a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800356e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800357a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800357e:	e021      	b.n	80035c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	ee07 3a90 	vmov	s15, r3
 8003586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800358a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003624 <HAL_RCC_GetSysClockFreq+0x2ec>
 800358e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003592:	4b1e      	ldr	r3, [pc, #120]	@ (800360c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800359a:	ee07 3a90 	vmov	s15, r3
 800359e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80035a6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800361c <HAL_RCC_GetSysClockFreq+0x2e4>
 80035aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80035c4:	4b11      	ldr	r3, [pc, #68]	@ (800360c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c8:	0a5b      	lsrs	r3, r3, #9
 80035ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035ce:	3301      	adds	r3, #1
 80035d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	ee07 3a90 	vmov	s15, r3
 80035d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80035e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035e8:	ee17 3a90 	vmov	r3, s15
 80035ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80035ee:	e005      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61bb      	str	r3, [r7, #24]
      break;
 80035f4:	e002      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80035f6:	4b07      	ldr	r3, [pc, #28]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035f8:	61bb      	str	r3, [r7, #24]
      break;
 80035fa:	bf00      	nop
  }

  return sysclockfreq;
 80035fc:	69bb      	ldr	r3, [r7, #24]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3724      	adds	r7, #36	@ 0x24
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	58024400 	.word	0x58024400
 8003610:	03d09000 	.word	0x03d09000
 8003614:	003d0900 	.word	0x003d0900
 8003618:	007a1200 	.word	0x007a1200
 800361c:	46000000 	.word	0x46000000
 8003620:	4c742400 	.word	0x4c742400
 8003624:	4a742400 	.word	0x4a742400
 8003628:	4af42400 	.word	0x4af42400

0800362c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003632:	f7ff fe81 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 8003636:	4602      	mov	r2, r0
 8003638:	4b10      	ldr	r3, [pc, #64]	@ (800367c <HAL_RCC_GetHCLKFreq+0x50>)
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	0a1b      	lsrs	r3, r3, #8
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	490f      	ldr	r1, [pc, #60]	@ (8003680 <HAL_RCC_GetHCLKFreq+0x54>)
 8003644:	5ccb      	ldrb	r3, [r1, r3]
 8003646:	f003 031f 	and.w	r3, r3, #31
 800364a:	fa22 f303 	lsr.w	r3, r2, r3
 800364e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003650:	4b0a      	ldr	r3, [pc, #40]	@ (800367c <HAL_RCC_GetHCLKFreq+0x50>)
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	f003 030f 	and.w	r3, r3, #15
 8003658:	4a09      	ldr	r2, [pc, #36]	@ (8003680 <HAL_RCC_GetHCLKFreq+0x54>)
 800365a:	5cd3      	ldrb	r3, [r2, r3]
 800365c:	f003 031f 	and.w	r3, r3, #31
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	fa22 f303 	lsr.w	r3, r2, r3
 8003666:	4a07      	ldr	r2, [pc, #28]	@ (8003684 <HAL_RCC_GetHCLKFreq+0x58>)
 8003668:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800366a:	4a07      	ldr	r2, [pc, #28]	@ (8003688 <HAL_RCC_GetHCLKFreq+0x5c>)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003670:	4b04      	ldr	r3, [pc, #16]	@ (8003684 <HAL_RCC_GetHCLKFreq+0x58>)
 8003672:	681b      	ldr	r3, [r3, #0]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	58024400 	.word	0x58024400
 8003680:	0800a94c 	.word	0x0800a94c
 8003684:	24000004 	.word	0x24000004
 8003688:	24000000 	.word	0x24000000

0800368c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003690:	f7ff ffcc 	bl	800362c <HAL_RCC_GetHCLKFreq>
 8003694:	4602      	mov	r2, r0
 8003696:	4b06      	ldr	r3, [pc, #24]	@ (80036b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	091b      	lsrs	r3, r3, #4
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	4904      	ldr	r1, [pc, #16]	@ (80036b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036a2:	5ccb      	ldrb	r3, [r1, r3]
 80036a4:	f003 031f 	and.w	r3, r3, #31
 80036a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	58024400 	.word	0x58024400
 80036b4:	0800a94c 	.word	0x0800a94c

080036b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80036bc:	f7ff ffb6 	bl	800362c <HAL_RCC_GetHCLKFreq>
 80036c0:	4602      	mov	r2, r0
 80036c2:	4b06      	ldr	r3, [pc, #24]	@ (80036dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	0a1b      	lsrs	r3, r3, #8
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	4904      	ldr	r1, [pc, #16]	@ (80036e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036ce:	5ccb      	ldrb	r3, [r1, r3]
 80036d0:	f003 031f 	and.w	r3, r3, #31
 80036d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80036d8:	4618      	mov	r0, r3
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	58024400 	.word	0x58024400
 80036e0:	0800a94c 	.word	0x0800a94c

080036e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	223f      	movs	r2, #63	@ 0x3f
 80036f2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003760 <HAL_RCC_GetClockConfig+0x7c>)
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	f003 0207 	and.w	r2, r3, #7
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003700:	4b17      	ldr	r3, [pc, #92]	@ (8003760 <HAL_RCC_GetClockConfig+0x7c>)
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800370c:	4b14      	ldr	r3, [pc, #80]	@ (8003760 <HAL_RCC_GetClockConfig+0x7c>)
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	f003 020f 	and.w	r2, r3, #15
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003718:	4b11      	ldr	r3, [pc, #68]	@ (8003760 <HAL_RCC_GetClockConfig+0x7c>)
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003724:	4b0e      	ldr	r3, [pc, #56]	@ (8003760 <HAL_RCC_GetClockConfig+0x7c>)
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003730:	4b0b      	ldr	r3, [pc, #44]	@ (8003760 <HAL_RCC_GetClockConfig+0x7c>)
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800373c:	4b08      	ldr	r3, [pc, #32]	@ (8003760 <HAL_RCC_GetClockConfig+0x7c>)
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003748:	4b06      	ldr	r3, [pc, #24]	@ (8003764 <HAL_RCC_GetClockConfig+0x80>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 020f 	and.w	r2, r3, #15
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	601a      	str	r2, [r3, #0]
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	58024400 	.word	0x58024400
 8003764:	52002000 	.word	0x52002000

08003768 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800376c:	b0ca      	sub	sp, #296	@ 0x128
 800376e:	af00      	add	r7, sp, #0
 8003770:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003774:	2300      	movs	r3, #0
 8003776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800377a:	2300      	movs	r3, #0
 800377c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003788:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800378c:	2500      	movs	r5, #0
 800378e:	ea54 0305 	orrs.w	r3, r4, r5
 8003792:	d049      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003798:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800379a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800379e:	d02f      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80037a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037a4:	d828      	bhi.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80037a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037aa:	d01a      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80037ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037b0:	d822      	bhi.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x56>
 80037b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037ba:	d007      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037bc:	e01c      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037be:	4bb8      	ldr	r3, [pc, #736]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c2:	4ab7      	ldr	r2, [pc, #732]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037ca:	e01a      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d0:	3308      	adds	r3, #8
 80037d2:	2102      	movs	r1, #2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f001 fc8f 	bl	80050f8 <RCCEx_PLL2_Config>
 80037da:	4603      	mov	r3, r0
 80037dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037e0:	e00f      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e6:	3328      	adds	r3, #40	@ 0x28
 80037e8:	2102      	movs	r1, #2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f001 fd36 	bl	800525c <RCCEx_PLL3_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037f6:	e004      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037fe:	e000      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10a      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800380a:	4ba5      	ldr	r3, [pc, #660]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800380c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800380e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003816:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003818:	4aa1      	ldr	r2, [pc, #644]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800381a:	430b      	orrs	r3, r1
 800381c:	6513      	str	r3, [r2, #80]	@ 0x50
 800381e:	e003      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003820:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003824:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800382c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003830:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003834:	f04f 0900 	mov.w	r9, #0
 8003838:	ea58 0309 	orrs.w	r3, r8, r9
 800383c:	d047      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800383e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003844:	2b04      	cmp	r3, #4
 8003846:	d82a      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003848:	a201      	add	r2, pc, #4	@ (adr r2, 8003850 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800384a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384e:	bf00      	nop
 8003850:	08003865 	.word	0x08003865
 8003854:	08003873 	.word	0x08003873
 8003858:	08003889 	.word	0x08003889
 800385c:	080038a7 	.word	0x080038a7
 8003860:	080038a7 	.word	0x080038a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003864:	4b8e      	ldr	r3, [pc, #568]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003868:	4a8d      	ldr	r2, [pc, #564]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800386a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800386e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003870:	e01a      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003876:	3308      	adds	r3, #8
 8003878:	2100      	movs	r1, #0
 800387a:	4618      	mov	r0, r3
 800387c:	f001 fc3c 	bl	80050f8 <RCCEx_PLL2_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003886:	e00f      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388c:	3328      	adds	r3, #40	@ 0x28
 800388e:	2100      	movs	r1, #0
 8003890:	4618      	mov	r0, r3
 8003892:	f001 fce3 	bl	800525c <RCCEx_PLL3_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800389c:	e004      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038a4:	e000      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80038a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10a      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038b0:	4b7b      	ldr	r3, [pc, #492]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038b4:	f023 0107 	bic.w	r1, r3, #7
 80038b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038be:	4a78      	ldr	r2, [pc, #480]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038c0:	430b      	orrs	r3, r1
 80038c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80038c4:	e003      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80038ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80038da:	f04f 0b00 	mov.w	fp, #0
 80038de:	ea5a 030b 	orrs.w	r3, sl, fp
 80038e2:	d04c      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80038e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038ee:	d030      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80038f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038f4:	d829      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80038f8:	d02d      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80038fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80038fc:	d825      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038fe:	2b80      	cmp	r3, #128	@ 0x80
 8003900:	d018      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003902:	2b80      	cmp	r3, #128	@ 0x80
 8003904:	d821      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800390a:	2b40      	cmp	r3, #64	@ 0x40
 800390c:	d007      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800390e:	e01c      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003910:	4b63      	ldr	r3, [pc, #396]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003914:	4a62      	ldr	r2, [pc, #392]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800391a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800391c:	e01c      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800391e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003922:	3308      	adds	r3, #8
 8003924:	2100      	movs	r1, #0
 8003926:	4618      	mov	r0, r3
 8003928:	f001 fbe6 	bl	80050f8 <RCCEx_PLL2_Config>
 800392c:	4603      	mov	r3, r0
 800392e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003932:	e011      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003938:	3328      	adds	r3, #40	@ 0x28
 800393a:	2100      	movs	r1, #0
 800393c:	4618      	mov	r0, r3
 800393e:	f001 fc8d 	bl	800525c <RCCEx_PLL3_Config>
 8003942:	4603      	mov	r3, r0
 8003944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003948:	e006      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003950:	e002      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003952:	bf00      	nop
 8003954:	e000      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003958:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10a      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003960:	4b4f      	ldr	r3, [pc, #316]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003964:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396e:	4a4c      	ldr	r2, [pc, #304]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003970:	430b      	orrs	r3, r1
 8003972:	6513      	str	r3, [r2, #80]	@ 0x50
 8003974:	e003      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800397a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800397e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003986:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800398a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800398e:	2300      	movs	r3, #0
 8003990:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003994:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003998:	460b      	mov	r3, r1
 800399a:	4313      	orrs	r3, r2
 800399c:	d053      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800399e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80039a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039aa:	d035      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80039ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039b0:	d82e      	bhi.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80039b6:	d031      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80039b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80039bc:	d828      	bhi.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039c2:	d01a      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x292>
 80039c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039c8:	d822      	bhi.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80039ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039d2:	d007      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80039d4:	e01c      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d6:	4b32      	ldr	r3, [pc, #200]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039da:	4a31      	ldr	r2, [pc, #196]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039e2:	e01c      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e8:	3308      	adds	r3, #8
 80039ea:	2100      	movs	r1, #0
 80039ec:	4618      	mov	r0, r3
 80039ee:	f001 fb83 	bl	80050f8 <RCCEx_PLL2_Config>
 80039f2:	4603      	mov	r3, r0
 80039f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80039f8:	e011      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fe:	3328      	adds	r3, #40	@ 0x28
 8003a00:	2100      	movs	r1, #0
 8003a02:	4618      	mov	r0, r3
 8003a04:	f001 fc2a 	bl	800525c <RCCEx_PLL3_Config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a0e:	e006      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a16:	e002      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003a18:	bf00      	nop
 8003a1a:	e000      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003a1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10b      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a26:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003a36:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a3c:	e003      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003a52:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003a56:	2300      	movs	r3, #0
 8003a58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003a5c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003a60:	460b      	mov	r3, r1
 8003a62:	4313      	orrs	r3, r2
 8003a64:	d056      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a72:	d038      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003a74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a78:	d831      	bhi.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a7e:	d034      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003a80:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a84:	d82b      	bhi.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a8a:	d01d      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003a8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a90:	d825      	bhi.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d006      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003a96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a9a:	d00a      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003a9c:	e01f      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a9e:	bf00      	nop
 8003aa0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aa4:	4ba2      	ldr	r3, [pc, #648]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa8:	4aa1      	ldr	r2, [pc, #644]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ab0:	e01c      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab6:	3308      	adds	r3, #8
 8003ab8:	2100      	movs	r1, #0
 8003aba:	4618      	mov	r0, r3
 8003abc:	f001 fb1c 	bl	80050f8 <RCCEx_PLL2_Config>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003ac6:	e011      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003acc:	3328      	adds	r3, #40	@ 0x28
 8003ace:	2100      	movs	r1, #0
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f001 fbc3 	bl	800525c <RCCEx_PLL3_Config>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003adc:	e006      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ae4:	e002      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003ae6:	bf00      	nop
 8003ae8:	e000      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10b      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003af4:	4b8e      	ldr	r3, [pc, #568]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003b04:	4a8a      	ldr	r2, [pc, #552]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b06:	430b      	orrs	r3, r1
 8003b08:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b0a:	e003      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003b20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003b24:	2300      	movs	r3, #0
 8003b26:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003b2a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4313      	orrs	r3, r2
 8003b32:	d03a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3a:	2b30      	cmp	r3, #48	@ 0x30
 8003b3c:	d01f      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003b3e:	2b30      	cmp	r3, #48	@ 0x30
 8003b40:	d819      	bhi.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b42:	2b20      	cmp	r3, #32
 8003b44:	d00c      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003b46:	2b20      	cmp	r3, #32
 8003b48:	d815      	bhi.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d019      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003b4e:	2b10      	cmp	r3, #16
 8003b50:	d111      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b52:	4b77      	ldr	r3, [pc, #476]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b56:	4a76      	ldr	r2, [pc, #472]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b5e:	e011      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b64:	3308      	adds	r3, #8
 8003b66:	2102      	movs	r1, #2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f001 fac5 	bl	80050f8 <RCCEx_PLL2_Config>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b74:	e006      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b7c:	e002      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003b7e:	bf00      	nop
 8003b80:	e000      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003b82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10a      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b8c:	4b68      	ldr	r3, [pc, #416]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b90:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b9a:	4a65      	ldr	r2, [pc, #404]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ba0:	e003      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ba6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003bb6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003bc0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	d051      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bd4:	d035      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003bd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bda:	d82e      	bhi.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003bdc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003be0:	d031      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003be2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003be6:	d828      	bhi.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003be8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bec:	d01a      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003bee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bf2:	d822      	bhi.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003bf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bfc:	d007      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003bfe:	e01c      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c00:	4b4b      	ldr	r3, [pc, #300]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c04:	4a4a      	ldr	r2, [pc, #296]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c0c:	e01c      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c12:	3308      	adds	r3, #8
 8003c14:	2100      	movs	r1, #0
 8003c16:	4618      	mov	r0, r3
 8003c18:	f001 fa6e 	bl	80050f8 <RCCEx_PLL2_Config>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c22:	e011      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c28:	3328      	adds	r3, #40	@ 0x28
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f001 fb15 	bl	800525c <RCCEx_PLL3_Config>
 8003c32:	4603      	mov	r3, r0
 8003c34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c38:	e006      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c40:	e002      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c42:	bf00      	nop
 8003c44:	e000      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10a      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c50:	4b37      	ldr	r3, [pc, #220]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c54:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c5e:	4a34      	ldr	r2, [pc, #208]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c60:	430b      	orrs	r3, r1
 8003c62:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c64:	e003      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003c7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c7e:	2300      	movs	r3, #0
 8003c80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003c84:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	d056      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c98:	d033      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003c9a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c9e:	d82c      	bhi.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ca0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ca4:	d02f      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003ca6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003caa:	d826      	bhi.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cb0:	d02b      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003cb2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cb6:	d820      	bhi.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cbc:	d012      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003cbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cc2:	d81a      	bhi.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d022      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ccc:	d115      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd2:	3308      	adds	r3, #8
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f001 fa0e 	bl	80050f8 <RCCEx_PLL2_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ce2:	e015      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce8:	3328      	adds	r3, #40	@ 0x28
 8003cea:	2101      	movs	r1, #1
 8003cec:	4618      	mov	r0, r3
 8003cee:	f001 fab5 	bl	800525c <RCCEx_PLL3_Config>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003cf8:	e00a      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d00:	e006      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d02:	bf00      	nop
 8003d04:	e004      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d06:	bf00      	nop
 8003d08:	e002      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d0a:	bf00      	nop
 8003d0c:	e000      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10d      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d18:	4b05      	ldr	r3, [pc, #20]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d1c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d26:	4a02      	ldr	r2, [pc, #8]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d2c:	e006      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003d2e:	bf00      	nop
 8003d30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d44:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003d48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d52:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	d055      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d68:	d033      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003d6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d6e:	d82c      	bhi.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d74:	d02f      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d7a:	d826      	bhi.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d7c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d80:	d02b      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003d82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d86:	d820      	bhi.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d8c:	d012      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003d8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d92:	d81a      	bhi.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d022      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003d98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d9c:	d115      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da2:	3308      	adds	r3, #8
 8003da4:	2101      	movs	r1, #1
 8003da6:	4618      	mov	r0, r3
 8003da8:	f001 f9a6 	bl	80050f8 <RCCEx_PLL2_Config>
 8003dac:	4603      	mov	r3, r0
 8003dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003db2:	e015      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db8:	3328      	adds	r3, #40	@ 0x28
 8003dba:	2101      	movs	r1, #1
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f001 fa4d 	bl	800525c <RCCEx_PLL3_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003dc8:	e00a      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dd0:	e006      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003dd2:	bf00      	nop
 8003dd4:	e004      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003dd6:	bf00      	nop
 8003dd8:	e002      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003dda:	bf00      	nop
 8003ddc:	e000      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003dde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10b      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003de8:	4ba3      	ldr	r3, [pc, #652]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dec:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003df8:	4a9f      	ldr	r2, [pc, #636]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dfe:	e003      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e10:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003e14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003e1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e22:	460b      	mov	r3, r1
 8003e24:	4313      	orrs	r3, r2
 8003e26:	d037      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e32:	d00e      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003e34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e38:	d816      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d018      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003e3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e42:	d111      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e44:	4b8c      	ldr	r3, [pc, #560]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e48:	4a8b      	ldr	r2, [pc, #556]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e50:	e00f      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e56:	3308      	adds	r3, #8
 8003e58:	2101      	movs	r1, #1
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f001 f94c 	bl	80050f8 <RCCEx_PLL2_Config>
 8003e60:	4603      	mov	r3, r0
 8003e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e66:	e004      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e6e:	e000      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10a      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e7a:	4b7f      	ldr	r3, [pc, #508]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e7e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e88:	4a7b      	ldr	r2, [pc, #492]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e8a:	430b      	orrs	r3, r1
 8003e8c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e8e:	e003      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003eae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	d039      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	d81c      	bhi.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec8:	08003f05 	.word	0x08003f05
 8003ecc:	08003ed9 	.word	0x08003ed9
 8003ed0:	08003ee7 	.word	0x08003ee7
 8003ed4:	08003f05 	.word	0x08003f05
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ed8:	4b67      	ldr	r3, [pc, #412]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003edc:	4a66      	ldr	r2, [pc, #408]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ee4:	e00f      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eea:	3308      	adds	r3, #8
 8003eec:	2102      	movs	r1, #2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f001 f902 	bl	80050f8 <RCCEx_PLL2_Config>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003efa:	e004      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f02:	e000      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10a      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f0e:	4b5a      	ldr	r3, [pc, #360]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f12:	f023 0103 	bic.w	r1, r3, #3
 8003f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f1c:	4a56      	ldr	r2, [pc, #344]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f1e:	430b      	orrs	r3, r1
 8003f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f22:	e003      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f34:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003f38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f42:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003f46:	460b      	mov	r3, r1
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f000 809f 	beq.w	800408c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f4e:	4b4b      	ldr	r3, [pc, #300]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a4a      	ldr	r2, [pc, #296]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f5a:	f7fd fb35 	bl	80015c8 <HAL_GetTick>
 8003f5e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f62:	e00b      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f64:	f7fd fb30 	bl	80015c8 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b64      	cmp	r3, #100	@ 0x64
 8003f72:	d903      	bls.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f7a:	e005      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f7c:	4b3f      	ldr	r3, [pc, #252]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0ed      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d179      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f90:	4b39      	ldr	r3, [pc, #228]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f92:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f9c:	4053      	eors	r3, r2
 8003f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d015      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fa6:	4b34      	ldr	r3, [pc, #208]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003faa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fb2:	4b31      	ldr	r3, [pc, #196]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb6:	4a30      	ldr	r2, [pc, #192]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fbc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fbe:	4b2e      	ldr	r3, [pc, #184]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc2:	4a2d      	ldr	r2, [pc, #180]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fc8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003fca:	4a2b      	ldr	r2, [pc, #172]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fd0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fde:	d118      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe0:	f7fd faf2 	bl	80015c8 <HAL_GetTick>
 8003fe4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fe8:	e00d      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fea:	f7fd faed 	bl	80015c8 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003ff4:	1ad2      	subs	r2, r2, r3
 8003ff6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d903      	bls.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004004:	e005      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004006:	4b1c      	ldr	r3, [pc, #112]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0eb      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004016:	2b00      	cmp	r3, #0
 8004018:	d129      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800401a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800401e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004026:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800402a:	d10e      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800402c:	4b12      	ldr	r3, [pc, #72]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004038:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800403c:	091a      	lsrs	r2, r3, #4
 800403e:	4b10      	ldr	r3, [pc, #64]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004040:	4013      	ands	r3, r2
 8004042:	4a0d      	ldr	r2, [pc, #52]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004044:	430b      	orrs	r3, r1
 8004046:	6113      	str	r3, [r2, #16]
 8004048:	e005      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800404a:	4b0b      	ldr	r3, [pc, #44]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	4a0a      	ldr	r2, [pc, #40]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004050:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004054:	6113      	str	r3, [r2, #16]
 8004056:	4b08      	ldr	r3, [pc, #32]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004058:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800405a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004066:	4a04      	ldr	r2, [pc, #16]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004068:	430b      	orrs	r3, r1
 800406a:	6713      	str	r3, [r2, #112]	@ 0x70
 800406c:	e00e      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800406e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004072:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004076:	e009      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004078:	58024400 	.word	0x58024400
 800407c:	58024800 	.word	0x58024800
 8004080:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004084:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004088:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800408c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004094:	f002 0301 	and.w	r3, r2, #1
 8004098:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800409c:	2300      	movs	r3, #0
 800409e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040a6:	460b      	mov	r3, r1
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f000 8089 	beq.w	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80040ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040b4:	2b28      	cmp	r3, #40	@ 0x28
 80040b6:	d86b      	bhi.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80040b8:	a201      	add	r2, pc, #4	@ (adr r2, 80040c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80040ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040be:	bf00      	nop
 80040c0:	08004199 	.word	0x08004199
 80040c4:	08004191 	.word	0x08004191
 80040c8:	08004191 	.word	0x08004191
 80040cc:	08004191 	.word	0x08004191
 80040d0:	08004191 	.word	0x08004191
 80040d4:	08004191 	.word	0x08004191
 80040d8:	08004191 	.word	0x08004191
 80040dc:	08004191 	.word	0x08004191
 80040e0:	08004165 	.word	0x08004165
 80040e4:	08004191 	.word	0x08004191
 80040e8:	08004191 	.word	0x08004191
 80040ec:	08004191 	.word	0x08004191
 80040f0:	08004191 	.word	0x08004191
 80040f4:	08004191 	.word	0x08004191
 80040f8:	08004191 	.word	0x08004191
 80040fc:	08004191 	.word	0x08004191
 8004100:	0800417b 	.word	0x0800417b
 8004104:	08004191 	.word	0x08004191
 8004108:	08004191 	.word	0x08004191
 800410c:	08004191 	.word	0x08004191
 8004110:	08004191 	.word	0x08004191
 8004114:	08004191 	.word	0x08004191
 8004118:	08004191 	.word	0x08004191
 800411c:	08004191 	.word	0x08004191
 8004120:	08004199 	.word	0x08004199
 8004124:	08004191 	.word	0x08004191
 8004128:	08004191 	.word	0x08004191
 800412c:	08004191 	.word	0x08004191
 8004130:	08004191 	.word	0x08004191
 8004134:	08004191 	.word	0x08004191
 8004138:	08004191 	.word	0x08004191
 800413c:	08004191 	.word	0x08004191
 8004140:	08004199 	.word	0x08004199
 8004144:	08004191 	.word	0x08004191
 8004148:	08004191 	.word	0x08004191
 800414c:	08004191 	.word	0x08004191
 8004150:	08004191 	.word	0x08004191
 8004154:	08004191 	.word	0x08004191
 8004158:	08004191 	.word	0x08004191
 800415c:	08004191 	.word	0x08004191
 8004160:	08004199 	.word	0x08004199
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004168:	3308      	adds	r3, #8
 800416a:	2101      	movs	r1, #1
 800416c:	4618      	mov	r0, r3
 800416e:	f000 ffc3 	bl	80050f8 <RCCEx_PLL2_Config>
 8004172:	4603      	mov	r3, r0
 8004174:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004178:	e00f      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800417a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417e:	3328      	adds	r3, #40	@ 0x28
 8004180:	2101      	movs	r1, #1
 8004182:	4618      	mov	r0, r3
 8004184:	f001 f86a 	bl	800525c <RCCEx_PLL3_Config>
 8004188:	4603      	mov	r3, r0
 800418a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800418e:	e004      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004196:	e000      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800419a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10a      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80041a2:	4bbf      	ldr	r3, [pc, #764]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80041aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041b0:	4abb      	ldr	r2, [pc, #748]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041b2:	430b      	orrs	r3, r1
 80041b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80041b6:	e003      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80041c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c8:	f002 0302 	and.w	r3, r2, #2
 80041cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041d0:	2300      	movs	r3, #0
 80041d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80041d6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80041da:	460b      	mov	r3, r1
 80041dc:	4313      	orrs	r3, r2
 80041de:	d041      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80041e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041e6:	2b05      	cmp	r3, #5
 80041e8:	d824      	bhi.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80041ea:	a201      	add	r2, pc, #4	@ (adr r2, 80041f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80041ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f0:	0800423d 	.word	0x0800423d
 80041f4:	08004209 	.word	0x08004209
 80041f8:	0800421f 	.word	0x0800421f
 80041fc:	0800423d 	.word	0x0800423d
 8004200:	0800423d 	.word	0x0800423d
 8004204:	0800423d 	.word	0x0800423d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420c:	3308      	adds	r3, #8
 800420e:	2101      	movs	r1, #1
 8004210:	4618      	mov	r0, r3
 8004212:	f000 ff71 	bl	80050f8 <RCCEx_PLL2_Config>
 8004216:	4603      	mov	r3, r0
 8004218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800421c:	e00f      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800421e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004222:	3328      	adds	r3, #40	@ 0x28
 8004224:	2101      	movs	r1, #1
 8004226:	4618      	mov	r0, r3
 8004228:	f001 f818 	bl	800525c <RCCEx_PLL3_Config>
 800422c:	4603      	mov	r3, r0
 800422e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004232:	e004      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800423a:	e000      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800423c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800423e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10a      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004246:	4b96      	ldr	r3, [pc, #600]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800424a:	f023 0107 	bic.w	r1, r3, #7
 800424e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004252:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004254:	4a92      	ldr	r2, [pc, #584]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004256:	430b      	orrs	r3, r1
 8004258:	6553      	str	r3, [r2, #84]	@ 0x54
 800425a:	e003      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004260:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426c:	f002 0304 	and.w	r3, r2, #4
 8004270:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004274:	2300      	movs	r3, #0
 8004276:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800427a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800427e:	460b      	mov	r3, r1
 8004280:	4313      	orrs	r3, r2
 8004282:	d044      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004288:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800428c:	2b05      	cmp	r3, #5
 800428e:	d825      	bhi.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004290:	a201      	add	r2, pc, #4	@ (adr r2, 8004298 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004296:	bf00      	nop
 8004298:	080042e5 	.word	0x080042e5
 800429c:	080042b1 	.word	0x080042b1
 80042a0:	080042c7 	.word	0x080042c7
 80042a4:	080042e5 	.word	0x080042e5
 80042a8:	080042e5 	.word	0x080042e5
 80042ac:	080042e5 	.word	0x080042e5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b4:	3308      	adds	r3, #8
 80042b6:	2101      	movs	r1, #1
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 ff1d 	bl	80050f8 <RCCEx_PLL2_Config>
 80042be:	4603      	mov	r3, r0
 80042c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80042c4:	e00f      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ca:	3328      	adds	r3, #40	@ 0x28
 80042cc:	2101      	movs	r1, #1
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 ffc4 	bl	800525c <RCCEx_PLL3_Config>
 80042d4:	4603      	mov	r3, r0
 80042d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80042da:	e004      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042e2:	e000      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80042e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10b      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042ee:	4b6c      	ldr	r3, [pc, #432]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f2:	f023 0107 	bic.w	r1, r3, #7
 80042f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042fe:	4a68      	ldr	r2, [pc, #416]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004300:	430b      	orrs	r3, r1
 8004302:	6593      	str	r3, [r2, #88]	@ 0x58
 8004304:	e003      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004306:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800430a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800430e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004316:	f002 0320 	and.w	r3, r2, #32
 800431a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800431e:	2300      	movs	r3, #0
 8004320:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004328:	460b      	mov	r3, r1
 800432a:	4313      	orrs	r3, r2
 800432c:	d055      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800432e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004336:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800433a:	d033      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800433c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004340:	d82c      	bhi.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004346:	d02f      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800434c:	d826      	bhi.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800434e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004352:	d02b      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004354:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004358:	d820      	bhi.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800435a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800435e:	d012      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004360:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004364:	d81a      	bhi.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004366:	2b00      	cmp	r3, #0
 8004368:	d022      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800436a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800436e:	d115      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004374:	3308      	adds	r3, #8
 8004376:	2100      	movs	r1, #0
 8004378:	4618      	mov	r0, r3
 800437a:	f000 febd 	bl	80050f8 <RCCEx_PLL2_Config>
 800437e:	4603      	mov	r3, r0
 8004380:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004384:	e015      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800438a:	3328      	adds	r3, #40	@ 0x28
 800438c:	2102      	movs	r1, #2
 800438e:	4618      	mov	r0, r3
 8004390:	f000 ff64 	bl	800525c <RCCEx_PLL3_Config>
 8004394:	4603      	mov	r3, r0
 8004396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800439a:	e00a      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043a2:	e006      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043a4:	bf00      	nop
 80043a6:	e004      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043a8:	bf00      	nop
 80043aa:	e002      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043ac:	bf00      	nop
 80043ae:	e000      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10b      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043ba:	4b39      	ldr	r3, [pc, #228]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043be:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80043c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ca:	4a35      	ldr	r2, [pc, #212]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043cc:	430b      	orrs	r3, r1
 80043ce:	6553      	str	r3, [r2, #84]	@ 0x54
 80043d0:	e003      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80043da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80043e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80043ea:	2300      	movs	r3, #0
 80043ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80043f0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80043f4:	460b      	mov	r3, r1
 80043f6:	4313      	orrs	r3, r2
 80043f8:	d058      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80043fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004402:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004406:	d033      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004408:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800440c:	d82c      	bhi.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800440e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004412:	d02f      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004418:	d826      	bhi.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800441a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800441e:	d02b      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004420:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004424:	d820      	bhi.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004426:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800442a:	d012      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800442c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004430:	d81a      	bhi.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004432:	2b00      	cmp	r3, #0
 8004434:	d022      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800443a:	d115      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800443c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004440:	3308      	adds	r3, #8
 8004442:	2100      	movs	r1, #0
 8004444:	4618      	mov	r0, r3
 8004446:	f000 fe57 	bl	80050f8 <RCCEx_PLL2_Config>
 800444a:	4603      	mov	r3, r0
 800444c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004450:	e015      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004456:	3328      	adds	r3, #40	@ 0x28
 8004458:	2102      	movs	r1, #2
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fefe 	bl	800525c <RCCEx_PLL3_Config>
 8004460:	4603      	mov	r3, r0
 8004462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004466:	e00a      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800446e:	e006      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004470:	bf00      	nop
 8004472:	e004      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004474:	bf00      	nop
 8004476:	e002      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004478:	bf00      	nop
 800447a:	e000      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800447c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800447e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10e      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004486:	4b06      	ldr	r3, [pc, #24]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800448a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800448e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004492:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004496:	4a02      	ldr	r2, [pc, #8]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004498:	430b      	orrs	r3, r1
 800449a:	6593      	str	r3, [r2, #88]	@ 0x58
 800449c:	e006      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800449e:	bf00      	nop
 80044a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80044ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80044b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044bc:	2300      	movs	r3, #0
 80044be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80044c2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80044c6:	460b      	mov	r3, r1
 80044c8:	4313      	orrs	r3, r2
 80044ca:	d055      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80044cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80044d4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80044d8:	d033      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80044da:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80044de:	d82c      	bhi.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044e4:	d02f      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80044e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044ea:	d826      	bhi.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044ec:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80044f0:	d02b      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80044f2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80044f6:	d820      	bhi.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044fc:	d012      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80044fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004502:	d81a      	bhi.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004504:	2b00      	cmp	r3, #0
 8004506:	d022      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004508:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800450c:	d115      	bne.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800450e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004512:	3308      	adds	r3, #8
 8004514:	2100      	movs	r1, #0
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fdee 	bl	80050f8 <RCCEx_PLL2_Config>
 800451c:	4603      	mov	r3, r0
 800451e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004522:	e015      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004528:	3328      	adds	r3, #40	@ 0x28
 800452a:	2102      	movs	r1, #2
 800452c:	4618      	mov	r0, r3
 800452e:	f000 fe95 	bl	800525c <RCCEx_PLL3_Config>
 8004532:	4603      	mov	r3, r0
 8004534:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004538:	e00a      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004540:	e006      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004542:	bf00      	nop
 8004544:	e004      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004546:	bf00      	nop
 8004548:	e002      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800454a:	bf00      	nop
 800454c:	e000      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800454e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004550:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10b      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004558:	4ba1      	ldr	r3, [pc, #644]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800455a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800455c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004564:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004568:	4a9d      	ldr	r2, [pc, #628]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800456a:	430b      	orrs	r3, r1
 800456c:	6593      	str	r3, [r2, #88]	@ 0x58
 800456e:	e003      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004570:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004574:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004580:	f002 0308 	and.w	r3, r2, #8
 8004584:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004588:	2300      	movs	r3, #0
 800458a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800458e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004592:	460b      	mov	r3, r1
 8004594:	4313      	orrs	r3, r2
 8004596:	d01e      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045a4:	d10c      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045aa:	3328      	adds	r3, #40	@ 0x28
 80045ac:	2102      	movs	r1, #2
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fe54 	bl	800525c <RCCEx_PLL3_Config>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80045c0:	4b87      	ldr	r3, [pc, #540]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045d0:	4a83      	ldr	r2, [pc, #524]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045d2:	430b      	orrs	r3, r1
 80045d4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045de:	f002 0310 	and.w	r3, r2, #16
 80045e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045e6:	2300      	movs	r3, #0
 80045e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80045ec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80045f0:	460b      	mov	r3, r1
 80045f2:	4313      	orrs	r3, r2
 80045f4:	d01e      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80045f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004602:	d10c      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004608:	3328      	adds	r3, #40	@ 0x28
 800460a:	2102      	movs	r1, #2
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fe25 	bl	800525c <RCCEx_PLL3_Config>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800461e:	4b70      	ldr	r3, [pc, #448]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004622:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800462e:	4a6c      	ldr	r2, [pc, #432]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004630:	430b      	orrs	r3, r1
 8004632:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004640:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004644:	2300      	movs	r3, #0
 8004646:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800464a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800464e:	460b      	mov	r3, r1
 8004650:	4313      	orrs	r3, r2
 8004652:	d03e      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004658:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800465c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004660:	d022      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004662:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004666:	d81b      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800466c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004670:	d00b      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004672:	e015      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004678:	3308      	adds	r3, #8
 800467a:	2100      	movs	r1, #0
 800467c:	4618      	mov	r0, r3
 800467e:	f000 fd3b 	bl	80050f8 <RCCEx_PLL2_Config>
 8004682:	4603      	mov	r3, r0
 8004684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004688:	e00f      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800468a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800468e:	3328      	adds	r3, #40	@ 0x28
 8004690:	2102      	movs	r1, #2
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fde2 	bl	800525c <RCCEx_PLL3_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800469e:	e004      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046a6:	e000      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80046a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10b      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046b2:	4b4b      	ldr	r3, [pc, #300]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80046ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046c2:	4a47      	ldr	r2, [pc, #284]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046c4:	430b      	orrs	r3, r1
 80046c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80046c8:	e003      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046da:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80046de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046e0:	2300      	movs	r3, #0
 80046e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80046e4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80046e8:	460b      	mov	r3, r1
 80046ea:	4313      	orrs	r3, r2
 80046ec:	d03b      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80046ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046fa:	d01f      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80046fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004700:	d818      	bhi.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004702:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004706:	d003      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004708:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800470c:	d007      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800470e:	e011      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004710:	4b33      	ldr	r3, [pc, #204]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004714:	4a32      	ldr	r2, [pc, #200]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004716:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800471a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800471c:	e00f      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800471e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004722:	3328      	adds	r3, #40	@ 0x28
 8004724:	2101      	movs	r1, #1
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fd98 	bl	800525c <RCCEx_PLL3_Config>
 800472c:	4603      	mov	r3, r0
 800472e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004732:	e004      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800473a:	e000      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800473c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800473e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10b      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004746:	4b26      	ldr	r3, [pc, #152]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800474a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800474e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004756:	4a22      	ldr	r2, [pc, #136]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004758:	430b      	orrs	r3, r1
 800475a:	6553      	str	r3, [r2, #84]	@ 0x54
 800475c:	e003      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004762:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800476a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004772:	673b      	str	r3, [r7, #112]	@ 0x70
 8004774:	2300      	movs	r3, #0
 8004776:	677b      	str	r3, [r7, #116]	@ 0x74
 8004778:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800477c:	460b      	mov	r3, r1
 800477e:	4313      	orrs	r3, r2
 8004780:	d034      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800478c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004790:	d007      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004792:	e011      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004794:	4b12      	ldr	r3, [pc, #72]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004798:	4a11      	ldr	r2, [pc, #68]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800479a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800479e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80047a0:	e00e      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a6:	3308      	adds	r3, #8
 80047a8:	2102      	movs	r1, #2
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fca4 	bl	80050f8 <RCCEx_PLL2_Config>
 80047b0:	4603      	mov	r3, r0
 80047b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80047b6:	e003      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10d      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80047c8:	4b05      	ldr	r3, [pc, #20]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047cc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80047d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d6:	4a02      	ldr	r2, [pc, #8]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047d8:	430b      	orrs	r3, r1
 80047da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047dc:	e006      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80047de:	bf00      	nop
 80047e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80047f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047fa:	2300      	movs	r3, #0
 80047fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047fe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004802:	460b      	mov	r3, r1
 8004804:	4313      	orrs	r3, r2
 8004806:	d00c      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480c:	3328      	adds	r3, #40	@ 0x28
 800480e:	2102      	movs	r1, #2
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fd23 	bl	800525c <RCCEx_PLL3_Config>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800482e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004830:	2300      	movs	r3, #0
 8004832:	667b      	str	r3, [r7, #100]	@ 0x64
 8004834:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004838:	460b      	mov	r3, r1
 800483a:	4313      	orrs	r3, r2
 800483c:	d038      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800483e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004846:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800484a:	d018      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800484c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004850:	d811      	bhi.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004852:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004856:	d014      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800485c:	d80b      	bhi.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800485e:	2b00      	cmp	r3, #0
 8004860:	d011      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004866:	d106      	bne.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004868:	4bc3      	ldr	r3, [pc, #780]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800486a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486c:	4ac2      	ldr	r2, [pc, #776]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800486e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004874:	e008      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800487c:	e004      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800487e:	bf00      	nop
 8004880:	e002      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004882:	bf00      	nop
 8004884:	e000      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004886:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004888:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10b      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004890:	4bb9      	ldr	r3, [pc, #740]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004894:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048a0:	4ab5      	ldr	r2, [pc, #724]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048a2:	430b      	orrs	r3, r1
 80048a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80048a6:	e003      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80048bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048be:	2300      	movs	r3, #0
 80048c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048c2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80048c6:	460b      	mov	r3, r1
 80048c8:	4313      	orrs	r3, r2
 80048ca:	d009      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048cc:	4baa      	ldr	r3, [pc, #680]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80048d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048da:	4aa7      	ldr	r2, [pc, #668]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048dc:	430b      	orrs	r3, r1
 80048de:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80048e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80048ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80048ee:	2300      	movs	r3, #0
 80048f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80048f2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80048f6:	460b      	mov	r3, r1
 80048f8:	4313      	orrs	r3, r2
 80048fa:	d00a      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80048fc:	4b9e      	ldr	r3, [pc, #632]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004908:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800490c:	4a9a      	ldr	r2, [pc, #616]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800490e:	430b      	orrs	r3, r1
 8004910:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800491e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004920:	2300      	movs	r3, #0
 8004922:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004924:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004928:	460b      	mov	r3, r1
 800492a:	4313      	orrs	r3, r2
 800492c:	d009      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800492e:	4b92      	ldr	r3, [pc, #584]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004932:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800493a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800493c:	4a8e      	ldr	r2, [pc, #568]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800493e:	430b      	orrs	r3, r1
 8004940:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800494e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004950:	2300      	movs	r3, #0
 8004952:	647b      	str	r3, [r7, #68]	@ 0x44
 8004954:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004958:	460b      	mov	r3, r1
 800495a:	4313      	orrs	r3, r2
 800495c:	d00e      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800495e:	4b86      	ldr	r3, [pc, #536]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	4a85      	ldr	r2, [pc, #532]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004964:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004968:	6113      	str	r3, [r2, #16]
 800496a:	4b83      	ldr	r3, [pc, #524]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800496c:	6919      	ldr	r1, [r3, #16]
 800496e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004972:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004976:	4a80      	ldr	r2, [pc, #512]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004978:	430b      	orrs	r3, r1
 800497a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800497c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004984:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004988:	63bb      	str	r3, [r7, #56]	@ 0x38
 800498a:	2300      	movs	r3, #0
 800498c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800498e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004992:	460b      	mov	r3, r1
 8004994:	4313      	orrs	r3, r2
 8004996:	d009      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004998:	4b77      	ldr	r3, [pc, #476]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800499a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800499c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80049a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a6:	4a74      	ldr	r2, [pc, #464]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049a8:	430b      	orrs	r3, r1
 80049aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80049b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80049ba:	2300      	movs	r3, #0
 80049bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80049be:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80049c2:	460b      	mov	r3, r1
 80049c4:	4313      	orrs	r3, r2
 80049c6:	d00a      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049c8:	4b6b      	ldr	r3, [pc, #428]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049cc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80049d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049d8:	4a67      	ldr	r2, [pc, #412]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049da:	430b      	orrs	r3, r1
 80049dc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80049de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e6:	2100      	movs	r1, #0
 80049e8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049f0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80049f4:	460b      	mov	r3, r1
 80049f6:	4313      	orrs	r3, r2
 80049f8:	d011      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fe:	3308      	adds	r3, #8
 8004a00:	2100      	movs	r1, #0
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fb78 	bl	80050f8 <RCCEx_PLL2_Config>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a26:	2100      	movs	r1, #0
 8004a28:	6239      	str	r1, [r7, #32]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a30:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004a34:	460b      	mov	r3, r1
 8004a36:	4313      	orrs	r3, r2
 8004a38:	d011      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a3e:	3308      	adds	r3, #8
 8004a40:	2101      	movs	r1, #1
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fb58 	bl	80050f8 <RCCEx_PLL2_Config>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a66:	2100      	movs	r1, #0
 8004a68:	61b9      	str	r1, [r7, #24]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	61fb      	str	r3, [r7, #28]
 8004a70:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004a74:	460b      	mov	r3, r1
 8004a76:	4313      	orrs	r3, r2
 8004a78:	d011      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a7e:	3308      	adds	r3, #8
 8004a80:	2102      	movs	r1, #2
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fb38 	bl	80050f8 <RCCEx_PLL2_Config>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	6139      	str	r1, [r7, #16]
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	d011      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004abe:	3328      	adds	r3, #40	@ 0x28
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 fbca 	bl	800525c <RCCEx_PLL3_Config>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	f003 0310 	and.w	r3, r3, #16
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004af4:	460b      	mov	r3, r1
 8004af6:	4313      	orrs	r3, r2
 8004af8:	d011      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004afe:	3328      	adds	r3, #40	@ 0x28
 8004b00:	2101      	movs	r1, #1
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fbaa 	bl	800525c <RCCEx_PLL3_Config>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b26:	2100      	movs	r1, #0
 8004b28:	6039      	str	r1, [r7, #0]
 8004b2a:	f003 0320 	and.w	r3, r3, #32
 8004b2e:	607b      	str	r3, [r7, #4]
 8004b30:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004b34:	460b      	mov	r3, r1
 8004b36:	4313      	orrs	r3, r2
 8004b38:	d011      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b3e:	3328      	adds	r3, #40	@ 0x28
 8004b40:	2102      	movs	r1, #2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 fb8a 	bl	800525c <RCCEx_PLL3_Config>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004b5e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	e000      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004b72:	46bd      	mov	sp, r7
 8004b74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b78:	58024400 	.word	0x58024400

08004b7c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004b80:	f7fe fd54 	bl	800362c <HAL_RCC_GetHCLKFreq>
 8004b84:	4602      	mov	r2, r0
 8004b86:	4b06      	ldr	r3, [pc, #24]	@ (8004ba0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	091b      	lsrs	r3, r3, #4
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	4904      	ldr	r1, [pc, #16]	@ (8004ba4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004b92:	5ccb      	ldrb	r3, [r1, r3]
 8004b94:	f003 031f 	and.w	r3, r3, #31
 8004b98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	58024400 	.word	0x58024400
 8004ba4:	0800a94c 	.word	0x0800a94c

08004ba8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b089      	sub	sp, #36	@ 0x24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bb0:	4ba1      	ldr	r3, [pc, #644]	@ (8004e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb4:	f003 0303 	and.w	r3, r3, #3
 8004bb8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004bba:	4b9f      	ldr	r3, [pc, #636]	@ (8004e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bbe:	0b1b      	lsrs	r3, r3, #12
 8004bc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bc4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004bc6:	4b9c      	ldr	r3, [pc, #624]	@ (8004e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bca:	091b      	lsrs	r3, r3, #4
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004bd2:	4b99      	ldr	r3, [pc, #612]	@ (8004e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd6:	08db      	lsrs	r3, r3, #3
 8004bd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	fb02 f303 	mul.w	r3, r2, r3
 8004be2:	ee07 3a90 	vmov	s15, r3
 8004be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 8111 	beq.w	8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	f000 8083 	beq.w	8004d04 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	f200 80a1 	bhi.w	8004d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d056      	beq.n	8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004c12:	e099      	b.n	8004d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c14:	4b88      	ldr	r3, [pc, #544]	@ (8004e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0320 	and.w	r3, r3, #32
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d02d      	beq.n	8004c7c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c20:	4b85      	ldr	r3, [pc, #532]	@ (8004e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	08db      	lsrs	r3, r3, #3
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	4a84      	ldr	r2, [pc, #528]	@ (8004e3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c30:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	ee07 3a90 	vmov	s15, r3
 8004c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	ee07 3a90 	vmov	s15, r3
 8004c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c4a:	4b7b      	ldr	r3, [pc, #492]	@ (8004e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c5e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c7a:	e087      	b.n	8004d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c86:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c8e:	4b6a      	ldr	r3, [pc, #424]	@ (8004e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ca2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cbe:	e065      	b.n	8004d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	ee07 3a90 	vmov	s15, r3
 8004cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cd2:	4b59      	ldr	r3, [pc, #356]	@ (8004e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ce6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d02:	e043      	b.n	8004d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	ee07 3a90 	vmov	s15, r3
 8004d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d16:	4b48      	ldr	r3, [pc, #288]	@ (8004e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d2a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d46:	e021      	b.n	8004d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	ee07 3a90 	vmov	s15, r3
 8004d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d52:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d5a:	4b37      	ldr	r3, [pc, #220]	@ (8004e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d6e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d8a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004d8c:	4b2a      	ldr	r3, [pc, #168]	@ (8004e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d90:	0a5b      	lsrs	r3, r3, #9
 8004d92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d96:	ee07 3a90 	vmov	s15, r3
 8004d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004da2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004da6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004db2:	ee17 2a90 	vmov	r2, s15
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004dba:	4b1f      	ldr	r3, [pc, #124]	@ (8004e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbe:	0c1b      	lsrs	r3, r3, #16
 8004dc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dc4:	ee07 3a90 	vmov	s15, r3
 8004dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dcc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ddc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004de0:	ee17 2a90 	vmov	r2, s15
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004de8:	4b13      	ldr	r3, [pc, #76]	@ (8004e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dec:	0e1b      	lsrs	r3, r3, #24
 8004dee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004df2:	ee07 3a90 	vmov	s15, r3
 8004df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e02:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e0e:	ee17 2a90 	vmov	r2, s15
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004e16:	e008      	b.n	8004e2a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	609a      	str	r2, [r3, #8]
}
 8004e2a:	bf00      	nop
 8004e2c:	3724      	adds	r7, #36	@ 0x24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	58024400 	.word	0x58024400
 8004e3c:	03d09000 	.word	0x03d09000
 8004e40:	46000000 	.word	0x46000000
 8004e44:	4c742400 	.word	0x4c742400
 8004e48:	4a742400 	.word	0x4a742400
 8004e4c:	4af42400 	.word	0x4af42400

08004e50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b089      	sub	sp, #36	@ 0x24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e58:	4ba1      	ldr	r3, [pc, #644]	@ (80050e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5c:	f003 0303 	and.w	r3, r3, #3
 8004e60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004e62:	4b9f      	ldr	r3, [pc, #636]	@ (80050e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e66:	0d1b      	lsrs	r3, r3, #20
 8004e68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004e6e:	4b9c      	ldr	r3, [pc, #624]	@ (80050e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e72:	0a1b      	lsrs	r3, r3, #8
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004e7a:	4b99      	ldr	r3, [pc, #612]	@ (80050e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e7e:	08db      	lsrs	r3, r3, #3
 8004e80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	fb02 f303 	mul.w	r3, r2, r3
 8004e8a:	ee07 3a90 	vmov	s15, r3
 8004e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 8111 	beq.w	80050c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	f000 8083 	beq.w	8004fac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	f200 80a1 	bhi.w	8004ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d056      	beq.n	8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004eba:	e099      	b.n	8004ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ebc:	4b88      	ldr	r3, [pc, #544]	@ (80050e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0320 	and.w	r3, r3, #32
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d02d      	beq.n	8004f24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ec8:	4b85      	ldr	r3, [pc, #532]	@ (80050e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	08db      	lsrs	r3, r3, #3
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	4a84      	ldr	r2, [pc, #528]	@ (80050e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	ee07 3a90 	vmov	s15, r3
 8004ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ef2:	4b7b      	ldr	r3, [pc, #492]	@ (80050e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004efa:	ee07 3a90 	vmov	s15, r3
 8004efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f06:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80050e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f22:	e087      	b.n	8005034 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	ee07 3a90 	vmov	s15, r3
 8004f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80050ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f36:	4b6a      	ldr	r3, [pc, #424]	@ (80050e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3e:	ee07 3a90 	vmov	s15, r3
 8004f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f4a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80050e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f66:	e065      	b.n	8005034 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f72:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f7a:	4b59      	ldr	r3, [pc, #356]	@ (80050e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f8e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80050e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004faa:	e043      	b.n	8005034 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	ee07 3a90 	vmov	s15, r3
 8004fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80050f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fbe:	4b48      	ldr	r3, [pc, #288]	@ (80050e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fd2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80050e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fee:	e021      	b.n	8005034 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	ee07 3a90 	vmov	s15, r3
 8004ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ffa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005002:	4b37      	ldr	r3, [pc, #220]	@ (80050e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800500a:	ee07 3a90 	vmov	s15, r3
 800500e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005012:	ed97 6a03 	vldr	s12, [r7, #12]
 8005016:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80050e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800501a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800501e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800502a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800502e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005032:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005034:	4b2a      	ldr	r3, [pc, #168]	@ (80050e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005038:	0a5b      	lsrs	r3, r3, #9
 800503a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800503e:	ee07 3a90 	vmov	s15, r3
 8005042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005046:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800504a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800504e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800505a:	ee17 2a90 	vmov	r2, s15
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005062:	4b1f      	ldr	r3, [pc, #124]	@ (80050e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005066:	0c1b      	lsrs	r3, r3, #16
 8005068:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800506c:	ee07 3a90 	vmov	s15, r3
 8005070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005074:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005078:	ee37 7a87 	vadd.f32	s14, s15, s14
 800507c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005088:	ee17 2a90 	vmov	r2, s15
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005090:	4b13      	ldr	r3, [pc, #76]	@ (80050e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005094:	0e1b      	lsrs	r3, r3, #24
 8005096:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80050ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050b6:	ee17 2a90 	vmov	r2, s15
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80050be:	e008      	b.n	80050d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	609a      	str	r2, [r3, #8]
}
 80050d2:	bf00      	nop
 80050d4:	3724      	adds	r7, #36	@ 0x24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	58024400 	.word	0x58024400
 80050e4:	03d09000 	.word	0x03d09000
 80050e8:	46000000 	.word	0x46000000
 80050ec:	4c742400 	.word	0x4c742400
 80050f0:	4a742400 	.word	0x4a742400
 80050f4:	4af42400 	.word	0x4af42400

080050f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005106:	4b53      	ldr	r3, [pc, #332]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 8005108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	2b03      	cmp	r3, #3
 8005110:	d101      	bne.n	8005116 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e099      	b.n	800524a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005116:	4b4f      	ldr	r3, [pc, #316]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a4e      	ldr	r2, [pc, #312]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 800511c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005122:	f7fc fa51 	bl	80015c8 <HAL_GetTick>
 8005126:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005128:	e008      	b.n	800513c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800512a:	f7fc fa4d 	bl	80015c8 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e086      	b.n	800524a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800513c:	4b45      	ldr	r3, [pc, #276]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1f0      	bne.n	800512a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005148:	4b42      	ldr	r3, [pc, #264]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 800514a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	031b      	lsls	r3, r3, #12
 8005156:	493f      	ldr	r1, [pc, #252]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 8005158:	4313      	orrs	r3, r2
 800515a:	628b      	str	r3, [r1, #40]	@ 0x28
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	3b01      	subs	r3, #1
 8005162:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	3b01      	subs	r3, #1
 800516c:	025b      	lsls	r3, r3, #9
 800516e:	b29b      	uxth	r3, r3
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	3b01      	subs	r3, #1
 8005178:	041b      	lsls	r3, r3, #16
 800517a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	3b01      	subs	r3, #1
 8005186:	061b      	lsls	r3, r3, #24
 8005188:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800518c:	4931      	ldr	r1, [pc, #196]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 800518e:	4313      	orrs	r3, r2
 8005190:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005192:	4b30      	ldr	r3, [pc, #192]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 8005194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005196:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	492d      	ldr	r1, [pc, #180]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80051a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 80051a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a8:	f023 0220 	bic.w	r2, r3, #32
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	4928      	ldr	r1, [pc, #160]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80051b6:	4b27      	ldr	r3, [pc, #156]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 80051b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ba:	4a26      	ldr	r2, [pc, #152]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 80051bc:	f023 0310 	bic.w	r3, r3, #16
 80051c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80051c2:	4b24      	ldr	r3, [pc, #144]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 80051c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051c6:	4b24      	ldr	r3, [pc, #144]	@ (8005258 <RCCEx_PLL2_Config+0x160>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	69d2      	ldr	r2, [r2, #28]
 80051ce:	00d2      	lsls	r2, r2, #3
 80051d0:	4920      	ldr	r1, [pc, #128]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80051d6:	4b1f      	ldr	r3, [pc, #124]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 80051d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051da:	4a1e      	ldr	r2, [pc, #120]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 80051dc:	f043 0310 	orr.w	r3, r3, #16
 80051e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d106      	bne.n	80051f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80051e8:	4b1a      	ldr	r3, [pc, #104]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 80051ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ec:	4a19      	ldr	r2, [pc, #100]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 80051ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80051f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80051f4:	e00f      	b.n	8005216 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d106      	bne.n	800520a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80051fc:	4b15      	ldr	r3, [pc, #84]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 80051fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005200:	4a14      	ldr	r2, [pc, #80]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 8005202:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005206:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005208:	e005      	b.n	8005216 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800520a:	4b12      	ldr	r3, [pc, #72]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 800520c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520e:	4a11      	ldr	r2, [pc, #68]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 8005210:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005214:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005216:	4b0f      	ldr	r3, [pc, #60]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a0e      	ldr	r2, [pc, #56]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 800521c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005222:	f7fc f9d1 	bl	80015c8 <HAL_GetTick>
 8005226:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005228:	e008      	b.n	800523c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800522a:	f7fc f9cd 	bl	80015c8 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d901      	bls.n	800523c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e006      	b.n	800524a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800523c:	4b05      	ldr	r3, [pc, #20]	@ (8005254 <RCCEx_PLL2_Config+0x15c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d0f0      	beq.n	800522a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005248:	7bfb      	ldrb	r3, [r7, #15]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	58024400 	.word	0x58024400
 8005258:	ffff0007 	.word	0xffff0007

0800525c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800526a:	4b53      	ldr	r3, [pc, #332]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 800526c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526e:	f003 0303 	and.w	r3, r3, #3
 8005272:	2b03      	cmp	r3, #3
 8005274:	d101      	bne.n	800527a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e099      	b.n	80053ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800527a:	4b4f      	ldr	r3, [pc, #316]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a4e      	ldr	r2, [pc, #312]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 8005280:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005286:	f7fc f99f 	bl	80015c8 <HAL_GetTick>
 800528a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800528c:	e008      	b.n	80052a0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800528e:	f7fc f99b 	bl	80015c8 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e086      	b.n	80053ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052a0:	4b45      	ldr	r3, [pc, #276]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1f0      	bne.n	800528e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80052ac:	4b42      	ldr	r3, [pc, #264]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 80052ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	051b      	lsls	r3, r3, #20
 80052ba:	493f      	ldr	r1, [pc, #252]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	628b      	str	r3, [r1, #40]	@ 0x28
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	3b01      	subs	r3, #1
 80052c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	3b01      	subs	r3, #1
 80052d0:	025b      	lsls	r3, r3, #9
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	3b01      	subs	r3, #1
 80052dc:	041b      	lsls	r3, r3, #16
 80052de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80052e2:	431a      	orrs	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	061b      	lsls	r3, r3, #24
 80052ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80052f0:	4931      	ldr	r1, [pc, #196]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80052f6:	4b30      	ldr	r3, [pc, #192]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 80052f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	492d      	ldr	r1, [pc, #180]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 8005304:	4313      	orrs	r3, r2
 8005306:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005308:	4b2b      	ldr	r3, [pc, #172]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 800530a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800530c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	4928      	ldr	r1, [pc, #160]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 8005316:	4313      	orrs	r3, r2
 8005318:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800531a:	4b27      	ldr	r3, [pc, #156]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 800531c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531e:	4a26      	ldr	r2, [pc, #152]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 8005320:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005324:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005326:	4b24      	ldr	r3, [pc, #144]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 8005328:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800532a:	4b24      	ldr	r3, [pc, #144]	@ (80053bc <RCCEx_PLL3_Config+0x160>)
 800532c:	4013      	ands	r3, r2
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	69d2      	ldr	r2, [r2, #28]
 8005332:	00d2      	lsls	r2, r2, #3
 8005334:	4920      	ldr	r1, [pc, #128]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 8005336:	4313      	orrs	r3, r2
 8005338:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800533a:	4b1f      	ldr	r3, [pc, #124]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 800533c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533e:	4a1e      	ldr	r2, [pc, #120]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 8005340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005344:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d106      	bne.n	800535a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800534c:	4b1a      	ldr	r3, [pc, #104]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 800534e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005350:	4a19      	ldr	r2, [pc, #100]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 8005352:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005356:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005358:	e00f      	b.n	800537a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d106      	bne.n	800536e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005360:	4b15      	ldr	r3, [pc, #84]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 8005362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005364:	4a14      	ldr	r2, [pc, #80]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 8005366:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800536a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800536c:	e005      	b.n	800537a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800536e:	4b12      	ldr	r3, [pc, #72]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 8005370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005372:	4a11      	ldr	r2, [pc, #68]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 8005374:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005378:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800537a:	4b0f      	ldr	r3, [pc, #60]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a0e      	ldr	r2, [pc, #56]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 8005380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005384:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005386:	f7fc f91f 	bl	80015c8 <HAL_GetTick>
 800538a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800538c:	e008      	b.n	80053a0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800538e:	f7fc f91b 	bl	80015c8 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d901      	bls.n	80053a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e006      	b.n	80053ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053a0:	4b05      	ldr	r3, [pc, #20]	@ (80053b8 <RCCEx_PLL3_Config+0x15c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0f0      	beq.n	800538e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80053ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	58024400 	.word	0x58024400
 80053bc:	ffff0007 	.word	0xffff0007

080053c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e049      	b.n	8005466 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d106      	bne.n	80053ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f841 	bl	800546e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	3304      	adds	r3, #4
 80053fc:	4619      	mov	r1, r3
 80053fe:	4610      	mov	r0, r2
 8005400:	f000 f9e8 	bl	80057d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
	...

08005484 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b01      	cmp	r3, #1
 8005496:	d001      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e054      	b.n	8005546 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0201 	orr.w	r2, r2, #1
 80054b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a26      	ldr	r2, [pc, #152]	@ (8005554 <HAL_TIM_Base_Start_IT+0xd0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d022      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x80>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054c6:	d01d      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x80>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a22      	ldr	r2, [pc, #136]	@ (8005558 <HAL_TIM_Base_Start_IT+0xd4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d018      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x80>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a21      	ldr	r2, [pc, #132]	@ (800555c <HAL_TIM_Base_Start_IT+0xd8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d013      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x80>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005560 <HAL_TIM_Base_Start_IT+0xdc>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00e      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x80>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005564 <HAL_TIM_Base_Start_IT+0xe0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d009      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x80>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005568 <HAL_TIM_Base_Start_IT+0xe4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d004      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x80>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a1b      	ldr	r2, [pc, #108]	@ (800556c <HAL_TIM_Base_Start_IT+0xe8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d115      	bne.n	8005530 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689a      	ldr	r2, [r3, #8]
 800550a:	4b19      	ldr	r3, [pc, #100]	@ (8005570 <HAL_TIM_Base_Start_IT+0xec>)
 800550c:	4013      	ands	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2b06      	cmp	r3, #6
 8005514:	d015      	beq.n	8005542 <HAL_TIM_Base_Start_IT+0xbe>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800551c:	d011      	beq.n	8005542 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f042 0201 	orr.w	r2, r2, #1
 800552c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800552e:	e008      	b.n	8005542 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0201 	orr.w	r2, r2, #1
 800553e:	601a      	str	r2, [r3, #0]
 8005540:	e000      	b.n	8005544 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005542:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40010000 	.word	0x40010000
 8005558:	40000400 	.word	0x40000400
 800555c:	40000800 	.word	0x40000800
 8005560:	40000c00 	.word	0x40000c00
 8005564:	40010400 	.word	0x40010400
 8005568:	40001800 	.word	0x40001800
 800556c:	40014000 	.word	0x40014000
 8005570:	00010007 	.word	0x00010007

08005574 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d020      	beq.n	80055d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d01b      	beq.n	80055d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f06f 0202 	mvn.w	r2, #2
 80055a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f8e9 	bl	8005796 <HAL_TIM_IC_CaptureCallback>
 80055c4:	e005      	b.n	80055d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f8db 	bl	8005782 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f8ec 	bl	80057aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f003 0304 	and.w	r3, r3, #4
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d020      	beq.n	8005624 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01b      	beq.n	8005624 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f06f 0204 	mvn.w	r2, #4
 80055f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2202      	movs	r2, #2
 80055fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f8c3 	bl	8005796 <HAL_TIM_IC_CaptureCallback>
 8005610:	e005      	b.n	800561e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f8b5 	bl	8005782 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f8c6 	bl	80057aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f003 0308 	and.w	r3, r3, #8
 800562a:	2b00      	cmp	r3, #0
 800562c:	d020      	beq.n	8005670 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b00      	cmp	r3, #0
 8005636:	d01b      	beq.n	8005670 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0208 	mvn.w	r2, #8
 8005640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2204      	movs	r2, #4
 8005646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	f003 0303 	and.w	r3, r3, #3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f89d 	bl	8005796 <HAL_TIM_IC_CaptureCallback>
 800565c:	e005      	b.n	800566a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f88f 	bl	8005782 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f8a0 	bl	80057aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f003 0310 	and.w	r3, r3, #16
 8005676:	2b00      	cmp	r3, #0
 8005678:	d020      	beq.n	80056bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f003 0310 	and.w	r3, r3, #16
 8005680:	2b00      	cmp	r3, #0
 8005682:	d01b      	beq.n	80056bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f06f 0210 	mvn.w	r2, #16
 800568c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2208      	movs	r2, #8
 8005692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f877 	bl	8005796 <HAL_TIM_IC_CaptureCallback>
 80056a8:	e005      	b.n	80056b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f869 	bl	8005782 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f87a 	bl	80057aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00c      	beq.n	80056e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d007      	beq.n	80056e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f06f 0201 	mvn.w	r2, #1
 80056d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7fb fc46 	bl	8000f6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d104      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00c      	beq.n	800570e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d007      	beq.n	800570e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f913 	bl	8005934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00c      	beq.n	8005732 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800571e:	2b00      	cmp	r3, #0
 8005720:	d007      	beq.n	8005732 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800572a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f90b 	bl	8005948 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00c      	beq.n	8005756 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	d007      	beq.n	8005756 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800574e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f834 	bl	80057be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	f003 0320 	and.w	r3, r3, #32
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00c      	beq.n	800577a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b00      	cmp	r3, #0
 8005768:	d007      	beq.n	800577a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f06f 0220 	mvn.w	r2, #32
 8005772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f8d3 	bl	8005920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800577a:	bf00      	nop
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057b2:	bf00      	nop
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
	...

080057d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a46      	ldr	r2, [pc, #280]	@ (8005900 <TIM_Base_SetConfig+0x12c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d013      	beq.n	8005814 <TIM_Base_SetConfig+0x40>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057f2:	d00f      	beq.n	8005814 <TIM_Base_SetConfig+0x40>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a43      	ldr	r2, [pc, #268]	@ (8005904 <TIM_Base_SetConfig+0x130>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d00b      	beq.n	8005814 <TIM_Base_SetConfig+0x40>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a42      	ldr	r2, [pc, #264]	@ (8005908 <TIM_Base_SetConfig+0x134>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d007      	beq.n	8005814 <TIM_Base_SetConfig+0x40>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a41      	ldr	r2, [pc, #260]	@ (800590c <TIM_Base_SetConfig+0x138>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d003      	beq.n	8005814 <TIM_Base_SetConfig+0x40>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a40      	ldr	r2, [pc, #256]	@ (8005910 <TIM_Base_SetConfig+0x13c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d108      	bne.n	8005826 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800581a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a35      	ldr	r2, [pc, #212]	@ (8005900 <TIM_Base_SetConfig+0x12c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d01f      	beq.n	800586e <TIM_Base_SetConfig+0x9a>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005834:	d01b      	beq.n	800586e <TIM_Base_SetConfig+0x9a>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a32      	ldr	r2, [pc, #200]	@ (8005904 <TIM_Base_SetConfig+0x130>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d017      	beq.n	800586e <TIM_Base_SetConfig+0x9a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a31      	ldr	r2, [pc, #196]	@ (8005908 <TIM_Base_SetConfig+0x134>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d013      	beq.n	800586e <TIM_Base_SetConfig+0x9a>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a30      	ldr	r2, [pc, #192]	@ (800590c <TIM_Base_SetConfig+0x138>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d00f      	beq.n	800586e <TIM_Base_SetConfig+0x9a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a2f      	ldr	r2, [pc, #188]	@ (8005910 <TIM_Base_SetConfig+0x13c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00b      	beq.n	800586e <TIM_Base_SetConfig+0x9a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a2e      	ldr	r2, [pc, #184]	@ (8005914 <TIM_Base_SetConfig+0x140>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d007      	beq.n	800586e <TIM_Base_SetConfig+0x9a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a2d      	ldr	r2, [pc, #180]	@ (8005918 <TIM_Base_SetConfig+0x144>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d003      	beq.n	800586e <TIM_Base_SetConfig+0x9a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a2c      	ldr	r2, [pc, #176]	@ (800591c <TIM_Base_SetConfig+0x148>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d108      	bne.n	8005880 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a16      	ldr	r2, [pc, #88]	@ (8005900 <TIM_Base_SetConfig+0x12c>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d00f      	beq.n	80058cc <TIM_Base_SetConfig+0xf8>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a18      	ldr	r2, [pc, #96]	@ (8005910 <TIM_Base_SetConfig+0x13c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d00b      	beq.n	80058cc <TIM_Base_SetConfig+0xf8>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a17      	ldr	r2, [pc, #92]	@ (8005914 <TIM_Base_SetConfig+0x140>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d007      	beq.n	80058cc <TIM_Base_SetConfig+0xf8>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a16      	ldr	r2, [pc, #88]	@ (8005918 <TIM_Base_SetConfig+0x144>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d003      	beq.n	80058cc <TIM_Base_SetConfig+0xf8>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a15      	ldr	r2, [pc, #84]	@ (800591c <TIM_Base_SetConfig+0x148>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d103      	bne.n	80058d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	691a      	ldr	r2, [r3, #16]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d105      	bne.n	80058f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f023 0201 	bic.w	r2, r3, #1
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	611a      	str	r2, [r3, #16]
  }
}
 80058f2:	bf00      	nop
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	40010000 	.word	0x40010000
 8005904:	40000400 	.word	0x40000400
 8005908:	40000800 	.word	0x40000800
 800590c:	40000c00 	.word	0x40000c00
 8005910:	40010400 	.word	0x40010400
 8005914:	40014000 	.word	0x40014000
 8005918:	40014400 	.word	0x40014400
 800591c:	40014800 	.word	0x40014800

08005920 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e042      	b.n	80059f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005974:	2b00      	cmp	r3, #0
 8005976:	d106      	bne.n	8005986 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f7fb fc8f 	bl	80012a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2224      	movs	r2, #36	@ 0x24
 800598a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0201 	bic.w	r2, r2, #1
 800599c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 fe1e 	bl	80065e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f8b3 	bl	8005b18 <UART_SetConfig>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d101      	bne.n	80059bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e01b      	b.n	80059f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689a      	ldr	r2, [r3, #8]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0201 	orr.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fe9d 	bl	800672c <UART_CheckIdleState>
 80059f2:	4603      	mov	r3, r0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08a      	sub	sp, #40	@ 0x28
 8005a00:	af02      	add	r7, sp, #8
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	603b      	str	r3, [r7, #0]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a12:	2b20      	cmp	r3, #32
 8005a14:	d17b      	bne.n	8005b0e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <HAL_UART_Transmit+0x26>
 8005a1c:	88fb      	ldrh	r3, [r7, #6]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e074      	b.n	8005b10 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2221      	movs	r2, #33	@ 0x21
 8005a32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a36:	f7fb fdc7 	bl	80015c8 <HAL_GetTick>
 8005a3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	88fa      	ldrh	r2, [r7, #6]
 8005a40:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	88fa      	ldrh	r2, [r7, #6]
 8005a48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a54:	d108      	bne.n	8005a68 <HAL_UART_Transmit+0x6c>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d104      	bne.n	8005a68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	61bb      	str	r3, [r7, #24]
 8005a66:	e003      	b.n	8005a70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a70:	e030      	b.n	8005ad4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2180      	movs	r1, #128	@ 0x80
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 feff 	bl	8006880 <UART_WaitOnFlagUntilTimeout>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d005      	beq.n	8005a94 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e03d      	b.n	8005b10 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10b      	bne.n	8005ab2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aa8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	3302      	adds	r3, #2
 8005aae:	61bb      	str	r3, [r7, #24]
 8005ab0:	e007      	b.n	8005ac2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	781a      	ldrb	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	3b01      	subs	r3, #1
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1c8      	bne.n	8005a72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	2140      	movs	r1, #64	@ 0x40
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f000 fec8 	bl	8006880 <UART_WaitOnFlagUntilTimeout>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d005      	beq.n	8005b02 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2220      	movs	r2, #32
 8005afa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e006      	b.n	8005b10 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	e000      	b.n	8005b10 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005b0e:	2302      	movs	r3, #2
  }
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3720      	adds	r7, #32
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b1c:	b092      	sub	sp, #72	@ 0x48
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	431a      	orrs	r2, r3
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	431a      	orrs	r2, r3
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	4bbe      	ldr	r3, [pc, #760]	@ (8005e40 <UART_SetConfig+0x328>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	6812      	ldr	r2, [r2, #0]
 8005b4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b50:	430b      	orrs	r3, r1
 8005b52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	68da      	ldr	r2, [r3, #12]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4ab3      	ldr	r2, [pc, #716]	@ (8005e44 <UART_SetConfig+0x32c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d004      	beq.n	8005b84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b80:	4313      	orrs	r3, r2
 8005b82:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689a      	ldr	r2, [r3, #8]
 8005b8a:	4baf      	ldr	r3, [pc, #700]	@ (8005e48 <UART_SetConfig+0x330>)
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	6812      	ldr	r2, [r2, #0]
 8005b92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b94:	430b      	orrs	r3, r1
 8005b96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9e:	f023 010f 	bic.w	r1, r3, #15
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4aa6      	ldr	r2, [pc, #664]	@ (8005e4c <UART_SetConfig+0x334>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d177      	bne.n	8005ca8 <UART_SetConfig+0x190>
 8005bb8:	4ba5      	ldr	r3, [pc, #660]	@ (8005e50 <UART_SetConfig+0x338>)
 8005bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bc0:	2b28      	cmp	r3, #40	@ 0x28
 8005bc2:	d86d      	bhi.n	8005ca0 <UART_SetConfig+0x188>
 8005bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bcc <UART_SetConfig+0xb4>)
 8005bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bca:	bf00      	nop
 8005bcc:	08005c71 	.word	0x08005c71
 8005bd0:	08005ca1 	.word	0x08005ca1
 8005bd4:	08005ca1 	.word	0x08005ca1
 8005bd8:	08005ca1 	.word	0x08005ca1
 8005bdc:	08005ca1 	.word	0x08005ca1
 8005be0:	08005ca1 	.word	0x08005ca1
 8005be4:	08005ca1 	.word	0x08005ca1
 8005be8:	08005ca1 	.word	0x08005ca1
 8005bec:	08005c79 	.word	0x08005c79
 8005bf0:	08005ca1 	.word	0x08005ca1
 8005bf4:	08005ca1 	.word	0x08005ca1
 8005bf8:	08005ca1 	.word	0x08005ca1
 8005bfc:	08005ca1 	.word	0x08005ca1
 8005c00:	08005ca1 	.word	0x08005ca1
 8005c04:	08005ca1 	.word	0x08005ca1
 8005c08:	08005ca1 	.word	0x08005ca1
 8005c0c:	08005c81 	.word	0x08005c81
 8005c10:	08005ca1 	.word	0x08005ca1
 8005c14:	08005ca1 	.word	0x08005ca1
 8005c18:	08005ca1 	.word	0x08005ca1
 8005c1c:	08005ca1 	.word	0x08005ca1
 8005c20:	08005ca1 	.word	0x08005ca1
 8005c24:	08005ca1 	.word	0x08005ca1
 8005c28:	08005ca1 	.word	0x08005ca1
 8005c2c:	08005c89 	.word	0x08005c89
 8005c30:	08005ca1 	.word	0x08005ca1
 8005c34:	08005ca1 	.word	0x08005ca1
 8005c38:	08005ca1 	.word	0x08005ca1
 8005c3c:	08005ca1 	.word	0x08005ca1
 8005c40:	08005ca1 	.word	0x08005ca1
 8005c44:	08005ca1 	.word	0x08005ca1
 8005c48:	08005ca1 	.word	0x08005ca1
 8005c4c:	08005c91 	.word	0x08005c91
 8005c50:	08005ca1 	.word	0x08005ca1
 8005c54:	08005ca1 	.word	0x08005ca1
 8005c58:	08005ca1 	.word	0x08005ca1
 8005c5c:	08005ca1 	.word	0x08005ca1
 8005c60:	08005ca1 	.word	0x08005ca1
 8005c64:	08005ca1 	.word	0x08005ca1
 8005c68:	08005ca1 	.word	0x08005ca1
 8005c6c:	08005c99 	.word	0x08005c99
 8005c70:	2301      	movs	r3, #1
 8005c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c76:	e222      	b.n	80060be <UART_SetConfig+0x5a6>
 8005c78:	2304      	movs	r3, #4
 8005c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c7e:	e21e      	b.n	80060be <UART_SetConfig+0x5a6>
 8005c80:	2308      	movs	r3, #8
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c86:	e21a      	b.n	80060be <UART_SetConfig+0x5a6>
 8005c88:	2310      	movs	r3, #16
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c8e:	e216      	b.n	80060be <UART_SetConfig+0x5a6>
 8005c90:	2320      	movs	r3, #32
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c96:	e212      	b.n	80060be <UART_SetConfig+0x5a6>
 8005c98:	2340      	movs	r3, #64	@ 0x40
 8005c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c9e:	e20e      	b.n	80060be <UART_SetConfig+0x5a6>
 8005ca0:	2380      	movs	r3, #128	@ 0x80
 8005ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca6:	e20a      	b.n	80060be <UART_SetConfig+0x5a6>
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a69      	ldr	r2, [pc, #420]	@ (8005e54 <UART_SetConfig+0x33c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d130      	bne.n	8005d14 <UART_SetConfig+0x1fc>
 8005cb2:	4b67      	ldr	r3, [pc, #412]	@ (8005e50 <UART_SetConfig+0x338>)
 8005cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	2b05      	cmp	r3, #5
 8005cbc:	d826      	bhi.n	8005d0c <UART_SetConfig+0x1f4>
 8005cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc4 <UART_SetConfig+0x1ac>)
 8005cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc4:	08005cdd 	.word	0x08005cdd
 8005cc8:	08005ce5 	.word	0x08005ce5
 8005ccc:	08005ced 	.word	0x08005ced
 8005cd0:	08005cf5 	.word	0x08005cf5
 8005cd4:	08005cfd 	.word	0x08005cfd
 8005cd8:	08005d05 	.word	0x08005d05
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ce2:	e1ec      	b.n	80060be <UART_SetConfig+0x5a6>
 8005ce4:	2304      	movs	r3, #4
 8005ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cea:	e1e8      	b.n	80060be <UART_SetConfig+0x5a6>
 8005cec:	2308      	movs	r3, #8
 8005cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cf2:	e1e4      	b.n	80060be <UART_SetConfig+0x5a6>
 8005cf4:	2310      	movs	r3, #16
 8005cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cfa:	e1e0      	b.n	80060be <UART_SetConfig+0x5a6>
 8005cfc:	2320      	movs	r3, #32
 8005cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d02:	e1dc      	b.n	80060be <UART_SetConfig+0x5a6>
 8005d04:	2340      	movs	r3, #64	@ 0x40
 8005d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d0a:	e1d8      	b.n	80060be <UART_SetConfig+0x5a6>
 8005d0c:	2380      	movs	r3, #128	@ 0x80
 8005d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d12:	e1d4      	b.n	80060be <UART_SetConfig+0x5a6>
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a4f      	ldr	r2, [pc, #316]	@ (8005e58 <UART_SetConfig+0x340>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d130      	bne.n	8005d80 <UART_SetConfig+0x268>
 8005d1e:	4b4c      	ldr	r3, [pc, #304]	@ (8005e50 <UART_SetConfig+0x338>)
 8005d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d22:	f003 0307 	and.w	r3, r3, #7
 8005d26:	2b05      	cmp	r3, #5
 8005d28:	d826      	bhi.n	8005d78 <UART_SetConfig+0x260>
 8005d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d30 <UART_SetConfig+0x218>)
 8005d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d30:	08005d49 	.word	0x08005d49
 8005d34:	08005d51 	.word	0x08005d51
 8005d38:	08005d59 	.word	0x08005d59
 8005d3c:	08005d61 	.word	0x08005d61
 8005d40:	08005d69 	.word	0x08005d69
 8005d44:	08005d71 	.word	0x08005d71
 8005d48:	2300      	movs	r3, #0
 8005d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d4e:	e1b6      	b.n	80060be <UART_SetConfig+0x5a6>
 8005d50:	2304      	movs	r3, #4
 8005d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d56:	e1b2      	b.n	80060be <UART_SetConfig+0x5a6>
 8005d58:	2308      	movs	r3, #8
 8005d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d5e:	e1ae      	b.n	80060be <UART_SetConfig+0x5a6>
 8005d60:	2310      	movs	r3, #16
 8005d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d66:	e1aa      	b.n	80060be <UART_SetConfig+0x5a6>
 8005d68:	2320      	movs	r3, #32
 8005d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d6e:	e1a6      	b.n	80060be <UART_SetConfig+0x5a6>
 8005d70:	2340      	movs	r3, #64	@ 0x40
 8005d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d76:	e1a2      	b.n	80060be <UART_SetConfig+0x5a6>
 8005d78:	2380      	movs	r3, #128	@ 0x80
 8005d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d7e:	e19e      	b.n	80060be <UART_SetConfig+0x5a6>
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a35      	ldr	r2, [pc, #212]	@ (8005e5c <UART_SetConfig+0x344>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d130      	bne.n	8005dec <UART_SetConfig+0x2d4>
 8005d8a:	4b31      	ldr	r3, [pc, #196]	@ (8005e50 <UART_SetConfig+0x338>)
 8005d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d8e:	f003 0307 	and.w	r3, r3, #7
 8005d92:	2b05      	cmp	r3, #5
 8005d94:	d826      	bhi.n	8005de4 <UART_SetConfig+0x2cc>
 8005d96:	a201      	add	r2, pc, #4	@ (adr r2, 8005d9c <UART_SetConfig+0x284>)
 8005d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9c:	08005db5 	.word	0x08005db5
 8005da0:	08005dbd 	.word	0x08005dbd
 8005da4:	08005dc5 	.word	0x08005dc5
 8005da8:	08005dcd 	.word	0x08005dcd
 8005dac:	08005dd5 	.word	0x08005dd5
 8005db0:	08005ddd 	.word	0x08005ddd
 8005db4:	2300      	movs	r3, #0
 8005db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dba:	e180      	b.n	80060be <UART_SetConfig+0x5a6>
 8005dbc:	2304      	movs	r3, #4
 8005dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dc2:	e17c      	b.n	80060be <UART_SetConfig+0x5a6>
 8005dc4:	2308      	movs	r3, #8
 8005dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dca:	e178      	b.n	80060be <UART_SetConfig+0x5a6>
 8005dcc:	2310      	movs	r3, #16
 8005dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dd2:	e174      	b.n	80060be <UART_SetConfig+0x5a6>
 8005dd4:	2320      	movs	r3, #32
 8005dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dda:	e170      	b.n	80060be <UART_SetConfig+0x5a6>
 8005ddc:	2340      	movs	r3, #64	@ 0x40
 8005dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de2:	e16c      	b.n	80060be <UART_SetConfig+0x5a6>
 8005de4:	2380      	movs	r3, #128	@ 0x80
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dea:	e168      	b.n	80060be <UART_SetConfig+0x5a6>
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a1b      	ldr	r2, [pc, #108]	@ (8005e60 <UART_SetConfig+0x348>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d142      	bne.n	8005e7c <UART_SetConfig+0x364>
 8005df6:	4b16      	ldr	r3, [pc, #88]	@ (8005e50 <UART_SetConfig+0x338>)
 8005df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	2b05      	cmp	r3, #5
 8005e00:	d838      	bhi.n	8005e74 <UART_SetConfig+0x35c>
 8005e02:	a201      	add	r2, pc, #4	@ (adr r2, 8005e08 <UART_SetConfig+0x2f0>)
 8005e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e08:	08005e21 	.word	0x08005e21
 8005e0c:	08005e29 	.word	0x08005e29
 8005e10:	08005e31 	.word	0x08005e31
 8005e14:	08005e39 	.word	0x08005e39
 8005e18:	08005e65 	.word	0x08005e65
 8005e1c:	08005e6d 	.word	0x08005e6d
 8005e20:	2300      	movs	r3, #0
 8005e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e26:	e14a      	b.n	80060be <UART_SetConfig+0x5a6>
 8005e28:	2304      	movs	r3, #4
 8005e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e2e:	e146      	b.n	80060be <UART_SetConfig+0x5a6>
 8005e30:	2308      	movs	r3, #8
 8005e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e36:	e142      	b.n	80060be <UART_SetConfig+0x5a6>
 8005e38:	2310      	movs	r3, #16
 8005e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3e:	e13e      	b.n	80060be <UART_SetConfig+0x5a6>
 8005e40:	cfff69f3 	.word	0xcfff69f3
 8005e44:	58000c00 	.word	0x58000c00
 8005e48:	11fff4ff 	.word	0x11fff4ff
 8005e4c:	40011000 	.word	0x40011000
 8005e50:	58024400 	.word	0x58024400
 8005e54:	40004400 	.word	0x40004400
 8005e58:	40004800 	.word	0x40004800
 8005e5c:	40004c00 	.word	0x40004c00
 8005e60:	40005000 	.word	0x40005000
 8005e64:	2320      	movs	r3, #32
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6a:	e128      	b.n	80060be <UART_SetConfig+0x5a6>
 8005e6c:	2340      	movs	r3, #64	@ 0x40
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e72:	e124      	b.n	80060be <UART_SetConfig+0x5a6>
 8005e74:	2380      	movs	r3, #128	@ 0x80
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7a:	e120      	b.n	80060be <UART_SetConfig+0x5a6>
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4acb      	ldr	r2, [pc, #812]	@ (80061b0 <UART_SetConfig+0x698>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d176      	bne.n	8005f74 <UART_SetConfig+0x45c>
 8005e86:	4bcb      	ldr	r3, [pc, #812]	@ (80061b4 <UART_SetConfig+0x69c>)
 8005e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e8e:	2b28      	cmp	r3, #40	@ 0x28
 8005e90:	d86c      	bhi.n	8005f6c <UART_SetConfig+0x454>
 8005e92:	a201      	add	r2, pc, #4	@ (adr r2, 8005e98 <UART_SetConfig+0x380>)
 8005e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e98:	08005f3d 	.word	0x08005f3d
 8005e9c:	08005f6d 	.word	0x08005f6d
 8005ea0:	08005f6d 	.word	0x08005f6d
 8005ea4:	08005f6d 	.word	0x08005f6d
 8005ea8:	08005f6d 	.word	0x08005f6d
 8005eac:	08005f6d 	.word	0x08005f6d
 8005eb0:	08005f6d 	.word	0x08005f6d
 8005eb4:	08005f6d 	.word	0x08005f6d
 8005eb8:	08005f45 	.word	0x08005f45
 8005ebc:	08005f6d 	.word	0x08005f6d
 8005ec0:	08005f6d 	.word	0x08005f6d
 8005ec4:	08005f6d 	.word	0x08005f6d
 8005ec8:	08005f6d 	.word	0x08005f6d
 8005ecc:	08005f6d 	.word	0x08005f6d
 8005ed0:	08005f6d 	.word	0x08005f6d
 8005ed4:	08005f6d 	.word	0x08005f6d
 8005ed8:	08005f4d 	.word	0x08005f4d
 8005edc:	08005f6d 	.word	0x08005f6d
 8005ee0:	08005f6d 	.word	0x08005f6d
 8005ee4:	08005f6d 	.word	0x08005f6d
 8005ee8:	08005f6d 	.word	0x08005f6d
 8005eec:	08005f6d 	.word	0x08005f6d
 8005ef0:	08005f6d 	.word	0x08005f6d
 8005ef4:	08005f6d 	.word	0x08005f6d
 8005ef8:	08005f55 	.word	0x08005f55
 8005efc:	08005f6d 	.word	0x08005f6d
 8005f00:	08005f6d 	.word	0x08005f6d
 8005f04:	08005f6d 	.word	0x08005f6d
 8005f08:	08005f6d 	.word	0x08005f6d
 8005f0c:	08005f6d 	.word	0x08005f6d
 8005f10:	08005f6d 	.word	0x08005f6d
 8005f14:	08005f6d 	.word	0x08005f6d
 8005f18:	08005f5d 	.word	0x08005f5d
 8005f1c:	08005f6d 	.word	0x08005f6d
 8005f20:	08005f6d 	.word	0x08005f6d
 8005f24:	08005f6d 	.word	0x08005f6d
 8005f28:	08005f6d 	.word	0x08005f6d
 8005f2c:	08005f6d 	.word	0x08005f6d
 8005f30:	08005f6d 	.word	0x08005f6d
 8005f34:	08005f6d 	.word	0x08005f6d
 8005f38:	08005f65 	.word	0x08005f65
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f42:	e0bc      	b.n	80060be <UART_SetConfig+0x5a6>
 8005f44:	2304      	movs	r3, #4
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f4a:	e0b8      	b.n	80060be <UART_SetConfig+0x5a6>
 8005f4c:	2308      	movs	r3, #8
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f52:	e0b4      	b.n	80060be <UART_SetConfig+0x5a6>
 8005f54:	2310      	movs	r3, #16
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5a:	e0b0      	b.n	80060be <UART_SetConfig+0x5a6>
 8005f5c:	2320      	movs	r3, #32
 8005f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f62:	e0ac      	b.n	80060be <UART_SetConfig+0x5a6>
 8005f64:	2340      	movs	r3, #64	@ 0x40
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6a:	e0a8      	b.n	80060be <UART_SetConfig+0x5a6>
 8005f6c:	2380      	movs	r3, #128	@ 0x80
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f72:	e0a4      	b.n	80060be <UART_SetConfig+0x5a6>
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a8f      	ldr	r2, [pc, #572]	@ (80061b8 <UART_SetConfig+0x6a0>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d130      	bne.n	8005fe0 <UART_SetConfig+0x4c8>
 8005f7e:	4b8d      	ldr	r3, [pc, #564]	@ (80061b4 <UART_SetConfig+0x69c>)
 8005f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	2b05      	cmp	r3, #5
 8005f88:	d826      	bhi.n	8005fd8 <UART_SetConfig+0x4c0>
 8005f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f90 <UART_SetConfig+0x478>)
 8005f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f90:	08005fa9 	.word	0x08005fa9
 8005f94:	08005fb1 	.word	0x08005fb1
 8005f98:	08005fb9 	.word	0x08005fb9
 8005f9c:	08005fc1 	.word	0x08005fc1
 8005fa0:	08005fc9 	.word	0x08005fc9
 8005fa4:	08005fd1 	.word	0x08005fd1
 8005fa8:	2300      	movs	r3, #0
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fae:	e086      	b.n	80060be <UART_SetConfig+0x5a6>
 8005fb0:	2304      	movs	r3, #4
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fb6:	e082      	b.n	80060be <UART_SetConfig+0x5a6>
 8005fb8:	2308      	movs	r3, #8
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fbe:	e07e      	b.n	80060be <UART_SetConfig+0x5a6>
 8005fc0:	2310      	movs	r3, #16
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fc6:	e07a      	b.n	80060be <UART_SetConfig+0x5a6>
 8005fc8:	2320      	movs	r3, #32
 8005fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fce:	e076      	b.n	80060be <UART_SetConfig+0x5a6>
 8005fd0:	2340      	movs	r3, #64	@ 0x40
 8005fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fd6:	e072      	b.n	80060be <UART_SetConfig+0x5a6>
 8005fd8:	2380      	movs	r3, #128	@ 0x80
 8005fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fde:	e06e      	b.n	80060be <UART_SetConfig+0x5a6>
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a75      	ldr	r2, [pc, #468]	@ (80061bc <UART_SetConfig+0x6a4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d130      	bne.n	800604c <UART_SetConfig+0x534>
 8005fea:	4b72      	ldr	r3, [pc, #456]	@ (80061b4 <UART_SetConfig+0x69c>)
 8005fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	2b05      	cmp	r3, #5
 8005ff4:	d826      	bhi.n	8006044 <UART_SetConfig+0x52c>
 8005ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8005ffc <UART_SetConfig+0x4e4>)
 8005ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffc:	08006015 	.word	0x08006015
 8006000:	0800601d 	.word	0x0800601d
 8006004:	08006025 	.word	0x08006025
 8006008:	0800602d 	.word	0x0800602d
 800600c:	08006035 	.word	0x08006035
 8006010:	0800603d 	.word	0x0800603d
 8006014:	2300      	movs	r3, #0
 8006016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800601a:	e050      	b.n	80060be <UART_SetConfig+0x5a6>
 800601c:	2304      	movs	r3, #4
 800601e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006022:	e04c      	b.n	80060be <UART_SetConfig+0x5a6>
 8006024:	2308      	movs	r3, #8
 8006026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800602a:	e048      	b.n	80060be <UART_SetConfig+0x5a6>
 800602c:	2310      	movs	r3, #16
 800602e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006032:	e044      	b.n	80060be <UART_SetConfig+0x5a6>
 8006034:	2320      	movs	r3, #32
 8006036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800603a:	e040      	b.n	80060be <UART_SetConfig+0x5a6>
 800603c:	2340      	movs	r3, #64	@ 0x40
 800603e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006042:	e03c      	b.n	80060be <UART_SetConfig+0x5a6>
 8006044:	2380      	movs	r3, #128	@ 0x80
 8006046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800604a:	e038      	b.n	80060be <UART_SetConfig+0x5a6>
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a5b      	ldr	r2, [pc, #364]	@ (80061c0 <UART_SetConfig+0x6a8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d130      	bne.n	80060b8 <UART_SetConfig+0x5a0>
 8006056:	4b57      	ldr	r3, [pc, #348]	@ (80061b4 <UART_SetConfig+0x69c>)
 8006058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800605a:	f003 0307 	and.w	r3, r3, #7
 800605e:	2b05      	cmp	r3, #5
 8006060:	d826      	bhi.n	80060b0 <UART_SetConfig+0x598>
 8006062:	a201      	add	r2, pc, #4	@ (adr r2, 8006068 <UART_SetConfig+0x550>)
 8006064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006068:	08006081 	.word	0x08006081
 800606c:	08006089 	.word	0x08006089
 8006070:	08006091 	.word	0x08006091
 8006074:	08006099 	.word	0x08006099
 8006078:	080060a1 	.word	0x080060a1
 800607c:	080060a9 	.word	0x080060a9
 8006080:	2302      	movs	r3, #2
 8006082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006086:	e01a      	b.n	80060be <UART_SetConfig+0x5a6>
 8006088:	2304      	movs	r3, #4
 800608a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800608e:	e016      	b.n	80060be <UART_SetConfig+0x5a6>
 8006090:	2308      	movs	r3, #8
 8006092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006096:	e012      	b.n	80060be <UART_SetConfig+0x5a6>
 8006098:	2310      	movs	r3, #16
 800609a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800609e:	e00e      	b.n	80060be <UART_SetConfig+0x5a6>
 80060a0:	2320      	movs	r3, #32
 80060a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060a6:	e00a      	b.n	80060be <UART_SetConfig+0x5a6>
 80060a8:	2340      	movs	r3, #64	@ 0x40
 80060aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ae:	e006      	b.n	80060be <UART_SetConfig+0x5a6>
 80060b0:	2380      	movs	r3, #128	@ 0x80
 80060b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060b6:	e002      	b.n	80060be <UART_SetConfig+0x5a6>
 80060b8:	2380      	movs	r3, #128	@ 0x80
 80060ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a3f      	ldr	r2, [pc, #252]	@ (80061c0 <UART_SetConfig+0x6a8>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	f040 80f8 	bne.w	80062ba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80060ce:	2b20      	cmp	r3, #32
 80060d0:	dc46      	bgt.n	8006160 <UART_SetConfig+0x648>
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	f2c0 8082 	blt.w	80061dc <UART_SetConfig+0x6c4>
 80060d8:	3b02      	subs	r3, #2
 80060da:	2b1e      	cmp	r3, #30
 80060dc:	d87e      	bhi.n	80061dc <UART_SetConfig+0x6c4>
 80060de:	a201      	add	r2, pc, #4	@ (adr r2, 80060e4 <UART_SetConfig+0x5cc>)
 80060e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e4:	08006167 	.word	0x08006167
 80060e8:	080061dd 	.word	0x080061dd
 80060ec:	0800616f 	.word	0x0800616f
 80060f0:	080061dd 	.word	0x080061dd
 80060f4:	080061dd 	.word	0x080061dd
 80060f8:	080061dd 	.word	0x080061dd
 80060fc:	0800617f 	.word	0x0800617f
 8006100:	080061dd 	.word	0x080061dd
 8006104:	080061dd 	.word	0x080061dd
 8006108:	080061dd 	.word	0x080061dd
 800610c:	080061dd 	.word	0x080061dd
 8006110:	080061dd 	.word	0x080061dd
 8006114:	080061dd 	.word	0x080061dd
 8006118:	080061dd 	.word	0x080061dd
 800611c:	0800618f 	.word	0x0800618f
 8006120:	080061dd 	.word	0x080061dd
 8006124:	080061dd 	.word	0x080061dd
 8006128:	080061dd 	.word	0x080061dd
 800612c:	080061dd 	.word	0x080061dd
 8006130:	080061dd 	.word	0x080061dd
 8006134:	080061dd 	.word	0x080061dd
 8006138:	080061dd 	.word	0x080061dd
 800613c:	080061dd 	.word	0x080061dd
 8006140:	080061dd 	.word	0x080061dd
 8006144:	080061dd 	.word	0x080061dd
 8006148:	080061dd 	.word	0x080061dd
 800614c:	080061dd 	.word	0x080061dd
 8006150:	080061dd 	.word	0x080061dd
 8006154:	080061dd 	.word	0x080061dd
 8006158:	080061dd 	.word	0x080061dd
 800615c:	080061cf 	.word	0x080061cf
 8006160:	2b40      	cmp	r3, #64	@ 0x40
 8006162:	d037      	beq.n	80061d4 <UART_SetConfig+0x6bc>
 8006164:	e03a      	b.n	80061dc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006166:	f7fe fd09 	bl	8004b7c <HAL_RCCEx_GetD3PCLK1Freq>
 800616a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800616c:	e03c      	b.n	80061e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800616e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006172:	4618      	mov	r0, r3
 8006174:	f7fe fd18 	bl	8004ba8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800617c:	e034      	b.n	80061e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800617e:	f107 0318 	add.w	r3, r7, #24
 8006182:	4618      	mov	r0, r3
 8006184:	f7fe fe64 	bl	8004e50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800618c:	e02c      	b.n	80061e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800618e:	4b09      	ldr	r3, [pc, #36]	@ (80061b4 <UART_SetConfig+0x69c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0320 	and.w	r3, r3, #32
 8006196:	2b00      	cmp	r3, #0
 8006198:	d016      	beq.n	80061c8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800619a:	4b06      	ldr	r3, [pc, #24]	@ (80061b4 <UART_SetConfig+0x69c>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	08db      	lsrs	r3, r3, #3
 80061a0:	f003 0303 	and.w	r3, r3, #3
 80061a4:	4a07      	ldr	r2, [pc, #28]	@ (80061c4 <UART_SetConfig+0x6ac>)
 80061a6:	fa22 f303 	lsr.w	r3, r2, r3
 80061aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061ac:	e01c      	b.n	80061e8 <UART_SetConfig+0x6d0>
 80061ae:	bf00      	nop
 80061b0:	40011400 	.word	0x40011400
 80061b4:	58024400 	.word	0x58024400
 80061b8:	40007800 	.word	0x40007800
 80061bc:	40007c00 	.word	0x40007c00
 80061c0:	58000c00 	.word	0x58000c00
 80061c4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80061c8:	4b9d      	ldr	r3, [pc, #628]	@ (8006440 <UART_SetConfig+0x928>)
 80061ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061cc:	e00c      	b.n	80061e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061ce:	4b9d      	ldr	r3, [pc, #628]	@ (8006444 <UART_SetConfig+0x92c>)
 80061d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061d2:	e009      	b.n	80061e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061da:	e005      	b.n	80061e8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80061e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 81de 	beq.w	80065ac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f4:	4a94      	ldr	r2, [pc, #592]	@ (8006448 <UART_SetConfig+0x930>)
 80061f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061fa:	461a      	mov	r2, r3
 80061fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006202:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	4613      	mov	r3, r2
 800620a:	005b      	lsls	r3, r3, #1
 800620c:	4413      	add	r3, r2
 800620e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006210:	429a      	cmp	r2, r3
 8006212:	d305      	bcc.n	8006220 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800621a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800621c:	429a      	cmp	r2, r3
 800621e:	d903      	bls.n	8006228 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006226:	e1c1      	b.n	80065ac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800622a:	2200      	movs	r2, #0
 800622c:	60bb      	str	r3, [r7, #8]
 800622e:	60fa      	str	r2, [r7, #12]
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006234:	4a84      	ldr	r2, [pc, #528]	@ (8006448 <UART_SetConfig+0x930>)
 8006236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800623a:	b29b      	uxth	r3, r3
 800623c:	2200      	movs	r2, #0
 800623e:	603b      	str	r3, [r7, #0]
 8006240:	607a      	str	r2, [r7, #4]
 8006242:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006246:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800624a:	f7fa f849 	bl	80002e0 <__aeabi_uldivmod>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	4610      	mov	r0, r2
 8006254:	4619      	mov	r1, r3
 8006256:	f04f 0200 	mov.w	r2, #0
 800625a:	f04f 0300 	mov.w	r3, #0
 800625e:	020b      	lsls	r3, r1, #8
 8006260:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006264:	0202      	lsls	r2, r0, #8
 8006266:	6979      	ldr	r1, [r7, #20]
 8006268:	6849      	ldr	r1, [r1, #4]
 800626a:	0849      	lsrs	r1, r1, #1
 800626c:	2000      	movs	r0, #0
 800626e:	460c      	mov	r4, r1
 8006270:	4605      	mov	r5, r0
 8006272:	eb12 0804 	adds.w	r8, r2, r4
 8006276:	eb43 0905 	adc.w	r9, r3, r5
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	469a      	mov	sl, r3
 8006282:	4693      	mov	fp, r2
 8006284:	4652      	mov	r2, sl
 8006286:	465b      	mov	r3, fp
 8006288:	4640      	mov	r0, r8
 800628a:	4649      	mov	r1, r9
 800628c:	f7fa f828 	bl	80002e0 <__aeabi_uldivmod>
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	4613      	mov	r3, r2
 8006296:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800629e:	d308      	bcc.n	80062b2 <UART_SetConfig+0x79a>
 80062a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062a6:	d204      	bcs.n	80062b2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062ae:	60da      	str	r2, [r3, #12]
 80062b0:	e17c      	b.n	80065ac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80062b8:	e178      	b.n	80065ac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062c2:	f040 80c5 	bne.w	8006450 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80062c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80062ca:	2b20      	cmp	r3, #32
 80062cc:	dc48      	bgt.n	8006360 <UART_SetConfig+0x848>
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	db7b      	blt.n	80063ca <UART_SetConfig+0x8b2>
 80062d2:	2b20      	cmp	r3, #32
 80062d4:	d879      	bhi.n	80063ca <UART_SetConfig+0x8b2>
 80062d6:	a201      	add	r2, pc, #4	@ (adr r2, 80062dc <UART_SetConfig+0x7c4>)
 80062d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062dc:	08006367 	.word	0x08006367
 80062e0:	0800636f 	.word	0x0800636f
 80062e4:	080063cb 	.word	0x080063cb
 80062e8:	080063cb 	.word	0x080063cb
 80062ec:	08006377 	.word	0x08006377
 80062f0:	080063cb 	.word	0x080063cb
 80062f4:	080063cb 	.word	0x080063cb
 80062f8:	080063cb 	.word	0x080063cb
 80062fc:	08006387 	.word	0x08006387
 8006300:	080063cb 	.word	0x080063cb
 8006304:	080063cb 	.word	0x080063cb
 8006308:	080063cb 	.word	0x080063cb
 800630c:	080063cb 	.word	0x080063cb
 8006310:	080063cb 	.word	0x080063cb
 8006314:	080063cb 	.word	0x080063cb
 8006318:	080063cb 	.word	0x080063cb
 800631c:	08006397 	.word	0x08006397
 8006320:	080063cb 	.word	0x080063cb
 8006324:	080063cb 	.word	0x080063cb
 8006328:	080063cb 	.word	0x080063cb
 800632c:	080063cb 	.word	0x080063cb
 8006330:	080063cb 	.word	0x080063cb
 8006334:	080063cb 	.word	0x080063cb
 8006338:	080063cb 	.word	0x080063cb
 800633c:	080063cb 	.word	0x080063cb
 8006340:	080063cb 	.word	0x080063cb
 8006344:	080063cb 	.word	0x080063cb
 8006348:	080063cb 	.word	0x080063cb
 800634c:	080063cb 	.word	0x080063cb
 8006350:	080063cb 	.word	0x080063cb
 8006354:	080063cb 	.word	0x080063cb
 8006358:	080063cb 	.word	0x080063cb
 800635c:	080063bd 	.word	0x080063bd
 8006360:	2b40      	cmp	r3, #64	@ 0x40
 8006362:	d02e      	beq.n	80063c2 <UART_SetConfig+0x8aa>
 8006364:	e031      	b.n	80063ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006366:	f7fd f991 	bl	800368c <HAL_RCC_GetPCLK1Freq>
 800636a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800636c:	e033      	b.n	80063d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800636e:	f7fd f9a3 	bl	80036b8 <HAL_RCC_GetPCLK2Freq>
 8006372:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006374:	e02f      	b.n	80063d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800637a:	4618      	mov	r0, r3
 800637c:	f7fe fc14 	bl	8004ba8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006384:	e027      	b.n	80063d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006386:	f107 0318 	add.w	r3, r7, #24
 800638a:	4618      	mov	r0, r3
 800638c:	f7fe fd60 	bl	8004e50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006394:	e01f      	b.n	80063d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006396:	4b2d      	ldr	r3, [pc, #180]	@ (800644c <UART_SetConfig+0x934>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0320 	and.w	r3, r3, #32
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d009      	beq.n	80063b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063a2:	4b2a      	ldr	r3, [pc, #168]	@ (800644c <UART_SetConfig+0x934>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	08db      	lsrs	r3, r3, #3
 80063a8:	f003 0303 	and.w	r3, r3, #3
 80063ac:	4a24      	ldr	r2, [pc, #144]	@ (8006440 <UART_SetConfig+0x928>)
 80063ae:	fa22 f303 	lsr.w	r3, r2, r3
 80063b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063b4:	e00f      	b.n	80063d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80063b6:	4b22      	ldr	r3, [pc, #136]	@ (8006440 <UART_SetConfig+0x928>)
 80063b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063ba:	e00c      	b.n	80063d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063bc:	4b21      	ldr	r3, [pc, #132]	@ (8006444 <UART_SetConfig+0x92c>)
 80063be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063c0:	e009      	b.n	80063d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063c8:	e005      	b.n	80063d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80063d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 80e7 	beq.w	80065ac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e2:	4a19      	ldr	r2, [pc, #100]	@ (8006448 <UART_SetConfig+0x930>)
 80063e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063e8:	461a      	mov	r2, r3
 80063ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80063f0:	005a      	lsls	r2, r3, #1
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	085b      	lsrs	r3, r3, #1
 80063f8:	441a      	add	r2, r3
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006402:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006406:	2b0f      	cmp	r3, #15
 8006408:	d916      	bls.n	8006438 <UART_SetConfig+0x920>
 800640a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800640c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006410:	d212      	bcs.n	8006438 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006414:	b29b      	uxth	r3, r3
 8006416:	f023 030f 	bic.w	r3, r3, #15
 800641a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800641c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641e:	085b      	lsrs	r3, r3, #1
 8006420:	b29b      	uxth	r3, r3
 8006422:	f003 0307 	and.w	r3, r3, #7
 8006426:	b29a      	uxth	r2, r3
 8006428:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800642a:	4313      	orrs	r3, r2
 800642c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006434:	60da      	str	r2, [r3, #12]
 8006436:	e0b9      	b.n	80065ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800643e:	e0b5      	b.n	80065ac <UART_SetConfig+0xa94>
 8006440:	03d09000 	.word	0x03d09000
 8006444:	003d0900 	.word	0x003d0900
 8006448:	0800a95c 	.word	0x0800a95c
 800644c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006450:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006454:	2b20      	cmp	r3, #32
 8006456:	dc49      	bgt.n	80064ec <UART_SetConfig+0x9d4>
 8006458:	2b00      	cmp	r3, #0
 800645a:	db7c      	blt.n	8006556 <UART_SetConfig+0xa3e>
 800645c:	2b20      	cmp	r3, #32
 800645e:	d87a      	bhi.n	8006556 <UART_SetConfig+0xa3e>
 8006460:	a201      	add	r2, pc, #4	@ (adr r2, 8006468 <UART_SetConfig+0x950>)
 8006462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006466:	bf00      	nop
 8006468:	080064f3 	.word	0x080064f3
 800646c:	080064fb 	.word	0x080064fb
 8006470:	08006557 	.word	0x08006557
 8006474:	08006557 	.word	0x08006557
 8006478:	08006503 	.word	0x08006503
 800647c:	08006557 	.word	0x08006557
 8006480:	08006557 	.word	0x08006557
 8006484:	08006557 	.word	0x08006557
 8006488:	08006513 	.word	0x08006513
 800648c:	08006557 	.word	0x08006557
 8006490:	08006557 	.word	0x08006557
 8006494:	08006557 	.word	0x08006557
 8006498:	08006557 	.word	0x08006557
 800649c:	08006557 	.word	0x08006557
 80064a0:	08006557 	.word	0x08006557
 80064a4:	08006557 	.word	0x08006557
 80064a8:	08006523 	.word	0x08006523
 80064ac:	08006557 	.word	0x08006557
 80064b0:	08006557 	.word	0x08006557
 80064b4:	08006557 	.word	0x08006557
 80064b8:	08006557 	.word	0x08006557
 80064bc:	08006557 	.word	0x08006557
 80064c0:	08006557 	.word	0x08006557
 80064c4:	08006557 	.word	0x08006557
 80064c8:	08006557 	.word	0x08006557
 80064cc:	08006557 	.word	0x08006557
 80064d0:	08006557 	.word	0x08006557
 80064d4:	08006557 	.word	0x08006557
 80064d8:	08006557 	.word	0x08006557
 80064dc:	08006557 	.word	0x08006557
 80064e0:	08006557 	.word	0x08006557
 80064e4:	08006557 	.word	0x08006557
 80064e8:	08006549 	.word	0x08006549
 80064ec:	2b40      	cmp	r3, #64	@ 0x40
 80064ee:	d02e      	beq.n	800654e <UART_SetConfig+0xa36>
 80064f0:	e031      	b.n	8006556 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064f2:	f7fd f8cb 	bl	800368c <HAL_RCC_GetPCLK1Freq>
 80064f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80064f8:	e033      	b.n	8006562 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064fa:	f7fd f8dd 	bl	80036b8 <HAL_RCC_GetPCLK2Freq>
 80064fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006500:	e02f      	b.n	8006562 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006502:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006506:	4618      	mov	r0, r3
 8006508:	f7fe fb4e 	bl	8004ba8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800650c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006510:	e027      	b.n	8006562 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006512:	f107 0318 	add.w	r3, r7, #24
 8006516:	4618      	mov	r0, r3
 8006518:	f7fe fc9a 	bl	8004e50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006520:	e01f      	b.n	8006562 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006522:	4b2d      	ldr	r3, [pc, #180]	@ (80065d8 <UART_SetConfig+0xac0>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0320 	and.w	r3, r3, #32
 800652a:	2b00      	cmp	r3, #0
 800652c:	d009      	beq.n	8006542 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800652e:	4b2a      	ldr	r3, [pc, #168]	@ (80065d8 <UART_SetConfig+0xac0>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	08db      	lsrs	r3, r3, #3
 8006534:	f003 0303 	and.w	r3, r3, #3
 8006538:	4a28      	ldr	r2, [pc, #160]	@ (80065dc <UART_SetConfig+0xac4>)
 800653a:	fa22 f303 	lsr.w	r3, r2, r3
 800653e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006540:	e00f      	b.n	8006562 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006542:	4b26      	ldr	r3, [pc, #152]	@ (80065dc <UART_SetConfig+0xac4>)
 8006544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006546:	e00c      	b.n	8006562 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006548:	4b25      	ldr	r3, [pc, #148]	@ (80065e0 <UART_SetConfig+0xac8>)
 800654a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800654c:	e009      	b.n	8006562 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800654e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006554:	e005      	b.n	8006562 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006560:	bf00      	nop
    }

    if (pclk != 0U)
 8006562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006564:	2b00      	cmp	r3, #0
 8006566:	d021      	beq.n	80065ac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656c:	4a1d      	ldr	r2, [pc, #116]	@ (80065e4 <UART_SetConfig+0xacc>)
 800656e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006572:	461a      	mov	r2, r3
 8006574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006576:	fbb3 f2f2 	udiv	r2, r3, r2
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	085b      	lsrs	r3, r3, #1
 8006580:	441a      	add	r2, r3
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	fbb2 f3f3 	udiv	r3, r2, r3
 800658a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800658c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658e:	2b0f      	cmp	r3, #15
 8006590:	d909      	bls.n	80065a6 <UART_SetConfig+0xa8e>
 8006592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006598:	d205      	bcs.n	80065a6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800659a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800659c:	b29a      	uxth	r2, r3
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	60da      	str	r2, [r3, #12]
 80065a4:	e002      	b.n	80065ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2200      	movs	r2, #0
 80065c0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2200      	movs	r2, #0
 80065c6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80065c8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3748      	adds	r7, #72	@ 0x48
 80065d0:	46bd      	mov	sp, r7
 80065d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065d6:	bf00      	nop
 80065d8:	58024400 	.word	0x58024400
 80065dc:	03d09000 	.word	0x03d09000
 80065e0:	003d0900 	.word	0x003d0900
 80065e4:	0800a95c 	.word	0x0800a95c

080065e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f4:	f003 0308 	and.w	r3, r3, #8
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00a      	beq.n	8006612 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00a      	beq.n	8006634 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	430a      	orrs	r2, r1
 8006632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00a      	beq.n	8006656 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665a:	f003 0304 	and.w	r3, r3, #4
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00a      	beq.n	8006678 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667c:	f003 0310 	and.w	r3, r3, #16
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00a      	beq.n	800669a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	430a      	orrs	r2, r1
 8006698:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01a      	beq.n	80066fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066e6:	d10a      	bne.n	80066fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	430a      	orrs	r2, r1
 800671e:	605a      	str	r2, [r3, #4]
  }
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b098      	sub	sp, #96	@ 0x60
 8006730:	af02      	add	r7, sp, #8
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800673c:	f7fa ff44 	bl	80015c8 <HAL_GetTick>
 8006740:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0308 	and.w	r3, r3, #8
 800674c:	2b08      	cmp	r3, #8
 800674e:	d12f      	bne.n	80067b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006750:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006758:	2200      	movs	r2, #0
 800675a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f88e 	bl	8006880 <UART_WaitOnFlagUntilTimeout>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d022      	beq.n	80067b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006772:	e853 3f00 	ldrex	r3, [r3]
 8006776:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800677a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800677e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	461a      	mov	r2, r3
 8006786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006788:	647b      	str	r3, [r7, #68]	@ 0x44
 800678a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800678e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006790:	e841 2300 	strex	r3, r2, [r1]
 8006794:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1e6      	bne.n	800676a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2220      	movs	r2, #32
 80067a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e063      	b.n	8006878 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0304 	and.w	r3, r3, #4
 80067ba:	2b04      	cmp	r3, #4
 80067bc:	d149      	bne.n	8006852 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067c6:	2200      	movs	r2, #0
 80067c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f857 	bl	8006880 <UART_WaitOnFlagUntilTimeout>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d03c      	beq.n	8006852 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e0:	e853 3f00 	ldrex	r3, [r3]
 80067e4:	623b      	str	r3, [r7, #32]
   return(result);
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80067f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067fe:	e841 2300 	strex	r3, r2, [r1]
 8006802:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e6      	bne.n	80067d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3308      	adds	r3, #8
 8006810:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	60fb      	str	r3, [r7, #12]
   return(result);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f023 0301 	bic.w	r3, r3, #1
 8006820:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3308      	adds	r3, #8
 8006828:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800682a:	61fa      	str	r2, [r7, #28]
 800682c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682e:	69b9      	ldr	r1, [r7, #24]
 8006830:	69fa      	ldr	r2, [r7, #28]
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	617b      	str	r3, [r7, #20]
   return(result);
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e5      	bne.n	800680a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2220      	movs	r2, #32
 8006842:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e012      	b.n	8006878 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2220      	movs	r2, #32
 8006856:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2220      	movs	r2, #32
 800685e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3758      	adds	r7, #88	@ 0x58
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	603b      	str	r3, [r7, #0]
 800688c:	4613      	mov	r3, r2
 800688e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006890:	e04f      	b.n	8006932 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006898:	d04b      	beq.n	8006932 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800689a:	f7fa fe95 	bl	80015c8 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	69ba      	ldr	r2, [r7, #24]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d302      	bcc.n	80068b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e04e      	b.n	8006952 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0304 	and.w	r3, r3, #4
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d037      	beq.n	8006932 <UART_WaitOnFlagUntilTimeout+0xb2>
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	2b80      	cmp	r3, #128	@ 0x80
 80068c6:	d034      	beq.n	8006932 <UART_WaitOnFlagUntilTimeout+0xb2>
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b40      	cmp	r3, #64	@ 0x40
 80068cc:	d031      	beq.n	8006932 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	69db      	ldr	r3, [r3, #28]
 80068d4:	f003 0308 	and.w	r3, r3, #8
 80068d8:	2b08      	cmp	r3, #8
 80068da:	d110      	bne.n	80068fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2208      	movs	r2, #8
 80068e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f000 f839 	bl	800695c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2208      	movs	r2, #8
 80068ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e029      	b.n	8006952 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	69db      	ldr	r3, [r3, #28]
 8006904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800690c:	d111      	bne.n	8006932 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006916:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f000 f81f 	bl	800695c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2220      	movs	r2, #32
 8006922:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e00f      	b.n	8006952 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69da      	ldr	r2, [r3, #28]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	4013      	ands	r3, r2
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	429a      	cmp	r2, r3
 8006940:	bf0c      	ite	eq
 8006942:	2301      	moveq	r3, #1
 8006944:	2300      	movne	r3, #0
 8006946:	b2db      	uxtb	r3, r3
 8006948:	461a      	mov	r2, r3
 800694a:	79fb      	ldrb	r3, [r7, #7]
 800694c:	429a      	cmp	r2, r3
 800694e:	d0a0      	beq.n	8006892 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
	...

0800695c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800695c:	b480      	push	{r7}
 800695e:	b095      	sub	sp, #84	@ 0x54
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800696c:	e853 3f00 	ldrex	r3, [r3]
 8006970:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006974:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006978:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	461a      	mov	r2, r3
 8006980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006982:	643b      	str	r3, [r7, #64]	@ 0x40
 8006984:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006986:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006988:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800698a:	e841 2300 	strex	r3, r2, [r1]
 800698e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1e6      	bne.n	8006964 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3308      	adds	r3, #8
 800699c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	e853 3f00 	ldrex	r3, [r3]
 80069a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80069a6:	69fa      	ldr	r2, [r7, #28]
 80069a8:	4b1e      	ldr	r3, [pc, #120]	@ (8006a24 <UART_EndRxTransfer+0xc8>)
 80069aa:	4013      	ands	r3, r2
 80069ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3308      	adds	r3, #8
 80069b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069be:	e841 2300 	strex	r3, r2, [r1]
 80069c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1e5      	bne.n	8006996 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d118      	bne.n	8006a04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	e853 3f00 	ldrex	r3, [r3]
 80069de:	60bb      	str	r3, [r7, #8]
   return(result);
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f023 0310 	bic.w	r3, r3, #16
 80069e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	461a      	mov	r2, r3
 80069ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069f0:	61bb      	str	r3, [r7, #24]
 80069f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	6979      	ldr	r1, [r7, #20]
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	e841 2300 	strex	r3, r2, [r1]
 80069fc:	613b      	str	r3, [r7, #16]
   return(result);
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1e6      	bne.n	80069d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2220      	movs	r2, #32
 8006a08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006a18:	bf00      	nop
 8006a1a:	3754      	adds	r7, #84	@ 0x54
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	effffffe 	.word	0xeffffffe

08006a28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d101      	bne.n	8006a3e <HAL_UARTEx_DisableFifoMode+0x16>
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	e027      	b.n	8006a8e <HAL_UARTEx_DisableFifoMode+0x66>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2224      	movs	r2, #36	@ 0x24
 8006a4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f022 0201 	bic.w	r2, r2, #1
 8006a64:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006a6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2220      	movs	r2, #32
 8006a80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b084      	sub	sp, #16
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d101      	bne.n	8006ab2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006aae:	2302      	movs	r3, #2
 8006ab0:	e02d      	b.n	8006b0e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2224      	movs	r2, #36	@ 0x24
 8006abe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0201 	bic.w	r2, r2, #1
 8006ad8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f850 	bl	8006b94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2220      	movs	r2, #32
 8006b00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b084      	sub	sp, #16
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d101      	bne.n	8006b2e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	e02d      	b.n	8006b8a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2224      	movs	r2, #36	@ 0x24
 8006b3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0201 	bic.w	r2, r2, #1
 8006b54:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f812 	bl	8006b94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
	...

08006b94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d108      	bne.n	8006bb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006bb4:	e031      	b.n	8006c1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006bb6:	2310      	movs	r3, #16
 8006bb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006bba:	2310      	movs	r3, #16
 8006bbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	0e5b      	lsrs	r3, r3, #25
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	f003 0307 	and.w	r3, r3, #7
 8006bcc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	0f5b      	lsrs	r3, r3, #29
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	f003 0307 	and.w	r3, r3, #7
 8006bdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bde:	7bbb      	ldrb	r3, [r7, #14]
 8006be0:	7b3a      	ldrb	r2, [r7, #12]
 8006be2:	4911      	ldr	r1, [pc, #68]	@ (8006c28 <UARTEx_SetNbDataToProcess+0x94>)
 8006be4:	5c8a      	ldrb	r2, [r1, r2]
 8006be6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006bea:	7b3a      	ldrb	r2, [r7, #12]
 8006bec:	490f      	ldr	r1, [pc, #60]	@ (8006c2c <UARTEx_SetNbDataToProcess+0x98>)
 8006bee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bf0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
 8006bfe:	7b7a      	ldrb	r2, [r7, #13]
 8006c00:	4909      	ldr	r1, [pc, #36]	@ (8006c28 <UARTEx_SetNbDataToProcess+0x94>)
 8006c02:	5c8a      	ldrb	r2, [r1, r2]
 8006c04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c08:	7b7a      	ldrb	r2, [r7, #13]
 8006c0a:	4908      	ldr	r1, [pc, #32]	@ (8006c2c <UARTEx_SetNbDataToProcess+0x98>)
 8006c0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006c1a:	bf00      	nop
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	0800a974 	.word	0x0800a974
 8006c2c:	0800a97c 	.word	0x0800a97c

08006c30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c30:	b084      	sub	sp, #16
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b084      	sub	sp, #16
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	f107 001c 	add.w	r0, r7, #28
 8006c3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c42:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d121      	bne.n	8006c8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c4e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68da      	ldr	r2, [r3, #12]
 8006c5a:	4b2c      	ldr	r3, [pc, #176]	@ (8006d0c <USB_CoreInit+0xdc>)
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d105      	bne.n	8006c82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 faaa 	bl	80071dc <USB_CoreReset>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	73fb      	strb	r3, [r7, #15]
 8006c8c:	e01b      	b.n	8006cc6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fa9e 	bl	80071dc <USB_CoreReset>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ca4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d106      	bne.n	8006cba <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	639a      	str	r2, [r3, #56]	@ 0x38
 8006cb8:	e005      	b.n	8006cc6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cbe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006cc6:	7fbb      	ldrb	r3, [r7, #30]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d116      	bne.n	8006cfa <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006cda:	4b0d      	ldr	r3, [pc, #52]	@ (8006d10 <USB_CoreInit+0xe0>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f043 0206 	orr.w	r2, r3, #6
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f043 0220 	orr.w	r2, r3, #32
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d06:	b004      	add	sp, #16
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	ffbdffbf 	.word	0xffbdffbf
 8006d10:	03ee0000 	.word	0x03ee0000

08006d14 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f023 0201 	bic.w	r2, r3, #1
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr

08006d36 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b084      	sub	sp, #16
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	460b      	mov	r3, r1
 8006d40:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d52:	78fb      	ldrb	r3, [r7, #3]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d115      	bne.n	8006d84 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d64:	200a      	movs	r0, #10
 8006d66:	f7fa fc3b 	bl	80015e0 <HAL_Delay>
      ms += 10U;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	330a      	adds	r3, #10
 8006d6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fa25 	bl	80071c0 <USB_GetMode>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d01e      	beq.n	8006dba <USB_SetCurrentMode+0x84>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d80:	d9f0      	bls.n	8006d64 <USB_SetCurrentMode+0x2e>
 8006d82:	e01a      	b.n	8006dba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d84:	78fb      	ldrb	r3, [r7, #3]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d115      	bne.n	8006db6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d96:	200a      	movs	r0, #10
 8006d98:	f7fa fc22 	bl	80015e0 <HAL_Delay>
      ms += 10U;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	330a      	adds	r3, #10
 8006da0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fa0c 	bl	80071c0 <USB_GetMode>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d005      	beq.n	8006dba <USB_SetCurrentMode+0x84>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2bc7      	cmp	r3, #199	@ 0xc7
 8006db2:	d9f0      	bls.n	8006d96 <USB_SetCurrentMode+0x60>
 8006db4:	e001      	b.n	8006dba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e005      	b.n	8006dc6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2bc8      	cmp	r3, #200	@ 0xc8
 8006dbe:	d101      	bne.n	8006dc4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e000      	b.n	8006dc6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
	...

08006dd0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006dd0:	b084      	sub	sp, #16
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b086      	sub	sp, #24
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006dde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006dea:	2300      	movs	r3, #0
 8006dec:	613b      	str	r3, [r7, #16]
 8006dee:	e009      	b.n	8006e04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	3340      	adds	r3, #64	@ 0x40
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	3301      	adds	r3, #1
 8006e02:	613b      	str	r3, [r7, #16]
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	2b0e      	cmp	r3, #14
 8006e08:	d9f2      	bls.n	8006df0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006e0a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d11c      	bne.n	8006e4c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e20:	f043 0302 	orr.w	r3, r3, #2
 8006e24:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e2a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	e005      	b.n	8006e58 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e50:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e5e:	461a      	mov	r2, r3
 8006e60:	2300      	movs	r3, #0
 8006e62:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e64:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d10d      	bne.n	8006e88 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d104      	bne.n	8006e7e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e74:	2100      	movs	r1, #0
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f968 	bl	800714c <USB_SetDevSpeed>
 8006e7c:	e008      	b.n	8006e90 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e7e:	2101      	movs	r1, #1
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f963 	bl	800714c <USB_SetDevSpeed>
 8006e86:	e003      	b.n	8006e90 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e88:	2103      	movs	r1, #3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f95e 	bl	800714c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e90:	2110      	movs	r1, #16
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f8fa 	bl	800708c <USB_FlushTxFifo>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f924 	bl	80070f0 <USB_FlushRxFifo>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eb8:	461a      	mov	r2, r3
 8006eba:	2300      	movs	r3, #0
 8006ebc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	613b      	str	r3, [r7, #16]
 8006eda:	e043      	b.n	8006f64 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006eee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ef2:	d118      	bne.n	8006f26 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10a      	bne.n	8006f10 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f06:	461a      	mov	r2, r3
 8006f08:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	e013      	b.n	8006f38 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	015a      	lsls	r2, r3, #5
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f22:	6013      	str	r3, [r2, #0]
 8006f24:	e008      	b.n	8006f38 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f32:	461a      	mov	r2, r3
 8006f34:	2300      	movs	r3, #0
 8006f36:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f44:	461a      	mov	r2, r3
 8006f46:	2300      	movs	r3, #0
 8006f48:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f56:	461a      	mov	r2, r3
 8006f58:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	3301      	adds	r3, #1
 8006f62:	613b      	str	r3, [r7, #16]
 8006f64:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006f68:	461a      	mov	r2, r3
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d3b5      	bcc.n	8006edc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f70:	2300      	movs	r3, #0
 8006f72:	613b      	str	r3, [r7, #16]
 8006f74:	e043      	b.n	8006ffe <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f8c:	d118      	bne.n	8006fc0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	015a      	lsls	r2, r3, #5
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006fa6:	6013      	str	r3, [r2, #0]
 8006fa8:	e013      	b.n	8006fd2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	015a      	lsls	r2, r3, #5
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006fbc:	6013      	str	r3, [r2, #0]
 8006fbe:	e008      	b.n	8006fd2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fcc:	461a      	mov	r2, r3
 8006fce:	2300      	movs	r3, #0
 8006fd0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fde:	461a      	mov	r2, r3
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006ff6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	613b      	str	r3, [r7, #16]
 8006ffe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007002:	461a      	mov	r2, r3
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	4293      	cmp	r3, r2
 8007008:	d3b5      	bcc.n	8006f76 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800701c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800702a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800702c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007030:	2b00      	cmp	r3, #0
 8007032:	d105      	bne.n	8007040 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	f043 0210 	orr.w	r2, r3, #16
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	699a      	ldr	r2, [r3, #24]
 8007044:	4b0f      	ldr	r3, [pc, #60]	@ (8007084 <USB_DevInit+0x2b4>)
 8007046:	4313      	orrs	r3, r2
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800704c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007050:	2b00      	cmp	r3, #0
 8007052:	d005      	beq.n	8007060 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	f043 0208 	orr.w	r2, r3, #8
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007060:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007064:	2b01      	cmp	r3, #1
 8007066:	d105      	bne.n	8007074 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	699a      	ldr	r2, [r3, #24]
 800706c:	4b06      	ldr	r3, [pc, #24]	@ (8007088 <USB_DevInit+0x2b8>)
 800706e:	4313      	orrs	r3, r2
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007074:	7dfb      	ldrb	r3, [r7, #23]
}
 8007076:	4618      	mov	r0, r3
 8007078:	3718      	adds	r7, #24
 800707a:	46bd      	mov	sp, r7
 800707c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007080:	b004      	add	sp, #16
 8007082:	4770      	bx	lr
 8007084:	803c3800 	.word	0x803c3800
 8007088:	40000004 	.word	0x40000004

0800708c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007096:	2300      	movs	r3, #0
 8007098:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	3301      	adds	r3, #1
 800709e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070a6:	d901      	bls.n	80070ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e01b      	b.n	80070e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	daf2      	bge.n	800709a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	019b      	lsls	r3, r3, #6
 80070bc:	f043 0220 	orr.w	r2, r3, #32
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	3301      	adds	r3, #1
 80070c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070d0:	d901      	bls.n	80070d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e006      	b.n	80070e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	f003 0320 	and.w	r3, r3, #32
 80070de:	2b20      	cmp	r3, #32
 80070e0:	d0f0      	beq.n	80070c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070f8:	2300      	movs	r3, #0
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	3301      	adds	r3, #1
 8007100:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007108:	d901      	bls.n	800710e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e018      	b.n	8007140 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	2b00      	cmp	r3, #0
 8007114:	daf2      	bge.n	80070fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007116:	2300      	movs	r3, #0
 8007118:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2210      	movs	r2, #16
 800711e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	3301      	adds	r3, #1
 8007124:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800712c:	d901      	bls.n	8007132 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e006      	b.n	8007140 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	f003 0310 	and.w	r3, r3, #16
 800713a:	2b10      	cmp	r3, #16
 800713c:	d0f0      	beq.n	8007120 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	78fb      	ldrb	r3, [r7, #3]
 8007166:	68f9      	ldr	r1, [r7, #12]
 8007168:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800716c:	4313      	orrs	r3, r2
 800716e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3714      	adds	r7, #20
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800717e:	b480      	push	{r7}
 8007180:	b085      	sub	sp, #20
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007198:	f023 0303 	bic.w	r3, r3, #3
 800719c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071ac:	f043 0302 	orr.w	r3, r3, #2
 80071b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	f003 0301 	and.w	r3, r3, #1
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071e4:	2300      	movs	r3, #0
 80071e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	3301      	adds	r3, #1
 80071ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071f4:	d901      	bls.n	80071fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e01b      	b.n	8007232 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	daf2      	bge.n	80071e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007202:	2300      	movs	r3, #0
 8007204:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	f043 0201 	orr.w	r2, r3, #1
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	3301      	adds	r3, #1
 8007216:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800721e:	d901      	bls.n	8007224 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e006      	b.n	8007232 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	2b01      	cmp	r3, #1
 800722e:	d0f0      	beq.n	8007212 <USB_CoreReset+0x36>

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
	...

08007240 <__NVIC_SetPriority>:
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	4603      	mov	r3, r0
 8007248:	6039      	str	r1, [r7, #0]
 800724a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800724c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007250:	2b00      	cmp	r3, #0
 8007252:	db0a      	blt.n	800726a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	b2da      	uxtb	r2, r3
 8007258:	490c      	ldr	r1, [pc, #48]	@ (800728c <__NVIC_SetPriority+0x4c>)
 800725a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800725e:	0112      	lsls	r2, r2, #4
 8007260:	b2d2      	uxtb	r2, r2
 8007262:	440b      	add	r3, r1
 8007264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007268:	e00a      	b.n	8007280 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	b2da      	uxtb	r2, r3
 800726e:	4908      	ldr	r1, [pc, #32]	@ (8007290 <__NVIC_SetPriority+0x50>)
 8007270:	88fb      	ldrh	r3, [r7, #6]
 8007272:	f003 030f 	and.w	r3, r3, #15
 8007276:	3b04      	subs	r3, #4
 8007278:	0112      	lsls	r2, r2, #4
 800727a:	b2d2      	uxtb	r2, r2
 800727c:	440b      	add	r3, r1
 800727e:	761a      	strb	r2, [r3, #24]
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	e000e100 	.word	0xe000e100
 8007290:	e000ed00 	.word	0xe000ed00

08007294 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007294:	b580      	push	{r7, lr}
 8007296:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007298:	4b05      	ldr	r3, [pc, #20]	@ (80072b0 <SysTick_Handler+0x1c>)
 800729a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800729c:	f002 f880 	bl	80093a0 <xTaskGetSchedulerState>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d001      	beq.n	80072aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80072a6:	f002 ff77 	bl	800a198 <xPortSysTickHandler>
  }
}
 80072aa:	bf00      	nop
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	e000e010 	.word	0xe000e010

080072b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80072b4:	b580      	push	{r7, lr}
 80072b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80072b8:	2100      	movs	r1, #0
 80072ba:	f06f 0004 	mvn.w	r0, #4
 80072be:	f7ff ffbf 	bl	8007240 <__NVIC_SetPriority>
#endif
}
 80072c2:	bf00      	nop
 80072c4:	bd80      	pop	{r7, pc}
	...

080072c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072ce:	f3ef 8305 	mrs	r3, IPSR
 80072d2:	603b      	str	r3, [r7, #0]
  return(result);
 80072d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80072da:	f06f 0305 	mvn.w	r3, #5
 80072de:	607b      	str	r3, [r7, #4]
 80072e0:	e00c      	b.n	80072fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80072e2:	4b0a      	ldr	r3, [pc, #40]	@ (800730c <osKernelInitialize+0x44>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d105      	bne.n	80072f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80072ea:	4b08      	ldr	r3, [pc, #32]	@ (800730c <osKernelInitialize+0x44>)
 80072ec:	2201      	movs	r2, #1
 80072ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	607b      	str	r3, [r7, #4]
 80072f4:	e002      	b.n	80072fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80072f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80072fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80072fc:	687b      	ldr	r3, [r7, #4]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	24000804 	.word	0x24000804

08007310 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007316:	f3ef 8305 	mrs	r3, IPSR
 800731a:	603b      	str	r3, [r7, #0]
  return(result);
 800731c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007322:	f06f 0305 	mvn.w	r3, #5
 8007326:	607b      	str	r3, [r7, #4]
 8007328:	e010      	b.n	800734c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800732a:	4b0b      	ldr	r3, [pc, #44]	@ (8007358 <osKernelStart+0x48>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b01      	cmp	r3, #1
 8007330:	d109      	bne.n	8007346 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007332:	f7ff ffbf 	bl	80072b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007336:	4b08      	ldr	r3, [pc, #32]	@ (8007358 <osKernelStart+0x48>)
 8007338:	2202      	movs	r2, #2
 800733a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800733c:	f001 fbbc 	bl	8008ab8 <vTaskStartScheduler>
      stat = osOK;
 8007340:	2300      	movs	r3, #0
 8007342:	607b      	str	r3, [r7, #4]
 8007344:	e002      	b.n	800734c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007346:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800734a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800734c:	687b      	ldr	r3, [r7, #4]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	24000804 	.word	0x24000804

0800735c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800735c:	b580      	push	{r7, lr}
 800735e:	b08e      	sub	sp, #56	@ 0x38
 8007360:	af04      	add	r7, sp, #16
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007368:	2300      	movs	r3, #0
 800736a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800736c:	f3ef 8305 	mrs	r3, IPSR
 8007370:	617b      	str	r3, [r7, #20]
  return(result);
 8007372:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007374:	2b00      	cmp	r3, #0
 8007376:	d17e      	bne.n	8007476 <osThreadNew+0x11a>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d07b      	beq.n	8007476 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800737e:	2380      	movs	r3, #128	@ 0x80
 8007380:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007382:	2318      	movs	r3, #24
 8007384:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007386:	2300      	movs	r3, #0
 8007388:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800738a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800738e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d045      	beq.n	8007422 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <osThreadNew+0x48>
        name = attr->name;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d008      	beq.n	80073ca <osThreadNew+0x6e>
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	2b38      	cmp	r3, #56	@ 0x38
 80073bc:	d805      	bhi.n	80073ca <osThreadNew+0x6e>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d001      	beq.n	80073ce <osThreadNew+0x72>
        return (NULL);
 80073ca:	2300      	movs	r3, #0
 80073cc:	e054      	b.n	8007478 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	089b      	lsrs	r3, r3, #2
 80073dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d00e      	beq.n	8007404 <osThreadNew+0xa8>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	2ba7      	cmp	r3, #167	@ 0xa7
 80073ec:	d90a      	bls.n	8007404 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d006      	beq.n	8007404 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d002      	beq.n	8007404 <osThreadNew+0xa8>
        mem = 1;
 80073fe:	2301      	movs	r3, #1
 8007400:	61bb      	str	r3, [r7, #24]
 8007402:	e010      	b.n	8007426 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10c      	bne.n	8007426 <osThreadNew+0xca>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d108      	bne.n	8007426 <osThreadNew+0xca>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d104      	bne.n	8007426 <osThreadNew+0xca>
          mem = 0;
 800741c:	2300      	movs	r3, #0
 800741e:	61bb      	str	r3, [r7, #24]
 8007420:	e001      	b.n	8007426 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d110      	bne.n	800744e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007434:	9202      	str	r2, [sp, #8]
 8007436:	9301      	str	r3, [sp, #4]
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	6a3a      	ldr	r2, [r7, #32]
 8007440:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f001 f944 	bl	80086d0 <xTaskCreateStatic>
 8007448:	4603      	mov	r3, r0
 800744a:	613b      	str	r3, [r7, #16]
 800744c:	e013      	b.n	8007476 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d110      	bne.n	8007476 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	b29a      	uxth	r2, r3
 8007458:	f107 0310 	add.w	r3, r7, #16
 800745c:	9301      	str	r3, [sp, #4]
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f001 f992 	bl	8008790 <xTaskCreate>
 800746c:	4603      	mov	r3, r0
 800746e:	2b01      	cmp	r3, #1
 8007470:	d001      	beq.n	8007476 <osThreadNew+0x11a>
            hTask = NULL;
 8007472:	2300      	movs	r3, #0
 8007474:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007476:	693b      	ldr	r3, [r7, #16]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3728      	adds	r7, #40	@ 0x28
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007488:	f3ef 8305 	mrs	r3, IPSR
 800748c:	60bb      	str	r3, [r7, #8]
  return(result);
 800748e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007490:	2b00      	cmp	r3, #0
 8007492:	d003      	beq.n	800749c <osDelay+0x1c>
    stat = osErrorISR;
 8007494:	f06f 0305 	mvn.w	r3, #5
 8007498:	60fb      	str	r3, [r7, #12]
 800749a:	e007      	b.n	80074ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800749c:	2300      	movs	r3, #0
 800749e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d002      	beq.n	80074ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f001 fad0 	bl	8008a4c <vTaskDelay>
    }
  }

  return (stat);
 80074ac:	68fb      	ldr	r3, [r7, #12]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b088      	sub	sp, #32
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80074be:	2300      	movs	r3, #0
 80074c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074c2:	f3ef 8305 	mrs	r3, IPSR
 80074c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80074c8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d174      	bne.n	80075b8 <osMutexNew+0x102>
    if (attr != NULL) {
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d003      	beq.n	80074dc <osMutexNew+0x26>
      type = attr->attr_bits;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	61bb      	str	r3, [r7, #24]
 80074da:	e001      	b.n	80074e0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80074dc:	2300      	movs	r3, #0
 80074de:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d002      	beq.n	80074f0 <osMutexNew+0x3a>
      rmtx = 1U;
 80074ea:	2301      	movs	r3, #1
 80074ec:	617b      	str	r3, [r7, #20]
 80074ee:	e001      	b.n	80074f4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80074f0:	2300      	movs	r3, #0
 80074f2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	f003 0308 	and.w	r3, r3, #8
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d15c      	bne.n	80075b8 <osMutexNew+0x102>
      mem = -1;
 80074fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007502:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d015      	beq.n	8007536 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d006      	beq.n	8007520 <osMutexNew+0x6a>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	2b4f      	cmp	r3, #79	@ 0x4f
 8007518:	d902      	bls.n	8007520 <osMutexNew+0x6a>
          mem = 1;
 800751a:	2301      	movs	r3, #1
 800751c:	613b      	str	r3, [r7, #16]
 800751e:	e00c      	b.n	800753a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d108      	bne.n	800753a <osMutexNew+0x84>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d104      	bne.n	800753a <osMutexNew+0x84>
            mem = 0;
 8007530:	2300      	movs	r3, #0
 8007532:	613b      	str	r3, [r7, #16]
 8007534:	e001      	b.n	800753a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007536:	2300      	movs	r3, #0
 8007538:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d112      	bne.n	8007566 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d007      	beq.n	8007556 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	4619      	mov	r1, r3
 800754c:	2004      	movs	r0, #4
 800754e:	f000 fb20 	bl	8007b92 <xQueueCreateMutexStatic>
 8007552:	61f8      	str	r0, [r7, #28]
 8007554:	e016      	b.n	8007584 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	4619      	mov	r1, r3
 800755c:	2001      	movs	r0, #1
 800755e:	f000 fb18 	bl	8007b92 <xQueueCreateMutexStatic>
 8007562:	61f8      	str	r0, [r7, #28]
 8007564:	e00e      	b.n	8007584 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10b      	bne.n	8007584 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d004      	beq.n	800757c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007572:	2004      	movs	r0, #4
 8007574:	f000 faf5 	bl	8007b62 <xQueueCreateMutex>
 8007578:	61f8      	str	r0, [r7, #28]
 800757a:	e003      	b.n	8007584 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800757c:	2001      	movs	r0, #1
 800757e:	f000 faf0 	bl	8007b62 <xQueueCreateMutex>
 8007582:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00c      	beq.n	80075a4 <osMutexNew+0xee>
        if (attr != NULL) {
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d003      	beq.n	8007598 <osMutexNew+0xe2>
          name = attr->name;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	60fb      	str	r3, [r7, #12]
 8007596:	e001      	b.n	800759c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007598:	2300      	movs	r3, #0
 800759a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800759c:	68f9      	ldr	r1, [r7, #12]
 800759e:	69f8      	ldr	r0, [r7, #28]
 80075a0:	f001 f838 	bl	8008614 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d006      	beq.n	80075b8 <osMutexNew+0x102>
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d003      	beq.n	80075b8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	f043 0301 	orr.w	r3, r3, #1
 80075b6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80075b8:	69fb      	ldr	r3, [r7, #28]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3720      	adds	r7, #32
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b086      	sub	sp, #24
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f023 0301 	bic.w	r3, r3, #1
 80075d2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80075dc:	2300      	movs	r3, #0
 80075de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075e0:	f3ef 8305 	mrs	r3, IPSR
 80075e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80075e6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d003      	beq.n	80075f4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80075ec:	f06f 0305 	mvn.w	r3, #5
 80075f0:	617b      	str	r3, [r7, #20]
 80075f2:	e02c      	b.n	800764e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d103      	bne.n	8007602 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80075fa:	f06f 0303 	mvn.w	r3, #3
 80075fe:	617b      	str	r3, [r7, #20]
 8007600:	e025      	b.n	800764e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d011      	beq.n	800762c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	6938      	ldr	r0, [r7, #16]
 800760c:	f000 fb11 	bl	8007c32 <xQueueTakeMutexRecursive>
 8007610:	4603      	mov	r3, r0
 8007612:	2b01      	cmp	r3, #1
 8007614:	d01b      	beq.n	800764e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d003      	beq.n	8007624 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800761c:	f06f 0301 	mvn.w	r3, #1
 8007620:	617b      	str	r3, [r7, #20]
 8007622:	e014      	b.n	800764e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007624:	f06f 0302 	mvn.w	r3, #2
 8007628:	617b      	str	r3, [r7, #20]
 800762a:	e010      	b.n	800764e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6938      	ldr	r0, [r7, #16]
 8007630:	f000 fdb8 	bl	80081a4 <xQueueSemaphoreTake>
 8007634:	4603      	mov	r3, r0
 8007636:	2b01      	cmp	r3, #1
 8007638:	d009      	beq.n	800764e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d003      	beq.n	8007648 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007640:	f06f 0301 	mvn.w	r3, #1
 8007644:	617b      	str	r3, [r7, #20]
 8007646:	e002      	b.n	800764e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007648:	f06f 0302 	mvn.w	r3, #2
 800764c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800764e:	697b      	ldr	r3, [r7, #20]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3718      	adds	r7, #24
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f023 0301 	bic.w	r3, r3, #1
 8007666:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007670:	2300      	movs	r3, #0
 8007672:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007674:	f3ef 8305 	mrs	r3, IPSR
 8007678:	60bb      	str	r3, [r7, #8]
  return(result);
 800767a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800767c:	2b00      	cmp	r3, #0
 800767e:	d003      	beq.n	8007688 <osMutexRelease+0x30>
    stat = osErrorISR;
 8007680:	f06f 0305 	mvn.w	r3, #5
 8007684:	617b      	str	r3, [r7, #20]
 8007686:	e01f      	b.n	80076c8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d103      	bne.n	8007696 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800768e:	f06f 0303 	mvn.w	r3, #3
 8007692:	617b      	str	r3, [r7, #20]
 8007694:	e018      	b.n	80076c8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d009      	beq.n	80076b0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800769c:	6938      	ldr	r0, [r7, #16]
 800769e:	f000 fa93 	bl	8007bc8 <xQueueGiveMutexRecursive>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d00f      	beq.n	80076c8 <osMutexRelease+0x70>
        stat = osErrorResource;
 80076a8:	f06f 0302 	mvn.w	r3, #2
 80076ac:	617b      	str	r3, [r7, #20]
 80076ae:	e00b      	b.n	80076c8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80076b0:	2300      	movs	r3, #0
 80076b2:	2200      	movs	r2, #0
 80076b4:	2100      	movs	r1, #0
 80076b6:	6938      	ldr	r0, [r7, #16]
 80076b8:	f000 faf2 	bl	8007ca0 <xQueueGenericSend>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d002      	beq.n	80076c8 <osMutexRelease+0x70>
        stat = osErrorResource;
 80076c2:	f06f 0302 	mvn.w	r3, #2
 80076c6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80076c8:	697b      	ldr	r3, [r7, #20]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3718      	adds	r7, #24
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
	...

080076d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4a07      	ldr	r2, [pc, #28]	@ (8007700 <vApplicationGetIdleTaskMemory+0x2c>)
 80076e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	4a06      	ldr	r2, [pc, #24]	@ (8007704 <vApplicationGetIdleTaskMemory+0x30>)
 80076ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2280      	movs	r2, #128	@ 0x80
 80076f0:	601a      	str	r2, [r3, #0]
}
 80076f2:	bf00      	nop
 80076f4:	3714      	adds	r7, #20
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	24000808 	.word	0x24000808
 8007704:	240008b0 	.word	0x240008b0

08007708 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	4a07      	ldr	r2, [pc, #28]	@ (8007734 <vApplicationGetTimerTaskMemory+0x2c>)
 8007718:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	4a06      	ldr	r2, [pc, #24]	@ (8007738 <vApplicationGetTimerTaskMemory+0x30>)
 800771e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007726:	601a      	str	r2, [r3, #0]
}
 8007728:	bf00      	nop
 800772a:	3714      	adds	r7, #20
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr
 8007734:	24000ab0 	.word	0x24000ab0
 8007738:	24000b58 	.word	0x24000b58

0800773c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f103 0208 	add.w	r2, r3, #8
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007754:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f103 0208 	add.w	r2, r3, #8
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f103 0208 	add.w	r2, r3, #8
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800778a:	bf00      	nop
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007796:	b480      	push	{r7}
 8007798:	b085      	sub	sp, #20
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
 800779e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	689a      	ldr	r2, [r3, #8]
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	683a      	ldr	r2, [r7, #0]
 80077ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	1c5a      	adds	r2, r3, #1
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	601a      	str	r2, [r3, #0]
}
 80077d2:	bf00      	nop
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077de:	b480      	push	{r7}
 80077e0:	b085      	sub	sp, #20
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077f4:	d103      	bne.n	80077fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	e00c      	b.n	8007818 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	3308      	adds	r3, #8
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	e002      	b.n	800780c <vListInsert+0x2e>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	429a      	cmp	r2, r3
 8007816:	d2f6      	bcs.n	8007806 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	683a      	ldr	r2, [r7, #0]
 8007832:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	1c5a      	adds	r2, r3, #1
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	601a      	str	r2, [r3, #0]
}
 8007844:	bf00      	nop
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	6892      	ldr	r2, [r2, #8]
 8007866:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	6852      	ldr	r2, [r2, #4]
 8007870:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	429a      	cmp	r2, r3
 800787a:	d103      	bne.n	8007884 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	689a      	ldr	r2, [r3, #8]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	1e5a      	subs	r2, r3, #1
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
}
 8007898:	4618      	mov	r0, r3
 800789a:	3714      	adds	r7, #20
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10b      	bne.n	80078d0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80078b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80078ca:	bf00      	nop
 80078cc:	bf00      	nop
 80078ce:	e7fd      	b.n	80078cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80078d0:	f002 fbd2 	bl	800a078 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078dc:	68f9      	ldr	r1, [r7, #12]
 80078de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80078e0:	fb01 f303 	mul.w	r3, r1, r3
 80078e4:	441a      	add	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007900:	3b01      	subs	r3, #1
 8007902:	68f9      	ldr	r1, [r7, #12]
 8007904:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007906:	fb01 f303 	mul.w	r3, r1, r3
 800790a:	441a      	add	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	22ff      	movs	r2, #255	@ 0xff
 8007914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	22ff      	movs	r2, #255	@ 0xff
 800791c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d114      	bne.n	8007950 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d01a      	beq.n	8007964 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	3310      	adds	r3, #16
 8007932:	4618      	mov	r0, r3
 8007934:	f001 fb5e 	bl	8008ff4 <xTaskRemoveFromEventList>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d012      	beq.n	8007964 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800793e:	4b0d      	ldr	r3, [pc, #52]	@ (8007974 <xQueueGenericReset+0xd0>)
 8007940:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007944:	601a      	str	r2, [r3, #0]
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	e009      	b.n	8007964 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	3310      	adds	r3, #16
 8007954:	4618      	mov	r0, r3
 8007956:	f7ff fef1 	bl	800773c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	3324      	adds	r3, #36	@ 0x24
 800795e:	4618      	mov	r0, r3
 8007960:	f7ff feec 	bl	800773c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007964:	f002 fbba 	bl	800a0dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007968:	2301      	movs	r3, #1
}
 800796a:	4618      	mov	r0, r3
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	e000ed04 	.word	0xe000ed04

08007978 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007978:	b580      	push	{r7, lr}
 800797a:	b08e      	sub	sp, #56	@ 0x38
 800797c:	af02      	add	r7, sp, #8
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
 8007984:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10b      	bne.n	80079a4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800798c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007990:	f383 8811 	msr	BASEPRI, r3
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800799e:	bf00      	nop
 80079a0:	bf00      	nop
 80079a2:	e7fd      	b.n	80079a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10b      	bne.n	80079c2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80079aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80079bc:	bf00      	nop
 80079be:	bf00      	nop
 80079c0:	e7fd      	b.n	80079be <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d002      	beq.n	80079ce <xQueueGenericCreateStatic+0x56>
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <xQueueGenericCreateStatic+0x5a>
 80079ce:	2301      	movs	r3, #1
 80079d0:	e000      	b.n	80079d4 <xQueueGenericCreateStatic+0x5c>
 80079d2:	2300      	movs	r3, #0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d10b      	bne.n	80079f0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80079d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	623b      	str	r3, [r7, #32]
}
 80079ea:	bf00      	nop
 80079ec:	bf00      	nop
 80079ee:	e7fd      	b.n	80079ec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d102      	bne.n	80079fc <xQueueGenericCreateStatic+0x84>
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d101      	bne.n	8007a00 <xQueueGenericCreateStatic+0x88>
 80079fc:	2301      	movs	r3, #1
 80079fe:	e000      	b.n	8007a02 <xQueueGenericCreateStatic+0x8a>
 8007a00:	2300      	movs	r3, #0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10b      	bne.n	8007a1e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a0a:	f383 8811 	msr	BASEPRI, r3
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	f3bf 8f4f 	dsb	sy
 8007a16:	61fb      	str	r3, [r7, #28]
}
 8007a18:	bf00      	nop
 8007a1a:	bf00      	nop
 8007a1c:	e7fd      	b.n	8007a1a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a1e:	2350      	movs	r3, #80	@ 0x50
 8007a20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	2b50      	cmp	r3, #80	@ 0x50
 8007a26:	d00b      	beq.n	8007a40 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	61bb      	str	r3, [r7, #24]
}
 8007a3a:	bf00      	nop
 8007a3c:	bf00      	nop
 8007a3e:	e7fd      	b.n	8007a3c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a40:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00d      	beq.n	8007a68 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a54:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	68b9      	ldr	r1, [r7, #8]
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f000 f840 	bl	8007ae8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3730      	adds	r7, #48	@ 0x30
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b08a      	sub	sp, #40	@ 0x28
 8007a76:	af02      	add	r7, sp, #8
 8007a78:	60f8      	str	r0, [r7, #12]
 8007a7a:	60b9      	str	r1, [r7, #8]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10b      	bne.n	8007a9e <xQueueGenericCreate+0x2c>
	__asm volatile
 8007a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	613b      	str	r3, [r7, #16]
}
 8007a98:	bf00      	nop
 8007a9a:	bf00      	nop
 8007a9c:	e7fd      	b.n	8007a9a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	fb02 f303 	mul.w	r3, r2, r3
 8007aa6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	3350      	adds	r3, #80	@ 0x50
 8007aac:	4618      	mov	r0, r3
 8007aae:	f002 fc05 	bl	800a2bc <pvPortMalloc>
 8007ab2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d011      	beq.n	8007ade <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	3350      	adds	r3, #80	@ 0x50
 8007ac2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007acc:	79fa      	ldrb	r2, [r7, #7]
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	68b9      	ldr	r1, [r7, #8]
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 f805 	bl	8007ae8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ade:	69bb      	ldr	r3, [r7, #24]
	}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3720      	adds	r7, #32
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
 8007af4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d103      	bne.n	8007b04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	69ba      	ldr	r2, [r7, #24]
 8007b00:	601a      	str	r2, [r3, #0]
 8007b02:	e002      	b.n	8007b0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b16:	2101      	movs	r1, #1
 8007b18:	69b8      	ldr	r0, [r7, #24]
 8007b1a:	f7ff fec3 	bl	80078a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	78fa      	ldrb	r2, [r7, #3]
 8007b22:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b26:	bf00      	nop
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b082      	sub	sp, #8
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00e      	beq.n	8007b5a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007b4e:	2300      	movs	r3, #0
 8007b50:	2200      	movs	r2, #0
 8007b52:	2100      	movs	r1, #0
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f8a3 	bl	8007ca0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007b5a:	bf00      	nop
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b086      	sub	sp, #24
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	4603      	mov	r3, r0
 8007b6a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	617b      	str	r3, [r7, #20]
 8007b70:	2300      	movs	r3, #0
 8007b72:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007b74:	79fb      	ldrb	r3, [r7, #7]
 8007b76:	461a      	mov	r2, r3
 8007b78:	6939      	ldr	r1, [r7, #16]
 8007b7a:	6978      	ldr	r0, [r7, #20]
 8007b7c:	f7ff ff79 	bl	8007a72 <xQueueGenericCreate>
 8007b80:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f7ff ffd3 	bl	8007b2e <prvInitialiseMutex>

		return xNewQueue;
 8007b88:	68fb      	ldr	r3, [r7, #12]
	}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3718      	adds	r7, #24
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b088      	sub	sp, #32
 8007b96:	af02      	add	r7, sp, #8
 8007b98:	4603      	mov	r3, r0
 8007b9a:	6039      	str	r1, [r7, #0]
 8007b9c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	617b      	str	r3, [r7, #20]
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007ba6:	79fb      	ldrb	r3, [r7, #7]
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2200      	movs	r2, #0
 8007bae:	6939      	ldr	r1, [r7, #16]
 8007bb0:	6978      	ldr	r0, [r7, #20]
 8007bb2:	f7ff fee1 	bl	8007978 <xQueueGenericCreateStatic>
 8007bb6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f7ff ffb8 	bl	8007b2e <prvInitialiseMutex>

		return xNewQueue;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
	}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3718      	adds	r7, #24
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007bc8:	b590      	push	{r4, r7, lr}
 8007bca:	b087      	sub	sp, #28
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10b      	bne.n	8007bf2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	60fb      	str	r3, [r7, #12]
}
 8007bec:	bf00      	nop
 8007bee:	bf00      	nop
 8007bf0:	e7fd      	b.n	8007bee <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	689c      	ldr	r4, [r3, #8]
 8007bf6:	f001 fbc3 	bl	8009380 <xTaskGetCurrentTaskHandle>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	429c      	cmp	r4, r3
 8007bfe:	d111      	bne.n	8007c24 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	1e5a      	subs	r2, r3, #1
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d105      	bne.n	8007c1e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007c12:	2300      	movs	r3, #0
 8007c14:	2200      	movs	r2, #0
 8007c16:	2100      	movs	r1, #0
 8007c18:	6938      	ldr	r0, [r7, #16]
 8007c1a:	f000 f841 	bl	8007ca0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	617b      	str	r3, [r7, #20]
 8007c22:	e001      	b.n	8007c28 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007c24:	2300      	movs	r3, #0
 8007c26:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007c28:	697b      	ldr	r3, [r7, #20]
	}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	371c      	adds	r7, #28
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd90      	pop	{r4, r7, pc}

08007c32 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007c32:	b590      	push	{r4, r7, lr}
 8007c34:	b087      	sub	sp, #28
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10b      	bne.n	8007c5e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8007c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c4a:	f383 8811 	msr	BASEPRI, r3
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	f3bf 8f4f 	dsb	sy
 8007c56:	60fb      	str	r3, [r7, #12]
}
 8007c58:	bf00      	nop
 8007c5a:	bf00      	nop
 8007c5c:	e7fd      	b.n	8007c5a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	689c      	ldr	r4, [r3, #8]
 8007c62:	f001 fb8d 	bl	8009380 <xTaskGetCurrentTaskHandle>
 8007c66:	4603      	mov	r3, r0
 8007c68:	429c      	cmp	r4, r3
 8007c6a:	d107      	bne.n	8007c7c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	1c5a      	adds	r2, r3, #1
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007c76:	2301      	movs	r3, #1
 8007c78:	617b      	str	r3, [r7, #20]
 8007c7a:	e00c      	b.n	8007c96 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6938      	ldr	r0, [r7, #16]
 8007c80:	f000 fa90 	bl	80081a4 <xQueueSemaphoreTake>
 8007c84:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d004      	beq.n	8007c96 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	1c5a      	adds	r2, r3, #1
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007c96:	697b      	ldr	r3, [r7, #20]
	}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	371c      	adds	r7, #28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd90      	pop	{r4, r7, pc}

08007ca0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b08e      	sub	sp, #56	@ 0x38
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]
 8007cac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10b      	bne.n	8007cd4 <xQueueGenericSend+0x34>
	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007cce:	bf00      	nop
 8007cd0:	bf00      	nop
 8007cd2:	e7fd      	b.n	8007cd0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d103      	bne.n	8007ce2 <xQueueGenericSend+0x42>
 8007cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <xQueueGenericSend+0x46>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e000      	b.n	8007ce8 <xQueueGenericSend+0x48>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10b      	bne.n	8007d04 <xQueueGenericSend+0x64>
	__asm volatile
 8007cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007cfe:	bf00      	nop
 8007d00:	bf00      	nop
 8007d02:	e7fd      	b.n	8007d00 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d103      	bne.n	8007d12 <xQueueGenericSend+0x72>
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d101      	bne.n	8007d16 <xQueueGenericSend+0x76>
 8007d12:	2301      	movs	r3, #1
 8007d14:	e000      	b.n	8007d18 <xQueueGenericSend+0x78>
 8007d16:	2300      	movs	r3, #0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10b      	bne.n	8007d34 <xQueueGenericSend+0x94>
	__asm volatile
 8007d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d20:	f383 8811 	msr	BASEPRI, r3
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	623b      	str	r3, [r7, #32]
}
 8007d2e:	bf00      	nop
 8007d30:	bf00      	nop
 8007d32:	e7fd      	b.n	8007d30 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d34:	f001 fb34 	bl	80093a0 <xTaskGetSchedulerState>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d102      	bne.n	8007d44 <xQueueGenericSend+0xa4>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d101      	bne.n	8007d48 <xQueueGenericSend+0xa8>
 8007d44:	2301      	movs	r3, #1
 8007d46:	e000      	b.n	8007d4a <xQueueGenericSend+0xaa>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10b      	bne.n	8007d66 <xQueueGenericSend+0xc6>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	61fb      	str	r3, [r7, #28]
}
 8007d60:	bf00      	nop
 8007d62:	bf00      	nop
 8007d64:	e7fd      	b.n	8007d62 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d66:	f002 f987 	bl	800a078 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d302      	bcc.n	8007d7c <xQueueGenericSend+0xdc>
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d129      	bne.n	8007dd0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d7c:	683a      	ldr	r2, [r7, #0]
 8007d7e:	68b9      	ldr	r1, [r7, #8]
 8007d80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d82:	f000 fb37 	bl	80083f4 <prvCopyDataToQueue>
 8007d86:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d010      	beq.n	8007db2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d92:	3324      	adds	r3, #36	@ 0x24
 8007d94:	4618      	mov	r0, r3
 8007d96:	f001 f92d 	bl	8008ff4 <xTaskRemoveFromEventList>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d013      	beq.n	8007dc8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007da0:	4b3f      	ldr	r3, [pc, #252]	@ (8007ea0 <xQueueGenericSend+0x200>)
 8007da2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007da6:	601a      	str	r2, [r3, #0]
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	e00a      	b.n	8007dc8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d007      	beq.n	8007dc8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007db8:	4b39      	ldr	r3, [pc, #228]	@ (8007ea0 <xQueueGenericSend+0x200>)
 8007dba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dbe:	601a      	str	r2, [r3, #0]
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007dc8:	f002 f988 	bl	800a0dc <vPortExitCritical>
				return pdPASS;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e063      	b.n	8007e98 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d103      	bne.n	8007dde <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007dd6:	f002 f981 	bl	800a0dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	e05c      	b.n	8007e98 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d106      	bne.n	8007df2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007de4:	f107 0314 	add.w	r3, r7, #20
 8007de8:	4618      	mov	r0, r3
 8007dea:	f001 f967 	bl	80090bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dee:	2301      	movs	r3, #1
 8007df0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007df2:	f002 f973 	bl	800a0dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007df6:	f000 fecf 	bl	8008b98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dfa:	f002 f93d 	bl	800a078 <vPortEnterCritical>
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e04:	b25b      	sxtb	r3, r3
 8007e06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e0a:	d103      	bne.n	8007e14 <xQueueGenericSend+0x174>
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e1a:	b25b      	sxtb	r3, r3
 8007e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e20:	d103      	bne.n	8007e2a <xQueueGenericSend+0x18a>
 8007e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e2a:	f002 f957 	bl	800a0dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e2e:	1d3a      	adds	r2, r7, #4
 8007e30:	f107 0314 	add.w	r3, r7, #20
 8007e34:	4611      	mov	r1, r2
 8007e36:	4618      	mov	r0, r3
 8007e38:	f001 f956 	bl	80090e8 <xTaskCheckForTimeOut>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d124      	bne.n	8007e8c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e44:	f000 fbce 	bl	80085e4 <prvIsQueueFull>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d018      	beq.n	8007e80 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e50:	3310      	adds	r3, #16
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	4611      	mov	r1, r2
 8007e56:	4618      	mov	r0, r3
 8007e58:	f001 f87a 	bl	8008f50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e5e:	f000 fb59 	bl	8008514 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e62:	f000 fea7 	bl	8008bb4 <xTaskResumeAll>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f47f af7c 	bne.w	8007d66 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8007ea0 <xQueueGenericSend+0x200>)
 8007e70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e74:	601a      	str	r2, [r3, #0]
 8007e76:	f3bf 8f4f 	dsb	sy
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	e772      	b.n	8007d66 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e82:	f000 fb47 	bl	8008514 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e86:	f000 fe95 	bl	8008bb4 <xTaskResumeAll>
 8007e8a:	e76c      	b.n	8007d66 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e8e:	f000 fb41 	bl	8008514 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e92:	f000 fe8f 	bl	8008bb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3738      	adds	r7, #56	@ 0x38
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	e000ed04 	.word	0xe000ed04

08007ea4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b090      	sub	sp, #64	@ 0x40
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
 8007eb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10b      	bne.n	8007ed4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007ece:	bf00      	nop
 8007ed0:	bf00      	nop
 8007ed2:	e7fd      	b.n	8007ed0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d103      	bne.n	8007ee2 <xQueueGenericSendFromISR+0x3e>
 8007eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d101      	bne.n	8007ee6 <xQueueGenericSendFromISR+0x42>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e000      	b.n	8007ee8 <xQueueGenericSendFromISR+0x44>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10b      	bne.n	8007f04 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007efe:	bf00      	nop
 8007f00:	bf00      	nop
 8007f02:	e7fd      	b.n	8007f00 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d103      	bne.n	8007f12 <xQueueGenericSendFromISR+0x6e>
 8007f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d101      	bne.n	8007f16 <xQueueGenericSendFromISR+0x72>
 8007f12:	2301      	movs	r3, #1
 8007f14:	e000      	b.n	8007f18 <xQueueGenericSendFromISR+0x74>
 8007f16:	2300      	movs	r3, #0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10b      	bne.n	8007f34 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f20:	f383 8811 	msr	BASEPRI, r3
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	623b      	str	r3, [r7, #32]
}
 8007f2e:	bf00      	nop
 8007f30:	bf00      	nop
 8007f32:	e7fd      	b.n	8007f30 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f34:	f002 f980 	bl	800a238 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f38:	f3ef 8211 	mrs	r2, BASEPRI
 8007f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f40:	f383 8811 	msr	BASEPRI, r3
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	61fa      	str	r2, [r7, #28]
 8007f4e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f50:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f52:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d302      	bcc.n	8007f66 <xQueueGenericSendFromISR+0xc2>
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d12f      	bne.n	8007fc6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	68b9      	ldr	r1, [r7, #8]
 8007f7a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007f7c:	f000 fa3a 	bl	80083f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f80:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007f84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f88:	d112      	bne.n	8007fb0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d016      	beq.n	8007fc0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f94:	3324      	adds	r3, #36	@ 0x24
 8007f96:	4618      	mov	r0, r3
 8007f98:	f001 f82c 	bl	8008ff4 <xTaskRemoveFromEventList>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00e      	beq.n	8007fc0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00b      	beq.n	8007fc0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	601a      	str	r2, [r3, #0]
 8007fae:	e007      	b.n	8007fc0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007fb0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	b25a      	sxtb	r2, r3
 8007fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007fc4:	e001      	b.n	8007fca <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fcc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007fd4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3740      	adds	r7, #64	@ 0x40
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b08c      	sub	sp, #48	@ 0x30
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007fec:	2300      	movs	r3, #0
 8007fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10b      	bne.n	8008012 <xQueueReceive+0x32>
	__asm volatile
 8007ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	623b      	str	r3, [r7, #32]
}
 800800c:	bf00      	nop
 800800e:	bf00      	nop
 8008010:	e7fd      	b.n	800800e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d103      	bne.n	8008020 <xQueueReceive+0x40>
 8008018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800801a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <xQueueReceive+0x44>
 8008020:	2301      	movs	r3, #1
 8008022:	e000      	b.n	8008026 <xQueueReceive+0x46>
 8008024:	2300      	movs	r3, #0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10b      	bne.n	8008042 <xQueueReceive+0x62>
	__asm volatile
 800802a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800802e:	f383 8811 	msr	BASEPRI, r3
 8008032:	f3bf 8f6f 	isb	sy
 8008036:	f3bf 8f4f 	dsb	sy
 800803a:	61fb      	str	r3, [r7, #28]
}
 800803c:	bf00      	nop
 800803e:	bf00      	nop
 8008040:	e7fd      	b.n	800803e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008042:	f001 f9ad 	bl	80093a0 <xTaskGetSchedulerState>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d102      	bne.n	8008052 <xQueueReceive+0x72>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d101      	bne.n	8008056 <xQueueReceive+0x76>
 8008052:	2301      	movs	r3, #1
 8008054:	e000      	b.n	8008058 <xQueueReceive+0x78>
 8008056:	2300      	movs	r3, #0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10b      	bne.n	8008074 <xQueueReceive+0x94>
	__asm volatile
 800805c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	61bb      	str	r3, [r7, #24]
}
 800806e:	bf00      	nop
 8008070:	bf00      	nop
 8008072:	e7fd      	b.n	8008070 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008074:	f002 f800 	bl	800a078 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800807a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800807c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800807e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008080:	2b00      	cmp	r3, #0
 8008082:	d01f      	beq.n	80080c4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008084:	68b9      	ldr	r1, [r7, #8]
 8008086:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008088:	f000 fa1e 	bl	80084c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800808c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808e:	1e5a      	subs	r2, r3, #1
 8008090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008092:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00f      	beq.n	80080bc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800809c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800809e:	3310      	adds	r3, #16
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 ffa7 	bl	8008ff4 <xTaskRemoveFromEventList>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d007      	beq.n	80080bc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80080ac:	4b3c      	ldr	r3, [pc, #240]	@ (80081a0 <xQueueReceive+0x1c0>)
 80080ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80080bc:	f002 f80e 	bl	800a0dc <vPortExitCritical>
				return pdPASS;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e069      	b.n	8008198 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d103      	bne.n	80080d2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080ca:	f002 f807 	bl	800a0dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080ce:	2300      	movs	r3, #0
 80080d0:	e062      	b.n	8008198 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d106      	bne.n	80080e6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080d8:	f107 0310 	add.w	r3, r7, #16
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 ffed 	bl	80090bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080e2:	2301      	movs	r3, #1
 80080e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080e6:	f001 fff9 	bl	800a0dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080ea:	f000 fd55 	bl	8008b98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080ee:	f001 ffc3 	bl	800a078 <vPortEnterCritical>
 80080f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080f8:	b25b      	sxtb	r3, r3
 80080fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080fe:	d103      	bne.n	8008108 <xQueueReceive+0x128>
 8008100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008102:	2200      	movs	r2, #0
 8008104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800810a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800810e:	b25b      	sxtb	r3, r3
 8008110:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008114:	d103      	bne.n	800811e <xQueueReceive+0x13e>
 8008116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008118:	2200      	movs	r2, #0
 800811a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800811e:	f001 ffdd 	bl	800a0dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008122:	1d3a      	adds	r2, r7, #4
 8008124:	f107 0310 	add.w	r3, r7, #16
 8008128:	4611      	mov	r1, r2
 800812a:	4618      	mov	r0, r3
 800812c:	f000 ffdc 	bl	80090e8 <xTaskCheckForTimeOut>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d123      	bne.n	800817e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008136:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008138:	f000 fa3e 	bl	80085b8 <prvIsQueueEmpty>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d017      	beq.n	8008172 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008144:	3324      	adds	r3, #36	@ 0x24
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	4611      	mov	r1, r2
 800814a:	4618      	mov	r0, r3
 800814c:	f000 ff00 	bl	8008f50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008150:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008152:	f000 f9df 	bl	8008514 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008156:	f000 fd2d 	bl	8008bb4 <xTaskResumeAll>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d189      	bne.n	8008074 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008160:	4b0f      	ldr	r3, [pc, #60]	@ (80081a0 <xQueueReceive+0x1c0>)
 8008162:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008166:	601a      	str	r2, [r3, #0]
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	e780      	b.n	8008074 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008172:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008174:	f000 f9ce 	bl	8008514 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008178:	f000 fd1c 	bl	8008bb4 <xTaskResumeAll>
 800817c:	e77a      	b.n	8008074 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800817e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008180:	f000 f9c8 	bl	8008514 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008184:	f000 fd16 	bl	8008bb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008188:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800818a:	f000 fa15 	bl	80085b8 <prvIsQueueEmpty>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	f43f af6f 	beq.w	8008074 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008196:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008198:	4618      	mov	r0, r3
 800819a:	3730      	adds	r7, #48	@ 0x30
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	e000ed04 	.word	0xe000ed04

080081a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b08e      	sub	sp, #56	@ 0x38
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80081ae:	2300      	movs	r3, #0
 80081b0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80081b6:	2300      	movs	r3, #0
 80081b8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80081ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10b      	bne.n	80081d8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	623b      	str	r3, [r7, #32]
}
 80081d2:	bf00      	nop
 80081d4:	bf00      	nop
 80081d6:	e7fd      	b.n	80081d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80081d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00b      	beq.n	80081f8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	61fb      	str	r3, [r7, #28]
}
 80081f2:	bf00      	nop
 80081f4:	bf00      	nop
 80081f6:	e7fd      	b.n	80081f4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081f8:	f001 f8d2 	bl	80093a0 <xTaskGetSchedulerState>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d102      	bne.n	8008208 <xQueueSemaphoreTake+0x64>
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <xQueueSemaphoreTake+0x68>
 8008208:	2301      	movs	r3, #1
 800820a:	e000      	b.n	800820e <xQueueSemaphoreTake+0x6a>
 800820c:	2300      	movs	r3, #0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10b      	bne.n	800822a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	61bb      	str	r3, [r7, #24]
}
 8008224:	bf00      	nop
 8008226:	bf00      	nop
 8008228:	e7fd      	b.n	8008226 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800822a:	f001 ff25 	bl	800a078 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800822e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008232:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008236:	2b00      	cmp	r3, #0
 8008238:	d024      	beq.n	8008284 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800823a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823c:	1e5a      	subs	r2, r3, #1
 800823e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008240:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d104      	bne.n	8008254 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800824a:	f001 fa23 	bl	8009694 <pvTaskIncrementMutexHeldCount>
 800824e:	4602      	mov	r2, r0
 8008250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008252:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00f      	beq.n	800827c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800825c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800825e:	3310      	adds	r3, #16
 8008260:	4618      	mov	r0, r3
 8008262:	f000 fec7 	bl	8008ff4 <xTaskRemoveFromEventList>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d007      	beq.n	800827c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800826c:	4b54      	ldr	r3, [pc, #336]	@ (80083c0 <xQueueSemaphoreTake+0x21c>)
 800826e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008272:	601a      	str	r2, [r3, #0]
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800827c:	f001 ff2e 	bl	800a0dc <vPortExitCritical>
				return pdPASS;
 8008280:	2301      	movs	r3, #1
 8008282:	e098      	b.n	80083b6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d112      	bne.n	80082b0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800828a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00b      	beq.n	80082a8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	617b      	str	r3, [r7, #20]
}
 80082a2:	bf00      	nop
 80082a4:	bf00      	nop
 80082a6:	e7fd      	b.n	80082a4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80082a8:	f001 ff18 	bl	800a0dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082ac:	2300      	movs	r3, #0
 80082ae:	e082      	b.n	80083b6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d106      	bne.n	80082c4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082b6:	f107 030c 	add.w	r3, r7, #12
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 fefe 	bl	80090bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082c0:	2301      	movs	r3, #1
 80082c2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082c4:	f001 ff0a 	bl	800a0dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082c8:	f000 fc66 	bl	8008b98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082cc:	f001 fed4 	bl	800a078 <vPortEnterCritical>
 80082d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082d6:	b25b      	sxtb	r3, r3
 80082d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082dc:	d103      	bne.n	80082e6 <xQueueSemaphoreTake+0x142>
 80082de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082ec:	b25b      	sxtb	r3, r3
 80082ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082f2:	d103      	bne.n	80082fc <xQueueSemaphoreTake+0x158>
 80082f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082fc:	f001 feee 	bl	800a0dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008300:	463a      	mov	r2, r7
 8008302:	f107 030c 	add.w	r3, r7, #12
 8008306:	4611      	mov	r1, r2
 8008308:	4618      	mov	r0, r3
 800830a:	f000 feed 	bl	80090e8 <xTaskCheckForTimeOut>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d132      	bne.n	800837a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008314:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008316:	f000 f94f 	bl	80085b8 <prvIsQueueEmpty>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d026      	beq.n	800836e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d109      	bne.n	800833c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008328:	f001 fea6 	bl	800a078 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800832c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	4618      	mov	r0, r3
 8008332:	f001 f853 	bl	80093dc <xTaskPriorityInherit>
 8008336:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008338:	f001 fed0 	bl	800a0dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800833c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800833e:	3324      	adds	r3, #36	@ 0x24
 8008340:	683a      	ldr	r2, [r7, #0]
 8008342:	4611      	mov	r1, r2
 8008344:	4618      	mov	r0, r3
 8008346:	f000 fe03 	bl	8008f50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800834a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800834c:	f000 f8e2 	bl	8008514 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008350:	f000 fc30 	bl	8008bb4 <xTaskResumeAll>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	f47f af67 	bne.w	800822a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800835c:	4b18      	ldr	r3, [pc, #96]	@ (80083c0 <xQueueSemaphoreTake+0x21c>)
 800835e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008362:	601a      	str	r2, [r3, #0]
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	e75d      	b.n	800822a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800836e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008370:	f000 f8d0 	bl	8008514 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008374:	f000 fc1e 	bl	8008bb4 <xTaskResumeAll>
 8008378:	e757      	b.n	800822a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800837a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800837c:	f000 f8ca 	bl	8008514 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008380:	f000 fc18 	bl	8008bb4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008384:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008386:	f000 f917 	bl	80085b8 <prvIsQueueEmpty>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	f43f af4c 	beq.w	800822a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00d      	beq.n	80083b4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008398:	f001 fe6e 	bl	800a078 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800839c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800839e:	f000 f811 	bl	80083c4 <prvGetDisinheritPriorityAfterTimeout>
 80083a2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80083a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80083aa:	4618      	mov	r0, r3
 80083ac:	f001 f8ee 	bl	800958c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80083b0:	f001 fe94 	bl	800a0dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3738      	adds	r7, #56	@ 0x38
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	e000ed04 	.word	0xe000ed04

080083c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d006      	beq.n	80083e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80083de:	60fb      	str	r3, [r7, #12]
 80083e0:	e001      	b.n	80083e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80083e2:	2300      	movs	r3, #0
 80083e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80083e6:	68fb      	ldr	r3, [r7, #12]
	}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b086      	sub	sp, #24
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008400:	2300      	movs	r3, #0
 8008402:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008408:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10d      	bne.n	800842e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d14d      	bne.n	80084b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	4618      	mov	r0, r3
 8008420:	f001 f844 	bl	80094ac <xTaskPriorityDisinherit>
 8008424:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	609a      	str	r2, [r3, #8]
 800842c:	e043      	b.n	80084b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d119      	bne.n	8008468 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6858      	ldr	r0, [r3, #4]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800843c:	461a      	mov	r2, r3
 800843e:	68b9      	ldr	r1, [r7, #8]
 8008440:	f002 f9ae 	bl	800a7a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	685a      	ldr	r2, [r3, #4]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800844c:	441a      	add	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	685a      	ldr	r2, [r3, #4]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	429a      	cmp	r2, r3
 800845c:	d32b      	bcc.n	80084b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	605a      	str	r2, [r3, #4]
 8008466:	e026      	b.n	80084b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	68d8      	ldr	r0, [r3, #12]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008470:	461a      	mov	r2, r3
 8008472:	68b9      	ldr	r1, [r7, #8]
 8008474:	f002 f994 	bl	800a7a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	68da      	ldr	r2, [r3, #12]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008480:	425b      	negs	r3, r3
 8008482:	441a      	add	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	68da      	ldr	r2, [r3, #12]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	429a      	cmp	r2, r3
 8008492:	d207      	bcs.n	80084a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	689a      	ldr	r2, [r3, #8]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800849c:	425b      	negs	r3, r3
 800849e:	441a      	add	r2, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d105      	bne.n	80084b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d002      	beq.n	80084b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	3b01      	subs	r3, #1
 80084b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	1c5a      	adds	r2, r3, #1
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80084be:	697b      	ldr	r3, [r7, #20]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3718      	adds	r7, #24
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d018      	beq.n	800850c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	68da      	ldr	r2, [r3, #12]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e2:	441a      	add	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	68da      	ldr	r2, [r3, #12]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d303      	bcc.n	80084fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	68d9      	ldr	r1, [r3, #12]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008504:	461a      	mov	r2, r3
 8008506:	6838      	ldr	r0, [r7, #0]
 8008508:	f002 f94a 	bl	800a7a0 <memcpy>
	}
}
 800850c:	bf00      	nop
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800851c:	f001 fdac 	bl	800a078 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008526:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008528:	e011      	b.n	800854e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800852e:	2b00      	cmp	r3, #0
 8008530:	d012      	beq.n	8008558 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	3324      	adds	r3, #36	@ 0x24
 8008536:	4618      	mov	r0, r3
 8008538:	f000 fd5c 	bl	8008ff4 <xTaskRemoveFromEventList>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d001      	beq.n	8008546 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008542:	f000 fe35 	bl	80091b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008546:	7bfb      	ldrb	r3, [r7, #15]
 8008548:	3b01      	subs	r3, #1
 800854a:	b2db      	uxtb	r3, r3
 800854c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800854e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008552:	2b00      	cmp	r3, #0
 8008554:	dce9      	bgt.n	800852a <prvUnlockQueue+0x16>
 8008556:	e000      	b.n	800855a <prvUnlockQueue+0x46>
					break;
 8008558:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	22ff      	movs	r2, #255	@ 0xff
 800855e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008562:	f001 fdbb 	bl	800a0dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008566:	f001 fd87 	bl	800a078 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008570:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008572:	e011      	b.n	8008598 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d012      	beq.n	80085a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	3310      	adds	r3, #16
 8008580:	4618      	mov	r0, r3
 8008582:	f000 fd37 	bl	8008ff4 <xTaskRemoveFromEventList>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d001      	beq.n	8008590 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800858c:	f000 fe10 	bl	80091b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008590:	7bbb      	ldrb	r3, [r7, #14]
 8008592:	3b01      	subs	r3, #1
 8008594:	b2db      	uxtb	r3, r3
 8008596:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008598:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800859c:	2b00      	cmp	r3, #0
 800859e:	dce9      	bgt.n	8008574 <prvUnlockQueue+0x60>
 80085a0:	e000      	b.n	80085a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80085a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	22ff      	movs	r2, #255	@ 0xff
 80085a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80085ac:	f001 fd96 	bl	800a0dc <vPortExitCritical>
}
 80085b0:	bf00      	nop
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085c0:	f001 fd5a 	bl	800a078 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d102      	bne.n	80085d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80085cc:	2301      	movs	r3, #1
 80085ce:	60fb      	str	r3, [r7, #12]
 80085d0:	e001      	b.n	80085d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80085d2:	2300      	movs	r3, #0
 80085d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085d6:	f001 fd81 	bl	800a0dc <vPortExitCritical>

	return xReturn;
 80085da:	68fb      	ldr	r3, [r7, #12]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085ec:	f001 fd44 	bl	800a078 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d102      	bne.n	8008602 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80085fc:	2301      	movs	r3, #1
 80085fe:	60fb      	str	r3, [r7, #12]
 8008600:	e001      	b.n	8008606 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008602:	2300      	movs	r3, #0
 8008604:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008606:	f001 fd69 	bl	800a0dc <vPortExitCritical>

	return xReturn;
 800860a:	68fb      	ldr	r3, [r7, #12]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800861e:	2300      	movs	r3, #0
 8008620:	60fb      	str	r3, [r7, #12]
 8008622:	e014      	b.n	800864e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008624:	4a0f      	ldr	r2, [pc, #60]	@ (8008664 <vQueueAddToRegistry+0x50>)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d10b      	bne.n	8008648 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008630:	490c      	ldr	r1, [pc, #48]	@ (8008664 <vQueueAddToRegistry+0x50>)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	683a      	ldr	r2, [r7, #0]
 8008636:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800863a:	4a0a      	ldr	r2, [pc, #40]	@ (8008664 <vQueueAddToRegistry+0x50>)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	00db      	lsls	r3, r3, #3
 8008640:	4413      	add	r3, r2
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008646:	e006      	b.n	8008656 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	3301      	adds	r3, #1
 800864c:	60fb      	str	r3, [r7, #12]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2b07      	cmp	r3, #7
 8008652:	d9e7      	bls.n	8008624 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008654:	bf00      	nop
 8008656:	bf00      	nop
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	24000f58 	.word	0x24000f58

08008668 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008678:	f001 fcfe 	bl	800a078 <vPortEnterCritical>
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008682:	b25b      	sxtb	r3, r3
 8008684:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008688:	d103      	bne.n	8008692 <vQueueWaitForMessageRestricted+0x2a>
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	2200      	movs	r2, #0
 800868e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008698:	b25b      	sxtb	r3, r3
 800869a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800869e:	d103      	bne.n	80086a8 <vQueueWaitForMessageRestricted+0x40>
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086a8:	f001 fd18 	bl	800a0dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d106      	bne.n	80086c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	3324      	adds	r3, #36	@ 0x24
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	68b9      	ldr	r1, [r7, #8]
 80086bc:	4618      	mov	r0, r3
 80086be:	f000 fc6d 	bl	8008f9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80086c2:	6978      	ldr	r0, [r7, #20]
 80086c4:	f7ff ff26 	bl	8008514 <prvUnlockQueue>
	}
 80086c8:	bf00      	nop
 80086ca:	3718      	adds	r7, #24
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b08e      	sub	sp, #56	@ 0x38
 80086d4:	af04      	add	r7, sp, #16
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
 80086dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80086de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d10b      	bne.n	80086fc <xTaskCreateStatic+0x2c>
	__asm volatile
 80086e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e8:	f383 8811 	msr	BASEPRI, r3
 80086ec:	f3bf 8f6f 	isb	sy
 80086f0:	f3bf 8f4f 	dsb	sy
 80086f4:	623b      	str	r3, [r7, #32]
}
 80086f6:	bf00      	nop
 80086f8:	bf00      	nop
 80086fa:	e7fd      	b.n	80086f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80086fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d10b      	bne.n	800871a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008706:	f383 8811 	msr	BASEPRI, r3
 800870a:	f3bf 8f6f 	isb	sy
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	61fb      	str	r3, [r7, #28]
}
 8008714:	bf00      	nop
 8008716:	bf00      	nop
 8008718:	e7fd      	b.n	8008716 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800871a:	23a8      	movs	r3, #168	@ 0xa8
 800871c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	2ba8      	cmp	r3, #168	@ 0xa8
 8008722:	d00b      	beq.n	800873c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	61bb      	str	r3, [r7, #24]
}
 8008736:	bf00      	nop
 8008738:	bf00      	nop
 800873a:	e7fd      	b.n	8008738 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800873c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800873e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008740:	2b00      	cmp	r3, #0
 8008742:	d01e      	beq.n	8008782 <xTaskCreateStatic+0xb2>
 8008744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008746:	2b00      	cmp	r3, #0
 8008748:	d01b      	beq.n	8008782 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800874a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800874c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800874e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008750:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008752:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008756:	2202      	movs	r2, #2
 8008758:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800875c:	2300      	movs	r3, #0
 800875e:	9303      	str	r3, [sp, #12]
 8008760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008762:	9302      	str	r3, [sp, #8]
 8008764:	f107 0314 	add.w	r3, r7, #20
 8008768:	9301      	str	r3, [sp, #4]
 800876a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	68b9      	ldr	r1, [r7, #8]
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 f851 	bl	800881c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800877a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800877c:	f000 f8f6 	bl	800896c <prvAddNewTaskToReadyList>
 8008780:	e001      	b.n	8008786 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008782:	2300      	movs	r3, #0
 8008784:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008786:	697b      	ldr	r3, [r7, #20]
	}
 8008788:	4618      	mov	r0, r3
 800878a:	3728      	adds	r7, #40	@ 0x28
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008790:	b580      	push	{r7, lr}
 8008792:	b08c      	sub	sp, #48	@ 0x30
 8008794:	af04      	add	r7, sp, #16
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	603b      	str	r3, [r7, #0]
 800879c:	4613      	mov	r3, r2
 800879e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80087a0:	88fb      	ldrh	r3, [r7, #6]
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4618      	mov	r0, r3
 80087a6:	f001 fd89 	bl	800a2bc <pvPortMalloc>
 80087aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00e      	beq.n	80087d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80087b2:	20a8      	movs	r0, #168	@ 0xa8
 80087b4:	f001 fd82 	bl	800a2bc <pvPortMalloc>
 80087b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d003      	beq.n	80087c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80087c6:	e005      	b.n	80087d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80087c8:	6978      	ldr	r0, [r7, #20]
 80087ca:	f001 fe45 	bl	800a458 <vPortFree>
 80087ce:	e001      	b.n	80087d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80087d0:	2300      	movs	r3, #0
 80087d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d017      	beq.n	800880a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087e2:	88fa      	ldrh	r2, [r7, #6]
 80087e4:	2300      	movs	r3, #0
 80087e6:	9303      	str	r3, [sp, #12]
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	9302      	str	r3, [sp, #8]
 80087ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ee:	9301      	str	r3, [sp, #4]
 80087f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	68b9      	ldr	r1, [r7, #8]
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f000 f80f 	bl	800881c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087fe:	69f8      	ldr	r0, [r7, #28]
 8008800:	f000 f8b4 	bl	800896c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008804:	2301      	movs	r3, #1
 8008806:	61bb      	str	r3, [r7, #24]
 8008808:	e002      	b.n	8008810 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800880a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800880e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008810:	69bb      	ldr	r3, [r7, #24]
	}
 8008812:	4618      	mov	r0, r3
 8008814:	3720      	adds	r7, #32
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
	...

0800881c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b088      	sub	sp, #32
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	607a      	str	r2, [r7, #4]
 8008828:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800882a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	461a      	mov	r2, r3
 8008834:	21a5      	movs	r1, #165	@ 0xa5
 8008836:	f001 ff2f 	bl	800a698 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800883a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800883e:	6879      	ldr	r1, [r7, #4]
 8008840:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008844:	440b      	add	r3, r1
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	f023 0307 	bic.w	r3, r3, #7
 8008852:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	f003 0307 	and.w	r3, r3, #7
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00b      	beq.n	8008876 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	617b      	str	r3, [r7, #20]
}
 8008870:	bf00      	nop
 8008872:	bf00      	nop
 8008874:	e7fd      	b.n	8008872 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d01f      	beq.n	80088bc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800887c:	2300      	movs	r3, #0
 800887e:	61fb      	str	r3, [r7, #28]
 8008880:	e012      	b.n	80088a8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	4413      	add	r3, r2
 8008888:	7819      	ldrb	r1, [r3, #0]
 800888a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	4413      	add	r3, r2
 8008890:	3334      	adds	r3, #52	@ 0x34
 8008892:	460a      	mov	r2, r1
 8008894:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	4413      	add	r3, r2
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d006      	beq.n	80088b0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	3301      	adds	r3, #1
 80088a6:	61fb      	str	r3, [r7, #28]
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	2b0f      	cmp	r3, #15
 80088ac:	d9e9      	bls.n	8008882 <prvInitialiseNewTask+0x66>
 80088ae:	e000      	b.n	80088b2 <prvInitialiseNewTask+0x96>
			{
				break;
 80088b0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80088b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80088ba:	e003      	b.n	80088c4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80088bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80088c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c6:	2b37      	cmp	r3, #55	@ 0x37
 80088c8:	d901      	bls.n	80088ce <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80088ca:	2337      	movs	r3, #55	@ 0x37
 80088cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80088ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80088d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088d8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80088da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088dc:	2200      	movs	r2, #0
 80088de:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e2:	3304      	adds	r3, #4
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fe ff49 	bl	800777c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ec:	3318      	adds	r3, #24
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7fe ff44 	bl	800777c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80088f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008902:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008906:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008908:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800890a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800890c:	2200      	movs	r2, #0
 800890e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008914:	2200      	movs	r2, #0
 8008916:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800891a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891c:	3354      	adds	r3, #84	@ 0x54
 800891e:	224c      	movs	r2, #76	@ 0x4c
 8008920:	2100      	movs	r1, #0
 8008922:	4618      	mov	r0, r3
 8008924:	f001 feb8 	bl	800a698 <memset>
 8008928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892a:	4a0d      	ldr	r2, [pc, #52]	@ (8008960 <prvInitialiseNewTask+0x144>)
 800892c:	659a      	str	r2, [r3, #88]	@ 0x58
 800892e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008930:	4a0c      	ldr	r2, [pc, #48]	@ (8008964 <prvInitialiseNewTask+0x148>)
 8008932:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008936:	4a0c      	ldr	r2, [pc, #48]	@ (8008968 <prvInitialiseNewTask+0x14c>)
 8008938:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800893a:	683a      	ldr	r2, [r7, #0]
 800893c:	68f9      	ldr	r1, [r7, #12]
 800893e:	69b8      	ldr	r0, [r7, #24]
 8008940:	f001 fa6a 	bl	8009e18 <pxPortInitialiseStack>
 8008944:	4602      	mov	r2, r0
 8008946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008948:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800894a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800894c:	2b00      	cmp	r3, #0
 800894e:	d002      	beq.n	8008956 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008952:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008956:	bf00      	nop
 8008958:	3720      	adds	r7, #32
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	240051ec 	.word	0x240051ec
 8008964:	24005254 	.word	0x24005254
 8008968:	240052bc 	.word	0x240052bc

0800896c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008974:	f001 fb80 	bl	800a078 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008978:	4b2d      	ldr	r3, [pc, #180]	@ (8008a30 <prvAddNewTaskToReadyList+0xc4>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	3301      	adds	r3, #1
 800897e:	4a2c      	ldr	r2, [pc, #176]	@ (8008a30 <prvAddNewTaskToReadyList+0xc4>)
 8008980:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008982:	4b2c      	ldr	r3, [pc, #176]	@ (8008a34 <prvAddNewTaskToReadyList+0xc8>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d109      	bne.n	800899e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800898a:	4a2a      	ldr	r2, [pc, #168]	@ (8008a34 <prvAddNewTaskToReadyList+0xc8>)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008990:	4b27      	ldr	r3, [pc, #156]	@ (8008a30 <prvAddNewTaskToReadyList+0xc4>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d110      	bne.n	80089ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008998:	f000 fc2e 	bl	80091f8 <prvInitialiseTaskLists>
 800899c:	e00d      	b.n	80089ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800899e:	4b26      	ldr	r3, [pc, #152]	@ (8008a38 <prvAddNewTaskToReadyList+0xcc>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d109      	bne.n	80089ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80089a6:	4b23      	ldr	r3, [pc, #140]	@ (8008a34 <prvAddNewTaskToReadyList+0xc8>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d802      	bhi.n	80089ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80089b4:	4a1f      	ldr	r2, [pc, #124]	@ (8008a34 <prvAddNewTaskToReadyList+0xc8>)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80089ba:	4b20      	ldr	r3, [pc, #128]	@ (8008a3c <prvAddNewTaskToReadyList+0xd0>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	3301      	adds	r3, #1
 80089c0:	4a1e      	ldr	r2, [pc, #120]	@ (8008a3c <prvAddNewTaskToReadyList+0xd0>)
 80089c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80089c4:	4b1d      	ldr	r3, [pc, #116]	@ (8008a3c <prvAddNewTaskToReadyList+0xd0>)
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089d0:	4b1b      	ldr	r3, [pc, #108]	@ (8008a40 <prvAddNewTaskToReadyList+0xd4>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d903      	bls.n	80089e0 <prvAddNewTaskToReadyList+0x74>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089dc:	4a18      	ldr	r2, [pc, #96]	@ (8008a40 <prvAddNewTaskToReadyList+0xd4>)
 80089de:	6013      	str	r3, [r2, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089e4:	4613      	mov	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4413      	add	r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4a15      	ldr	r2, [pc, #84]	@ (8008a44 <prvAddNewTaskToReadyList+0xd8>)
 80089ee:	441a      	add	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	3304      	adds	r3, #4
 80089f4:	4619      	mov	r1, r3
 80089f6:	4610      	mov	r0, r2
 80089f8:	f7fe fecd 	bl	8007796 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089fc:	f001 fb6e 	bl	800a0dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008a00:	4b0d      	ldr	r3, [pc, #52]	@ (8008a38 <prvAddNewTaskToReadyList+0xcc>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d00e      	beq.n	8008a26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008a08:	4b0a      	ldr	r3, [pc, #40]	@ (8008a34 <prvAddNewTaskToReadyList+0xc8>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d207      	bcs.n	8008a26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008a16:	4b0c      	ldr	r3, [pc, #48]	@ (8008a48 <prvAddNewTaskToReadyList+0xdc>)
 8008a18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a26:	bf00      	nop
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	2400146c 	.word	0x2400146c
 8008a34:	24000f98 	.word	0x24000f98
 8008a38:	24001478 	.word	0x24001478
 8008a3c:	24001488 	.word	0x24001488
 8008a40:	24001474 	.word	0x24001474
 8008a44:	24000f9c 	.word	0x24000f9c
 8008a48:	e000ed04 	.word	0xe000ed04

08008a4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a54:	2300      	movs	r3, #0
 8008a56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d018      	beq.n	8008a90 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a5e:	4b14      	ldr	r3, [pc, #80]	@ (8008ab0 <vTaskDelay+0x64>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00b      	beq.n	8008a7e <vTaskDelay+0x32>
	__asm volatile
 8008a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a6a:	f383 8811 	msr	BASEPRI, r3
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	f3bf 8f4f 	dsb	sy
 8008a76:	60bb      	str	r3, [r7, #8]
}
 8008a78:	bf00      	nop
 8008a7a:	bf00      	nop
 8008a7c:	e7fd      	b.n	8008a7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008a7e:	f000 f88b 	bl	8008b98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a82:	2100      	movs	r1, #0
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fe19 	bl	80096bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a8a:	f000 f893 	bl	8008bb4 <xTaskResumeAll>
 8008a8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d107      	bne.n	8008aa6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008a96:	4b07      	ldr	r3, [pc, #28]	@ (8008ab4 <vTaskDelay+0x68>)
 8008a98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a9c:	601a      	str	r2, [r3, #0]
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008aa6:	bf00      	nop
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	24001494 	.word	0x24001494
 8008ab4:	e000ed04 	.word	0xe000ed04

08008ab8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b08a      	sub	sp, #40	@ 0x28
 8008abc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ac6:	463a      	mov	r2, r7
 8008ac8:	1d39      	adds	r1, r7, #4
 8008aca:	f107 0308 	add.w	r3, r7, #8
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7fe fe00 	bl	80076d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	9202      	str	r2, [sp, #8]
 8008adc:	9301      	str	r3, [sp, #4]
 8008ade:	2300      	movs	r3, #0
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	460a      	mov	r2, r1
 8008ae6:	4924      	ldr	r1, [pc, #144]	@ (8008b78 <vTaskStartScheduler+0xc0>)
 8008ae8:	4824      	ldr	r0, [pc, #144]	@ (8008b7c <vTaskStartScheduler+0xc4>)
 8008aea:	f7ff fdf1 	bl	80086d0 <xTaskCreateStatic>
 8008aee:	4603      	mov	r3, r0
 8008af0:	4a23      	ldr	r2, [pc, #140]	@ (8008b80 <vTaskStartScheduler+0xc8>)
 8008af2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008af4:	4b22      	ldr	r3, [pc, #136]	@ (8008b80 <vTaskStartScheduler+0xc8>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d002      	beq.n	8008b02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008afc:	2301      	movs	r3, #1
 8008afe:	617b      	str	r3, [r7, #20]
 8008b00:	e001      	b.n	8008b06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008b02:	2300      	movs	r3, #0
 8008b04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d102      	bne.n	8008b12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008b0c:	f000 fe2a 	bl	8009764 <xTimerCreateTimerTask>
 8008b10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d11b      	bne.n	8008b50 <vTaskStartScheduler+0x98>
	__asm volatile
 8008b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b1c:	f383 8811 	msr	BASEPRI, r3
 8008b20:	f3bf 8f6f 	isb	sy
 8008b24:	f3bf 8f4f 	dsb	sy
 8008b28:	613b      	str	r3, [r7, #16]
}
 8008b2a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008b2c:	4b15      	ldr	r3, [pc, #84]	@ (8008b84 <vTaskStartScheduler+0xcc>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	3354      	adds	r3, #84	@ 0x54
 8008b32:	4a15      	ldr	r2, [pc, #84]	@ (8008b88 <vTaskStartScheduler+0xd0>)
 8008b34:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008b36:	4b15      	ldr	r3, [pc, #84]	@ (8008b8c <vTaskStartScheduler+0xd4>)
 8008b38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008b3e:	4b14      	ldr	r3, [pc, #80]	@ (8008b90 <vTaskStartScheduler+0xd8>)
 8008b40:	2201      	movs	r2, #1
 8008b42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008b44:	4b13      	ldr	r3, [pc, #76]	@ (8008b94 <vTaskStartScheduler+0xdc>)
 8008b46:	2200      	movs	r2, #0
 8008b48:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008b4a:	f001 f9f1 	bl	8009f30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008b4e:	e00f      	b.n	8008b70 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b56:	d10b      	bne.n	8008b70 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	60fb      	str	r3, [r7, #12]
}
 8008b6a:	bf00      	nop
 8008b6c:	bf00      	nop
 8008b6e:	e7fd      	b.n	8008b6c <vTaskStartScheduler+0xb4>
}
 8008b70:	bf00      	nop
 8008b72:	3718      	adds	r7, #24
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	0800a8dc 	.word	0x0800a8dc
 8008b7c:	080091c9 	.word	0x080091c9
 8008b80:	24001490 	.word	0x24001490
 8008b84:	24000f98 	.word	0x24000f98
 8008b88:	24000014 	.word	0x24000014
 8008b8c:	2400148c 	.word	0x2400148c
 8008b90:	24001478 	.word	0x24001478
 8008b94:	24001470 	.word	0x24001470

08008b98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b98:	b480      	push	{r7}
 8008b9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008b9c:	4b04      	ldr	r3, [pc, #16]	@ (8008bb0 <vTaskSuspendAll+0x18>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	4a03      	ldr	r2, [pc, #12]	@ (8008bb0 <vTaskSuspendAll+0x18>)
 8008ba4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008ba6:	bf00      	nop
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	24001494 	.word	0x24001494

08008bb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008bc2:	4b42      	ldr	r3, [pc, #264]	@ (8008ccc <xTaskResumeAll+0x118>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10b      	bne.n	8008be2 <xTaskResumeAll+0x2e>
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	603b      	str	r3, [r7, #0]
}
 8008bdc:	bf00      	nop
 8008bde:	bf00      	nop
 8008be0:	e7fd      	b.n	8008bde <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008be2:	f001 fa49 	bl	800a078 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008be6:	4b39      	ldr	r3, [pc, #228]	@ (8008ccc <xTaskResumeAll+0x118>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	3b01      	subs	r3, #1
 8008bec:	4a37      	ldr	r2, [pc, #220]	@ (8008ccc <xTaskResumeAll+0x118>)
 8008bee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bf0:	4b36      	ldr	r3, [pc, #216]	@ (8008ccc <xTaskResumeAll+0x118>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d162      	bne.n	8008cbe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008bf8:	4b35      	ldr	r3, [pc, #212]	@ (8008cd0 <xTaskResumeAll+0x11c>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d05e      	beq.n	8008cbe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c00:	e02f      	b.n	8008c62 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c02:	4b34      	ldr	r3, [pc, #208]	@ (8008cd4 <xTaskResumeAll+0x120>)
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	3318      	adds	r3, #24
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fe fe1e 	bl	8007850 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	3304      	adds	r3, #4
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7fe fe19 	bl	8007850 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c22:	4b2d      	ldr	r3, [pc, #180]	@ (8008cd8 <xTaskResumeAll+0x124>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d903      	bls.n	8008c32 <xTaskResumeAll+0x7e>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c2e:	4a2a      	ldr	r2, [pc, #168]	@ (8008cd8 <xTaskResumeAll+0x124>)
 8008c30:	6013      	str	r3, [r2, #0]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c36:	4613      	mov	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4a27      	ldr	r2, [pc, #156]	@ (8008cdc <xTaskResumeAll+0x128>)
 8008c40:	441a      	add	r2, r3
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	3304      	adds	r3, #4
 8008c46:	4619      	mov	r1, r3
 8008c48:	4610      	mov	r0, r2
 8008c4a:	f7fe fda4 	bl	8007796 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c52:	4b23      	ldr	r3, [pc, #140]	@ (8008ce0 <xTaskResumeAll+0x12c>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d302      	bcc.n	8008c62 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008c5c:	4b21      	ldr	r3, [pc, #132]	@ (8008ce4 <xTaskResumeAll+0x130>)
 8008c5e:	2201      	movs	r2, #1
 8008c60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c62:	4b1c      	ldr	r3, [pc, #112]	@ (8008cd4 <xTaskResumeAll+0x120>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1cb      	bne.n	8008c02 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c70:	f000 fb66 	bl	8009340 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008c74:	4b1c      	ldr	r3, [pc, #112]	@ (8008ce8 <xTaskResumeAll+0x134>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d010      	beq.n	8008ca2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c80:	f000 f846 	bl	8008d10 <xTaskIncrementTick>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d002      	beq.n	8008c90 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008c8a:	4b16      	ldr	r3, [pc, #88]	@ (8008ce4 <xTaskResumeAll+0x130>)
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	3b01      	subs	r3, #1
 8008c94:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1f1      	bne.n	8008c80 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008c9c:	4b12      	ldr	r3, [pc, #72]	@ (8008ce8 <xTaskResumeAll+0x134>)
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ca2:	4b10      	ldr	r3, [pc, #64]	@ (8008ce4 <xTaskResumeAll+0x130>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d009      	beq.n	8008cbe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008caa:	2301      	movs	r3, #1
 8008cac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008cae:	4b0f      	ldr	r3, [pc, #60]	@ (8008cec <xTaskResumeAll+0x138>)
 8008cb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008cbe:	f001 fa0d 	bl	800a0dc <vPortExitCritical>

	return xAlreadyYielded;
 8008cc2:	68bb      	ldr	r3, [r7, #8]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	24001494 	.word	0x24001494
 8008cd0:	2400146c 	.word	0x2400146c
 8008cd4:	2400142c 	.word	0x2400142c
 8008cd8:	24001474 	.word	0x24001474
 8008cdc:	24000f9c 	.word	0x24000f9c
 8008ce0:	24000f98 	.word	0x24000f98
 8008ce4:	24001480 	.word	0x24001480
 8008ce8:	2400147c 	.word	0x2400147c
 8008cec:	e000ed04 	.word	0xe000ed04

08008cf0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008cf6:	4b05      	ldr	r3, [pc, #20]	@ (8008d0c <xTaskGetTickCount+0x1c>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008cfc:	687b      	ldr	r3, [r7, #4]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	370c      	adds	r7, #12
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	24001470 	.word	0x24001470

08008d10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b086      	sub	sp, #24
 8008d14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008d16:	2300      	movs	r3, #0
 8008d18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d1a:	4b4f      	ldr	r3, [pc, #316]	@ (8008e58 <xTaskIncrementTick+0x148>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f040 8090 	bne.w	8008e44 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d24:	4b4d      	ldr	r3, [pc, #308]	@ (8008e5c <xTaskIncrementTick+0x14c>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008d2c:	4a4b      	ldr	r2, [pc, #300]	@ (8008e5c <xTaskIncrementTick+0x14c>)
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d121      	bne.n	8008d7c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d38:	4b49      	ldr	r3, [pc, #292]	@ (8008e60 <xTaskIncrementTick+0x150>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00b      	beq.n	8008d5a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d46:	f383 8811 	msr	BASEPRI, r3
 8008d4a:	f3bf 8f6f 	isb	sy
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	603b      	str	r3, [r7, #0]
}
 8008d54:	bf00      	nop
 8008d56:	bf00      	nop
 8008d58:	e7fd      	b.n	8008d56 <xTaskIncrementTick+0x46>
 8008d5a:	4b41      	ldr	r3, [pc, #260]	@ (8008e60 <xTaskIncrementTick+0x150>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	60fb      	str	r3, [r7, #12]
 8008d60:	4b40      	ldr	r3, [pc, #256]	@ (8008e64 <xTaskIncrementTick+0x154>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a3e      	ldr	r2, [pc, #248]	@ (8008e60 <xTaskIncrementTick+0x150>)
 8008d66:	6013      	str	r3, [r2, #0]
 8008d68:	4a3e      	ldr	r2, [pc, #248]	@ (8008e64 <xTaskIncrementTick+0x154>)
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6013      	str	r3, [r2, #0]
 8008d6e:	4b3e      	ldr	r3, [pc, #248]	@ (8008e68 <xTaskIncrementTick+0x158>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	3301      	adds	r3, #1
 8008d74:	4a3c      	ldr	r2, [pc, #240]	@ (8008e68 <xTaskIncrementTick+0x158>)
 8008d76:	6013      	str	r3, [r2, #0]
 8008d78:	f000 fae2 	bl	8009340 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d7c:	4b3b      	ldr	r3, [pc, #236]	@ (8008e6c <xTaskIncrementTick+0x15c>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	693a      	ldr	r2, [r7, #16]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d349      	bcc.n	8008e1a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d86:	4b36      	ldr	r3, [pc, #216]	@ (8008e60 <xTaskIncrementTick+0x150>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d104      	bne.n	8008d9a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d90:	4b36      	ldr	r3, [pc, #216]	@ (8008e6c <xTaskIncrementTick+0x15c>)
 8008d92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d96:	601a      	str	r2, [r3, #0]
					break;
 8008d98:	e03f      	b.n	8008e1a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d9a:	4b31      	ldr	r3, [pc, #196]	@ (8008e60 <xTaskIncrementTick+0x150>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d203      	bcs.n	8008dba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008db2:	4a2e      	ldr	r2, [pc, #184]	@ (8008e6c <xTaskIncrementTick+0x15c>)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008db8:	e02f      	b.n	8008e1a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fe fd46 	bl	8007850 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d004      	beq.n	8008dd6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	3318      	adds	r3, #24
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7fe fd3d 	bl	8007850 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dda:	4b25      	ldr	r3, [pc, #148]	@ (8008e70 <xTaskIncrementTick+0x160>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d903      	bls.n	8008dea <xTaskIncrementTick+0xda>
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de6:	4a22      	ldr	r2, [pc, #136]	@ (8008e70 <xTaskIncrementTick+0x160>)
 8008de8:	6013      	str	r3, [r2, #0]
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dee:	4613      	mov	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	4413      	add	r3, r2
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4a1f      	ldr	r2, [pc, #124]	@ (8008e74 <xTaskIncrementTick+0x164>)
 8008df8:	441a      	add	r2, r3
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	3304      	adds	r3, #4
 8008dfe:	4619      	mov	r1, r3
 8008e00:	4610      	mov	r0, r2
 8008e02:	f7fe fcc8 	bl	8007796 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8008e78 <xTaskIncrementTick+0x168>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d3b8      	bcc.n	8008d86 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008e14:	2301      	movs	r3, #1
 8008e16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e18:	e7b5      	b.n	8008d86 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e1a:	4b17      	ldr	r3, [pc, #92]	@ (8008e78 <xTaskIncrementTick+0x168>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e20:	4914      	ldr	r1, [pc, #80]	@ (8008e74 <xTaskIncrementTick+0x164>)
 8008e22:	4613      	mov	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4413      	add	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	440b      	add	r3, r1
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d901      	bls.n	8008e36 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008e32:	2301      	movs	r3, #1
 8008e34:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008e36:	4b11      	ldr	r3, [pc, #68]	@ (8008e7c <xTaskIncrementTick+0x16c>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d007      	beq.n	8008e4e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	617b      	str	r3, [r7, #20]
 8008e42:	e004      	b.n	8008e4e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008e44:	4b0e      	ldr	r3, [pc, #56]	@ (8008e80 <xTaskIncrementTick+0x170>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	4a0d      	ldr	r2, [pc, #52]	@ (8008e80 <xTaskIncrementTick+0x170>)
 8008e4c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008e4e:	697b      	ldr	r3, [r7, #20]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3718      	adds	r7, #24
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	24001494 	.word	0x24001494
 8008e5c:	24001470 	.word	0x24001470
 8008e60:	24001424 	.word	0x24001424
 8008e64:	24001428 	.word	0x24001428
 8008e68:	24001484 	.word	0x24001484
 8008e6c:	2400148c 	.word	0x2400148c
 8008e70:	24001474 	.word	0x24001474
 8008e74:	24000f9c 	.word	0x24000f9c
 8008e78:	24000f98 	.word	0x24000f98
 8008e7c:	24001480 	.word	0x24001480
 8008e80:	2400147c 	.word	0x2400147c

08008e84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e8a:	4b2b      	ldr	r3, [pc, #172]	@ (8008f38 <vTaskSwitchContext+0xb4>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d003      	beq.n	8008e9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e92:	4b2a      	ldr	r3, [pc, #168]	@ (8008f3c <vTaskSwitchContext+0xb8>)
 8008e94:	2201      	movs	r2, #1
 8008e96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e98:	e047      	b.n	8008f2a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008e9a:	4b28      	ldr	r3, [pc, #160]	@ (8008f3c <vTaskSwitchContext+0xb8>)
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ea0:	4b27      	ldr	r3, [pc, #156]	@ (8008f40 <vTaskSwitchContext+0xbc>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	60fb      	str	r3, [r7, #12]
 8008ea6:	e011      	b.n	8008ecc <vTaskSwitchContext+0x48>
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d10b      	bne.n	8008ec6 <vTaskSwitchContext+0x42>
	__asm volatile
 8008eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb2:	f383 8811 	msr	BASEPRI, r3
 8008eb6:	f3bf 8f6f 	isb	sy
 8008eba:	f3bf 8f4f 	dsb	sy
 8008ebe:	607b      	str	r3, [r7, #4]
}
 8008ec0:	bf00      	nop
 8008ec2:	bf00      	nop
 8008ec4:	e7fd      	b.n	8008ec2 <vTaskSwitchContext+0x3e>
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	60fb      	str	r3, [r7, #12]
 8008ecc:	491d      	ldr	r1, [pc, #116]	@ (8008f44 <vTaskSwitchContext+0xc0>)
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4413      	add	r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	440b      	add	r3, r1
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d0e3      	beq.n	8008ea8 <vTaskSwitchContext+0x24>
 8008ee0:	68fa      	ldr	r2, [r7, #12]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	4413      	add	r3, r2
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	4a16      	ldr	r2, [pc, #88]	@ (8008f44 <vTaskSwitchContext+0xc0>)
 8008eec:	4413      	add	r3, r2
 8008eee:	60bb      	str	r3, [r7, #8]
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	685a      	ldr	r2, [r3, #4]
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	605a      	str	r2, [r3, #4]
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	685a      	ldr	r2, [r3, #4]
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	3308      	adds	r3, #8
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d104      	bne.n	8008f10 <vTaskSwitchContext+0x8c>
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	685a      	ldr	r2, [r3, #4]
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	605a      	str	r2, [r3, #4]
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	4a0c      	ldr	r2, [pc, #48]	@ (8008f48 <vTaskSwitchContext+0xc4>)
 8008f18:	6013      	str	r3, [r2, #0]
 8008f1a:	4a09      	ldr	r2, [pc, #36]	@ (8008f40 <vTaskSwitchContext+0xbc>)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f20:	4b09      	ldr	r3, [pc, #36]	@ (8008f48 <vTaskSwitchContext+0xc4>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3354      	adds	r3, #84	@ 0x54
 8008f26:	4a09      	ldr	r2, [pc, #36]	@ (8008f4c <vTaskSwitchContext+0xc8>)
 8008f28:	6013      	str	r3, [r2, #0]
}
 8008f2a:	bf00      	nop
 8008f2c:	3714      	adds	r7, #20
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	24001494 	.word	0x24001494
 8008f3c:	24001480 	.word	0x24001480
 8008f40:	24001474 	.word	0x24001474
 8008f44:	24000f9c 	.word	0x24000f9c
 8008f48:	24000f98 	.word	0x24000f98
 8008f4c:	24000014 	.word	0x24000014

08008f50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d10b      	bne.n	8008f78 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f64:	f383 8811 	msr	BASEPRI, r3
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	60fb      	str	r3, [r7, #12]
}
 8008f72:	bf00      	nop
 8008f74:	bf00      	nop
 8008f76:	e7fd      	b.n	8008f74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f78:	4b07      	ldr	r3, [pc, #28]	@ (8008f98 <vTaskPlaceOnEventList+0x48>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	3318      	adds	r3, #24
 8008f7e:	4619      	mov	r1, r3
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7fe fc2c 	bl	80077de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f86:	2101      	movs	r1, #1
 8008f88:	6838      	ldr	r0, [r7, #0]
 8008f8a:	f000 fb97 	bl	80096bc <prvAddCurrentTaskToDelayedList>
}
 8008f8e:	bf00      	nop
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	24000f98 	.word	0x24000f98

08008f9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b086      	sub	sp, #24
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d10b      	bne.n	8008fc6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fb2:	f383 8811 	msr	BASEPRI, r3
 8008fb6:	f3bf 8f6f 	isb	sy
 8008fba:	f3bf 8f4f 	dsb	sy
 8008fbe:	617b      	str	r3, [r7, #20]
}
 8008fc0:	bf00      	nop
 8008fc2:	bf00      	nop
 8008fc4:	e7fd      	b.n	8008fc2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8008ff0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	3318      	adds	r3, #24
 8008fcc:	4619      	mov	r1, r3
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f7fe fbe1 	bl	8007796 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d002      	beq.n	8008fe0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008fda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008fde:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008fe0:	6879      	ldr	r1, [r7, #4]
 8008fe2:	68b8      	ldr	r0, [r7, #8]
 8008fe4:	f000 fb6a 	bl	80096bc <prvAddCurrentTaskToDelayedList>
	}
 8008fe8:	bf00      	nop
 8008fea:	3718      	adds	r7, #24
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	24000f98 	.word	0x24000f98

08008ff4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d10b      	bne.n	8009022 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800900a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	60fb      	str	r3, [r7, #12]
}
 800901c:	bf00      	nop
 800901e:	bf00      	nop
 8009020:	e7fd      	b.n	800901e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	3318      	adds	r3, #24
 8009026:	4618      	mov	r0, r3
 8009028:	f7fe fc12 	bl	8007850 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800902c:	4b1d      	ldr	r3, [pc, #116]	@ (80090a4 <xTaskRemoveFromEventList+0xb0>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d11d      	bne.n	8009070 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	3304      	adds	r3, #4
 8009038:	4618      	mov	r0, r3
 800903a:	f7fe fc09 	bl	8007850 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009042:	4b19      	ldr	r3, [pc, #100]	@ (80090a8 <xTaskRemoveFromEventList+0xb4>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	429a      	cmp	r2, r3
 8009048:	d903      	bls.n	8009052 <xTaskRemoveFromEventList+0x5e>
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800904e:	4a16      	ldr	r2, [pc, #88]	@ (80090a8 <xTaskRemoveFromEventList+0xb4>)
 8009050:	6013      	str	r3, [r2, #0]
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009056:	4613      	mov	r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	4413      	add	r3, r2
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	4a13      	ldr	r2, [pc, #76]	@ (80090ac <xTaskRemoveFromEventList+0xb8>)
 8009060:	441a      	add	r2, r3
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	3304      	adds	r3, #4
 8009066:	4619      	mov	r1, r3
 8009068:	4610      	mov	r0, r2
 800906a:	f7fe fb94 	bl	8007796 <vListInsertEnd>
 800906e:	e005      	b.n	800907c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	3318      	adds	r3, #24
 8009074:	4619      	mov	r1, r3
 8009076:	480e      	ldr	r0, [pc, #56]	@ (80090b0 <xTaskRemoveFromEventList+0xbc>)
 8009078:	f7fe fb8d 	bl	8007796 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009080:	4b0c      	ldr	r3, [pc, #48]	@ (80090b4 <xTaskRemoveFromEventList+0xc0>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009086:	429a      	cmp	r2, r3
 8009088:	d905      	bls.n	8009096 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800908a:	2301      	movs	r3, #1
 800908c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800908e:	4b0a      	ldr	r3, [pc, #40]	@ (80090b8 <xTaskRemoveFromEventList+0xc4>)
 8009090:	2201      	movs	r2, #1
 8009092:	601a      	str	r2, [r3, #0]
 8009094:	e001      	b.n	800909a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009096:	2300      	movs	r3, #0
 8009098:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800909a:	697b      	ldr	r3, [r7, #20]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3718      	adds	r7, #24
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	24001494 	.word	0x24001494
 80090a8:	24001474 	.word	0x24001474
 80090ac:	24000f9c 	.word	0x24000f9c
 80090b0:	2400142c 	.word	0x2400142c
 80090b4:	24000f98 	.word	0x24000f98
 80090b8:	24001480 	.word	0x24001480

080090bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80090c4:	4b06      	ldr	r3, [pc, #24]	@ (80090e0 <vTaskInternalSetTimeOutState+0x24>)
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80090cc:	4b05      	ldr	r3, [pc, #20]	@ (80090e4 <vTaskInternalSetTimeOutState+0x28>)
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	605a      	str	r2, [r3, #4]
}
 80090d4:	bf00      	nop
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr
 80090e0:	24001484 	.word	0x24001484
 80090e4:	24001470 	.word	0x24001470

080090e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b088      	sub	sp, #32
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10b      	bne.n	8009110 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80090f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	613b      	str	r3, [r7, #16]
}
 800910a:	bf00      	nop
 800910c:	bf00      	nop
 800910e:	e7fd      	b.n	800910c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10b      	bne.n	800912e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800911a:	f383 8811 	msr	BASEPRI, r3
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	f3bf 8f4f 	dsb	sy
 8009126:	60fb      	str	r3, [r7, #12]
}
 8009128:	bf00      	nop
 800912a:	bf00      	nop
 800912c:	e7fd      	b.n	800912a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800912e:	f000 ffa3 	bl	800a078 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009132:	4b1d      	ldr	r3, [pc, #116]	@ (80091a8 <xTaskCheckForTimeOut+0xc0>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	69ba      	ldr	r2, [r7, #24]
 800913e:	1ad3      	subs	r3, r2, r3
 8009140:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800914a:	d102      	bne.n	8009152 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800914c:	2300      	movs	r3, #0
 800914e:	61fb      	str	r3, [r7, #28]
 8009150:	e023      	b.n	800919a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	4b15      	ldr	r3, [pc, #84]	@ (80091ac <xTaskCheckForTimeOut+0xc4>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	429a      	cmp	r2, r3
 800915c:	d007      	beq.n	800916e <xTaskCheckForTimeOut+0x86>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	69ba      	ldr	r2, [r7, #24]
 8009164:	429a      	cmp	r2, r3
 8009166:	d302      	bcc.n	800916e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009168:	2301      	movs	r3, #1
 800916a:	61fb      	str	r3, [r7, #28]
 800916c:	e015      	b.n	800919a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	697a      	ldr	r2, [r7, #20]
 8009174:	429a      	cmp	r2, r3
 8009176:	d20b      	bcs.n	8009190 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	1ad2      	subs	r2, r2, r3
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f7ff ff99 	bl	80090bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800918a:	2300      	movs	r3, #0
 800918c:	61fb      	str	r3, [r7, #28]
 800918e:	e004      	b.n	800919a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	2200      	movs	r2, #0
 8009194:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009196:	2301      	movs	r3, #1
 8009198:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800919a:	f000 ff9f 	bl	800a0dc <vPortExitCritical>

	return xReturn;
 800919e:	69fb      	ldr	r3, [r7, #28]
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3720      	adds	r7, #32
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	24001470 	.word	0x24001470
 80091ac:	24001484 	.word	0x24001484

080091b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80091b0:	b480      	push	{r7}
 80091b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80091b4:	4b03      	ldr	r3, [pc, #12]	@ (80091c4 <vTaskMissedYield+0x14>)
 80091b6:	2201      	movs	r2, #1
 80091b8:	601a      	str	r2, [r3, #0]
}
 80091ba:	bf00      	nop
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr
 80091c4:	24001480 	.word	0x24001480

080091c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80091d0:	f000 f852 	bl	8009278 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80091d4:	4b06      	ldr	r3, [pc, #24]	@ (80091f0 <prvIdleTask+0x28>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d9f9      	bls.n	80091d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80091dc:	4b05      	ldr	r3, [pc, #20]	@ (80091f4 <prvIdleTask+0x2c>)
 80091de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091e2:	601a      	str	r2, [r3, #0]
 80091e4:	f3bf 8f4f 	dsb	sy
 80091e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80091ec:	e7f0      	b.n	80091d0 <prvIdleTask+0x8>
 80091ee:	bf00      	nop
 80091f0:	24000f9c 	.word	0x24000f9c
 80091f4:	e000ed04 	.word	0xe000ed04

080091f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091fe:	2300      	movs	r3, #0
 8009200:	607b      	str	r3, [r7, #4]
 8009202:	e00c      	b.n	800921e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	4613      	mov	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4413      	add	r3, r2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	4a12      	ldr	r2, [pc, #72]	@ (8009258 <prvInitialiseTaskLists+0x60>)
 8009210:	4413      	add	r3, r2
 8009212:	4618      	mov	r0, r3
 8009214:	f7fe fa92 	bl	800773c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	3301      	adds	r3, #1
 800921c:	607b      	str	r3, [r7, #4]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2b37      	cmp	r3, #55	@ 0x37
 8009222:	d9ef      	bls.n	8009204 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009224:	480d      	ldr	r0, [pc, #52]	@ (800925c <prvInitialiseTaskLists+0x64>)
 8009226:	f7fe fa89 	bl	800773c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800922a:	480d      	ldr	r0, [pc, #52]	@ (8009260 <prvInitialiseTaskLists+0x68>)
 800922c:	f7fe fa86 	bl	800773c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009230:	480c      	ldr	r0, [pc, #48]	@ (8009264 <prvInitialiseTaskLists+0x6c>)
 8009232:	f7fe fa83 	bl	800773c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009236:	480c      	ldr	r0, [pc, #48]	@ (8009268 <prvInitialiseTaskLists+0x70>)
 8009238:	f7fe fa80 	bl	800773c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800923c:	480b      	ldr	r0, [pc, #44]	@ (800926c <prvInitialiseTaskLists+0x74>)
 800923e:	f7fe fa7d 	bl	800773c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009242:	4b0b      	ldr	r3, [pc, #44]	@ (8009270 <prvInitialiseTaskLists+0x78>)
 8009244:	4a05      	ldr	r2, [pc, #20]	@ (800925c <prvInitialiseTaskLists+0x64>)
 8009246:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009248:	4b0a      	ldr	r3, [pc, #40]	@ (8009274 <prvInitialiseTaskLists+0x7c>)
 800924a:	4a05      	ldr	r2, [pc, #20]	@ (8009260 <prvInitialiseTaskLists+0x68>)
 800924c:	601a      	str	r2, [r3, #0]
}
 800924e:	bf00      	nop
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	24000f9c 	.word	0x24000f9c
 800925c:	240013fc 	.word	0x240013fc
 8009260:	24001410 	.word	0x24001410
 8009264:	2400142c 	.word	0x2400142c
 8009268:	24001440 	.word	0x24001440
 800926c:	24001458 	.word	0x24001458
 8009270:	24001424 	.word	0x24001424
 8009274:	24001428 	.word	0x24001428

08009278 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800927e:	e019      	b.n	80092b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009280:	f000 fefa 	bl	800a078 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009284:	4b10      	ldr	r3, [pc, #64]	@ (80092c8 <prvCheckTasksWaitingTermination+0x50>)
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	3304      	adds	r3, #4
 8009290:	4618      	mov	r0, r3
 8009292:	f7fe fadd 	bl	8007850 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009296:	4b0d      	ldr	r3, [pc, #52]	@ (80092cc <prvCheckTasksWaitingTermination+0x54>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	3b01      	subs	r3, #1
 800929c:	4a0b      	ldr	r2, [pc, #44]	@ (80092cc <prvCheckTasksWaitingTermination+0x54>)
 800929e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80092a0:	4b0b      	ldr	r3, [pc, #44]	@ (80092d0 <prvCheckTasksWaitingTermination+0x58>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	3b01      	subs	r3, #1
 80092a6:	4a0a      	ldr	r2, [pc, #40]	@ (80092d0 <prvCheckTasksWaitingTermination+0x58>)
 80092a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80092aa:	f000 ff17 	bl	800a0dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 f810 	bl	80092d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092b4:	4b06      	ldr	r3, [pc, #24]	@ (80092d0 <prvCheckTasksWaitingTermination+0x58>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1e1      	bne.n	8009280 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80092bc:	bf00      	nop
 80092be:	bf00      	nop
 80092c0:	3708      	adds	r7, #8
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	24001440 	.word	0x24001440
 80092cc:	2400146c 	.word	0x2400146c
 80092d0:	24001454 	.word	0x24001454

080092d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	3354      	adds	r3, #84	@ 0x54
 80092e0:	4618      	mov	r0, r3
 80092e2:	f001 f9e1 	bl	800a6a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d108      	bne.n	8009302 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092f4:	4618      	mov	r0, r3
 80092f6:	f001 f8af 	bl	800a458 <vPortFree>
				vPortFree( pxTCB );
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f001 f8ac 	bl	800a458 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009300:	e019      	b.n	8009336 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009308:	2b01      	cmp	r3, #1
 800930a:	d103      	bne.n	8009314 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f001 f8a3 	bl	800a458 <vPortFree>
	}
 8009312:	e010      	b.n	8009336 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800931a:	2b02      	cmp	r3, #2
 800931c:	d00b      	beq.n	8009336 <prvDeleteTCB+0x62>
	__asm volatile
 800931e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009322:	f383 8811 	msr	BASEPRI, r3
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	60fb      	str	r3, [r7, #12]
}
 8009330:	bf00      	nop
 8009332:	bf00      	nop
 8009334:	e7fd      	b.n	8009332 <prvDeleteTCB+0x5e>
	}
 8009336:	bf00      	nop
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
	...

08009340 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009346:	4b0c      	ldr	r3, [pc, #48]	@ (8009378 <prvResetNextTaskUnblockTime+0x38>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d104      	bne.n	800935a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009350:	4b0a      	ldr	r3, [pc, #40]	@ (800937c <prvResetNextTaskUnblockTime+0x3c>)
 8009352:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009356:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009358:	e008      	b.n	800936c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800935a:	4b07      	ldr	r3, [pc, #28]	@ (8009378 <prvResetNextTaskUnblockTime+0x38>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	4a04      	ldr	r2, [pc, #16]	@ (800937c <prvResetNextTaskUnblockTime+0x3c>)
 800936a:	6013      	str	r3, [r2, #0]
}
 800936c:	bf00      	nop
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr
 8009378:	24001424 	.word	0x24001424
 800937c:	2400148c 	.word	0x2400148c

08009380 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009386:	4b05      	ldr	r3, [pc, #20]	@ (800939c <xTaskGetCurrentTaskHandle+0x1c>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800938c:	687b      	ldr	r3, [r7, #4]
	}
 800938e:	4618      	mov	r0, r3
 8009390:	370c      	adds	r7, #12
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	24000f98 	.word	0x24000f98

080093a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80093a6:	4b0b      	ldr	r3, [pc, #44]	@ (80093d4 <xTaskGetSchedulerState+0x34>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d102      	bne.n	80093b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80093ae:	2301      	movs	r3, #1
 80093b0:	607b      	str	r3, [r7, #4]
 80093b2:	e008      	b.n	80093c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093b4:	4b08      	ldr	r3, [pc, #32]	@ (80093d8 <xTaskGetSchedulerState+0x38>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d102      	bne.n	80093c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80093bc:	2302      	movs	r3, #2
 80093be:	607b      	str	r3, [r7, #4]
 80093c0:	e001      	b.n	80093c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80093c2:	2300      	movs	r3, #0
 80093c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80093c6:	687b      	ldr	r3, [r7, #4]
	}
 80093c8:	4618      	mov	r0, r3
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr
 80093d4:	24001478 	.word	0x24001478
 80093d8:	24001494 	.word	0x24001494

080093dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80093e8:	2300      	movs	r3, #0
 80093ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d051      	beq.n	8009496 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093f6:	4b2a      	ldr	r3, [pc, #168]	@ (80094a0 <xTaskPriorityInherit+0xc4>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d241      	bcs.n	8009484 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	699b      	ldr	r3, [r3, #24]
 8009404:	2b00      	cmp	r3, #0
 8009406:	db06      	blt.n	8009416 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009408:	4b25      	ldr	r3, [pc, #148]	@ (80094a0 <xTaskPriorityInherit+0xc4>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800940e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	6959      	ldr	r1, [r3, #20]
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800941e:	4613      	mov	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4413      	add	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4a1f      	ldr	r2, [pc, #124]	@ (80094a4 <xTaskPriorityInherit+0xc8>)
 8009428:	4413      	add	r3, r2
 800942a:	4299      	cmp	r1, r3
 800942c:	d122      	bne.n	8009474 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	3304      	adds	r3, #4
 8009432:	4618      	mov	r0, r3
 8009434:	f7fe fa0c 	bl	8007850 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009438:	4b19      	ldr	r3, [pc, #100]	@ (80094a0 <xTaskPriorityInherit+0xc4>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009446:	4b18      	ldr	r3, [pc, #96]	@ (80094a8 <xTaskPriorityInherit+0xcc>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	429a      	cmp	r2, r3
 800944c:	d903      	bls.n	8009456 <xTaskPriorityInherit+0x7a>
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009452:	4a15      	ldr	r2, [pc, #84]	@ (80094a8 <xTaskPriorityInherit+0xcc>)
 8009454:	6013      	str	r3, [r2, #0]
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800945a:	4613      	mov	r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4413      	add	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	4a10      	ldr	r2, [pc, #64]	@ (80094a4 <xTaskPriorityInherit+0xc8>)
 8009464:	441a      	add	r2, r3
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	3304      	adds	r3, #4
 800946a:	4619      	mov	r1, r3
 800946c:	4610      	mov	r0, r2
 800946e:	f7fe f992 	bl	8007796 <vListInsertEnd>
 8009472:	e004      	b.n	800947e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009474:	4b0a      	ldr	r3, [pc, #40]	@ (80094a0 <xTaskPriorityInherit+0xc4>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800947e:	2301      	movs	r3, #1
 8009480:	60fb      	str	r3, [r7, #12]
 8009482:	e008      	b.n	8009496 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009488:	4b05      	ldr	r3, [pc, #20]	@ (80094a0 <xTaskPriorityInherit+0xc4>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800948e:	429a      	cmp	r2, r3
 8009490:	d201      	bcs.n	8009496 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009492:	2301      	movs	r3, #1
 8009494:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009496:	68fb      	ldr	r3, [r7, #12]
	}
 8009498:	4618      	mov	r0, r3
 800949a:	3710      	adds	r7, #16
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	24000f98 	.word	0x24000f98
 80094a4:	24000f9c 	.word	0x24000f9c
 80094a8:	24001474 	.word	0x24001474

080094ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b086      	sub	sp, #24
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80094b8:	2300      	movs	r3, #0
 80094ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d058      	beq.n	8009574 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80094c2:	4b2f      	ldr	r3, [pc, #188]	@ (8009580 <xTaskPriorityDisinherit+0xd4>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	693a      	ldr	r2, [r7, #16]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d00b      	beq.n	80094e4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80094cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d0:	f383 8811 	msr	BASEPRI, r3
 80094d4:	f3bf 8f6f 	isb	sy
 80094d8:	f3bf 8f4f 	dsb	sy
 80094dc:	60fb      	str	r3, [r7, #12]
}
 80094de:	bf00      	nop
 80094e0:	bf00      	nop
 80094e2:	e7fd      	b.n	80094e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10b      	bne.n	8009504 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80094ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f0:	f383 8811 	msr	BASEPRI, r3
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	f3bf 8f4f 	dsb	sy
 80094fc:	60bb      	str	r3, [r7, #8]
}
 80094fe:	bf00      	nop
 8009500:	bf00      	nop
 8009502:	e7fd      	b.n	8009500 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009508:	1e5a      	subs	r2, r3, #1
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009516:	429a      	cmp	r2, r3
 8009518:	d02c      	beq.n	8009574 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800951e:	2b00      	cmp	r3, #0
 8009520:	d128      	bne.n	8009574 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	3304      	adds	r3, #4
 8009526:	4618      	mov	r0, r3
 8009528:	f7fe f992 	bl	8007850 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009538:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009544:	4b0f      	ldr	r3, [pc, #60]	@ (8009584 <xTaskPriorityDisinherit+0xd8>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	429a      	cmp	r2, r3
 800954a:	d903      	bls.n	8009554 <xTaskPriorityDisinherit+0xa8>
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009550:	4a0c      	ldr	r2, [pc, #48]	@ (8009584 <xTaskPriorityDisinherit+0xd8>)
 8009552:	6013      	str	r3, [r2, #0]
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009558:	4613      	mov	r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	4413      	add	r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4a09      	ldr	r2, [pc, #36]	@ (8009588 <xTaskPriorityDisinherit+0xdc>)
 8009562:	441a      	add	r2, r3
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	3304      	adds	r3, #4
 8009568:	4619      	mov	r1, r3
 800956a:	4610      	mov	r0, r2
 800956c:	f7fe f913 	bl	8007796 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009570:	2301      	movs	r3, #1
 8009572:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009574:	697b      	ldr	r3, [r7, #20]
	}
 8009576:	4618      	mov	r0, r3
 8009578:	3718      	adds	r7, #24
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	24000f98 	.word	0x24000f98
 8009584:	24001474 	.word	0x24001474
 8009588:	24000f9c 	.word	0x24000f9c

0800958c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800958c:	b580      	push	{r7, lr}
 800958e:	b088      	sub	sp, #32
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800959a:	2301      	movs	r3, #1
 800959c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d06c      	beq.n	800967e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10b      	bne.n	80095c4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80095ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b0:	f383 8811 	msr	BASEPRI, r3
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	60fb      	str	r3, [r7, #12]
}
 80095be:	bf00      	nop
 80095c0:	bf00      	nop
 80095c2:	e7fd      	b.n	80095c0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095c8:	683a      	ldr	r2, [r7, #0]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d902      	bls.n	80095d4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	61fb      	str	r3, [r7, #28]
 80095d2:	e002      	b.n	80095da <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095d8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095de:	69fa      	ldr	r2, [r7, #28]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d04c      	beq.n	800967e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80095e4:	69bb      	ldr	r3, [r7, #24]
 80095e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095e8:	697a      	ldr	r2, [r7, #20]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d147      	bne.n	800967e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80095ee:	4b26      	ldr	r3, [pc, #152]	@ (8009688 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	69ba      	ldr	r2, [r7, #24]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d10b      	bne.n	8009610 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80095f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095fc:	f383 8811 	msr	BASEPRI, r3
 8009600:	f3bf 8f6f 	isb	sy
 8009604:	f3bf 8f4f 	dsb	sy
 8009608:	60bb      	str	r3, [r7, #8]
}
 800960a:	bf00      	nop
 800960c:	bf00      	nop
 800960e:	e7fd      	b.n	800960c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009614:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	69fa      	ldr	r2, [r7, #28]
 800961a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	699b      	ldr	r3, [r3, #24]
 8009620:	2b00      	cmp	r3, #0
 8009622:	db04      	blt.n	800962e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	6959      	ldr	r1, [r3, #20]
 8009632:	693a      	ldr	r2, [r7, #16]
 8009634:	4613      	mov	r3, r2
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	4413      	add	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4a13      	ldr	r2, [pc, #76]	@ (800968c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800963e:	4413      	add	r3, r2
 8009640:	4299      	cmp	r1, r3
 8009642:	d11c      	bne.n	800967e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	3304      	adds	r3, #4
 8009648:	4618      	mov	r0, r3
 800964a:	f7fe f901 	bl	8007850 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009652:	4b0f      	ldr	r3, [pc, #60]	@ (8009690 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	429a      	cmp	r2, r3
 8009658:	d903      	bls.n	8009662 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800965e:	4a0c      	ldr	r2, [pc, #48]	@ (8009690 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009660:	6013      	str	r3, [r2, #0]
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009666:	4613      	mov	r3, r2
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	4413      	add	r3, r2
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	4a07      	ldr	r2, [pc, #28]	@ (800968c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009670:	441a      	add	r2, r3
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	3304      	adds	r3, #4
 8009676:	4619      	mov	r1, r3
 8009678:	4610      	mov	r0, r2
 800967a:	f7fe f88c 	bl	8007796 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800967e:	bf00      	nop
 8009680:	3720      	adds	r7, #32
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	24000f98 	.word	0x24000f98
 800968c:	24000f9c 	.word	0x24000f9c
 8009690:	24001474 	.word	0x24001474

08009694 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009694:	b480      	push	{r7}
 8009696:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009698:	4b07      	ldr	r3, [pc, #28]	@ (80096b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d004      	beq.n	80096aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80096a0:	4b05      	ldr	r3, [pc, #20]	@ (80096b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80096a6:	3201      	adds	r2, #1
 80096a8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80096aa:	4b03      	ldr	r3, [pc, #12]	@ (80096b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80096ac:	681b      	ldr	r3, [r3, #0]
	}
 80096ae:	4618      	mov	r0, r3
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr
 80096b8:	24000f98 	.word	0x24000f98

080096bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80096c6:	4b21      	ldr	r3, [pc, #132]	@ (800974c <prvAddCurrentTaskToDelayedList+0x90>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096cc:	4b20      	ldr	r3, [pc, #128]	@ (8009750 <prvAddCurrentTaskToDelayedList+0x94>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	3304      	adds	r3, #4
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7fe f8bc 	bl	8007850 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096de:	d10a      	bne.n	80096f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d007      	beq.n	80096f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096e6:	4b1a      	ldr	r3, [pc, #104]	@ (8009750 <prvAddCurrentTaskToDelayedList+0x94>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	3304      	adds	r3, #4
 80096ec:	4619      	mov	r1, r3
 80096ee:	4819      	ldr	r0, [pc, #100]	@ (8009754 <prvAddCurrentTaskToDelayedList+0x98>)
 80096f0:	f7fe f851 	bl	8007796 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80096f4:	e026      	b.n	8009744 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4413      	add	r3, r2
 80096fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80096fe:	4b14      	ldr	r3, [pc, #80]	@ (8009750 <prvAddCurrentTaskToDelayedList+0x94>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	68ba      	ldr	r2, [r7, #8]
 8009704:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009706:	68ba      	ldr	r2, [r7, #8]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	429a      	cmp	r2, r3
 800970c:	d209      	bcs.n	8009722 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800970e:	4b12      	ldr	r3, [pc, #72]	@ (8009758 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	4b0f      	ldr	r3, [pc, #60]	@ (8009750 <prvAddCurrentTaskToDelayedList+0x94>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	3304      	adds	r3, #4
 8009718:	4619      	mov	r1, r3
 800971a:	4610      	mov	r0, r2
 800971c:	f7fe f85f 	bl	80077de <vListInsert>
}
 8009720:	e010      	b.n	8009744 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009722:	4b0e      	ldr	r3, [pc, #56]	@ (800975c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	4b0a      	ldr	r3, [pc, #40]	@ (8009750 <prvAddCurrentTaskToDelayedList+0x94>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	3304      	adds	r3, #4
 800972c:	4619      	mov	r1, r3
 800972e:	4610      	mov	r0, r2
 8009730:	f7fe f855 	bl	80077de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009734:	4b0a      	ldr	r3, [pc, #40]	@ (8009760 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68ba      	ldr	r2, [r7, #8]
 800973a:	429a      	cmp	r2, r3
 800973c:	d202      	bcs.n	8009744 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800973e:	4a08      	ldr	r2, [pc, #32]	@ (8009760 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	6013      	str	r3, [r2, #0]
}
 8009744:	bf00      	nop
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	24001470 	.word	0x24001470
 8009750:	24000f98 	.word	0x24000f98
 8009754:	24001458 	.word	0x24001458
 8009758:	24001428 	.word	0x24001428
 800975c:	24001424 	.word	0x24001424
 8009760:	2400148c 	.word	0x2400148c

08009764 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b08a      	sub	sp, #40	@ 0x28
 8009768:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800976a:	2300      	movs	r3, #0
 800976c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800976e:	f000 fb13 	bl	8009d98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009772:	4b1d      	ldr	r3, [pc, #116]	@ (80097e8 <xTimerCreateTimerTask+0x84>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d021      	beq.n	80097be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800977a:	2300      	movs	r3, #0
 800977c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800977e:	2300      	movs	r3, #0
 8009780:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009782:	1d3a      	adds	r2, r7, #4
 8009784:	f107 0108 	add.w	r1, r7, #8
 8009788:	f107 030c 	add.w	r3, r7, #12
 800978c:	4618      	mov	r0, r3
 800978e:	f7fd ffbb 	bl	8007708 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009792:	6879      	ldr	r1, [r7, #4]
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	9202      	str	r2, [sp, #8]
 800979a:	9301      	str	r3, [sp, #4]
 800979c:	2302      	movs	r3, #2
 800979e:	9300      	str	r3, [sp, #0]
 80097a0:	2300      	movs	r3, #0
 80097a2:	460a      	mov	r2, r1
 80097a4:	4911      	ldr	r1, [pc, #68]	@ (80097ec <xTimerCreateTimerTask+0x88>)
 80097a6:	4812      	ldr	r0, [pc, #72]	@ (80097f0 <xTimerCreateTimerTask+0x8c>)
 80097a8:	f7fe ff92 	bl	80086d0 <xTaskCreateStatic>
 80097ac:	4603      	mov	r3, r0
 80097ae:	4a11      	ldr	r2, [pc, #68]	@ (80097f4 <xTimerCreateTimerTask+0x90>)
 80097b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80097b2:	4b10      	ldr	r3, [pc, #64]	@ (80097f4 <xTimerCreateTimerTask+0x90>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80097ba:	2301      	movs	r3, #1
 80097bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d10b      	bne.n	80097dc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80097c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c8:	f383 8811 	msr	BASEPRI, r3
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f3bf 8f4f 	dsb	sy
 80097d4:	613b      	str	r3, [r7, #16]
}
 80097d6:	bf00      	nop
 80097d8:	bf00      	nop
 80097da:	e7fd      	b.n	80097d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80097dc:	697b      	ldr	r3, [r7, #20]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3718      	adds	r7, #24
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	240014c8 	.word	0x240014c8
 80097ec:	0800a8e4 	.word	0x0800a8e4
 80097f0:	08009931 	.word	0x08009931
 80097f4:	240014cc 	.word	0x240014cc

080097f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b08a      	sub	sp, #40	@ 0x28
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	607a      	str	r2, [r7, #4]
 8009804:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009806:	2300      	movs	r3, #0
 8009808:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10b      	bne.n	8009828 <xTimerGenericCommand+0x30>
	__asm volatile
 8009810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	623b      	str	r3, [r7, #32]
}
 8009822:	bf00      	nop
 8009824:	bf00      	nop
 8009826:	e7fd      	b.n	8009824 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009828:	4b19      	ldr	r3, [pc, #100]	@ (8009890 <xTimerGenericCommand+0x98>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d02a      	beq.n	8009886 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	2b05      	cmp	r3, #5
 8009840:	dc18      	bgt.n	8009874 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009842:	f7ff fdad 	bl	80093a0 <xTaskGetSchedulerState>
 8009846:	4603      	mov	r3, r0
 8009848:	2b02      	cmp	r3, #2
 800984a:	d109      	bne.n	8009860 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800984c:	4b10      	ldr	r3, [pc, #64]	@ (8009890 <xTimerGenericCommand+0x98>)
 800984e:	6818      	ldr	r0, [r3, #0]
 8009850:	f107 0110 	add.w	r1, r7, #16
 8009854:	2300      	movs	r3, #0
 8009856:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009858:	f7fe fa22 	bl	8007ca0 <xQueueGenericSend>
 800985c:	6278      	str	r0, [r7, #36]	@ 0x24
 800985e:	e012      	b.n	8009886 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009860:	4b0b      	ldr	r3, [pc, #44]	@ (8009890 <xTimerGenericCommand+0x98>)
 8009862:	6818      	ldr	r0, [r3, #0]
 8009864:	f107 0110 	add.w	r1, r7, #16
 8009868:	2300      	movs	r3, #0
 800986a:	2200      	movs	r2, #0
 800986c:	f7fe fa18 	bl	8007ca0 <xQueueGenericSend>
 8009870:	6278      	str	r0, [r7, #36]	@ 0x24
 8009872:	e008      	b.n	8009886 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009874:	4b06      	ldr	r3, [pc, #24]	@ (8009890 <xTimerGenericCommand+0x98>)
 8009876:	6818      	ldr	r0, [r3, #0]
 8009878:	f107 0110 	add.w	r1, r7, #16
 800987c:	2300      	movs	r3, #0
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	f7fe fb10 	bl	8007ea4 <xQueueGenericSendFromISR>
 8009884:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009888:	4618      	mov	r0, r3
 800988a:	3728      	adds	r7, #40	@ 0x28
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	240014c8 	.word	0x240014c8

08009894 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b088      	sub	sp, #32
 8009898:	af02      	add	r7, sp, #8
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800989e:	4b23      	ldr	r3, [pc, #140]	@ (800992c <prvProcessExpiredTimer+0x98>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	3304      	adds	r3, #4
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7fd ffcf 	bl	8007850 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098b8:	f003 0304 	and.w	r3, r3, #4
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d023      	beq.n	8009908 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	699a      	ldr	r2, [r3, #24]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	18d1      	adds	r1, r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	683a      	ldr	r2, [r7, #0]
 80098cc:	6978      	ldr	r0, [r7, #20]
 80098ce:	f000 f8d5 	bl	8009a7c <prvInsertTimerInActiveList>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d020      	beq.n	800991a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80098d8:	2300      	movs	r3, #0
 80098da:	9300      	str	r3, [sp, #0]
 80098dc:	2300      	movs	r3, #0
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	2100      	movs	r1, #0
 80098e2:	6978      	ldr	r0, [r7, #20]
 80098e4:	f7ff ff88 	bl	80097f8 <xTimerGenericCommand>
 80098e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d114      	bne.n	800991a <prvProcessExpiredTimer+0x86>
	__asm volatile
 80098f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	60fb      	str	r3, [r7, #12]
}
 8009902:	bf00      	nop
 8009904:	bf00      	nop
 8009906:	e7fd      	b.n	8009904 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800990e:	f023 0301 	bic.w	r3, r3, #1
 8009912:	b2da      	uxtb	r2, r3
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	6a1b      	ldr	r3, [r3, #32]
 800991e:	6978      	ldr	r0, [r7, #20]
 8009920:	4798      	blx	r3
}
 8009922:	bf00      	nop
 8009924:	3718      	adds	r7, #24
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	240014c0 	.word	0x240014c0

08009930 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009938:	f107 0308 	add.w	r3, r7, #8
 800993c:	4618      	mov	r0, r3
 800993e:	f000 f859 	bl	80099f4 <prvGetNextExpireTime>
 8009942:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	4619      	mov	r1, r3
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f000 f805 	bl	8009958 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800994e:	f000 f8d7 	bl	8009b00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009952:	bf00      	nop
 8009954:	e7f0      	b.n	8009938 <prvTimerTask+0x8>
	...

08009958 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009962:	f7ff f919 	bl	8008b98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009966:	f107 0308 	add.w	r3, r7, #8
 800996a:	4618      	mov	r0, r3
 800996c:	f000 f866 	bl	8009a3c <prvSampleTimeNow>
 8009970:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d130      	bne.n	80099da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10a      	bne.n	8009994 <prvProcessTimerOrBlockTask+0x3c>
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	429a      	cmp	r2, r3
 8009984:	d806      	bhi.n	8009994 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009986:	f7ff f915 	bl	8008bb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800998a:	68f9      	ldr	r1, [r7, #12]
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f7ff ff81 	bl	8009894 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009992:	e024      	b.n	80099de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d008      	beq.n	80099ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800999a:	4b13      	ldr	r3, [pc, #76]	@ (80099e8 <prvProcessTimerOrBlockTask+0x90>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d101      	bne.n	80099a8 <prvProcessTimerOrBlockTask+0x50>
 80099a4:	2301      	movs	r3, #1
 80099a6:	e000      	b.n	80099aa <prvProcessTimerOrBlockTask+0x52>
 80099a8:	2300      	movs	r3, #0
 80099aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80099ac:	4b0f      	ldr	r3, [pc, #60]	@ (80099ec <prvProcessTimerOrBlockTask+0x94>)
 80099ae:	6818      	ldr	r0, [r3, #0]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	4619      	mov	r1, r3
 80099ba:	f7fe fe55 	bl	8008668 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80099be:	f7ff f8f9 	bl	8008bb4 <xTaskResumeAll>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10a      	bne.n	80099de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80099c8:	4b09      	ldr	r3, [pc, #36]	@ (80099f0 <prvProcessTimerOrBlockTask+0x98>)
 80099ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099ce:	601a      	str	r2, [r3, #0]
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	f3bf 8f6f 	isb	sy
}
 80099d8:	e001      	b.n	80099de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80099da:	f7ff f8eb 	bl	8008bb4 <xTaskResumeAll>
}
 80099de:	bf00      	nop
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	240014c4 	.word	0x240014c4
 80099ec:	240014c8 	.word	0x240014c8
 80099f0:	e000ed04 	.word	0xe000ed04

080099f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80099fc:	4b0e      	ldr	r3, [pc, #56]	@ (8009a38 <prvGetNextExpireTime+0x44>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <prvGetNextExpireTime+0x16>
 8009a06:	2201      	movs	r2, #1
 8009a08:	e000      	b.n	8009a0c <prvGetNextExpireTime+0x18>
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d105      	bne.n	8009a24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a18:	4b07      	ldr	r3, [pc, #28]	@ (8009a38 <prvGetNextExpireTime+0x44>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	60fb      	str	r3, [r7, #12]
 8009a22:	e001      	b.n	8009a28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009a24:	2300      	movs	r3, #0
 8009a26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009a28:	68fb      	ldr	r3, [r7, #12]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3714      	adds	r7, #20
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	240014c0 	.word	0x240014c0

08009a3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009a44:	f7ff f954 	bl	8008cf0 <xTaskGetTickCount>
 8009a48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8009a78 <prvSampleTimeNow+0x3c>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d205      	bcs.n	8009a60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009a54:	f000 f93a 	bl	8009ccc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	601a      	str	r2, [r3, #0]
 8009a5e:	e002      	b.n	8009a66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009a66:	4a04      	ldr	r2, [pc, #16]	@ (8009a78 <prvSampleTimeNow+0x3c>)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	240014d0 	.word	0x240014d0

08009a7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b086      	sub	sp, #24
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
 8009a88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	68ba      	ldr	r2, [r7, #8]
 8009a92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	68fa      	ldr	r2, [r7, #12]
 8009a98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009a9a:	68ba      	ldr	r2, [r7, #8]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d812      	bhi.n	8009ac8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	1ad2      	subs	r2, r2, r3
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	699b      	ldr	r3, [r3, #24]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d302      	bcc.n	8009ab6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	617b      	str	r3, [r7, #20]
 8009ab4:	e01b      	b.n	8009aee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009ab6:	4b10      	ldr	r3, [pc, #64]	@ (8009af8 <prvInsertTimerInActiveList+0x7c>)
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	3304      	adds	r3, #4
 8009abe:	4619      	mov	r1, r3
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	f7fd fe8c 	bl	80077de <vListInsert>
 8009ac6:	e012      	b.n	8009aee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d206      	bcs.n	8009ade <prvInsertTimerInActiveList+0x62>
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d302      	bcc.n	8009ade <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	617b      	str	r3, [r7, #20]
 8009adc:	e007      	b.n	8009aee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ade:	4b07      	ldr	r3, [pc, #28]	@ (8009afc <prvInsertTimerInActiveList+0x80>)
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	3304      	adds	r3, #4
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	4610      	mov	r0, r2
 8009aea:	f7fd fe78 	bl	80077de <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009aee:	697b      	ldr	r3, [r7, #20]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3718      	adds	r7, #24
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	240014c4 	.word	0x240014c4
 8009afc:	240014c0 	.word	0x240014c0

08009b00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b08e      	sub	sp, #56	@ 0x38
 8009b04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b06:	e0ce      	b.n	8009ca6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	da19      	bge.n	8009b42 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009b0e:	1d3b      	adds	r3, r7, #4
 8009b10:	3304      	adds	r3, #4
 8009b12:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d10b      	bne.n	8009b32 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b1e:	f383 8811 	msr	BASEPRI, r3
 8009b22:	f3bf 8f6f 	isb	sy
 8009b26:	f3bf 8f4f 	dsb	sy
 8009b2a:	61fb      	str	r3, [r7, #28]
}
 8009b2c:	bf00      	nop
 8009b2e:	bf00      	nop
 8009b30:	e7fd      	b.n	8009b2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b38:	6850      	ldr	r0, [r2, #4]
 8009b3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b3c:	6892      	ldr	r2, [r2, #8]
 8009b3e:	4611      	mov	r1, r2
 8009b40:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f2c0 80ae 	blt.w	8009ca6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b50:	695b      	ldr	r3, [r3, #20]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d004      	beq.n	8009b60 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b58:	3304      	adds	r3, #4
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fd fe78 	bl	8007850 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b60:	463b      	mov	r3, r7
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7ff ff6a 	bl	8009a3c <prvSampleTimeNow>
 8009b68:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2b09      	cmp	r3, #9
 8009b6e:	f200 8097 	bhi.w	8009ca0 <prvProcessReceivedCommands+0x1a0>
 8009b72:	a201      	add	r2, pc, #4	@ (adr r2, 8009b78 <prvProcessReceivedCommands+0x78>)
 8009b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b78:	08009ba1 	.word	0x08009ba1
 8009b7c:	08009ba1 	.word	0x08009ba1
 8009b80:	08009ba1 	.word	0x08009ba1
 8009b84:	08009c17 	.word	0x08009c17
 8009b88:	08009c2b 	.word	0x08009c2b
 8009b8c:	08009c77 	.word	0x08009c77
 8009b90:	08009ba1 	.word	0x08009ba1
 8009b94:	08009ba1 	.word	0x08009ba1
 8009b98:	08009c17 	.word	0x08009c17
 8009b9c:	08009c2b 	.word	0x08009c2b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ba6:	f043 0301 	orr.w	r3, r3, #1
 8009baa:	b2da      	uxtb	r2, r3
 8009bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb6:	699b      	ldr	r3, [r3, #24]
 8009bb8:	18d1      	adds	r1, r2, r3
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bc0:	f7ff ff5c 	bl	8009a7c <prvInsertTimerInActiveList>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d06c      	beq.n	8009ca4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bcc:	6a1b      	ldr	r3, [r3, #32]
 8009bce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bd0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bd8:	f003 0304 	and.w	r3, r3, #4
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d061      	beq.n	8009ca4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009be0:	68ba      	ldr	r2, [r7, #8]
 8009be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be4:	699b      	ldr	r3, [r3, #24]
 8009be6:	441a      	add	r2, r3
 8009be8:	2300      	movs	r3, #0
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	2300      	movs	r3, #0
 8009bee:	2100      	movs	r1, #0
 8009bf0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bf2:	f7ff fe01 	bl	80097f8 <xTimerGenericCommand>
 8009bf6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009bf8:	6a3b      	ldr	r3, [r7, #32]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d152      	bne.n	8009ca4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	61bb      	str	r3, [r7, #24]
}
 8009c10:	bf00      	nop
 8009c12:	bf00      	nop
 8009c14:	e7fd      	b.n	8009c12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c1c:	f023 0301 	bic.w	r3, r3, #1
 8009c20:	b2da      	uxtb	r2, r3
 8009c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009c28:	e03d      	b.n	8009ca6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c30:	f043 0301 	orr.w	r3, r3, #1
 8009c34:	b2da      	uxtb	r2, r3
 8009c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c3c:	68ba      	ldr	r2, [r7, #8]
 8009c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c40:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c44:	699b      	ldr	r3, [r3, #24]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d10b      	bne.n	8009c62 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c4e:	f383 8811 	msr	BASEPRI, r3
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	f3bf 8f4f 	dsb	sy
 8009c5a:	617b      	str	r3, [r7, #20]
}
 8009c5c:	bf00      	nop
 8009c5e:	bf00      	nop
 8009c60:	e7fd      	b.n	8009c5e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c64:	699a      	ldr	r2, [r3, #24]
 8009c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c68:	18d1      	adds	r1, r2, r3
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c70:	f7ff ff04 	bl	8009a7c <prvInsertTimerInActiveList>
					break;
 8009c74:	e017      	b.n	8009ca6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c7c:	f003 0302 	and.w	r3, r3, #2
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d103      	bne.n	8009c8c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009c84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c86:	f000 fbe7 	bl	800a458 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009c8a:	e00c      	b.n	8009ca6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c92:	f023 0301 	bic.w	r3, r3, #1
 8009c96:	b2da      	uxtb	r2, r3
 8009c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009c9e:	e002      	b.n	8009ca6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009ca0:	bf00      	nop
 8009ca2:	e000      	b.n	8009ca6 <prvProcessReceivedCommands+0x1a6>
					break;
 8009ca4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ca6:	4b08      	ldr	r3, [pc, #32]	@ (8009cc8 <prvProcessReceivedCommands+0x1c8>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	1d39      	adds	r1, r7, #4
 8009cac:	2200      	movs	r2, #0
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7fe f996 	bl	8007fe0 <xQueueReceive>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f47f af26 	bne.w	8009b08 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009cbc:	bf00      	nop
 8009cbe:	bf00      	nop
 8009cc0:	3730      	adds	r7, #48	@ 0x30
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	240014c8 	.word	0x240014c8

08009ccc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b088      	sub	sp, #32
 8009cd0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009cd2:	e049      	b.n	8009d68 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009cd4:	4b2e      	ldr	r3, [pc, #184]	@ (8009d90 <prvSwitchTimerLists+0xc4>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cde:	4b2c      	ldr	r3, [pc, #176]	@ (8009d90 <prvSwitchTimerLists+0xc4>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	3304      	adds	r3, #4
 8009cec:	4618      	mov	r0, r3
 8009cee:	f7fd fdaf 	bl	8007850 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6a1b      	ldr	r3, [r3, #32]
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d00:	f003 0304 	and.w	r3, r3, #4
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d02f      	beq.n	8009d68 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	699b      	ldr	r3, [r3, #24]
 8009d0c:	693a      	ldr	r2, [r7, #16]
 8009d0e:	4413      	add	r3, r2
 8009d10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009d12:	68ba      	ldr	r2, [r7, #8]
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d90e      	bls.n	8009d38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d26:	4b1a      	ldr	r3, [pc, #104]	@ (8009d90 <prvSwitchTimerLists+0xc4>)
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	3304      	adds	r3, #4
 8009d2e:	4619      	mov	r1, r3
 8009d30:	4610      	mov	r0, r2
 8009d32:	f7fd fd54 	bl	80077de <vListInsert>
 8009d36:	e017      	b.n	8009d68 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d38:	2300      	movs	r3, #0
 8009d3a:	9300      	str	r3, [sp, #0]
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	693a      	ldr	r2, [r7, #16]
 8009d40:	2100      	movs	r1, #0
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f7ff fd58 	bl	80097f8 <xTimerGenericCommand>
 8009d48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d10b      	bne.n	8009d68 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	603b      	str	r3, [r7, #0]
}
 8009d62:	bf00      	nop
 8009d64:	bf00      	nop
 8009d66:	e7fd      	b.n	8009d64 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d68:	4b09      	ldr	r3, [pc, #36]	@ (8009d90 <prvSwitchTimerLists+0xc4>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1b0      	bne.n	8009cd4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009d72:	4b07      	ldr	r3, [pc, #28]	@ (8009d90 <prvSwitchTimerLists+0xc4>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009d78:	4b06      	ldr	r3, [pc, #24]	@ (8009d94 <prvSwitchTimerLists+0xc8>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a04      	ldr	r2, [pc, #16]	@ (8009d90 <prvSwitchTimerLists+0xc4>)
 8009d7e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009d80:	4a04      	ldr	r2, [pc, #16]	@ (8009d94 <prvSwitchTimerLists+0xc8>)
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	6013      	str	r3, [r2, #0]
}
 8009d86:	bf00      	nop
 8009d88:	3718      	adds	r7, #24
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	240014c0 	.word	0x240014c0
 8009d94:	240014c4 	.word	0x240014c4

08009d98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009d9e:	f000 f96b 	bl	800a078 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009da2:	4b15      	ldr	r3, [pc, #84]	@ (8009df8 <prvCheckForValidListAndQueue+0x60>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d120      	bne.n	8009dec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009daa:	4814      	ldr	r0, [pc, #80]	@ (8009dfc <prvCheckForValidListAndQueue+0x64>)
 8009dac:	f7fd fcc6 	bl	800773c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009db0:	4813      	ldr	r0, [pc, #76]	@ (8009e00 <prvCheckForValidListAndQueue+0x68>)
 8009db2:	f7fd fcc3 	bl	800773c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009db6:	4b13      	ldr	r3, [pc, #76]	@ (8009e04 <prvCheckForValidListAndQueue+0x6c>)
 8009db8:	4a10      	ldr	r2, [pc, #64]	@ (8009dfc <prvCheckForValidListAndQueue+0x64>)
 8009dba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009dbc:	4b12      	ldr	r3, [pc, #72]	@ (8009e08 <prvCheckForValidListAndQueue+0x70>)
 8009dbe:	4a10      	ldr	r2, [pc, #64]	@ (8009e00 <prvCheckForValidListAndQueue+0x68>)
 8009dc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	4b11      	ldr	r3, [pc, #68]	@ (8009e0c <prvCheckForValidListAndQueue+0x74>)
 8009dc8:	4a11      	ldr	r2, [pc, #68]	@ (8009e10 <prvCheckForValidListAndQueue+0x78>)
 8009dca:	2110      	movs	r1, #16
 8009dcc:	200a      	movs	r0, #10
 8009dce:	f7fd fdd3 	bl	8007978 <xQueueGenericCreateStatic>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	4a08      	ldr	r2, [pc, #32]	@ (8009df8 <prvCheckForValidListAndQueue+0x60>)
 8009dd6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009dd8:	4b07      	ldr	r3, [pc, #28]	@ (8009df8 <prvCheckForValidListAndQueue+0x60>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d005      	beq.n	8009dec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009de0:	4b05      	ldr	r3, [pc, #20]	@ (8009df8 <prvCheckForValidListAndQueue+0x60>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	490b      	ldr	r1, [pc, #44]	@ (8009e14 <prvCheckForValidListAndQueue+0x7c>)
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7fe fc14 	bl	8008614 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009dec:	f000 f976 	bl	800a0dc <vPortExitCritical>
}
 8009df0:	bf00      	nop
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	240014c8 	.word	0x240014c8
 8009dfc:	24001498 	.word	0x24001498
 8009e00:	240014ac 	.word	0x240014ac
 8009e04:	240014c0 	.word	0x240014c0
 8009e08:	240014c4 	.word	0x240014c4
 8009e0c:	24001574 	.word	0x24001574
 8009e10:	240014d4 	.word	0x240014d4
 8009e14:	0800a8ec 	.word	0x0800a8ec

08009e18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	3b04      	subs	r3, #4
 8009e28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009e30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	3b04      	subs	r3, #4
 8009e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	f023 0201 	bic.w	r2, r3, #1
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	3b04      	subs	r3, #4
 8009e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e48:	4a0c      	ldr	r2, [pc, #48]	@ (8009e7c <pxPortInitialiseStack+0x64>)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	3b14      	subs	r3, #20
 8009e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	3b04      	subs	r3, #4
 8009e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f06f 0202 	mvn.w	r2, #2
 8009e66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	3b20      	subs	r3, #32
 8009e6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3714      	adds	r7, #20
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	08009e81 	.word	0x08009e81

08009e80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e80:	b480      	push	{r7}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009e86:	2300      	movs	r3, #0
 8009e88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009e8a:	4b13      	ldr	r3, [pc, #76]	@ (8009ed8 <prvTaskExitError+0x58>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e92:	d00b      	beq.n	8009eac <prvTaskExitError+0x2c>
	__asm volatile
 8009e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e98:	f383 8811 	msr	BASEPRI, r3
 8009e9c:	f3bf 8f6f 	isb	sy
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	60fb      	str	r3, [r7, #12]
}
 8009ea6:	bf00      	nop
 8009ea8:	bf00      	nop
 8009eaa:	e7fd      	b.n	8009ea8 <prvTaskExitError+0x28>
	__asm volatile
 8009eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb0:	f383 8811 	msr	BASEPRI, r3
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	60bb      	str	r3, [r7, #8]
}
 8009ebe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ec0:	bf00      	nop
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d0fc      	beq.n	8009ec2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ec8:	bf00      	nop
 8009eca:	bf00      	nop
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	24000010 	.word	0x24000010
 8009edc:	00000000 	.word	0x00000000

08009ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ee0:	4b07      	ldr	r3, [pc, #28]	@ (8009f00 <pxCurrentTCBConst2>)
 8009ee2:	6819      	ldr	r1, [r3, #0]
 8009ee4:	6808      	ldr	r0, [r1, #0]
 8009ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eea:	f380 8809 	msr	PSP, r0
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f04f 0000 	mov.w	r0, #0
 8009ef6:	f380 8811 	msr	BASEPRI, r0
 8009efa:	4770      	bx	lr
 8009efc:	f3af 8000 	nop.w

08009f00 <pxCurrentTCBConst2>:
 8009f00:	24000f98 	.word	0x24000f98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f04:	bf00      	nop
 8009f06:	bf00      	nop

08009f08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f08:	4808      	ldr	r0, [pc, #32]	@ (8009f2c <prvPortStartFirstTask+0x24>)
 8009f0a:	6800      	ldr	r0, [r0, #0]
 8009f0c:	6800      	ldr	r0, [r0, #0]
 8009f0e:	f380 8808 	msr	MSP, r0
 8009f12:	f04f 0000 	mov.w	r0, #0
 8009f16:	f380 8814 	msr	CONTROL, r0
 8009f1a:	b662      	cpsie	i
 8009f1c:	b661      	cpsie	f
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	f3bf 8f6f 	isb	sy
 8009f26:	df00      	svc	0
 8009f28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f2a:	bf00      	nop
 8009f2c:	e000ed08 	.word	0xe000ed08

08009f30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009f36:	4b47      	ldr	r3, [pc, #284]	@ (800a054 <xPortStartScheduler+0x124>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a47      	ldr	r2, [pc, #284]	@ (800a058 <xPortStartScheduler+0x128>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d10b      	bne.n	8009f58 <xPortStartScheduler+0x28>
	__asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	613b      	str	r3, [r7, #16]
}
 8009f52:	bf00      	nop
 8009f54:	bf00      	nop
 8009f56:	e7fd      	b.n	8009f54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009f58:	4b3e      	ldr	r3, [pc, #248]	@ (800a054 <xPortStartScheduler+0x124>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a3f      	ldr	r2, [pc, #252]	@ (800a05c <xPortStartScheduler+0x12c>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d10b      	bne.n	8009f7a <xPortStartScheduler+0x4a>
	__asm volatile
 8009f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f66:	f383 8811 	msr	BASEPRI, r3
 8009f6a:	f3bf 8f6f 	isb	sy
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	60fb      	str	r3, [r7, #12]
}
 8009f74:	bf00      	nop
 8009f76:	bf00      	nop
 8009f78:	e7fd      	b.n	8009f76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f7a:	4b39      	ldr	r3, [pc, #228]	@ (800a060 <xPortStartScheduler+0x130>)
 8009f7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	22ff      	movs	r2, #255	@ 0xff
 8009f8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f94:	78fb      	ldrb	r3, [r7, #3]
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009f9c:	b2da      	uxtb	r2, r3
 8009f9e:	4b31      	ldr	r3, [pc, #196]	@ (800a064 <xPortStartScheduler+0x134>)
 8009fa0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009fa2:	4b31      	ldr	r3, [pc, #196]	@ (800a068 <xPortStartScheduler+0x138>)
 8009fa4:	2207      	movs	r2, #7
 8009fa6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fa8:	e009      	b.n	8009fbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009faa:	4b2f      	ldr	r3, [pc, #188]	@ (800a068 <xPortStartScheduler+0x138>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	3b01      	subs	r3, #1
 8009fb0:	4a2d      	ldr	r2, [pc, #180]	@ (800a068 <xPortStartScheduler+0x138>)
 8009fb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009fb4:	78fb      	ldrb	r3, [r7, #3]
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	005b      	lsls	r3, r3, #1
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fbe:	78fb      	ldrb	r3, [r7, #3]
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fc6:	2b80      	cmp	r3, #128	@ 0x80
 8009fc8:	d0ef      	beq.n	8009faa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009fca:	4b27      	ldr	r3, [pc, #156]	@ (800a068 <xPortStartScheduler+0x138>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f1c3 0307 	rsb	r3, r3, #7
 8009fd2:	2b04      	cmp	r3, #4
 8009fd4:	d00b      	beq.n	8009fee <xPortStartScheduler+0xbe>
	__asm volatile
 8009fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fda:	f383 8811 	msr	BASEPRI, r3
 8009fde:	f3bf 8f6f 	isb	sy
 8009fe2:	f3bf 8f4f 	dsb	sy
 8009fe6:	60bb      	str	r3, [r7, #8]
}
 8009fe8:	bf00      	nop
 8009fea:	bf00      	nop
 8009fec:	e7fd      	b.n	8009fea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009fee:	4b1e      	ldr	r3, [pc, #120]	@ (800a068 <xPortStartScheduler+0x138>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	021b      	lsls	r3, r3, #8
 8009ff4:	4a1c      	ldr	r2, [pc, #112]	@ (800a068 <xPortStartScheduler+0x138>)
 8009ff6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ff8:	4b1b      	ldr	r3, [pc, #108]	@ (800a068 <xPortStartScheduler+0x138>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a000:	4a19      	ldr	r2, [pc, #100]	@ (800a068 <xPortStartScheduler+0x138>)
 800a002:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	b2da      	uxtb	r2, r3
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a00c:	4b17      	ldr	r3, [pc, #92]	@ (800a06c <xPortStartScheduler+0x13c>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a16      	ldr	r2, [pc, #88]	@ (800a06c <xPortStartScheduler+0x13c>)
 800a012:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a016:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a018:	4b14      	ldr	r3, [pc, #80]	@ (800a06c <xPortStartScheduler+0x13c>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a13      	ldr	r2, [pc, #76]	@ (800a06c <xPortStartScheduler+0x13c>)
 800a01e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a022:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a024:	f000 f8da 	bl	800a1dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a028:	4b11      	ldr	r3, [pc, #68]	@ (800a070 <xPortStartScheduler+0x140>)
 800a02a:	2200      	movs	r2, #0
 800a02c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a02e:	f000 f8f9 	bl	800a224 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a032:	4b10      	ldr	r3, [pc, #64]	@ (800a074 <xPortStartScheduler+0x144>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a0f      	ldr	r2, [pc, #60]	@ (800a074 <xPortStartScheduler+0x144>)
 800a038:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a03c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a03e:	f7ff ff63 	bl	8009f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a042:	f7fe ff1f 	bl	8008e84 <vTaskSwitchContext>
	prvTaskExitError();
 800a046:	f7ff ff1b 	bl	8009e80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3718      	adds	r7, #24
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	e000ed00 	.word	0xe000ed00
 800a058:	410fc271 	.word	0x410fc271
 800a05c:	410fc270 	.word	0x410fc270
 800a060:	e000e400 	.word	0xe000e400
 800a064:	240015c4 	.word	0x240015c4
 800a068:	240015c8 	.word	0x240015c8
 800a06c:	e000ed20 	.word	0xe000ed20
 800a070:	24000010 	.word	0x24000010
 800a074:	e000ef34 	.word	0xe000ef34

0800a078 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
	__asm volatile
 800a07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	607b      	str	r3, [r7, #4]
}
 800a090:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a092:	4b10      	ldr	r3, [pc, #64]	@ (800a0d4 <vPortEnterCritical+0x5c>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	3301      	adds	r3, #1
 800a098:	4a0e      	ldr	r2, [pc, #56]	@ (800a0d4 <vPortEnterCritical+0x5c>)
 800a09a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a09c:	4b0d      	ldr	r3, [pc, #52]	@ (800a0d4 <vPortEnterCritical+0x5c>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d110      	bne.n	800a0c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a0a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a0d8 <vPortEnterCritical+0x60>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00b      	beq.n	800a0c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	603b      	str	r3, [r7, #0]
}
 800a0c0:	bf00      	nop
 800a0c2:	bf00      	nop
 800a0c4:	e7fd      	b.n	800a0c2 <vPortEnterCritical+0x4a>
	}
}
 800a0c6:	bf00      	nop
 800a0c8:	370c      	adds	r7, #12
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	24000010 	.word	0x24000010
 800a0d8:	e000ed04 	.word	0xe000ed04

0800a0dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a0e2:	4b12      	ldr	r3, [pc, #72]	@ (800a12c <vPortExitCritical+0x50>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d10b      	bne.n	800a102 <vPortExitCritical+0x26>
	__asm volatile
 800a0ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ee:	f383 8811 	msr	BASEPRI, r3
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	f3bf 8f4f 	dsb	sy
 800a0fa:	607b      	str	r3, [r7, #4]
}
 800a0fc:	bf00      	nop
 800a0fe:	bf00      	nop
 800a100:	e7fd      	b.n	800a0fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a102:	4b0a      	ldr	r3, [pc, #40]	@ (800a12c <vPortExitCritical+0x50>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	3b01      	subs	r3, #1
 800a108:	4a08      	ldr	r2, [pc, #32]	@ (800a12c <vPortExitCritical+0x50>)
 800a10a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a10c:	4b07      	ldr	r3, [pc, #28]	@ (800a12c <vPortExitCritical+0x50>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d105      	bne.n	800a120 <vPortExitCritical+0x44>
 800a114:	2300      	movs	r3, #0
 800a116:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	f383 8811 	msr	BASEPRI, r3
}
 800a11e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a120:	bf00      	nop
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	24000010 	.word	0x24000010

0800a130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a130:	f3ef 8009 	mrs	r0, PSP
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	4b15      	ldr	r3, [pc, #84]	@ (800a190 <pxCurrentTCBConst>)
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	f01e 0f10 	tst.w	lr, #16
 800a140:	bf08      	it	eq
 800a142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14a:	6010      	str	r0, [r2, #0]
 800a14c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a150:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a154:	f380 8811 	msr	BASEPRI, r0
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	f3bf 8f6f 	isb	sy
 800a160:	f7fe fe90 	bl	8008e84 <vTaskSwitchContext>
 800a164:	f04f 0000 	mov.w	r0, #0
 800a168:	f380 8811 	msr	BASEPRI, r0
 800a16c:	bc09      	pop	{r0, r3}
 800a16e:	6819      	ldr	r1, [r3, #0]
 800a170:	6808      	ldr	r0, [r1, #0]
 800a172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a176:	f01e 0f10 	tst.w	lr, #16
 800a17a:	bf08      	it	eq
 800a17c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a180:	f380 8809 	msr	PSP, r0
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	f3af 8000 	nop.w

0800a190 <pxCurrentTCBConst>:
 800a190:	24000f98 	.word	0x24000f98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a194:	bf00      	nop
 800a196:	bf00      	nop

0800a198 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
	__asm volatile
 800a19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a2:	f383 8811 	msr	BASEPRI, r3
 800a1a6:	f3bf 8f6f 	isb	sy
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	607b      	str	r3, [r7, #4]
}
 800a1b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a1b2:	f7fe fdad 	bl	8008d10 <xTaskIncrementTick>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d003      	beq.n	800a1c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a1bc:	4b06      	ldr	r3, [pc, #24]	@ (800a1d8 <xPortSysTickHandler+0x40>)
 800a1be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	f383 8811 	msr	BASEPRI, r3
}
 800a1ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a1d0:	bf00      	nop
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	e000ed04 	.word	0xe000ed04

0800a1dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a1dc:	b480      	push	{r7}
 800a1de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a1e0:	4b0b      	ldr	r3, [pc, #44]	@ (800a210 <vPortSetupTimerInterrupt+0x34>)
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a1e6:	4b0b      	ldr	r3, [pc, #44]	@ (800a214 <vPortSetupTimerInterrupt+0x38>)
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a1ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a218 <vPortSetupTimerInterrupt+0x3c>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a0a      	ldr	r2, [pc, #40]	@ (800a21c <vPortSetupTimerInterrupt+0x40>)
 800a1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1f6:	099b      	lsrs	r3, r3, #6
 800a1f8:	4a09      	ldr	r2, [pc, #36]	@ (800a220 <vPortSetupTimerInterrupt+0x44>)
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a1fe:	4b04      	ldr	r3, [pc, #16]	@ (800a210 <vPortSetupTimerInterrupt+0x34>)
 800a200:	2207      	movs	r2, #7
 800a202:	601a      	str	r2, [r3, #0]
}
 800a204:	bf00      	nop
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	e000e010 	.word	0xe000e010
 800a214:	e000e018 	.word	0xe000e018
 800a218:	24000000 	.word	0x24000000
 800a21c:	10624dd3 	.word	0x10624dd3
 800a220:	e000e014 	.word	0xe000e014

0800a224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a224:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a234 <vPortEnableVFP+0x10>
 800a228:	6801      	ldr	r1, [r0, #0]
 800a22a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a22e:	6001      	str	r1, [r0, #0]
 800a230:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a232:	bf00      	nop
 800a234:	e000ed88 	.word	0xe000ed88

0800a238 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a238:	b480      	push	{r7}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a23e:	f3ef 8305 	mrs	r3, IPSR
 800a242:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2b0f      	cmp	r3, #15
 800a248:	d915      	bls.n	800a276 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a24a:	4a18      	ldr	r2, [pc, #96]	@ (800a2ac <vPortValidateInterruptPriority+0x74>)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	4413      	add	r3, r2
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a254:	4b16      	ldr	r3, [pc, #88]	@ (800a2b0 <vPortValidateInterruptPriority+0x78>)
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	7afa      	ldrb	r2, [r7, #11]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d20b      	bcs.n	800a276 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a262:	f383 8811 	msr	BASEPRI, r3
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	607b      	str	r3, [r7, #4]
}
 800a270:	bf00      	nop
 800a272:	bf00      	nop
 800a274:	e7fd      	b.n	800a272 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a276:	4b0f      	ldr	r3, [pc, #60]	@ (800a2b4 <vPortValidateInterruptPriority+0x7c>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a27e:	4b0e      	ldr	r3, [pc, #56]	@ (800a2b8 <vPortValidateInterruptPriority+0x80>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	429a      	cmp	r2, r3
 800a284:	d90b      	bls.n	800a29e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a28a:	f383 8811 	msr	BASEPRI, r3
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	603b      	str	r3, [r7, #0]
}
 800a298:	bf00      	nop
 800a29a:	bf00      	nop
 800a29c:	e7fd      	b.n	800a29a <vPortValidateInterruptPriority+0x62>
	}
 800a29e:	bf00      	nop
 800a2a0:	3714      	adds	r7, #20
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	e000e3f0 	.word	0xe000e3f0
 800a2b0:	240015c4 	.word	0x240015c4
 800a2b4:	e000ed0c 	.word	0xe000ed0c
 800a2b8:	240015c8 	.word	0x240015c8

0800a2bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b08a      	sub	sp, #40	@ 0x28
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a2c8:	f7fe fc66 	bl	8008b98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a2cc:	4b5c      	ldr	r3, [pc, #368]	@ (800a440 <pvPortMalloc+0x184>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d101      	bne.n	800a2d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a2d4:	f000 f924 	bl	800a520 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a2d8:	4b5a      	ldr	r3, [pc, #360]	@ (800a444 <pvPortMalloc+0x188>)
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4013      	ands	r3, r2
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f040 8095 	bne.w	800a410 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d01e      	beq.n	800a32a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a2ec:	2208      	movs	r2, #8
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f003 0307 	and.w	r3, r3, #7
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d015      	beq.n	800a32a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f023 0307 	bic.w	r3, r3, #7
 800a304:	3308      	adds	r3, #8
 800a306:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f003 0307 	and.w	r3, r3, #7
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00b      	beq.n	800a32a <pvPortMalloc+0x6e>
	__asm volatile
 800a312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a316:	f383 8811 	msr	BASEPRI, r3
 800a31a:	f3bf 8f6f 	isb	sy
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	617b      	str	r3, [r7, #20]
}
 800a324:	bf00      	nop
 800a326:	bf00      	nop
 800a328:	e7fd      	b.n	800a326 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d06f      	beq.n	800a410 <pvPortMalloc+0x154>
 800a330:	4b45      	ldr	r3, [pc, #276]	@ (800a448 <pvPortMalloc+0x18c>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	429a      	cmp	r2, r3
 800a338:	d86a      	bhi.n	800a410 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a33a:	4b44      	ldr	r3, [pc, #272]	@ (800a44c <pvPortMalloc+0x190>)
 800a33c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a33e:	4b43      	ldr	r3, [pc, #268]	@ (800a44c <pvPortMalloc+0x190>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a344:	e004      	b.n	800a350 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a348:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	429a      	cmp	r2, r3
 800a358:	d903      	bls.n	800a362 <pvPortMalloc+0xa6>
 800a35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1f1      	bne.n	800a346 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a362:	4b37      	ldr	r3, [pc, #220]	@ (800a440 <pvPortMalloc+0x184>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a368:	429a      	cmp	r2, r3
 800a36a:	d051      	beq.n	800a410 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a36c:	6a3b      	ldr	r3, [r7, #32]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2208      	movs	r2, #8
 800a372:	4413      	add	r3, r2
 800a374:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	6a3b      	ldr	r3, [r7, #32]
 800a37c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a380:	685a      	ldr	r2, [r3, #4]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	1ad2      	subs	r2, r2, r3
 800a386:	2308      	movs	r3, #8
 800a388:	005b      	lsls	r3, r3, #1
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d920      	bls.n	800a3d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a38e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4413      	add	r3, r2
 800a394:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	f003 0307 	and.w	r3, r3, #7
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00b      	beq.n	800a3b8 <pvPortMalloc+0xfc>
	__asm volatile
 800a3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	613b      	str	r3, [r7, #16]
}
 800a3b2:	bf00      	nop
 800a3b4:	bf00      	nop
 800a3b6:	e7fd      	b.n	800a3b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ba:	685a      	ldr	r2, [r3, #4]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	1ad2      	subs	r2, r2, r3
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a3ca:	69b8      	ldr	r0, [r7, #24]
 800a3cc:	f000 f90a 	bl	800a5e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a3d0:	4b1d      	ldr	r3, [pc, #116]	@ (800a448 <pvPortMalloc+0x18c>)
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	1ad3      	subs	r3, r2, r3
 800a3da:	4a1b      	ldr	r2, [pc, #108]	@ (800a448 <pvPortMalloc+0x18c>)
 800a3dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a3de:	4b1a      	ldr	r3, [pc, #104]	@ (800a448 <pvPortMalloc+0x18c>)
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	4b1b      	ldr	r3, [pc, #108]	@ (800a450 <pvPortMalloc+0x194>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d203      	bcs.n	800a3f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a3ea:	4b17      	ldr	r3, [pc, #92]	@ (800a448 <pvPortMalloc+0x18c>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a18      	ldr	r2, [pc, #96]	@ (800a450 <pvPortMalloc+0x194>)
 800a3f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f4:	685a      	ldr	r2, [r3, #4]
 800a3f6:	4b13      	ldr	r3, [pc, #76]	@ (800a444 <pvPortMalloc+0x188>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	431a      	orrs	r2, r3
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a402:	2200      	movs	r2, #0
 800a404:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a406:	4b13      	ldr	r3, [pc, #76]	@ (800a454 <pvPortMalloc+0x198>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	3301      	adds	r3, #1
 800a40c:	4a11      	ldr	r2, [pc, #68]	@ (800a454 <pvPortMalloc+0x198>)
 800a40e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a410:	f7fe fbd0 	bl	8008bb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	f003 0307 	and.w	r3, r3, #7
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00b      	beq.n	800a436 <pvPortMalloc+0x17a>
	__asm volatile
 800a41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	60fb      	str	r3, [r7, #12]
}
 800a430:	bf00      	nop
 800a432:	bf00      	nop
 800a434:	e7fd      	b.n	800a432 <pvPortMalloc+0x176>
	return pvReturn;
 800a436:	69fb      	ldr	r3, [r7, #28]
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3728      	adds	r7, #40	@ 0x28
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	240051d4 	.word	0x240051d4
 800a444:	240051e8 	.word	0x240051e8
 800a448:	240051d8 	.word	0x240051d8
 800a44c:	240051cc 	.word	0x240051cc
 800a450:	240051dc 	.word	0x240051dc
 800a454:	240051e0 	.word	0x240051e0

0800a458 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b086      	sub	sp, #24
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d04f      	beq.n	800a50a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a46a:	2308      	movs	r3, #8
 800a46c:	425b      	negs	r3, r3
 800a46e:	697a      	ldr	r2, [r7, #20]
 800a470:	4413      	add	r3, r2
 800a472:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	4b25      	ldr	r3, [pc, #148]	@ (800a514 <vPortFree+0xbc>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4013      	ands	r3, r2
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10b      	bne.n	800a49e <vPortFree+0x46>
	__asm volatile
 800a486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48a:	f383 8811 	msr	BASEPRI, r3
 800a48e:	f3bf 8f6f 	isb	sy
 800a492:	f3bf 8f4f 	dsb	sy
 800a496:	60fb      	str	r3, [r7, #12]
}
 800a498:	bf00      	nop
 800a49a:	bf00      	nop
 800a49c:	e7fd      	b.n	800a49a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d00b      	beq.n	800a4be <vPortFree+0x66>
	__asm volatile
 800a4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	60bb      	str	r3, [r7, #8]
}
 800a4b8:	bf00      	nop
 800a4ba:	bf00      	nop
 800a4bc:	e7fd      	b.n	800a4ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	685a      	ldr	r2, [r3, #4]
 800a4c2:	4b14      	ldr	r3, [pc, #80]	@ (800a514 <vPortFree+0xbc>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d01e      	beq.n	800a50a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d11a      	bne.n	800a50a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	685a      	ldr	r2, [r3, #4]
 800a4d8:	4b0e      	ldr	r3, [pc, #56]	@ (800a514 <vPortFree+0xbc>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	43db      	mvns	r3, r3
 800a4de:	401a      	ands	r2, r3
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a4e4:	f7fe fb58 	bl	8008b98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	685a      	ldr	r2, [r3, #4]
 800a4ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a518 <vPortFree+0xc0>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	4a09      	ldr	r2, [pc, #36]	@ (800a518 <vPortFree+0xc0>)
 800a4f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a4f6:	6938      	ldr	r0, [r7, #16]
 800a4f8:	f000 f874 	bl	800a5e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a4fc:	4b07      	ldr	r3, [pc, #28]	@ (800a51c <vPortFree+0xc4>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	3301      	adds	r3, #1
 800a502:	4a06      	ldr	r2, [pc, #24]	@ (800a51c <vPortFree+0xc4>)
 800a504:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a506:	f7fe fb55 	bl	8008bb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a50a:	bf00      	nop
 800a50c:	3718      	adds	r7, #24
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	240051e8 	.word	0x240051e8
 800a518:	240051d8 	.word	0x240051d8
 800a51c:	240051e4 	.word	0x240051e4

0800a520 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a526:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a52a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a52c:	4b27      	ldr	r3, [pc, #156]	@ (800a5cc <prvHeapInit+0xac>)
 800a52e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f003 0307 	and.w	r3, r3, #7
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00c      	beq.n	800a554 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	3307      	adds	r3, #7
 800a53e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f023 0307 	bic.w	r3, r3, #7
 800a546:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	1ad3      	subs	r3, r2, r3
 800a54e:	4a1f      	ldr	r2, [pc, #124]	@ (800a5cc <prvHeapInit+0xac>)
 800a550:	4413      	add	r3, r2
 800a552:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a558:	4a1d      	ldr	r2, [pc, #116]	@ (800a5d0 <prvHeapInit+0xb0>)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a55e:	4b1c      	ldr	r3, [pc, #112]	@ (800a5d0 <prvHeapInit+0xb0>)
 800a560:	2200      	movs	r2, #0
 800a562:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	4413      	add	r3, r2
 800a56a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a56c:	2208      	movs	r2, #8
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	1a9b      	subs	r3, r3, r2
 800a572:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f023 0307 	bic.w	r3, r3, #7
 800a57a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	4a15      	ldr	r2, [pc, #84]	@ (800a5d4 <prvHeapInit+0xb4>)
 800a580:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a582:	4b14      	ldr	r3, [pc, #80]	@ (800a5d4 <prvHeapInit+0xb4>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2200      	movs	r2, #0
 800a588:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a58a:	4b12      	ldr	r3, [pc, #72]	@ (800a5d4 <prvHeapInit+0xb4>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	2200      	movs	r2, #0
 800a590:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	1ad2      	subs	r2, r2, r3
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a5a0:	4b0c      	ldr	r3, [pc, #48]	@ (800a5d4 <prvHeapInit+0xb4>)
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	4a0a      	ldr	r2, [pc, #40]	@ (800a5d8 <prvHeapInit+0xb8>)
 800a5ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	4a09      	ldr	r2, [pc, #36]	@ (800a5dc <prvHeapInit+0xbc>)
 800a5b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a5b8:	4b09      	ldr	r3, [pc, #36]	@ (800a5e0 <prvHeapInit+0xc0>)
 800a5ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a5be:	601a      	str	r2, [r3, #0]
}
 800a5c0:	bf00      	nop
 800a5c2:	3714      	adds	r7, #20
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr
 800a5cc:	240015cc 	.word	0x240015cc
 800a5d0:	240051cc 	.word	0x240051cc
 800a5d4:	240051d4 	.word	0x240051d4
 800a5d8:	240051dc 	.word	0x240051dc
 800a5dc:	240051d8 	.word	0x240051d8
 800a5e0:	240051e8 	.word	0x240051e8

0800a5e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a5ec:	4b28      	ldr	r3, [pc, #160]	@ (800a690 <prvInsertBlockIntoFreeList+0xac>)
 800a5ee:	60fb      	str	r3, [r7, #12]
 800a5f0:	e002      	b.n	800a5f8 <prvInsertBlockIntoFreeList+0x14>
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	60fb      	str	r3, [r7, #12]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d8f7      	bhi.n	800a5f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	68ba      	ldr	r2, [r7, #8]
 800a60c:	4413      	add	r3, r2
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	429a      	cmp	r2, r3
 800a612:	d108      	bne.n	800a626 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	685a      	ldr	r2, [r3, #4]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	441a      	add	r2, r3
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	441a      	add	r2, r3
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	429a      	cmp	r2, r3
 800a638:	d118      	bne.n	800a66c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	4b15      	ldr	r3, [pc, #84]	@ (800a694 <prvInsertBlockIntoFreeList+0xb0>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	429a      	cmp	r2, r3
 800a644:	d00d      	beq.n	800a662 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	685a      	ldr	r2, [r3, #4]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	441a      	add	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	601a      	str	r2, [r3, #0]
 800a660:	e008      	b.n	800a674 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a662:	4b0c      	ldr	r3, [pc, #48]	@ (800a694 <prvInsertBlockIntoFreeList+0xb0>)
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	e003      	b.n	800a674 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d002      	beq.n	800a682 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a682:	bf00      	nop
 800a684:	3714      	adds	r7, #20
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop
 800a690:	240051cc 	.word	0x240051cc
 800a694:	240051d4 	.word	0x240051d4

0800a698 <memset>:
 800a698:	4402      	add	r2, r0
 800a69a:	4603      	mov	r3, r0
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d100      	bne.n	800a6a2 <memset+0xa>
 800a6a0:	4770      	bx	lr
 800a6a2:	f803 1b01 	strb.w	r1, [r3], #1
 800a6a6:	e7f9      	b.n	800a69c <memset+0x4>

0800a6a8 <_reclaim_reent>:
 800a6a8:	4b29      	ldr	r3, [pc, #164]	@ (800a750 <_reclaim_reent+0xa8>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4283      	cmp	r3, r0
 800a6ae:	b570      	push	{r4, r5, r6, lr}
 800a6b0:	4604      	mov	r4, r0
 800a6b2:	d04b      	beq.n	800a74c <_reclaim_reent+0xa4>
 800a6b4:	69c3      	ldr	r3, [r0, #28]
 800a6b6:	b1ab      	cbz	r3, 800a6e4 <_reclaim_reent+0x3c>
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	b16b      	cbz	r3, 800a6d8 <_reclaim_reent+0x30>
 800a6bc:	2500      	movs	r5, #0
 800a6be:	69e3      	ldr	r3, [r4, #28]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	5959      	ldr	r1, [r3, r5]
 800a6c4:	2900      	cmp	r1, #0
 800a6c6:	d13b      	bne.n	800a740 <_reclaim_reent+0x98>
 800a6c8:	3504      	adds	r5, #4
 800a6ca:	2d80      	cmp	r5, #128	@ 0x80
 800a6cc:	d1f7      	bne.n	800a6be <_reclaim_reent+0x16>
 800a6ce:	69e3      	ldr	r3, [r4, #28]
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	68d9      	ldr	r1, [r3, #12]
 800a6d4:	f000 f872 	bl	800a7bc <_free_r>
 800a6d8:	69e3      	ldr	r3, [r4, #28]
 800a6da:	6819      	ldr	r1, [r3, #0]
 800a6dc:	b111      	cbz	r1, 800a6e4 <_reclaim_reent+0x3c>
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f000 f86c 	bl	800a7bc <_free_r>
 800a6e4:	6961      	ldr	r1, [r4, #20]
 800a6e6:	b111      	cbz	r1, 800a6ee <_reclaim_reent+0x46>
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f000 f867 	bl	800a7bc <_free_r>
 800a6ee:	69e1      	ldr	r1, [r4, #28]
 800a6f0:	b111      	cbz	r1, 800a6f8 <_reclaim_reent+0x50>
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f000 f862 	bl	800a7bc <_free_r>
 800a6f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a6fa:	b111      	cbz	r1, 800a702 <_reclaim_reent+0x5a>
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	f000 f85d 	bl	800a7bc <_free_r>
 800a702:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a704:	b111      	cbz	r1, 800a70c <_reclaim_reent+0x64>
 800a706:	4620      	mov	r0, r4
 800a708:	f000 f858 	bl	800a7bc <_free_r>
 800a70c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a70e:	b111      	cbz	r1, 800a716 <_reclaim_reent+0x6e>
 800a710:	4620      	mov	r0, r4
 800a712:	f000 f853 	bl	800a7bc <_free_r>
 800a716:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a718:	b111      	cbz	r1, 800a720 <_reclaim_reent+0x78>
 800a71a:	4620      	mov	r0, r4
 800a71c:	f000 f84e 	bl	800a7bc <_free_r>
 800a720:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a722:	b111      	cbz	r1, 800a72a <_reclaim_reent+0x82>
 800a724:	4620      	mov	r0, r4
 800a726:	f000 f849 	bl	800a7bc <_free_r>
 800a72a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a72c:	b111      	cbz	r1, 800a734 <_reclaim_reent+0x8c>
 800a72e:	4620      	mov	r0, r4
 800a730:	f000 f844 	bl	800a7bc <_free_r>
 800a734:	6a23      	ldr	r3, [r4, #32]
 800a736:	b14b      	cbz	r3, 800a74c <_reclaim_reent+0xa4>
 800a738:	4620      	mov	r0, r4
 800a73a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a73e:	4718      	bx	r3
 800a740:	680e      	ldr	r6, [r1, #0]
 800a742:	4620      	mov	r0, r4
 800a744:	f000 f83a 	bl	800a7bc <_free_r>
 800a748:	4631      	mov	r1, r6
 800a74a:	e7bb      	b.n	800a6c4 <_reclaim_reent+0x1c>
 800a74c:	bd70      	pop	{r4, r5, r6, pc}
 800a74e:	bf00      	nop
 800a750:	24000014 	.word	0x24000014

0800a754 <__libc_init_array>:
 800a754:	b570      	push	{r4, r5, r6, lr}
 800a756:	4d0d      	ldr	r5, [pc, #52]	@ (800a78c <__libc_init_array+0x38>)
 800a758:	4c0d      	ldr	r4, [pc, #52]	@ (800a790 <__libc_init_array+0x3c>)
 800a75a:	1b64      	subs	r4, r4, r5
 800a75c:	10a4      	asrs	r4, r4, #2
 800a75e:	2600      	movs	r6, #0
 800a760:	42a6      	cmp	r6, r4
 800a762:	d109      	bne.n	800a778 <__libc_init_array+0x24>
 800a764:	4d0b      	ldr	r5, [pc, #44]	@ (800a794 <__libc_init_array+0x40>)
 800a766:	4c0c      	ldr	r4, [pc, #48]	@ (800a798 <__libc_init_array+0x44>)
 800a768:	f000 f87e 	bl	800a868 <_init>
 800a76c:	1b64      	subs	r4, r4, r5
 800a76e:	10a4      	asrs	r4, r4, #2
 800a770:	2600      	movs	r6, #0
 800a772:	42a6      	cmp	r6, r4
 800a774:	d105      	bne.n	800a782 <__libc_init_array+0x2e>
 800a776:	bd70      	pop	{r4, r5, r6, pc}
 800a778:	f855 3b04 	ldr.w	r3, [r5], #4
 800a77c:	4798      	blx	r3
 800a77e:	3601      	adds	r6, #1
 800a780:	e7ee      	b.n	800a760 <__libc_init_array+0xc>
 800a782:	f855 3b04 	ldr.w	r3, [r5], #4
 800a786:	4798      	blx	r3
 800a788:	3601      	adds	r6, #1
 800a78a:	e7f2      	b.n	800a772 <__libc_init_array+0x1e>
 800a78c:	0800a98c 	.word	0x0800a98c
 800a790:	0800a98c 	.word	0x0800a98c
 800a794:	0800a98c 	.word	0x0800a98c
 800a798:	0800a990 	.word	0x0800a990

0800a79c <__retarget_lock_acquire_recursive>:
 800a79c:	4770      	bx	lr

0800a79e <__retarget_lock_release_recursive>:
 800a79e:	4770      	bx	lr

0800a7a0 <memcpy>:
 800a7a0:	440a      	add	r2, r1
 800a7a2:	4291      	cmp	r1, r2
 800a7a4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a7a8:	d100      	bne.n	800a7ac <memcpy+0xc>
 800a7aa:	4770      	bx	lr
 800a7ac:	b510      	push	{r4, lr}
 800a7ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7b6:	4291      	cmp	r1, r2
 800a7b8:	d1f9      	bne.n	800a7ae <memcpy+0xe>
 800a7ba:	bd10      	pop	{r4, pc}

0800a7bc <_free_r>:
 800a7bc:	b538      	push	{r3, r4, r5, lr}
 800a7be:	4605      	mov	r5, r0
 800a7c0:	2900      	cmp	r1, #0
 800a7c2:	d041      	beq.n	800a848 <_free_r+0x8c>
 800a7c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7c8:	1f0c      	subs	r4, r1, #4
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	bfb8      	it	lt
 800a7ce:	18e4      	addlt	r4, r4, r3
 800a7d0:	f000 f83e 	bl	800a850 <__malloc_lock>
 800a7d4:	4a1d      	ldr	r2, [pc, #116]	@ (800a84c <_free_r+0x90>)
 800a7d6:	6813      	ldr	r3, [r2, #0]
 800a7d8:	b933      	cbnz	r3, 800a7e8 <_free_r+0x2c>
 800a7da:	6063      	str	r3, [r4, #4]
 800a7dc:	6014      	str	r4, [r2, #0]
 800a7de:	4628      	mov	r0, r5
 800a7e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7e4:	f000 b83a 	b.w	800a85c <__malloc_unlock>
 800a7e8:	42a3      	cmp	r3, r4
 800a7ea:	d908      	bls.n	800a7fe <_free_r+0x42>
 800a7ec:	6820      	ldr	r0, [r4, #0]
 800a7ee:	1821      	adds	r1, r4, r0
 800a7f0:	428b      	cmp	r3, r1
 800a7f2:	bf01      	itttt	eq
 800a7f4:	6819      	ldreq	r1, [r3, #0]
 800a7f6:	685b      	ldreq	r3, [r3, #4]
 800a7f8:	1809      	addeq	r1, r1, r0
 800a7fa:	6021      	streq	r1, [r4, #0]
 800a7fc:	e7ed      	b.n	800a7da <_free_r+0x1e>
 800a7fe:	461a      	mov	r2, r3
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	b10b      	cbz	r3, 800a808 <_free_r+0x4c>
 800a804:	42a3      	cmp	r3, r4
 800a806:	d9fa      	bls.n	800a7fe <_free_r+0x42>
 800a808:	6811      	ldr	r1, [r2, #0]
 800a80a:	1850      	adds	r0, r2, r1
 800a80c:	42a0      	cmp	r0, r4
 800a80e:	d10b      	bne.n	800a828 <_free_r+0x6c>
 800a810:	6820      	ldr	r0, [r4, #0]
 800a812:	4401      	add	r1, r0
 800a814:	1850      	adds	r0, r2, r1
 800a816:	4283      	cmp	r3, r0
 800a818:	6011      	str	r1, [r2, #0]
 800a81a:	d1e0      	bne.n	800a7de <_free_r+0x22>
 800a81c:	6818      	ldr	r0, [r3, #0]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	6053      	str	r3, [r2, #4]
 800a822:	4408      	add	r0, r1
 800a824:	6010      	str	r0, [r2, #0]
 800a826:	e7da      	b.n	800a7de <_free_r+0x22>
 800a828:	d902      	bls.n	800a830 <_free_r+0x74>
 800a82a:	230c      	movs	r3, #12
 800a82c:	602b      	str	r3, [r5, #0]
 800a82e:	e7d6      	b.n	800a7de <_free_r+0x22>
 800a830:	6820      	ldr	r0, [r4, #0]
 800a832:	1821      	adds	r1, r4, r0
 800a834:	428b      	cmp	r3, r1
 800a836:	bf04      	itt	eq
 800a838:	6819      	ldreq	r1, [r3, #0]
 800a83a:	685b      	ldreq	r3, [r3, #4]
 800a83c:	6063      	str	r3, [r4, #4]
 800a83e:	bf04      	itt	eq
 800a840:	1809      	addeq	r1, r1, r0
 800a842:	6021      	streq	r1, [r4, #0]
 800a844:	6054      	str	r4, [r2, #4]
 800a846:	e7ca      	b.n	800a7de <_free_r+0x22>
 800a848:	bd38      	pop	{r3, r4, r5, pc}
 800a84a:	bf00      	nop
 800a84c:	24005328 	.word	0x24005328

0800a850 <__malloc_lock>:
 800a850:	4801      	ldr	r0, [pc, #4]	@ (800a858 <__malloc_lock+0x8>)
 800a852:	f7ff bfa3 	b.w	800a79c <__retarget_lock_acquire_recursive>
 800a856:	bf00      	nop
 800a858:	24005324 	.word	0x24005324

0800a85c <__malloc_unlock>:
 800a85c:	4801      	ldr	r0, [pc, #4]	@ (800a864 <__malloc_unlock+0x8>)
 800a85e:	f7ff bf9e 	b.w	800a79e <__retarget_lock_release_recursive>
 800a862:	bf00      	nop
 800a864:	24005324 	.word	0x24005324

0800a868 <_init>:
 800a868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a86a:	bf00      	nop
 800a86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a86e:	bc08      	pop	{r3}
 800a870:	469e      	mov	lr, r3
 800a872:	4770      	bx	lr

0800a874 <_fini>:
 800a874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a876:	bf00      	nop
 800a878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a87a:	bc08      	pop	{r3}
 800a87c:	469e      	mov	lr, r3
 800a87e:	4770      	bx	lr
