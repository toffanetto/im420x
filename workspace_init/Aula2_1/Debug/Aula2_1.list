
Aula2_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006400  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006698  08006698  00007698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080066d0  080066d0  000076d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080066d8  080066d8  000076d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080066dc  080066dc  000076dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  080066e0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  080066f0  00008010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08006750  00008070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  240000d0  080067b0  000080d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000758  080067b0  00008758  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017727  00000000  00000000  000080fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e28  00000000  00000000  0001f825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00022650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c0b  00000000  00000000  00023600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038582  00000000  00000000  0002420b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b72  00000000  00000000  0005c78d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001605af  00000000  00000000  000732ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d38ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000415c  00000000  00000000  001d38f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ab  00000000  00000000  001d7a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006680 	.word	0x08006680

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08006680 	.word	0x08006680

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000648 <MX_ETH_Init+0x80>)
 80005ce:	4a1f      	ldr	r2, [pc, #124]	@ (800064c <MX_ETH_Init+0x84>)
 80005d0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000650 <MX_ETH_Init+0x88>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000650 <MX_ETH_Init+0x88>)
 80005da:	2280      	movs	r2, #128	@ 0x80
 80005dc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005de:	4b1c      	ldr	r3, [pc, #112]	@ (8000650 <MX_ETH_Init+0x88>)
 80005e0:	22e1      	movs	r2, #225	@ 0xe1
 80005e2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000650 <MX_ETH_Init+0x88>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005ea:	4b19      	ldr	r3, [pc, #100]	@ (8000650 <MX_ETH_Init+0x88>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80005f0:	4b17      	ldr	r3, [pc, #92]	@ (8000650 <MX_ETH_Init+0x88>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80005f6:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <MX_ETH_Init+0x80>)
 80005f8:	4a15      	ldr	r2, [pc, #84]	@ (8000650 <MX_ETH_Init+0x88>)
 80005fa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <MX_ETH_Init+0x80>)
 80005fe:	2201      	movs	r2, #1
 8000600:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000602:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <MX_ETH_Init+0x80>)
 8000604:	4a13      	ldr	r2, [pc, #76]	@ (8000654 <MX_ETH_Init+0x8c>)
 8000606:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000608:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <MX_ETH_Init+0x80>)
 800060a:	4a13      	ldr	r2, [pc, #76]	@ (8000658 <MX_ETH_Init+0x90>)
 800060c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800060e:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <MX_ETH_Init+0x80>)
 8000610:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000614:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000616:	480c      	ldr	r0, [pc, #48]	@ (8000648 <MX_ETH_Init+0x80>)
 8000618:	f000 fe98 	bl	800134c <HAL_ETH_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000622:	f000 fa73 	bl	8000b0c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000626:	2238      	movs	r2, #56	@ 0x38
 8000628:	2100      	movs	r1, #0
 800062a:	480c      	ldr	r0, [pc, #48]	@ (800065c <MX_ETH_Init+0x94>)
 800062c:	f005 fffb 	bl	8006626 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000630:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <MX_ETH_Init+0x94>)
 8000632:	2221      	movs	r2, #33	@ 0x21
 8000634:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000636:	4b09      	ldr	r3, [pc, #36]	@ (800065c <MX_ETH_Init+0x94>)
 8000638:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800063c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800063e:	4b07      	ldr	r3, [pc, #28]	@ (800065c <MX_ETH_Init+0x94>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	24000124 	.word	0x24000124
 800064c:	40028000 	.word	0x40028000
 8000650:	240001d4 	.word	0x240001d4
 8000654:	24000070 	.word	0x24000070
 8000658:	24000010 	.word	0x24000010
 800065c:	240000ec 	.word	0x240000ec

08000660 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08e      	sub	sp, #56	@ 0x38
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a59      	ldr	r2, [pc, #356]	@ (80007e4 <HAL_ETH_MspInit+0x184>)
 800067e:	4293      	cmp	r3, r2
 8000680:	f040 80ab 	bne.w	80007da <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000684:	4b58      	ldr	r3, [pc, #352]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000686:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800068a:	4a57      	ldr	r2, [pc, #348]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800068c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000690:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000694:	4b54      	ldr	r3, [pc, #336]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000696:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800069a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800069e:	623b      	str	r3, [r7, #32]
 80006a0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80006a2:	4b51      	ldr	r3, [pc, #324]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006a8:	4a4f      	ldr	r2, [pc, #316]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006b2:	4b4d      	ldr	r3, [pc, #308]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006bc:	61fb      	str	r3, [r7, #28]
 80006be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80006c0:	4b49      	ldr	r3, [pc, #292]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006c6:	4a48      	ldr	r2, [pc, #288]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006cc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006d0:	4b45      	ldr	r3, [pc, #276]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006da:	61bb      	str	r3, [r7, #24]
 80006dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b42      	ldr	r3, [pc, #264]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e4:	4a40      	ldr	r2, [pc, #256]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006e6:	f043 0304 	orr.w	r3, r3, #4
 80006ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006ee:	4b3e      	ldr	r3, [pc, #248]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	4b3a      	ldr	r3, [pc, #232]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000702:	4a39      	ldr	r2, [pc, #228]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800070c:	4b36      	ldr	r3, [pc, #216]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800070e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	4b33      	ldr	r3, [pc, #204]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800071c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000720:	4a31      	ldr	r2, [pc, #196]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000722:	f043 0302 	orr.w	r3, r3, #2
 8000726:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800072a:	4b2f      	ldr	r3, [pc, #188]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000730:	f003 0302 	and.w	r3, r3, #2
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000738:	4b2b      	ldr	r3, [pc, #172]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800073a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073e:	4a2a      	ldr	r2, [pc, #168]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000740:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000744:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000748:	4b27      	ldr	r3, [pc, #156]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800074a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800074e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000756:	2332      	movs	r3, #50	@ 0x32
 8000758:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000766:	230b      	movs	r3, #11
 8000768:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076e:	4619      	mov	r1, r3
 8000770:	481e      	ldr	r0, [pc, #120]	@ (80007ec <HAL_ETH_MspInit+0x18c>)
 8000772:	f001 fa1f 	bl	8001bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000776:	2386      	movs	r3, #134	@ 0x86
 8000778:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000786:	230b      	movs	r3, #11
 8000788:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078e:	4619      	mov	r1, r3
 8000790:	4817      	ldr	r0, [pc, #92]	@ (80007f0 <HAL_ETH_MspInit+0x190>)
 8000792:	f001 fa0f 	bl	8001bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000796:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079c:	2302      	movs	r3, #2
 800079e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a8:	230b      	movs	r3, #11
 80007aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b0:	4619      	mov	r1, r3
 80007b2:	4810      	ldr	r0, [pc, #64]	@ (80007f4 <HAL_ETH_MspInit+0x194>)
 80007b4:	f001 f9fe 	bl	8001bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80007b8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	2302      	movs	r3, #2
 80007c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ca:	230b      	movs	r3, #11
 80007cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d2:	4619      	mov	r1, r3
 80007d4:	4808      	ldr	r0, [pc, #32]	@ (80007f8 <HAL_ETH_MspInit+0x198>)
 80007d6:	f001 f9ed 	bl	8001bb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007da:	bf00      	nop
 80007dc:	3738      	adds	r7, #56	@ 0x38
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40028000 	.word	0x40028000
 80007e8:	58024400 	.word	0x58024400
 80007ec:	58020800 	.word	0x58020800
 80007f0:	58020000 	.word	0x58020000
 80007f4:	58020400 	.word	0x58020400
 80007f8:	58021800 	.word	0x58021800

080007fc <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	@ 0x30
 8000800:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b62      	ldr	r3, [pc, #392]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000818:	4a60      	ldr	r2, [pc, #384]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800081a:	f043 0304 	orr.w	r3, r3, #4
 800081e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000822:	4b5e      	ldr	r3, [pc, #376]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000828:	f003 0304 	and.w	r3, r3, #4
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000830:	4b5a      	ldr	r3, [pc, #360]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000836:	4a59      	ldr	r2, [pc, #356]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800083c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000840:	4b56      	ldr	r3, [pc, #344]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b53      	ldr	r3, [pc, #332]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000854:	4a51      	ldr	r2, [pc, #324]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800085e:	4b4f      	ldr	r3, [pc, #316]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086c:	4b4b      	ldr	r3, [pc, #300]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800086e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000872:	4a4a      	ldr	r2, [pc, #296]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800087c:	4b47      	ldr	r3, [pc, #284]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800087e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088a:	4b44      	ldr	r3, [pc, #272]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000890:	4a42      	ldr	r2, [pc, #264]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000892:	f043 0308 	orr.w	r3, r3, #8
 8000896:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800089a:	4b40      	ldr	r3, [pc, #256]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a0:	f003 0308 	and.w	r3, r3, #8
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a8:	4b3c      	ldr	r3, [pc, #240]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ae:	4a3b      	ldr	r2, [pc, #236]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008b8:	4b38      	ldr	r3, [pc, #224]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c6:	4b35      	ldr	r3, [pc, #212]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008cc:	4a33      	ldr	r2, [pc, #204]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008ce:	f043 0310 	orr.w	r3, r3, #16
 80008d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008d6:	4b31      	ldr	r3, [pc, #196]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008dc:	f003 0310 	and.w	r3, r3, #16
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f244 0101 	movw	r1, #16385	@ 0x4001
 80008ea:	482d      	ldr	r0, [pc, #180]	@ (80009a0 <MX_GPIO_Init+0x1a4>)
 80008ec:	f001 fb12 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008f6:	482b      	ldr	r0, [pc, #172]	@ (80009a4 <MX_GPIO_Init+0x1a8>)
 80008f8:	f001 fb0c 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2102      	movs	r1, #2
 8000900:	4829      	ldr	r0, [pc, #164]	@ (80009a8 <MX_GPIO_Init+0x1ac>)
 8000902:	f001 fb07 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000906:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4824      	ldr	r0, [pc, #144]	@ (80009ac <MX_GPIO_Init+0x1b0>)
 800091c:	f001 f94a 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000920:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4819      	ldr	r0, [pc, #100]	@ (80009a0 <MX_GPIO_Init+0x1a4>)
 800093a:	f001 f93b 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800093e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4813      	ldr	r0, [pc, #76]	@ (80009a4 <MX_GPIO_Init+0x1a8>)
 8000958:	f001 f92c 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800095c:	2380      	movs	r3, #128	@ 0x80
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000960:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	480f      	ldr	r0, [pc, #60]	@ (80009b0 <MX_GPIO_Init+0x1b4>)
 8000972:	f001 f91f 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000976:	2302      	movs	r3, #2
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4806      	ldr	r0, [pc, #24]	@ (80009a8 <MX_GPIO_Init+0x1ac>)
 800098e:	f001 f911 	bl	8001bb4 <HAL_GPIO_Init>

}
 8000992:	bf00      	nop
 8000994:	3730      	adds	r7, #48	@ 0x30
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	58024400 	.word	0x58024400
 80009a0:	58020400 	.word	0x58020400
 80009a4:	58020c00 	.word	0x58020c00
 80009a8:	58021000 	.word	0x58021000
 80009ac:	58020800 	.word	0x58020800
 80009b0:	58021800 	.word	0x58021800

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b8:	f000 fb0e 	bl	8000fd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009bc:	f000 f826 	bl	8000a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c0:	f7ff ff1c 	bl	80007fc <MX_GPIO_Init>
  MX_ETH_Init();
 80009c4:	f7ff fe00 	bl	80005c8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009c8:	f000 f978 	bl	8000cbc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009cc:	f000 fa2c 	bl	8000e28 <MX_USB_OTG_FS_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(0 == ucLedState)
 80009d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <main+0x50>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d108      	bne.n	80009ea <main+0x36>
	  {
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80009d8:	2201      	movs	r2, #1
 80009da:	2102      	movs	r1, #2
 80009dc:	480a      	ldr	r0, [pc, #40]	@ (8000a08 <main+0x54>)
 80009de:	f001 fa99 	bl	8001f14 <HAL_GPIO_WritePin>
		  ucLedState = 1;
 80009e2:	4b08      	ldr	r3, [pc, #32]	@ (8000a04 <main+0x50>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	701a      	strb	r2, [r3, #0]
 80009e8:	e007      	b.n	80009fa <main+0x46>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2102      	movs	r1, #2
 80009ee:	4806      	ldr	r0, [pc, #24]	@ (8000a08 <main+0x54>)
 80009f0:	f001 fa90 	bl	8001f14 <HAL_GPIO_WritePin>
		  ucLedState = 0;
 80009f4:	4b03      	ldr	r3, [pc, #12]	@ (8000a04 <main+0x50>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(500);
 80009fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009fe:	f000 fb7d 	bl	80010fc <HAL_Delay>
	  if(0 == ucLedState)
 8000a02:	e7e5      	b.n	80009d0 <main+0x1c>
 8000a04:	240001da 	.word	0x240001da
 8000a08:	58021000 	.word	0x58021000

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b09c      	sub	sp, #112	@ 0x70
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a16:	224c      	movs	r2, #76	@ 0x4c
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f005 fe03 	bl	8006626 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2220      	movs	r2, #32
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f005 fdfd 	bl	8006626 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f001 fbbb 	bl	80021a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b33      	ldr	r3, [pc, #204]	@ (8000b04 <SystemClock_Config+0xf8>)
 8000a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a3a:	4a32      	ldr	r2, [pc, #200]	@ (8000b04 <SystemClock_Config+0xf8>)
 8000a3c:	f023 0301 	bic.w	r3, r3, #1
 8000a40:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a42:	4b30      	ldr	r3, [pc, #192]	@ (8000b04 <SystemClock_Config+0xf8>)
 8000a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8000b08 <SystemClock_Config+0xfc>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a54:	4a2c      	ldr	r2, [pc, #176]	@ (8000b08 <SystemClock_Config+0xfc>)
 8000a56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b08 <SystemClock_Config+0xfc>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a68:	bf00      	nop
 8000a6a:	4b27      	ldr	r3, [pc, #156]	@ (8000b08 <SystemClock_Config+0xfc>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a76:	d1f8      	bne.n	8000a6a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a7c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a82:	2301      	movs	r3, #1
 8000a84:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a86:	2340      	movs	r3, #64	@ 0x40
 8000a88:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a92:	2301      	movs	r3, #1
 8000a94:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000a96:	2318      	movs	r3, #24
 8000a98:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000aa6:	230c      	movs	r3, #12
 8000aa8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 fbc0 	bl	800223c <HAL_RCC_OscConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000ac2:	f000 f823 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac6:	233f      	movs	r3, #63	@ 0x3f
 8000ac8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2101      	movs	r1, #1
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 f800 	bl	8002af0 <HAL_RCC_ClockConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000af6:	f000 f809 	bl	8000b0c <Error_Handler>
  }
}
 8000afa:	bf00      	nop
 8000afc:	3770      	adds	r7, #112	@ 0x70
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	58000400 	.word	0x58000400
 8000b08:	58024800 	.word	0x58024800

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <Error_Handler+0x8>

08000b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <HAL_MspInit+0x30>)
 8000b20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b24:	4a08      	ldr	r2, [pc, #32]	@ (8000b48 <HAL_MspInit+0x30>)
 8000b26:	f043 0302 	orr.w	r3, r3, #2
 8000b2a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_MspInit+0x30>)
 8000b30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	58024400 	.word	0x58024400

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <NMI_Handler+0x4>

08000b54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <MemManage_Handler+0x4>

08000b64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba2:	f000 fa8b 	bl	80010bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bb0:	4b37      	ldr	r3, [pc, #220]	@ (8000c90 <SystemInit+0xe4>)
 8000bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bb6:	4a36      	ldr	r2, [pc, #216]	@ (8000c90 <SystemInit+0xe4>)
 8000bb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bc0:	4b34      	ldr	r3, [pc, #208]	@ (8000c94 <SystemInit+0xe8>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f003 030f 	and.w	r3, r3, #15
 8000bc8:	2b06      	cmp	r3, #6
 8000bca:	d807      	bhi.n	8000bdc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bcc:	4b31      	ldr	r3, [pc, #196]	@ (8000c94 <SystemInit+0xe8>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f023 030f 	bic.w	r3, r3, #15
 8000bd4:	4a2f      	ldr	r2, [pc, #188]	@ (8000c94 <SystemInit+0xe8>)
 8000bd6:	f043 0307 	orr.w	r3, r3, #7
 8000bda:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8000c98 <SystemInit+0xec>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a2d      	ldr	r2, [pc, #180]	@ (8000c98 <SystemInit+0xec>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000be8:	4b2b      	ldr	r3, [pc, #172]	@ (8000c98 <SystemInit+0xec>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bee:	4b2a      	ldr	r3, [pc, #168]	@ (8000c98 <SystemInit+0xec>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	4929      	ldr	r1, [pc, #164]	@ (8000c98 <SystemInit+0xec>)
 8000bf4:	4b29      	ldr	r3, [pc, #164]	@ (8000c9c <SystemInit+0xf0>)
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bfa:	4b26      	ldr	r3, [pc, #152]	@ (8000c94 <SystemInit+0xe8>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f003 0308 	and.w	r3, r3, #8
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d007      	beq.n	8000c16 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c06:	4b23      	ldr	r3, [pc, #140]	@ (8000c94 <SystemInit+0xe8>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f023 030f 	bic.w	r3, r3, #15
 8000c0e:	4a21      	ldr	r2, [pc, #132]	@ (8000c94 <SystemInit+0xe8>)
 8000c10:	f043 0307 	orr.w	r3, r3, #7
 8000c14:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c16:	4b20      	ldr	r3, [pc, #128]	@ (8000c98 <SystemInit+0xec>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c98 <SystemInit+0xec>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c22:	4b1d      	ldr	r3, [pc, #116]	@ (8000c98 <SystemInit+0xec>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	@ (8000c98 <SystemInit+0xec>)
 8000c2a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ca0 <SystemInit+0xf4>)
 8000c2c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <SystemInit+0xec>)
 8000c30:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca4 <SystemInit+0xf8>)
 8000c32:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c34:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <SystemInit+0xec>)
 8000c36:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca8 <SystemInit+0xfc>)
 8000c38:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c3a:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <SystemInit+0xec>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c40:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <SystemInit+0xec>)
 8000c42:	4a19      	ldr	r2, [pc, #100]	@ (8000ca8 <SystemInit+0xfc>)
 8000c44:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c46:	4b14      	ldr	r3, [pc, #80]	@ (8000c98 <SystemInit+0xec>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <SystemInit+0xec>)
 8000c4e:	4a16      	ldr	r2, [pc, #88]	@ (8000ca8 <SystemInit+0xfc>)
 8000c50:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c52:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <SystemInit+0xec>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <SystemInit+0xec>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0e      	ldr	r2, [pc, #56]	@ (8000c98 <SystemInit+0xec>)
 8000c5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <SystemInit+0xec>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c6a:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <SystemInit+0x100>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	4b10      	ldr	r3, [pc, #64]	@ (8000cb0 <SystemInit+0x104>)
 8000c70:	4013      	ands	r3, r2
 8000c72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c76:	d202      	bcs.n	8000c7e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c78:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <SystemInit+0x108>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <SystemInit+0x10c>)
 8000c80:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c84:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00
 8000c94:	52002000 	.word	0x52002000
 8000c98:	58024400 	.word	0x58024400
 8000c9c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ca0:	02020200 	.word	0x02020200
 8000ca4:	01ff0000 	.word	0x01ff0000
 8000ca8:	01010280 	.word	0x01010280
 8000cac:	5c001000 	.word	0x5c001000
 8000cb0:	ffff0000 	.word	0xffff0000
 8000cb4:	51008108 	.word	0x51008108
 8000cb8:	52004000 	.word	0x52004000

08000cbc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cc2:	4a23      	ldr	r2, [pc, #140]	@ (8000d50 <MX_USART3_UART_Init+0x94>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ccc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d04:	4811      	ldr	r0, [pc, #68]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d06:	f004 f8ab 	bl	8004e60 <HAL_UART_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d10:	f7ff fefc 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d14:	2100      	movs	r1, #0
 8000d16:	480d      	ldr	r0, [pc, #52]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d18:	f005 f8b3 	bl	8005e82 <HAL_UARTEx_SetTxFifoThreshold>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d22:	f7ff fef3 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d26:	2100      	movs	r1, #0
 8000d28:	4808      	ldr	r0, [pc, #32]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d2a:	f005 f8e8 	bl	8005efe <HAL_UARTEx_SetRxFifoThreshold>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d34:	f7ff feea 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d38:	4804      	ldr	r0, [pc, #16]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d3a:	f005 f869 	bl	8005e10 <HAL_UARTEx_DisableFifoMode>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d44:	f7ff fee2 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	240001dc 	.word	0x240001dc
 8000d50:	40004800 	.word	0x40004800

08000d54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b0ba      	sub	sp, #232	@ 0xe8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	22c0      	movs	r2, #192	@ 0xc0
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f005 fc56 	bl	8006626 <memset>
  if(uartHandle->Instance==USART3)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a27      	ldr	r2, [pc, #156]	@ (8000e1c <HAL_UART_MspInit+0xc8>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d146      	bne.n	8000e12 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d84:	f04f 0202 	mov.w	r2, #2
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 fa34 	bl	8003208 <HAL_RCCEx_PeriphCLKConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000da6:	f7ff feb1 	bl	8000b0c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000daa:	4b1d      	ldr	r3, [pc, #116]	@ (8000e20 <HAL_UART_MspInit+0xcc>)
 8000dac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000db0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e20 <HAL_UART_MspInit+0xcc>)
 8000db2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000db6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000dba:	4b19      	ldr	r3, [pc, #100]	@ (8000e20 <HAL_UART_MspInit+0xcc>)
 8000dbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc8:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <HAL_UART_MspInit+0xcc>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dce:	4a14      	ldr	r2, [pc, #80]	@ (8000e20 <HAL_UART_MspInit+0xcc>)
 8000dd0:	f043 0308 	orr.w	r3, r3, #8
 8000dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd8:	4b11      	ldr	r3, [pc, #68]	@ (8000e20 <HAL_UART_MspInit+0xcc>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dde:	f003 0308 	and.w	r3, r3, #8
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000de6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e00:	2307      	movs	r3, #7
 8000e02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e06:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <HAL_UART_MspInit+0xd0>)
 8000e0e:	f000 fed1 	bl	8001bb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e12:	bf00      	nop
 8000e14:	37e8      	adds	r7, #232	@ 0xe8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40004800 	.word	0x40004800
 8000e20:	58024400 	.word	0x58024400
 8000e24:	58020c00 	.word	0x58020c00

08000e28 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e2c:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e2e:	4a16      	ldr	r2, [pc, #88]	@ (8000e88 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000e30:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000e32:	4b14      	ldr	r3, [pc, #80]	@ (8000e84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e34:	2209      	movs	r2, #9
 8000e36:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e38:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e46:	2202      	movs	r2, #2
 8000e48:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	@ (8000e84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e62:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e6e:	4805      	ldr	r0, [pc, #20]	@ (8000e84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e70:	f001 f869 	bl	8001f46 <HAL_PCD_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000e7a:	f7ff fe47 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	24000270 	.word	0x24000270
 8000e88:	40080000 	.word	0x40080000

08000e8c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b0ba      	sub	sp, #232	@ 0xe8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	22c0      	movs	r2, #192	@ 0xc0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f005 fbba 	bl	8006626 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a30      	ldr	r2, [pc, #192]	@ (8000f78 <HAL_PCD_MspInit+0xec>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d159      	bne.n	8000f70 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ebc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000ec0:	f04f 0300 	mov.w	r3, #0
 8000ec4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000ec8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000ecc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f002 f997 	bl	8003208 <HAL_RCCEx_PeriphCLKConfig>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000ee0:	f7ff fe14 	bl	8000b0c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000ee4:	f001 f99a 	bl	800221c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	4b24      	ldr	r3, [pc, #144]	@ (8000f7c <HAL_PCD_MspInit+0xf0>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eee:	4a23      	ldr	r2, [pc, #140]	@ (8000f7c <HAL_PCD_MspInit+0xf0>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ef8:	4b20      	ldr	r3, [pc, #128]	@ (8000f7c <HAL_PCD_MspInit+0xf0>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f06:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f20:	230a      	movs	r3, #10
 8000f22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4814      	ldr	r0, [pc, #80]	@ (8000f80 <HAL_PCD_MspInit+0xf4>)
 8000f2e:	f000 fe41 	bl	8001bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	480c      	ldr	r0, [pc, #48]	@ (8000f80 <HAL_PCD_MspInit+0xf4>)
 8000f4e:	f000 fe31 	bl	8001bb4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f52:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <HAL_PCD_MspInit+0xf0>)
 8000f54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f58:	4a08      	ldr	r2, [pc, #32]	@ (8000f7c <HAL_PCD_MspInit+0xf0>)
 8000f5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000f5e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f62:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <HAL_PCD_MspInit+0xf0>)
 8000f64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000f70:	bf00      	nop
 8000f72:	37e8      	adds	r7, #232	@ 0xe8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40080000 	.word	0x40080000
 8000f7c:	58024400 	.word	0x58024400
 8000f80:	58020000 	.word	0x58020000

08000f84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f88:	f7ff fe10 	bl	8000bac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f8c:	480c      	ldr	r0, [pc, #48]	@ (8000fc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f8e:	490d      	ldr	r1, [pc, #52]	@ (8000fc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f90:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f94:	e002      	b.n	8000f9c <LoopCopyDataInit>

08000f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9a:	3304      	adds	r3, #4

08000f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa0:	d3f9      	bcc.n	8000f96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fa4:	4c0a      	ldr	r4, [pc, #40]	@ (8000fd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa8:	e001      	b.n	8000fae <LoopFillZerobss>

08000faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fac:	3204      	adds	r2, #4

08000fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb0:	d3fb      	bcc.n	8000faa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fb2:	f005 fb41 	bl	8006638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb6:	f7ff fcfd 	bl	80009b4 <main>
  bx  lr
 8000fba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fbc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fc0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fc4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000fc8:	080066e0 	.word	0x080066e0
  ldr r2, =_sbss
 8000fcc:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000fd0:	24000758 	.word	0x24000758

08000fd4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd4:	e7fe      	b.n	8000fd4 <ADC3_IRQHandler>
	...

08000fd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fde:	2003      	movs	r0, #3
 8000fe0:	f000 f982 	bl	80012e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fe4:	f001 ff3a 	bl	8002e5c <HAL_RCC_GetSysClockFreq>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <HAL_Init+0x68>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	0a1b      	lsrs	r3, r3, #8
 8000ff0:	f003 030f 	and.w	r3, r3, #15
 8000ff4:	4913      	ldr	r1, [pc, #76]	@ (8001044 <HAL_Init+0x6c>)
 8000ff6:	5ccb      	ldrb	r3, [r1, r3]
 8000ff8:	f003 031f 	and.w	r3, r3, #31
 8000ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8001000:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001002:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <HAL_Init+0x68>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	4a0e      	ldr	r2, [pc, #56]	@ (8001044 <HAL_Init+0x6c>)
 800100c:	5cd3      	ldrb	r3, [r2, r3]
 800100e:	f003 031f 	and.w	r3, r3, #31
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	fa22 f303 	lsr.w	r3, r2, r3
 8001018:	4a0b      	ldr	r2, [pc, #44]	@ (8001048 <HAL_Init+0x70>)
 800101a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800101c:	4a0b      	ldr	r2, [pc, #44]	@ (800104c <HAL_Init+0x74>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001022:	2000      	movs	r0, #0
 8001024:	f000 f814 	bl	8001050 <HAL_InitTick>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e002      	b.n	8001038 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001032:	f7ff fd71 	bl	8000b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	58024400 	.word	0x58024400
 8001044:	08006698 	.word	0x08006698
 8001048:	24000004 	.word	0x24000004
 800104c:	24000000 	.word	0x24000000

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001058:	4b15      	ldr	r3, [pc, #84]	@ (80010b0 <HAL_InitTick+0x60>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e021      	b.n	80010a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001064:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <HAL_InitTick+0x64>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <HAL_InitTick+0x60>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001072:	fbb3 f3f1 	udiv	r3, r3, r1
 8001076:	fbb2 f3f3 	udiv	r3, r2, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f959 	bl	8001332 <HAL_SYSTICK_Config>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e00e      	b.n	80010a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d80a      	bhi.n	80010a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001090:	2200      	movs	r2, #0
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f000 f931 	bl	80012fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800109c:	4a06      	ldr	r2, [pc, #24]	@ (80010b8 <HAL_InitTick+0x68>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e000      	b.n	80010a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	2400000c 	.word	0x2400000c
 80010b4:	24000000 	.word	0x24000000
 80010b8:	24000008 	.word	0x24000008

080010bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <HAL_IncTick+0x20>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_IncTick+0x24>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a04      	ldr	r2, [pc, #16]	@ (80010e0 <HAL_IncTick+0x24>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	2400000c 	.word	0x2400000c
 80010e0:	24000754 	.word	0x24000754

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b03      	ldr	r3, [pc, #12]	@ (80010f8 <HAL_GetTick+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	24000754 	.word	0x24000754

080010fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001104:	f7ff ffee 	bl	80010e4 <HAL_GetTick>
 8001108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001114:	d005      	beq.n	8001122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001116:	4b0a      	ldr	r3, [pc, #40]	@ (8001140 <HAL_Delay+0x44>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001122:	bf00      	nop
 8001124:	f7ff ffde 	bl	80010e4 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	429a      	cmp	r2, r3
 8001132:	d8f7      	bhi.n	8001124 <HAL_Delay+0x28>
  {
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2400000c 	.word	0x2400000c

08001144 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001148:	4b03      	ldr	r3, [pc, #12]	@ (8001158 <HAL_GetREVID+0x14>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	0c1b      	lsrs	r3, r3, #16
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	5c001000 	.word	0x5c001000

0800115c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800116c:	4904      	ldr	r1, [pc, #16]	@ (8001180 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4313      	orrs	r3, r2
 8001172:	604b      	str	r3, [r1, #4]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	58000400 	.word	0x58000400

08001184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011ac:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	@ (80011c4 <__NVIC_SetPriorityGrouping+0x40>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00
 80011c8:	05fa0000 	.word	0x05fa0000

080011cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	db0a      	blt.n	8001212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	490c      	ldr	r1, [pc, #48]	@ (8001234 <__NVIC_SetPriority+0x4c>)
 8001202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001206:	0112      	lsls	r2, r2, #4
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	440b      	add	r3, r1
 800120c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001210:	e00a      	b.n	8001228 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4908      	ldr	r1, [pc, #32]	@ (8001238 <__NVIC_SetPriority+0x50>)
 8001218:	88fb      	ldrh	r3, [r7, #6]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	3b04      	subs	r3, #4
 8001220:	0112      	lsls	r2, r2, #4
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	440b      	add	r3, r1
 8001226:	761a      	strb	r2, [r3, #24]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000e100 	.word	0xe000e100
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	@ 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f1c3 0307 	rsb	r3, r3, #7
 8001256:	2b04      	cmp	r3, #4
 8001258:	bf28      	it	cs
 800125a:	2304      	movcs	r3, #4
 800125c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3304      	adds	r3, #4
 8001262:	2b06      	cmp	r3, #6
 8001264:	d902      	bls.n	800126c <NVIC_EncodePriority+0x30>
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3b03      	subs	r3, #3
 800126a:	e000      	b.n	800126e <NVIC_EncodePriority+0x32>
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	f04f 32ff 	mov.w	r2, #4294967295
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43da      	mvns	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	401a      	ands	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001284:	f04f 31ff 	mov.w	r1, #4294967295
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa01 f303 	lsl.w	r3, r1, r3
 800128e:	43d9      	mvns	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	4313      	orrs	r3, r2
         );
}
 8001296:	4618      	mov	r0, r3
 8001298:	3724      	adds	r7, #36	@ 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b4:	d301      	bcc.n	80012ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00f      	b.n	80012da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ba:	4a0a      	ldr	r2, [pc, #40]	@ (80012e4 <SysTick_Config+0x40>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c2:	210f      	movs	r1, #15
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f7ff ff8e 	bl	80011e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012cc:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <SysTick_Config+0x40>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d2:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <SysTick_Config+0x40>)
 80012d4:	2207      	movs	r2, #7
 80012d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	e000e010 	.word	0xe000e010

080012e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff47 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff5e 	bl	80011cc <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff90 	bl	800123c <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5f 	bl	80011e8 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ffb2 	bl	80012a4 <SysTick_Config>
 8001340:	4603      	mov	r3, r0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e0e3      	b.n	8001526 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001364:	2b00      	cmp	r3, #0
 8001366:	d106      	bne.n	8001376 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2223      	movs	r2, #35	@ 0x23
 800136c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff f975 	bl	8000660 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	4b6e      	ldr	r3, [pc, #440]	@ (8001530 <HAL_ETH_Init+0x1e4>)
 8001378:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800137c:	4a6c      	ldr	r2, [pc, #432]	@ (8001530 <HAL_ETH_Init+0x1e4>)
 800137e:	f043 0302 	orr.w	r3, r3, #2
 8001382:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001386:	4b6a      	ldr	r3, [pc, #424]	@ (8001530 <HAL_ETH_Init+0x1e4>)
 8001388:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7a1b      	ldrb	r3, [r3, #8]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d103      	bne.n	80013a4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800139c:	2000      	movs	r0, #0
 800139e:	f7ff fedd 	bl	800115c <HAL_SYSCFG_ETHInterfaceSelect>
 80013a2:	e003      	b.n	80013ac <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80013a4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80013a8:	f7ff fed8 	bl	800115c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80013ac:	4b61      	ldr	r3, [pc, #388]	@ (8001534 <HAL_ETH_Init+0x1e8>)
 80013ae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6812      	ldr	r2, [r2, #0]
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013c8:	f7ff fe8c 	bl	80010e4 <HAL_GetTick>
 80013cc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013ce:	e011      	b.n	80013f4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013d0:	f7ff fe88 	bl	80010e4 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013de:	d909      	bls.n	80013f4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2204      	movs	r2, #4
 80013e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	22e0      	movs	r2, #224	@ 0xe0
 80013ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e098      	b.n	8001526 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1e4      	bne.n	80013d0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f89e 	bl	8001548 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800140c:	f001 fea0 	bl	8003150 <HAL_RCC_GetHCLKFreq>
 8001410:	4603      	mov	r3, r0
 8001412:	4a49      	ldr	r2, [pc, #292]	@ (8001538 <HAL_ETH_Init+0x1ec>)
 8001414:	fba2 2303 	umull	r2, r3, r2, r3
 8001418:	0c9a      	lsrs	r2, r3, #18
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	3a01      	subs	r2, #1
 8001420:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 fa81 	bl	800192c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001432:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001436:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001442:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001446:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d009      	beq.n	800146a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	22e0      	movs	r2, #224	@ 0xe0
 8001462:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e05d      	b.n	8001526 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001472:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001476:	4b31      	ldr	r3, [pc, #196]	@ (800153c <HAL_ETH_Init+0x1f0>)
 8001478:	4013      	ands	r3, r2
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6952      	ldr	r2, [r2, #20]
 800147e:	0051      	lsls	r1, r2, #1
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6812      	ldr	r2, [r2, #0]
 8001484:	430b      	orrs	r3, r1
 8001486:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800148a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 fae9 	bl	8001a66 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 fb2f 	bl	8001af8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	3305      	adds	r3, #5
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	021a      	lsls	r2, r3, #8
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	3304      	adds	r3, #4
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	3303      	adds	r3, #3
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	061a      	lsls	r2, r3, #24
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	3302      	adds	r3, #2
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	041b      	lsls	r3, r3, #16
 80014cc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	3301      	adds	r3, #1
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014d8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014e6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014e8:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <HAL_ETH_Init+0x1f4>)
 80014fa:	430b      	orrs	r3, r1
 80014fc:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b0d      	ldr	r3, [pc, #52]	@ (8001544 <HAL_ETH_Init+0x1f8>)
 800150e:	430b      	orrs	r3, r1
 8001510:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2210      	movs	r2, #16
 8001520:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	58024400 	.word	0x58024400
 8001534:	58000400 	.word	0x58000400
 8001538:	431bde83 	.word	0x431bde83
 800153c:	ffff8001 	.word	0xffff8001
 8001540:	0c020060 	.word	0x0c020060
 8001544:	0c20c000 	.word	0x0c20c000

08001548 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001558:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001560:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001562:	f001 fdf5 	bl	8003150 <HAL_RCC_GetHCLKFreq>
 8001566:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	4a1a      	ldr	r2, [pc, #104]	@ (80015d4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d804      	bhi.n	800157a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	e022      	b.n	80015c0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	4a16      	ldr	r2, [pc, #88]	@ (80015d8 <HAL_ETH_SetMDIOClockRange+0x90>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d204      	bcs.n	800158c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	e019      	b.n	80015c0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	4a13      	ldr	r2, [pc, #76]	@ (80015dc <HAL_ETH_SetMDIOClockRange+0x94>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d915      	bls.n	80015c0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	4a12      	ldr	r2, [pc, #72]	@ (80015e0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d804      	bhi.n	80015a6 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	e00c      	b.n	80015c0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	4a0e      	ldr	r2, [pc, #56]	@ (80015e4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d804      	bhi.n	80015b8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	e003      	b.n	80015c0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80015be:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	02160ebf 	.word	0x02160ebf
 80015d8:	03938700 	.word	0x03938700
 80015dc:	05f5e0ff 	.word	0x05f5e0ff
 80015e0:	08f0d17f 	.word	0x08f0d17f
 80015e4:	0ee6b27f 	.word	0x0ee6b27f

080015e8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80015fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	791b      	ldrb	r3, [r3, #4]
 8001600:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001602:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	7b1b      	ldrb	r3, [r3, #12]
 8001608:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800160a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	7b5b      	ldrb	r3, [r3, #13]
 8001610:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001612:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	7b9b      	ldrb	r3, [r3, #14]
 8001618:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800161a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	7bdb      	ldrb	r3, [r3, #15]
 8001620:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001622:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	7c12      	ldrb	r2, [r2, #16]
 8001628:	2a00      	cmp	r2, #0
 800162a:	d102      	bne.n	8001632 <ETH_SetMACConfig+0x4a>
 800162c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001630:	e000      	b.n	8001634 <ETH_SetMACConfig+0x4c>
 8001632:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001634:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	7c52      	ldrb	r2, [r2, #17]
 800163a:	2a00      	cmp	r2, #0
 800163c:	d102      	bne.n	8001644 <ETH_SetMACConfig+0x5c>
 800163e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001642:	e000      	b.n	8001646 <ETH_SetMACConfig+0x5e>
 8001644:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001646:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	7c9b      	ldrb	r3, [r3, #18]
 800164c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800164e:	431a      	orrs	r2, r3
               macconf->Speed |
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001654:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800165a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	7f1b      	ldrb	r3, [r3, #28]
 8001660:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001662:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	7f5b      	ldrb	r3, [r3, #29]
 8001668:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800166a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	7f92      	ldrb	r2, [r2, #30]
 8001670:	2a00      	cmp	r2, #0
 8001672:	d102      	bne.n	800167a <ETH_SetMACConfig+0x92>
 8001674:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001678:	e000      	b.n	800167c <ETH_SetMACConfig+0x94>
 800167a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800167c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	7fdb      	ldrb	r3, [r3, #31]
 8001682:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001684:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	f892 2020 	ldrb.w	r2, [r2, #32]
 800168c:	2a00      	cmp	r2, #0
 800168e:	d102      	bne.n	8001696 <ETH_SetMACConfig+0xae>
 8001690:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001694:	e000      	b.n	8001698 <ETH_SetMACConfig+0xb0>
 8001696:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001698:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800169e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80016a6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80016a8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80016ae:	4313      	orrs	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b56      	ldr	r3, [pc, #344]	@ (8001814 <ETH_SetMACConfig+0x22c>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	68f9      	ldr	r1, [r7, #12]
 80016c2:	430b      	orrs	r3, r1
 80016c4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016ca:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80016d2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016d4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016dc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80016de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80016e6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80016e8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80016f0:	2a00      	cmp	r2, #0
 80016f2:	d102      	bne.n	80016fa <ETH_SetMACConfig+0x112>
 80016f4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016f8:	e000      	b.n	80016fc <ETH_SetMACConfig+0x114>
 80016fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80016fc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001702:	4313      	orrs	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	4b42      	ldr	r3, [pc, #264]	@ (8001818 <ETH_SetMACConfig+0x230>)
 800170e:	4013      	ands	r3, r2
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6812      	ldr	r2, [r2, #0]
 8001714:	68f9      	ldr	r1, [r7, #12]
 8001716:	430b      	orrs	r3, r1
 8001718:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001720:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001726:	4313      	orrs	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68da      	ldr	r2, [r3, #12]
 8001730:	4b3a      	ldr	r3, [pc, #232]	@ (800181c <ETH_SetMACConfig+0x234>)
 8001732:	4013      	ands	r3, r2
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	68f9      	ldr	r1, [r7, #12]
 800173a:	430b      	orrs	r3, r1
 800173c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001744:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800174a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001752:	2a00      	cmp	r2, #0
 8001754:	d101      	bne.n	800175a <ETH_SetMACConfig+0x172>
 8001756:	2280      	movs	r2, #128	@ 0x80
 8001758:	e000      	b.n	800175c <ETH_SetMACConfig+0x174>
 800175a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800175c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001762:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001764:	4313      	orrs	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800176e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001772:	4013      	ands	r3, r2
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	68f9      	ldr	r1, [r7, #12]
 800177a:	430b      	orrs	r3, r1
 800177c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001784:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800178c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800178e:	4313      	orrs	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800179a:	f023 0103 	bic.w	r1, r3, #3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80017b2:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80017ce:	2a00      	cmp	r2, #0
 80017d0:	d101      	bne.n	80017d6 <ETH_SetMACConfig+0x1ee>
 80017d2:	2240      	movs	r2, #64	@ 0x40
 80017d4:	e000      	b.n	80017d8 <ETH_SetMACConfig+0x1f0>
 80017d6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80017d8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80017e0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80017e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80017ea:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80017ec:	4313      	orrs	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80017f8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	430a      	orrs	r2, r1
 8001804:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	00048083 	.word	0x00048083
 8001818:	c0f88000 	.word	0xc0f88000
 800181c:	fffffef0 	.word	0xfffffef0

08001820 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b38      	ldr	r3, [pc, #224]	@ (8001918 <ETH_SetDMAConfig+0xf8>)
 8001836:	4013      	ands	r3, r2
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	6811      	ldr	r1, [r2, #0]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	430b      	orrs	r3, r1
 8001842:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001846:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	791b      	ldrb	r3, [r3, #4]
 800184c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001852:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	7b1b      	ldrb	r3, [r3, #12]
 8001858:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800185a:	4313      	orrs	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	4b2c      	ldr	r3, [pc, #176]	@ (800191c <ETH_SetDMAConfig+0xfc>)
 800186a:	4013      	ands	r3, r2
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	68f9      	ldr	r1, [r7, #12]
 8001872:	430b      	orrs	r3, r1
 8001874:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001878:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	7b5b      	ldrb	r3, [r3, #13]
 800187e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001884:	4313      	orrs	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001890:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001894:	4b22      	ldr	r3, [pc, #136]	@ (8001920 <ETH_SetDMAConfig+0x100>)
 8001896:	4013      	ands	r3, r2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	68f9      	ldr	r1, [r7, #12]
 800189e:	430b      	orrs	r3, r1
 80018a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018a4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	7d1b      	ldrb	r3, [r3, #20]
 80018b0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80018b2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	7f5b      	ldrb	r3, [r3, #29]
 80018b8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80018ba:	4313      	orrs	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018c6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80018ca:	4b16      	ldr	r3, [pc, #88]	@ (8001924 <ETH_SetDMAConfig+0x104>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	68f9      	ldr	r1, [r7, #12]
 80018d4:	430b      	orrs	r3, r1
 80018d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018da:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	7f1b      	ldrb	r3, [r3, #28]
 80018e2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80018e8:	4313      	orrs	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018f4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80018f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <ETH_SetDMAConfig+0x108>)
 80018fa:	4013      	ands	r3, r2
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	68f9      	ldr	r1, [r7, #12]
 8001902:	430b      	orrs	r3, r1
 8001904:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001908:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	ffff87fd 	.word	0xffff87fd
 800191c:	ffff2ffe 	.word	0xffff2ffe
 8001920:	fffec000 	.word	0xfffec000
 8001924:	ffc0efef 	.word	0xffc0efef
 8001928:	7fc0ffff 	.word	0x7fc0ffff

0800192c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b0a4      	sub	sp, #144	@ 0x90
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001934:	2301      	movs	r3, #1
 8001936:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800193a:	2300      	movs	r3, #0
 800193c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800194a:	2301      	movs	r3, #1
 800194c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001950:	2301      	movs	r3, #1
 8001952:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001956:	2301      	movs	r3, #1
 8001958:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800195c:	2300      	movs	r3, #0
 800195e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001962:	2301      	movs	r3, #1
 8001964:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001968:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800196c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001974:	2300      	movs	r3, #0
 8001976:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001984:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001988:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001990:	2300      	movs	r3, #0
 8001992:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001994:	2301      	movs	r3, #1
 8001996:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80019a6:	2300      	movs	r3, #0
 80019a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80019ae:	2300      	movs	r3, #0
 80019b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80019be:	2301      	movs	r3, #1
 80019c0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80019c4:	2320      	movs	r3, #32
 80019c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80019ca:	2301      	movs	r3, #1
 80019cc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80019d6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80019da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80019dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019e0:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80019e8:	2302      	movs	r3, #2
 80019ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001a00:	2301      	movs	r3, #1
 8001a02:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001a06:	2300      	movs	r3, #0
 8001a08:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a14:	4619      	mov	r1, r3
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff fde6 	bl	80015e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a20:	2301      	movs	r3, #1
 8001a22:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a36:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a3a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a40:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a44:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001a4c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001a50:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a52:	f107 0308 	add.w	r3, r7, #8
 8001a56:	4619      	mov	r1, r3
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff fee1 	bl	8001820 <ETH_SetDMAConfig>
}
 8001a5e:	bf00      	nop
 8001a60:	3790      	adds	r7, #144	@ 0x90
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b085      	sub	sp, #20
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	e01d      	b.n	8001ab0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68d9      	ldr	r1, [r3, #12]
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	440b      	add	r3, r1
 8001a84:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001a9e:	68b9      	ldr	r1, [r7, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	3206      	adds	r2, #6
 8001aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	3301      	adds	r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d9de      	bls.n	8001a74 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ad8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ae8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	e023      	b.n	8001b4e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6919      	ldr	r1, [r3, #16]
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4413      	add	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	440b      	add	r3, r1
 8001b16:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	2200      	movs	r2, #0
 8001b22:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2200      	movs	r2, #0
 8001b34:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	3212      	adds	r2, #18
 8001b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d9d8      	bls.n	8001b06 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b8e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ba2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001ba6:	bf00      	nop
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	@ 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001bc2:	4b89      	ldr	r3, [pc, #548]	@ (8001de8 <HAL_GPIO_Init+0x234>)
 8001bc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bc6:	e194      	b.n	8001ef2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	2101      	movs	r1, #1
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 8186 	beq.w	8001eec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d005      	beq.n	8001bf8 <HAL_GPIO_Init+0x44>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d130      	bne.n	8001c5a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	2203      	movs	r2, #3
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c2e:	2201      	movs	r2, #1
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	091b      	lsrs	r3, r3, #4
 8001c44:	f003 0201 	and.w	r2, r3, #1
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d017      	beq.n	8001c96 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	2203      	movs	r2, #3
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d123      	bne.n	8001cea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	08da      	lsrs	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3208      	adds	r2, #8
 8001caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	220f      	movs	r2, #15
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	691a      	ldr	r2, [r3, #16]
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	08da      	lsrs	r2, r3, #3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3208      	adds	r2, #8
 8001ce4:	69b9      	ldr	r1, [r7, #24]
 8001ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 0203 	and.w	r2, r3, #3
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 80e0 	beq.w	8001eec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001dec <HAL_GPIO_Init+0x238>)
 8001d2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d32:	4a2e      	ldr	r2, [pc, #184]	@ (8001dec <HAL_GPIO_Init+0x238>)
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001dec <HAL_GPIO_Init+0x238>)
 8001d3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d4a:	4a29      	ldr	r2, [pc, #164]	@ (8001df0 <HAL_GPIO_Init+0x23c>)
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	3302      	adds	r3, #2
 8001d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	220f      	movs	r2, #15
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a20      	ldr	r2, [pc, #128]	@ (8001df4 <HAL_GPIO_Init+0x240>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d052      	beq.n	8001e1c <HAL_GPIO_Init+0x268>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a1f      	ldr	r2, [pc, #124]	@ (8001df8 <HAL_GPIO_Init+0x244>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d031      	beq.n	8001de2 <HAL_GPIO_Init+0x22e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a1e      	ldr	r2, [pc, #120]	@ (8001dfc <HAL_GPIO_Init+0x248>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d02b      	beq.n	8001dde <HAL_GPIO_Init+0x22a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a1d      	ldr	r2, [pc, #116]	@ (8001e00 <HAL_GPIO_Init+0x24c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d025      	beq.n	8001dda <HAL_GPIO_Init+0x226>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a1c      	ldr	r2, [pc, #112]	@ (8001e04 <HAL_GPIO_Init+0x250>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d01f      	beq.n	8001dd6 <HAL_GPIO_Init+0x222>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a1b      	ldr	r2, [pc, #108]	@ (8001e08 <HAL_GPIO_Init+0x254>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d019      	beq.n	8001dd2 <HAL_GPIO_Init+0x21e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a1a      	ldr	r2, [pc, #104]	@ (8001e0c <HAL_GPIO_Init+0x258>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d013      	beq.n	8001dce <HAL_GPIO_Init+0x21a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a19      	ldr	r2, [pc, #100]	@ (8001e10 <HAL_GPIO_Init+0x25c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d00d      	beq.n	8001dca <HAL_GPIO_Init+0x216>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a18      	ldr	r2, [pc, #96]	@ (8001e14 <HAL_GPIO_Init+0x260>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d007      	beq.n	8001dc6 <HAL_GPIO_Init+0x212>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a17      	ldr	r2, [pc, #92]	@ (8001e18 <HAL_GPIO_Init+0x264>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d101      	bne.n	8001dc2 <HAL_GPIO_Init+0x20e>
 8001dbe:	2309      	movs	r3, #9
 8001dc0:	e02d      	b.n	8001e1e <HAL_GPIO_Init+0x26a>
 8001dc2:	230a      	movs	r3, #10
 8001dc4:	e02b      	b.n	8001e1e <HAL_GPIO_Init+0x26a>
 8001dc6:	2308      	movs	r3, #8
 8001dc8:	e029      	b.n	8001e1e <HAL_GPIO_Init+0x26a>
 8001dca:	2307      	movs	r3, #7
 8001dcc:	e027      	b.n	8001e1e <HAL_GPIO_Init+0x26a>
 8001dce:	2306      	movs	r3, #6
 8001dd0:	e025      	b.n	8001e1e <HAL_GPIO_Init+0x26a>
 8001dd2:	2305      	movs	r3, #5
 8001dd4:	e023      	b.n	8001e1e <HAL_GPIO_Init+0x26a>
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	e021      	b.n	8001e1e <HAL_GPIO_Init+0x26a>
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e01f      	b.n	8001e1e <HAL_GPIO_Init+0x26a>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e01d      	b.n	8001e1e <HAL_GPIO_Init+0x26a>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e01b      	b.n	8001e1e <HAL_GPIO_Init+0x26a>
 8001de6:	bf00      	nop
 8001de8:	58000080 	.word	0x58000080
 8001dec:	58024400 	.word	0x58024400
 8001df0:	58000400 	.word	0x58000400
 8001df4:	58020000 	.word	0x58020000
 8001df8:	58020400 	.word	0x58020400
 8001dfc:	58020800 	.word	0x58020800
 8001e00:	58020c00 	.word	0x58020c00
 8001e04:	58021000 	.word	0x58021000
 8001e08:	58021400 	.word	0x58021400
 8001e0c:	58021800 	.word	0x58021800
 8001e10:	58021c00 	.word	0x58021c00
 8001e14:	58022000 	.word	0x58022000
 8001e18:	58022400 	.word	0x58022400
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	f002 0203 	and.w	r2, r2, #3
 8001e24:	0092      	lsls	r2, r2, #2
 8001e26:	4093      	lsls	r3, r2
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e2e:	4938      	ldr	r1, [pc, #224]	@ (8001f10 <HAL_GPIO_Init+0x35c>)
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	089b      	lsrs	r3, r3, #2
 8001e34:	3302      	adds	r3, #2
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f47f ae63 	bne.w	8001bc8 <HAL_GPIO_Init+0x14>
  }
}
 8001f02:	bf00      	nop
 8001f04:	bf00      	nop
 8001f06:	3724      	adds	r7, #36	@ 0x24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	58000400 	.word	0x58000400

08001f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	807b      	strh	r3, [r7, #2]
 8001f20:	4613      	mov	r3, r2
 8001f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f24:	787b      	ldrb	r3, [r7, #1]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f2a:	887a      	ldrh	r2, [r7, #2]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f30:	e003      	b.n	8001f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f32:	887b      	ldrh	r3, [r7, #2]
 8001f34:	041a      	lsls	r2, r3, #16
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	619a      	str	r2, [r3, #24]
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af02      	add	r7, sp, #8
 8001f4c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0fe      	b.n	8002156 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d106      	bne.n	8001f72 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7fe ff8d 	bl	8000e8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2203      	movs	r2, #3
 8001f76:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f004 f8bc 	bl	80060fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	7c1a      	ldrb	r2, [r3, #16]
 8001f8c:	f88d 2000 	strb.w	r2, [sp]
 8001f90:	3304      	adds	r3, #4
 8001f92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f94:	f004 f840 	bl	8006018 <USB_CoreInit>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e0d5      	b.n	8002156 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f004 f8b4 	bl	800611e <USB_SetCurrentMode>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0c6      	b.n	8002156 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]
 8001fcc:	e04a      	b.n	8002064 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fce:	7bfa      	ldrb	r2, [r7, #15]
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	440b      	add	r3, r1
 8001fdc:	3315      	adds	r3, #21
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fe2:	7bfa      	ldrb	r2, [r7, #15]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4413      	add	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	3314      	adds	r3, #20
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	b298      	uxth	r0, r3
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	332e      	adds	r3, #46	@ 0x2e
 800200a:	4602      	mov	r2, r0
 800200c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	3318      	adds	r3, #24
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	331c      	adds	r3, #28
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002036:	7bfa      	ldrb	r2, [r7, #15]
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4413      	add	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	3320      	adds	r3, #32
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800204a:	7bfa      	ldrb	r2, [r7, #15]
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	3324      	adds	r3, #36	@ 0x24
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	3301      	adds	r3, #1
 8002062:	73fb      	strb	r3, [r7, #15]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	791b      	ldrb	r3, [r3, #4]
 8002068:	7bfa      	ldrb	r2, [r7, #15]
 800206a:	429a      	cmp	r2, r3
 800206c:	d3af      	bcc.n	8001fce <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800206e:	2300      	movs	r3, #0
 8002070:	73fb      	strb	r3, [r7, #15]
 8002072:	e044      	b.n	80020fe <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002074:	7bfa      	ldrb	r2, [r7, #15]
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800208a:	7bfa      	ldrb	r2, [r7, #15]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4413      	add	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020cc:	7bfa      	ldrb	r2, [r7, #15]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4413      	add	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020e2:	7bfa      	ldrb	r2, [r7, #15]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	3301      	adds	r3, #1
 80020fc:	73fb      	strb	r3, [r7, #15]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	791b      	ldrb	r3, [r3, #4]
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	429a      	cmp	r2, r3
 8002106:	d3b5      	bcc.n	8002074 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7c1a      	ldrb	r2, [r3, #16]
 8002110:	f88d 2000 	strb.w	r2, [sp]
 8002114:	3304      	adds	r3, #4
 8002116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002118:	f004 f84e 	bl	80061b8 <USB_DevInit>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d005      	beq.n	800212e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2202      	movs	r2, #2
 8002126:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e013      	b.n	8002156 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	7b1b      	ldrb	r3, [r3, #12]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d102      	bne.n	800214a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f80b 	bl	8002160 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f004 fa09 	bl	8006566 <USB_DevDisconnect>

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800218e:	4b05      	ldr	r3, [pc, #20]	@ (80021a4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002190:	4313      	orrs	r3, r2
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	10000003 	.word	0x10000003

080021a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80021b0:	4b19      	ldr	r3, [pc, #100]	@ (8002218 <HAL_PWREx_ConfigSupply+0x70>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d00a      	beq.n	80021d2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80021bc:	4b16      	ldr	r3, [pc, #88]	@ (8002218 <HAL_PWREx_ConfigSupply+0x70>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d001      	beq.n	80021ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e01f      	b.n	800220e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e01d      	b.n	800220e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80021d2:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <HAL_PWREx_ConfigSupply+0x70>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	f023 0207 	bic.w	r2, r3, #7
 80021da:	490f      	ldr	r1, [pc, #60]	@ (8002218 <HAL_PWREx_ConfigSupply+0x70>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4313      	orrs	r3, r2
 80021e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80021e2:	f7fe ff7f 	bl	80010e4 <HAL_GetTick>
 80021e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021e8:	e009      	b.n	80021fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021ea:	f7fe ff7b 	bl	80010e4 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021f8:	d901      	bls.n	80021fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e007      	b.n	800220e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021fe:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <HAL_PWREx_ConfigSupply+0x70>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002206:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800220a:	d1ee      	bne.n	80021ea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	58024800 	.word	0x58024800

0800221c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002220:	4b05      	ldr	r3, [pc, #20]	@ (8002238 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4a04      	ldr	r2, [pc, #16]	@ (8002238 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002226:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800222a:	60d3      	str	r3, [r2, #12]
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	58024800 	.word	0x58024800

0800223c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08c      	sub	sp, #48	@ 0x30
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d102      	bne.n	8002250 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	f000 bc48 	b.w	8002ae0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 8088 	beq.w	800236e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800225e:	4b99      	ldr	r3, [pc, #612]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002266:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002268:	4b96      	ldr	r3, [pc, #600]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 800226a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800226e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002270:	2b10      	cmp	r3, #16
 8002272:	d007      	beq.n	8002284 <HAL_RCC_OscConfig+0x48>
 8002274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002276:	2b18      	cmp	r3, #24
 8002278:	d111      	bne.n	800229e <HAL_RCC_OscConfig+0x62>
 800227a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d10c      	bne.n	800229e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002284:	4b8f      	ldr	r3, [pc, #572]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d06d      	beq.n	800236c <HAL_RCC_OscConfig+0x130>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d169      	bne.n	800236c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	f000 bc21 	b.w	8002ae0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022a6:	d106      	bne.n	80022b6 <HAL_RCC_OscConfig+0x7a>
 80022a8:	4b86      	ldr	r3, [pc, #536]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a85      	ldr	r2, [pc, #532]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 80022ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	e02e      	b.n	8002314 <HAL_RCC_OscConfig+0xd8>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x9c>
 80022be:	4b81      	ldr	r3, [pc, #516]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a80      	ldr	r2, [pc, #512]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 80022c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	4b7e      	ldr	r3, [pc, #504]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a7d      	ldr	r2, [pc, #500]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 80022d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	e01d      	b.n	8002314 <HAL_RCC_OscConfig+0xd8>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0xc0>
 80022e2:	4b78      	ldr	r3, [pc, #480]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a77      	ldr	r2, [pc, #476]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 80022e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b75      	ldr	r3, [pc, #468]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a74      	ldr	r2, [pc, #464]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 80022f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e00b      	b.n	8002314 <HAL_RCC_OscConfig+0xd8>
 80022fc:	4b71      	ldr	r3, [pc, #452]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a70      	ldr	r2, [pc, #448]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 8002302:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	4b6e      	ldr	r3, [pc, #440]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a6d      	ldr	r2, [pc, #436]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 800230e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d013      	beq.n	8002344 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7fe fee2 	bl	80010e4 <HAL_GetTick>
 8002320:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002324:	f7fe fede 	bl	80010e4 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	@ 0x64
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e3d4      	b.n	8002ae0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002336:	4b63      	ldr	r3, [pc, #396]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0xe8>
 8002342:	e014      	b.n	800236e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7fe fece 	bl	80010e4 <HAL_GetTick>
 8002348:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800234c:	f7fe feca 	bl	80010e4 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b64      	cmp	r3, #100	@ 0x64
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e3c0      	b.n	8002ae0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800235e:	4b59      	ldr	r3, [pc, #356]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x110>
 800236a:	e000      	b.n	800236e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 80ca 	beq.w	8002510 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800237c:	4b51      	ldr	r3, [pc, #324]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002384:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002386:	4b4f      	ldr	r3, [pc, #316]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 8002388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d007      	beq.n	80023a2 <HAL_RCC_OscConfig+0x166>
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	2b18      	cmp	r3, #24
 8002396:	d156      	bne.n	8002446 <HAL_RCC_OscConfig+0x20a>
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d151      	bne.n	8002446 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023a2:	4b48      	ldr	r3, [pc, #288]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_RCC_OscConfig+0x17e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e392      	b.n	8002ae0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023ba:	4b42      	ldr	r3, [pc, #264]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 0219 	bic.w	r2, r3, #25
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	493f      	ldr	r1, [pc, #252]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7fe fe8a 	bl	80010e4 <HAL_GetTick>
 80023d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d4:	f7fe fe86 	bl	80010e4 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e37c      	b.n	8002ae0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023e6:	4b37      	ldr	r3, [pc, #220]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f0      	beq.n	80023d4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f2:	f7fe fea7 	bl	8001144 <HAL_GetREVID>
 80023f6:	4603      	mov	r3, r0
 80023f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d817      	bhi.n	8002430 <HAL_RCC_OscConfig+0x1f4>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	2b40      	cmp	r3, #64	@ 0x40
 8002406:	d108      	bne.n	800241a <HAL_RCC_OscConfig+0x1de>
 8002408:	4b2e      	ldr	r3, [pc, #184]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002410:	4a2c      	ldr	r2, [pc, #176]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 8002412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002416:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002418:	e07a      	b.n	8002510 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241a:	4b2a      	ldr	r3, [pc, #168]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	031b      	lsls	r3, r3, #12
 8002428:	4926      	ldr	r1, [pc, #152]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 800242a:	4313      	orrs	r3, r2
 800242c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800242e:	e06f      	b.n	8002510 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002430:	4b24      	ldr	r3, [pc, #144]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	061b      	lsls	r3, r3, #24
 800243e:	4921      	ldr	r1, [pc, #132]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002444:	e064      	b.n	8002510 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d047      	beq.n	80024de <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800244e:	4b1d      	ldr	r3, [pc, #116]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 0219 	bic.w	r2, r3, #25
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	491a      	ldr	r1, [pc, #104]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 800245c:	4313      	orrs	r3, r2
 800245e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe fe40 	bl	80010e4 <HAL_GetTick>
 8002464:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002468:	f7fe fe3c 	bl	80010e4 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e332      	b.n	8002ae0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800247a:	4b12      	ldr	r3, [pc, #72]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002486:	f7fe fe5d 	bl	8001144 <HAL_GetREVID>
 800248a:	4603      	mov	r3, r0
 800248c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002490:	4293      	cmp	r3, r2
 8002492:	d819      	bhi.n	80024c8 <HAL_RCC_OscConfig+0x28c>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	2b40      	cmp	r3, #64	@ 0x40
 800249a:	d108      	bne.n	80024ae <HAL_RCC_OscConfig+0x272>
 800249c:	4b09      	ldr	r3, [pc, #36]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80024a4:	4a07      	ldr	r2, [pc, #28]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 80024a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024aa:	6053      	str	r3, [r2, #4]
 80024ac:	e030      	b.n	8002510 <HAL_RCC_OscConfig+0x2d4>
 80024ae:	4b05      	ldr	r3, [pc, #20]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	031b      	lsls	r3, r3, #12
 80024bc:	4901      	ldr	r1, [pc, #4]	@ (80024c4 <HAL_RCC_OscConfig+0x288>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	604b      	str	r3, [r1, #4]
 80024c2:	e025      	b.n	8002510 <HAL_RCC_OscConfig+0x2d4>
 80024c4:	58024400 	.word	0x58024400
 80024c8:	4b9a      	ldr	r3, [pc, #616]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	061b      	lsls	r3, r3, #24
 80024d6:	4997      	ldr	r1, [pc, #604]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	604b      	str	r3, [r1, #4]
 80024dc:	e018      	b.n	8002510 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024de:	4b95      	ldr	r3, [pc, #596]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a94      	ldr	r2, [pc, #592]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 80024e4:	f023 0301 	bic.w	r3, r3, #1
 80024e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ea:	f7fe fdfb 	bl	80010e4 <HAL_GetTick>
 80024ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f2:	f7fe fdf7 	bl	80010e4 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e2ed      	b.n	8002ae0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002504:	4b8b      	ldr	r3, [pc, #556]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1f0      	bne.n	80024f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80a9 	beq.w	8002670 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800251e:	4b85      	ldr	r3, [pc, #532]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002526:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002528:	4b82      	ldr	r3, [pc, #520]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 800252a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	2b08      	cmp	r3, #8
 8002532:	d007      	beq.n	8002544 <HAL_RCC_OscConfig+0x308>
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	2b18      	cmp	r3, #24
 8002538:	d13a      	bne.n	80025b0 <HAL_RCC_OscConfig+0x374>
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	2b01      	cmp	r3, #1
 8002542:	d135      	bne.n	80025b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002544:	4b7b      	ldr	r3, [pc, #492]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_OscConfig+0x320>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	2b80      	cmp	r3, #128	@ 0x80
 8002556:	d001      	beq.n	800255c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e2c1      	b.n	8002ae0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800255c:	f7fe fdf2 	bl	8001144 <HAL_GetREVID>
 8002560:	4603      	mov	r3, r0
 8002562:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002566:	4293      	cmp	r3, r2
 8002568:	d817      	bhi.n	800259a <HAL_RCC_OscConfig+0x35e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	2b20      	cmp	r3, #32
 8002570:	d108      	bne.n	8002584 <HAL_RCC_OscConfig+0x348>
 8002572:	4b70      	ldr	r3, [pc, #448]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800257a:	4a6e      	ldr	r2, [pc, #440]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 800257c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002580:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002582:	e075      	b.n	8002670 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002584:	4b6b      	ldr	r3, [pc, #428]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	069b      	lsls	r3, r3, #26
 8002592:	4968      	ldr	r1, [pc, #416]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002598:	e06a      	b.n	8002670 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800259a:	4b66      	ldr	r3, [pc, #408]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	061b      	lsls	r3, r3, #24
 80025a8:	4962      	ldr	r1, [pc, #392]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025ae:	e05f      	b.n	8002670 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d042      	beq.n	800263e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025b8:	4b5e      	ldr	r3, [pc, #376]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a5d      	ldr	r2, [pc, #372]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 80025be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c4:	f7fe fd8e 	bl	80010e4 <HAL_GetTick>
 80025c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80025cc:	f7fe fd8a 	bl	80010e4 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e280      	b.n	8002ae0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025de:	4b55      	ldr	r3, [pc, #340]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025ea:	f7fe fdab 	bl	8001144 <HAL_GetREVID>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d817      	bhi.n	8002628 <HAL_RCC_OscConfig+0x3ec>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d108      	bne.n	8002612 <HAL_RCC_OscConfig+0x3d6>
 8002600:	4b4c      	ldr	r3, [pc, #304]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002608:	4a4a      	ldr	r2, [pc, #296]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 800260a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800260e:	6053      	str	r3, [r2, #4]
 8002610:	e02e      	b.n	8002670 <HAL_RCC_OscConfig+0x434>
 8002612:	4b48      	ldr	r3, [pc, #288]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	069b      	lsls	r3, r3, #26
 8002620:	4944      	ldr	r1, [pc, #272]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
 8002626:	e023      	b.n	8002670 <HAL_RCC_OscConfig+0x434>
 8002628:	4b42      	ldr	r3, [pc, #264]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	061b      	lsls	r3, r3, #24
 8002636:	493f      	ldr	r1, [pc, #252]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 8002638:	4313      	orrs	r3, r2
 800263a:	60cb      	str	r3, [r1, #12]
 800263c:	e018      	b.n	8002670 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800263e:	4b3d      	ldr	r3, [pc, #244]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a3c      	ldr	r2, [pc, #240]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 8002644:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264a:	f7fe fd4b 	bl	80010e4 <HAL_GetTick>
 800264e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002652:	f7fe fd47 	bl	80010e4 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e23d      	b.n	8002ae0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002664:	4b33      	ldr	r3, [pc, #204]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f0      	bne.n	8002652 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	d036      	beq.n	80026ea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d019      	beq.n	80026b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002684:	4b2b      	ldr	r3, [pc, #172]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 8002686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002688:	4a2a      	ldr	r2, [pc, #168]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002690:	f7fe fd28 	bl	80010e4 <HAL_GetTick>
 8002694:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002698:	f7fe fd24 	bl	80010e4 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e21a      	b.n	8002ae0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026aa:	4b22      	ldr	r3, [pc, #136]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 80026ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x45c>
 80026b6:	e018      	b.n	80026ea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 80026ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 80026be:	f023 0301 	bic.w	r3, r3, #1
 80026c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c4:	f7fe fd0e 	bl	80010e4 <HAL_GetTick>
 80026c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026cc:	f7fe fd0a 	bl	80010e4 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e200      	b.n	8002ae0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026de:	4b15      	ldr	r3, [pc, #84]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 80026e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d039      	beq.n	800276a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d01c      	beq.n	8002738 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a0c      	ldr	r2, [pc, #48]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 8002704:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002708:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800270a:	f7fe fceb 	bl	80010e4 <HAL_GetTick>
 800270e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002712:	f7fe fce7 	bl	80010e4 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e1dd      	b.n	8002ae0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002724:	4b03      	ldr	r3, [pc, #12]	@ (8002734 <HAL_RCC_OscConfig+0x4f8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x4d6>
 8002730:	e01b      	b.n	800276a <HAL_RCC_OscConfig+0x52e>
 8002732:	bf00      	nop
 8002734:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002738:	4b9b      	ldr	r3, [pc, #620]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a9a      	ldr	r2, [pc, #616]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 800273e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002742:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002744:	f7fe fcce 	bl	80010e4 <HAL_GetTick>
 8002748:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800274c:	f7fe fcca 	bl	80010e4 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e1c0      	b.n	8002ae0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800275e:	4b92      	ldr	r3, [pc, #584]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 8081 	beq.w	800287a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002778:	4b8c      	ldr	r3, [pc, #560]	@ (80029ac <HAL_RCC_OscConfig+0x770>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a8b      	ldr	r2, [pc, #556]	@ (80029ac <HAL_RCC_OscConfig+0x770>)
 800277e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002782:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002784:	f7fe fcae 	bl	80010e4 <HAL_GetTick>
 8002788:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278c:	f7fe fcaa 	bl	80010e4 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b64      	cmp	r3, #100	@ 0x64
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e1a0      	b.n	8002ae0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800279e:	4b83      	ldr	r3, [pc, #524]	@ (80029ac <HAL_RCC_OscConfig+0x770>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d106      	bne.n	80027c0 <HAL_RCC_OscConfig+0x584>
 80027b2:	4b7d      	ldr	r3, [pc, #500]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b6:	4a7c      	ldr	r2, [pc, #496]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80027be:	e02d      	b.n	800281c <HAL_RCC_OscConfig+0x5e0>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10c      	bne.n	80027e2 <HAL_RCC_OscConfig+0x5a6>
 80027c8:	4b77      	ldr	r3, [pc, #476]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027cc:	4a76      	ldr	r2, [pc, #472]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 80027ce:	f023 0301 	bic.w	r3, r3, #1
 80027d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027d4:	4b74      	ldr	r3, [pc, #464]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d8:	4a73      	ldr	r2, [pc, #460]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 80027da:	f023 0304 	bic.w	r3, r3, #4
 80027de:	6713      	str	r3, [r2, #112]	@ 0x70
 80027e0:	e01c      	b.n	800281c <HAL_RCC_OscConfig+0x5e0>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b05      	cmp	r3, #5
 80027e8:	d10c      	bne.n	8002804 <HAL_RCC_OscConfig+0x5c8>
 80027ea:	4b6f      	ldr	r3, [pc, #444]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ee:	4a6e      	ldr	r2, [pc, #440]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 80027f0:	f043 0304 	orr.w	r3, r3, #4
 80027f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027f6:	4b6c      	ldr	r3, [pc, #432]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fa:	4a6b      	ldr	r2, [pc, #428]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6713      	str	r3, [r2, #112]	@ 0x70
 8002802:	e00b      	b.n	800281c <HAL_RCC_OscConfig+0x5e0>
 8002804:	4b68      	ldr	r3, [pc, #416]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002808:	4a67      	ldr	r2, [pc, #412]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 800280a:	f023 0301 	bic.w	r3, r3, #1
 800280e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002810:	4b65      	ldr	r3, [pc, #404]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 8002812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002814:	4a64      	ldr	r2, [pc, #400]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 8002816:	f023 0304 	bic.w	r3, r3, #4
 800281a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d015      	beq.n	8002850 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002824:	f7fe fc5e 	bl	80010e4 <HAL_GetTick>
 8002828:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800282a:	e00a      	b.n	8002842 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282c:	f7fe fc5a 	bl	80010e4 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800283a:	4293      	cmp	r3, r2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e14e      	b.n	8002ae0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002842:	4b59      	ldr	r3, [pc, #356]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 8002844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0ee      	beq.n	800282c <HAL_RCC_OscConfig+0x5f0>
 800284e:	e014      	b.n	800287a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002850:	f7fe fc48 	bl	80010e4 <HAL_GetTick>
 8002854:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002856:	e00a      	b.n	800286e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002858:	f7fe fc44 	bl	80010e4 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002866:	4293      	cmp	r3, r2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e138      	b.n	8002ae0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800286e:	4b4e      	ldr	r3, [pc, #312]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 8002870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1ee      	bne.n	8002858 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 812d 	beq.w	8002ade <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002884:	4b48      	ldr	r3, [pc, #288]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800288c:	2b18      	cmp	r3, #24
 800288e:	f000 80bd 	beq.w	8002a0c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002896:	2b02      	cmp	r3, #2
 8002898:	f040 809e 	bne.w	80029d8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289c:	4b42      	ldr	r3, [pc, #264]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a41      	ldr	r2, [pc, #260]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 80028a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a8:	f7fe fc1c 	bl	80010e4 <HAL_GetTick>
 80028ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b0:	f7fe fc18 	bl	80010e4 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e10e      	b.n	8002ae0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028c2:	4b39      	ldr	r3, [pc, #228]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ce:	4b36      	ldr	r3, [pc, #216]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 80028d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028d2:	4b37      	ldr	r3, [pc, #220]	@ (80029b0 <HAL_RCC_OscConfig+0x774>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028de:	0112      	lsls	r2, r2, #4
 80028e0:	430a      	orrs	r2, r1
 80028e2:	4931      	ldr	r1, [pc, #196]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ec:	3b01      	subs	r3, #1
 80028ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028f6:	3b01      	subs	r3, #1
 80028f8:	025b      	lsls	r3, r3, #9
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002902:	3b01      	subs	r3, #1
 8002904:	041b      	lsls	r3, r3, #16
 8002906:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002910:	3b01      	subs	r3, #1
 8002912:	061b      	lsls	r3, r3, #24
 8002914:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002918:	4923      	ldr	r1, [pc, #140]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 800291a:	4313      	orrs	r3, r2
 800291c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800291e:	4b22      	ldr	r3, [pc, #136]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 8002920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002922:	4a21      	ldr	r2, [pc, #132]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 8002924:	f023 0301 	bic.w	r3, r3, #1
 8002928:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800292a:	4b1f      	ldr	r3, [pc, #124]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 800292c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800292e:	4b21      	ldr	r3, [pc, #132]	@ (80029b4 <HAL_RCC_OscConfig+0x778>)
 8002930:	4013      	ands	r3, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002936:	00d2      	lsls	r2, r2, #3
 8002938:	491b      	ldr	r1, [pc, #108]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 800293a:	4313      	orrs	r3, r2
 800293c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800293e:	4b1a      	ldr	r3, [pc, #104]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 8002940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002942:	f023 020c 	bic.w	r2, r3, #12
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	4917      	ldr	r1, [pc, #92]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 800294c:	4313      	orrs	r3, r2
 800294e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002950:	4b15      	ldr	r3, [pc, #84]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 8002952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002954:	f023 0202 	bic.w	r2, r3, #2
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295c:	4912      	ldr	r1, [pc, #72]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 800295e:	4313      	orrs	r3, r2
 8002960:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002962:	4b11      	ldr	r3, [pc, #68]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 8002964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002966:	4a10      	ldr	r2, [pc, #64]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 8002968:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800296c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800296e:	4b0e      	ldr	r3, [pc, #56]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 8002970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002972:	4a0d      	ldr	r2, [pc, #52]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 8002974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002978:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800297a:	4b0b      	ldr	r3, [pc, #44]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 800297c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297e:	4a0a      	ldr	r2, [pc, #40]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 8002980:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002984:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002986:	4b08      	ldr	r3, [pc, #32]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 8002988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298a:	4a07      	ldr	r2, [pc, #28]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002992:	4b05      	ldr	r3, [pc, #20]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a04      	ldr	r2, [pc, #16]	@ (80029a8 <HAL_RCC_OscConfig+0x76c>)
 8002998:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800299c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299e:	f7fe fba1 	bl	80010e4 <HAL_GetTick>
 80029a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029a4:	e011      	b.n	80029ca <HAL_RCC_OscConfig+0x78e>
 80029a6:	bf00      	nop
 80029a8:	58024400 	.word	0x58024400
 80029ac:	58024800 	.word	0x58024800
 80029b0:	fffffc0c 	.word	0xfffffc0c
 80029b4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b8:	f7fe fb94 	bl	80010e4 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e08a      	b.n	8002ae0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029ca:	4b47      	ldr	r3, [pc, #284]	@ (8002ae8 <HAL_RCC_OscConfig+0x8ac>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0x77c>
 80029d6:	e082      	b.n	8002ade <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d8:	4b43      	ldr	r3, [pc, #268]	@ (8002ae8 <HAL_RCC_OscConfig+0x8ac>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a42      	ldr	r2, [pc, #264]	@ (8002ae8 <HAL_RCC_OscConfig+0x8ac>)
 80029de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7fe fb7e 	bl	80010e4 <HAL_GetTick>
 80029e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ec:	f7fe fb7a 	bl	80010e4 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e070      	b.n	8002ae0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029fe:	4b3a      	ldr	r3, [pc, #232]	@ (8002ae8 <HAL_RCC_OscConfig+0x8ac>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x7b0>
 8002a0a:	e068      	b.n	8002ade <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a0c:	4b36      	ldr	r3, [pc, #216]	@ (8002ae8 <HAL_RCC_OscConfig+0x8ac>)
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a12:	4b35      	ldr	r3, [pc, #212]	@ (8002ae8 <HAL_RCC_OscConfig+0x8ac>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a16:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d031      	beq.n	8002a84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f003 0203 	and.w	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d12a      	bne.n	8002a84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d122      	bne.n	8002a84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a48:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d11a      	bne.n	8002a84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	0a5b      	lsrs	r3, r3, #9
 8002a52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a5a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d111      	bne.n	8002a84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	0c1b      	lsrs	r3, r3, #16
 8002a64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d108      	bne.n	8002a84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	0e1b      	lsrs	r3, r3, #24
 8002a76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a7e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e02b      	b.n	8002ae0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002a88:	4b17      	ldr	r3, [pc, #92]	@ (8002ae8 <HAL_RCC_OscConfig+0x8ac>)
 8002a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8c:	08db      	lsrs	r3, r3, #3
 8002a8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a92:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d01f      	beq.n	8002ade <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002a9e:	4b12      	ldr	r3, [pc, #72]	@ (8002ae8 <HAL_RCC_OscConfig+0x8ac>)
 8002aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa2:	4a11      	ldr	r2, [pc, #68]	@ (8002ae8 <HAL_RCC_OscConfig+0x8ac>)
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002aaa:	f7fe fb1b 	bl	80010e4 <HAL_GetTick>
 8002aae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ab0:	bf00      	nop
 8002ab2:	f7fe fb17 	bl	80010e4 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d0f9      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002abe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae8 <HAL_RCC_OscConfig+0x8ac>)
 8002ac0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8002aec <HAL_RCC_OscConfig+0x8b0>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002aca:	00d2      	lsls	r2, r2, #3
 8002acc:	4906      	ldr	r1, [pc, #24]	@ (8002ae8 <HAL_RCC_OscConfig+0x8ac>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ad2:	4b05      	ldr	r3, [pc, #20]	@ (8002ae8 <HAL_RCC_OscConfig+0x8ac>)
 8002ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad6:	4a04      	ldr	r2, [pc, #16]	@ (8002ae8 <HAL_RCC_OscConfig+0x8ac>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3730      	adds	r7, #48	@ 0x30
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	58024400 	.word	0x58024400
 8002aec:	ffff0007 	.word	0xffff0007

08002af0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e19c      	b.n	8002e3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b04:	4b8a      	ldr	r3, [pc, #552]	@ (8002d30 <HAL_RCC_ClockConfig+0x240>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 030f 	and.w	r3, r3, #15
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d910      	bls.n	8002b34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b12:	4b87      	ldr	r3, [pc, #540]	@ (8002d30 <HAL_RCC_ClockConfig+0x240>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 020f 	bic.w	r2, r3, #15
 8002b1a:	4985      	ldr	r1, [pc, #532]	@ (8002d30 <HAL_RCC_ClockConfig+0x240>)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b22:	4b83      	ldr	r3, [pc, #524]	@ (8002d30 <HAL_RCC_ClockConfig+0x240>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e184      	b.n	8002e3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d010      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	4b7b      	ldr	r3, [pc, #492]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d908      	bls.n	8002b62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b50:	4b78      	ldr	r3, [pc, #480]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	4975      	ldr	r1, [pc, #468]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d010      	beq.n	8002b90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695a      	ldr	r2, [r3, #20]
 8002b72:	4b70      	ldr	r3, [pc, #448]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d908      	bls.n	8002b90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b7e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	496a      	ldr	r1, [pc, #424]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d010      	beq.n	8002bbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699a      	ldr	r2, [r3, #24]
 8002ba0:	4b64      	ldr	r3, [pc, #400]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d908      	bls.n	8002bbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bac:	4b61      	ldr	r3, [pc, #388]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	495e      	ldr	r1, [pc, #376]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0320 	and.w	r3, r3, #32
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d010      	beq.n	8002bec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69da      	ldr	r2, [r3, #28]
 8002bce:	4b59      	ldr	r3, [pc, #356]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d908      	bls.n	8002bec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002bda:	4b56      	ldr	r3, [pc, #344]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	4953      	ldr	r1, [pc, #332]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d010      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	4b4d      	ldr	r3, [pc, #308]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d908      	bls.n	8002c1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c08:	4b4a      	ldr	r3, [pc, #296]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	f023 020f 	bic.w	r2, r3, #15
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	4947      	ldr	r1, [pc, #284]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d055      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c26:	4b43      	ldr	r3, [pc, #268]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	4940      	ldr	r1, [pc, #256]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d107      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c40:	4b3c      	ldr	r3, [pc, #240]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d121      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0f6      	b.n	8002e3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d107      	bne.n	8002c68 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c58:	4b36      	ldr	r3, [pc, #216]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d115      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0ea      	b.n	8002e3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d107      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c70:	4b30      	ldr	r3, [pc, #192]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d109      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0de      	b.n	8002e3e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c80:	4b2c      	ldr	r3, [pc, #176]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0d6      	b.n	8002e3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c90:	4b28      	ldr	r3, [pc, #160]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f023 0207 	bic.w	r2, r3, #7
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	4925      	ldr	r1, [pc, #148]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ca2:	f7fe fa1f 	bl	80010e4 <HAL_GetTick>
 8002ca6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca8:	e00a      	b.n	8002cc0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002caa:	f7fe fa1b 	bl	80010e4 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e0be      	b.n	8002e3e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d1eb      	bne.n	8002caa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d010      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	4b14      	ldr	r3, [pc, #80]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d208      	bcs.n	8002d00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cee:	4b11      	ldr	r3, [pc, #68]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	f023 020f 	bic.w	r2, r3, #15
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	490e      	ldr	r1, [pc, #56]	@ (8002d34 <HAL_RCC_ClockConfig+0x244>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d00:	4b0b      	ldr	r3, [pc, #44]	@ (8002d30 <HAL_RCC_ClockConfig+0x240>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 030f 	and.w	r3, r3, #15
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d214      	bcs.n	8002d38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0e:	4b08      	ldr	r3, [pc, #32]	@ (8002d30 <HAL_RCC_ClockConfig+0x240>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 020f 	bic.w	r2, r3, #15
 8002d16:	4906      	ldr	r1, [pc, #24]	@ (8002d30 <HAL_RCC_ClockConfig+0x240>)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1e:	4b04      	ldr	r3, [pc, #16]	@ (8002d30 <HAL_RCC_ClockConfig+0x240>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d005      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e086      	b.n	8002e3e <HAL_RCC_ClockConfig+0x34e>
 8002d30:	52002000 	.word	0x52002000
 8002d34:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d010      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	4b3f      	ldr	r3, [pc, #252]	@ (8002e48 <HAL_RCC_ClockConfig+0x358>)
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d208      	bcs.n	8002d66 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d54:	4b3c      	ldr	r3, [pc, #240]	@ (8002e48 <HAL_RCC_ClockConfig+0x358>)
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	4939      	ldr	r1, [pc, #228]	@ (8002e48 <HAL_RCC_ClockConfig+0x358>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d010      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695a      	ldr	r2, [r3, #20]
 8002d76:	4b34      	ldr	r3, [pc, #208]	@ (8002e48 <HAL_RCC_ClockConfig+0x358>)
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d208      	bcs.n	8002d94 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d82:	4b31      	ldr	r3, [pc, #196]	@ (8002e48 <HAL_RCC_ClockConfig+0x358>)
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	492e      	ldr	r1, [pc, #184]	@ (8002e48 <HAL_RCC_ClockConfig+0x358>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0310 	and.w	r3, r3, #16
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d010      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699a      	ldr	r2, [r3, #24]
 8002da4:	4b28      	ldr	r3, [pc, #160]	@ (8002e48 <HAL_RCC_ClockConfig+0x358>)
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d208      	bcs.n	8002dc2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002db0:	4b25      	ldr	r3, [pc, #148]	@ (8002e48 <HAL_RCC_ClockConfig+0x358>)
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	4922      	ldr	r1, [pc, #136]	@ (8002e48 <HAL_RCC_ClockConfig+0x358>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0320 	and.w	r3, r3, #32
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d010      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69da      	ldr	r2, [r3, #28]
 8002dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e48 <HAL_RCC_ClockConfig+0x358>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d208      	bcs.n	8002df0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002dde:	4b1a      	ldr	r3, [pc, #104]	@ (8002e48 <HAL_RCC_ClockConfig+0x358>)
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	4917      	ldr	r1, [pc, #92]	@ (8002e48 <HAL_RCC_ClockConfig+0x358>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002df0:	f000 f834 	bl	8002e5c <HAL_RCC_GetSysClockFreq>
 8002df4:	4602      	mov	r2, r0
 8002df6:	4b14      	ldr	r3, [pc, #80]	@ (8002e48 <HAL_RCC_ClockConfig+0x358>)
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	0a1b      	lsrs	r3, r3, #8
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	4912      	ldr	r1, [pc, #72]	@ (8002e4c <HAL_RCC_ClockConfig+0x35c>)
 8002e02:	5ccb      	ldrb	r3, [r1, r3]
 8002e04:	f003 031f 	and.w	r3, r3, #31
 8002e08:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e48 <HAL_RCC_ClockConfig+0x358>)
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	4a0d      	ldr	r2, [pc, #52]	@ (8002e4c <HAL_RCC_ClockConfig+0x35c>)
 8002e18:	5cd3      	ldrb	r3, [r2, r3]
 8002e1a:	f003 031f 	and.w	r3, r3, #31
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	fa22 f303 	lsr.w	r3, r2, r3
 8002e24:	4a0a      	ldr	r2, [pc, #40]	@ (8002e50 <HAL_RCC_ClockConfig+0x360>)
 8002e26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e28:	4a0a      	ldr	r2, [pc, #40]	@ (8002e54 <HAL_RCC_ClockConfig+0x364>)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e58 <HAL_RCC_ClockConfig+0x368>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe f90c 	bl	8001050 <HAL_InitTick>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	58024400 	.word	0x58024400
 8002e4c:	08006698 	.word	0x08006698
 8002e50:	24000004 	.word	0x24000004
 8002e54:	24000000 	.word	0x24000000
 8002e58:	24000008 	.word	0x24000008

08002e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b089      	sub	sp, #36	@ 0x24
 8002e60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e62:	4bb3      	ldr	r3, [pc, #716]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e6a:	2b18      	cmp	r3, #24
 8002e6c:	f200 8155 	bhi.w	800311a <HAL_RCC_GetSysClockFreq+0x2be>
 8002e70:	a201      	add	r2, pc, #4	@ (adr r2, 8002e78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e76:	bf00      	nop
 8002e78:	08002edd 	.word	0x08002edd
 8002e7c:	0800311b 	.word	0x0800311b
 8002e80:	0800311b 	.word	0x0800311b
 8002e84:	0800311b 	.word	0x0800311b
 8002e88:	0800311b 	.word	0x0800311b
 8002e8c:	0800311b 	.word	0x0800311b
 8002e90:	0800311b 	.word	0x0800311b
 8002e94:	0800311b 	.word	0x0800311b
 8002e98:	08002f03 	.word	0x08002f03
 8002e9c:	0800311b 	.word	0x0800311b
 8002ea0:	0800311b 	.word	0x0800311b
 8002ea4:	0800311b 	.word	0x0800311b
 8002ea8:	0800311b 	.word	0x0800311b
 8002eac:	0800311b 	.word	0x0800311b
 8002eb0:	0800311b 	.word	0x0800311b
 8002eb4:	0800311b 	.word	0x0800311b
 8002eb8:	08002f09 	.word	0x08002f09
 8002ebc:	0800311b 	.word	0x0800311b
 8002ec0:	0800311b 	.word	0x0800311b
 8002ec4:	0800311b 	.word	0x0800311b
 8002ec8:	0800311b 	.word	0x0800311b
 8002ecc:	0800311b 	.word	0x0800311b
 8002ed0:	0800311b 	.word	0x0800311b
 8002ed4:	0800311b 	.word	0x0800311b
 8002ed8:	08002f0f 	.word	0x08002f0f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002edc:	4b94      	ldr	r3, [pc, #592]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0320 	and.w	r3, r3, #32
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d009      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ee8:	4b91      	ldr	r3, [pc, #580]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	08db      	lsrs	r3, r3, #3
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	4a90      	ldr	r2, [pc, #576]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002efa:	e111      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002efc:	4b8d      	ldr	r3, [pc, #564]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002efe:	61bb      	str	r3, [r7, #24]
      break;
 8002f00:	e10e      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002f02:	4b8d      	ldr	r3, [pc, #564]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f04:	61bb      	str	r3, [r7, #24]
      break;
 8002f06:	e10b      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002f08:	4b8c      	ldr	r3, [pc, #560]	@ (800313c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002f0a:	61bb      	str	r3, [r7, #24]
      break;
 8002f0c:	e108      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f0e:	4b88      	ldr	r3, [pc, #544]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002f18:	4b85      	ldr	r3, [pc, #532]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f22:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f24:	4b82      	ldr	r3, [pc, #520]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002f2e:	4b80      	ldr	r3, [pc, #512]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f32:	08db      	lsrs	r3, r3, #3
 8002f34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	fb02 f303 	mul.w	r3, r2, r3
 8002f3e:	ee07 3a90 	vmov	s15, r3
 8002f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f46:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 80e1 	beq.w	8003114 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	f000 8083 	beq.w	8003060 <HAL_RCC_GetSysClockFreq+0x204>
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	f200 80a1 	bhi.w	80030a4 <HAL_RCC_GetSysClockFreq+0x248>
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x114>
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d056      	beq.n	800301c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f6e:	e099      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f70:	4b6f      	ldr	r3, [pc, #444]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d02d      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f7c:	4b6c      	ldr	r3, [pc, #432]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	08db      	lsrs	r3, r3, #3
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	4a6b      	ldr	r2, [pc, #428]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f88:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	ee07 3a90 	vmov	s15, r3
 8002f94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	ee07 3a90 	vmov	s15, r3
 8002f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fa6:	4b62      	ldr	r3, [pc, #392]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fae:	ee07 3a90 	vmov	s15, r3
 8002fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003140 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002fd6:	e087      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	ee07 3a90 	vmov	s15, r3
 8002fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003144 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fea:	4b51      	ldr	r3, [pc, #324]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff2:	ee07 3a90 	vmov	s15, r3
 8002ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ffa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ffe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003140 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800300a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800300e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003016:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800301a:	e065      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	ee07 3a90 	vmov	s15, r3
 8003022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003026:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003148 <HAL_RCC_GetSysClockFreq+0x2ec>
 800302a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800302e:	4b40      	ldr	r3, [pc, #256]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003036:	ee07 3a90 	vmov	s15, r3
 800303a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800303e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003042:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003140 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800304a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800304e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800305a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800305e:	e043      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	ee07 3a90 	vmov	s15, r3
 8003066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800306a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800314c <HAL_RCC_GetSysClockFreq+0x2f0>
 800306e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003072:	4b2f      	ldr	r3, [pc, #188]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800307a:	ee07 3a90 	vmov	s15, r3
 800307e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003082:	ed97 6a02 	vldr	s12, [r7, #8]
 8003086:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003140 <HAL_RCC_GetSysClockFreq+0x2e4>
 800308a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800308e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800309a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030a2:	e021      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	ee07 3a90 	vmov	s15, r3
 80030aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003148 <HAL_RCC_GetSysClockFreq+0x2ec>
 80030b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030be:	ee07 3a90 	vmov	s15, r3
 80030c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80030ca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003140 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80030e8:	4b11      	ldr	r3, [pc, #68]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ec:	0a5b      	lsrs	r3, r3, #9
 80030ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030f2:	3301      	adds	r3, #1
 80030f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	ee07 3a90 	vmov	s15, r3
 80030fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003100:	edd7 6a07 	vldr	s13, [r7, #28]
 8003104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800310c:	ee17 3a90 	vmov	r3, s15
 8003110:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003112:	e005      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	61bb      	str	r3, [r7, #24]
      break;
 8003118:	e002      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800311a:	4b07      	ldr	r3, [pc, #28]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800311c:	61bb      	str	r3, [r7, #24]
      break;
 800311e:	bf00      	nop
  }

  return sysclockfreq;
 8003120:	69bb      	ldr	r3, [r7, #24]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3724      	adds	r7, #36	@ 0x24
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	58024400 	.word	0x58024400
 8003134:	03d09000 	.word	0x03d09000
 8003138:	003d0900 	.word	0x003d0900
 800313c:	007a1200 	.word	0x007a1200
 8003140:	46000000 	.word	0x46000000
 8003144:	4c742400 	.word	0x4c742400
 8003148:	4a742400 	.word	0x4a742400
 800314c:	4af42400 	.word	0x4af42400

08003150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003156:	f7ff fe81 	bl	8002e5c <HAL_RCC_GetSysClockFreq>
 800315a:	4602      	mov	r2, r0
 800315c:	4b10      	ldr	r3, [pc, #64]	@ (80031a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	0a1b      	lsrs	r3, r3, #8
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	490f      	ldr	r1, [pc, #60]	@ (80031a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003168:	5ccb      	ldrb	r3, [r1, r3]
 800316a:	f003 031f 	and.w	r3, r3, #31
 800316e:	fa22 f303 	lsr.w	r3, r2, r3
 8003172:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003174:	4b0a      	ldr	r3, [pc, #40]	@ (80031a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	4a09      	ldr	r2, [pc, #36]	@ (80031a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800317e:	5cd3      	ldrb	r3, [r2, r3]
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	fa22 f303 	lsr.w	r3, r2, r3
 800318a:	4a07      	ldr	r2, [pc, #28]	@ (80031a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800318c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800318e:	4a07      	ldr	r2, [pc, #28]	@ (80031ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003194:	4b04      	ldr	r3, [pc, #16]	@ (80031a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003196:	681b      	ldr	r3, [r3, #0]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	58024400 	.word	0x58024400
 80031a4:	08006698 	.word	0x08006698
 80031a8:	24000004 	.word	0x24000004
 80031ac:	24000000 	.word	0x24000000

080031b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80031b4:	f7ff ffcc 	bl	8003150 <HAL_RCC_GetHCLKFreq>
 80031b8:	4602      	mov	r2, r0
 80031ba:	4b06      	ldr	r3, [pc, #24]	@ (80031d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	091b      	lsrs	r3, r3, #4
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	4904      	ldr	r1, [pc, #16]	@ (80031d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031c6:	5ccb      	ldrb	r3, [r1, r3]
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	58024400 	.word	0x58024400
 80031d8:	08006698 	.word	0x08006698

080031dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80031e0:	f7ff ffb6 	bl	8003150 <HAL_RCC_GetHCLKFreq>
 80031e4:	4602      	mov	r2, r0
 80031e6:	4b06      	ldr	r3, [pc, #24]	@ (8003200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	0a1b      	lsrs	r3, r3, #8
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	4904      	ldr	r1, [pc, #16]	@ (8003204 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031f2:	5ccb      	ldrb	r3, [r1, r3]
 80031f4:	f003 031f 	and.w	r3, r3, #31
 80031f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	58024400 	.word	0x58024400
 8003204:	08006698 	.word	0x08006698

08003208 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800320c:	b0ca      	sub	sp, #296	@ 0x128
 800320e:	af00      	add	r7, sp, #0
 8003210:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003214:	2300      	movs	r3, #0
 8003216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800321a:	2300      	movs	r3, #0
 800321c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003228:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800322c:	2500      	movs	r5, #0
 800322e:	ea54 0305 	orrs.w	r3, r4, r5
 8003232:	d049      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003238:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800323a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800323e:	d02f      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003240:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003244:	d828      	bhi.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003246:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800324a:	d01a      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800324c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003250:	d822      	bhi.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003256:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800325a:	d007      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800325c:	e01c      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800325e:	4bb8      	ldr	r3, [pc, #736]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003262:	4ab7      	ldr	r2, [pc, #732]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003268:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800326a:	e01a      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800326c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003270:	3308      	adds	r3, #8
 8003272:	2102      	movs	r1, #2
 8003274:	4618      	mov	r0, r3
 8003276:	f001 fc8f 	bl	8004b98 <RCCEx_PLL2_Config>
 800327a:	4603      	mov	r3, r0
 800327c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003280:	e00f      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003286:	3328      	adds	r3, #40	@ 0x28
 8003288:	2102      	movs	r1, #2
 800328a:	4618      	mov	r0, r3
 800328c:	f001 fd36 	bl	8004cfc <RCCEx_PLL3_Config>
 8003290:	4603      	mov	r3, r0
 8003292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003296:	e004      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800329e:	e000      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80032a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10a      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80032aa:	4ba5      	ldr	r3, [pc, #660]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80032b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032b8:	4aa1      	ldr	r2, [pc, #644]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032ba:	430b      	orrs	r3, r1
 80032bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80032be:	e003      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80032c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80032d4:	f04f 0900 	mov.w	r9, #0
 80032d8:	ea58 0309 	orrs.w	r3, r8, r9
 80032dc:	d047      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80032de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d82a      	bhi.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80032e8:	a201      	add	r2, pc, #4	@ (adr r2, 80032f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80032ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ee:	bf00      	nop
 80032f0:	08003305 	.word	0x08003305
 80032f4:	08003313 	.word	0x08003313
 80032f8:	08003329 	.word	0x08003329
 80032fc:	08003347 	.word	0x08003347
 8003300:	08003347 	.word	0x08003347
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003304:	4b8e      	ldr	r3, [pc, #568]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003308:	4a8d      	ldr	r2, [pc, #564]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800330a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800330e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003310:	e01a      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003316:	3308      	adds	r3, #8
 8003318:	2100      	movs	r1, #0
 800331a:	4618      	mov	r0, r3
 800331c:	f001 fc3c 	bl	8004b98 <RCCEx_PLL2_Config>
 8003320:	4603      	mov	r3, r0
 8003322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003326:	e00f      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800332c:	3328      	adds	r3, #40	@ 0x28
 800332e:	2100      	movs	r1, #0
 8003330:	4618      	mov	r0, r3
 8003332:	f001 fce3 	bl	8004cfc <RCCEx_PLL3_Config>
 8003336:	4603      	mov	r3, r0
 8003338:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800333c:	e004      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003344:	e000      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003346:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10a      	bne.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003350:	4b7b      	ldr	r3, [pc, #492]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003354:	f023 0107 	bic.w	r1, r3, #7
 8003358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800335c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800335e:	4a78      	ldr	r2, [pc, #480]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003360:	430b      	orrs	r3, r1
 8003362:	6513      	str	r3, [r2, #80]	@ 0x50
 8003364:	e003      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003366:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800336a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800336e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003376:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800337a:	f04f 0b00 	mov.w	fp, #0
 800337e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003382:	d04c      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800338e:	d030      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003390:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003394:	d829      	bhi.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003396:	2bc0      	cmp	r3, #192	@ 0xc0
 8003398:	d02d      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800339a:	2bc0      	cmp	r3, #192	@ 0xc0
 800339c:	d825      	bhi.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800339e:	2b80      	cmp	r3, #128	@ 0x80
 80033a0:	d018      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80033a2:	2b80      	cmp	r3, #128	@ 0x80
 80033a4:	d821      	bhi.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80033aa:	2b40      	cmp	r3, #64	@ 0x40
 80033ac:	d007      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80033ae:	e01c      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033b0:	4b63      	ldr	r3, [pc, #396]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b4:	4a62      	ldr	r2, [pc, #392]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033bc:	e01c      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c2:	3308      	adds	r3, #8
 80033c4:	2100      	movs	r1, #0
 80033c6:	4618      	mov	r0, r3
 80033c8:	f001 fbe6 	bl	8004b98 <RCCEx_PLL2_Config>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033d2:	e011      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d8:	3328      	adds	r3, #40	@ 0x28
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f001 fc8d 	bl	8004cfc <RCCEx_PLL3_Config>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033e8:	e006      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033f0:	e002      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80033f2:	bf00      	nop
 80033f4:	e000      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80033f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10a      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003400:	4b4f      	ldr	r3, [pc, #316]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003404:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800340c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340e:	4a4c      	ldr	r2, [pc, #304]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003410:	430b      	orrs	r3, r1
 8003412:	6513      	str	r3, [r2, #80]	@ 0x50
 8003414:	e003      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800341a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800341e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003426:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800342a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800342e:	2300      	movs	r3, #0
 8003430:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003434:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003438:	460b      	mov	r3, r1
 800343a:	4313      	orrs	r3, r2
 800343c:	d053      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800343e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003442:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003446:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800344a:	d035      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800344c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003450:	d82e      	bhi.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003452:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003456:	d031      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003458:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800345c:	d828      	bhi.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800345e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003462:	d01a      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003464:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003468:	d822      	bhi.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800346e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003472:	d007      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003474:	e01c      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003476:	4b32      	ldr	r3, [pc, #200]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347a:	4a31      	ldr	r2, [pc, #196]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800347c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003480:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003482:	e01c      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003488:	3308      	adds	r3, #8
 800348a:	2100      	movs	r1, #0
 800348c:	4618      	mov	r0, r3
 800348e:	f001 fb83 	bl	8004b98 <RCCEx_PLL2_Config>
 8003492:	4603      	mov	r3, r0
 8003494:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003498:	e011      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800349a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800349e:	3328      	adds	r3, #40	@ 0x28
 80034a0:	2100      	movs	r1, #0
 80034a2:	4618      	mov	r0, r3
 80034a4:	f001 fc2a 	bl	8004cfc <RCCEx_PLL3_Config>
 80034a8:	4603      	mov	r3, r0
 80034aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034ae:	e006      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034b6:	e002      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80034b8:	bf00      	nop
 80034ba:	e000      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80034bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10b      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80034c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ca:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80034ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80034d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034d8:	430b      	orrs	r3, r1
 80034da:	6593      	str	r3, [r2, #88]	@ 0x58
 80034dc:	e003      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80034e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ee:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80034f2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80034f6:	2300      	movs	r3, #0
 80034f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80034fc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003500:	460b      	mov	r3, r1
 8003502:	4313      	orrs	r3, r2
 8003504:	d056      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800350e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003512:	d038      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003514:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003518:	d831      	bhi.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800351a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800351e:	d034      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003520:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003524:	d82b      	bhi.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003526:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800352a:	d01d      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800352c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003530:	d825      	bhi.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003532:	2b00      	cmp	r3, #0
 8003534:	d006      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003536:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800353a:	d00a      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800353c:	e01f      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800353e:	bf00      	nop
 8003540:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003544:	4ba2      	ldr	r3, [pc, #648]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003548:	4aa1      	ldr	r2, [pc, #644]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800354a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800354e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003550:	e01c      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003556:	3308      	adds	r3, #8
 8003558:	2100      	movs	r1, #0
 800355a:	4618      	mov	r0, r3
 800355c:	f001 fb1c 	bl	8004b98 <RCCEx_PLL2_Config>
 8003560:	4603      	mov	r3, r0
 8003562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003566:	e011      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356c:	3328      	adds	r3, #40	@ 0x28
 800356e:	2100      	movs	r1, #0
 8003570:	4618      	mov	r0, r3
 8003572:	f001 fbc3 	bl	8004cfc <RCCEx_PLL3_Config>
 8003576:	4603      	mov	r3, r0
 8003578:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800357c:	e006      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003584:	e002      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003586:	bf00      	nop
 8003588:	e000      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800358a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800358c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10b      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003594:	4b8e      	ldr	r3, [pc, #568]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003598:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800359c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035a4:	4a8a      	ldr	r2, [pc, #552]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035a6:	430b      	orrs	r3, r1
 80035a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80035aa:	e003      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80035b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035bc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80035c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80035c4:	2300      	movs	r3, #0
 80035c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80035ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80035ce:	460b      	mov	r3, r1
 80035d0:	4313      	orrs	r3, r2
 80035d2:	d03a      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80035d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035da:	2b30      	cmp	r3, #48	@ 0x30
 80035dc:	d01f      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80035de:	2b30      	cmp	r3, #48	@ 0x30
 80035e0:	d819      	bhi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	d00c      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d815      	bhi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d019      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80035ee:	2b10      	cmp	r3, #16
 80035f0:	d111      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f2:	4b77      	ldr	r3, [pc, #476]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f6:	4a76      	ldr	r2, [pc, #472]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80035fe:	e011      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003604:	3308      	adds	r3, #8
 8003606:	2102      	movs	r1, #2
 8003608:	4618      	mov	r0, r3
 800360a:	f001 fac5 	bl	8004b98 <RCCEx_PLL2_Config>
 800360e:	4603      	mov	r3, r0
 8003610:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003614:	e006      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800361c:	e002      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800361e:	bf00      	nop
 8003620:	e000      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003624:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10a      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800362c:	4b68      	ldr	r3, [pc, #416]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800362e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003630:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363a:	4a65      	ldr	r2, [pc, #404]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800363c:	430b      	orrs	r3, r1
 800363e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003640:	e003      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003646:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800364a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003652:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003656:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800365a:	2300      	movs	r3, #0
 800365c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003660:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003664:	460b      	mov	r3, r1
 8003666:	4313      	orrs	r3, r2
 8003668:	d051      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800366a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003670:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003674:	d035      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003676:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800367a:	d82e      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800367c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003680:	d031      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003682:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003686:	d828      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003688:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800368c:	d01a      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800368e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003692:	d822      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003698:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800369c:	d007      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800369e:	e01c      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a0:	4b4b      	ldr	r3, [pc, #300]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a4:	4a4a      	ldr	r2, [pc, #296]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036ac:	e01c      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b2:	3308      	adds	r3, #8
 80036b4:	2100      	movs	r1, #0
 80036b6:	4618      	mov	r0, r3
 80036b8:	f001 fa6e 	bl	8004b98 <RCCEx_PLL2_Config>
 80036bc:	4603      	mov	r3, r0
 80036be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036c2:	e011      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c8:	3328      	adds	r3, #40	@ 0x28
 80036ca:	2100      	movs	r1, #0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f001 fb15 	bl	8004cfc <RCCEx_PLL3_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036d8:	e006      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036e0:	e002      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80036e2:	bf00      	nop
 80036e4:	e000      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80036e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10a      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80036f0:	4b37      	ldr	r3, [pc, #220]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80036f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036fe:	4a34      	ldr	r2, [pc, #208]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003700:	430b      	orrs	r3, r1
 8003702:	6513      	str	r3, [r2, #80]	@ 0x50
 8003704:	e003      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003706:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800370a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800370e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003716:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800371a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800371e:	2300      	movs	r3, #0
 8003720:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003724:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003728:	460b      	mov	r3, r1
 800372a:	4313      	orrs	r3, r2
 800372c:	d056      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800372e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003732:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003734:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003738:	d033      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800373a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800373e:	d82c      	bhi.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003740:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003744:	d02f      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003746:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800374a:	d826      	bhi.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800374c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003750:	d02b      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003752:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003756:	d820      	bhi.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003758:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800375c:	d012      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800375e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003762:	d81a      	bhi.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003764:	2b00      	cmp	r3, #0
 8003766:	d022      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800376c:	d115      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800376e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003772:	3308      	adds	r3, #8
 8003774:	2101      	movs	r1, #1
 8003776:	4618      	mov	r0, r3
 8003778:	f001 fa0e 	bl	8004b98 <RCCEx_PLL2_Config>
 800377c:	4603      	mov	r3, r0
 800377e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003782:	e015      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003788:	3328      	adds	r3, #40	@ 0x28
 800378a:	2101      	movs	r1, #1
 800378c:	4618      	mov	r0, r3
 800378e:	f001 fab5 	bl	8004cfc <RCCEx_PLL3_Config>
 8003792:	4603      	mov	r3, r0
 8003794:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003798:	e00a      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037a0:	e006      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037a2:	bf00      	nop
 80037a4:	e004      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037a6:	bf00      	nop
 80037a8:	e002      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037aa:	bf00      	nop
 80037ac:	e000      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10d      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80037b8:	4b05      	ldr	r3, [pc, #20]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037bc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80037c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037c6:	4a02      	ldr	r2, [pc, #8]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037c8:	430b      	orrs	r3, r1
 80037ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80037cc:	e006      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80037ce:	bf00      	nop
 80037d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80037dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80037e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037ec:	2300      	movs	r3, #0
 80037ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037f2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4313      	orrs	r3, r2
 80037fa:	d055      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80037fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003800:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003804:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003808:	d033      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800380a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800380e:	d82c      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003814:	d02f      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800381a:	d826      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800381c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003820:	d02b      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003822:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003826:	d820      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003828:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800382c:	d012      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800382e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003832:	d81a      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003834:	2b00      	cmp	r3, #0
 8003836:	d022      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003838:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800383c:	d115      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800383e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003842:	3308      	adds	r3, #8
 8003844:	2101      	movs	r1, #1
 8003846:	4618      	mov	r0, r3
 8003848:	f001 f9a6 	bl	8004b98 <RCCEx_PLL2_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003852:	e015      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003858:	3328      	adds	r3, #40	@ 0x28
 800385a:	2101      	movs	r1, #1
 800385c:	4618      	mov	r0, r3
 800385e:	f001 fa4d 	bl	8004cfc <RCCEx_PLL3_Config>
 8003862:	4603      	mov	r3, r0
 8003864:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003868:	e00a      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003870:	e006      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003872:	bf00      	nop
 8003874:	e004      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003876:	bf00      	nop
 8003878:	e002      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800387a:	bf00      	nop
 800387c:	e000      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800387e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003880:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10b      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003888:	4ba3      	ldr	r3, [pc, #652]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800388a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800388c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003894:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003898:	4a9f      	ldr	r2, [pc, #636]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800389a:	430b      	orrs	r3, r1
 800389c:	6593      	str	r3, [r2, #88]	@ 0x58
 800389e:	e003      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80038b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038b8:	2300      	movs	r3, #0
 80038ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80038be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038c2:	460b      	mov	r3, r1
 80038c4:	4313      	orrs	r3, r2
 80038c6:	d037      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80038c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038d2:	d00e      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80038d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038d8:	d816      	bhi.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d018      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80038de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038e2:	d111      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e4:	4b8c      	ldr	r3, [pc, #560]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e8:	4a8b      	ldr	r2, [pc, #556]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80038f0:	e00f      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f6:	3308      	adds	r3, #8
 80038f8:	2101      	movs	r1, #1
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 f94c 	bl	8004b98 <RCCEx_PLL2_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003906:	e004      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800390e:	e000      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10a      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800391a:	4b7f      	ldr	r3, [pc, #508]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800391c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800391e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003928:	4a7b      	ldr	r2, [pc, #492]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800392a:	430b      	orrs	r3, r1
 800392c:	6513      	str	r3, [r2, #80]	@ 0x50
 800392e:	e003      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003930:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003934:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800393c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003940:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003944:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003948:	2300      	movs	r3, #0
 800394a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800394e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003952:	460b      	mov	r3, r1
 8003954:	4313      	orrs	r3, r2
 8003956:	d039      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800395c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800395e:	2b03      	cmp	r3, #3
 8003960:	d81c      	bhi.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003962:	a201      	add	r2, pc, #4	@ (adr r2, 8003968 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003968:	080039a5 	.word	0x080039a5
 800396c:	08003979 	.word	0x08003979
 8003970:	08003987 	.word	0x08003987
 8003974:	080039a5 	.word	0x080039a5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003978:	4b67      	ldr	r3, [pc, #412]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800397a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397c:	4a66      	ldr	r2, [pc, #408]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800397e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003982:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003984:	e00f      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800398a:	3308      	adds	r3, #8
 800398c:	2102      	movs	r1, #2
 800398e:	4618      	mov	r0, r3
 8003990:	f001 f902 	bl	8004b98 <RCCEx_PLL2_Config>
 8003994:	4603      	mov	r3, r0
 8003996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800399a:	e004      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039a2:	e000      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80039a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10a      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80039ae:	4b5a      	ldr	r3, [pc, #360]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b2:	f023 0103 	bic.w	r1, r3, #3
 80039b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039bc:	4a56      	ldr	r2, [pc, #344]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039be:	430b      	orrs	r3, r1
 80039c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039c2:	e003      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80039d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039dc:	2300      	movs	r3, #0
 80039de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80039e6:	460b      	mov	r3, r1
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f000 809f 	beq.w	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039ee:	4b4b      	ldr	r3, [pc, #300]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a4a      	ldr	r2, [pc, #296]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80039f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039fa:	f7fd fb73 	bl	80010e4 <HAL_GetTick>
 80039fe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a02:	e00b      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a04:	f7fd fb6e 	bl	80010e4 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b64      	cmp	r3, #100	@ 0x64
 8003a12:	d903      	bls.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a1a:	e005      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a1c:	4b3f      	ldr	r3, [pc, #252]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0ed      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003a28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d179      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a30:	4b39      	ldr	r3, [pc, #228]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a3c:	4053      	eors	r3, r2
 8003a3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d015      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a46:	4b34      	ldr	r3, [pc, #208]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a4e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a52:	4b31      	ldr	r3, [pc, #196]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a56:	4a30      	ldr	r2, [pc, #192]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a5c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a5e:	4b2e      	ldr	r3, [pc, #184]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a62:	4a2d      	ldr	r2, [pc, #180]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a68:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a6a:	4a2b      	ldr	r2, [pc, #172]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a70:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a7e:	d118      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a80:	f7fd fb30 	bl	80010e4 <HAL_GetTick>
 8003a84:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a88:	e00d      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8a:	f7fd fb2b 	bl	80010e4 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a94:	1ad2      	subs	r2, r2, r3
 8003a96:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d903      	bls.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003aa4:	e005      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0eb      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d129      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003abe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ac2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ac6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aca:	d10e      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003acc:	4b12      	ldr	r3, [pc, #72]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003adc:	091a      	lsrs	r2, r3, #4
 8003ade:	4b10      	ldr	r3, [pc, #64]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	4a0d      	ldr	r2, [pc, #52]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	6113      	str	r3, [r2, #16]
 8003ae8:	e005      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003aea:	4b0b      	ldr	r3, [pc, #44]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	4a0a      	ldr	r2, [pc, #40]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003af0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003af4:	6113      	str	r3, [r2, #16]
 8003af6:	4b08      	ldr	r3, [pc, #32]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003af8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b06:	4a04      	ldr	r2, [pc, #16]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b0c:	e00e      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003b16:	e009      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003b18:	58024400 	.word	0x58024400
 8003b1c:	58024800 	.word	0x58024800
 8003b20:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b34:	f002 0301 	and.w	r3, r2, #1
 8003b38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b42:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f000 8089 	beq.w	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b54:	2b28      	cmp	r3, #40	@ 0x28
 8003b56:	d86b      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003b58:	a201      	add	r2, pc, #4	@ (adr r2, 8003b60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5e:	bf00      	nop
 8003b60:	08003c39 	.word	0x08003c39
 8003b64:	08003c31 	.word	0x08003c31
 8003b68:	08003c31 	.word	0x08003c31
 8003b6c:	08003c31 	.word	0x08003c31
 8003b70:	08003c31 	.word	0x08003c31
 8003b74:	08003c31 	.word	0x08003c31
 8003b78:	08003c31 	.word	0x08003c31
 8003b7c:	08003c31 	.word	0x08003c31
 8003b80:	08003c05 	.word	0x08003c05
 8003b84:	08003c31 	.word	0x08003c31
 8003b88:	08003c31 	.word	0x08003c31
 8003b8c:	08003c31 	.word	0x08003c31
 8003b90:	08003c31 	.word	0x08003c31
 8003b94:	08003c31 	.word	0x08003c31
 8003b98:	08003c31 	.word	0x08003c31
 8003b9c:	08003c31 	.word	0x08003c31
 8003ba0:	08003c1b 	.word	0x08003c1b
 8003ba4:	08003c31 	.word	0x08003c31
 8003ba8:	08003c31 	.word	0x08003c31
 8003bac:	08003c31 	.word	0x08003c31
 8003bb0:	08003c31 	.word	0x08003c31
 8003bb4:	08003c31 	.word	0x08003c31
 8003bb8:	08003c31 	.word	0x08003c31
 8003bbc:	08003c31 	.word	0x08003c31
 8003bc0:	08003c39 	.word	0x08003c39
 8003bc4:	08003c31 	.word	0x08003c31
 8003bc8:	08003c31 	.word	0x08003c31
 8003bcc:	08003c31 	.word	0x08003c31
 8003bd0:	08003c31 	.word	0x08003c31
 8003bd4:	08003c31 	.word	0x08003c31
 8003bd8:	08003c31 	.word	0x08003c31
 8003bdc:	08003c31 	.word	0x08003c31
 8003be0:	08003c39 	.word	0x08003c39
 8003be4:	08003c31 	.word	0x08003c31
 8003be8:	08003c31 	.word	0x08003c31
 8003bec:	08003c31 	.word	0x08003c31
 8003bf0:	08003c31 	.word	0x08003c31
 8003bf4:	08003c31 	.word	0x08003c31
 8003bf8:	08003c31 	.word	0x08003c31
 8003bfc:	08003c31 	.word	0x08003c31
 8003c00:	08003c39 	.word	0x08003c39
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c08:	3308      	adds	r3, #8
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 ffc3 	bl	8004b98 <RCCEx_PLL2_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c18:	e00f      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1e:	3328      	adds	r3, #40	@ 0x28
 8003c20:	2101      	movs	r1, #1
 8003c22:	4618      	mov	r0, r3
 8003c24:	f001 f86a 	bl	8004cfc <RCCEx_PLL3_Config>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c2e:	e004      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c36:	e000      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10a      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c42:	4bbf      	ldr	r3, [pc, #764]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c46:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c50:	4abb      	ldr	r2, [pc, #748]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c52:	430b      	orrs	r3, r1
 8003c54:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c56:	e003      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c68:	f002 0302 	and.w	r3, r2, #2
 8003c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c70:	2300      	movs	r3, #0
 8003c72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003c76:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	d041      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c86:	2b05      	cmp	r3, #5
 8003c88:	d824      	bhi.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c90 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c90:	08003cdd 	.word	0x08003cdd
 8003c94:	08003ca9 	.word	0x08003ca9
 8003c98:	08003cbf 	.word	0x08003cbf
 8003c9c:	08003cdd 	.word	0x08003cdd
 8003ca0:	08003cdd 	.word	0x08003cdd
 8003ca4:	08003cdd 	.word	0x08003cdd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cac:	3308      	adds	r3, #8
 8003cae:	2101      	movs	r1, #1
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 ff71 	bl	8004b98 <RCCEx_PLL2_Config>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cbc:	e00f      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc2:	3328      	adds	r3, #40	@ 0x28
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f001 f818 	bl	8004cfc <RCCEx_PLL3_Config>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cd2:	e004      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cda:	e000      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10a      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ce6:	4b96      	ldr	r3, [pc, #600]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cea:	f023 0107 	bic.w	r1, r3, #7
 8003cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cf4:	4a92      	ldr	r2, [pc, #584]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cf6:	430b      	orrs	r3, r1
 8003cf8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cfa:	e003      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0c:	f002 0304 	and.w	r3, r2, #4
 8003d10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d14:	2300      	movs	r3, #0
 8003d16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d1a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4313      	orrs	r3, r2
 8003d22:	d044      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d2c:	2b05      	cmp	r3, #5
 8003d2e:	d825      	bhi.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003d30:	a201      	add	r2, pc, #4	@ (adr r2, 8003d38 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d36:	bf00      	nop
 8003d38:	08003d85 	.word	0x08003d85
 8003d3c:	08003d51 	.word	0x08003d51
 8003d40:	08003d67 	.word	0x08003d67
 8003d44:	08003d85 	.word	0x08003d85
 8003d48:	08003d85 	.word	0x08003d85
 8003d4c:	08003d85 	.word	0x08003d85
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d54:	3308      	adds	r3, #8
 8003d56:	2101      	movs	r1, #1
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 ff1d 	bl	8004b98 <RCCEx_PLL2_Config>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d64:	e00f      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6a:	3328      	adds	r3, #40	@ 0x28
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 ffc4 	bl	8004cfc <RCCEx_PLL3_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d7a:	e004      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d82:	e000      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10b      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d8e:	4b6c      	ldr	r3, [pc, #432]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d92:	f023 0107 	bic.w	r1, r3, #7
 8003d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d9e:	4a68      	ldr	r2, [pc, #416]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003da0:	430b      	orrs	r3, r1
 8003da2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003da4:	e003      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003daa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db6:	f002 0320 	and.w	r3, r2, #32
 8003dba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003dc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	d055      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dda:	d033      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003de0:	d82c      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003de6:	d02f      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003de8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dec:	d826      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003dee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003df2:	d02b      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003df4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003df8:	d820      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003dfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dfe:	d012      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003e00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e04:	d81a      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d022      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003e0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e0e:	d115      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e14:	3308      	adds	r3, #8
 8003e16:	2100      	movs	r1, #0
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 febd 	bl	8004b98 <RCCEx_PLL2_Config>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e24:	e015      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2a:	3328      	adds	r3, #40	@ 0x28
 8003e2c:	2102      	movs	r1, #2
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 ff64 	bl	8004cfc <RCCEx_PLL3_Config>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e3a:	e00a      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e42:	e006      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e44:	bf00      	nop
 8003e46:	e004      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e48:	bf00      	nop
 8003e4a:	e002      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e4c:	bf00      	nop
 8003e4e:	e000      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10b      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e5a:	4b39      	ldr	r3, [pc, #228]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e5e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6a:	4a35      	ldr	r2, [pc, #212]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e6c:	430b      	orrs	r3, r1
 8003e6e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e70:	e003      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e82:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003e86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003e90:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4313      	orrs	r3, r2
 8003e98:	d058      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ea2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ea6:	d033      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003ea8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003eac:	d82c      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003eae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eb2:	d02f      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eb8:	d826      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003eba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ebe:	d02b      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003ec0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ec4:	d820      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ec6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eca:	d012      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003ecc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ed0:	d81a      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d022      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eda:	d115      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee0:	3308      	adds	r3, #8
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fe57 	bl	8004b98 <RCCEx_PLL2_Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ef0:	e015      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef6:	3328      	adds	r3, #40	@ 0x28
 8003ef8:	2102      	movs	r1, #2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fefe 	bl	8004cfc <RCCEx_PLL3_Config>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f06:	e00a      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f0e:	e006      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f10:	bf00      	nop
 8003f12:	e004      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f14:	bf00      	nop
 8003f16:	e002      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f18:	bf00      	nop
 8003f1a:	e000      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10e      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f26:	4b06      	ldr	r3, [pc, #24]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f36:	4a02      	ldr	r2, [pc, #8]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f38:	430b      	orrs	r3, r1
 8003f3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f3c:	e006      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003f3e:	bf00      	nop
 8003f40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f54:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003f58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f62:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003f66:	460b      	mov	r3, r1
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	d055      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f74:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f78:	d033      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003f7a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f7e:	d82c      	bhi.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f84:	d02f      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003f86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f8a:	d826      	bhi.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f8c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f90:	d02b      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003f92:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f96:	d820      	bhi.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f9c:	d012      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003f9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fa2:	d81a      	bhi.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d022      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003fa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fac:	d115      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb2:	3308      	adds	r3, #8
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fdee 	bl	8004b98 <RCCEx_PLL2_Config>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fc2:	e015      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc8:	3328      	adds	r3, #40	@ 0x28
 8003fca:	2102      	movs	r1, #2
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 fe95 	bl	8004cfc <RCCEx_PLL3_Config>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fd8:	e00a      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fe0:	e006      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fe2:	bf00      	nop
 8003fe4:	e004      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fe6:	bf00      	nop
 8003fe8:	e002      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fea:	bf00      	nop
 8003fec:	e000      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10b      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ff8:	4ba1      	ldr	r3, [pc, #644]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ffc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004004:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004008:	4a9d      	ldr	r2, [pc, #628]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800400a:	430b      	orrs	r3, r1
 800400c:	6593      	str	r3, [r2, #88]	@ 0x58
 800400e:	e003      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004010:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004014:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800401c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004020:	f002 0308 	and.w	r3, r2, #8
 8004024:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004028:	2300      	movs	r3, #0
 800402a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800402e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004032:	460b      	mov	r3, r1
 8004034:	4313      	orrs	r3, r2
 8004036:	d01e      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004044:	d10c      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404a:	3328      	adds	r3, #40	@ 0x28
 800404c:	2102      	movs	r1, #2
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fe54 	bl	8004cfc <RCCEx_PLL3_Config>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004060:	4b87      	ldr	r3, [pc, #540]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004064:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004070:	4a83      	ldr	r2, [pc, #524]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004072:	430b      	orrs	r3, r1
 8004074:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407e:	f002 0310 	and.w	r3, r2, #16
 8004082:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004086:	2300      	movs	r3, #0
 8004088:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800408c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004090:	460b      	mov	r3, r1
 8004092:	4313      	orrs	r3, r2
 8004094:	d01e      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800409e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040a2:	d10c      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a8:	3328      	adds	r3, #40	@ 0x28
 80040aa:	2102      	movs	r1, #2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fe25 	bl	8004cfc <RCCEx_PLL3_Config>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040be:	4b70      	ldr	r3, [pc, #448]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040ce:	4a6c      	ldr	r2, [pc, #432]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040dc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80040e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040e4:	2300      	movs	r3, #0
 80040e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040ea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80040ee:	460b      	mov	r3, r1
 80040f0:	4313      	orrs	r3, r2
 80040f2:	d03e      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80040f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80040fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004100:	d022      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004102:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004106:	d81b      	bhi.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800410c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004110:	d00b      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004112:	e015      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004118:	3308      	adds	r3, #8
 800411a:	2100      	movs	r1, #0
 800411c:	4618      	mov	r0, r3
 800411e:	f000 fd3b 	bl	8004b98 <RCCEx_PLL2_Config>
 8004122:	4603      	mov	r3, r0
 8004124:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004128:	e00f      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800412a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412e:	3328      	adds	r3, #40	@ 0x28
 8004130:	2102      	movs	r1, #2
 8004132:	4618      	mov	r0, r3
 8004134:	f000 fde2 	bl	8004cfc <RCCEx_PLL3_Config>
 8004138:	4603      	mov	r3, r0
 800413a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800413e:	e004      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004146:	e000      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004148:	bf00      	nop
    }

    if (ret == HAL_OK)
 800414a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10b      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004152:	4b4b      	ldr	r3, [pc, #300]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004156:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800415a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004162:	4a47      	ldr	r2, [pc, #284]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004164:	430b      	orrs	r3, r1
 8004166:	6593      	str	r3, [r2, #88]	@ 0x58
 8004168:	e003      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800416e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800417e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004180:	2300      	movs	r3, #0
 8004182:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004184:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004188:	460b      	mov	r3, r1
 800418a:	4313      	orrs	r3, r2
 800418c:	d03b      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800418e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004196:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800419a:	d01f      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800419c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041a0:	d818      	bhi.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80041a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041a6:	d003      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80041a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041ac:	d007      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80041ae:	e011      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b0:	4b33      	ldr	r3, [pc, #204]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b4:	4a32      	ldr	r2, [pc, #200]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80041bc:	e00f      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c2:	3328      	adds	r3, #40	@ 0x28
 80041c4:	2101      	movs	r1, #1
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fd98 	bl	8004cfc <RCCEx_PLL3_Config>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80041d2:	e004      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041da:	e000      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80041dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10b      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041e6:	4b26      	ldr	r3, [pc, #152]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80041ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f6:	4a22      	ldr	r2, [pc, #136]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041f8:	430b      	orrs	r3, r1
 80041fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80041fc:	e003      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004202:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004212:	673b      	str	r3, [r7, #112]	@ 0x70
 8004214:	2300      	movs	r3, #0
 8004216:	677b      	str	r3, [r7, #116]	@ 0x74
 8004218:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800421c:	460b      	mov	r3, r1
 800421e:	4313      	orrs	r3, r2
 8004220:	d034      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800422c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004230:	d007      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004232:	e011      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004234:	4b12      	ldr	r3, [pc, #72]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004238:	4a11      	ldr	r2, [pc, #68]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800423a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800423e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004240:	e00e      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004246:	3308      	adds	r3, #8
 8004248:	2102      	movs	r1, #2
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fca4 	bl	8004b98 <RCCEx_PLL2_Config>
 8004250:	4603      	mov	r3, r0
 8004252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004256:	e003      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800425e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004260:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10d      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004268:	4b05      	ldr	r3, [pc, #20]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800426a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800426c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004276:	4a02      	ldr	r2, [pc, #8]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004278:	430b      	orrs	r3, r1
 800427a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800427c:	e006      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800427e:	bf00      	nop
 8004280:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004284:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004288:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800428c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004294:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004298:	66bb      	str	r3, [r7, #104]	@ 0x68
 800429a:	2300      	movs	r3, #0
 800429c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800429e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80042a2:	460b      	mov	r3, r1
 80042a4:	4313      	orrs	r3, r2
 80042a6:	d00c      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ac:	3328      	adds	r3, #40	@ 0x28
 80042ae:	2102      	movs	r1, #2
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fd23 	bl	8004cfc <RCCEx_PLL3_Config>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80042ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80042d0:	2300      	movs	r3, #0
 80042d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80042d4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80042d8:	460b      	mov	r3, r1
 80042da:	4313      	orrs	r3, r2
 80042dc:	d038      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80042de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042ea:	d018      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80042ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042f0:	d811      	bhi.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80042f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042f6:	d014      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80042f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042fc:	d80b      	bhi.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d011      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004306:	d106      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004308:	4bc3      	ldr	r3, [pc, #780]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800430a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430c:	4ac2      	ldr	r2, [pc, #776]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800430e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004312:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004314:	e008      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800431c:	e004      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800431e:	bf00      	nop
 8004320:	e002      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004322:	bf00      	nop
 8004324:	e000      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004326:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004328:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10b      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004330:	4bb9      	ldr	r3, [pc, #740]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004334:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800433c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004340:	4ab5      	ldr	r2, [pc, #724]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004342:	430b      	orrs	r3, r1
 8004344:	6553      	str	r3, [r2, #84]	@ 0x54
 8004346:	e003      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800434c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004358:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800435c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800435e:	2300      	movs	r3, #0
 8004360:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004362:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004366:	460b      	mov	r3, r1
 8004368:	4313      	orrs	r3, r2
 800436a:	d009      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800436c:	4baa      	ldr	r3, [pc, #680]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800436e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004370:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800437a:	4aa7      	ldr	r2, [pc, #668]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800437c:	430b      	orrs	r3, r1
 800437e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004388:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800438c:	653b      	str	r3, [r7, #80]	@ 0x50
 800438e:	2300      	movs	r3, #0
 8004390:	657b      	str	r3, [r7, #84]	@ 0x54
 8004392:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004396:	460b      	mov	r3, r1
 8004398:	4313      	orrs	r3, r2
 800439a:	d00a      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800439c:	4b9e      	ldr	r3, [pc, #632]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80043a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80043ac:	4a9a      	ldr	r2, [pc, #616]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ae:	430b      	orrs	r3, r1
 80043b0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ba:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80043be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043c0:	2300      	movs	r3, #0
 80043c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043c4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80043c8:	460b      	mov	r3, r1
 80043ca:	4313      	orrs	r3, r2
 80043cc:	d009      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043ce:	4b92      	ldr	r3, [pc, #584]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043d2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80043d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043dc:	4a8e      	ldr	r2, [pc, #568]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043de:	430b      	orrs	r3, r1
 80043e0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ea:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80043ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80043f0:	2300      	movs	r3, #0
 80043f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80043f4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80043f8:	460b      	mov	r3, r1
 80043fa:	4313      	orrs	r3, r2
 80043fc:	d00e      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043fe:	4b86      	ldr	r3, [pc, #536]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	4a85      	ldr	r2, [pc, #532]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004404:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004408:	6113      	str	r3, [r2, #16]
 800440a:	4b83      	ldr	r3, [pc, #524]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800440c:	6919      	ldr	r1, [r3, #16]
 800440e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004412:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004416:	4a80      	ldr	r2, [pc, #512]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004418:	430b      	orrs	r3, r1
 800441a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800441c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004424:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004428:	63bb      	str	r3, [r7, #56]	@ 0x38
 800442a:	2300      	movs	r3, #0
 800442c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800442e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004432:	460b      	mov	r3, r1
 8004434:	4313      	orrs	r3, r2
 8004436:	d009      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004438:	4b77      	ldr	r3, [pc, #476]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800443a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800443c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004446:	4a74      	ldr	r2, [pc, #464]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004448:	430b      	orrs	r3, r1
 800444a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800444c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004454:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004458:	633b      	str	r3, [r7, #48]	@ 0x30
 800445a:	2300      	movs	r3, #0
 800445c:	637b      	str	r3, [r7, #52]	@ 0x34
 800445e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004462:	460b      	mov	r3, r1
 8004464:	4313      	orrs	r3, r2
 8004466:	d00a      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004468:	4b6b      	ldr	r3, [pc, #428]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800446a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800446c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004474:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004478:	4a67      	ldr	r2, [pc, #412]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800447a:	430b      	orrs	r3, r1
 800447c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800447e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004486:	2100      	movs	r1, #0
 8004488:	62b9      	str	r1, [r7, #40]	@ 0x28
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004490:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004494:	460b      	mov	r3, r1
 8004496:	4313      	orrs	r3, r2
 8004498:	d011      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800449a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449e:	3308      	adds	r3, #8
 80044a0:	2100      	movs	r1, #0
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fb78 	bl	8004b98 <RCCEx_PLL2_Config>
 80044a8:	4603      	mov	r3, r0
 80044aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80044ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80044be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c6:	2100      	movs	r1, #0
 80044c8:	6239      	str	r1, [r7, #32]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80044d0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80044d4:	460b      	mov	r3, r1
 80044d6:	4313      	orrs	r3, r2
 80044d8:	d011      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044de:	3308      	adds	r3, #8
 80044e0:	2101      	movs	r1, #1
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fb58 	bl	8004b98 <RCCEx_PLL2_Config>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80044ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80044fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004506:	2100      	movs	r1, #0
 8004508:	61b9      	str	r1, [r7, #24]
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	61fb      	str	r3, [r7, #28]
 8004510:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004514:	460b      	mov	r3, r1
 8004516:	4313      	orrs	r3, r2
 8004518:	d011      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800451a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451e:	3308      	adds	r3, #8
 8004520:	2102      	movs	r1, #2
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fb38 	bl	8004b98 <RCCEx_PLL2_Config>
 8004528:	4603      	mov	r3, r0
 800452a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800452e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800453a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800453e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004546:	2100      	movs	r1, #0
 8004548:	6139      	str	r1, [r7, #16]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004554:	460b      	mov	r3, r1
 8004556:	4313      	orrs	r3, r2
 8004558:	d011      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800455a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455e:	3328      	adds	r3, #40	@ 0x28
 8004560:	2100      	movs	r1, #0
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fbca 	bl	8004cfc <RCCEx_PLL3_Config>
 8004568:	4603      	mov	r3, r0
 800456a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800456e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800457a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800457e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004586:	2100      	movs	r1, #0
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	f003 0310 	and.w	r3, r3, #16
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004594:	460b      	mov	r3, r1
 8004596:	4313      	orrs	r3, r2
 8004598:	d011      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800459a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459e:	3328      	adds	r3, #40	@ 0x28
 80045a0:	2101      	movs	r1, #1
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 fbaa 	bl	8004cfc <RCCEx_PLL3_Config>
 80045a8:	4603      	mov	r3, r0
 80045aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80045be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c6:	2100      	movs	r1, #0
 80045c8:	6039      	str	r1, [r7, #0]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	607b      	str	r3, [r7, #4]
 80045d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80045d4:	460b      	mov	r3, r1
 80045d6:	4313      	orrs	r3, r2
 80045d8:	d011      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045de:	3328      	adds	r3, #40	@ 0x28
 80045e0:	2102      	movs	r1, #2
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 fb8a 	bl	8004cfc <RCCEx_PLL3_Config>
 80045e8:	4603      	mov	r3, r0
 80045ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80045fe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	e000      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
}
 800460c:	4618      	mov	r0, r3
 800460e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004612:	46bd      	mov	sp, r7
 8004614:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004618:	58024400 	.word	0x58024400

0800461c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004620:	f7fe fd96 	bl	8003150 <HAL_RCC_GetHCLKFreq>
 8004624:	4602      	mov	r2, r0
 8004626:	4b06      	ldr	r3, [pc, #24]	@ (8004640 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	091b      	lsrs	r3, r3, #4
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	4904      	ldr	r1, [pc, #16]	@ (8004644 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004632:	5ccb      	ldrb	r3, [r1, r3]
 8004634:	f003 031f 	and.w	r3, r3, #31
 8004638:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800463c:	4618      	mov	r0, r3
 800463e:	bd80      	pop	{r7, pc}
 8004640:	58024400 	.word	0x58024400
 8004644:	08006698 	.word	0x08006698

08004648 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004648:	b480      	push	{r7}
 800464a:	b089      	sub	sp, #36	@ 0x24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004650:	4ba1      	ldr	r3, [pc, #644]	@ (80048d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004654:	f003 0303 	and.w	r3, r3, #3
 8004658:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800465a:	4b9f      	ldr	r3, [pc, #636]	@ (80048d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800465c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800465e:	0b1b      	lsrs	r3, r3, #12
 8004660:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004664:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004666:	4b9c      	ldr	r3, [pc, #624]	@ (80048d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466a:	091b      	lsrs	r3, r3, #4
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004672:	4b99      	ldr	r3, [pc, #612]	@ (80048d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004676:	08db      	lsrs	r3, r3, #3
 8004678:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	fb02 f303 	mul.w	r3, r2, r3
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 8111 	beq.w	80048b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	2b02      	cmp	r3, #2
 800469a:	f000 8083 	beq.w	80047a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	f200 80a1 	bhi.w	80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d056      	beq.n	8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80046b2:	e099      	b.n	80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046b4:	4b88      	ldr	r3, [pc, #544]	@ (80048d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0320 	and.w	r3, r3, #32
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d02d      	beq.n	800471c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046c0:	4b85      	ldr	r3, [pc, #532]	@ (80048d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	08db      	lsrs	r3, r3, #3
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	4a84      	ldr	r2, [pc, #528]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80046cc:	fa22 f303 	lsr.w	r3, r2, r3
 80046d0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	ee07 3a90 	vmov	s15, r3
 80046d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	ee07 3a90 	vmov	s15, r3
 80046e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ea:	4b7b      	ldr	r3, [pc, #492]	@ (80048d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80046fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80048e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800470a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800470e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004716:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800471a:	e087      	b.n	800482c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	ee07 3a90 	vmov	s15, r3
 8004722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004726:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800472a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800472e:	4b6a      	ldr	r3, [pc, #424]	@ (80048d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004736:	ee07 3a90 	vmov	s15, r3
 800473a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800473e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004742:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80048e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800474a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800474e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800475a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800475e:	e065      	b.n	800482c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	ee07 3a90 	vmov	s15, r3
 8004766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800476e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004772:	4b59      	ldr	r3, [pc, #356]	@ (80048d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800477a:	ee07 3a90 	vmov	s15, r3
 800477e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004782:	ed97 6a03 	vldr	s12, [r7, #12]
 8004786:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80048e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800478a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800478e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004792:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800479a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800479e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047a2:	e043      	b.n	800482c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	ee07 3a90 	vmov	s15, r3
 80047aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80048ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80047b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047b6:	4b48      	ldr	r3, [pc, #288]	@ (80048d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80048e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047e6:	e021      	b.n	800482c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	ee07 3a90 	vmov	s15, r3
 80047ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80047f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047fa:	4b37      	ldr	r3, [pc, #220]	@ (80048d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800480a:	ed97 6a03 	vldr	s12, [r7, #12]
 800480e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80048e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800481a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800481e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800482a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800482c:	4b2a      	ldr	r3, [pc, #168]	@ (80048d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800482e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004830:	0a5b      	lsrs	r3, r3, #9
 8004832:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004842:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004846:	edd7 6a07 	vldr	s13, [r7, #28]
 800484a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800484e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004852:	ee17 2a90 	vmov	r2, s15
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800485a:	4b1f      	ldr	r3, [pc, #124]	@ (80048d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800485c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485e:	0c1b      	lsrs	r3, r3, #16
 8004860:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004864:	ee07 3a90 	vmov	s15, r3
 8004868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004870:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004874:	edd7 6a07 	vldr	s13, [r7, #28]
 8004878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800487c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004880:	ee17 2a90 	vmov	r2, s15
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004888:	4b13      	ldr	r3, [pc, #76]	@ (80048d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800488a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488c:	0e1b      	lsrs	r3, r3, #24
 800488e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800489e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80048a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048ae:	ee17 2a90 	vmov	r2, s15
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80048b6:	e008      	b.n	80048ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	609a      	str	r2, [r3, #8]
}
 80048ca:	bf00      	nop
 80048cc:	3724      	adds	r7, #36	@ 0x24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	58024400 	.word	0x58024400
 80048dc:	03d09000 	.word	0x03d09000
 80048e0:	46000000 	.word	0x46000000
 80048e4:	4c742400 	.word	0x4c742400
 80048e8:	4a742400 	.word	0x4a742400
 80048ec:	4af42400 	.word	0x4af42400

080048f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b089      	sub	sp, #36	@ 0x24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048f8:	4ba1      	ldr	r3, [pc, #644]	@ (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004902:	4b9f      	ldr	r3, [pc, #636]	@ (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004906:	0d1b      	lsrs	r3, r3, #20
 8004908:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800490c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800490e:	4b9c      	ldr	r3, [pc, #624]	@ (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004912:	0a1b      	lsrs	r3, r3, #8
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800491a:	4b99      	ldr	r3, [pc, #612]	@ (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800491c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800491e:	08db      	lsrs	r3, r3, #3
 8004920:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	fb02 f303 	mul.w	r3, r2, r3
 800492a:	ee07 3a90 	vmov	s15, r3
 800492e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004932:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 8111 	beq.w	8004b60 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	2b02      	cmp	r3, #2
 8004942:	f000 8083 	beq.w	8004a4c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	2b02      	cmp	r3, #2
 800494a:	f200 80a1 	bhi.w	8004a90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d003      	beq.n	800495c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d056      	beq.n	8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800495a:	e099      	b.n	8004a90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800495c:	4b88      	ldr	r3, [pc, #544]	@ (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0320 	and.w	r3, r3, #32
 8004964:	2b00      	cmp	r3, #0
 8004966:	d02d      	beq.n	80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004968:	4b85      	ldr	r3, [pc, #532]	@ (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	08db      	lsrs	r3, r3, #3
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	4a84      	ldr	r2, [pc, #528]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004974:	fa22 f303 	lsr.w	r3, r2, r3
 8004978:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	ee07 3a90 	vmov	s15, r3
 8004980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	ee07 3a90 	vmov	s15, r3
 800498a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004992:	4b7b      	ldr	r3, [pc, #492]	@ (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499a:	ee07 3a90 	vmov	s15, r3
 800499e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80049c2:	e087      	b.n	8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	ee07 3a90 	vmov	s15, r3
 80049ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80049d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049d6:	4b6a      	ldr	r3, [pc, #424]	@ (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049de:	ee07 3a90 	vmov	s15, r3
 80049e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a06:	e065      	b.n	8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	ee07 3a90 	vmov	s15, r3
 8004a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a12:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004b90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a1a:	4b59      	ldr	r3, [pc, #356]	@ (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a22:	ee07 3a90 	vmov	s15, r3
 8004a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a2e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a4a:	e043      	b.n	8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	ee07 3a90 	vmov	s15, r3
 8004a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a56:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a5e:	4b48      	ldr	r3, [pc, #288]	@ (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a66:	ee07 3a90 	vmov	s15, r3
 8004a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a72:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a8e:	e021      	b.n	8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004b90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aa2:	4b37      	ldr	r3, [pc, #220]	@ (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ab6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ac2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ad2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad8:	0a5b      	lsrs	r3, r3, #9
 8004ada:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004aea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004aee:	edd7 6a07 	vldr	s13, [r7, #28]
 8004af2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004af6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004afa:	ee17 2a90 	vmov	r2, s15
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004b02:	4b1f      	ldr	r3, [pc, #124]	@ (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b06:	0c1b      	lsrs	r3, r3, #16
 8004b08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b0c:	ee07 3a90 	vmov	s15, r3
 8004b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b28:	ee17 2a90 	vmov	r2, s15
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004b30:	4b13      	ldr	r3, [pc, #76]	@ (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b34:	0e1b      	lsrs	r3, r3, #24
 8004b36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b3a:	ee07 3a90 	vmov	s15, r3
 8004b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b56:	ee17 2a90 	vmov	r2, s15
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b5e:	e008      	b.n	8004b72 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	609a      	str	r2, [r3, #8]
}
 8004b72:	bf00      	nop
 8004b74:	3724      	adds	r7, #36	@ 0x24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	58024400 	.word	0x58024400
 8004b84:	03d09000 	.word	0x03d09000
 8004b88:	46000000 	.word	0x46000000
 8004b8c:	4c742400 	.word	0x4c742400
 8004b90:	4a742400 	.word	0x4a742400
 8004b94:	4af42400 	.word	0x4af42400

08004b98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ba6:	4b53      	ldr	r3, [pc, #332]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	2b03      	cmp	r3, #3
 8004bb0:	d101      	bne.n	8004bb6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e099      	b.n	8004cea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004bb6:	4b4f      	ldr	r3, [pc, #316]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a4e      	ldr	r2, [pc, #312]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004bbc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004bc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc2:	f7fc fa8f 	bl	80010e4 <HAL_GetTick>
 8004bc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bc8:	e008      	b.n	8004bdc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004bca:	f7fc fa8b 	bl	80010e4 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e086      	b.n	8004cea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bdc:	4b45      	ldr	r3, [pc, #276]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1f0      	bne.n	8004bca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004be8:	4b42      	ldr	r3, [pc, #264]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	031b      	lsls	r3, r3, #12
 8004bf6:	493f      	ldr	r1, [pc, #252]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	628b      	str	r3, [r1, #40]	@ 0x28
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	3b01      	subs	r3, #1
 8004c02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	025b      	lsls	r3, r3, #9
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	431a      	orrs	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	041b      	lsls	r3, r3, #16
 8004c1a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	3b01      	subs	r3, #1
 8004c26:	061b      	lsls	r3, r3, #24
 8004c28:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c2c:	4931      	ldr	r1, [pc, #196]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c32:	4b30      	ldr	r3, [pc, #192]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c36:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	492d      	ldr	r1, [pc, #180]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004c44:	4b2b      	ldr	r3, [pc, #172]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c48:	f023 0220 	bic.w	r2, r3, #32
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	4928      	ldr	r1, [pc, #160]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c56:	4b27      	ldr	r3, [pc, #156]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5a:	4a26      	ldr	r2, [pc, #152]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c5c:	f023 0310 	bic.w	r3, r3, #16
 8004c60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c62:	4b24      	ldr	r3, [pc, #144]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c66:	4b24      	ldr	r3, [pc, #144]	@ (8004cf8 <RCCEx_PLL2_Config+0x160>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	69d2      	ldr	r2, [r2, #28]
 8004c6e:	00d2      	lsls	r2, r2, #3
 8004c70:	4920      	ldr	r1, [pc, #128]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c76:	4b1f      	ldr	r3, [pc, #124]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c7c:	f043 0310 	orr.w	r3, r3, #16
 8004c80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d106      	bne.n	8004c96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c88:	4b1a      	ldr	r3, [pc, #104]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8c:	4a19      	ldr	r2, [pc, #100]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c8e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c94:	e00f      	b.n	8004cb6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d106      	bne.n	8004caa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c9c:	4b15      	ldr	r3, [pc, #84]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca0:	4a14      	ldr	r2, [pc, #80]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004ca2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ca8:	e005      	b.n	8004cb6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004caa:	4b12      	ldr	r3, [pc, #72]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cae:	4a11      	ldr	r2, [pc, #68]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004cb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004cb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a0e      	ldr	r2, [pc, #56]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004cbc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004cc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc2:	f7fc fa0f 	bl	80010e4 <HAL_GetTick>
 8004cc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004cc8:	e008      	b.n	8004cdc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cca:	f7fc fa0b 	bl	80010e4 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e006      	b.n	8004cea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004cdc:	4b05      	ldr	r3, [pc, #20]	@ (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0f0      	beq.n	8004cca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	58024400 	.word	0x58024400
 8004cf8:	ffff0007 	.word	0xffff0007

08004cfc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d0a:	4b53      	ldr	r3, [pc, #332]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d101      	bne.n	8004d1a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e099      	b.n	8004e4e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d1a:	4b4f      	ldr	r3, [pc, #316]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a4e      	ldr	r2, [pc, #312]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004d20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d26:	f7fc f9dd 	bl	80010e4 <HAL_GetTick>
 8004d2a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d2c:	e008      	b.n	8004d40 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d2e:	f7fc f9d9 	bl	80010e4 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e086      	b.n	8004e4e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d40:	4b45      	ldr	r3, [pc, #276]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f0      	bne.n	8004d2e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d4c:	4b42      	ldr	r3, [pc, #264]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d50:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	051b      	lsls	r3, r3, #20
 8004d5a:	493f      	ldr	r1, [pc, #252]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	3b01      	subs	r3, #1
 8004d66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	025b      	lsls	r3, r3, #9
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	431a      	orrs	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	041b      	lsls	r3, r3, #16
 8004d7e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	061b      	lsls	r3, r3, #24
 8004d8c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d90:	4931      	ldr	r1, [pc, #196]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004d96:	4b30      	ldr	r3, [pc, #192]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	492d      	ldr	r1, [pc, #180]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004da8:	4b2b      	ldr	r3, [pc, #172]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	4928      	ldr	r1, [pc, #160]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004dba:	4b27      	ldr	r3, [pc, #156]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbe:	4a26      	ldr	r2, [pc, #152]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004dc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004dc6:	4b24      	ldr	r3, [pc, #144]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004dc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dca:	4b24      	ldr	r3, [pc, #144]	@ (8004e5c <RCCEx_PLL3_Config+0x160>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	69d2      	ldr	r2, [r2, #28]
 8004dd2:	00d2      	lsls	r2, r2, #3
 8004dd4:	4920      	ldr	r1, [pc, #128]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004dda:	4b1f      	ldr	r3, [pc, #124]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dde:	4a1e      	ldr	r2, [pc, #120]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004de4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d106      	bne.n	8004dfa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004dec:	4b1a      	ldr	r3, [pc, #104]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df0:	4a19      	ldr	r2, [pc, #100]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004df2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004df6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004df8:	e00f      	b.n	8004e1a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d106      	bne.n	8004e0e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e00:	4b15      	ldr	r3, [pc, #84]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e04:	4a14      	ldr	r2, [pc, #80]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004e06:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e0c:	e005      	b.n	8004e1a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e0e:	4b12      	ldr	r3, [pc, #72]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e12:	4a11      	ldr	r2, [pc, #68]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004e14:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e18:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a0e      	ldr	r2, [pc, #56]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e26:	f7fc f95d 	bl	80010e4 <HAL_GetTick>
 8004e2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e2c:	e008      	b.n	8004e40 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e2e:	f7fc f959 	bl	80010e4 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d901      	bls.n	8004e40 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e006      	b.n	8004e4e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e40:	4b05      	ldr	r3, [pc, #20]	@ (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0f0      	beq.n	8004e2e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	58024400 	.word	0x58024400
 8004e5c:	ffff0007 	.word	0xffff0007

08004e60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e042      	b.n	8004ef8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d106      	bne.n	8004e8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7fb ff65 	bl	8000d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2224      	movs	r2, #36	@ 0x24
 8004e8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0201 	bic.w	r2, r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fd90 	bl	80059d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f825 	bl	8004f00 <UART_SetConfig>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d101      	bne.n	8004ec0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e01b      	b.n	8004ef8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ece:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ede:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fe0f 	bl	8005b14 <UART_CheckIdleState>
 8004ef6:	4603      	mov	r3, r0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f04:	b092      	sub	sp, #72	@ 0x48
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	4bbe      	ldr	r3, [pc, #760]	@ (8005228 <UART_SetConfig+0x328>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	6812      	ldr	r2, [r2, #0]
 8004f36:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4ab3      	ldr	r2, [pc, #716]	@ (800522c <UART_SetConfig+0x32c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d004      	beq.n	8004f6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	4baf      	ldr	r3, [pc, #700]	@ (8005230 <UART_SetConfig+0x330>)
 8004f74:	4013      	ands	r3, r2
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f7c:	430b      	orrs	r3, r1
 8004f7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f86:	f023 010f 	bic.w	r1, r3, #15
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4aa6      	ldr	r2, [pc, #664]	@ (8005234 <UART_SetConfig+0x334>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d177      	bne.n	8005090 <UART_SetConfig+0x190>
 8004fa0:	4ba5      	ldr	r3, [pc, #660]	@ (8005238 <UART_SetConfig+0x338>)
 8004fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fa8:	2b28      	cmp	r3, #40	@ 0x28
 8004faa:	d86d      	bhi.n	8005088 <UART_SetConfig+0x188>
 8004fac:	a201      	add	r2, pc, #4	@ (adr r2, 8004fb4 <UART_SetConfig+0xb4>)
 8004fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb2:	bf00      	nop
 8004fb4:	08005059 	.word	0x08005059
 8004fb8:	08005089 	.word	0x08005089
 8004fbc:	08005089 	.word	0x08005089
 8004fc0:	08005089 	.word	0x08005089
 8004fc4:	08005089 	.word	0x08005089
 8004fc8:	08005089 	.word	0x08005089
 8004fcc:	08005089 	.word	0x08005089
 8004fd0:	08005089 	.word	0x08005089
 8004fd4:	08005061 	.word	0x08005061
 8004fd8:	08005089 	.word	0x08005089
 8004fdc:	08005089 	.word	0x08005089
 8004fe0:	08005089 	.word	0x08005089
 8004fe4:	08005089 	.word	0x08005089
 8004fe8:	08005089 	.word	0x08005089
 8004fec:	08005089 	.word	0x08005089
 8004ff0:	08005089 	.word	0x08005089
 8004ff4:	08005069 	.word	0x08005069
 8004ff8:	08005089 	.word	0x08005089
 8004ffc:	08005089 	.word	0x08005089
 8005000:	08005089 	.word	0x08005089
 8005004:	08005089 	.word	0x08005089
 8005008:	08005089 	.word	0x08005089
 800500c:	08005089 	.word	0x08005089
 8005010:	08005089 	.word	0x08005089
 8005014:	08005071 	.word	0x08005071
 8005018:	08005089 	.word	0x08005089
 800501c:	08005089 	.word	0x08005089
 8005020:	08005089 	.word	0x08005089
 8005024:	08005089 	.word	0x08005089
 8005028:	08005089 	.word	0x08005089
 800502c:	08005089 	.word	0x08005089
 8005030:	08005089 	.word	0x08005089
 8005034:	08005079 	.word	0x08005079
 8005038:	08005089 	.word	0x08005089
 800503c:	08005089 	.word	0x08005089
 8005040:	08005089 	.word	0x08005089
 8005044:	08005089 	.word	0x08005089
 8005048:	08005089 	.word	0x08005089
 800504c:	08005089 	.word	0x08005089
 8005050:	08005089 	.word	0x08005089
 8005054:	08005081 	.word	0x08005081
 8005058:	2301      	movs	r3, #1
 800505a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800505e:	e222      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005060:	2304      	movs	r3, #4
 8005062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005066:	e21e      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005068:	2308      	movs	r3, #8
 800506a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800506e:	e21a      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005070:	2310      	movs	r3, #16
 8005072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005076:	e216      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005078:	2320      	movs	r3, #32
 800507a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800507e:	e212      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005080:	2340      	movs	r3, #64	@ 0x40
 8005082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005086:	e20e      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005088:	2380      	movs	r3, #128	@ 0x80
 800508a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800508e:	e20a      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a69      	ldr	r2, [pc, #420]	@ (800523c <UART_SetConfig+0x33c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d130      	bne.n	80050fc <UART_SetConfig+0x1fc>
 800509a:	4b67      	ldr	r3, [pc, #412]	@ (8005238 <UART_SetConfig+0x338>)
 800509c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	2b05      	cmp	r3, #5
 80050a4:	d826      	bhi.n	80050f4 <UART_SetConfig+0x1f4>
 80050a6:	a201      	add	r2, pc, #4	@ (adr r2, 80050ac <UART_SetConfig+0x1ac>)
 80050a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ac:	080050c5 	.word	0x080050c5
 80050b0:	080050cd 	.word	0x080050cd
 80050b4:	080050d5 	.word	0x080050d5
 80050b8:	080050dd 	.word	0x080050dd
 80050bc:	080050e5 	.word	0x080050e5
 80050c0:	080050ed 	.word	0x080050ed
 80050c4:	2300      	movs	r3, #0
 80050c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ca:	e1ec      	b.n	80054a6 <UART_SetConfig+0x5a6>
 80050cc:	2304      	movs	r3, #4
 80050ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050d2:	e1e8      	b.n	80054a6 <UART_SetConfig+0x5a6>
 80050d4:	2308      	movs	r3, #8
 80050d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050da:	e1e4      	b.n	80054a6 <UART_SetConfig+0x5a6>
 80050dc:	2310      	movs	r3, #16
 80050de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050e2:	e1e0      	b.n	80054a6 <UART_SetConfig+0x5a6>
 80050e4:	2320      	movs	r3, #32
 80050e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ea:	e1dc      	b.n	80054a6 <UART_SetConfig+0x5a6>
 80050ec:	2340      	movs	r3, #64	@ 0x40
 80050ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050f2:	e1d8      	b.n	80054a6 <UART_SetConfig+0x5a6>
 80050f4:	2380      	movs	r3, #128	@ 0x80
 80050f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050fa:	e1d4      	b.n	80054a6 <UART_SetConfig+0x5a6>
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a4f      	ldr	r2, [pc, #316]	@ (8005240 <UART_SetConfig+0x340>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d130      	bne.n	8005168 <UART_SetConfig+0x268>
 8005106:	4b4c      	ldr	r3, [pc, #304]	@ (8005238 <UART_SetConfig+0x338>)
 8005108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800510a:	f003 0307 	and.w	r3, r3, #7
 800510e:	2b05      	cmp	r3, #5
 8005110:	d826      	bhi.n	8005160 <UART_SetConfig+0x260>
 8005112:	a201      	add	r2, pc, #4	@ (adr r2, 8005118 <UART_SetConfig+0x218>)
 8005114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005118:	08005131 	.word	0x08005131
 800511c:	08005139 	.word	0x08005139
 8005120:	08005141 	.word	0x08005141
 8005124:	08005149 	.word	0x08005149
 8005128:	08005151 	.word	0x08005151
 800512c:	08005159 	.word	0x08005159
 8005130:	2300      	movs	r3, #0
 8005132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005136:	e1b6      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005138:	2304      	movs	r3, #4
 800513a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800513e:	e1b2      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005140:	2308      	movs	r3, #8
 8005142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005146:	e1ae      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005148:	2310      	movs	r3, #16
 800514a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800514e:	e1aa      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005150:	2320      	movs	r3, #32
 8005152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005156:	e1a6      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005158:	2340      	movs	r3, #64	@ 0x40
 800515a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800515e:	e1a2      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005160:	2380      	movs	r3, #128	@ 0x80
 8005162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005166:	e19e      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a35      	ldr	r2, [pc, #212]	@ (8005244 <UART_SetConfig+0x344>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d130      	bne.n	80051d4 <UART_SetConfig+0x2d4>
 8005172:	4b31      	ldr	r3, [pc, #196]	@ (8005238 <UART_SetConfig+0x338>)
 8005174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	2b05      	cmp	r3, #5
 800517c:	d826      	bhi.n	80051cc <UART_SetConfig+0x2cc>
 800517e:	a201      	add	r2, pc, #4	@ (adr r2, 8005184 <UART_SetConfig+0x284>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	0800519d 	.word	0x0800519d
 8005188:	080051a5 	.word	0x080051a5
 800518c:	080051ad 	.word	0x080051ad
 8005190:	080051b5 	.word	0x080051b5
 8005194:	080051bd 	.word	0x080051bd
 8005198:	080051c5 	.word	0x080051c5
 800519c:	2300      	movs	r3, #0
 800519e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051a2:	e180      	b.n	80054a6 <UART_SetConfig+0x5a6>
 80051a4:	2304      	movs	r3, #4
 80051a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051aa:	e17c      	b.n	80054a6 <UART_SetConfig+0x5a6>
 80051ac:	2308      	movs	r3, #8
 80051ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051b2:	e178      	b.n	80054a6 <UART_SetConfig+0x5a6>
 80051b4:	2310      	movs	r3, #16
 80051b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ba:	e174      	b.n	80054a6 <UART_SetConfig+0x5a6>
 80051bc:	2320      	movs	r3, #32
 80051be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051c2:	e170      	b.n	80054a6 <UART_SetConfig+0x5a6>
 80051c4:	2340      	movs	r3, #64	@ 0x40
 80051c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ca:	e16c      	b.n	80054a6 <UART_SetConfig+0x5a6>
 80051cc:	2380      	movs	r3, #128	@ 0x80
 80051ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051d2:	e168      	b.n	80054a6 <UART_SetConfig+0x5a6>
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005248 <UART_SetConfig+0x348>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d142      	bne.n	8005264 <UART_SetConfig+0x364>
 80051de:	4b16      	ldr	r3, [pc, #88]	@ (8005238 <UART_SetConfig+0x338>)
 80051e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	2b05      	cmp	r3, #5
 80051e8:	d838      	bhi.n	800525c <UART_SetConfig+0x35c>
 80051ea:	a201      	add	r2, pc, #4	@ (adr r2, 80051f0 <UART_SetConfig+0x2f0>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	08005209 	.word	0x08005209
 80051f4:	08005211 	.word	0x08005211
 80051f8:	08005219 	.word	0x08005219
 80051fc:	08005221 	.word	0x08005221
 8005200:	0800524d 	.word	0x0800524d
 8005204:	08005255 	.word	0x08005255
 8005208:	2300      	movs	r3, #0
 800520a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800520e:	e14a      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005210:	2304      	movs	r3, #4
 8005212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005216:	e146      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005218:	2308      	movs	r3, #8
 800521a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800521e:	e142      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005220:	2310      	movs	r3, #16
 8005222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005226:	e13e      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005228:	cfff69f3 	.word	0xcfff69f3
 800522c:	58000c00 	.word	0x58000c00
 8005230:	11fff4ff 	.word	0x11fff4ff
 8005234:	40011000 	.word	0x40011000
 8005238:	58024400 	.word	0x58024400
 800523c:	40004400 	.word	0x40004400
 8005240:	40004800 	.word	0x40004800
 8005244:	40004c00 	.word	0x40004c00
 8005248:	40005000 	.word	0x40005000
 800524c:	2320      	movs	r3, #32
 800524e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005252:	e128      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005254:	2340      	movs	r3, #64	@ 0x40
 8005256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800525a:	e124      	b.n	80054a6 <UART_SetConfig+0x5a6>
 800525c:	2380      	movs	r3, #128	@ 0x80
 800525e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005262:	e120      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4acb      	ldr	r2, [pc, #812]	@ (8005598 <UART_SetConfig+0x698>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d176      	bne.n	800535c <UART_SetConfig+0x45c>
 800526e:	4bcb      	ldr	r3, [pc, #812]	@ (800559c <UART_SetConfig+0x69c>)
 8005270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005272:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005276:	2b28      	cmp	r3, #40	@ 0x28
 8005278:	d86c      	bhi.n	8005354 <UART_SetConfig+0x454>
 800527a:	a201      	add	r2, pc, #4	@ (adr r2, 8005280 <UART_SetConfig+0x380>)
 800527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005280:	08005325 	.word	0x08005325
 8005284:	08005355 	.word	0x08005355
 8005288:	08005355 	.word	0x08005355
 800528c:	08005355 	.word	0x08005355
 8005290:	08005355 	.word	0x08005355
 8005294:	08005355 	.word	0x08005355
 8005298:	08005355 	.word	0x08005355
 800529c:	08005355 	.word	0x08005355
 80052a0:	0800532d 	.word	0x0800532d
 80052a4:	08005355 	.word	0x08005355
 80052a8:	08005355 	.word	0x08005355
 80052ac:	08005355 	.word	0x08005355
 80052b0:	08005355 	.word	0x08005355
 80052b4:	08005355 	.word	0x08005355
 80052b8:	08005355 	.word	0x08005355
 80052bc:	08005355 	.word	0x08005355
 80052c0:	08005335 	.word	0x08005335
 80052c4:	08005355 	.word	0x08005355
 80052c8:	08005355 	.word	0x08005355
 80052cc:	08005355 	.word	0x08005355
 80052d0:	08005355 	.word	0x08005355
 80052d4:	08005355 	.word	0x08005355
 80052d8:	08005355 	.word	0x08005355
 80052dc:	08005355 	.word	0x08005355
 80052e0:	0800533d 	.word	0x0800533d
 80052e4:	08005355 	.word	0x08005355
 80052e8:	08005355 	.word	0x08005355
 80052ec:	08005355 	.word	0x08005355
 80052f0:	08005355 	.word	0x08005355
 80052f4:	08005355 	.word	0x08005355
 80052f8:	08005355 	.word	0x08005355
 80052fc:	08005355 	.word	0x08005355
 8005300:	08005345 	.word	0x08005345
 8005304:	08005355 	.word	0x08005355
 8005308:	08005355 	.word	0x08005355
 800530c:	08005355 	.word	0x08005355
 8005310:	08005355 	.word	0x08005355
 8005314:	08005355 	.word	0x08005355
 8005318:	08005355 	.word	0x08005355
 800531c:	08005355 	.word	0x08005355
 8005320:	0800534d 	.word	0x0800534d
 8005324:	2301      	movs	r3, #1
 8005326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800532a:	e0bc      	b.n	80054a6 <UART_SetConfig+0x5a6>
 800532c:	2304      	movs	r3, #4
 800532e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005332:	e0b8      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005334:	2308      	movs	r3, #8
 8005336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800533a:	e0b4      	b.n	80054a6 <UART_SetConfig+0x5a6>
 800533c:	2310      	movs	r3, #16
 800533e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005342:	e0b0      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005344:	2320      	movs	r3, #32
 8005346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800534a:	e0ac      	b.n	80054a6 <UART_SetConfig+0x5a6>
 800534c:	2340      	movs	r3, #64	@ 0x40
 800534e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005352:	e0a8      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005354:	2380      	movs	r3, #128	@ 0x80
 8005356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800535a:	e0a4      	b.n	80054a6 <UART_SetConfig+0x5a6>
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a8f      	ldr	r2, [pc, #572]	@ (80055a0 <UART_SetConfig+0x6a0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d130      	bne.n	80053c8 <UART_SetConfig+0x4c8>
 8005366:	4b8d      	ldr	r3, [pc, #564]	@ (800559c <UART_SetConfig+0x69c>)
 8005368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	2b05      	cmp	r3, #5
 8005370:	d826      	bhi.n	80053c0 <UART_SetConfig+0x4c0>
 8005372:	a201      	add	r2, pc, #4	@ (adr r2, 8005378 <UART_SetConfig+0x478>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	08005391 	.word	0x08005391
 800537c:	08005399 	.word	0x08005399
 8005380:	080053a1 	.word	0x080053a1
 8005384:	080053a9 	.word	0x080053a9
 8005388:	080053b1 	.word	0x080053b1
 800538c:	080053b9 	.word	0x080053b9
 8005390:	2300      	movs	r3, #0
 8005392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005396:	e086      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005398:	2304      	movs	r3, #4
 800539a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539e:	e082      	b.n	80054a6 <UART_SetConfig+0x5a6>
 80053a0:	2308      	movs	r3, #8
 80053a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a6:	e07e      	b.n	80054a6 <UART_SetConfig+0x5a6>
 80053a8:	2310      	movs	r3, #16
 80053aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ae:	e07a      	b.n	80054a6 <UART_SetConfig+0x5a6>
 80053b0:	2320      	movs	r3, #32
 80053b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053b6:	e076      	b.n	80054a6 <UART_SetConfig+0x5a6>
 80053b8:	2340      	movs	r3, #64	@ 0x40
 80053ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053be:	e072      	b.n	80054a6 <UART_SetConfig+0x5a6>
 80053c0:	2380      	movs	r3, #128	@ 0x80
 80053c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053c6:	e06e      	b.n	80054a6 <UART_SetConfig+0x5a6>
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a75      	ldr	r2, [pc, #468]	@ (80055a4 <UART_SetConfig+0x6a4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d130      	bne.n	8005434 <UART_SetConfig+0x534>
 80053d2:	4b72      	ldr	r3, [pc, #456]	@ (800559c <UART_SetConfig+0x69c>)
 80053d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	2b05      	cmp	r3, #5
 80053dc:	d826      	bhi.n	800542c <UART_SetConfig+0x52c>
 80053de:	a201      	add	r2, pc, #4	@ (adr r2, 80053e4 <UART_SetConfig+0x4e4>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	080053fd 	.word	0x080053fd
 80053e8:	08005405 	.word	0x08005405
 80053ec:	0800540d 	.word	0x0800540d
 80053f0:	08005415 	.word	0x08005415
 80053f4:	0800541d 	.word	0x0800541d
 80053f8:	08005425 	.word	0x08005425
 80053fc:	2300      	movs	r3, #0
 80053fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005402:	e050      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005404:	2304      	movs	r3, #4
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540a:	e04c      	b.n	80054a6 <UART_SetConfig+0x5a6>
 800540c:	2308      	movs	r3, #8
 800540e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005412:	e048      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005414:	2310      	movs	r3, #16
 8005416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541a:	e044      	b.n	80054a6 <UART_SetConfig+0x5a6>
 800541c:	2320      	movs	r3, #32
 800541e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005422:	e040      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005424:	2340      	movs	r3, #64	@ 0x40
 8005426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800542a:	e03c      	b.n	80054a6 <UART_SetConfig+0x5a6>
 800542c:	2380      	movs	r3, #128	@ 0x80
 800542e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005432:	e038      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a5b      	ldr	r2, [pc, #364]	@ (80055a8 <UART_SetConfig+0x6a8>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d130      	bne.n	80054a0 <UART_SetConfig+0x5a0>
 800543e:	4b57      	ldr	r3, [pc, #348]	@ (800559c <UART_SetConfig+0x69c>)
 8005440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	2b05      	cmp	r3, #5
 8005448:	d826      	bhi.n	8005498 <UART_SetConfig+0x598>
 800544a:	a201      	add	r2, pc, #4	@ (adr r2, 8005450 <UART_SetConfig+0x550>)
 800544c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005450:	08005469 	.word	0x08005469
 8005454:	08005471 	.word	0x08005471
 8005458:	08005479 	.word	0x08005479
 800545c:	08005481 	.word	0x08005481
 8005460:	08005489 	.word	0x08005489
 8005464:	08005491 	.word	0x08005491
 8005468:	2302      	movs	r3, #2
 800546a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800546e:	e01a      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005470:	2304      	movs	r3, #4
 8005472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005476:	e016      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005478:	2308      	movs	r3, #8
 800547a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800547e:	e012      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005480:	2310      	movs	r3, #16
 8005482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005486:	e00e      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005488:	2320      	movs	r3, #32
 800548a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800548e:	e00a      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005490:	2340      	movs	r3, #64	@ 0x40
 8005492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005496:	e006      	b.n	80054a6 <UART_SetConfig+0x5a6>
 8005498:	2380      	movs	r3, #128	@ 0x80
 800549a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800549e:	e002      	b.n	80054a6 <UART_SetConfig+0x5a6>
 80054a0:	2380      	movs	r3, #128	@ 0x80
 80054a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a3f      	ldr	r2, [pc, #252]	@ (80055a8 <UART_SetConfig+0x6a8>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	f040 80f8 	bne.w	80056a2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80054b6:	2b20      	cmp	r3, #32
 80054b8:	dc46      	bgt.n	8005548 <UART_SetConfig+0x648>
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	f2c0 8082 	blt.w	80055c4 <UART_SetConfig+0x6c4>
 80054c0:	3b02      	subs	r3, #2
 80054c2:	2b1e      	cmp	r3, #30
 80054c4:	d87e      	bhi.n	80055c4 <UART_SetConfig+0x6c4>
 80054c6:	a201      	add	r2, pc, #4	@ (adr r2, 80054cc <UART_SetConfig+0x5cc>)
 80054c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054cc:	0800554f 	.word	0x0800554f
 80054d0:	080055c5 	.word	0x080055c5
 80054d4:	08005557 	.word	0x08005557
 80054d8:	080055c5 	.word	0x080055c5
 80054dc:	080055c5 	.word	0x080055c5
 80054e0:	080055c5 	.word	0x080055c5
 80054e4:	08005567 	.word	0x08005567
 80054e8:	080055c5 	.word	0x080055c5
 80054ec:	080055c5 	.word	0x080055c5
 80054f0:	080055c5 	.word	0x080055c5
 80054f4:	080055c5 	.word	0x080055c5
 80054f8:	080055c5 	.word	0x080055c5
 80054fc:	080055c5 	.word	0x080055c5
 8005500:	080055c5 	.word	0x080055c5
 8005504:	08005577 	.word	0x08005577
 8005508:	080055c5 	.word	0x080055c5
 800550c:	080055c5 	.word	0x080055c5
 8005510:	080055c5 	.word	0x080055c5
 8005514:	080055c5 	.word	0x080055c5
 8005518:	080055c5 	.word	0x080055c5
 800551c:	080055c5 	.word	0x080055c5
 8005520:	080055c5 	.word	0x080055c5
 8005524:	080055c5 	.word	0x080055c5
 8005528:	080055c5 	.word	0x080055c5
 800552c:	080055c5 	.word	0x080055c5
 8005530:	080055c5 	.word	0x080055c5
 8005534:	080055c5 	.word	0x080055c5
 8005538:	080055c5 	.word	0x080055c5
 800553c:	080055c5 	.word	0x080055c5
 8005540:	080055c5 	.word	0x080055c5
 8005544:	080055b7 	.word	0x080055b7
 8005548:	2b40      	cmp	r3, #64	@ 0x40
 800554a:	d037      	beq.n	80055bc <UART_SetConfig+0x6bc>
 800554c:	e03a      	b.n	80055c4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800554e:	f7ff f865 	bl	800461c <HAL_RCCEx_GetD3PCLK1Freq>
 8005552:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005554:	e03c      	b.n	80055d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005556:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff f874 	bl	8004648 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005564:	e034      	b.n	80055d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005566:	f107 0318 	add.w	r3, r7, #24
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff f9c0 	bl	80048f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005574:	e02c      	b.n	80055d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005576:	4b09      	ldr	r3, [pc, #36]	@ (800559c <UART_SetConfig+0x69c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b00      	cmp	r3, #0
 8005580:	d016      	beq.n	80055b0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005582:	4b06      	ldr	r3, [pc, #24]	@ (800559c <UART_SetConfig+0x69c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	08db      	lsrs	r3, r3, #3
 8005588:	f003 0303 	and.w	r3, r3, #3
 800558c:	4a07      	ldr	r2, [pc, #28]	@ (80055ac <UART_SetConfig+0x6ac>)
 800558e:	fa22 f303 	lsr.w	r3, r2, r3
 8005592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005594:	e01c      	b.n	80055d0 <UART_SetConfig+0x6d0>
 8005596:	bf00      	nop
 8005598:	40011400 	.word	0x40011400
 800559c:	58024400 	.word	0x58024400
 80055a0:	40007800 	.word	0x40007800
 80055a4:	40007c00 	.word	0x40007c00
 80055a8:	58000c00 	.word	0x58000c00
 80055ac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80055b0:	4b9d      	ldr	r3, [pc, #628]	@ (8005828 <UART_SetConfig+0x928>)
 80055b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055b4:	e00c      	b.n	80055d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80055b6:	4b9d      	ldr	r3, [pc, #628]	@ (800582c <UART_SetConfig+0x92c>)
 80055b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055ba:	e009      	b.n	80055d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055c2:	e005      	b.n	80055d0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80055ce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 81de 	beq.w	8005994 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055dc:	4a94      	ldr	r2, [pc, #592]	@ (8005830 <UART_SetConfig+0x930>)
 80055de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055e2:	461a      	mov	r2, r3
 80055e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80055ea:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	4613      	mov	r3, r2
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	4413      	add	r3, r2
 80055f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d305      	bcc.n	8005608 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005604:	429a      	cmp	r2, r3
 8005606:	d903      	bls.n	8005610 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800560e:	e1c1      	b.n	8005994 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005612:	2200      	movs	r2, #0
 8005614:	60bb      	str	r3, [r7, #8]
 8005616:	60fa      	str	r2, [r7, #12]
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561c:	4a84      	ldr	r2, [pc, #528]	@ (8005830 <UART_SetConfig+0x930>)
 800561e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005622:	b29b      	uxth	r3, r3
 8005624:	2200      	movs	r2, #0
 8005626:	603b      	str	r3, [r7, #0]
 8005628:	607a      	str	r2, [r7, #4]
 800562a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800562e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005632:	f7fa fe51 	bl	80002d8 <__aeabi_uldivmod>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	4610      	mov	r0, r2
 800563c:	4619      	mov	r1, r3
 800563e:	f04f 0200 	mov.w	r2, #0
 8005642:	f04f 0300 	mov.w	r3, #0
 8005646:	020b      	lsls	r3, r1, #8
 8005648:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800564c:	0202      	lsls	r2, r0, #8
 800564e:	6979      	ldr	r1, [r7, #20]
 8005650:	6849      	ldr	r1, [r1, #4]
 8005652:	0849      	lsrs	r1, r1, #1
 8005654:	2000      	movs	r0, #0
 8005656:	460c      	mov	r4, r1
 8005658:	4605      	mov	r5, r0
 800565a:	eb12 0804 	adds.w	r8, r2, r4
 800565e:	eb43 0905 	adc.w	r9, r3, r5
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	469a      	mov	sl, r3
 800566a:	4693      	mov	fp, r2
 800566c:	4652      	mov	r2, sl
 800566e:	465b      	mov	r3, fp
 8005670:	4640      	mov	r0, r8
 8005672:	4649      	mov	r1, r9
 8005674:	f7fa fe30 	bl	80002d8 <__aeabi_uldivmod>
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	4613      	mov	r3, r2
 800567e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005682:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005686:	d308      	bcc.n	800569a <UART_SetConfig+0x79a>
 8005688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800568a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800568e:	d204      	bcs.n	800569a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005696:	60da      	str	r2, [r3, #12]
 8005698:	e17c      	b.n	8005994 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80056a0:	e178      	b.n	8005994 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056aa:	f040 80c5 	bne.w	8005838 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80056ae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80056b2:	2b20      	cmp	r3, #32
 80056b4:	dc48      	bgt.n	8005748 <UART_SetConfig+0x848>
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	db7b      	blt.n	80057b2 <UART_SetConfig+0x8b2>
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	d879      	bhi.n	80057b2 <UART_SetConfig+0x8b2>
 80056be:	a201      	add	r2, pc, #4	@ (adr r2, 80056c4 <UART_SetConfig+0x7c4>)
 80056c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c4:	0800574f 	.word	0x0800574f
 80056c8:	08005757 	.word	0x08005757
 80056cc:	080057b3 	.word	0x080057b3
 80056d0:	080057b3 	.word	0x080057b3
 80056d4:	0800575f 	.word	0x0800575f
 80056d8:	080057b3 	.word	0x080057b3
 80056dc:	080057b3 	.word	0x080057b3
 80056e0:	080057b3 	.word	0x080057b3
 80056e4:	0800576f 	.word	0x0800576f
 80056e8:	080057b3 	.word	0x080057b3
 80056ec:	080057b3 	.word	0x080057b3
 80056f0:	080057b3 	.word	0x080057b3
 80056f4:	080057b3 	.word	0x080057b3
 80056f8:	080057b3 	.word	0x080057b3
 80056fc:	080057b3 	.word	0x080057b3
 8005700:	080057b3 	.word	0x080057b3
 8005704:	0800577f 	.word	0x0800577f
 8005708:	080057b3 	.word	0x080057b3
 800570c:	080057b3 	.word	0x080057b3
 8005710:	080057b3 	.word	0x080057b3
 8005714:	080057b3 	.word	0x080057b3
 8005718:	080057b3 	.word	0x080057b3
 800571c:	080057b3 	.word	0x080057b3
 8005720:	080057b3 	.word	0x080057b3
 8005724:	080057b3 	.word	0x080057b3
 8005728:	080057b3 	.word	0x080057b3
 800572c:	080057b3 	.word	0x080057b3
 8005730:	080057b3 	.word	0x080057b3
 8005734:	080057b3 	.word	0x080057b3
 8005738:	080057b3 	.word	0x080057b3
 800573c:	080057b3 	.word	0x080057b3
 8005740:	080057b3 	.word	0x080057b3
 8005744:	080057a5 	.word	0x080057a5
 8005748:	2b40      	cmp	r3, #64	@ 0x40
 800574a:	d02e      	beq.n	80057aa <UART_SetConfig+0x8aa>
 800574c:	e031      	b.n	80057b2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800574e:	f7fd fd2f 	bl	80031b0 <HAL_RCC_GetPCLK1Freq>
 8005752:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005754:	e033      	b.n	80057be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005756:	f7fd fd41 	bl	80031dc <HAL_RCC_GetPCLK2Freq>
 800575a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800575c:	e02f      	b.n	80057be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800575e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005762:	4618      	mov	r0, r3
 8005764:	f7fe ff70 	bl	8004648 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800576c:	e027      	b.n	80057be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800576e:	f107 0318 	add.w	r3, r7, #24
 8005772:	4618      	mov	r0, r3
 8005774:	f7ff f8bc 	bl	80048f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800577c:	e01f      	b.n	80057be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800577e:	4b2d      	ldr	r3, [pc, #180]	@ (8005834 <UART_SetConfig+0x934>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0320 	and.w	r3, r3, #32
 8005786:	2b00      	cmp	r3, #0
 8005788:	d009      	beq.n	800579e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800578a:	4b2a      	ldr	r3, [pc, #168]	@ (8005834 <UART_SetConfig+0x934>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	08db      	lsrs	r3, r3, #3
 8005790:	f003 0303 	and.w	r3, r3, #3
 8005794:	4a24      	ldr	r2, [pc, #144]	@ (8005828 <UART_SetConfig+0x928>)
 8005796:	fa22 f303 	lsr.w	r3, r2, r3
 800579a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800579c:	e00f      	b.n	80057be <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800579e:	4b22      	ldr	r3, [pc, #136]	@ (8005828 <UART_SetConfig+0x928>)
 80057a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057a2:	e00c      	b.n	80057be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80057a4:	4b21      	ldr	r3, [pc, #132]	@ (800582c <UART_SetConfig+0x92c>)
 80057a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057a8:	e009      	b.n	80057be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057b0:	e005      	b.n	80057be <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80057bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 80e7 	beq.w	8005994 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ca:	4a19      	ldr	r2, [pc, #100]	@ (8005830 <UART_SetConfig+0x930>)
 80057cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057d0:	461a      	mov	r2, r3
 80057d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80057d8:	005a      	lsls	r2, r3, #1
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	085b      	lsrs	r3, r3, #1
 80057e0:	441a      	add	r2, r3
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ee:	2b0f      	cmp	r3, #15
 80057f0:	d916      	bls.n	8005820 <UART_SetConfig+0x920>
 80057f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057f8:	d212      	bcs.n	8005820 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	f023 030f 	bic.w	r3, r3, #15
 8005802:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005806:	085b      	lsrs	r3, r3, #1
 8005808:	b29b      	uxth	r3, r3
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	b29a      	uxth	r2, r3
 8005810:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005812:	4313      	orrs	r3, r2
 8005814:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800581c:	60da      	str	r2, [r3, #12]
 800581e:	e0b9      	b.n	8005994 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005826:	e0b5      	b.n	8005994 <UART_SetConfig+0xa94>
 8005828:	03d09000 	.word	0x03d09000
 800582c:	003d0900 	.word	0x003d0900
 8005830:	080066a8 	.word	0x080066a8
 8005834:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005838:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800583c:	2b20      	cmp	r3, #32
 800583e:	dc49      	bgt.n	80058d4 <UART_SetConfig+0x9d4>
 8005840:	2b00      	cmp	r3, #0
 8005842:	db7c      	blt.n	800593e <UART_SetConfig+0xa3e>
 8005844:	2b20      	cmp	r3, #32
 8005846:	d87a      	bhi.n	800593e <UART_SetConfig+0xa3e>
 8005848:	a201      	add	r2, pc, #4	@ (adr r2, 8005850 <UART_SetConfig+0x950>)
 800584a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584e:	bf00      	nop
 8005850:	080058db 	.word	0x080058db
 8005854:	080058e3 	.word	0x080058e3
 8005858:	0800593f 	.word	0x0800593f
 800585c:	0800593f 	.word	0x0800593f
 8005860:	080058eb 	.word	0x080058eb
 8005864:	0800593f 	.word	0x0800593f
 8005868:	0800593f 	.word	0x0800593f
 800586c:	0800593f 	.word	0x0800593f
 8005870:	080058fb 	.word	0x080058fb
 8005874:	0800593f 	.word	0x0800593f
 8005878:	0800593f 	.word	0x0800593f
 800587c:	0800593f 	.word	0x0800593f
 8005880:	0800593f 	.word	0x0800593f
 8005884:	0800593f 	.word	0x0800593f
 8005888:	0800593f 	.word	0x0800593f
 800588c:	0800593f 	.word	0x0800593f
 8005890:	0800590b 	.word	0x0800590b
 8005894:	0800593f 	.word	0x0800593f
 8005898:	0800593f 	.word	0x0800593f
 800589c:	0800593f 	.word	0x0800593f
 80058a0:	0800593f 	.word	0x0800593f
 80058a4:	0800593f 	.word	0x0800593f
 80058a8:	0800593f 	.word	0x0800593f
 80058ac:	0800593f 	.word	0x0800593f
 80058b0:	0800593f 	.word	0x0800593f
 80058b4:	0800593f 	.word	0x0800593f
 80058b8:	0800593f 	.word	0x0800593f
 80058bc:	0800593f 	.word	0x0800593f
 80058c0:	0800593f 	.word	0x0800593f
 80058c4:	0800593f 	.word	0x0800593f
 80058c8:	0800593f 	.word	0x0800593f
 80058cc:	0800593f 	.word	0x0800593f
 80058d0:	08005931 	.word	0x08005931
 80058d4:	2b40      	cmp	r3, #64	@ 0x40
 80058d6:	d02e      	beq.n	8005936 <UART_SetConfig+0xa36>
 80058d8:	e031      	b.n	800593e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058da:	f7fd fc69 	bl	80031b0 <HAL_RCC_GetPCLK1Freq>
 80058de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80058e0:	e033      	b.n	800594a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058e2:	f7fd fc7b 	bl	80031dc <HAL_RCC_GetPCLK2Freq>
 80058e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80058e8:	e02f      	b.n	800594a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fe feaa 	bl	8004648 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058f8:	e027      	b.n	800594a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058fa:	f107 0318 	add.w	r3, r7, #24
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fe fff6 	bl	80048f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005908:	e01f      	b.n	800594a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800590a:	4b2d      	ldr	r3, [pc, #180]	@ (80059c0 <UART_SetConfig+0xac0>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b00      	cmp	r3, #0
 8005914:	d009      	beq.n	800592a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005916:	4b2a      	ldr	r3, [pc, #168]	@ (80059c0 <UART_SetConfig+0xac0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	08db      	lsrs	r3, r3, #3
 800591c:	f003 0303 	and.w	r3, r3, #3
 8005920:	4a28      	ldr	r2, [pc, #160]	@ (80059c4 <UART_SetConfig+0xac4>)
 8005922:	fa22 f303 	lsr.w	r3, r2, r3
 8005926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005928:	e00f      	b.n	800594a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800592a:	4b26      	ldr	r3, [pc, #152]	@ (80059c4 <UART_SetConfig+0xac4>)
 800592c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800592e:	e00c      	b.n	800594a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005930:	4b25      	ldr	r3, [pc, #148]	@ (80059c8 <UART_SetConfig+0xac8>)
 8005932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005934:	e009      	b.n	800594a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005936:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800593a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800593c:	e005      	b.n	800594a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800593e:	2300      	movs	r3, #0
 8005940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005948:	bf00      	nop
    }

    if (pclk != 0U)
 800594a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800594c:	2b00      	cmp	r3, #0
 800594e:	d021      	beq.n	8005994 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005954:	4a1d      	ldr	r2, [pc, #116]	@ (80059cc <UART_SetConfig+0xacc>)
 8005956:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800595a:	461a      	mov	r2, r3
 800595c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800595e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	085b      	lsrs	r3, r3, #1
 8005968:	441a      	add	r2, r3
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005972:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005976:	2b0f      	cmp	r3, #15
 8005978:	d909      	bls.n	800598e <UART_SetConfig+0xa8e>
 800597a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800597c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005980:	d205      	bcs.n	800598e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005984:	b29a      	uxth	r2, r3
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	60da      	str	r2, [r3, #12]
 800598c:	e002      	b.n	8005994 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	2201      	movs	r2, #1
 8005998:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	2201      	movs	r2, #1
 80059a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2200      	movs	r2, #0
 80059a8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2200      	movs	r2, #0
 80059ae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80059b0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3748      	adds	r7, #72	@ 0x48
 80059b8:	46bd      	mov	sp, r7
 80059ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059be:	bf00      	nop
 80059c0:	58024400 	.word	0x58024400
 80059c4:	03d09000 	.word	0x03d09000
 80059c8:	003d0900 	.word	0x003d0900
 80059cc:	080066a8 	.word	0x080066a8

080059d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00a      	beq.n	80059fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00a      	beq.n	8005a1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00a      	beq.n	8005a3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a42:	f003 0304 	and.w	r3, r3, #4
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00a      	beq.n	8005a60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a64:	f003 0310 	and.w	r3, r3, #16
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00a      	beq.n	8005a82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a86:	f003 0320 	and.w	r3, r3, #32
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00a      	beq.n	8005aa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01a      	beq.n	8005ae6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ace:	d10a      	bne.n	8005ae6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00a      	beq.n	8005b08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	605a      	str	r2, [r3, #4]
  }
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b098      	sub	sp, #96	@ 0x60
 8005b18:	af02      	add	r7, sp, #8
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b24:	f7fb fade 	bl	80010e4 <HAL_GetTick>
 8005b28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0308 	and.w	r3, r3, #8
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d12f      	bne.n	8005b98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b40:	2200      	movs	r2, #0
 8005b42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f88e 	bl	8005c68 <UART_WaitOnFlagUntilTimeout>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d022      	beq.n	8005b98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5a:	e853 3f00 	ldrex	r3, [r3]
 8005b5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b66:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b70:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b72:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b78:	e841 2300 	strex	r3, r2, [r1]
 8005b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1e6      	bne.n	8005b52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2220      	movs	r2, #32
 8005b88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e063      	b.n	8005c60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0304 	and.w	r3, r3, #4
 8005ba2:	2b04      	cmp	r3, #4
 8005ba4:	d149      	bne.n	8005c3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ba6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f857 	bl	8005c68 <UART_WaitOnFlagUntilTimeout>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d03c      	beq.n	8005c3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc8:	e853 3f00 	ldrex	r3, [r3]
 8005bcc:	623b      	str	r3, [r7, #32]
   return(result);
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bde:	633b      	str	r3, [r7, #48]	@ 0x30
 8005be0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005be4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005be6:	e841 2300 	strex	r3, r2, [r1]
 8005bea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1e6      	bne.n	8005bc0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	e853 3f00 	ldrex	r3, [r3]
 8005c00:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f023 0301 	bic.w	r3, r3, #1
 8005c08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	3308      	adds	r3, #8
 8005c10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c12:	61fa      	str	r2, [r7, #28]
 8005c14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c16:	69b9      	ldr	r1, [r7, #24]
 8005c18:	69fa      	ldr	r2, [r7, #28]
 8005c1a:	e841 2300 	strex	r3, r2, [r1]
 8005c1e:	617b      	str	r3, [r7, #20]
   return(result);
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1e5      	bne.n	8005bf2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e012      	b.n	8005c60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3758      	adds	r7, #88	@ 0x58
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	603b      	str	r3, [r7, #0]
 8005c74:	4613      	mov	r3, r2
 8005c76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c78:	e04f      	b.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c80:	d04b      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c82:	f7fb fa2f 	bl	80010e4 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d302      	bcc.n	8005c98 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e04e      	b.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0304 	and.w	r3, r3, #4
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d037      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b80      	cmp	r3, #128	@ 0x80
 8005cae:	d034      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2b40      	cmp	r3, #64	@ 0x40
 8005cb4:	d031      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	f003 0308 	and.w	r3, r3, #8
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d110      	bne.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2208      	movs	r2, #8
 8005cca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 f839 	bl	8005d44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2208      	movs	r2, #8
 8005cd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e029      	b.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cf4:	d111      	bne.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005cfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f000 f81f 	bl	8005d44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e00f      	b.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69da      	ldr	r2, [r3, #28]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	4013      	ands	r3, r2
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	bf0c      	ite	eq
 8005d2a:	2301      	moveq	r3, #1
 8005d2c:	2300      	movne	r3, #0
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	461a      	mov	r2, r3
 8005d32:	79fb      	ldrb	r3, [r7, #7]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d0a0      	beq.n	8005c7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
	...

08005d44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b095      	sub	sp, #84	@ 0x54
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d54:	e853 3f00 	ldrex	r3, [r3]
 8005d58:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	461a      	mov	r2, r3
 8005d68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d72:	e841 2300 	strex	r3, r2, [r1]
 8005d76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1e6      	bne.n	8005d4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3308      	adds	r3, #8
 8005d84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	e853 3f00 	ldrex	r3, [r3]
 8005d8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d8e:	69fa      	ldr	r2, [r7, #28]
 8005d90:	4b1e      	ldr	r3, [pc, #120]	@ (8005e0c <UART_EndRxTransfer+0xc8>)
 8005d92:	4013      	ands	r3, r2
 8005d94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3308      	adds	r3, #8
 8005d9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005da0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005da4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005da6:	e841 2300 	strex	r3, r2, [r1]
 8005daa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1e5      	bne.n	8005d7e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d118      	bne.n	8005dec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	e853 3f00 	ldrex	r3, [r3]
 8005dc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f023 0310 	bic.w	r3, r3, #16
 8005dce:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dd8:	61bb      	str	r3, [r7, #24]
 8005dda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ddc:	6979      	ldr	r1, [r7, #20]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	e841 2300 	strex	r3, r2, [r1]
 8005de4:	613b      	str	r3, [r7, #16]
   return(result);
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1e6      	bne.n	8005dba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2220      	movs	r2, #32
 8005df0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005e00:	bf00      	nop
 8005e02:	3754      	adds	r7, #84	@ 0x54
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	effffffe 	.word	0xeffffffe

08005e10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d101      	bne.n	8005e26 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e22:	2302      	movs	r3, #2
 8005e24:	e027      	b.n	8005e76 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2224      	movs	r2, #36	@ 0x24
 8005e32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0201 	bic.w	r2, r2, #1
 8005e4c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005e54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
 8005e8a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d101      	bne.n	8005e9a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e96:	2302      	movs	r3, #2
 8005e98:	e02d      	b.n	8005ef6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2224      	movs	r2, #36	@ 0x24
 8005ea6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0201 	bic.w	r2, r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f850 	bl	8005f7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b084      	sub	sp, #16
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d101      	bne.n	8005f16 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f12:	2302      	movs	r3, #2
 8005f14:	e02d      	b.n	8005f72 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2224      	movs	r2, #36	@ 0x24
 8005f22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 0201 	bic.w	r2, r2, #1
 8005f3c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f812 	bl	8005f7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d108      	bne.n	8005f9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f9c:	e031      	b.n	8006002 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f9e:	2310      	movs	r3, #16
 8005fa0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005fa2:	2310      	movs	r3, #16
 8005fa4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	0e5b      	lsrs	r3, r3, #25
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	0f5b      	lsrs	r3, r3, #29
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fc6:	7bbb      	ldrb	r3, [r7, #14]
 8005fc8:	7b3a      	ldrb	r2, [r7, #12]
 8005fca:	4911      	ldr	r1, [pc, #68]	@ (8006010 <UARTEx_SetNbDataToProcess+0x94>)
 8005fcc:	5c8a      	ldrb	r2, [r1, r2]
 8005fce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fd2:	7b3a      	ldrb	r2, [r7, #12]
 8005fd4:	490f      	ldr	r1, [pc, #60]	@ (8006014 <UARTEx_SetNbDataToProcess+0x98>)
 8005fd6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
 8005fe6:	7b7a      	ldrb	r2, [r7, #13]
 8005fe8:	4909      	ldr	r1, [pc, #36]	@ (8006010 <UARTEx_SetNbDataToProcess+0x94>)
 8005fea:	5c8a      	ldrb	r2, [r1, r2]
 8005fec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ff0:	7b7a      	ldrb	r2, [r7, #13]
 8005ff2:	4908      	ldr	r1, [pc, #32]	@ (8006014 <UARTEx_SetNbDataToProcess+0x98>)
 8005ff4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ff6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006002:	bf00      	nop
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	080066c0 	.word	0x080066c0
 8006014:	080066c8 	.word	0x080066c8

08006018 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006018:	b084      	sub	sp, #16
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	f107 001c 	add.w	r0, r7, #28
 8006026:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800602a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800602e:	2b01      	cmp	r3, #1
 8006030:	d121      	bne.n	8006076 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006036:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	4b2c      	ldr	r3, [pc, #176]	@ (80060f4 <USB_CoreInit+0xdc>)
 8006044:	4013      	ands	r3, r2
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006056:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800605a:	2b01      	cmp	r3, #1
 800605c:	d105      	bne.n	800606a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 faaa 	bl	80065c4 <USB_CoreReset>
 8006070:	4603      	mov	r3, r0
 8006072:	73fb      	strb	r3, [r7, #15]
 8006074:	e01b      	b.n	80060ae <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fa9e 	bl	80065c4 <USB_CoreReset>
 8006088:	4603      	mov	r3, r0
 800608a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800608c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006090:	2b00      	cmp	r3, #0
 8006092:	d106      	bne.n	80060a2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006098:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	639a      	str	r2, [r3, #56]	@ 0x38
 80060a0:	e005      	b.n	80060ae <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80060ae:	7fbb      	ldrb	r3, [r7, #30]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d116      	bne.n	80060e2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060c2:	4b0d      	ldr	r3, [pc, #52]	@ (80060f8 <USB_CoreInit+0xe0>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f043 0206 	orr.w	r2, r3, #6
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f043 0220 	orr.w	r2, r3, #32
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80060e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060ee:	b004      	add	sp, #16
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	ffbdffbf 	.word	0xffbdffbf
 80060f8:	03ee0000 	.word	0x03ee0000

080060fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f023 0201 	bic.w	r2, r3, #1
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	460b      	mov	r3, r1
 8006128:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800613a:	78fb      	ldrb	r3, [r7, #3]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d115      	bne.n	800616c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800614c:	200a      	movs	r0, #10
 800614e:	f7fa ffd5 	bl	80010fc <HAL_Delay>
      ms += 10U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	330a      	adds	r3, #10
 8006156:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fa25 	bl	80065a8 <USB_GetMode>
 800615e:	4603      	mov	r3, r0
 8006160:	2b01      	cmp	r3, #1
 8006162:	d01e      	beq.n	80061a2 <USB_SetCurrentMode+0x84>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2bc7      	cmp	r3, #199	@ 0xc7
 8006168:	d9f0      	bls.n	800614c <USB_SetCurrentMode+0x2e>
 800616a:	e01a      	b.n	80061a2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800616c:	78fb      	ldrb	r3, [r7, #3]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d115      	bne.n	800619e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800617e:	200a      	movs	r0, #10
 8006180:	f7fa ffbc 	bl	80010fc <HAL_Delay>
      ms += 10U;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	330a      	adds	r3, #10
 8006188:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fa0c 	bl	80065a8 <USB_GetMode>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d005      	beq.n	80061a2 <USB_SetCurrentMode+0x84>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2bc7      	cmp	r3, #199	@ 0xc7
 800619a:	d9f0      	bls.n	800617e <USB_SetCurrentMode+0x60>
 800619c:	e001      	b.n	80061a2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e005      	b.n	80061ae <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2bc8      	cmp	r3, #200	@ 0xc8
 80061a6:	d101      	bne.n	80061ac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e000      	b.n	80061ae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
	...

080061b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061b8:	b084      	sub	sp, #16
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b086      	sub	sp, #24
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80061c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061d2:	2300      	movs	r3, #0
 80061d4:	613b      	str	r3, [r7, #16]
 80061d6:	e009      	b.n	80061ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	3340      	adds	r3, #64	@ 0x40
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	2200      	movs	r2, #0
 80061e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	3301      	adds	r3, #1
 80061ea:	613b      	str	r3, [r7, #16]
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	2b0e      	cmp	r3, #14
 80061f0:	d9f2      	bls.n	80061d8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d11c      	bne.n	8006234 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006208:	f043 0302 	orr.w	r3, r3, #2
 800620c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006212:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	601a      	str	r2, [r3, #0]
 8006232:	e005      	b.n	8006240 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006238:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006246:	461a      	mov	r2, r3
 8006248:	2300      	movs	r3, #0
 800624a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800624c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006250:	2b01      	cmp	r3, #1
 8006252:	d10d      	bne.n	8006270 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006254:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006258:	2b00      	cmp	r3, #0
 800625a:	d104      	bne.n	8006266 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800625c:	2100      	movs	r1, #0
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f968 	bl	8006534 <USB_SetDevSpeed>
 8006264:	e008      	b.n	8006278 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006266:	2101      	movs	r1, #1
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 f963 	bl	8006534 <USB_SetDevSpeed>
 800626e:	e003      	b.n	8006278 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006270:	2103      	movs	r1, #3
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f95e 	bl	8006534 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006278:	2110      	movs	r1, #16
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f8fa 	bl	8006474 <USB_FlushTxFifo>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f924 	bl	80064d8 <USB_FlushRxFifo>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062a0:	461a      	mov	r2, r3
 80062a2:	2300      	movs	r3, #0
 80062a4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062ac:	461a      	mov	r2, r3
 80062ae:	2300      	movs	r3, #0
 80062b0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062b8:	461a      	mov	r2, r3
 80062ba:	2300      	movs	r3, #0
 80062bc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062be:	2300      	movs	r3, #0
 80062c0:	613b      	str	r3, [r7, #16]
 80062c2:	e043      	b.n	800634c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062da:	d118      	bne.n	800630e <USB_DevInit+0x156>
    {
      if (i == 0U)
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10a      	bne.n	80062f8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ee:	461a      	mov	r2, r3
 80062f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80062f4:	6013      	str	r3, [r2, #0]
 80062f6:	e013      	b.n	8006320 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006304:	461a      	mov	r2, r3
 8006306:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	e008      	b.n	8006320 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4413      	add	r3, r2
 8006316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800631a:	461a      	mov	r2, r3
 800631c:	2300      	movs	r3, #0
 800631e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800632c:	461a      	mov	r2, r3
 800632e:	2300      	movs	r3, #0
 8006330:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	4413      	add	r3, r2
 800633a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800633e:	461a      	mov	r2, r3
 8006340:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006344:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	3301      	adds	r3, #1
 800634a:	613b      	str	r3, [r7, #16]
 800634c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006350:	461a      	mov	r2, r3
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	4293      	cmp	r3, r2
 8006356:	d3b5      	bcc.n	80062c4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006358:	2300      	movs	r3, #0
 800635a:	613b      	str	r3, [r7, #16]
 800635c:	e043      	b.n	80063e6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	4413      	add	r3, r2
 8006366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006370:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006374:	d118      	bne.n	80063a8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10a      	bne.n	8006392 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006388:	461a      	mov	r2, r3
 800638a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800638e:	6013      	str	r3, [r2, #0]
 8006390:	e013      	b.n	80063ba <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800639e:	461a      	mov	r2, r3
 80063a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	e008      	b.n	80063ba <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b4:	461a      	mov	r2, r3
 80063b6:	2300      	movs	r3, #0
 80063b8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063c6:	461a      	mov	r2, r3
 80063c8:	2300      	movs	r3, #0
 80063ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063d8:	461a      	mov	r2, r3
 80063da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	3301      	adds	r3, #1
 80063e4:	613b      	str	r3, [r7, #16]
 80063e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063ea:	461a      	mov	r2, r3
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d3b5      	bcc.n	800635e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006400:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006404:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006412:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006414:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006418:	2b00      	cmp	r3, #0
 800641a:	d105      	bne.n	8006428 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	f043 0210 	orr.w	r2, r3, #16
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	699a      	ldr	r2, [r3, #24]
 800642c:	4b0f      	ldr	r3, [pc, #60]	@ (800646c <USB_DevInit+0x2b4>)
 800642e:	4313      	orrs	r3, r2
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006434:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006438:	2b00      	cmp	r3, #0
 800643a:	d005      	beq.n	8006448 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	f043 0208 	orr.w	r2, r3, #8
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006448:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800644c:	2b01      	cmp	r3, #1
 800644e:	d105      	bne.n	800645c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	699a      	ldr	r2, [r3, #24]
 8006454:	4b06      	ldr	r3, [pc, #24]	@ (8006470 <USB_DevInit+0x2b8>)
 8006456:	4313      	orrs	r3, r2
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800645c:	7dfb      	ldrb	r3, [r7, #23]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006468:	b004      	add	sp, #16
 800646a:	4770      	bx	lr
 800646c:	803c3800 	.word	0x803c3800
 8006470:	40000004 	.word	0x40000004

08006474 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3301      	adds	r3, #1
 8006486:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800648e:	d901      	bls.n	8006494 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e01b      	b.n	80064cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	daf2      	bge.n	8006482 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800649c:	2300      	movs	r3, #0
 800649e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	019b      	lsls	r3, r3, #6
 80064a4:	f043 0220 	orr.w	r2, r3, #32
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	3301      	adds	r3, #1
 80064b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064b8:	d901      	bls.n	80064be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e006      	b.n	80064cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	f003 0320 	and.w	r3, r3, #32
 80064c6:	2b20      	cmp	r3, #32
 80064c8:	d0f0      	beq.n	80064ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064e0:	2300      	movs	r3, #0
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	3301      	adds	r3, #1
 80064e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064f0:	d901      	bls.n	80064f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e018      	b.n	8006528 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	daf2      	bge.n	80064e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80064fe:	2300      	movs	r3, #0
 8006500:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2210      	movs	r2, #16
 8006506:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	3301      	adds	r3, #1
 800650c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006514:	d901      	bls.n	800651a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e006      	b.n	8006528 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	f003 0310 	and.w	r3, r3, #16
 8006522:	2b10      	cmp	r3, #16
 8006524:	d0f0      	beq.n	8006508 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	460b      	mov	r3, r1
 800653e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	68f9      	ldr	r1, [r7, #12]
 8006550:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006554:	4313      	orrs	r3, r2
 8006556:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006566:	b480      	push	{r7}
 8006568:	b085      	sub	sp, #20
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006580:	f023 0303 	bic.w	r3, r3, #3
 8006584:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006594:	f043 0302 	orr.w	r3, r3, #2
 8006598:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	f003 0301 	and.w	r3, r3, #1
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3301      	adds	r3, #1
 80065d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065dc:	d901      	bls.n	80065e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e01b      	b.n	800661a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	daf2      	bge.n	80065d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f043 0201 	orr.w	r2, r3, #1
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	3301      	adds	r3, #1
 80065fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006606:	d901      	bls.n	800660c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e006      	b.n	800661a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b01      	cmp	r3, #1
 8006616:	d0f0      	beq.n	80065fa <USB_CoreReset+0x36>

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <memset>:
 8006626:	4402      	add	r2, r0
 8006628:	4603      	mov	r3, r0
 800662a:	4293      	cmp	r3, r2
 800662c:	d100      	bne.n	8006630 <memset+0xa>
 800662e:	4770      	bx	lr
 8006630:	f803 1b01 	strb.w	r1, [r3], #1
 8006634:	e7f9      	b.n	800662a <memset+0x4>
	...

08006638 <__libc_init_array>:
 8006638:	b570      	push	{r4, r5, r6, lr}
 800663a:	4d0d      	ldr	r5, [pc, #52]	@ (8006670 <__libc_init_array+0x38>)
 800663c:	4c0d      	ldr	r4, [pc, #52]	@ (8006674 <__libc_init_array+0x3c>)
 800663e:	1b64      	subs	r4, r4, r5
 8006640:	10a4      	asrs	r4, r4, #2
 8006642:	2600      	movs	r6, #0
 8006644:	42a6      	cmp	r6, r4
 8006646:	d109      	bne.n	800665c <__libc_init_array+0x24>
 8006648:	4d0b      	ldr	r5, [pc, #44]	@ (8006678 <__libc_init_array+0x40>)
 800664a:	4c0c      	ldr	r4, [pc, #48]	@ (800667c <__libc_init_array+0x44>)
 800664c:	f000 f818 	bl	8006680 <_init>
 8006650:	1b64      	subs	r4, r4, r5
 8006652:	10a4      	asrs	r4, r4, #2
 8006654:	2600      	movs	r6, #0
 8006656:	42a6      	cmp	r6, r4
 8006658:	d105      	bne.n	8006666 <__libc_init_array+0x2e>
 800665a:	bd70      	pop	{r4, r5, r6, pc}
 800665c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006660:	4798      	blx	r3
 8006662:	3601      	adds	r6, #1
 8006664:	e7ee      	b.n	8006644 <__libc_init_array+0xc>
 8006666:	f855 3b04 	ldr.w	r3, [r5], #4
 800666a:	4798      	blx	r3
 800666c:	3601      	adds	r6, #1
 800666e:	e7f2      	b.n	8006656 <__libc_init_array+0x1e>
 8006670:	080066d8 	.word	0x080066d8
 8006674:	080066d8 	.word	0x080066d8
 8006678:	080066d8 	.word	0x080066d8
 800667c:	080066dc 	.word	0x080066dc

08006680 <_init>:
 8006680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006682:	bf00      	nop
 8006684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006686:	bc08      	pop	{r3}
 8006688:	469e      	mov	lr, r3
 800668a:	4770      	bx	lr

0800668c <_fini>:
 800668c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668e:	bf00      	nop
 8006690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006692:	bc08      	pop	{r3}
 8006694:	469e      	mov	lr, r3
 8006696:	4770      	bx	lr
