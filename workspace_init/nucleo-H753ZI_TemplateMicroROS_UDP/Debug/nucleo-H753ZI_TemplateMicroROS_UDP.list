
nucleo-H753ZI_TemplateMicroROS_UDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012aa8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018e0  08012d48  08012d48  00013d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014628  08014628  00015628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014630  08014630  00015630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08014634  08014634  00015634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000098  24000000  08014638  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0006d014  24000098  080146d0  00016098  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2406d0ac  080146d0  000160ac  2**0
                  ALLOC
  9 .lwip_sec     000000e0  30000000  30000000  00017000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00016098  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003772a  00000000  00000000  000160c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00008238  00000000  00000000  0004d7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000027e8  00000000  00000000  00055a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001eb5  00000000  00000000  00058210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000492de  00000000  00000000  0005a0c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003d1e3  00000000  00000000  000a33a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018b0d7  00000000  00000000  000e0586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0026b65d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000aedc  00000000  00000000  0026b6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000081  00000000  00000000  0027657c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012d30 	.word	0x08012d30

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	08012d30 	.word	0x08012d30

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]

  for(;;)
  {
    printf_("| StackOverflow detected!!!");
 800067a:	4802      	ldr	r0, [pc, #8]	@ (8000684 <vApplicationStackOverflowHook+0x14>)
 800067c:	f000 fad8 	bl	8000c30 <printf_>
 8000680:	e7fb      	b.n	800067a <vApplicationStackOverflowHook+0xa>
 8000682:	bf00      	nop
 8000684:	08012d58 	.word	0x08012d58

08000688 <vApplicationMallocFailedHook>:
}
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  for(;;)
  {
	printf_("| HeapOverflow detected!!!");
 800068c:	4801      	ldr	r0, [pc, #4]	@ (8000694 <vApplicationMallocFailedHook+0xc>)
 800068e:	f000 facf 	bl	8000c30 <printf_>
 8000692:	e7fb      	b.n	800068c <vApplicationMallocFailedHook+0x4>
 8000694:	08012d74 	.word	0x08012d74

08000698 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskMicroROS */
  TaskMicroROSHandle = osThreadNew(StartTaskMicroROS, NULL, &TaskMicroROS_attributes);
 800069c:	4a04      	ldr	r2, [pc, #16]	@ (80006b0 <MX_FREERTOS_Init+0x18>)
 800069e:	2100      	movs	r1, #0
 80006a0:	4804      	ldr	r0, [pc, #16]	@ (80006b4 <MX_FREERTOS_Init+0x1c>)
 80006a2:	f008 fe82 	bl	80093aa <osThreadNew>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a03      	ldr	r2, [pc, #12]	@ (80006b8 <MX_FREERTOS_Init+0x20>)
 80006aa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	08014420 	.word	0x08014420
 80006b4:	080006bd 	.word	0x080006bd
 80006b8:	240000b4 	.word	0x240000b4

080006bc <StartTaskMicroROS>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskMicroROS */
void StartTaskMicroROS(void *argument)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80006c4:	f007 ffc6 	bl	8008654 <MX_LWIP_Init>
  /* USER CODE BEGIN StartTaskMicroROS */
  /* Infinite loop */
  for(;;)
  {
	  ethernetif_input(&gnetif);
 80006c8:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <StartTaskMicroROS+0x24>)
 80006ca:	f008 fafb 	bl	8008cc4 <ethernetif_input>

	  sys_check_timeouts();
 80006ce:	f00e fced 	bl	800f0ac <sys_check_timeouts>

	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006d2:	2102      	movs	r1, #2
 80006d4:	4803      	ldr	r0, [pc, #12]	@ (80006e4 <StartTaskMicroROS+0x28>)
 80006d6:	f003 f894 	bl	8003802 <HAL_GPIO_TogglePin>
	  ethernetif_input(&gnetif);
 80006da:	bf00      	nop
 80006dc:	e7f4      	b.n	80006c8 <StartTaskMicroROS+0xc>
 80006de:	bf00      	nop
 80006e0:	24000684 	.word	0x24000684
 80006e4:	58021000 	.word	0x58021000

080006e8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	@ 0x30
 80006ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	4b62      	ldr	r3, [pc, #392]	@ (8000888 <MX_GPIO_Init+0x1a0>)
 8000700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000704:	4a60      	ldr	r2, [pc, #384]	@ (8000888 <MX_GPIO_Init+0x1a0>)
 8000706:	f043 0304 	orr.w	r3, r3, #4
 800070a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800070e:	4b5e      	ldr	r3, [pc, #376]	@ (8000888 <MX_GPIO_Init+0x1a0>)
 8000710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	61bb      	str	r3, [r7, #24]
 800071a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071c:	4b5a      	ldr	r3, [pc, #360]	@ (8000888 <MX_GPIO_Init+0x1a0>)
 800071e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000722:	4a59      	ldr	r2, [pc, #356]	@ (8000888 <MX_GPIO_Init+0x1a0>)
 8000724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000728:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800072c:	4b56      	ldr	r3, [pc, #344]	@ (8000888 <MX_GPIO_Init+0x1a0>)
 800072e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b53      	ldr	r3, [pc, #332]	@ (8000888 <MX_GPIO_Init+0x1a0>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000740:	4a51      	ldr	r2, [pc, #324]	@ (8000888 <MX_GPIO_Init+0x1a0>)
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800074a:	4b4f      	ldr	r3, [pc, #316]	@ (8000888 <MX_GPIO_Init+0x1a0>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000750:	f003 0301 	and.w	r3, r3, #1
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000758:	4b4b      	ldr	r3, [pc, #300]	@ (8000888 <MX_GPIO_Init+0x1a0>)
 800075a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800075e:	4a4a      	ldr	r2, [pc, #296]	@ (8000888 <MX_GPIO_Init+0x1a0>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000768:	4b47      	ldr	r3, [pc, #284]	@ (8000888 <MX_GPIO_Init+0x1a0>)
 800076a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000776:	4b44      	ldr	r3, [pc, #272]	@ (8000888 <MX_GPIO_Init+0x1a0>)
 8000778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800077c:	4a42      	ldr	r2, [pc, #264]	@ (8000888 <MX_GPIO_Init+0x1a0>)
 800077e:	f043 0308 	orr.w	r3, r3, #8
 8000782:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000786:	4b40      	ldr	r3, [pc, #256]	@ (8000888 <MX_GPIO_Init+0x1a0>)
 8000788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800078c:	f003 0308 	and.w	r3, r3, #8
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000794:	4b3c      	ldr	r3, [pc, #240]	@ (8000888 <MX_GPIO_Init+0x1a0>)
 8000796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800079a:	4a3b      	ldr	r2, [pc, #236]	@ (8000888 <MX_GPIO_Init+0x1a0>)
 800079c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007a4:	4b38      	ldr	r3, [pc, #224]	@ (8000888 <MX_GPIO_Init+0x1a0>)
 80007a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007b2:	4b35      	ldr	r3, [pc, #212]	@ (8000888 <MX_GPIO_Init+0x1a0>)
 80007b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b8:	4a33      	ldr	r2, [pc, #204]	@ (8000888 <MX_GPIO_Init+0x1a0>)
 80007ba:	f043 0310 	orr.w	r3, r3, #16
 80007be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007c2:	4b31      	ldr	r3, [pc, #196]	@ (8000888 <MX_GPIO_Init+0x1a0>)
 80007c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c8:	f003 0310 	and.w	r3, r3, #16
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f244 0101 	movw	r1, #16385	@ 0x4001
 80007d6:	482d      	ldr	r0, [pc, #180]	@ (800088c <MX_GPIO_Init+0x1a4>)
 80007d8:	f002 fffa 	bl	80037d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007e2:	482b      	ldr	r0, [pc, #172]	@ (8000890 <MX_GPIO_Init+0x1a8>)
 80007e4:	f002 fff4 	bl	80037d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2102      	movs	r1, #2
 80007ec:	4829      	ldr	r0, [pc, #164]	@ (8000894 <MX_GPIO_Init+0x1ac>)
 80007ee:	f002 ffef 	bl	80037d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4619      	mov	r1, r3
 8000806:	4824      	ldr	r0, [pc, #144]	@ (8000898 <MX_GPIO_Init+0x1b0>)
 8000808:	f002 fe32 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800080c:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	4819      	ldr	r0, [pc, #100]	@ (800088c <MX_GPIO_Init+0x1a4>)
 8000826:	f002 fe23 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800082a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	4813      	ldr	r0, [pc, #76]	@ (8000890 <MX_GPIO_Init+0x1a8>)
 8000844:	f002 fe14 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000848:	2380      	movs	r3, #128	@ 0x80
 800084a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800084c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	480f      	ldr	r0, [pc, #60]	@ (800089c <MX_GPIO_Init+0x1b4>)
 800085e:	f002 fe07 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000862:	2302      	movs	r3, #2
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4806      	ldr	r0, [pc, #24]	@ (8000894 <MX_GPIO_Init+0x1ac>)
 800087a:	f002 fdf9 	bl	8003470 <HAL_GPIO_Init>

}
 800087e:	bf00      	nop
 8000880:	3730      	adds	r7, #48	@ 0x30
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	58024400 	.word	0x58024400
 800088c:	58020400 	.word	0x58020400
 8000890:	58020c00 	.word	0x58020c00
 8000894:	58021000 	.word	0x58021000
 8000898:	58020800 	.word	0x58020800
 800089c:	58021800 	.word	0x58021800

080008a0 <printchar_>:

// Included added to allow for the use of HAL UART library
#include "usart.h"

static void printchar_(char **str, int c)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
	if (str) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d00a      	beq.n	80008c6 <printchar_+0x26>
		**str = (char)c;
 80008b0:	683a      	ldr	r2, [r7, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	b2d2      	uxtb	r2, r2
 80008b8:	701a      	strb	r2, [r3, #0]
		++(*str);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	1c5a      	adds	r2, r3, #1
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	601a      	str	r2, [r3, #0]
	else
	{
		//(void)putchar_(c);
		HAL_UART_Transmit(&huart3,(uint8_t *)&c, 1, 10); // Using UART3
	}
}
 80008c4:	e005      	b.n	80008d2 <printchar_+0x32>
		HAL_UART_Transmit(&huart3,(uint8_t *)&c, 1, 10); // Using UART3
 80008c6:	4639      	mov	r1, r7
 80008c8:	230a      	movs	r3, #10
 80008ca:	2201      	movs	r2, #1
 80008cc:	4803      	ldr	r0, [pc, #12]	@ (80008dc <printchar_+0x3c>)
 80008ce:	f006 fa9f 	bl	8006e10 <HAL_UART_Transmit>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	24000108 	.word	0x24000108

080008e0 <prints_>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints_(char **out, const char *string, int width, int pad)
{
 80008e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008e4:	b084      	sub	sp, #16
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	60f8      	str	r0, [r7, #12]
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 80008f0:	2400      	movs	r4, #0
 80008f2:	f04f 0820 	mov.w	r8, #32

	if (width > 0) {
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	dd17      	ble.n	800092c <prints_+0x4c>
		register int len = 0;
 80008fc:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 80008fe:	68be      	ldr	r6, [r7, #8]
 8000900:	e001      	b.n	8000906 <prints_+0x26>
 8000902:	3501      	adds	r5, #1
 8000904:	3601      	adds	r6, #1
 8000906:	7833      	ldrb	r3, [r6, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d1fa      	bne.n	8000902 <prints_+0x22>
		if (len >= width) width = 0;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	429d      	cmp	r5, r3
 8000910:	db02      	blt.n	8000918 <prints_+0x38>
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	e002      	b.n	800091e <prints_+0x3e>
		else width -= len;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	1b5b      	subs	r3, r3, r5
 800091c:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	f003 0302 	and.w	r3, r3, #2
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <prints_+0x4c>
 8000928:	f04f 0830 	mov.w	r8, #48	@ 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	2b00      	cmp	r3, #0
 8000934:	d116      	bne.n	8000964 <prints_+0x84>
		for ( ; width > 0; --width) {
 8000936:	e007      	b.n	8000948 <prints_+0x68>
			printchar_(out, padchar);
 8000938:	4641      	mov	r1, r8
 800093a:	68f8      	ldr	r0, [r7, #12]
 800093c:	f7ff ffb0 	bl	80008a0 <printchar_>
			++pc;
 8000940:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3b01      	subs	r3, #1
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b00      	cmp	r3, #0
 800094c:	dcf4      	bgt.n	8000938 <prints_+0x58>
		}
	}
	for ( ; *string ; ++string) {
 800094e:	e009      	b.n	8000964 <prints_+0x84>
		printchar_(out, *string);
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4619      	mov	r1, r3
 8000956:	68f8      	ldr	r0, [r7, #12]
 8000958:	f7ff ffa2 	bl	80008a0 <printchar_>
		++pc;
 800095c:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	3301      	adds	r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d1f1      	bne.n	8000950 <prints_+0x70>
	}
	for ( ; width > 0; --width) {
 800096c:	e007      	b.n	800097e <prints_+0x9e>
		printchar_(out, padchar);
 800096e:	4641      	mov	r1, r8
 8000970:	68f8      	ldr	r0, [r7, #12]
 8000972:	f7ff ff95 	bl	80008a0 <printchar_>
		++pc;
 8000976:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3b01      	subs	r3, #1
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b00      	cmp	r3, #0
 8000982:	dcf4      	bgt.n	800096e <prints_+0x8e>
	}

	return pc;
 8000984:	4623      	mov	r3, r4
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000990 <printi_>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi_(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8000990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000994:	b089      	sub	sp, #36	@ 0x24
 8000996:	af00      	add	r7, sp, #0
 8000998:	60f8      	str	r0, [r7, #12]
 800099a:	60b9      	str	r1, [r7, #8]
 800099c:	607a      	str	r2, [r7, #4]
 800099e:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 80009a0:	f04f 0900 	mov.w	r9, #0
 80009a4:	2600      	movs	r6, #0
	register unsigned int u = (unsigned int)i;
 80009a6:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d10c      	bne.n	80009c8 <printi_+0x38>
		print_buf[0] = '0';
 80009ae:	2330      	movs	r3, #48	@ 0x30
 80009b0:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 80009b2:	2300      	movs	r3, #0
 80009b4:	757b      	strb	r3, [r7, #21]
		return prints_(out, print_buf, width, pad);
 80009b6:	f107 0114 	add.w	r1, r7, #20
 80009ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80009be:	68f8      	ldr	r0, [r7, #12]
 80009c0:	f7ff ff8e 	bl	80008e0 <prints_>
 80009c4:	4603      	mov	r3, r0
 80009c6:	e04a      	b.n	8000a5e <printi_+0xce>
	}

	if (sg && b == 10 && i < 0) {
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d00a      	beq.n	80009e4 <printi_+0x54>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b0a      	cmp	r3, #10
 80009d2:	d107      	bne.n	80009e4 <printi_+0x54>
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	da04      	bge.n	80009e4 <printi_+0x54>
		neg = 1;
 80009da:	f04f 0901 	mov.w	r9, #1
		u = (unsigned int)-i;
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	425b      	negs	r3, r3
 80009e2:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 80009e4:	f107 0414 	add.w	r4, r7, #20
 80009e8:	340b      	adds	r4, #11
	*s = '\0';
 80009ea:	2300      	movs	r3, #0
 80009ec:	7023      	strb	r3, [r4, #0]

	while (u) {
 80009ee:	e015      	b.n	8000a1c <printi_+0x8c>
		t = (unsigned int)u % b;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	fbb5 f2f3 	udiv	r2, r5, r3
 80009f6:	fb02 f303 	mul.w	r3, r2, r3
 80009fa:	1aeb      	subs	r3, r5, r3
 80009fc:	4698      	mov	r8, r3
		if( t >= 10 )
 80009fe:	f1b8 0f09 	cmp.w	r8, #9
 8000a02:	dd02      	ble.n	8000a0a <printi_+0x7a>
			t += letbase - '0' - 10;
 8000a04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a06:	3b3a      	subs	r3, #58	@ 0x3a
 8000a08:	4498      	add	r8, r3
		*--s = (char)(t + '0');
 8000a0a:	fa5f f388 	uxtb.w	r3, r8
 8000a0e:	3c01      	subs	r4, #1
 8000a10:	3330      	adds	r3, #48	@ 0x30
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	7023      	strb	r3, [r4, #0]
		u /= b;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	fbb5 f5f3 	udiv	r5, r5, r3
	while (u) {
 8000a1c:	2d00      	cmp	r5, #0
 8000a1e:	d1e7      	bne.n	80009f0 <printi_+0x60>
	}

	if (neg) {
 8000a20:	f1b9 0f00 	cmp.w	r9, #0
 8000a24:	d013      	beq.n	8000a4e <printi_+0xbe>
		if( width && (pad & PAD_ZERO) ) {
 8000a26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d00d      	beq.n	8000a48 <printi_+0xb8>
 8000a2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d008      	beq.n	8000a48 <printi_+0xb8>
			printchar_(out, '-');
 8000a36:	212d      	movs	r1, #45	@ 0x2d
 8000a38:	68f8      	ldr	r0, [r7, #12]
 8000a3a:	f7ff ff31 	bl	80008a0 <printchar_>
			++pc;
 8000a3e:	3601      	adds	r6, #1
			--width;
 8000a40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a42:	3b01      	subs	r3, #1
 8000a44:	643b      	str	r3, [r7, #64]	@ 0x40
 8000a46:	e002      	b.n	8000a4e <printi_+0xbe>
		}
		else {
			*--s = '-';
 8000a48:	3c01      	subs	r4, #1
 8000a4a:	232d      	movs	r3, #45	@ 0x2d
 8000a4c:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints_(out, s, width, pad);
 8000a4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000a52:	4621      	mov	r1, r4
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f7ff ff43 	bl	80008e0 <prints_>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4433      	add	r3, r6
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3724      	adds	r7, #36	@ 0x24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000a68 <print_>:

static int print_( char **out, const char *format, va_list args )
{
 8000a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a6c:	b08a      	sub	sp, #40	@ 0x28
 8000a6e:	af04      	add	r7, sp, #16
 8000a70:	60f8      	str	r0, [r7, #12]
 8000a72:	60b9      	str	r1, [r7, #8]
 8000a74:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8000a76:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8000a78:	e0c4      	b.n	8000c04 <print_+0x19c>
		if (*format == '%') {
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b25      	cmp	r3, #37	@ 0x25
 8000a80:	f040 80b3 	bne.w	8000bea <print_+0x182>
			++format;
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	3301      	adds	r3, #1
 8000a88:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8000a8a:	2600      	movs	r6, #0
 8000a8c:	4635      	mov	r5, r6
			if (*format == '\0') break;
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f000 80bc 	beq.w	8000c10 <print_+0x1a8>
			if (*format == '%') goto out;
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b25      	cmp	r3, #37	@ 0x25
 8000a9e:	f000 80a6 	beq.w	8000bee <print_+0x186>
			if (*format == '-') {
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b2d      	cmp	r3, #45	@ 0x2d
 8000aa8:	d109      	bne.n	8000abe <print_+0x56>
				++format;
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	3301      	adds	r3, #1
 8000aae:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8000ab0:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8000ab2:	e004      	b.n	8000abe <print_+0x56>
				++format;
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8000aba:	f046 0602 	orr.w	r6, r6, #2
			while (*format == '0') {
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b30      	cmp	r3, #48	@ 0x30
 8000ac4:	d0f6      	beq.n	8000ab4 <print_+0x4c>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000ac6:	e00b      	b.n	8000ae0 <print_+0x78>
				width *= 10;
 8000ac8:	462b      	mov	r3, r5
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	442b      	add	r3, r5
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	461d      	mov	r5, r3
				width += *format - '0';
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	3b30      	subs	r3, #48	@ 0x30
 8000ad8:	441d      	add	r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	3301      	adds	r3, #1
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b2f      	cmp	r3, #47	@ 0x2f
 8000ae6:	d903      	bls.n	8000af0 <print_+0x88>
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b39      	cmp	r3, #57	@ 0x39
 8000aee:	d9eb      	bls.n	8000ac8 <print_+0x60>
			}
			if( *format == 's' ) {
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b73      	cmp	r3, #115	@ 0x73
 8000af6:	d112      	bne.n	8000b1e <print_+0xb6>
				register char *s = (char *)va_arg( args, int );
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	1d1a      	adds	r2, r3, #4
 8000afc:	607a      	str	r2, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4698      	mov	r8, r3
				pc += prints_(out, s?s:"(null)", width, pad);
 8000b02:	f1b8 0f00 	cmp.w	r8, #0
 8000b06:	d001      	beq.n	8000b0c <print_+0xa4>
 8000b08:	4641      	mov	r1, r8
 8000b0a:	e000      	b.n	8000b0e <print_+0xa6>
 8000b0c:	4947      	ldr	r1, [pc, #284]	@ (8000c2c <print_+0x1c4>)
 8000b0e:	4633      	mov	r3, r6
 8000b10:	462a      	mov	r2, r5
 8000b12:	68f8      	ldr	r0, [r7, #12]
 8000b14:	f7ff fee4 	bl	80008e0 <prints_>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	441c      	add	r4, r3
				continue;
 8000b1c:	e06f      	b.n	8000bfe <print_+0x196>
			}
			if( *format == 'd' ) {
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b64      	cmp	r3, #100	@ 0x64
 8000b24:	d10f      	bne.n	8000b46 <print_+0xde>
				pc += printi_(out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	1d1a      	adds	r2, r3, #4
 8000b2a:	607a      	str	r2, [r7, #4]
 8000b2c:	6819      	ldr	r1, [r3, #0]
 8000b2e:	2361      	movs	r3, #97	@ 0x61
 8000b30:	9302      	str	r3, [sp, #8]
 8000b32:	9601      	str	r6, [sp, #4]
 8000b34:	9500      	str	r5, [sp, #0]
 8000b36:	2301      	movs	r3, #1
 8000b38:	220a      	movs	r2, #10
 8000b3a:	68f8      	ldr	r0, [r7, #12]
 8000b3c:	f7ff ff28 	bl	8000990 <printi_>
 8000b40:	4603      	mov	r3, r0
 8000b42:	441c      	add	r4, r3
				continue;
 8000b44:	e05b      	b.n	8000bfe <print_+0x196>
			}
			if( *format == 'x' ) {
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b78      	cmp	r3, #120	@ 0x78
 8000b4c:	d10f      	bne.n	8000b6e <print_+0x106>
				pc += printi_(out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	1d1a      	adds	r2, r3, #4
 8000b52:	607a      	str	r2, [r7, #4]
 8000b54:	6819      	ldr	r1, [r3, #0]
 8000b56:	2361      	movs	r3, #97	@ 0x61
 8000b58:	9302      	str	r3, [sp, #8]
 8000b5a:	9601      	str	r6, [sp, #4]
 8000b5c:	9500      	str	r5, [sp, #0]
 8000b5e:	2300      	movs	r3, #0
 8000b60:	2210      	movs	r2, #16
 8000b62:	68f8      	ldr	r0, [r7, #12]
 8000b64:	f7ff ff14 	bl	8000990 <printi_>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	441c      	add	r4, r3
				continue;
 8000b6c:	e047      	b.n	8000bfe <print_+0x196>
			}
			if( *format == 'X' ) {
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b58      	cmp	r3, #88	@ 0x58
 8000b74:	d10f      	bne.n	8000b96 <print_+0x12e>
				pc += printi_(out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	1d1a      	adds	r2, r3, #4
 8000b7a:	607a      	str	r2, [r7, #4]
 8000b7c:	6819      	ldr	r1, [r3, #0]
 8000b7e:	2341      	movs	r3, #65	@ 0x41
 8000b80:	9302      	str	r3, [sp, #8]
 8000b82:	9601      	str	r6, [sp, #4]
 8000b84:	9500      	str	r5, [sp, #0]
 8000b86:	2300      	movs	r3, #0
 8000b88:	2210      	movs	r2, #16
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff ff00 	bl	8000990 <printi_>
 8000b90:	4603      	mov	r3, r0
 8000b92:	441c      	add	r4, r3
				continue;
 8000b94:	e033      	b.n	8000bfe <print_+0x196>
			}
			if( *format == 'u' ) {
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b75      	cmp	r3, #117	@ 0x75
 8000b9c:	d10f      	bne.n	8000bbe <print_+0x156>
				pc += printi_(out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	1d1a      	adds	r2, r3, #4
 8000ba2:	607a      	str	r2, [r7, #4]
 8000ba4:	6819      	ldr	r1, [r3, #0]
 8000ba6:	2361      	movs	r3, #97	@ 0x61
 8000ba8:	9302      	str	r3, [sp, #8]
 8000baa:	9601      	str	r6, [sp, #4]
 8000bac:	9500      	str	r5, [sp, #0]
 8000bae:	2300      	movs	r3, #0
 8000bb0:	220a      	movs	r2, #10
 8000bb2:	68f8      	ldr	r0, [r7, #12]
 8000bb4:	f7ff feec 	bl	8000990 <printi_>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	441c      	add	r4, r3
				continue;
 8000bbc:	e01f      	b.n	8000bfe <print_+0x196>
			}
			if( *format == 'c' ) {
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b63      	cmp	r3, #99	@ 0x63
 8000bc4:	d11b      	bne.n	8000bfe <print_+0x196>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	1d1a      	adds	r2, r3, #4
 8000bca:	607a      	str	r2, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	757b      	strb	r3, [r7, #21]
				pc += prints_(out, scr, width, pad);
 8000bd6:	f107 0114 	add.w	r1, r7, #20
 8000bda:	4633      	mov	r3, r6
 8000bdc:	462a      	mov	r2, r5
 8000bde:	68f8      	ldr	r0, [r7, #12]
 8000be0:	f7ff fe7e 	bl	80008e0 <prints_>
 8000be4:	4603      	mov	r3, r0
 8000be6:	441c      	add	r4, r3
				continue;
 8000be8:	e009      	b.n	8000bfe <print_+0x196>
			}
		}
		else {
		out:
 8000bea:	bf00      	nop
 8000bec:	e000      	b.n	8000bf0 <print_+0x188>
			if (*format == '%') goto out;
 8000bee:	bf00      	nop
			printchar_(out, *format);
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	68f8      	ldr	r0, [r7, #12]
 8000bf8:	f7ff fe52 	bl	80008a0 <printchar_>
			++pc;
 8000bfc:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	3301      	adds	r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	f47f af36 	bne.w	8000a7a <print_+0x12>
 8000c0e:	e000      	b.n	8000c12 <print_+0x1aa>
			if (*format == '\0') break;
 8000c10:	bf00      	nop
		}
	}
	if (out) **out = '\0';
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d003      	beq.n	8000c20 <print_+0x1b8>
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8000c20:	4623      	mov	r3, r4
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c2c:	08012d90 	.word	0x08012d90

08000c30 <printf_>:

int printf_(const char *format, ...)
{
 8000c30:	b40f      	push	{r0, r1, r2, r3}
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
        va_list args;

        va_start( args, format );
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	607b      	str	r3, [r7, #4]
        return print_( 0, format, args );
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	6939      	ldr	r1, [r7, #16]
 8000c42:	2000      	movs	r0, #0
 8000c44:	f7ff ff10 	bl	8000a68 <print_>
 8000c48:	4603      	mov	r3, r0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c5e:	f000 f8f7 	bl	8000e50 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c62:	4b3a      	ldr	r3, [pc, #232]	@ (8000d4c <main+0xf4>)
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d11b      	bne.n	8000ca6 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c6e:	f3bf 8f4f 	dsb	sy
}
 8000c72:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c74:	f3bf 8f6f 	isb	sy
}
 8000c78:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000c7a:	4b34      	ldr	r3, [pc, #208]	@ (8000d4c <main+0xf4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000c82:	f3bf 8f4f 	dsb	sy
}
 8000c86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c88:	f3bf 8f6f 	isb	sy
}
 8000c8c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d4c <main+0xf4>)
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	4a2e      	ldr	r2, [pc, #184]	@ (8000d4c <main+0xf4>)
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c98:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c9a:	f3bf 8f4f 	dsb	sy
}
 8000c9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ca0:	f3bf 8f6f 	isb	sy
}
 8000ca4:	e000      	b.n	8000ca8 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ca6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ca8:	4b28      	ldr	r3, [pc, #160]	@ (8000d4c <main+0xf4>)
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d138      	bne.n	8000d26 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000cb4:	4b25      	ldr	r3, [pc, #148]	@ (8000d4c <main+0xf4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000cbc:	f3bf 8f4f 	dsb	sy
}
 8000cc0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000cc2:	4b22      	ldr	r3, [pc, #136]	@ (8000d4c <main+0xf4>)
 8000cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cc8:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	0b5b      	lsrs	r3, r3, #13
 8000cce:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000cd2:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	08db      	lsrs	r3, r3, #3
 8000cd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cdc:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	015a      	lsls	r2, r3, #5
 8000ce2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000ce6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cec:	4917      	ldr	r1, [pc, #92]	@ (8000d4c <main+0xf4>)
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	1e5a      	subs	r2, r3, #1
 8000cf8:	607a      	str	r2, [r7, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1ef      	bne.n	8000cde <main+0x86>
    } while(sets-- != 0U);
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	1e5a      	subs	r2, r3, #1
 8000d02:	60ba      	str	r2, [r7, #8]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d1e5      	bne.n	8000cd4 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d08:	f3bf 8f4f 	dsb	sy
}
 8000d0c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <main+0xf4>)
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	4a0e      	ldr	r2, [pc, #56]	@ (8000d4c <main+0xf4>)
 8000d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d18:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d1a:	f3bf 8f4f 	dsb	sy
}
 8000d1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d20:	f3bf 8f6f 	isb	sy
}
 8000d24:	e000      	b.n	8000d28 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000d26:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d28:	f000 fd6e 	bl	8001808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2c:	f000 f810 	bl	8000d50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d30:	f7ff fcda 	bl	80006e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d34:	f000 fad4 	bl	80012e0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d38:	f000 fb88 	bl	800144c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d3c:	f008 fad4 	bl	80092e8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000d40:	f7ff fcaa 	bl	8000698 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d44:	f008 faf6 	bl	8009334 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <main+0xf0>
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b09c      	sub	sp, #112	@ 0x70
 8000d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d5a:	224c      	movs	r2, #76	@ 0x4c
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f011 f8eb 	bl	8011f3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	2220      	movs	r2, #32
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f011 f8e5 	bl	8011f3a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d70:	2002      	movs	r0, #2
 8000d72:	f002 fe91 	bl	8003a98 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	4b33      	ldr	r3, [pc, #204]	@ (8000e48 <SystemClock_Config+0xf8>)
 8000d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d7e:	4a32      	ldr	r2, [pc, #200]	@ (8000e48 <SystemClock_Config+0xf8>)
 8000d80:	f023 0301 	bic.w	r3, r3, #1
 8000d84:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d86:	4b30      	ldr	r3, [pc, #192]	@ (8000e48 <SystemClock_Config+0xf8>)
 8000d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	4b2e      	ldr	r3, [pc, #184]	@ (8000e4c <SystemClock_Config+0xfc>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d98:	4a2c      	ldr	r2, [pc, #176]	@ (8000e4c <SystemClock_Config+0xfc>)
 8000d9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d9e:	6193      	str	r3, [r2, #24]
 8000da0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e4c <SystemClock_Config+0xfc>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000da8:	603b      	str	r3, [r7, #0]
 8000daa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dac:	bf00      	nop
 8000dae:	4b27      	ldr	r3, [pc, #156]	@ (8000e4c <SystemClock_Config+0xfc>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000db6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dba:	d1f8      	bne.n	8000dae <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dc0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dca:	2340      	movs	r3, #64	@ 0x40
 8000dcc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000dda:	2318      	movs	r3, #24
 8000ddc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000dde:	2302      	movs	r3, #2
 8000de0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000de2:	2304      	movs	r3, #4
 8000de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000de6:	2302      	movs	r3, #2
 8000de8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000dea:	230c      	movs	r3, #12
 8000dec:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f002 fe96 	bl	8003b2c <HAL_RCC_OscConfig>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000e06:	f000 f863 	bl	8000ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0a:	233f      	movs	r3, #63	@ 0x3f
 8000e0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e1e:	2340      	movs	r3, #64	@ 0x40
 8000e20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f003 fad6 	bl	80043e0 <HAL_RCC_ClockConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000e3a:	f000 f849 	bl	8000ed0 <Error_Handler>
  }
}
 8000e3e:	bf00      	nop
 8000e40:	3770      	adds	r7, #112	@ 0x70
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	58000400 	.word	0x58000400
 8000e4c:	58024800 	.word	0x58024800

08000e50 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e56:	463b      	mov	r3, r7
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e62:	f000 fe51 	bl	8001b08 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e66:	2301      	movs	r3, #1
 8000e68:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000e6e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8000e72:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000e74:	230f      	movs	r3, #15
 8000e76:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000e80:	2303      	movs	r3, #3
 8000e82:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e84:	2301      	movs	r3, #1
 8000e86:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e94:	463b      	mov	r3, r7
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 fe6e 	bl	8001b78 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e9c:	2004      	movs	r0, #4
 8000e9e:	f000 fe4b 	bl	8001b38 <HAL_MPU_Enable>

}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a04      	ldr	r2, [pc, #16]	@ (8000ecc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d101      	bne.n	8000ec2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ebe:	f000 fcdf 	bl	8001880 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40001000 	.word	0x40001000

08000ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed4:	b672      	cpsid	i
}
 8000ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <Error_Handler+0x8>

08000edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <HAL_MspInit+0x38>)
 8000ee4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8000f14 <HAL_MspInit+0x38>)
 8000eea:	f043 0302 	orr.w	r3, r3, #2
 8000eee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ef2:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <HAL_MspInit+0x38>)
 8000ef4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f00:	2200      	movs	r2, #0
 8000f02:	210f      	movs	r1, #15
 8000f04:	f06f 0001 	mvn.w	r0, #1
 8000f08:	f000 fdd6 	bl	8001ab8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	58024400 	.word	0x58024400

08000f18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b090      	sub	sp, #64	@ 0x40
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b0f      	cmp	r3, #15
 8000f24:	d827      	bhi.n	8000f76 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000f26:	2200      	movs	r2, #0
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	2036      	movs	r0, #54	@ 0x36
 8000f2c:	f000 fdc4 	bl	8001ab8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f30:	2036      	movs	r0, #54	@ 0x36
 8000f32:	f000 fddb 	bl	8001aec <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000f36:	4a29      	ldr	r2, [pc, #164]	@ (8000fdc <HAL_InitTick+0xc4>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f3c:	4b28      	ldr	r3, [pc, #160]	@ (8000fe0 <HAL_InitTick+0xc8>)
 8000f3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f42:	4a27      	ldr	r2, [pc, #156]	@ (8000fe0 <HAL_InitTick+0xc8>)
 8000f44:	f043 0310 	orr.w	r3, r3, #16
 8000f48:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f4c:	4b24      	ldr	r3, [pc, #144]	@ (8000fe0 <HAL_InitTick+0xc8>)
 8000f4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f52:	f003 0310 	and.w	r3, r3, #16
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f5a:	f107 0210 	add.w	r2, r7, #16
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4611      	mov	r1, r2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f003 fdc7 	bl	8004af8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d106      	bne.n	8000f82 <HAL_InitTick+0x6a>
 8000f74:	e001      	b.n	8000f7a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e02b      	b.n	8000fd2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f7a:	f003 fd91 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 8000f7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000f80:	e004      	b.n	8000f8c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f82:	f003 fd8d 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 8000f86:	4603      	mov	r3, r0
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f8e:	4a15      	ldr	r2, [pc, #84]	@ (8000fe4 <HAL_InitTick+0xcc>)
 8000f90:	fba2 2303 	umull	r2, r3, r2, r3
 8000f94:	0c9b      	lsrs	r3, r3, #18
 8000f96:	3b01      	subs	r3, #1
 8000f98:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f9a:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <HAL_InitTick+0xd0>)
 8000f9c:	4a13      	ldr	r2, [pc, #76]	@ (8000fec <HAL_InitTick+0xd4>)
 8000f9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <HAL_InitTick+0xd0>)
 8000fa2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fa6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fa8:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe8 <HAL_InitTick+0xd0>)
 8000faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fac:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <HAL_InitTick+0xd0>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <HAL_InitTick+0xd0>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000fba:	480b      	ldr	r0, [pc, #44]	@ (8000fe8 <HAL_InitTick+0xd0>)
 8000fbc:	f005 fc0a 	bl	80067d4 <HAL_TIM_Base_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d104      	bne.n	8000fd0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000fc6:	4808      	ldr	r0, [pc, #32]	@ (8000fe8 <HAL_InitTick+0xd0>)
 8000fc8:	f005 fc66 	bl	8006898 <HAL_TIM_Base_Start_IT>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	e000      	b.n	8000fd2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3740      	adds	r7, #64	@ 0x40
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	24000008 	.word	0x24000008
 8000fe0:	58024400 	.word	0x58024400
 8000fe4:	431bde83 	.word	0x431bde83
 8000fe8:	240000b8 	.word	0x240000b8
 8000fec:	40001000 	.word	0x40001000

08000ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <NMI_Handler+0x4>

08000ff8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <HardFault_Handler+0x4>

08001000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <MemManage_Handler+0x4>

08001008 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <BusFault_Handler+0x4>

08001010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <UsageFault_Handler+0x4>

08001018 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800102c:	4802      	ldr	r0, [pc, #8]	@ (8001038 <TIM6_DAC_IRQHandler+0x10>)
 800102e:	f005 fcab 	bl	8006988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	240000b8 	.word	0x240000b8

0800103c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return 1;
 8001040:	2301      	movs	r3, #1
}
 8001042:	4618      	mov	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_kill>:

int _kill(int pid, int sig)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001056:	4b05      	ldr	r3, [pc, #20]	@ (800106c <_kill+0x20>)
 8001058:	2216      	movs	r2, #22
 800105a:	601a      	str	r2, [r3, #0]
  return -1;
 800105c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	2406d09c 	.word	0x2406d09c

08001070 <_exit>:

void _exit (int status)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001078:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ffe5 	bl	800104c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001082:	bf00      	nop
 8001084:	e7fd      	b.n	8001082 <_exit+0x12>

08001086 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af00      	add	r7, sp, #0
 800108c:	60f8      	str	r0, [r7, #12]
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	e00a      	b.n	80010ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001098:	f3af 8000 	nop.w
 800109c:	4601      	mov	r1, r0
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	1c5a      	adds	r2, r3, #1
 80010a2:	60ba      	str	r2, [r7, #8]
 80010a4:	b2ca      	uxtb	r2, r1
 80010a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	3301      	adds	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	dbf0      	blt.n	8001098 <_read+0x12>
  }

  return len;
 80010b6:	687b      	ldr	r3, [r7, #4]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	e009      	b.n	80010e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	1c5a      	adds	r2, r3, #1
 80010d6:	60ba      	str	r2, [r7, #8]
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	3301      	adds	r3, #1
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	dbf1      	blt.n	80010d2 <_write+0x12>
  }
  return len;
 80010ee:	687b      	ldr	r3, [r7, #4]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <_close>:

int _close(int file)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001100:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001120:	605a      	str	r2, [r3, #4]
  return 0;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <_isatty>:

int _isatty(int file)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001138:	2301      	movs	r3, #1
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001146:	b480      	push	{r7}
 8001148:	b085      	sub	sp, #20
 800114a:	af00      	add	r7, sp, #0
 800114c:	60f8      	str	r0, [r7, #12]
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001160:	b480      	push	{r7}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001168:	4a14      	ldr	r2, [pc, #80]	@ (80011bc <_sbrk+0x5c>)
 800116a:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <_sbrk+0x60>)
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001174:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800117c:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <_sbrk+0x64>)
 800117e:	4a12      	ldr	r2, [pc, #72]	@ (80011c8 <_sbrk+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001182:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	429a      	cmp	r2, r3
 800118e:	d205      	bcs.n	800119c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001190:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <_sbrk+0x6c>)
 8001192:	220c      	movs	r2, #12
 8001194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800119a:	e009      	b.n	80011b0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800119c:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a2:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	4a06      	ldr	r2, [pc, #24]	@ (80011c4 <_sbrk+0x64>)
 80011ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	371c      	adds	r7, #28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	24080000 	.word	0x24080000
 80011c0:	00000400 	.word	0x00000400
 80011c4:	24000104 	.word	0x24000104
 80011c8:	2406d0b0 	.word	0x2406d0b0
 80011cc:	2406d09c 	.word	0x2406d09c

080011d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011d4:	4b37      	ldr	r3, [pc, #220]	@ (80012b4 <SystemInit+0xe4>)
 80011d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011da:	4a36      	ldr	r2, [pc, #216]	@ (80012b4 <SystemInit+0xe4>)
 80011dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011e4:	4b34      	ldr	r3, [pc, #208]	@ (80012b8 <SystemInit+0xe8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 030f 	and.w	r3, r3, #15
 80011ec:	2b06      	cmp	r3, #6
 80011ee:	d807      	bhi.n	8001200 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011f0:	4b31      	ldr	r3, [pc, #196]	@ (80012b8 <SystemInit+0xe8>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f023 030f 	bic.w	r3, r3, #15
 80011f8:	4a2f      	ldr	r2, [pc, #188]	@ (80012b8 <SystemInit+0xe8>)
 80011fa:	f043 0307 	orr.w	r3, r3, #7
 80011fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001200:	4b2e      	ldr	r3, [pc, #184]	@ (80012bc <SystemInit+0xec>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a2d      	ldr	r2, [pc, #180]	@ (80012bc <SystemInit+0xec>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800120c:	4b2b      	ldr	r3, [pc, #172]	@ (80012bc <SystemInit+0xec>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001212:	4b2a      	ldr	r3, [pc, #168]	@ (80012bc <SystemInit+0xec>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4929      	ldr	r1, [pc, #164]	@ (80012bc <SystemInit+0xec>)
 8001218:	4b29      	ldr	r3, [pc, #164]	@ (80012c0 <SystemInit+0xf0>)
 800121a:	4013      	ands	r3, r2
 800121c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800121e:	4b26      	ldr	r3, [pc, #152]	@ (80012b8 <SystemInit+0xe8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	2b00      	cmp	r3, #0
 8001228:	d007      	beq.n	800123a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800122a:	4b23      	ldr	r3, [pc, #140]	@ (80012b8 <SystemInit+0xe8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f023 030f 	bic.w	r3, r3, #15
 8001232:	4a21      	ldr	r2, [pc, #132]	@ (80012b8 <SystemInit+0xe8>)
 8001234:	f043 0307 	orr.w	r3, r3, #7
 8001238:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800123a:	4b20      	ldr	r3, [pc, #128]	@ (80012bc <SystemInit+0xec>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001240:	4b1e      	ldr	r3, [pc, #120]	@ (80012bc <SystemInit+0xec>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001246:	4b1d      	ldr	r3, [pc, #116]	@ (80012bc <SystemInit+0xec>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800124c:	4b1b      	ldr	r3, [pc, #108]	@ (80012bc <SystemInit+0xec>)
 800124e:	4a1d      	ldr	r2, [pc, #116]	@ (80012c4 <SystemInit+0xf4>)
 8001250:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001252:	4b1a      	ldr	r3, [pc, #104]	@ (80012bc <SystemInit+0xec>)
 8001254:	4a1c      	ldr	r2, [pc, #112]	@ (80012c8 <SystemInit+0xf8>)
 8001256:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001258:	4b18      	ldr	r3, [pc, #96]	@ (80012bc <SystemInit+0xec>)
 800125a:	4a1c      	ldr	r2, [pc, #112]	@ (80012cc <SystemInit+0xfc>)
 800125c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800125e:	4b17      	ldr	r3, [pc, #92]	@ (80012bc <SystemInit+0xec>)
 8001260:	2200      	movs	r2, #0
 8001262:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001264:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <SystemInit+0xec>)
 8001266:	4a19      	ldr	r2, [pc, #100]	@ (80012cc <SystemInit+0xfc>)
 8001268:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800126a:	4b14      	ldr	r3, [pc, #80]	@ (80012bc <SystemInit+0xec>)
 800126c:	2200      	movs	r2, #0
 800126e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001270:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <SystemInit+0xec>)
 8001272:	4a16      	ldr	r2, [pc, #88]	@ (80012cc <SystemInit+0xfc>)
 8001274:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001276:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <SystemInit+0xec>)
 8001278:	2200      	movs	r2, #0
 800127a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800127c:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <SystemInit+0xec>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0e      	ldr	r2, [pc, #56]	@ (80012bc <SystemInit+0xec>)
 8001282:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001286:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001288:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <SystemInit+0xec>)
 800128a:	2200      	movs	r2, #0
 800128c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800128e:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <SystemInit+0x100>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <SystemInit+0x104>)
 8001294:	4013      	ands	r3, r2
 8001296:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800129a:	d202      	bcs.n	80012a2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800129c:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <SystemInit+0x108>)
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <SystemInit+0x10c>)
 80012a4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80012a8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00
 80012b8:	52002000 	.word	0x52002000
 80012bc:	58024400 	.word	0x58024400
 80012c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80012c4:	02020200 	.word	0x02020200
 80012c8:	01ff0000 	.word	0x01ff0000
 80012cc:	01010280 	.word	0x01010280
 80012d0:	5c001000 	.word	0x5c001000
 80012d4:	ffff0000 	.word	0xffff0000
 80012d8:	51008108 	.word	0x51008108
 80012dc:	52004000 	.word	0x52004000

080012e0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012e4:	4b22      	ldr	r3, [pc, #136]	@ (8001370 <MX_USART3_UART_Init+0x90>)
 80012e6:	4a23      	ldr	r2, [pc, #140]	@ (8001374 <MX_USART3_UART_Init+0x94>)
 80012e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012ea:	4b21      	ldr	r3, [pc, #132]	@ (8001370 <MX_USART3_UART_Init+0x90>)
 80012ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001370 <MX_USART3_UART_Init+0x90>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001370 <MX_USART3_UART_Init+0x90>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001370 <MX_USART3_UART_Init+0x90>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001304:	4b1a      	ldr	r3, [pc, #104]	@ (8001370 <MX_USART3_UART_Init+0x90>)
 8001306:	220c      	movs	r2, #12
 8001308:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130a:	4b19      	ldr	r3, [pc, #100]	@ (8001370 <MX_USART3_UART_Init+0x90>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001310:	4b17      	ldr	r3, [pc, #92]	@ (8001370 <MX_USART3_UART_Init+0x90>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001316:	4b16      	ldr	r3, [pc, #88]	@ (8001370 <MX_USART3_UART_Init+0x90>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800131c:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <MX_USART3_UART_Init+0x90>)
 800131e:	2200      	movs	r2, #0
 8001320:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001322:	4b13      	ldr	r3, [pc, #76]	@ (8001370 <MX_USART3_UART_Init+0x90>)
 8001324:	2200      	movs	r2, #0
 8001326:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001328:	4811      	ldr	r0, [pc, #68]	@ (8001370 <MX_USART3_UART_Init+0x90>)
 800132a:	f005 fd21 	bl	8006d70 <HAL_UART_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001334:	f7ff fdcc 	bl	8000ed0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001338:	2100      	movs	r1, #0
 800133a:	480d      	ldr	r0, [pc, #52]	@ (8001370 <MX_USART3_UART_Init+0x90>)
 800133c:	f006 fdb7 	bl	8007eae <HAL_UARTEx_SetTxFifoThreshold>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001346:	f7ff fdc3 	bl	8000ed0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800134a:	2100      	movs	r1, #0
 800134c:	4808      	ldr	r0, [pc, #32]	@ (8001370 <MX_USART3_UART_Init+0x90>)
 800134e:	f006 fdec 	bl	8007f2a <HAL_UARTEx_SetRxFifoThreshold>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001358:	f7ff fdba 	bl	8000ed0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800135c:	4804      	ldr	r0, [pc, #16]	@ (8001370 <MX_USART3_UART_Init+0x90>)
 800135e:	f006 fd6d 	bl	8007e3c <HAL_UARTEx_DisableFifoMode>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001368:	f7ff fdb2 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	24000108 	.word	0x24000108
 8001374:	40004800 	.word	0x40004800

08001378 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b0ba      	sub	sp, #232	@ 0xe8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	22c0      	movs	r2, #192	@ 0xc0
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f010 fdce 	bl	8011f3a <memset>
  if(uartHandle->Instance==USART3)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a27      	ldr	r2, [pc, #156]	@ (8001440 <HAL_UART_MspInit+0xc8>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d146      	bne.n	8001436 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013a8:	f04f 0202 	mov.w	r2, #2
 80013ac:	f04f 0300 	mov.w	r3, #0
 80013b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	4618      	mov	r0, r3
 80013c0:	f003 fbdc 	bl	8004b7c <HAL_RCCEx_PeriphCLKConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80013ca:	f7ff fd81 	bl	8000ed0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001444 <HAL_UART_MspInit+0xcc>)
 80013d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001444 <HAL_UART_MspInit+0xcc>)
 80013d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013da:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013de:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <HAL_UART_MspInit+0xcc>)
 80013e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ec:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <HAL_UART_MspInit+0xcc>)
 80013ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f2:	4a14      	ldr	r2, [pc, #80]	@ (8001444 <HAL_UART_MspInit+0xcc>)
 80013f4:	f043 0308 	orr.w	r3, r3, #8
 80013f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013fc:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <HAL_UART_MspInit+0xcc>)
 80013fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800140a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800140e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2300      	movs	r3, #0
 8001420:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001424:	2307      	movs	r3, #7
 8001426:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800142a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800142e:	4619      	mov	r1, r3
 8001430:	4805      	ldr	r0, [pc, #20]	@ (8001448 <HAL_UART_MspInit+0xd0>)
 8001432:	f002 f81d 	bl	8003470 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001436:	bf00      	nop
 8001438:	37e8      	adds	r7, #232	@ 0xe8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40004800 	.word	0x40004800
 8001444:	58024400 	.word	0x58024400
 8001448:	58020c00 	.word	0x58020c00

0800144c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001450:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001452:	4a16      	ldr	r2, [pc, #88]	@ (80014ac <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001454:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001456:	4b14      	ldr	r3, [pc, #80]	@ (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001458:	2209      	movs	r2, #9
 800145a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800145c:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800145e:	2202      	movs	r2, #2
 8001460:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001462:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001464:	2200      	movs	r2, #0
 8001466:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001468:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800146a:	2202      	movs	r2, #2
 800146c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001470:	2201      	movs	r2, #1
 8001472:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001474:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001476:	2200      	movs	r2, #0
 8001478:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800147a:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800147c:	2200      	movs	r2, #0
 800147e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001480:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001482:	2201      	movs	r2, #1
 8001484:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001486:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001488:	2201      	movs	r2, #1
 800148a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800148e:	2200      	movs	r2, #0
 8001490:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001492:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001494:	f002 f9cf 	bl	8003836 <HAL_PCD_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800149e:	f7ff fd17 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	2400019c 	.word	0x2400019c
 80014ac:	40080000 	.word	0x40080000

080014b0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b0ba      	sub	sp, #232	@ 0xe8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c8:	f107 0310 	add.w	r3, r7, #16
 80014cc:	22c0      	movs	r2, #192	@ 0xc0
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f010 fd32 	bl	8011f3a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a30      	ldr	r2, [pc, #192]	@ (800159c <HAL_PCD_MspInit+0xec>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d159      	bne.n	8001594 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80014e0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80014ec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014f4:	f107 0310 	add.w	r3, r7, #16
 80014f8:	4618      	mov	r0, r3
 80014fa:	f003 fb3f 	bl	8004b7c <HAL_RCCEx_PeriphCLKConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001504:	f7ff fce4 	bl	8000ed0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001508:	f002 fb00 	bl	8003b0c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150c:	4b24      	ldr	r3, [pc, #144]	@ (80015a0 <HAL_PCD_MspInit+0xf0>)
 800150e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001512:	4a23      	ldr	r2, [pc, #140]	@ (80015a0 <HAL_PCD_MspInit+0xf0>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800151c:	4b20      	ldr	r3, [pc, #128]	@ (80015a0 <HAL_PCD_MspInit+0xf0>)
 800151e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800152a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800152e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001544:	230a      	movs	r3, #10
 8001546:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800154e:	4619      	mov	r1, r3
 8001550:	4814      	ldr	r0, [pc, #80]	@ (80015a4 <HAL_PCD_MspInit+0xf4>)
 8001552:	f001 ff8d 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001556:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800155a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155e:	2300      	movs	r3, #0
 8001560:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800156e:	4619      	mov	r1, r3
 8001570:	480c      	ldr	r0, [pc, #48]	@ (80015a4 <HAL_PCD_MspInit+0xf4>)
 8001572:	f001 ff7d 	bl	8003470 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001576:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <HAL_PCD_MspInit+0xf0>)
 8001578:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800157c:	4a08      	ldr	r2, [pc, #32]	@ (80015a0 <HAL_PCD_MspInit+0xf0>)
 800157e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001582:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001586:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <HAL_PCD_MspInit+0xf0>)
 8001588:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800158c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001594:	bf00      	nop
 8001596:	37e8      	adds	r7, #232	@ 0xe8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40080000 	.word	0x40080000
 80015a0:	58024400 	.word	0x58024400
 80015a4:	58020000 	.word	0x58020000

080015a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015ac:	f7ff fe10 	bl	80011d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b0:	480c      	ldr	r0, [pc, #48]	@ (80015e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015b2:	490d      	ldr	r1, [pc, #52]	@ (80015e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015b4:	4a0d      	ldr	r2, [pc, #52]	@ (80015ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b8:	e002      	b.n	80015c0 <LoopCopyDataInit>

080015ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015be:	3304      	adds	r3, #4

080015c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c4:	d3f9      	bcc.n	80015ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c6:	4a0a      	ldr	r2, [pc, #40]	@ (80015f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015c8:	4c0a      	ldr	r4, [pc, #40]	@ (80015f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015cc:	e001      	b.n	80015d2 <LoopFillZerobss>

080015ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d0:	3204      	adds	r2, #4

080015d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d4:	d3fb      	bcc.n	80015ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015d6:	f010 fd55 	bl	8012084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015da:	f7ff fb3d 	bl	8000c58 <main>
  bx  lr
 80015de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015e0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015e8:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 80015ec:	08014638 	.word	0x08014638
  ldr r2, =_sbss
 80015f0:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 80015f4:	2406d0ac 	.word	0x2406d0ac

080015f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <ADC3_IRQHandler>

080015fa <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00b      	beq.n	8001622 <LAN8742_RegisterBusIO+0x28>
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d007      	beq.n	8001622 <LAN8742_RegisterBusIO+0x28>
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <LAN8742_RegisterBusIO+0x28>
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001626:	e014      	b.n	8001652 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	691a      	ldr	r2, [r3, #16]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d139      	bne.n	80016ee <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d002      	beq.n	8001688 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2220      	movs	r2, #32
 800168c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	e01c      	b.n	80016ce <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	f107 020c 	add.w	r2, r7, #12
 800169c:	2112      	movs	r1, #18
 800169e:	6978      	ldr	r0, [r7, #20]
 80016a0:	4798      	blx	r3
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	da03      	bge.n	80016b0 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80016a8:	f06f 0304 	mvn.w	r3, #4
 80016ac:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80016ae:	e00b      	b.n	80016c8 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f003 031f 	and.w	r3, r3, #31
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d105      	bne.n	80016c8 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
         break;
 80016c6:	e005      	b.n	80016d4 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	3301      	adds	r3, #1
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	2b1f      	cmp	r3, #31
 80016d2:	d9df      	bls.n	8001694 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b1f      	cmp	r3, #31
 80016da:	d902      	bls.n	80016e2 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80016dc:	f06f 0302 	mvn.w	r3, #2
 80016e0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d102      	bne.n	80016ee <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80016ee:	693b      	ldr	r3, [r7, #16]
 }
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6810      	ldr	r0, [r2, #0]
 800170c:	f107 020c 	add.w	r2, r7, #12
 8001710:	2101      	movs	r1, #1
 8001712:	4798      	blx	r3
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	da02      	bge.n	8001720 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800171a:	f06f 0304 	mvn.w	r3, #4
 800171e:	e06e      	b.n	80017fe <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6810      	ldr	r0, [r2, #0]
 8001728:	f107 020c 	add.w	r2, r7, #12
 800172c:	2101      	movs	r1, #1
 800172e:	4798      	blx	r3
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	da02      	bge.n	800173c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001736:	f06f 0304 	mvn.w	r3, #4
 800173a:	e060      	b.n	80017fe <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001746:	2301      	movs	r3, #1
 8001748:	e059      	b.n	80017fe <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6810      	ldr	r0, [r2, #0]
 8001752:	f107 020c 	add.w	r2, r7, #12
 8001756:	2100      	movs	r1, #0
 8001758:	4798      	blx	r3
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	da02      	bge.n	8001766 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001760:	f06f 0304 	mvn.w	r3, #4
 8001764:	e04b      	b.n	80017fe <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d11b      	bne.n	80017a8 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d006      	beq.n	8001788 <LAN8742_GetLinkState+0x90>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001784:	2302      	movs	r3, #2
 8001786:	e03a      	b.n	80017fe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001792:	2303      	movs	r3, #3
 8001794:	e033      	b.n	80017fe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80017a0:	2304      	movs	r3, #4
 80017a2:	e02c      	b.n	80017fe <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80017a4:	2305      	movs	r3, #5
 80017a6:	e02a      	b.n	80017fe <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	6810      	ldr	r0, [r2, #0]
 80017b0:	f107 020c 	add.w	r2, r7, #12
 80017b4:	211f      	movs	r1, #31
 80017b6:	4798      	blx	r3
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	da02      	bge.n	80017c4 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80017be:	f06f 0304 	mvn.w	r3, #4
 80017c2:	e01c      	b.n	80017fe <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80017ce:	2306      	movs	r3, #6
 80017d0:	e015      	b.n	80017fe <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f003 031c 	and.w	r3, r3, #28
 80017d8:	2b18      	cmp	r3, #24
 80017da:	d101      	bne.n	80017e0 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80017dc:	2302      	movs	r3, #2
 80017de:	e00e      	b.n	80017fe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 031c 	and.w	r3, r3, #28
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d101      	bne.n	80017ee <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e007      	b.n	80017fe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f003 031c 	and.w	r3, r3, #28
 80017f4:	2b14      	cmp	r3, #20
 80017f6:	d101      	bne.n	80017fc <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80017f8:	2304      	movs	r3, #4
 80017fa:	e000      	b.n	80017fe <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80017fc:	2305      	movs	r3, #5
    }
  }
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800180e:	2003      	movs	r0, #3
 8001810:	f000 f947 	bl	8001aa2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001814:	f002 ff9a 	bl	800474c <HAL_RCC_GetSysClockFreq>
 8001818:	4602      	mov	r2, r0
 800181a:	4b15      	ldr	r3, [pc, #84]	@ (8001870 <HAL_Init+0x68>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	0a1b      	lsrs	r3, r3, #8
 8001820:	f003 030f 	and.w	r3, r3, #15
 8001824:	4913      	ldr	r1, [pc, #76]	@ (8001874 <HAL_Init+0x6c>)
 8001826:	5ccb      	ldrb	r3, [r1, r3]
 8001828:	f003 031f 	and.w	r3, r3, #31
 800182c:	fa22 f303 	lsr.w	r3, r2, r3
 8001830:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001832:	4b0f      	ldr	r3, [pc, #60]	@ (8001870 <HAL_Init+0x68>)
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	4a0e      	ldr	r2, [pc, #56]	@ (8001874 <HAL_Init+0x6c>)
 800183c:	5cd3      	ldrb	r3, [r2, r3]
 800183e:	f003 031f 	and.w	r3, r3, #31
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	fa22 f303 	lsr.w	r3, r2, r3
 8001848:	4a0b      	ldr	r2, [pc, #44]	@ (8001878 <HAL_Init+0x70>)
 800184a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800184c:	4a0b      	ldr	r2, [pc, #44]	@ (800187c <HAL_Init+0x74>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001852:	200f      	movs	r0, #15
 8001854:	f7ff fb60 	bl	8000f18 <HAL_InitTick>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e002      	b.n	8001868 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001862:	f7ff fb3b 	bl	8000edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	58024400 	.word	0x58024400
 8001874:	08014444 	.word	0x08014444
 8001878:	24000004 	.word	0x24000004
 800187c:	24000000 	.word	0x24000000

08001880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001884:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <HAL_IncTick+0x20>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <HAL_IncTick+0x24>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4413      	add	r3, r2
 8001890:	4a04      	ldr	r2, [pc, #16]	@ (80018a4 <HAL_IncTick+0x24>)
 8001892:	6013      	str	r3, [r2, #0]
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	2400000c 	.word	0x2400000c
 80018a4:	24000680 	.word	0x24000680

080018a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return uwTick;
 80018ac:	4b03      	ldr	r3, [pc, #12]	@ (80018bc <HAL_GetTick+0x14>)
 80018ae:	681b      	ldr	r3, [r3, #0]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	24000680 	.word	0x24000680

080018c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c8:	f7ff ffee 	bl	80018a8 <HAL_GetTick>
 80018cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018d8:	d005      	beq.n	80018e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018da:	4b0a      	ldr	r3, [pc, #40]	@ (8001904 <HAL_Delay+0x44>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4413      	add	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018e6:	bf00      	nop
 80018e8:	f7ff ffde 	bl	80018a8 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d8f7      	bhi.n	80018e8 <HAL_Delay+0x28>
  {
  }
}
 80018f8:	bf00      	nop
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	2400000c 	.word	0x2400000c

08001908 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800190c:	4b03      	ldr	r3, [pc, #12]	@ (800191c <HAL_GetREVID+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	0c1b      	lsrs	r3, r3, #16
}
 8001912:	4618      	mov	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	5c001000 	.word	0x5c001000

08001920 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001928:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001930:	4904      	ldr	r1, [pc, #16]	@ (8001944 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	58000400 	.word	0x58000400

08001948 <__NVIC_SetPriorityGrouping>:
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001958:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <__NVIC_SetPriorityGrouping+0x40>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001964:	4013      	ands	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001970:	4b06      	ldr	r3, [pc, #24]	@ (800198c <__NVIC_SetPriorityGrouping+0x44>)
 8001972:	4313      	orrs	r3, r2
 8001974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001976:	4a04      	ldr	r2, [pc, #16]	@ (8001988 <__NVIC_SetPriorityGrouping+0x40>)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	60d3      	str	r3, [r2, #12]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00
 800198c:	05fa0000 	.word	0x05fa0000

08001990 <__NVIC_GetPriorityGrouping>:
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001994:	4b04      	ldr	r3, [pc, #16]	@ (80019a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	f003 0307 	and.w	r3, r3, #7
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_EnableIRQ>:
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	db0b      	blt.n	80019d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	4907      	ldr	r1, [pc, #28]	@ (80019e4 <__NVIC_EnableIRQ+0x38>)
 80019c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	2001      	movs	r0, #1
 80019ce:	fa00 f202 	lsl.w	r2, r0, r2
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000e100 	.word	0xe000e100

080019e8 <__NVIC_SetPriority>:
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	6039      	str	r1, [r7, #0]
 80019f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	db0a      	blt.n	8001a12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	490c      	ldr	r1, [pc, #48]	@ (8001a34 <__NVIC_SetPriority+0x4c>)
 8001a02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a06:	0112      	lsls	r2, r2, #4
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001a10:	e00a      	b.n	8001a28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4908      	ldr	r1, [pc, #32]	@ (8001a38 <__NVIC_SetPriority+0x50>)
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	3b04      	subs	r3, #4
 8001a20:	0112      	lsls	r2, r2, #4
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	440b      	add	r3, r1
 8001a26:	761a      	strb	r2, [r3, #24]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000e100 	.word	0xe000e100
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <NVIC_EncodePriority>:
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	@ 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f1c3 0307 	rsb	r3, r3, #7
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	bf28      	it	cs
 8001a5a:	2304      	movcs	r3, #4
 8001a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3304      	adds	r3, #4
 8001a62:	2b06      	cmp	r3, #6
 8001a64:	d902      	bls.n	8001a6c <NVIC_EncodePriority+0x30>
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3b03      	subs	r3, #3
 8001a6a:	e000      	b.n	8001a6e <NVIC_EncodePriority+0x32>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	401a      	ands	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8e:	43d9      	mvns	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	4313      	orrs	r3, r2
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3724      	adds	r7, #36	@ 0x24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff ff4c 	bl	8001948 <__NVIC_SetPriorityGrouping>
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac6:	f7ff ff63 	bl	8001990 <__NVIC_GetPriorityGrouping>
 8001aca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	68b9      	ldr	r1, [r7, #8]
 8001ad0:	6978      	ldr	r0, [r7, #20]
 8001ad2:	f7ff ffb3 	bl	8001a3c <NVIC_EncodePriority>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001adc:	4611      	mov	r1, r2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff ff82 	bl	80019e8 <__NVIC_SetPriority>
}
 8001ae4:	bf00      	nop
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ff56 	bl	80019ac <__NVIC_EnableIRQ>
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b0c:	f3bf 8f5f 	dmb	sy
}
 8001b10:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001b12:	4b07      	ldr	r3, [pc, #28]	@ (8001b30 <HAL_MPU_Disable+0x28>)
 8001b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b16:	4a06      	ldr	r2, [pc, #24]	@ (8001b30 <HAL_MPU_Disable+0x28>)
 8001b18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b1c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001b1e:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <HAL_MPU_Disable+0x2c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	605a      	str	r2, [r3, #4]
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000ed00 	.word	0xe000ed00
 8001b34:	e000ed90 	.word	0xe000ed90

08001b38 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001b40:	4a0b      	ldr	r2, [pc, #44]	@ (8001b70 <HAL_MPU_Enable+0x38>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b74 <HAL_MPU_Enable+0x3c>)
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4e:	4a09      	ldr	r2, [pc, #36]	@ (8001b74 <HAL_MPU_Enable+0x3c>)
 8001b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b54:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001b56:	f3bf 8f4f 	dsb	sy
}
 8001b5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b5c:	f3bf 8f6f 	isb	sy
}
 8001b60:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000ed90 	.word	0xe000ed90
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	785a      	ldrb	r2, [r3, #1]
 8001b84:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf4 <HAL_MPU_ConfigRegion+0x7c>)
 8001b86:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001b88:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf4 <HAL_MPU_ConfigRegion+0x7c>)
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	4a19      	ldr	r2, [pc, #100]	@ (8001bf4 <HAL_MPU_ConfigRegion+0x7c>)
 8001b8e:	f023 0301 	bic.w	r3, r3, #1
 8001b92:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001b94:	4a17      	ldr	r2, [pc, #92]	@ (8001bf4 <HAL_MPU_ConfigRegion+0x7c>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	7b1b      	ldrb	r3, [r3, #12]
 8001ba0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	7adb      	ldrb	r3, [r3, #11]
 8001ba6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ba8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	7a9b      	ldrb	r3, [r3, #10]
 8001bae:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001bb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	7b5b      	ldrb	r3, [r3, #13]
 8001bb6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001bb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	7b9b      	ldrb	r3, [r3, #14]
 8001bbe:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001bc0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	7bdb      	ldrb	r3, [r3, #15]
 8001bc6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001bc8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	7a5b      	ldrb	r3, [r3, #9]
 8001bce:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001bd0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	7a1b      	ldrb	r3, [r3, #8]
 8001bd6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bd8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	7812      	ldrb	r2, [r2, #0]
 8001bde:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001be0:	4a04      	ldr	r2, [pc, #16]	@ (8001bf4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001be2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001be4:	6113      	str	r3, [r2, #16]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000ed90 	.word	0xe000ed90

08001bf8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e0e3      	b.n	8001dd2 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d106      	bne.n	8001c22 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2223      	movs	r2, #35	@ 0x23
 8001c18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f007 f8d1 	bl	8008dc4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c22:	4b6e      	ldr	r3, [pc, #440]	@ (8001ddc <HAL_ETH_Init+0x1e4>)
 8001c24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c28:	4a6c      	ldr	r2, [pc, #432]	@ (8001ddc <HAL_ETH_Init+0x1e4>)
 8001c2a:	f043 0302 	orr.w	r3, r3, #2
 8001c2e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001c32:	4b6a      	ldr	r3, [pc, #424]	@ (8001ddc <HAL_ETH_Init+0x1e4>)
 8001c34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	7a1b      	ldrb	r3, [r3, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d103      	bne.n	8001c50 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f7ff fe69 	bl	8001920 <HAL_SYSCFG_ETHInterfaceSelect>
 8001c4e:	e003      	b.n	8001c58 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001c50:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001c54:	f7ff fe64 	bl	8001920 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001c58:	4b61      	ldr	r3, [pc, #388]	@ (8001de0 <HAL_ETH_Init+0x1e8>)
 8001c5a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c72:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c74:	f7ff fe18 	bl	80018a8 <HAL_GetTick>
 8001c78:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001c7a:	e011      	b.n	8001ca0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001c7c:	f7ff fe14 	bl	80018a8 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001c8a:	d909      	bls.n	8001ca0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2204      	movs	r2, #4
 8001c90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	22e0      	movs	r2, #224	@ 0xe0
 8001c98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e098      	b.n	8001dd2 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1e4      	bne.n	8001c7c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 fe0a 	bl	80028cc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001cb8:	f002 fec2 	bl	8004a40 <HAL_RCC_GetHCLKFreq>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4a49      	ldr	r2, [pc, #292]	@ (8001de4 <HAL_ETH_Init+0x1ec>)
 8001cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc4:	0c9a      	lsrs	r2, r3, #18
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	3a01      	subs	r2, #1
 8001ccc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 ffed 	bl	8002cb0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cde:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001ce2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6812      	ldr	r2, [r2, #0]
 8001cea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001cee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cf2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d009      	beq.n	8001d16 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	22e0      	movs	r2, #224	@ 0xe0
 8001d0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e05d      	b.n	8001dd2 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d1e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001d22:	4b31      	ldr	r3, [pc, #196]	@ (8001de8 <HAL_ETH_Init+0x1f0>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6952      	ldr	r2, [r2, #20]
 8001d2a:	0051      	lsls	r1, r2, #1
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	430b      	orrs	r3, r1
 8001d32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d36:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f001 f855 	bl	8002dea <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f001 f89b 	bl	8002e7c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	3305      	adds	r3, #5
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	021a      	lsls	r2, r3, #8
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	3304      	adds	r3, #4
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	3303      	adds	r3, #3
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	061a      	lsls	r2, r3, #24
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	3302      	adds	r3, #2
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	041b      	lsls	r3, r3, #16
 8001d78:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d84:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d92:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d94:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b11      	ldr	r3, [pc, #68]	@ (8001dec <HAL_ETH_Init+0x1f4>)
 8001da6:	430b      	orrs	r3, r1
 8001da8:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b0d      	ldr	r3, [pc, #52]	@ (8001df0 <HAL_ETH_Init+0x1f8>)
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2210      	movs	r2, #16
 8001dcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	58024400 	.word	0x58024400
 8001de0:	58000400 	.word	0x58000400
 8001de4:	431bde83 	.word	0x431bde83
 8001de8:	ffff8001 	.word	0xffff8001
 8001dec:	0c020060 	.word	0x0c020060
 8001df0:	0c20c000 	.word	0x0c20c000

08001df4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e02:	2b10      	cmp	r3, #16
 8001e04:	d165      	bne.n	8001ed2 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2223      	movs	r2, #35	@ 0x23
 8001e0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2204      	movs	r2, #4
 8001e18:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f9e4 	bl	80021e8 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e28:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e38:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e44:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e54:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e60:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8001e6c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e70:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f042 0201 	orr.w	r2, r2, #1
 8001e84:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0202 	orr.w	r2, r2, #2
 8001e96:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eb0:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8001ebc:	430b      	orrs	r3, r1
 8001ebe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ec2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2223      	movs	r2, #35	@ 0x23
 8001eca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e000      	b.n	8001ed4 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
  }
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001eea:	2b23      	cmp	r3, #35	@ 0x23
 8001eec:	d165      	bne.n	8001fba <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2223      	movs	r2, #35	@ 0x23
 8001ef2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001efe:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	4b30      	ldr	r3, [pc, #192]	@ (8001fc8 <HAL_ETH_Stop_IT+0xec>)
 8001f08:	400b      	ands	r3, r1
 8001f0a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f0e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f1a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	f023 0301 	bic.w	r3, r3, #1
 8001f26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f2a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f36:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	f023 0301 	bic.w	r3, r3, #1
 8001f42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f46:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0201 	bic.w	r2, r2, #1
 8001f58:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0201 	orr.w	r2, r2, #1
 8001f6a:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0202 	bic.w	r2, r2, #2
 8001f7c:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	e00e      	b.n	8001fa2 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	3212      	adds	r2, #18
 8001f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8e:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d9ed      	bls.n	8001f84 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2210      	movs	r2, #16
 8001fb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	e000      	b.n	8001fbc <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
  }
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	ffff2f3e 	.word	0xffff2f3e

08001fcc <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d109      	bne.n	8001ff0 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe2:	f043 0201 	orr.w	r2, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e03a      	b.n	8002066 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ff6:	2b23      	cmp	r3, #35	@ 0x23
 8001ff8:	d134      	bne.n	8002064 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002002:	2201      	movs	r2, #1
 8002004:	6839      	ldr	r1, [r7, #0]
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 ff96 	bl	8002f38 <ETH_Prepare_Tx_Descriptors>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002018:	f043 0202 	orr.w	r2, r3, #2
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e01f      	b.n	8002066 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8002026:	f3bf 8f4f 	dsb	sy
}
 800202a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	629a      	str	r2, [r3, #40]	@ 0x28
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203a:	2b03      	cmp	r3, #3
 800203c:	d904      	bls.n	8002048 <HAL_ETH_Transmit_IT+0x7c>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002042:	1f1a      	subs	r2, r3, #4
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3106      	adds	r1, #6
 8002054:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002058:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800205c:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	e000      	b.n	8002066 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
  }
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b088      	sub	sp, #32
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208c:	f043 0201 	orr.w	r2, r3, #1
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e0a2      	b.n	80021e0 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020a0:	2b23      	cmp	r3, #35	@ 0x23
 80020a2:	d001      	beq.n	80020a8 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e09b      	b.n	80021e0 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ac:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69fa      	ldr	r2, [r7, #28]
 80020b2:	3212      	adds	r2, #18
 80020b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b8:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020be:	f1c3 0304 	rsb	r3, r3, #4
 80020c2:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80020c4:	e064      	b.n	8002190 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d007      	beq.n	80020e2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d103      	bne.n	80020f6 <HAL_ETH_ReadData+0x88>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d03a      	beq.n	800216c <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d005      	beq.n	8002136 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002132:	2301      	movs	r3, #1
 8002134:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002146:	461a      	mov	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	b29b      	uxth	r3, r3
 800214c:	f007 f814 	bl	8009178 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	441a      	add	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	3301      	adds	r3, #1
 8002170:	61fb      	str	r3, [r7, #28]
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	2b03      	cmp	r3, #3
 8002176:	d902      	bls.n	800217e <HAL_ETH_ReadData+0x110>
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	3b04      	subs	r3, #4
 800217c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69fa      	ldr	r2, [r7, #28]
 8002182:	3212      	adds	r2, #18
 8002184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002188:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	3301      	adds	r3, #1
 800218e:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8002194:	2b00      	cmp	r3, #0
 8002196:	db06      	blt.n	80021a6 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	429a      	cmp	r2, r3
 800219e:	d202      	bcs.n	80021a6 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 80021a0:	7cfb      	ldrb	r3, [r7, #19]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d08f      	beq.n	80020c6 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	441a      	add	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d002      	beq.n	80021c0 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f814 	bl	80021e8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69fa      	ldr	r2, [r7, #28]
 80021c4:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80021c6:	7cfb      	ldrb	r3, [r7, #19]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d108      	bne.n	80021de <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	e000      	b.n	80021e0 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3720      	adds	r7, #32
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80021f4:	2301      	movs	r3, #1
 80021f6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021fc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	3212      	adds	r2, #18
 8002204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002208:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800220e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002210:	e038      	b.n	8002284 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d112      	bne.n	8002240 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800221a:	f107 0308 	add.w	r3, r7, #8
 800221e:	4618      	mov	r0, r3
 8002220:	f006 ff7a 	bl	8009118 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d102      	bne.n	8002230 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	74fb      	strb	r3, [r7, #19]
 800222e:	e007      	b.n	8002240 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	461a      	mov	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	461a      	mov	r2, r3
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8002240:	7cfb      	ldrb	r3, [r7, #19]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d01e      	beq.n	8002284 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224a:	2b00      	cmp	r3, #0
 800224c:	d004      	beq.n	8002258 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	e003      	b.n	8002260 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 800225e:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	3301      	adds	r3, #1
 8002264:	61fb      	str	r3, [r7, #28]
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	2b03      	cmp	r3, #3
 800226a:	d902      	bls.n	8002272 <ETH_UpdateDescriptor+0x8a>
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	3b04      	subs	r3, #4
 8002270:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	3212      	adds	r2, #18
 8002278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800227c:	617b      	str	r3, [r7, #20]
      desccount--;
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	3b01      	subs	r3, #1
 8002282:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <ETH_UpdateDescriptor+0xa8>
 800228a:	7cfb      	ldrb	r3, [r7, #19]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1c0      	bne.n	8002212 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	429a      	cmp	r2, r3
 8002298:	d01b      	beq.n	80022d2 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3301      	adds	r3, #1
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80022a4:	f3bf 8f5f 	dmb	sy
}
 80022a8:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6919      	ldr	r1, [r3, #16]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	4613      	mov	r3, r2
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	4413      	add	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	18ca      	adds	r2, r1, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022c2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80022d2:	bf00      	nop
 80022d4:	3720      	adds	r7, #32
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3318      	adds	r3, #24
 80022e6:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ec:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f2:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80022f8:	e047      	b.n	800238a <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80022fa:	2301      	movs	r3, #1
 80022fc:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3b01      	subs	r3, #1
 8002302:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	3304      	adds	r3, #4
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10a      	bne.n	800232a <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	3301      	adds	r3, #1
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	2b03      	cmp	r3, #3
 800231e:	d902      	bls.n	8002326 <HAL_ETH_ReleaseTxPacket+0x4c>
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	3b04      	subs	r3, #4
 8002324:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800232a:	7bbb      	ldrb	r3, [r7, #14]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d02c      	beq.n	800238a <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68d9      	ldr	r1, [r3, #12]
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4613      	mov	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4413      	add	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	440b      	add	r3, r1
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	2b00      	cmp	r3, #0
 8002344:	db1f      	blt.n	8002386 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	3304      	adds	r3, #4
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	4618      	mov	r0, r3
 8002354:	f006 ff78 	bl	8009248 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	3304      	adds	r3, #4
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	2200      	movs	r2, #0
 8002364:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	3301      	adds	r3, #1
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d902      	bls.n	8002378 <HAL_ETH_ReleaseTxPacket+0x9e>
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	3b04      	subs	r3, #4
 8002376:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002384:	e001      	b.n	800238a <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <HAL_ETH_ReleaseTxPacket+0xbc>
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1b1      	bne.n	80022fa <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e03e      	b.n	8002440 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80023ca:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	055b      	lsls	r3, r3, #21
 80023d6:	4313      	orrs	r3, r2
 80023d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	041b      	lsls	r3, r3, #16
 80023e4:	4313      	orrs	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f043 030c 	orr.w	r3, r3, #12
 80023ee:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8002402:	f7ff fa51 	bl	80018a8 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002408:	e009      	b.n	800241e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800240a:	f7ff fa4d 	bl	80018a8 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002418:	d901      	bls.n	800241e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e010      	b.n	8002440 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1ed      	bne.n	800240a <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002436:	b29b      	uxth	r3, r3
 8002438:	461a      	mov	r2, r3
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e03c      	b.n	80024e4 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002472:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	055b      	lsls	r3, r3, #21
 800247e:	4313      	orrs	r3, r2
 8002480:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	041b      	lsls	r3, r3, #16
 800248c:	4313      	orrs	r3, r2
 800248e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f023 030c 	bic.w	r3, r3, #12
 8002496:	f043 0304 	orr.w	r3, r3, #4
 800249a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	4b10      	ldr	r3, [pc, #64]	@ (80024ec <HAL_ETH_WritePHYRegister+0xa4>)
 80024aa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80024ae:	4a0f      	ldr	r2, [pc, #60]	@ (80024ec <HAL_ETH_WritePHYRegister+0xa4>)
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 80024b6:	f7ff f9f7 	bl	80018a8 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80024bc:	e009      	b.n	80024d2 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80024be:	f7ff f9f3 	bl	80018a8 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024cc:	d901      	bls.n	80024d2 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e008      	b.n	80024e4 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1ed      	bne.n	80024be <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40028000 	.word	0x40028000

080024f0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e1c3      	b.n	800288c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 020c 	and.w	r2, r3, #12
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	2b00      	cmp	r3, #0
 800251e:	bf14      	ite	ne
 8002520:	2301      	movne	r3, #1
 8002522:	2300      	moveq	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002546:	2b00      	cmp	r3, #0
 8002548:	bf0c      	ite	eq
 800254a:	2301      	moveq	r3, #1
 800254c:	2300      	movne	r3, #0
 800254e:	b2db      	uxtb	r3, r3
 8002550:	461a      	mov	r2, r3
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8002562:	2b00      	cmp	r3, #0
 8002564:	bf14      	ite	ne
 8002566:	2301      	movne	r3, #1
 8002568:	2300      	moveq	r3, #0
 800256a:	b2db      	uxtb	r3, r3
 800256c:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800257c:	2b00      	cmp	r3, #0
 800257e:	bf0c      	ite	eq
 8002580:	2301      	moveq	r3, #1
 8002582:	2300      	movne	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	461a      	mov	r2, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002592:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002596:	2b00      	cmp	r3, #0
 8002598:	bf14      	ite	ne
 800259a:	2301      	movne	r3, #1
 800259c:	2300      	moveq	r3, #0
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	bf14      	ite	ne
 80025b4:	2301      	movne	r3, #1
 80025b6:	2300      	moveq	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	461a      	mov	r2, r3
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	bf14      	ite	ne
 80025ea:	2301      	movne	r3, #1
 80025ec:	2300      	moveq	r3, #0
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	461a      	mov	r2, r3
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002600:	2b00      	cmp	r3, #0
 8002602:	bf0c      	ite	eq
 8002604:	2301      	moveq	r3, #1
 8002606:	2300      	movne	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	461a      	mov	r2, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800261a:	2b00      	cmp	r3, #0
 800261c:	bf0c      	ite	eq
 800261e:	2301      	moveq	r3, #1
 8002620:	2300      	movne	r3, #0
 8002622:	b2db      	uxtb	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	461a      	mov	r2, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800264e:	2b00      	cmp	r3, #0
 8002650:	bf14      	ite	ne
 8002652:	2301      	movne	r3, #1
 8002654:	2300      	moveq	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002668:	2b00      	cmp	r3, #0
 800266a:	bf14      	ite	ne
 800266c:	2301      	movne	r3, #1
 800266e:	2300      	moveq	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	461a      	mov	r2, r3
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800267e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002682:	2b00      	cmp	r3, #0
 8002684:	bf14      	ite	ne
 8002686:	2301      	movne	r3, #1
 8002688:	2300      	moveq	r3, #0
 800268a:	b2db      	uxtb	r3, r3
 800268c:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	bf14      	ite	ne
 80026ae:	2301      	movne	r3, #1
 80026b0:	2300      	moveq	r3, #0
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	461a      	mov	r2, r3
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	bf0c      	ite	eq
 80026e4:	2301      	moveq	r3, #1
 80026e6:	2300      	movne	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	461a      	mov	r2, r3
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bf14      	ite	ne
 8002700:	2301      	movne	r3, #1
 8002702:	2300      	moveq	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	461a      	mov	r2, r3
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002714:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002718:	2b00      	cmp	r3, #0
 800271a:	bf14      	ite	ne
 800271c:	2301      	movne	r3, #1
 800271e:	2300      	moveq	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8002734:	2b00      	cmp	r3, #0
 8002736:	bf14      	ite	ne
 8002738:	2301      	movne	r3, #1
 800273a:	2300      	moveq	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	0e5b      	lsrs	r3, r3, #25
 800274e:	f003 021f 	and.w	r2, r3, #31
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	bf14      	ite	ne
 8002764:	2301      	movne	r3, #1
 8002766:	2300      	moveq	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	461a      	mov	r2, r3
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 020f 	and.w	r2, r3, #15
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	bf14      	ite	ne
 800278e:	2301      	movne	r3, #1
 8002790:	2300      	moveq	r3, #0
 8002792:	b2db      	uxtb	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	bf0c      	ite	eq
 80027aa:	2301      	moveq	r3, #1
 80027ac:	2300      	movne	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	461a      	mov	r2, r3
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027be:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027cc:	0c1b      	lsrs	r3, r3, #16
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	bf14      	ite	ne
 80027e4:	2301      	movne	r3, #1
 80027e6:	2300      	moveq	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	461a      	mov	r2, r3
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027fa:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80027fe:	2b00      	cmp	r3, #0
 8002800:	bf14      	ite	ne
 8002802:	2301      	movne	r3, #1
 8002804:	2300      	moveq	r3, #0
 8002806:	b2db      	uxtb	r3, r3
 8002808:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002818:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002828:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	bf14      	ite	ne
 8002840:	2301      	movne	r3, #1
 8002842:	2300      	moveq	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	2b00      	cmp	r3, #0
 800285c:	bf14      	ite	ne
 800285e:	2301      	movne	r3, #1
 8002860:	2300      	moveq	r3, #0
 8002862:	b2db      	uxtb	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002878:	2b00      	cmp	r3, #0
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e00b      	b.n	80028c4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028b2:	2b10      	cmp	r3, #16
 80028b4:	d105      	bne.n	80028c2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80028b6:	6839      	ldr	r1, [r7, #0]
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f857 	bl	800296c <ETH_SetMACConfig>

    return HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	e000      	b.n	80028c4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
  }
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028e4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80028e6:	f002 f8ab 	bl	8004a40 <HAL_RCC_GetHCLKFreq>
 80028ea:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002958 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d804      	bhi.n	80028fe <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	e022      	b.n	8002944 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	4a16      	ldr	r2, [pc, #88]	@ (800295c <HAL_ETH_SetMDIOClockRange+0x90>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d204      	bcs.n	8002910 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	e019      	b.n	8002944 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4a13      	ldr	r2, [pc, #76]	@ (8002960 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d915      	bls.n	8002944 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4a12      	ldr	r2, [pc, #72]	@ (8002964 <HAL_ETH_SetMDIOClockRange+0x98>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d804      	bhi.n	800292a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	e00c      	b.n	8002944 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	4a0e      	ldr	r2, [pc, #56]	@ (8002968 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d804      	bhi.n	800293c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	e003      	b.n	8002944 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002942:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	02160ebf 	.word	0x02160ebf
 800295c:	03938700 	.word	0x03938700
 8002960:	05f5e0ff 	.word	0x05f5e0ff
 8002964:	08f0d17f 	.word	0x08f0d17f
 8002968:	0ee6b27f 	.word	0x0ee6b27f

0800296c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800297e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	791b      	ldrb	r3, [r3, #4]
 8002984:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002986:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	7b1b      	ldrb	r3, [r3, #12]
 800298c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800298e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	7b5b      	ldrb	r3, [r3, #13]
 8002994:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002996:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	7b9b      	ldrb	r3, [r3, #14]
 800299c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800299e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	7bdb      	ldrb	r3, [r3, #15]
 80029a4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80029a6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	7c12      	ldrb	r2, [r2, #16]
 80029ac:	2a00      	cmp	r2, #0
 80029ae:	d102      	bne.n	80029b6 <ETH_SetMACConfig+0x4a>
 80029b0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80029b4:	e000      	b.n	80029b8 <ETH_SetMACConfig+0x4c>
 80029b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80029b8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	7c52      	ldrb	r2, [r2, #17]
 80029be:	2a00      	cmp	r2, #0
 80029c0:	d102      	bne.n	80029c8 <ETH_SetMACConfig+0x5c>
 80029c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029c6:	e000      	b.n	80029ca <ETH_SetMACConfig+0x5e>
 80029c8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80029ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	7c9b      	ldrb	r3, [r3, #18]
 80029d0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80029d2:	431a      	orrs	r2, r3
               macconf->Speed |
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80029d8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80029de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	7f1b      	ldrb	r3, [r3, #28]
 80029e4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80029e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	7f5b      	ldrb	r3, [r3, #29]
 80029ec:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80029ee:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	7f92      	ldrb	r2, [r2, #30]
 80029f4:	2a00      	cmp	r2, #0
 80029f6:	d102      	bne.n	80029fe <ETH_SetMACConfig+0x92>
 80029f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029fc:	e000      	b.n	8002a00 <ETH_SetMACConfig+0x94>
 80029fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002a00:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	7fdb      	ldrb	r3, [r3, #31]
 8002a06:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002a08:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002a10:	2a00      	cmp	r2, #0
 8002a12:	d102      	bne.n	8002a1a <ETH_SetMACConfig+0xae>
 8002a14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a18:	e000      	b.n	8002a1c <ETH_SetMACConfig+0xb0>
 8002a1a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002a1c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002a22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a2a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002a2c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4b56      	ldr	r3, [pc, #344]	@ (8002b98 <ETH_SetMACConfig+0x22c>)
 8002a3e:	4013      	ands	r3, r2
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	68f9      	ldr	r1, [r7, #12]
 8002a46:	430b      	orrs	r3, r1
 8002a48:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a4e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a56:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002a58:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a60:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002a62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002a6a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002a6c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002a74:	2a00      	cmp	r2, #0
 8002a76:	d102      	bne.n	8002a7e <ETH_SetMACConfig+0x112>
 8002a78:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002a7c:	e000      	b.n	8002a80 <ETH_SetMACConfig+0x114>
 8002a7e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002a80:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	4b42      	ldr	r3, [pc, #264]	@ (8002b9c <ETH_SetMACConfig+0x230>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	68f9      	ldr	r1, [r7, #12]
 8002a9a:	430b      	orrs	r3, r1
 8002a9c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002aa4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ba0 <ETH_SetMACConfig+0x234>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	68f9      	ldr	r1, [r7, #12]
 8002abe:	430b      	orrs	r3, r1
 8002ac0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002ac8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002ace:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002ad6:	2a00      	cmp	r2, #0
 8002ad8:	d101      	bne.n	8002ade <ETH_SetMACConfig+0x172>
 8002ada:	2280      	movs	r2, #128	@ 0x80
 8002adc:	e000      	b.n	8002ae0 <ETH_SetMACConfig+0x174>
 8002ade:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002ae0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ae6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002af2:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002af6:	4013      	ands	r3, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	68f9      	ldr	r1, [r7, #12]
 8002afe:	430b      	orrs	r3, r1
 8002b00:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002b08:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002b10:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b1e:	f023 0103 	bic.w	r1, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002b36:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002b52:	2a00      	cmp	r2, #0
 8002b54:	d101      	bne.n	8002b5a <ETH_SetMACConfig+0x1ee>
 8002b56:	2240      	movs	r2, #64	@ 0x40
 8002b58:	e000      	b.n	8002b5c <ETH_SetMACConfig+0x1f0>
 8002b5a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002b5c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002b64:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002b66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002b6e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002b7c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	00048083 	.word	0x00048083
 8002b9c:	c0f88000 	.word	0xc0f88000
 8002ba0:	fffffef0 	.word	0xfffffef0

08002ba4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4b38      	ldr	r3, [pc, #224]	@ (8002c9c <ETH_SetDMAConfig+0xf8>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	6811      	ldr	r1, [r2, #0]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	430b      	orrs	r3, r1
 8002bc6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002bca:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	791b      	ldrb	r3, [r3, #4]
 8002bd0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002bd6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	7b1b      	ldrb	r3, [r3, #12]
 8002bdc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca0 <ETH_SetDMAConfig+0xfc>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	68f9      	ldr	r1, [r7, #12]
 8002bf6:	430b      	orrs	r3, r1
 8002bf8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002bfc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	7b5b      	ldrb	r3, [r3, #13]
 8002c02:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c14:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002c18:	4b22      	ldr	r3, [pc, #136]	@ (8002ca4 <ETH_SetDMAConfig+0x100>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	68f9      	ldr	r1, [r7, #12]
 8002c22:	430b      	orrs	r3, r1
 8002c24:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c28:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	7d1b      	ldrb	r3, [r3, #20]
 8002c34:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002c36:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	7f5b      	ldrb	r3, [r3, #29]
 8002c3c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c4a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8002c4e:	4b16      	ldr	r3, [pc, #88]	@ (8002ca8 <ETH_SetDMAConfig+0x104>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	68f9      	ldr	r1, [r7, #12]
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c5e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	7f1b      	ldrb	r3, [r3, #28]
 8002c66:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c78:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002cac <ETH_SetDMAConfig+0x108>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	68f9      	ldr	r1, [r7, #12]
 8002c86:	430b      	orrs	r3, r1
 8002c88:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c8c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002c90:	bf00      	nop
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	ffff87fd 	.word	0xffff87fd
 8002ca0:	ffff2ffe 	.word	0xffff2ffe
 8002ca4:	fffec000 	.word	0xfffec000
 8002ca8:	ffc0efef 	.word	0xffc0efef
 8002cac:	7fc0ffff 	.word	0x7fc0ffff

08002cb0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b0a4      	sub	sp, #144	@ 0x90
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002cec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cf0:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002d08:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002d0c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002d14:	2300      	movs	r3, #0
 8002d16:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002d24:	2300      	movs	r3, #0
 8002d26:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002d32:	2300      	movs	r3, #0
 8002d34:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002d36:	2300      	movs	r3, #0
 8002d38:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002d42:	2301      	movs	r3, #1
 8002d44:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002d48:	2320      	movs	r3, #32
 8002d4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002d54:	2300      	movs	r3, #0
 8002d56:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002d5a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002d60:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d64:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002d84:	2301      	movs	r3, #1
 8002d86:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002d94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d98:	4619      	mov	r1, r3
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff fde6 	bl	800296c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002da0:	2301      	movs	r3, #1
 8002da2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002da4:	2301      	movs	r3, #1
 8002da6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002da8:	2300      	movs	r3, #0
 8002daa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002db2:	2300      	movs	r3, #0
 8002db4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002db6:	2300      	movs	r3, #0
 8002db8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002dba:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002dbe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002dc4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002dc8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002dd0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002dd4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002dd6:	f107 0308 	add.w	r3, r7, #8
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff fee1 	bl	8002ba4 <ETH_SetDMAConfig>
}
 8002de2:	bf00      	nop
 8002de4:	3790      	adds	r7, #144	@ 0x90
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b085      	sub	sp, #20
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002df2:	2300      	movs	r3, #0
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	e01d      	b.n	8002e34 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68d9      	ldr	r1, [r3, #12]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	4413      	add	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	440b      	add	r3, r1
 8002e08:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2200      	movs	r2, #0
 8002e14:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	3206      	adds	r2, #6
 8002e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	3301      	adds	r3, #1
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d9de      	bls.n	8002df8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e48:	461a      	mov	r2, r3
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e5c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e6c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002e70:	bf00      	nop
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e84:	2300      	movs	r3, #0
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	e023      	b.n	8002ed2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6919      	ldr	r1, [r3, #16]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	440b      	add	r3, r1
 8002e9a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	3212      	adds	r2, #18
 8002ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d9d8      	bls.n	8002e8a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002efe:	461a      	mov	r2, r3
 8002f00:	2303      	movs	r3, #3
 8002f02:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691a      	ldr	r2, [r3, #16]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f12:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f26:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002f2a:	bf00      	nop
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
	...

08002f38 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b091      	sub	sp, #68	@ 0x44
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3318      	adds	r3, #24
 8002f48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f62:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f7a:	d007      	beq.n	8002f8c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f80:	3304      	adds	r3, #4
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e266      	b.n	800345e <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d044      	beq.n	8003026 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	4b75      	ldr	r3, [pc, #468]	@ (8003178 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fac:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb8:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002fc8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d027      	beq.n	8003026 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe0:	041b      	lsls	r3, r3, #16
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe6:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff2:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003000:	431a      	orrs	r2, r3
 8003002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003004:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003014:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003024:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00e      	beq.n	8003050 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8003032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	4b51      	ldr	r3, [pc, #324]	@ (800317c <ETH_Prepare_Tx_Descriptors+0x244>)
 8003038:	4013      	ands	r3, r2
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	6992      	ldr	r2, [r2, #24]
 800303e:	431a      	orrs	r2, r3
 8003040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003042:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800304c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304e:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d105      	bne.n	8003068 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b00      	cmp	r3, #0
 8003066:	d036      	beq.n	80030d6 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003072:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003074:	f3bf 8f5f 	dmb	sy
}
 8003078:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800307a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003084:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003088:	3301      	adds	r3, #1
 800308a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800308c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800308e:	2b03      	cmp	r3, #3
 8003090:	d902      	bls.n	8003098 <ETH_Prepare_Tx_Descriptors+0x160>
 8003092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003094:	3b04      	subs	r3, #4
 8003096:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800309c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030a0:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 80030a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a4:	3301      	adds	r3, #1
 80030a6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80030a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80030b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030b4:	d10f      	bne.n	80030d6 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80030b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b8:	6a3a      	ldr	r2, [r7, #32]
 80030ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030be:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80030c0:	f3bf 8f5f 	dmb	sy
}
 80030c4:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80030c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80030ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d0:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80030d2:	2302      	movs	r3, #2
 80030d4:	e1c3      	b.n	800345e <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80030d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030d8:	3301      	adds	r3, #1
 80030da:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80030dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	461a      	mov	r2, r3
 80030e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e4:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80030e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	4b24      	ldr	r3, [pc, #144]	@ (800317c <ETH_Prepare_Tx_Descriptors+0x244>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030f0:	6852      	ldr	r2, [r2, #4]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f6:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80030f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d012      	beq.n	8003126 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8003100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	461a      	mov	r2, r3
 800310c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800310e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	4b1a      	ldr	r3, [pc, #104]	@ (8003180 <ETH_Prepare_Tx_Descriptors+0x248>)
 8003116:	4013      	ands	r3, r2
 8003118:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800311a:	6852      	ldr	r2, [r2, #4]
 800311c:	0412      	lsls	r2, r2, #16
 800311e:	431a      	orrs	r2, r3
 8003120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	e008      	b.n	8003138 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003128:	2200      	movs	r2, #0
 800312a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800312c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	4b13      	ldr	r3, [pc, #76]	@ (8003180 <ETH_Prepare_Tx_Descriptors+0x248>)
 8003132:	4013      	ands	r3, r2
 8003134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003136:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b00      	cmp	r3, #0
 8003142:	d021      	beq.n	8003188 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	04db      	lsls	r3, r3, #19
 8003152:	431a      	orrs	r2, r3
 8003154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003156:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	4b09      	ldr	r3, [pc, #36]	@ (8003184 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800315e:	4013      	ands	r3, r2
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	69d2      	ldr	r2, [r2, #28]
 8003164:	431a      	orrs	r2, r3
 8003166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003168:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800316a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003174:	60da      	str	r2, [r3, #12]
 8003176:	e02e      	b.n	80031d6 <ETH_Prepare_Tx_Descriptors+0x29e>
 8003178:	ffff0000 	.word	0xffff0000
 800317c:	ffffc000 	.word	0xffffc000
 8003180:	c000ffff 	.word	0xc000ffff
 8003184:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	4b7b      	ldr	r3, [pc, #492]	@ (800337c <ETH_Prepare_Tx_Descriptors+0x444>)
 800318e:	4013      	ands	r3, r2
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	6852      	ldr	r2, [r2, #4]
 8003194:	431a      	orrs	r2, r3
 8003196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003198:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d008      	beq.n	80031b8 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80031a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	431a      	orrs	r2, r3
 80031b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b6:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80031c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	431a      	orrs	r2, r3
 80031d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d4:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d008      	beq.n	80031f4 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80031e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ee:	431a      	orrs	r2, r3
 80031f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80031f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80031fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fe:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800320a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800320c:	f3bf 8f5f 	dmb	sy
}
 8003210:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800321a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800321c:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 80da 	beq.w	80033e0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800322c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	431a      	orrs	r2, r3
 800323a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323c:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800323e:	e0cf      	b.n	80033e0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800324a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800324c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800324e:	3301      	adds	r3, #1
 8003250:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003254:	2b03      	cmp	r3, #3
 8003256:	d902      	bls.n	800325e <ETH_Prepare_Tx_Descriptors+0x326>
 8003258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800325a:	3b04      	subs	r3, #4
 800325c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003260:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003266:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003272:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8003274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800327c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003280:	d007      	beq.n	8003292 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003286:	3304      	adds	r3, #4
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d029      	beq.n	80032e6 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003298:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800329a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800329e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80032a0:	2300      	movs	r3, #0
 80032a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032a4:	e019      	b.n	80032da <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 80032a6:	f3bf 8f5f 	dmb	sy
}
 80032aa:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80032ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80032b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b6:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80032b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032ba:	3301      	adds	r3, #1
 80032bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d902      	bls.n	80032ca <ETH_Prepare_Tx_Descriptors+0x392>
 80032c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032c6:	3b04      	subs	r3, #4
 80032c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80032ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80032ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032d2:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80032d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d6:	3301      	adds	r3, #1
 80032d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80032dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032de:	429a      	cmp	r2, r3
 80032e0:	d3e1      	bcc.n	80032a6 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80032e2:	2302      	movs	r3, #2
 80032e4:	e0bb      	b.n	800345e <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 80032e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e8:	3301      	adds	r3, #1
 80032ea:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80032ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80032f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fa:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80032fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	4b1f      	ldr	r3, [pc, #124]	@ (8003380 <ETH_Prepare_Tx_Descriptors+0x448>)
 8003302:	4013      	ands	r3, r2
 8003304:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003306:	6852      	ldr	r2, [r2, #4]
 8003308:	431a      	orrs	r2, r3
 800330a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800330c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800330e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d012      	beq.n	800333c <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8003316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800331c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003324:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	4b16      	ldr	r3, [pc, #88]	@ (8003384 <ETH_Prepare_Tx_Descriptors+0x44c>)
 800332c:	4013      	ands	r3, r2
 800332e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003330:	6852      	ldr	r2, [r2, #4]
 8003332:	0412      	lsls	r2, r2, #16
 8003334:	431a      	orrs	r2, r3
 8003336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003338:	609a      	str	r2, [r3, #8]
 800333a:	e008      	b.n	800334e <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800333c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333e:	2200      	movs	r2, #0
 8003340:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	4b0f      	ldr	r3, [pc, #60]	@ (8003384 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8003348:	4013      	ands	r3, r2
 800334a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800334c:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0310 	and.w	r3, r3, #16
 8003356:	2b00      	cmp	r3, #0
 8003358:	d018      	beq.n	800338c <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800335a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	4b0a      	ldr	r3, [pc, #40]	@ (8003388 <ETH_Prepare_Tx_Descriptors+0x450>)
 8003360:	4013      	ands	r3, r2
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	69d2      	ldr	r2, [r2, #28]
 8003366:	431a      	orrs	r2, r3
 8003368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800336a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800336c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003376:	60da      	str	r2, [r3, #12]
 8003378:	e020      	b.n	80033bc <ETH_Prepare_Tx_Descriptors+0x484>
 800337a:	bf00      	nop
 800337c:	ffff8000 	.word	0xffff8000
 8003380:	ffffc000 	.word	0xffffc000
 8003384:	c000ffff 	.word	0xc000ffff
 8003388:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800338c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	4b36      	ldr	r3, [pc, #216]	@ (800346c <ETH_Prepare_Tx_Descriptors+0x534>)
 8003392:	4013      	ands	r3, r2
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	6852      	ldr	r2, [r2, #4]
 8003398:	431a      	orrs	r2, r3
 800339a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800339c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d008      	beq.n	80033bc <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80033aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ba:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80033bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033be:	3301      	adds	r3, #1
 80033c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80033c2:	f3bf 8f5f 	dmb	sy
}
 80033c6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80033c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80033d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d2:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80033d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80033dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033de:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80033e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f47f af2b 	bne.w	8003240 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d006      	beq.n	80033fe <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80033f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80033f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033fa:	609a      	str	r2, [r3, #8]
 80033fc:	e005      	b.n	800340a <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80033fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003408:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800340a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003414:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003418:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800341a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800341c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800341e:	3304      	adds	r3, #4
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003428:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800342a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800342c:	f3ef 8310 	mrs	r3, PRIMASK
 8003430:	613b      	str	r3, [r7, #16]
  return(result);
 8003432:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003434:	61fb      	str	r3, [r7, #28]
 8003436:	2301      	movs	r3, #1
 8003438:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f383 8810 	msr	PRIMASK, r3
}
 8003440:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003444:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003448:	4413      	add	r3, r2
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	f383 8810 	msr	PRIMASK, r3
}
 800345a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3744      	adds	r7, #68	@ 0x44
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	ffff8000 	.word	0xffff8000

08003470 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003470:	b480      	push	{r7}
 8003472:	b089      	sub	sp, #36	@ 0x24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800347e:	4b89      	ldr	r3, [pc, #548]	@ (80036a4 <HAL_GPIO_Init+0x234>)
 8003480:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003482:	e194      	b.n	80037ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	2101      	movs	r1, #1
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	fa01 f303 	lsl.w	r3, r1, r3
 8003490:	4013      	ands	r3, r2
 8003492:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 8186 	beq.w	80037a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 0303 	and.w	r3, r3, #3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d005      	beq.n	80034b4 <HAL_GPIO_Init+0x44>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d130      	bne.n	8003516 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	2203      	movs	r2, #3
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034ea:	2201      	movs	r2, #1
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43db      	mvns	r3, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4013      	ands	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	091b      	lsrs	r3, r3, #4
 8003500:	f003 0201 	and.w	r2, r3, #1
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4313      	orrs	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	2b03      	cmp	r3, #3
 8003520:	d017      	beq.n	8003552 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	2203      	movs	r2, #3
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	43db      	mvns	r3, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4013      	ands	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4313      	orrs	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d123      	bne.n	80035a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	08da      	lsrs	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3208      	adds	r2, #8
 8003566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800356a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	220f      	movs	r2, #15
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43db      	mvns	r3, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4013      	ands	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	08da      	lsrs	r2, r3, #3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3208      	adds	r2, #8
 80035a0:	69b9      	ldr	r1, [r7, #24]
 80035a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	2203      	movs	r2, #3
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43db      	mvns	r3, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4013      	ands	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f003 0203 	and.w	r2, r3, #3
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 80e0 	beq.w	80037a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e8:	4b2f      	ldr	r3, [pc, #188]	@ (80036a8 <HAL_GPIO_Init+0x238>)
 80035ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80035ee:	4a2e      	ldr	r2, [pc, #184]	@ (80036a8 <HAL_GPIO_Init+0x238>)
 80035f0:	f043 0302 	orr.w	r3, r3, #2
 80035f4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80035f8:	4b2b      	ldr	r3, [pc, #172]	@ (80036a8 <HAL_GPIO_Init+0x238>)
 80035fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003606:	4a29      	ldr	r2, [pc, #164]	@ (80036ac <HAL_GPIO_Init+0x23c>)
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	089b      	lsrs	r3, r3, #2
 800360c:	3302      	adds	r3, #2
 800360e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003612:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	220f      	movs	r2, #15
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	43db      	mvns	r3, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4013      	ands	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a20      	ldr	r2, [pc, #128]	@ (80036b0 <HAL_GPIO_Init+0x240>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d052      	beq.n	80036d8 <HAL_GPIO_Init+0x268>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a1f      	ldr	r2, [pc, #124]	@ (80036b4 <HAL_GPIO_Init+0x244>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d031      	beq.n	800369e <HAL_GPIO_Init+0x22e>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a1e      	ldr	r2, [pc, #120]	@ (80036b8 <HAL_GPIO_Init+0x248>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d02b      	beq.n	800369a <HAL_GPIO_Init+0x22a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a1d      	ldr	r2, [pc, #116]	@ (80036bc <HAL_GPIO_Init+0x24c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d025      	beq.n	8003696 <HAL_GPIO_Init+0x226>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a1c      	ldr	r2, [pc, #112]	@ (80036c0 <HAL_GPIO_Init+0x250>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d01f      	beq.n	8003692 <HAL_GPIO_Init+0x222>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a1b      	ldr	r2, [pc, #108]	@ (80036c4 <HAL_GPIO_Init+0x254>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d019      	beq.n	800368e <HAL_GPIO_Init+0x21e>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a1a      	ldr	r2, [pc, #104]	@ (80036c8 <HAL_GPIO_Init+0x258>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d013      	beq.n	800368a <HAL_GPIO_Init+0x21a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a19      	ldr	r2, [pc, #100]	@ (80036cc <HAL_GPIO_Init+0x25c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d00d      	beq.n	8003686 <HAL_GPIO_Init+0x216>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a18      	ldr	r2, [pc, #96]	@ (80036d0 <HAL_GPIO_Init+0x260>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d007      	beq.n	8003682 <HAL_GPIO_Init+0x212>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a17      	ldr	r2, [pc, #92]	@ (80036d4 <HAL_GPIO_Init+0x264>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d101      	bne.n	800367e <HAL_GPIO_Init+0x20e>
 800367a:	2309      	movs	r3, #9
 800367c:	e02d      	b.n	80036da <HAL_GPIO_Init+0x26a>
 800367e:	230a      	movs	r3, #10
 8003680:	e02b      	b.n	80036da <HAL_GPIO_Init+0x26a>
 8003682:	2308      	movs	r3, #8
 8003684:	e029      	b.n	80036da <HAL_GPIO_Init+0x26a>
 8003686:	2307      	movs	r3, #7
 8003688:	e027      	b.n	80036da <HAL_GPIO_Init+0x26a>
 800368a:	2306      	movs	r3, #6
 800368c:	e025      	b.n	80036da <HAL_GPIO_Init+0x26a>
 800368e:	2305      	movs	r3, #5
 8003690:	e023      	b.n	80036da <HAL_GPIO_Init+0x26a>
 8003692:	2304      	movs	r3, #4
 8003694:	e021      	b.n	80036da <HAL_GPIO_Init+0x26a>
 8003696:	2303      	movs	r3, #3
 8003698:	e01f      	b.n	80036da <HAL_GPIO_Init+0x26a>
 800369a:	2302      	movs	r3, #2
 800369c:	e01d      	b.n	80036da <HAL_GPIO_Init+0x26a>
 800369e:	2301      	movs	r3, #1
 80036a0:	e01b      	b.n	80036da <HAL_GPIO_Init+0x26a>
 80036a2:	bf00      	nop
 80036a4:	58000080 	.word	0x58000080
 80036a8:	58024400 	.word	0x58024400
 80036ac:	58000400 	.word	0x58000400
 80036b0:	58020000 	.word	0x58020000
 80036b4:	58020400 	.word	0x58020400
 80036b8:	58020800 	.word	0x58020800
 80036bc:	58020c00 	.word	0x58020c00
 80036c0:	58021000 	.word	0x58021000
 80036c4:	58021400 	.word	0x58021400
 80036c8:	58021800 	.word	0x58021800
 80036cc:	58021c00 	.word	0x58021c00
 80036d0:	58022000 	.word	0x58022000
 80036d4:	58022400 	.word	0x58022400
 80036d8:	2300      	movs	r3, #0
 80036da:	69fa      	ldr	r2, [r7, #28]
 80036dc:	f002 0203 	and.w	r2, r2, #3
 80036e0:	0092      	lsls	r2, r2, #2
 80036e2:	4093      	lsls	r3, r2
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036ea:	4938      	ldr	r1, [pc, #224]	@ (80037cc <HAL_GPIO_Init+0x35c>)
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	089b      	lsrs	r3, r3, #2
 80036f0:	3302      	adds	r3, #2
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	43db      	mvns	r3, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4013      	ands	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800371e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003726:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	43db      	mvns	r3, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4013      	ands	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800374c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	43db      	mvns	r3, r3
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4013      	ands	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	43db      	mvns	r3, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4013      	ands	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	4313      	orrs	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	3301      	adds	r3, #1
 80037ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	fa22 f303 	lsr.w	r3, r2, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f47f ae63 	bne.w	8003484 <HAL_GPIO_Init+0x14>
  }
}
 80037be:	bf00      	nop
 80037c0:	bf00      	nop
 80037c2:	3724      	adds	r7, #36	@ 0x24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	58000400 	.word	0x58000400

080037d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	807b      	strh	r3, [r7, #2]
 80037dc:	4613      	mov	r3, r2
 80037de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037e0:	787b      	ldrb	r3, [r7, #1]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037e6:	887a      	ldrh	r2, [r7, #2]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80037ec:	e003      	b.n	80037f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80037ee:	887b      	ldrh	r3, [r7, #2]
 80037f0:	041a      	lsls	r2, r3, #16
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	619a      	str	r2, [r3, #24]
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003802:	b480      	push	{r7}
 8003804:	b085      	sub	sp, #20
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	460b      	mov	r3, r1
 800380c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003814:	887a      	ldrh	r2, [r7, #2]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4013      	ands	r3, r2
 800381a:	041a      	lsls	r2, r3, #16
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	43d9      	mvns	r1, r3
 8003820:	887b      	ldrh	r3, [r7, #2]
 8003822:	400b      	ands	r3, r1
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	619a      	str	r2, [r3, #24]
}
 800382a:	bf00      	nop
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b086      	sub	sp, #24
 800383a:	af02      	add	r7, sp, #8
 800383c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0fe      	b.n	8003a46 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d106      	bne.n	8003862 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7fd fe27 	bl	80014b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2203      	movs	r2, #3
 8003866:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f004 fc5a 	bl	8008128 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	7c1a      	ldrb	r2, [r3, #16]
 800387c:	f88d 2000 	strb.w	r2, [sp]
 8003880:	3304      	adds	r3, #4
 8003882:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003884:	f004 fbde 	bl	8008044 <USB_CoreInit>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d005      	beq.n	800389a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2202      	movs	r2, #2
 8003892:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e0d5      	b.n	8003a46 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2100      	movs	r1, #0
 80038a0:	4618      	mov	r0, r3
 80038a2:	f004 fc52 	bl	800814a <USB_SetCurrentMode>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0c6      	b.n	8003a46 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038b8:	2300      	movs	r3, #0
 80038ba:	73fb      	strb	r3, [r7, #15]
 80038bc:	e04a      	b.n	8003954 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038be:	7bfa      	ldrb	r2, [r7, #15]
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	3315      	adds	r3, #21
 80038ce:	2201      	movs	r2, #1
 80038d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038d2:	7bfa      	ldrb	r2, [r7, #15]
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	4413      	add	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	3314      	adds	r3, #20
 80038e2:	7bfa      	ldrb	r2, [r7, #15]
 80038e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038e6:	7bfa      	ldrb	r2, [r7, #15]
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	b298      	uxth	r0, r3
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	332e      	adds	r3, #46	@ 0x2e
 80038fa:	4602      	mov	r2, r0
 80038fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038fe:	7bfa      	ldrb	r2, [r7, #15]
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	3318      	adds	r3, #24
 800390e:	2200      	movs	r2, #0
 8003910:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003912:	7bfa      	ldrb	r2, [r7, #15]
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	331c      	adds	r3, #28
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003926:	7bfa      	ldrb	r2, [r7, #15]
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	4413      	add	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	3320      	adds	r3, #32
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800393a:	7bfa      	ldrb	r2, [r7, #15]
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	4413      	add	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	3324      	adds	r3, #36	@ 0x24
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800394e:	7bfb      	ldrb	r3, [r7, #15]
 8003950:	3301      	adds	r3, #1
 8003952:	73fb      	strb	r3, [r7, #15]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	791b      	ldrb	r3, [r3, #4]
 8003958:	7bfa      	ldrb	r2, [r7, #15]
 800395a:	429a      	cmp	r2, r3
 800395c:	d3af      	bcc.n	80038be <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800395e:	2300      	movs	r3, #0
 8003960:	73fb      	strb	r3, [r7, #15]
 8003962:	e044      	b.n	80039ee <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003964:	7bfa      	ldrb	r2, [r7, #15]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	4413      	add	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003976:	2200      	movs	r2, #0
 8003978:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800397a:	7bfa      	ldrb	r2, [r7, #15]
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800398c:	7bfa      	ldrb	r2, [r7, #15]
 800398e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003990:	7bfa      	ldrb	r2, [r7, #15]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80039a2:	2200      	movs	r2, #0
 80039a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039a6:	7bfa      	ldrb	r2, [r7, #15]
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	4613      	mov	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	4413      	add	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039bc:	7bfa      	ldrb	r2, [r7, #15]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039d2:	7bfa      	ldrb	r2, [r7, #15]
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4413      	add	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	440b      	add	r3, r1
 80039e0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	3301      	adds	r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	791b      	ldrb	r3, [r3, #4]
 80039f2:	7bfa      	ldrb	r2, [r7, #15]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d3b5      	bcc.n	8003964 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6818      	ldr	r0, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	7c1a      	ldrb	r2, [r3, #16]
 8003a00:	f88d 2000 	strb.w	r2, [sp]
 8003a04:	3304      	adds	r3, #4
 8003a06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a08:	f004 fbec 	bl	80081e4 <USB_DevInit>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2202      	movs	r2, #2
 8003a16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e013      	b.n	8003a46 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	7b1b      	ldrb	r3, [r3, #12]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d102      	bne.n	8003a3a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f80b 	bl	8003a50 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f004 fda7 	bl	8008592 <USB_DevDisconnect>

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a7e:	4b05      	ldr	r3, [pc, #20]	@ (8003a94 <HAL_PCDEx_ActivateLPM+0x44>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	10000003 	.word	0x10000003

08003a98 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003aa0:	4b19      	ldr	r3, [pc, #100]	@ (8003b08 <HAL_PWREx_ConfigSupply+0x70>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d00a      	beq.n	8003ac2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003aac:	4b16      	ldr	r3, [pc, #88]	@ (8003b08 <HAL_PWREx_ConfigSupply+0x70>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d001      	beq.n	8003abe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e01f      	b.n	8003afe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	e01d      	b.n	8003afe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003ac2:	4b11      	ldr	r3, [pc, #68]	@ (8003b08 <HAL_PWREx_ConfigSupply+0x70>)
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f023 0207 	bic.w	r2, r3, #7
 8003aca:	490f      	ldr	r1, [pc, #60]	@ (8003b08 <HAL_PWREx_ConfigSupply+0x70>)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003ad2:	f7fd fee9 	bl	80018a8 <HAL_GetTick>
 8003ad6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ad8:	e009      	b.n	8003aee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ada:	f7fd fee5 	bl	80018a8 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ae8:	d901      	bls.n	8003aee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e007      	b.n	8003afe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003aee:	4b06      	ldr	r3, [pc, #24]	@ (8003b08 <HAL_PWREx_ConfigSupply+0x70>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003af6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003afa:	d1ee      	bne.n	8003ada <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	58024800 	.word	0x58024800

08003b0c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003b10:	4b05      	ldr	r3, [pc, #20]	@ (8003b28 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4a04      	ldr	r2, [pc, #16]	@ (8003b28 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003b16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b1a:	60d3      	str	r3, [r2, #12]
}
 8003b1c:	bf00      	nop
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	58024800 	.word	0x58024800

08003b2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08c      	sub	sp, #48	@ 0x30
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d102      	bne.n	8003b40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	f000 bc48 	b.w	80043d0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 8088 	beq.w	8003c5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b4e:	4b99      	ldr	r3, [pc, #612]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b58:	4b96      	ldr	r3, [pc, #600]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d007      	beq.n	8003b74 <HAL_RCC_OscConfig+0x48>
 8003b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b66:	2b18      	cmp	r3, #24
 8003b68:	d111      	bne.n	8003b8e <HAL_RCC_OscConfig+0x62>
 8003b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d10c      	bne.n	8003b8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b74:	4b8f      	ldr	r3, [pc, #572]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d06d      	beq.n	8003c5c <HAL_RCC_OscConfig+0x130>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d169      	bne.n	8003c5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	f000 bc21 	b.w	80043d0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b96:	d106      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x7a>
 8003b98:	4b86      	ldr	r3, [pc, #536]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a85      	ldr	r2, [pc, #532]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003b9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba2:	6013      	str	r3, [r2, #0]
 8003ba4:	e02e      	b.n	8003c04 <HAL_RCC_OscConfig+0xd8>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x9c>
 8003bae:	4b81      	ldr	r3, [pc, #516]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a80      	ldr	r2, [pc, #512]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003bb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	4b7e      	ldr	r3, [pc, #504]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a7d      	ldr	r2, [pc, #500]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003bc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	e01d      	b.n	8003c04 <HAL_RCC_OscConfig+0xd8>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bd0:	d10c      	bne.n	8003bec <HAL_RCC_OscConfig+0xc0>
 8003bd2:	4b78      	ldr	r3, [pc, #480]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a77      	ldr	r2, [pc, #476]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003bd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	4b75      	ldr	r3, [pc, #468]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a74      	ldr	r2, [pc, #464]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	e00b      	b.n	8003c04 <HAL_RCC_OscConfig+0xd8>
 8003bec:	4b71      	ldr	r3, [pc, #452]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a70      	ldr	r2, [pc, #448]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	4b6e      	ldr	r3, [pc, #440]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a6d      	ldr	r2, [pc, #436]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003bfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d013      	beq.n	8003c34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0c:	f7fd fe4c 	bl	80018a8 <HAL_GetTick>
 8003c10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c14:	f7fd fe48 	bl	80018a8 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b64      	cmp	r3, #100	@ 0x64
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e3d4      	b.n	80043d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c26:	4b63      	ldr	r3, [pc, #396]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0f0      	beq.n	8003c14 <HAL_RCC_OscConfig+0xe8>
 8003c32:	e014      	b.n	8003c5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fd fe38 	bl	80018a8 <HAL_GetTick>
 8003c38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c3c:	f7fd fe34 	bl	80018a8 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b64      	cmp	r3, #100	@ 0x64
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e3c0      	b.n	80043d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c4e:	4b59      	ldr	r3, [pc, #356]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0x110>
 8003c5a:	e000      	b.n	8003c5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 80ca 	beq.w	8003e00 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c6c:	4b51      	ldr	r3, [pc, #324]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c74:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c76:	4b4f      	ldr	r3, [pc, #316]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d007      	beq.n	8003c92 <HAL_RCC_OscConfig+0x166>
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	2b18      	cmp	r3, #24
 8003c86:	d156      	bne.n	8003d36 <HAL_RCC_OscConfig+0x20a>
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d151      	bne.n	8003d36 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c92:	4b48      	ldr	r3, [pc, #288]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d005      	beq.n	8003caa <HAL_RCC_OscConfig+0x17e>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e392      	b.n	80043d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003caa:	4b42      	ldr	r3, [pc, #264]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f023 0219 	bic.w	r2, r3, #25
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	493f      	ldr	r1, [pc, #252]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbc:	f7fd fdf4 	bl	80018a8 <HAL_GetTick>
 8003cc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cc4:	f7fd fdf0 	bl	80018a8 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e37c      	b.n	80043d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cd6:	4b37      	ldr	r3, [pc, #220]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce2:	f7fd fe11 	bl	8001908 <HAL_GetREVID>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d817      	bhi.n	8003d20 <HAL_RCC_OscConfig+0x1f4>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	2b40      	cmp	r3, #64	@ 0x40
 8003cf6:	d108      	bne.n	8003d0a <HAL_RCC_OscConfig+0x1de>
 8003cf8:	4b2e      	ldr	r3, [pc, #184]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003d00:	4a2c      	ldr	r2, [pc, #176]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003d02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d06:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d08:	e07a      	b.n	8003e00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	031b      	lsls	r3, r3, #12
 8003d18:	4926      	ldr	r1, [pc, #152]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d1e:	e06f      	b.n	8003e00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d20:	4b24      	ldr	r3, [pc, #144]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	061b      	lsls	r3, r3, #24
 8003d2e:	4921      	ldr	r1, [pc, #132]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d34:	e064      	b.n	8003e00 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d047      	beq.n	8003dce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 0219 	bic.w	r2, r3, #25
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	491a      	ldr	r1, [pc, #104]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fd fdaa 	bl	80018a8 <HAL_GetTick>
 8003d54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d58:	f7fd fda6 	bl	80018a8 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e332      	b.n	80043d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d6a:	4b12      	ldr	r3, [pc, #72]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0f0      	beq.n	8003d58 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d76:	f7fd fdc7 	bl	8001908 <HAL_GetREVID>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d819      	bhi.n	8003db8 <HAL_RCC_OscConfig+0x28c>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	2b40      	cmp	r3, #64	@ 0x40
 8003d8a:	d108      	bne.n	8003d9e <HAL_RCC_OscConfig+0x272>
 8003d8c:	4b09      	ldr	r3, [pc, #36]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003d94:	4a07      	ldr	r2, [pc, #28]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003d96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d9a:	6053      	str	r3, [r2, #4]
 8003d9c:	e030      	b.n	8003e00 <HAL_RCC_OscConfig+0x2d4>
 8003d9e:	4b05      	ldr	r3, [pc, #20]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	031b      	lsls	r3, r3, #12
 8003dac:	4901      	ldr	r1, [pc, #4]	@ (8003db4 <HAL_RCC_OscConfig+0x288>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	604b      	str	r3, [r1, #4]
 8003db2:	e025      	b.n	8003e00 <HAL_RCC_OscConfig+0x2d4>
 8003db4:	58024400 	.word	0x58024400
 8003db8:	4b9a      	ldr	r3, [pc, #616]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	061b      	lsls	r3, r3, #24
 8003dc6:	4997      	ldr	r1, [pc, #604]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	604b      	str	r3, [r1, #4]
 8003dcc:	e018      	b.n	8003e00 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dce:	4b95      	ldr	r3, [pc, #596]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a94      	ldr	r2, [pc, #592]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003dd4:	f023 0301 	bic.w	r3, r3, #1
 8003dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dda:	f7fd fd65 	bl	80018a8 <HAL_GetTick>
 8003dde:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003de2:	f7fd fd61 	bl	80018a8 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e2ed      	b.n	80043d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003df4:	4b8b      	ldr	r3, [pc, #556]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1f0      	bne.n	8003de2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0310 	and.w	r3, r3, #16
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 80a9 	beq.w	8003f60 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e0e:	4b85      	ldr	r3, [pc, #532]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e16:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e18:	4b82      	ldr	r3, [pc, #520]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d007      	beq.n	8003e34 <HAL_RCC_OscConfig+0x308>
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	2b18      	cmp	r3, #24
 8003e28:	d13a      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x374>
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f003 0303 	and.w	r3, r3, #3
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d135      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e34:	4b7b      	ldr	r3, [pc, #492]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d005      	beq.n	8003e4c <HAL_RCC_OscConfig+0x320>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	2b80      	cmp	r3, #128	@ 0x80
 8003e46:	d001      	beq.n	8003e4c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e2c1      	b.n	80043d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e4c:	f7fd fd5c 	bl	8001908 <HAL_GetREVID>
 8003e50:	4603      	mov	r3, r0
 8003e52:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d817      	bhi.n	8003e8a <HAL_RCC_OscConfig+0x35e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	2b20      	cmp	r3, #32
 8003e60:	d108      	bne.n	8003e74 <HAL_RCC_OscConfig+0x348>
 8003e62:	4b70      	ldr	r3, [pc, #448]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003e6a:	4a6e      	ldr	r2, [pc, #440]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003e6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e70:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e72:	e075      	b.n	8003f60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e74:	4b6b      	ldr	r3, [pc, #428]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	069b      	lsls	r3, r3, #26
 8003e82:	4968      	ldr	r1, [pc, #416]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e88:	e06a      	b.n	8003f60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e8a:	4b66      	ldr	r3, [pc, #408]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	061b      	lsls	r3, r3, #24
 8003e98:	4962      	ldr	r1, [pc, #392]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e9e:	e05f      	b.n	8003f60 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d042      	beq.n	8003f2e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003ea8:	4b5e      	ldr	r3, [pc, #376]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a5d      	ldr	r2, [pc, #372]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003eae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fd fcf8 	bl	80018a8 <HAL_GetTick>
 8003eb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003ebc:	f7fd fcf4 	bl	80018a8 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e280      	b.n	80043d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ece:	4b55      	ldr	r3, [pc, #340]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003eda:	f7fd fd15 	bl	8001908 <HAL_GetREVID>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d817      	bhi.n	8003f18 <HAL_RCC_OscConfig+0x3ec>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d108      	bne.n	8003f02 <HAL_RCC_OscConfig+0x3d6>
 8003ef0:	4b4c      	ldr	r3, [pc, #304]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003ef8:	4a4a      	ldr	r2, [pc, #296]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003efa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003efe:	6053      	str	r3, [r2, #4]
 8003f00:	e02e      	b.n	8003f60 <HAL_RCC_OscConfig+0x434>
 8003f02:	4b48      	ldr	r3, [pc, #288]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	069b      	lsls	r3, r3, #26
 8003f10:	4944      	ldr	r1, [pc, #272]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	604b      	str	r3, [r1, #4]
 8003f16:	e023      	b.n	8003f60 <HAL_RCC_OscConfig+0x434>
 8003f18:	4b42      	ldr	r3, [pc, #264]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	061b      	lsls	r3, r3, #24
 8003f26:	493f      	ldr	r1, [pc, #252]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60cb      	str	r3, [r1, #12]
 8003f2c:	e018      	b.n	8003f60 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003f2e:	4b3d      	ldr	r3, [pc, #244]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a3c      	ldr	r2, [pc, #240]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003f34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3a:	f7fd fcb5 	bl	80018a8 <HAL_GetTick>
 8003f3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003f42:	f7fd fcb1 	bl	80018a8 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e23d      	b.n	80043d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f54:	4b33      	ldr	r3, [pc, #204]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1f0      	bne.n	8003f42 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d036      	beq.n	8003fda <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d019      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f74:	4b2b      	ldr	r3, [pc, #172]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003f76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f78:	4a2a      	ldr	r2, [pc, #168]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003f7a:	f043 0301 	orr.w	r3, r3, #1
 8003f7e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f80:	f7fd fc92 	bl	80018a8 <HAL_GetTick>
 8003f84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f88:	f7fd fc8e 	bl	80018a8 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e21a      	b.n	80043d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f9a:	4b22      	ldr	r3, [pc, #136]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCC_OscConfig+0x45c>
 8003fa6:	e018      	b.n	8003fda <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fa8:	4b1e      	ldr	r3, [pc, #120]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003faa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fac:	4a1d      	ldr	r2, [pc, #116]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003fae:	f023 0301 	bic.w	r3, r3, #1
 8003fb2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb4:	f7fd fc78 	bl	80018a8 <HAL_GetTick>
 8003fb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fbc:	f7fd fc74 	bl	80018a8 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e200      	b.n	80043d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fce:	4b15      	ldr	r3, [pc, #84]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003fd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d039      	beq.n	800405a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d01c      	beq.n	8004028 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fee:	4b0d      	ldr	r3, [pc, #52]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a0c      	ldr	r2, [pc, #48]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8003ff4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ff8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ffa:	f7fd fc55 	bl	80018a8 <HAL_GetTick>
 8003ffe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004002:	f7fd fc51 	bl	80018a8 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e1dd      	b.n	80043d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004014:	4b03      	ldr	r3, [pc, #12]	@ (8004024 <HAL_RCC_OscConfig+0x4f8>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0f0      	beq.n	8004002 <HAL_RCC_OscConfig+0x4d6>
 8004020:	e01b      	b.n	800405a <HAL_RCC_OscConfig+0x52e>
 8004022:	bf00      	nop
 8004024:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004028:	4b9b      	ldr	r3, [pc, #620]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a9a      	ldr	r2, [pc, #616]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 800402e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004032:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004034:	f7fd fc38 	bl	80018a8 <HAL_GetTick>
 8004038:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800403c:	f7fd fc34 	bl	80018a8 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e1c0      	b.n	80043d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800404e:	4b92      	ldr	r3, [pc, #584]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0304 	and.w	r3, r3, #4
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 8081 	beq.w	800416a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004068:	4b8c      	ldr	r3, [pc, #560]	@ (800429c <HAL_RCC_OscConfig+0x770>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a8b      	ldr	r2, [pc, #556]	@ (800429c <HAL_RCC_OscConfig+0x770>)
 800406e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004072:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004074:	f7fd fc18 	bl	80018a8 <HAL_GetTick>
 8004078:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800407c:	f7fd fc14 	bl	80018a8 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b64      	cmp	r3, #100	@ 0x64
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e1a0      	b.n	80043d0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800408e:	4b83      	ldr	r3, [pc, #524]	@ (800429c <HAL_RCC_OscConfig+0x770>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0f0      	beq.n	800407c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d106      	bne.n	80040b0 <HAL_RCC_OscConfig+0x584>
 80040a2:	4b7d      	ldr	r3, [pc, #500]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 80040a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a6:	4a7c      	ldr	r2, [pc, #496]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ae:	e02d      	b.n	800410c <HAL_RCC_OscConfig+0x5e0>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10c      	bne.n	80040d2 <HAL_RCC_OscConfig+0x5a6>
 80040b8:	4b77      	ldr	r3, [pc, #476]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 80040ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040bc:	4a76      	ldr	r2, [pc, #472]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 80040be:	f023 0301 	bic.w	r3, r3, #1
 80040c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80040c4:	4b74      	ldr	r3, [pc, #464]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 80040c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c8:	4a73      	ldr	r2, [pc, #460]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 80040ca:	f023 0304 	bic.w	r3, r3, #4
 80040ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80040d0:	e01c      	b.n	800410c <HAL_RCC_OscConfig+0x5e0>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2b05      	cmp	r3, #5
 80040d8:	d10c      	bne.n	80040f4 <HAL_RCC_OscConfig+0x5c8>
 80040da:	4b6f      	ldr	r3, [pc, #444]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040de:	4a6e      	ldr	r2, [pc, #440]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 80040e0:	f043 0304 	orr.w	r3, r3, #4
 80040e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80040e6:	4b6c      	ldr	r3, [pc, #432]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ea:	4a6b      	ldr	r2, [pc, #428]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80040f2:	e00b      	b.n	800410c <HAL_RCC_OscConfig+0x5e0>
 80040f4:	4b68      	ldr	r3, [pc, #416]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 80040f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f8:	4a67      	ldr	r2, [pc, #412]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 80040fa:	f023 0301 	bic.w	r3, r3, #1
 80040fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004100:	4b65      	ldr	r3, [pc, #404]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 8004102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004104:	4a64      	ldr	r2, [pc, #400]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 8004106:	f023 0304 	bic.w	r3, r3, #4
 800410a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d015      	beq.n	8004140 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004114:	f7fd fbc8 	bl	80018a8 <HAL_GetTick>
 8004118:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800411a:	e00a      	b.n	8004132 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411c:	f7fd fbc4 	bl	80018a8 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800412a:	4293      	cmp	r3, r2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e14e      	b.n	80043d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004132:	4b59      	ldr	r3, [pc, #356]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 8004134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0ee      	beq.n	800411c <HAL_RCC_OscConfig+0x5f0>
 800413e:	e014      	b.n	800416a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004140:	f7fd fbb2 	bl	80018a8 <HAL_GetTick>
 8004144:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004146:	e00a      	b.n	800415e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004148:	f7fd fbae 	bl	80018a8 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004156:	4293      	cmp	r3, r2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e138      	b.n	80043d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800415e:	4b4e      	ldr	r3, [pc, #312]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 8004160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1ee      	bne.n	8004148 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 812d 	beq.w	80043ce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004174:	4b48      	ldr	r3, [pc, #288]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800417c:	2b18      	cmp	r3, #24
 800417e:	f000 80bd 	beq.w	80042fc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004186:	2b02      	cmp	r3, #2
 8004188:	f040 809e 	bne.w	80042c8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418c:	4b42      	ldr	r3, [pc, #264]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a41      	ldr	r2, [pc, #260]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 8004192:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004198:	f7fd fb86 	bl	80018a8 <HAL_GetTick>
 800419c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a0:	f7fd fb82 	bl	80018a8 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e10e      	b.n	80043d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041b2:	4b39      	ldr	r3, [pc, #228]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1f0      	bne.n	80041a0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041be:	4b36      	ldr	r3, [pc, #216]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 80041c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041c2:	4b37      	ldr	r3, [pc, #220]	@ (80042a0 <HAL_RCC_OscConfig+0x774>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80041ce:	0112      	lsls	r2, r2, #4
 80041d0:	430a      	orrs	r2, r1
 80041d2:	4931      	ldr	r1, [pc, #196]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041dc:	3b01      	subs	r3, #1
 80041de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041e6:	3b01      	subs	r3, #1
 80041e8:	025b      	lsls	r3, r3, #9
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f2:	3b01      	subs	r3, #1
 80041f4:	041b      	lsls	r3, r3, #16
 80041f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004200:	3b01      	subs	r3, #1
 8004202:	061b      	lsls	r3, r3, #24
 8004204:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004208:	4923      	ldr	r1, [pc, #140]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 800420a:	4313      	orrs	r3, r2
 800420c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800420e:	4b22      	ldr	r3, [pc, #136]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 8004210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004212:	4a21      	ldr	r2, [pc, #132]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 8004214:	f023 0301 	bic.w	r3, r3, #1
 8004218:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800421a:	4b1f      	ldr	r3, [pc, #124]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 800421c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800421e:	4b21      	ldr	r3, [pc, #132]	@ (80042a4 <HAL_RCC_OscConfig+0x778>)
 8004220:	4013      	ands	r3, r2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004226:	00d2      	lsls	r2, r2, #3
 8004228:	491b      	ldr	r1, [pc, #108]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 800422a:	4313      	orrs	r3, r2
 800422c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800422e:	4b1a      	ldr	r3, [pc, #104]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 8004230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004232:	f023 020c 	bic.w	r2, r3, #12
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423a:	4917      	ldr	r1, [pc, #92]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 800423c:	4313      	orrs	r3, r2
 800423e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004240:	4b15      	ldr	r3, [pc, #84]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 8004242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004244:	f023 0202 	bic.w	r2, r3, #2
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424c:	4912      	ldr	r1, [pc, #72]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 800424e:	4313      	orrs	r3, r2
 8004250:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004252:	4b11      	ldr	r3, [pc, #68]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 8004254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004256:	4a10      	ldr	r2, [pc, #64]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 8004258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800425c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800425e:	4b0e      	ldr	r3, [pc, #56]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 8004260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004262:	4a0d      	ldr	r2, [pc, #52]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 8004264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004268:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800426a:	4b0b      	ldr	r3, [pc, #44]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 800426c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426e:	4a0a      	ldr	r2, [pc, #40]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 8004270:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004274:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004276:	4b08      	ldr	r3, [pc, #32]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 8004278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427a:	4a07      	ldr	r2, [pc, #28]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 800427c:	f043 0301 	orr.w	r3, r3, #1
 8004280:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004282:	4b05      	ldr	r3, [pc, #20]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a04      	ldr	r2, [pc, #16]	@ (8004298 <HAL_RCC_OscConfig+0x76c>)
 8004288:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800428c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428e:	f7fd fb0b 	bl	80018a8 <HAL_GetTick>
 8004292:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004294:	e011      	b.n	80042ba <HAL_RCC_OscConfig+0x78e>
 8004296:	bf00      	nop
 8004298:	58024400 	.word	0x58024400
 800429c:	58024800 	.word	0x58024800
 80042a0:	fffffc0c 	.word	0xfffffc0c
 80042a4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a8:	f7fd fafe 	bl	80018a8 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e08a      	b.n	80043d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042ba:	4b47      	ldr	r3, [pc, #284]	@ (80043d8 <HAL_RCC_OscConfig+0x8ac>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0f0      	beq.n	80042a8 <HAL_RCC_OscConfig+0x77c>
 80042c6:	e082      	b.n	80043ce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c8:	4b43      	ldr	r3, [pc, #268]	@ (80043d8 <HAL_RCC_OscConfig+0x8ac>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a42      	ldr	r2, [pc, #264]	@ (80043d8 <HAL_RCC_OscConfig+0x8ac>)
 80042ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d4:	f7fd fae8 	bl	80018a8 <HAL_GetTick>
 80042d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042dc:	f7fd fae4 	bl	80018a8 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e070      	b.n	80043d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042ee:	4b3a      	ldr	r3, [pc, #232]	@ (80043d8 <HAL_RCC_OscConfig+0x8ac>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f0      	bne.n	80042dc <HAL_RCC_OscConfig+0x7b0>
 80042fa:	e068      	b.n	80043ce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80042fc:	4b36      	ldr	r3, [pc, #216]	@ (80043d8 <HAL_RCC_OscConfig+0x8ac>)
 80042fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004300:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004302:	4b35      	ldr	r3, [pc, #212]	@ (80043d8 <HAL_RCC_OscConfig+0x8ac>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004306:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430c:	2b01      	cmp	r3, #1
 800430e:	d031      	beq.n	8004374 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f003 0203 	and.w	r2, r3, #3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800431a:	429a      	cmp	r2, r3
 800431c:	d12a      	bne.n	8004374 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	091b      	lsrs	r3, r3, #4
 8004322:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800432a:	429a      	cmp	r2, r3
 800432c:	d122      	bne.n	8004374 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004338:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800433a:	429a      	cmp	r2, r3
 800433c:	d11a      	bne.n	8004374 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	0a5b      	lsrs	r3, r3, #9
 8004342:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800434a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800434c:	429a      	cmp	r2, r3
 800434e:	d111      	bne.n	8004374 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	0c1b      	lsrs	r3, r3, #16
 8004354:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800435e:	429a      	cmp	r2, r3
 8004360:	d108      	bne.n	8004374 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	0e1b      	lsrs	r3, r3, #24
 8004366:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800436e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004370:	429a      	cmp	r2, r3
 8004372:	d001      	beq.n	8004378 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e02b      	b.n	80043d0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004378:	4b17      	ldr	r3, [pc, #92]	@ (80043d8 <HAL_RCC_OscConfig+0x8ac>)
 800437a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800437c:	08db      	lsrs	r3, r3, #3
 800437e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004382:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	429a      	cmp	r2, r3
 800438c:	d01f      	beq.n	80043ce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800438e:	4b12      	ldr	r3, [pc, #72]	@ (80043d8 <HAL_RCC_OscConfig+0x8ac>)
 8004390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004392:	4a11      	ldr	r2, [pc, #68]	@ (80043d8 <HAL_RCC_OscConfig+0x8ac>)
 8004394:	f023 0301 	bic.w	r3, r3, #1
 8004398:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800439a:	f7fd fa85 	bl	80018a8 <HAL_GetTick>
 800439e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80043a0:	bf00      	nop
 80043a2:	f7fd fa81 	bl	80018a8 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d0f9      	beq.n	80043a2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80043ae:	4b0a      	ldr	r3, [pc, #40]	@ (80043d8 <HAL_RCC_OscConfig+0x8ac>)
 80043b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043b2:	4b0a      	ldr	r3, [pc, #40]	@ (80043dc <HAL_RCC_OscConfig+0x8b0>)
 80043b4:	4013      	ands	r3, r2
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80043ba:	00d2      	lsls	r2, r2, #3
 80043bc:	4906      	ldr	r1, [pc, #24]	@ (80043d8 <HAL_RCC_OscConfig+0x8ac>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80043c2:	4b05      	ldr	r3, [pc, #20]	@ (80043d8 <HAL_RCC_OscConfig+0x8ac>)
 80043c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c6:	4a04      	ldr	r2, [pc, #16]	@ (80043d8 <HAL_RCC_OscConfig+0x8ac>)
 80043c8:	f043 0301 	orr.w	r3, r3, #1
 80043cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3730      	adds	r7, #48	@ 0x30
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	58024400 	.word	0x58024400
 80043dc:	ffff0007 	.word	0xffff0007

080043e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e19c      	b.n	800472e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043f4:	4b8a      	ldr	r3, [pc, #552]	@ (8004620 <HAL_RCC_ClockConfig+0x240>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 030f 	and.w	r3, r3, #15
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d910      	bls.n	8004424 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004402:	4b87      	ldr	r3, [pc, #540]	@ (8004620 <HAL_RCC_ClockConfig+0x240>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f023 020f 	bic.w	r2, r3, #15
 800440a:	4985      	ldr	r1, [pc, #532]	@ (8004620 <HAL_RCC_ClockConfig+0x240>)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	4313      	orrs	r3, r2
 8004410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004412:	4b83      	ldr	r3, [pc, #524]	@ (8004620 <HAL_RCC_ClockConfig+0x240>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d001      	beq.n	8004424 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e184      	b.n	800472e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d010      	beq.n	8004452 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691a      	ldr	r2, [r3, #16]
 8004434:	4b7b      	ldr	r3, [pc, #492]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800443c:	429a      	cmp	r2, r3
 800443e:	d908      	bls.n	8004452 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004440:	4b78      	ldr	r3, [pc, #480]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	4975      	ldr	r1, [pc, #468]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 800444e:	4313      	orrs	r3, r2
 8004450:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d010      	beq.n	8004480 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	695a      	ldr	r2, [r3, #20]
 8004462:	4b70      	ldr	r3, [pc, #448]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800446a:	429a      	cmp	r2, r3
 800446c:	d908      	bls.n	8004480 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800446e:	4b6d      	ldr	r3, [pc, #436]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	496a      	ldr	r1, [pc, #424]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 800447c:	4313      	orrs	r3, r2
 800447e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0310 	and.w	r3, r3, #16
 8004488:	2b00      	cmp	r3, #0
 800448a:	d010      	beq.n	80044ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699a      	ldr	r2, [r3, #24]
 8004490:	4b64      	ldr	r3, [pc, #400]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004498:	429a      	cmp	r2, r3
 800449a:	d908      	bls.n	80044ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800449c:	4b61      	ldr	r3, [pc, #388]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	495e      	ldr	r1, [pc, #376]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0320 	and.w	r3, r3, #32
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d010      	beq.n	80044dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69da      	ldr	r2, [r3, #28]
 80044be:	4b59      	ldr	r3, [pc, #356]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d908      	bls.n	80044dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80044ca:	4b56      	ldr	r3, [pc, #344]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	4953      	ldr	r1, [pc, #332]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d010      	beq.n	800450a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	4b4d      	ldr	r3, [pc, #308]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d908      	bls.n	800450a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044f8:	4b4a      	ldr	r3, [pc, #296]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	f023 020f 	bic.w	r2, r3, #15
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	4947      	ldr	r1, [pc, #284]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 8004506:	4313      	orrs	r3, r2
 8004508:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d055      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004516:	4b43      	ldr	r3, [pc, #268]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	4940      	ldr	r1, [pc, #256]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 8004524:	4313      	orrs	r3, r2
 8004526:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b02      	cmp	r3, #2
 800452e:	d107      	bne.n	8004540 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004530:	4b3c      	ldr	r3, [pc, #240]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d121      	bne.n	8004580 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0f6      	b.n	800472e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b03      	cmp	r3, #3
 8004546:	d107      	bne.n	8004558 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004548:	4b36      	ldr	r3, [pc, #216]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d115      	bne.n	8004580 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e0ea      	b.n	800472e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d107      	bne.n	8004570 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004560:	4b30      	ldr	r3, [pc, #192]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004568:	2b00      	cmp	r3, #0
 800456a:	d109      	bne.n	8004580 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0de      	b.n	800472e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004570:	4b2c      	ldr	r3, [pc, #176]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e0d6      	b.n	800472e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004580:	4b28      	ldr	r3, [pc, #160]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	f023 0207 	bic.w	r2, r3, #7
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	4925      	ldr	r1, [pc, #148]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 800458e:	4313      	orrs	r3, r2
 8004590:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004592:	f7fd f989 	bl	80018a8 <HAL_GetTick>
 8004596:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004598:	e00a      	b.n	80045b0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800459a:	f7fd f985 	bl	80018a8 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e0be      	b.n	800472e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	429a      	cmp	r2, r3
 80045c0:	d1eb      	bne.n	800459a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d010      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	4b14      	ldr	r3, [pc, #80]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	429a      	cmp	r2, r3
 80045dc:	d208      	bcs.n	80045f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045de:	4b11      	ldr	r3, [pc, #68]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	f023 020f 	bic.w	r2, r3, #15
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	490e      	ldr	r1, [pc, #56]	@ (8004624 <HAL_RCC_ClockConfig+0x244>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004620 <HAL_RCC_ClockConfig+0x240>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d214      	bcs.n	8004628 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fe:	4b08      	ldr	r3, [pc, #32]	@ (8004620 <HAL_RCC_ClockConfig+0x240>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f023 020f 	bic.w	r2, r3, #15
 8004606:	4906      	ldr	r1, [pc, #24]	@ (8004620 <HAL_RCC_ClockConfig+0x240>)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	4313      	orrs	r3, r2
 800460c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800460e:	4b04      	ldr	r3, [pc, #16]	@ (8004620 <HAL_RCC_ClockConfig+0x240>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	429a      	cmp	r2, r3
 800461a:	d005      	beq.n	8004628 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e086      	b.n	800472e <HAL_RCC_ClockConfig+0x34e>
 8004620:	52002000 	.word	0x52002000
 8004624:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b00      	cmp	r3, #0
 8004632:	d010      	beq.n	8004656 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	4b3f      	ldr	r3, [pc, #252]	@ (8004738 <HAL_RCC_ClockConfig+0x358>)
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004640:	429a      	cmp	r2, r3
 8004642:	d208      	bcs.n	8004656 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004644:	4b3c      	ldr	r3, [pc, #240]	@ (8004738 <HAL_RCC_ClockConfig+0x358>)
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	4939      	ldr	r1, [pc, #228]	@ (8004738 <HAL_RCC_ClockConfig+0x358>)
 8004652:	4313      	orrs	r3, r2
 8004654:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0308 	and.w	r3, r3, #8
 800465e:	2b00      	cmp	r3, #0
 8004660:	d010      	beq.n	8004684 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695a      	ldr	r2, [r3, #20]
 8004666:	4b34      	ldr	r3, [pc, #208]	@ (8004738 <HAL_RCC_ClockConfig+0x358>)
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800466e:	429a      	cmp	r2, r3
 8004670:	d208      	bcs.n	8004684 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004672:	4b31      	ldr	r3, [pc, #196]	@ (8004738 <HAL_RCC_ClockConfig+0x358>)
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	492e      	ldr	r1, [pc, #184]	@ (8004738 <HAL_RCC_ClockConfig+0x358>)
 8004680:	4313      	orrs	r3, r2
 8004682:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	2b00      	cmp	r3, #0
 800468e:	d010      	beq.n	80046b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699a      	ldr	r2, [r3, #24]
 8004694:	4b28      	ldr	r3, [pc, #160]	@ (8004738 <HAL_RCC_ClockConfig+0x358>)
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800469c:	429a      	cmp	r2, r3
 800469e:	d208      	bcs.n	80046b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80046a0:	4b25      	ldr	r3, [pc, #148]	@ (8004738 <HAL_RCC_ClockConfig+0x358>)
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	4922      	ldr	r1, [pc, #136]	@ (8004738 <HAL_RCC_ClockConfig+0x358>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0320 	and.w	r3, r3, #32
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d010      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69da      	ldr	r2, [r3, #28]
 80046c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004738 <HAL_RCC_ClockConfig+0x358>)
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d208      	bcs.n	80046e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80046ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004738 <HAL_RCC_ClockConfig+0x358>)
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	4917      	ldr	r1, [pc, #92]	@ (8004738 <HAL_RCC_ClockConfig+0x358>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80046e0:	f000 f834 	bl	800474c <HAL_RCC_GetSysClockFreq>
 80046e4:	4602      	mov	r2, r0
 80046e6:	4b14      	ldr	r3, [pc, #80]	@ (8004738 <HAL_RCC_ClockConfig+0x358>)
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	0a1b      	lsrs	r3, r3, #8
 80046ec:	f003 030f 	and.w	r3, r3, #15
 80046f0:	4912      	ldr	r1, [pc, #72]	@ (800473c <HAL_RCC_ClockConfig+0x35c>)
 80046f2:	5ccb      	ldrb	r3, [r1, r3]
 80046f4:	f003 031f 	and.w	r3, r3, #31
 80046f8:	fa22 f303 	lsr.w	r3, r2, r3
 80046fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004738 <HAL_RCC_ClockConfig+0x358>)
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	4a0d      	ldr	r2, [pc, #52]	@ (800473c <HAL_RCC_ClockConfig+0x35c>)
 8004708:	5cd3      	ldrb	r3, [r2, r3]
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	fa22 f303 	lsr.w	r3, r2, r3
 8004714:	4a0a      	ldr	r2, [pc, #40]	@ (8004740 <HAL_RCC_ClockConfig+0x360>)
 8004716:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004718:	4a0a      	ldr	r2, [pc, #40]	@ (8004744 <HAL_RCC_ClockConfig+0x364>)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800471e:	4b0a      	ldr	r3, [pc, #40]	@ (8004748 <HAL_RCC_ClockConfig+0x368>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f7fc fbf8 	bl	8000f18 <HAL_InitTick>
 8004728:	4603      	mov	r3, r0
 800472a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800472c:	7bfb      	ldrb	r3, [r7, #15]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	58024400 	.word	0x58024400
 800473c:	08014444 	.word	0x08014444
 8004740:	24000004 	.word	0x24000004
 8004744:	24000000 	.word	0x24000000
 8004748:	24000008 	.word	0x24000008

0800474c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800474c:	b480      	push	{r7}
 800474e:	b089      	sub	sp, #36	@ 0x24
 8004750:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004752:	4bb3      	ldr	r3, [pc, #716]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800475a:	2b18      	cmp	r3, #24
 800475c:	f200 8155 	bhi.w	8004a0a <HAL_RCC_GetSysClockFreq+0x2be>
 8004760:	a201      	add	r2, pc, #4	@ (adr r2, 8004768 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004766:	bf00      	nop
 8004768:	080047cd 	.word	0x080047cd
 800476c:	08004a0b 	.word	0x08004a0b
 8004770:	08004a0b 	.word	0x08004a0b
 8004774:	08004a0b 	.word	0x08004a0b
 8004778:	08004a0b 	.word	0x08004a0b
 800477c:	08004a0b 	.word	0x08004a0b
 8004780:	08004a0b 	.word	0x08004a0b
 8004784:	08004a0b 	.word	0x08004a0b
 8004788:	080047f3 	.word	0x080047f3
 800478c:	08004a0b 	.word	0x08004a0b
 8004790:	08004a0b 	.word	0x08004a0b
 8004794:	08004a0b 	.word	0x08004a0b
 8004798:	08004a0b 	.word	0x08004a0b
 800479c:	08004a0b 	.word	0x08004a0b
 80047a0:	08004a0b 	.word	0x08004a0b
 80047a4:	08004a0b 	.word	0x08004a0b
 80047a8:	080047f9 	.word	0x080047f9
 80047ac:	08004a0b 	.word	0x08004a0b
 80047b0:	08004a0b 	.word	0x08004a0b
 80047b4:	08004a0b 	.word	0x08004a0b
 80047b8:	08004a0b 	.word	0x08004a0b
 80047bc:	08004a0b 	.word	0x08004a0b
 80047c0:	08004a0b 	.word	0x08004a0b
 80047c4:	08004a0b 	.word	0x08004a0b
 80047c8:	080047ff 	.word	0x080047ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047cc:	4b94      	ldr	r3, [pc, #592]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0320 	and.w	r3, r3, #32
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d009      	beq.n	80047ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047d8:	4b91      	ldr	r3, [pc, #580]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	08db      	lsrs	r3, r3, #3
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	4a90      	ldr	r2, [pc, #576]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047e4:	fa22 f303 	lsr.w	r3, r2, r3
 80047e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80047ea:	e111      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80047ec:	4b8d      	ldr	r3, [pc, #564]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047ee:	61bb      	str	r3, [r7, #24]
      break;
 80047f0:	e10e      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80047f2:	4b8d      	ldr	r3, [pc, #564]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80047f4:	61bb      	str	r3, [r7, #24]
      break;
 80047f6:	e10b      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80047f8:	4b8c      	ldr	r3, [pc, #560]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80047fa:	61bb      	str	r3, [r7, #24]
      break;
 80047fc:	e108      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047fe:	4b88      	ldr	r3, [pc, #544]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004808:	4b85      	ldr	r3, [pc, #532]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800480a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480c:	091b      	lsrs	r3, r3, #4
 800480e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004812:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004814:	4b82      	ldr	r3, [pc, #520]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800481e:	4b80      	ldr	r3, [pc, #512]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004822:	08db      	lsrs	r3, r3, #3
 8004824:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	fb02 f303 	mul.w	r3, r2, r3
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004836:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 80e1 	beq.w	8004a04 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b02      	cmp	r3, #2
 8004846:	f000 8083 	beq.w	8004950 <HAL_RCC_GetSysClockFreq+0x204>
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2b02      	cmp	r3, #2
 800484e:	f200 80a1 	bhi.w	8004994 <HAL_RCC_GetSysClockFreq+0x248>
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_RCC_GetSysClockFreq+0x114>
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d056      	beq.n	800490c <HAL_RCC_GetSysClockFreq+0x1c0>
 800485e:	e099      	b.n	8004994 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004860:	4b6f      	ldr	r3, [pc, #444]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0320 	and.w	r3, r3, #32
 8004868:	2b00      	cmp	r3, #0
 800486a:	d02d      	beq.n	80048c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800486c:	4b6c      	ldr	r3, [pc, #432]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	08db      	lsrs	r3, r3, #3
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	4a6b      	ldr	r2, [pc, #428]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
 800487c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	ee07 3a90 	vmov	s15, r3
 8004884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	ee07 3a90 	vmov	s15, r3
 800488e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004896:	4b62      	ldr	r3, [pc, #392]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80048aa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004a30 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80048c6:	e087      	b.n	80049d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004a34 <HAL_RCC_GetSysClockFreq+0x2e8>
 80048d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048da:	4b51      	ldr	r3, [pc, #324]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80048ee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004a30 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004906:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800490a:	e065      	b.n	80049d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004916:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004a38 <HAL_RCC_GetSysClockFreq+0x2ec>
 800491a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800491e:	4b40      	ldr	r3, [pc, #256]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800492e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004932:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004a30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800493a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800493e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800494a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800494e:	e043      	b.n	80049d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004a3c <HAL_RCC_GetSysClockFreq+0x2f0>
 800495e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004962:	4b2f      	ldr	r3, [pc, #188]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004972:	ed97 6a02 	vldr	s12, [r7, #8]
 8004976:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004a30 <HAL_RCC_GetSysClockFreq+0x2e4>
 800497a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800497e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800498a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800498e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004992:	e021      	b.n	80049d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	ee07 3a90 	vmov	s15, r3
 800499a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004a38 <HAL_RCC_GetSysClockFreq+0x2ec>
 80049a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ae:	ee07 3a90 	vmov	s15, r3
 80049b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80049ba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004a30 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80049d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80049d8:	4b11      	ldr	r3, [pc, #68]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049dc:	0a5b      	lsrs	r3, r3, #9
 80049de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049e2:	3301      	adds	r3, #1
 80049e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	ee07 3a90 	vmov	s15, r3
 80049ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80049f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049fc:	ee17 3a90 	vmov	r3, s15
 8004a00:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004a02:	e005      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	61bb      	str	r3, [r7, #24]
      break;
 8004a08:	e002      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004a0a:	4b07      	ldr	r3, [pc, #28]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a0c:	61bb      	str	r3, [r7, #24]
      break;
 8004a0e:	bf00      	nop
  }

  return sysclockfreq;
 8004a10:	69bb      	ldr	r3, [r7, #24]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3724      	adds	r7, #36	@ 0x24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	58024400 	.word	0x58024400
 8004a24:	03d09000 	.word	0x03d09000
 8004a28:	003d0900 	.word	0x003d0900
 8004a2c:	007a1200 	.word	0x007a1200
 8004a30:	46000000 	.word	0x46000000
 8004a34:	4c742400 	.word	0x4c742400
 8004a38:	4a742400 	.word	0x4a742400
 8004a3c:	4af42400 	.word	0x4af42400

08004a40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004a46:	f7ff fe81 	bl	800474c <HAL_RCC_GetSysClockFreq>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	4b10      	ldr	r3, [pc, #64]	@ (8004a90 <HAL_RCC_GetHCLKFreq+0x50>)
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	0a1b      	lsrs	r3, r3, #8
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	490f      	ldr	r1, [pc, #60]	@ (8004a94 <HAL_RCC_GetHCLKFreq+0x54>)
 8004a58:	5ccb      	ldrb	r3, [r1, r3]
 8004a5a:	f003 031f 	and.w	r3, r3, #31
 8004a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a62:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a64:	4b0a      	ldr	r3, [pc, #40]	@ (8004a90 <HAL_RCC_GetHCLKFreq+0x50>)
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	f003 030f 	and.w	r3, r3, #15
 8004a6c:	4a09      	ldr	r2, [pc, #36]	@ (8004a94 <HAL_RCC_GetHCLKFreq+0x54>)
 8004a6e:	5cd3      	ldrb	r3, [r2, r3]
 8004a70:	f003 031f 	and.w	r3, r3, #31
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	fa22 f303 	lsr.w	r3, r2, r3
 8004a7a:	4a07      	ldr	r2, [pc, #28]	@ (8004a98 <HAL_RCC_GetHCLKFreq+0x58>)
 8004a7c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a7e:	4a07      	ldr	r2, [pc, #28]	@ (8004a9c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004a84:	4b04      	ldr	r3, [pc, #16]	@ (8004a98 <HAL_RCC_GetHCLKFreq+0x58>)
 8004a86:	681b      	ldr	r3, [r3, #0]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	58024400 	.word	0x58024400
 8004a94:	08014444 	.word	0x08014444
 8004a98:	24000004 	.word	0x24000004
 8004a9c:	24000000 	.word	0x24000000

08004aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004aa4:	f7ff ffcc 	bl	8004a40 <HAL_RCC_GetHCLKFreq>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	4b06      	ldr	r3, [pc, #24]	@ (8004ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	091b      	lsrs	r3, r3, #4
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	4904      	ldr	r1, [pc, #16]	@ (8004ac8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ab6:	5ccb      	ldrb	r3, [r1, r3]
 8004ab8:	f003 031f 	and.w	r3, r3, #31
 8004abc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	58024400 	.word	0x58024400
 8004ac8:	08014444 	.word	0x08014444

08004acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004ad0:	f7ff ffb6 	bl	8004a40 <HAL_RCC_GetHCLKFreq>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	4b06      	ldr	r3, [pc, #24]	@ (8004af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	0a1b      	lsrs	r3, r3, #8
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	4904      	ldr	r1, [pc, #16]	@ (8004af4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ae2:	5ccb      	ldrb	r3, [r1, r3]
 8004ae4:	f003 031f 	and.w	r3, r3, #31
 8004ae8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	58024400 	.word	0x58024400
 8004af4:	08014444 	.word	0x08014444

08004af8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	223f      	movs	r2, #63	@ 0x3f
 8004b06:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b08:	4b1a      	ldr	r3, [pc, #104]	@ (8004b74 <HAL_RCC_GetClockConfig+0x7c>)
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	f003 0207 	and.w	r2, r3, #7
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004b14:	4b17      	ldr	r3, [pc, #92]	@ (8004b74 <HAL_RCC_GetClockConfig+0x7c>)
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004b20:	4b14      	ldr	r3, [pc, #80]	@ (8004b74 <HAL_RCC_GetClockConfig+0x7c>)
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	f003 020f 	and.w	r2, r3, #15
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004b2c:	4b11      	ldr	r3, [pc, #68]	@ (8004b74 <HAL_RCC_GetClockConfig+0x7c>)
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004b38:	4b0e      	ldr	r3, [pc, #56]	@ (8004b74 <HAL_RCC_GetClockConfig+0x7c>)
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004b44:	4b0b      	ldr	r3, [pc, #44]	@ (8004b74 <HAL_RCC_GetClockConfig+0x7c>)
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004b50:	4b08      	ldr	r3, [pc, #32]	@ (8004b74 <HAL_RCC_GetClockConfig+0x7c>)
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b5c:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <HAL_RCC_GetClockConfig+0x80>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 020f 	and.w	r2, r3, #15
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	601a      	str	r2, [r3, #0]
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	58024400 	.word	0x58024400
 8004b78:	52002000 	.word	0x52002000

08004b7c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b80:	b0ca      	sub	sp, #296	@ 0x128
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004ba0:	2500      	movs	r5, #0
 8004ba2:	ea54 0305 	orrs.w	r3, r4, r5
 8004ba6:	d049      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004bb2:	d02f      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004bb4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004bb8:	d828      	bhi.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004bba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004bbe:	d01a      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004bc0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004bc4:	d822      	bhi.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004bca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bce:	d007      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004bd0:	e01c      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bd2:	4bb8      	ldr	r3, [pc, #736]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd6:	4ab7      	ldr	r2, [pc, #732]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004bde:	e01a      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be4:	3308      	adds	r3, #8
 8004be6:	2102      	movs	r1, #2
 8004be8:	4618      	mov	r0, r3
 8004bea:	f001 fc8f 	bl	800650c <RCCEx_PLL2_Config>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004bf4:	e00f      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfa:	3328      	adds	r3, #40	@ 0x28
 8004bfc:	2102      	movs	r1, #2
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f001 fd36 	bl	8006670 <RCCEx_PLL3_Config>
 8004c04:	4603      	mov	r3, r0
 8004c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004c0a:	e004      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c12:	e000      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10a      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004c1e:	4ba5      	ldr	r3, [pc, #660]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c22:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c2c:	4aa1      	ldr	r2, [pc, #644]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c2e:	430b      	orrs	r3, r1
 8004c30:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c32:	e003      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c44:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004c48:	f04f 0900 	mov.w	r9, #0
 8004c4c:	ea58 0309 	orrs.w	r3, r8, r9
 8004c50:	d047      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d82a      	bhi.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c64 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c62:	bf00      	nop
 8004c64:	08004c79 	.word	0x08004c79
 8004c68:	08004c87 	.word	0x08004c87
 8004c6c:	08004c9d 	.word	0x08004c9d
 8004c70:	08004cbb 	.word	0x08004cbb
 8004c74:	08004cbb 	.word	0x08004cbb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c78:	4b8e      	ldr	r3, [pc, #568]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7c:	4a8d      	ldr	r2, [pc, #564]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c84:	e01a      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c8a:	3308      	adds	r3, #8
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f001 fc3c 	bl	800650c <RCCEx_PLL2_Config>
 8004c94:	4603      	mov	r3, r0
 8004c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c9a:	e00f      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca0:	3328      	adds	r3, #40	@ 0x28
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f001 fce3 	bl	8006670 <RCCEx_PLL3_Config>
 8004caa:	4603      	mov	r3, r0
 8004cac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cb0:	e004      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cb8:	e000      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004cba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10a      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cc4:	4b7b      	ldr	r3, [pc, #492]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cc8:	f023 0107 	bic.w	r1, r3, #7
 8004ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd2:	4a78      	ldr	r2, [pc, #480]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cd8:	e003      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cea:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004cee:	f04f 0b00 	mov.w	fp, #0
 8004cf2:	ea5a 030b 	orrs.w	r3, sl, fp
 8004cf6:	d04c      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d02:	d030      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004d04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d08:	d829      	bhi.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004d0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d0c:	d02d      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004d0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d10:	d825      	bhi.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004d12:	2b80      	cmp	r3, #128	@ 0x80
 8004d14:	d018      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004d16:	2b80      	cmp	r3, #128	@ 0x80
 8004d18:	d821      	bhi.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004d1e:	2b40      	cmp	r3, #64	@ 0x40
 8004d20:	d007      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004d22:	e01c      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d24:	4b63      	ldr	r3, [pc, #396]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d28:	4a62      	ldr	r2, [pc, #392]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004d30:	e01c      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d36:	3308      	adds	r3, #8
 8004d38:	2100      	movs	r1, #0
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f001 fbe6 	bl	800650c <RCCEx_PLL2_Config>
 8004d40:	4603      	mov	r3, r0
 8004d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004d46:	e011      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d4c:	3328      	adds	r3, #40	@ 0x28
 8004d4e:	2100      	movs	r1, #0
 8004d50:	4618      	mov	r0, r3
 8004d52:	f001 fc8d 	bl	8006670 <RCCEx_PLL3_Config>
 8004d56:	4603      	mov	r3, r0
 8004d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004d5c:	e006      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d64:	e002      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004d66:	bf00      	nop
 8004d68:	e000      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004d6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10a      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004d74:	4b4f      	ldr	r3, [pc, #316]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d78:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d82:	4a4c      	ldr	r2, [pc, #304]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d84:	430b      	orrs	r3, r1
 8004d86:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d88:	e003      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004d9e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004da2:	2300      	movs	r3, #0
 8004da4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004da8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004dac:	460b      	mov	r3, r1
 8004dae:	4313      	orrs	r3, r2
 8004db0:	d053      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004dba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004dbe:	d035      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004dc0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004dc4:	d82e      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004dc6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004dca:	d031      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004dcc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004dd0:	d828      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004dd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dd6:	d01a      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004dd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ddc:	d822      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004de2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004de6:	d007      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004de8:	e01c      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dea:	4b32      	ldr	r3, [pc, #200]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dee:	4a31      	ldr	r2, [pc, #196]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004df6:	e01c      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dfc:	3308      	adds	r3, #8
 8004dfe:	2100      	movs	r1, #0
 8004e00:	4618      	mov	r0, r3
 8004e02:	f001 fb83 	bl	800650c <RCCEx_PLL2_Config>
 8004e06:	4603      	mov	r3, r0
 8004e08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004e0c:	e011      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e12:	3328      	adds	r3, #40	@ 0x28
 8004e14:	2100      	movs	r1, #0
 8004e16:	4618      	mov	r0, r3
 8004e18:	f001 fc2a 	bl	8006670 <RCCEx_PLL3_Config>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e22:	e006      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e2a:	e002      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004e2c:	bf00      	nop
 8004e2e:	e000      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10b      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e3e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004e4a:	4a1a      	ldr	r2, [pc, #104]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e50:	e003      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e62:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004e66:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004e70:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004e74:	460b      	mov	r3, r1
 8004e76:	4313      	orrs	r3, r2
 8004e78:	d056      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004e82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e86:	d038      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004e88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e8c:	d831      	bhi.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004e8e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004e92:	d034      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004e94:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004e98:	d82b      	bhi.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004e9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e9e:	d01d      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004ea0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ea4:	d825      	bhi.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d006      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004eaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004eae:	d00a      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004eb0:	e01f      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004eb2:	bf00      	nop
 8004eb4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eb8:	4ba2      	ldr	r3, [pc, #648]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ebc:	4aa1      	ldr	r2, [pc, #644]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ebe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ec2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ec4:	e01c      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eca:	3308      	adds	r3, #8
 8004ecc:	2100      	movs	r1, #0
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f001 fb1c 	bl	800650c <RCCEx_PLL2_Config>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004eda:	e011      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee0:	3328      	adds	r3, #40	@ 0x28
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f001 fbc3 	bl	8006670 <RCCEx_PLL3_Config>
 8004eea:	4603      	mov	r3, r0
 8004eec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ef0:	e006      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ef8:	e002      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004efa:	bf00      	nop
 8004efc:	e000      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004efe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10b      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004f08:	4b8e      	ldr	r3, [pc, #568]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f0c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004f18:	4a8a      	ldr	r2, [pc, #552]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f1a:	430b      	orrs	r3, r1
 8004f1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f1e:	e003      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f30:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004f34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004f3e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004f42:	460b      	mov	r3, r1
 8004f44:	4313      	orrs	r3, r2
 8004f46:	d03a      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f4e:	2b30      	cmp	r3, #48	@ 0x30
 8004f50:	d01f      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004f52:	2b30      	cmp	r3, #48	@ 0x30
 8004f54:	d819      	bhi.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004f56:	2b20      	cmp	r3, #32
 8004f58:	d00c      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004f5a:	2b20      	cmp	r3, #32
 8004f5c:	d815      	bhi.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d019      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004f62:	2b10      	cmp	r3, #16
 8004f64:	d111      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f66:	4b77      	ldr	r3, [pc, #476]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6a:	4a76      	ldr	r2, [pc, #472]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004f72:	e011      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f78:	3308      	adds	r3, #8
 8004f7a:	2102      	movs	r1, #2
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f001 fac5 	bl	800650c <RCCEx_PLL2_Config>
 8004f82:	4603      	mov	r3, r0
 8004f84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004f88:	e006      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f90:	e002      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004f92:	bf00      	nop
 8004f94:	e000      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004f96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10a      	bne.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004fa0:	4b68      	ldr	r3, [pc, #416]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fa4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fae:	4a65      	ldr	r2, [pc, #404]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fb0:	430b      	orrs	r3, r1
 8004fb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004fb4:	e003      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004fca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004fce:	2300      	movs	r3, #0
 8004fd0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004fd4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	d051      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fe4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fe8:	d035      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004fea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fee:	d82e      	bhi.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ff0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ff4:	d031      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004ff6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ffa:	d828      	bhi.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ffc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005000:	d01a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005002:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005006:	d822      	bhi.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800500c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005010:	d007      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005012:	e01c      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005014:	4b4b      	ldr	r3, [pc, #300]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005018:	4a4a      	ldr	r2, [pc, #296]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800501a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800501e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005020:	e01c      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005026:	3308      	adds	r3, #8
 8005028:	2100      	movs	r1, #0
 800502a:	4618      	mov	r0, r3
 800502c:	f001 fa6e 	bl	800650c <RCCEx_PLL2_Config>
 8005030:	4603      	mov	r3, r0
 8005032:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005036:	e011      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800503c:	3328      	adds	r3, #40	@ 0x28
 800503e:	2100      	movs	r1, #0
 8005040:	4618      	mov	r0, r3
 8005042:	f001 fb15 	bl	8006670 <RCCEx_PLL3_Config>
 8005046:	4603      	mov	r3, r0
 8005048:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800504c:	e006      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005054:	e002      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005056:	bf00      	nop
 8005058:	e000      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800505a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800505c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10a      	bne.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005064:	4b37      	ldr	r3, [pc, #220]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005068:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800506c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005072:	4a34      	ldr	r2, [pc, #208]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005074:	430b      	orrs	r3, r1
 8005076:	6513      	str	r3, [r2, #80]	@ 0x50
 8005078:	e003      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800507a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800507e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800508e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005092:	2300      	movs	r3, #0
 8005094:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005098:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800509c:	460b      	mov	r3, r1
 800509e:	4313      	orrs	r3, r2
 80050a0:	d056      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80050a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050ac:	d033      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80050ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050b2:	d82c      	bhi.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80050b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80050b8:	d02f      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80050ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80050be:	d826      	bhi.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80050c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80050c4:	d02b      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80050c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80050ca:	d820      	bhi.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80050cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050d0:	d012      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80050d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050d6:	d81a      	bhi.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d022      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80050dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050e0:	d115      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e6:	3308      	adds	r3, #8
 80050e8:	2101      	movs	r1, #1
 80050ea:	4618      	mov	r0, r3
 80050ec:	f001 fa0e 	bl	800650c <RCCEx_PLL2_Config>
 80050f0:	4603      	mov	r3, r0
 80050f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80050f6:	e015      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050fc:	3328      	adds	r3, #40	@ 0x28
 80050fe:	2101      	movs	r1, #1
 8005100:	4618      	mov	r0, r3
 8005102:	f001 fab5 	bl	8006670 <RCCEx_PLL3_Config>
 8005106:	4603      	mov	r3, r0
 8005108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800510c:	e00a      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005114:	e006      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005116:	bf00      	nop
 8005118:	e004      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800511a:	bf00      	nop
 800511c:	e002      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800511e:	bf00      	nop
 8005120:	e000      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005122:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10d      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800512c:	4b05      	ldr	r3, [pc, #20]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800512e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005130:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005138:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800513a:	4a02      	ldr	r2, [pc, #8]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800513c:	430b      	orrs	r3, r1
 800513e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005140:	e006      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005142:	bf00      	nop
 8005144:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005148:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800514c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005158:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800515c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005160:	2300      	movs	r3, #0
 8005162:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005166:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800516a:	460b      	mov	r3, r1
 800516c:	4313      	orrs	r3, r2
 800516e:	d055      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005174:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005178:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800517c:	d033      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800517e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005182:	d82c      	bhi.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005188:	d02f      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800518a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800518e:	d826      	bhi.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005190:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005194:	d02b      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005196:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800519a:	d820      	bhi.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x662>
 800519c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051a0:	d012      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80051a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051a6:	d81a      	bhi.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x662>
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d022      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80051ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051b0:	d115      	bne.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b6:	3308      	adds	r3, #8
 80051b8:	2101      	movs	r1, #1
 80051ba:	4618      	mov	r0, r3
 80051bc:	f001 f9a6 	bl	800650c <RCCEx_PLL2_Config>
 80051c0:	4603      	mov	r3, r0
 80051c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80051c6:	e015      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051cc:	3328      	adds	r3, #40	@ 0x28
 80051ce:	2101      	movs	r1, #1
 80051d0:	4618      	mov	r0, r3
 80051d2:	f001 fa4d 	bl	8006670 <RCCEx_PLL3_Config>
 80051d6:	4603      	mov	r3, r0
 80051d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80051dc:	e00a      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051e4:	e006      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80051e6:	bf00      	nop
 80051e8:	e004      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80051ea:	bf00      	nop
 80051ec:	e002      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80051ee:	bf00      	nop
 80051f0:	e000      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80051f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10b      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80051fc:	4ba3      	ldr	r3, [pc, #652]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005200:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005208:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800520c:	4a9f      	ldr	r2, [pc, #636]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800520e:	430b      	orrs	r3, r1
 8005210:	6593      	str	r3, [r2, #88]	@ 0x58
 8005212:	e003      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005214:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005218:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800521c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005224:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005228:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800522c:	2300      	movs	r3, #0
 800522e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005232:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005236:	460b      	mov	r3, r1
 8005238:	4313      	orrs	r3, r2
 800523a:	d037      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800523c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005242:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005246:	d00e      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005248:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800524c:	d816      	bhi.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800524e:	2b00      	cmp	r3, #0
 8005250:	d018      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005252:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005256:	d111      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005258:	4b8c      	ldr	r3, [pc, #560]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800525a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525c:	4a8b      	ldr	r2, [pc, #556]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800525e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005262:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005264:	e00f      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800526a:	3308      	adds	r3, #8
 800526c:	2101      	movs	r1, #1
 800526e:	4618      	mov	r0, r3
 8005270:	f001 f94c 	bl	800650c <RCCEx_PLL2_Config>
 8005274:	4603      	mov	r3, r0
 8005276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800527a:	e004      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005282:	e000      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005286:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10a      	bne.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800528e:	4b7f      	ldr	r3, [pc, #508]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005292:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800529c:	4a7b      	ldr	r2, [pc, #492]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800529e:	430b      	orrs	r3, r1
 80052a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80052a2:	e003      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80052ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80052b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052bc:	2300      	movs	r3, #0
 80052be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80052c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4313      	orrs	r3, r2
 80052ca:	d039      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80052cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	d81c      	bhi.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80052d6:	a201      	add	r2, pc, #4	@ (adr r2, 80052dc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80052d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052dc:	08005319 	.word	0x08005319
 80052e0:	080052ed 	.word	0x080052ed
 80052e4:	080052fb 	.word	0x080052fb
 80052e8:	08005319 	.word	0x08005319
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052ec:	4b67      	ldr	r3, [pc, #412]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f0:	4a66      	ldr	r2, [pc, #408]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80052f8:	e00f      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052fe:	3308      	adds	r3, #8
 8005300:	2102      	movs	r1, #2
 8005302:	4618      	mov	r0, r3
 8005304:	f001 f902 	bl	800650c <RCCEx_PLL2_Config>
 8005308:	4603      	mov	r3, r0
 800530a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800530e:	e004      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005316:	e000      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800531a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10a      	bne.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005322:	4b5a      	ldr	r3, [pc, #360]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005326:	f023 0103 	bic.w	r1, r3, #3
 800532a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800532e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005330:	4a56      	ldr	r2, [pc, #344]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005332:	430b      	orrs	r3, r1
 8005334:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005336:	e003      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005338:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800533c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005348:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800534c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005350:	2300      	movs	r3, #0
 8005352:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005356:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800535a:	460b      	mov	r3, r1
 800535c:	4313      	orrs	r3, r2
 800535e:	f000 809f 	beq.w	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005362:	4b4b      	ldr	r3, [pc, #300]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a4a      	ldr	r2, [pc, #296]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800536c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800536e:	f7fc fa9b 	bl	80018a8 <HAL_GetTick>
 8005372:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005376:	e00b      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005378:	f7fc fa96 	bl	80018a8 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b64      	cmp	r3, #100	@ 0x64
 8005386:	d903      	bls.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800538e:	e005      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005390:	4b3f      	ldr	r3, [pc, #252]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0ed      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800539c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d179      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80053a4:	4b39      	ldr	r3, [pc, #228]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80053a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053b0:	4053      	eors	r3, r2
 80053b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d015      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053ba:	4b34      	ldr	r3, [pc, #208]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053c2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053c6:	4b31      	ldr	r3, [pc, #196]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ca:	4a30      	ldr	r2, [pc, #192]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053d0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053d2:	4b2e      	ldr	r3, [pc, #184]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d6:	4a2d      	ldr	r2, [pc, #180]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053dc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80053de:	4a2b      	ldr	r2, [pc, #172]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053e4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80053e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053f2:	d118      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f4:	f7fc fa58 	bl	80018a8 <HAL_GetTick>
 80053f8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053fc:	e00d      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053fe:	f7fc fa53 	bl	80018a8 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005408:	1ad2      	subs	r2, r2, r3
 800540a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800540e:	429a      	cmp	r2, r3
 8005410:	d903      	bls.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005418:	e005      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800541a:	4b1c      	ldr	r3, [pc, #112]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800541c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d0eb      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005426:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800542a:	2b00      	cmp	r3, #0
 800542c:	d129      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800542e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005432:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800543a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800543e:	d10e      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005440:	4b12      	ldr	r3, [pc, #72]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800544c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005450:	091a      	lsrs	r2, r3, #4
 8005452:	4b10      	ldr	r3, [pc, #64]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005454:	4013      	ands	r3, r2
 8005456:	4a0d      	ldr	r2, [pc, #52]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005458:	430b      	orrs	r3, r1
 800545a:	6113      	str	r3, [r2, #16]
 800545c:	e005      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800545e:	4b0b      	ldr	r3, [pc, #44]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	4a0a      	ldr	r2, [pc, #40]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005464:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005468:	6113      	str	r3, [r2, #16]
 800546a:	4b08      	ldr	r3, [pc, #32]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800546c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800546e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005472:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800547a:	4a04      	ldr	r2, [pc, #16]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800547c:	430b      	orrs	r3, r1
 800547e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005480:	e00e      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005486:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800548a:	e009      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800548c:	58024400 	.word	0x58024400
 8005490:	58024800 	.word	0x58024800
 8005494:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005498:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800549c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80054a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a8:	f002 0301 	and.w	r3, r2, #1
 80054ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054b0:	2300      	movs	r3, #0
 80054b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80054b6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80054ba:	460b      	mov	r3, r1
 80054bc:	4313      	orrs	r3, r2
 80054be:	f000 8089 	beq.w	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80054c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054c8:	2b28      	cmp	r3, #40	@ 0x28
 80054ca:	d86b      	bhi.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80054cc:	a201      	add	r2, pc, #4	@ (adr r2, 80054d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80054ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d2:	bf00      	nop
 80054d4:	080055ad 	.word	0x080055ad
 80054d8:	080055a5 	.word	0x080055a5
 80054dc:	080055a5 	.word	0x080055a5
 80054e0:	080055a5 	.word	0x080055a5
 80054e4:	080055a5 	.word	0x080055a5
 80054e8:	080055a5 	.word	0x080055a5
 80054ec:	080055a5 	.word	0x080055a5
 80054f0:	080055a5 	.word	0x080055a5
 80054f4:	08005579 	.word	0x08005579
 80054f8:	080055a5 	.word	0x080055a5
 80054fc:	080055a5 	.word	0x080055a5
 8005500:	080055a5 	.word	0x080055a5
 8005504:	080055a5 	.word	0x080055a5
 8005508:	080055a5 	.word	0x080055a5
 800550c:	080055a5 	.word	0x080055a5
 8005510:	080055a5 	.word	0x080055a5
 8005514:	0800558f 	.word	0x0800558f
 8005518:	080055a5 	.word	0x080055a5
 800551c:	080055a5 	.word	0x080055a5
 8005520:	080055a5 	.word	0x080055a5
 8005524:	080055a5 	.word	0x080055a5
 8005528:	080055a5 	.word	0x080055a5
 800552c:	080055a5 	.word	0x080055a5
 8005530:	080055a5 	.word	0x080055a5
 8005534:	080055ad 	.word	0x080055ad
 8005538:	080055a5 	.word	0x080055a5
 800553c:	080055a5 	.word	0x080055a5
 8005540:	080055a5 	.word	0x080055a5
 8005544:	080055a5 	.word	0x080055a5
 8005548:	080055a5 	.word	0x080055a5
 800554c:	080055a5 	.word	0x080055a5
 8005550:	080055a5 	.word	0x080055a5
 8005554:	080055ad 	.word	0x080055ad
 8005558:	080055a5 	.word	0x080055a5
 800555c:	080055a5 	.word	0x080055a5
 8005560:	080055a5 	.word	0x080055a5
 8005564:	080055a5 	.word	0x080055a5
 8005568:	080055a5 	.word	0x080055a5
 800556c:	080055a5 	.word	0x080055a5
 8005570:	080055a5 	.word	0x080055a5
 8005574:	080055ad 	.word	0x080055ad
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800557c:	3308      	adds	r3, #8
 800557e:	2101      	movs	r1, #1
 8005580:	4618      	mov	r0, r3
 8005582:	f000 ffc3 	bl	800650c <RCCEx_PLL2_Config>
 8005586:	4603      	mov	r3, r0
 8005588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800558c:	e00f      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800558e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005592:	3328      	adds	r3, #40	@ 0x28
 8005594:	2101      	movs	r1, #1
 8005596:	4618      	mov	r0, r3
 8005598:	f001 f86a 	bl	8006670 <RCCEx_PLL3_Config>
 800559c:	4603      	mov	r3, r0
 800559e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80055a2:	e004      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055aa:	e000      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80055ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10a      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80055b6:	4bbf      	ldr	r3, [pc, #764]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80055be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055c4:	4abb      	ldr	r2, [pc, #748]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055c6:	430b      	orrs	r3, r1
 80055c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80055ca:	e003      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80055d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055dc:	f002 0302 	and.w	r3, r2, #2
 80055e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055e4:	2300      	movs	r3, #0
 80055e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80055ea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80055ee:	460b      	mov	r3, r1
 80055f0:	4313      	orrs	r3, r2
 80055f2:	d041      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80055f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055fa:	2b05      	cmp	r3, #5
 80055fc:	d824      	bhi.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80055fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005604 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005604:	08005651 	.word	0x08005651
 8005608:	0800561d 	.word	0x0800561d
 800560c:	08005633 	.word	0x08005633
 8005610:	08005651 	.word	0x08005651
 8005614:	08005651 	.word	0x08005651
 8005618:	08005651 	.word	0x08005651
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800561c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005620:	3308      	adds	r3, #8
 8005622:	2101      	movs	r1, #1
 8005624:	4618      	mov	r0, r3
 8005626:	f000 ff71 	bl	800650c <RCCEx_PLL2_Config>
 800562a:	4603      	mov	r3, r0
 800562c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005630:	e00f      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005636:	3328      	adds	r3, #40	@ 0x28
 8005638:	2101      	movs	r1, #1
 800563a:	4618      	mov	r0, r3
 800563c:	f001 f818 	bl	8006670 <RCCEx_PLL3_Config>
 8005640:	4603      	mov	r3, r0
 8005642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005646:	e004      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800564e:	e000      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10a      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800565a:	4b96      	ldr	r3, [pc, #600]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800565c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800565e:	f023 0107 	bic.w	r1, r3, #7
 8005662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005666:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005668:	4a92      	ldr	r2, [pc, #584]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800566a:	430b      	orrs	r3, r1
 800566c:	6553      	str	r3, [r2, #84]	@ 0x54
 800566e:	e003      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005670:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005674:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005680:	f002 0304 	and.w	r3, r2, #4
 8005684:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005688:	2300      	movs	r3, #0
 800568a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800568e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005692:	460b      	mov	r3, r1
 8005694:	4313      	orrs	r3, r2
 8005696:	d044      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800569c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056a0:	2b05      	cmp	r3, #5
 80056a2:	d825      	bhi.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80056a4:	a201      	add	r2, pc, #4	@ (adr r2, 80056ac <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80056a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056aa:	bf00      	nop
 80056ac:	080056f9 	.word	0x080056f9
 80056b0:	080056c5 	.word	0x080056c5
 80056b4:	080056db 	.word	0x080056db
 80056b8:	080056f9 	.word	0x080056f9
 80056bc:	080056f9 	.word	0x080056f9
 80056c0:	080056f9 	.word	0x080056f9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c8:	3308      	adds	r3, #8
 80056ca:	2101      	movs	r1, #1
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 ff1d 	bl	800650c <RCCEx_PLL2_Config>
 80056d2:	4603      	mov	r3, r0
 80056d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80056d8:	e00f      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056de:	3328      	adds	r3, #40	@ 0x28
 80056e0:	2101      	movs	r1, #1
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 ffc4 	bl	8006670 <RCCEx_PLL3_Config>
 80056e8:	4603      	mov	r3, r0
 80056ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80056ee:	e004      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056f6:	e000      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80056f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10b      	bne.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005702:	4b6c      	ldr	r3, [pc, #432]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005706:	f023 0107 	bic.w	r1, r3, #7
 800570a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005712:	4a68      	ldr	r2, [pc, #416]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005714:	430b      	orrs	r3, r1
 8005716:	6593      	str	r3, [r2, #88]	@ 0x58
 8005718:	e003      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800571a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800571e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572a:	f002 0320 	and.w	r3, r2, #32
 800572e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005732:	2300      	movs	r3, #0
 8005734:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005738:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800573c:	460b      	mov	r3, r1
 800573e:	4313      	orrs	r3, r2
 8005740:	d055      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800574a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800574e:	d033      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005750:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005754:	d82c      	bhi.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800575a:	d02f      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800575c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005760:	d826      	bhi.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005762:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005766:	d02b      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005768:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800576c:	d820      	bhi.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800576e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005772:	d012      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005774:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005778:	d81a      	bhi.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800577a:	2b00      	cmp	r3, #0
 800577c:	d022      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800577e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005782:	d115      	bne.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005788:	3308      	adds	r3, #8
 800578a:	2100      	movs	r1, #0
 800578c:	4618      	mov	r0, r3
 800578e:	f000 febd 	bl	800650c <RCCEx_PLL2_Config>
 8005792:	4603      	mov	r3, r0
 8005794:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005798:	e015      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800579a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800579e:	3328      	adds	r3, #40	@ 0x28
 80057a0:	2102      	movs	r1, #2
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 ff64 	bl	8006670 <RCCEx_PLL3_Config>
 80057a8:	4603      	mov	r3, r0
 80057aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80057ae:	e00a      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057b6:	e006      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80057b8:	bf00      	nop
 80057ba:	e004      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80057bc:	bf00      	nop
 80057be:	e002      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80057c0:	bf00      	nop
 80057c2:	e000      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80057c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10b      	bne.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057ce:	4b39      	ldr	r3, [pc, #228]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057d2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80057d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057de:	4a35      	ldr	r2, [pc, #212]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057e0:	430b      	orrs	r3, r1
 80057e2:	6553      	str	r3, [r2, #84]	@ 0x54
 80057e4:	e003      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80057ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80057fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80057fe:	2300      	movs	r3, #0
 8005800:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005804:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005808:	460b      	mov	r3, r1
 800580a:	4313      	orrs	r3, r2
 800580c:	d058      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800580e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005812:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005816:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800581a:	d033      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800581c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005820:	d82c      	bhi.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005826:	d02f      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005828:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800582c:	d826      	bhi.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800582e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005832:	d02b      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005834:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005838:	d820      	bhi.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800583a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800583e:	d012      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005840:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005844:	d81a      	bhi.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005846:	2b00      	cmp	r3, #0
 8005848:	d022      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800584a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800584e:	d115      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005854:	3308      	adds	r3, #8
 8005856:	2100      	movs	r1, #0
 8005858:	4618      	mov	r0, r3
 800585a:	f000 fe57 	bl	800650c <RCCEx_PLL2_Config>
 800585e:	4603      	mov	r3, r0
 8005860:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005864:	e015      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800586a:	3328      	adds	r3, #40	@ 0x28
 800586c:	2102      	movs	r1, #2
 800586e:	4618      	mov	r0, r3
 8005870:	f000 fefe 	bl	8006670 <RCCEx_PLL3_Config>
 8005874:	4603      	mov	r3, r0
 8005876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800587a:	e00a      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005882:	e006      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005884:	bf00      	nop
 8005886:	e004      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005888:	bf00      	nop
 800588a:	e002      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800588c:	bf00      	nop
 800588e:	e000      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005892:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10e      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800589a:	4b06      	ldr	r3, [pc, #24]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800589c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800589e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80058a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058aa:	4a02      	ldr	r2, [pc, #8]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058ac:	430b      	orrs	r3, r1
 80058ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80058b0:	e006      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80058b2:	bf00      	nop
 80058b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80058c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80058cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80058d0:	2300      	movs	r3, #0
 80058d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80058d6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80058da:	460b      	mov	r3, r1
 80058dc:	4313      	orrs	r3, r2
 80058de:	d055      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80058e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80058e8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80058ec:	d033      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80058ee:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80058f2:	d82c      	bhi.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80058f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058f8:	d02f      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80058fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058fe:	d826      	bhi.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005900:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005904:	d02b      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005906:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800590a:	d820      	bhi.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800590c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005910:	d012      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005912:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005916:	d81a      	bhi.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005918:	2b00      	cmp	r3, #0
 800591a:	d022      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800591c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005920:	d115      	bne.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005926:	3308      	adds	r3, #8
 8005928:	2100      	movs	r1, #0
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fdee 	bl	800650c <RCCEx_PLL2_Config>
 8005930:	4603      	mov	r3, r0
 8005932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005936:	e015      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800593c:	3328      	adds	r3, #40	@ 0x28
 800593e:	2102      	movs	r1, #2
 8005940:	4618      	mov	r0, r3
 8005942:	f000 fe95 	bl	8006670 <RCCEx_PLL3_Config>
 8005946:	4603      	mov	r3, r0
 8005948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800594c:	e00a      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005954:	e006      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005956:	bf00      	nop
 8005958:	e004      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800595a:	bf00      	nop
 800595c:	e002      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800595e:	bf00      	nop
 8005960:	e000      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005964:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10b      	bne.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800596c:	4ba1      	ldr	r3, [pc, #644]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800596e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005970:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005978:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800597c:	4a9d      	ldr	r2, [pc, #628]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800597e:	430b      	orrs	r3, r1
 8005980:	6593      	str	r3, [r2, #88]	@ 0x58
 8005982:	e003      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005984:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005988:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800598c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005994:	f002 0308 	and.w	r3, r2, #8
 8005998:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800599c:	2300      	movs	r3, #0
 800599e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80059a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80059a6:	460b      	mov	r3, r1
 80059a8:	4313      	orrs	r3, r2
 80059aa:	d01e      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80059ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059b8:	d10c      	bne.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80059ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059be:	3328      	adds	r3, #40	@ 0x28
 80059c0:	2102      	movs	r1, #2
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fe54 	bl	8006670 <RCCEx_PLL3_Config>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80059d4:	4b87      	ldr	r3, [pc, #540]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80059dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059e4:	4a83      	ldr	r2, [pc, #524]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059e6:	430b      	orrs	r3, r1
 80059e8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f2:	f002 0310 	and.w	r3, r2, #16
 80059f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80059fa:	2300      	movs	r3, #0
 80059fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005a00:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005a04:	460b      	mov	r3, r1
 8005a06:	4313      	orrs	r3, r2
 8005a08:	d01e      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a16:	d10c      	bne.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1c:	3328      	adds	r3, #40	@ 0x28
 8005a1e:	2102      	movs	r1, #2
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 fe25 	bl	8006670 <RCCEx_PLL3_Config>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a32:	4b70      	ldr	r3, [pc, #448]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a42:	4a6c      	ldr	r2, [pc, #432]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a44:	430b      	orrs	r3, r1
 8005a46:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a50:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005a54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a58:	2300      	movs	r3, #0
 8005a5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a5e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005a62:	460b      	mov	r3, r1
 8005a64:	4313      	orrs	r3, r2
 8005a66:	d03e      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005a70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a74:	d022      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005a76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a7a:	d81b      	bhi.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a84:	d00b      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005a86:	e015      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	2100      	movs	r1, #0
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 fd3b 	bl	800650c <RCCEx_PLL2_Config>
 8005a96:	4603      	mov	r3, r0
 8005a98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005a9c:	e00f      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa2:	3328      	adds	r3, #40	@ 0x28
 8005aa4:	2102      	movs	r1, #2
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 fde2 	bl	8006670 <RCCEx_PLL3_Config>
 8005aac:	4603      	mov	r3, r0
 8005aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005ab2:	e004      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005aba:	e000      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10b      	bne.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ac6:	4b4b      	ldr	r3, [pc, #300]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ad6:	4a47      	ldr	r2, [pc, #284]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ad8:	430b      	orrs	r3, r1
 8005ada:	6593      	str	r3, [r2, #88]	@ 0x58
 8005adc:	e003      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ae2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005af2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005af4:	2300      	movs	r3, #0
 8005af6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005af8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005afc:	460b      	mov	r3, r1
 8005afe:	4313      	orrs	r3, r2
 8005b00:	d03b      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b0e:	d01f      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005b10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b14:	d818      	bhi.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005b16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b1a:	d003      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005b1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b20:	d007      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005b22:	e011      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b24:	4b33      	ldr	r3, [pc, #204]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b28:	4a32      	ldr	r2, [pc, #200]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005b30:	e00f      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b36:	3328      	adds	r3, #40	@ 0x28
 8005b38:	2101      	movs	r1, #1
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 fd98 	bl	8006670 <RCCEx_PLL3_Config>
 8005b40:	4603      	mov	r3, r0
 8005b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005b46:	e004      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b4e:	e000      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10b      	bne.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b5a:	4b26      	ldr	r3, [pc, #152]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b5e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b6a:	4a22      	ldr	r2, [pc, #136]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b6c:	430b      	orrs	r3, r1
 8005b6e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b70:	e003      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b82:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005b86:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b88:	2300      	movs	r3, #0
 8005b8a:	677b      	str	r3, [r7, #116]	@ 0x74
 8005b8c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005b90:	460b      	mov	r3, r1
 8005b92:	4313      	orrs	r3, r2
 8005b94:	d034      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ba4:	d007      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005ba6:	e011      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ba8:	4b12      	ldr	r3, [pc, #72]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bac:	4a11      	ldr	r2, [pc, #68]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005bb4:	e00e      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bba:	3308      	adds	r3, #8
 8005bbc:	2102      	movs	r1, #2
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 fca4 	bl	800650c <RCCEx_PLL2_Config>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005bca:	e003      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10d      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005bdc:	4b05      	ldr	r3, [pc, #20]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005be0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bea:	4a02      	ldr	r2, [pc, #8]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bec:	430b      	orrs	r3, r1
 8005bee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005bf0:	e006      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005bf2:	bf00      	nop
 8005bf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c08:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005c0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c0e:	2300      	movs	r3, #0
 8005c10:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c12:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005c16:	460b      	mov	r3, r1
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	d00c      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c20:	3328      	adds	r3, #40	@ 0x28
 8005c22:	2102      	movs	r1, #2
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 fd23 	bl	8006670 <RCCEx_PLL3_Config>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005c42:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c44:	2300      	movs	r3, #0
 8005c46:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c48:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	d038      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c5e:	d018      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005c60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c64:	d811      	bhi.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005c66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c6a:	d014      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c70:	d80b      	bhi.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d011      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005c76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c7a:	d106      	bne.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c7c:	4bc3      	ldr	r3, [pc, #780]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c80:	4ac2      	ldr	r2, [pc, #776]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005c88:	e008      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c90:	e004      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005c92:	bf00      	nop
 8005c94:	e002      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005c96:	bf00      	nop
 8005c98:	e000      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10b      	bne.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ca4:	4bb9      	ldr	r3, [pc, #740]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ca8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cb4:	4ab5      	ldr	r2, [pc, #724]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cb6:	430b      	orrs	r3, r1
 8005cb8:	6553      	str	r3, [r2, #84]	@ 0x54
 8005cba:	e003      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ccc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005cd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cd6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005cda:	460b      	mov	r3, r1
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	d009      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ce0:	4baa      	ldr	r3, [pc, #680]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ce4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cee:	4aa7      	ldr	r2, [pc, #668]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cf0:	430b      	orrs	r3, r1
 8005cf2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005d00:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d02:	2300      	movs	r3, #0
 8005d04:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d06:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	d00a      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005d10:	4b9e      	ldr	r3, [pc, #632]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005d20:	4a9a      	ldr	r2, [pc, #616]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d22:	430b      	orrs	r3, r1
 8005d24:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005d32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d34:	2300      	movs	r3, #0
 8005d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d38:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	d009      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d42:	4b92      	ldr	r3, [pc, #584]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d46:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d50:	4a8e      	ldr	r2, [pc, #568]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d52:	430b      	orrs	r3, r1
 8005d54:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005d62:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d64:	2300      	movs	r3, #0
 8005d66:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d68:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	d00e      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d72:	4b86      	ldr	r3, [pc, #536]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	4a85      	ldr	r2, [pc, #532]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d78:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d7c:	6113      	str	r3, [r2, #16]
 8005d7e:	4b83      	ldr	r3, [pc, #524]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d80:	6919      	ldr	r1, [r3, #16]
 8005d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d86:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005d8a:	4a80      	ldr	r2, [pc, #512]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d8c:	430b      	orrs	r3, r1
 8005d8e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d98:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005d9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d9e:	2300      	movs	r3, #0
 8005da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005da2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005da6:	460b      	mov	r3, r1
 8005da8:	4313      	orrs	r3, r2
 8005daa:	d009      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005dac:	4b77      	ldr	r3, [pc, #476]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005db0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dba:	4a74      	ldr	r2, [pc, #464]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005dcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dce:	2300      	movs	r3, #0
 8005dd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dd2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	d00a      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ddc:	4b6b      	ldr	r3, [pc, #428]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005de0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005dec:	4a67      	ldr	r2, [pc, #412]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dee:	430b      	orrs	r3, r1
 8005df0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e04:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005e08:	460b      	mov	r3, r1
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	d011      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e12:	3308      	adds	r3, #8
 8005e14:	2100      	movs	r1, #0
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 fb78 	bl	800650c <RCCEx_PLL2_Config>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	6239      	str	r1, [r7, #32]
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e44:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	d011      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e52:	3308      	adds	r3, #8
 8005e54:	2101      	movs	r1, #1
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 fb58 	bl	800650c <RCCEx_PLL2_Config>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005e62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	61b9      	str	r1, [r7, #24]
 8005e7e:	f003 0304 	and.w	r3, r3, #4
 8005e82:	61fb      	str	r3, [r7, #28]
 8005e84:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	d011      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e92:	3308      	adds	r3, #8
 8005e94:	2102      	movs	r1, #2
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 fb38 	bl	800650c <RCCEx_PLL2_Config>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eba:	2100      	movs	r1, #0
 8005ebc:	6139      	str	r1, [r7, #16]
 8005ebe:	f003 0308 	and.w	r3, r3, #8
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	d011      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed2:	3328      	adds	r3, #40	@ 0x28
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 fbca 	bl	8006670 <RCCEx_PLL3_Config>
 8005edc:	4603      	mov	r3, r0
 8005ede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efa:	2100      	movs	r1, #0
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	f003 0310 	and.w	r3, r3, #16
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	d011      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f12:	3328      	adds	r3, #40	@ 0x28
 8005f14:	2101      	movs	r1, #1
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fbaa 	bl	8006670 <RCCEx_PLL3_Config>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	6039      	str	r1, [r7, #0]
 8005f3e:	f003 0320 	and.w	r3, r3, #32
 8005f42:	607b      	str	r3, [r7, #4]
 8005f44:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	d011      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f52:	3328      	adds	r3, #40	@ 0x28
 8005f54:	2102      	movs	r1, #2
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 fb8a 	bl	8006670 <RCCEx_PLL3_Config>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005f72:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	e000      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005f86:	46bd      	mov	sp, r7
 8005f88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f8c:	58024400 	.word	0x58024400

08005f90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005f94:	f7fe fd54 	bl	8004a40 <HAL_RCC_GetHCLKFreq>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	4b06      	ldr	r3, [pc, #24]	@ (8005fb4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	091b      	lsrs	r3, r3, #4
 8005fa0:	f003 0307 	and.w	r3, r3, #7
 8005fa4:	4904      	ldr	r1, [pc, #16]	@ (8005fb8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005fa6:	5ccb      	ldrb	r3, [r1, r3]
 8005fa8:	f003 031f 	and.w	r3, r3, #31
 8005fac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	58024400 	.word	0x58024400
 8005fb8:	08014444 	.word	0x08014444

08005fbc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b089      	sub	sp, #36	@ 0x24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fc4:	4ba1      	ldr	r3, [pc, #644]	@ (800624c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc8:	f003 0303 	and.w	r3, r3, #3
 8005fcc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005fce:	4b9f      	ldr	r3, [pc, #636]	@ (800624c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd2:	0b1b      	lsrs	r3, r3, #12
 8005fd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fd8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005fda:	4b9c      	ldr	r3, [pc, #624]	@ (800624c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fde:	091b      	lsrs	r3, r3, #4
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005fe6:	4b99      	ldr	r3, [pc, #612]	@ (800624c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fea:	08db      	lsrs	r3, r3, #3
 8005fec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	fb02 f303 	mul.w	r3, r2, r3
 8005ff6:	ee07 3a90 	vmov	s15, r3
 8005ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 8111 	beq.w	800622c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	2b02      	cmp	r3, #2
 800600e:	f000 8083 	beq.w	8006118 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	2b02      	cmp	r3, #2
 8006016:	f200 80a1 	bhi.w	800615c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d056      	beq.n	80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006026:	e099      	b.n	800615c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006028:	4b88      	ldr	r3, [pc, #544]	@ (800624c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0320 	and.w	r3, r3, #32
 8006030:	2b00      	cmp	r3, #0
 8006032:	d02d      	beq.n	8006090 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006034:	4b85      	ldr	r3, [pc, #532]	@ (800624c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	08db      	lsrs	r3, r3, #3
 800603a:	f003 0303 	and.w	r3, r3, #3
 800603e:	4a84      	ldr	r2, [pc, #528]	@ (8006250 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006040:	fa22 f303 	lsr.w	r3, r2, r3
 8006044:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	ee07 3a90 	vmov	s15, r3
 800604c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	ee07 3a90 	vmov	s15, r3
 8006056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800605a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800605e:	4b7b      	ldr	r3, [pc, #492]	@ (800624c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006066:	ee07 3a90 	vmov	s15, r3
 800606a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006072:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006254 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800607a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800607e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800608a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800608e:	e087      	b.n	80061a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	ee07 3a90 	vmov	s15, r3
 8006096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800609a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800609e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060a2:	4b6a      	ldr	r3, [pc, #424]	@ (800624c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060aa:	ee07 3a90 	vmov	s15, r3
 80060ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80060b6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006254 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060d2:	e065      	b.n	80061a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	ee07 3a90 	vmov	s15, r3
 80060da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060de:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800625c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80060e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060e6:	4b59      	ldr	r3, [pc, #356]	@ (800624c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ee:	ee07 3a90 	vmov	s15, r3
 80060f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80060fa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006254 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800610a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800610e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006116:	e043      	b.n	80061a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	ee07 3a90 	vmov	s15, r3
 800611e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006122:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800612a:	4b48      	ldr	r3, [pc, #288]	@ (800624c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800612c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006132:	ee07 3a90 	vmov	s15, r3
 8006136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800613a:	ed97 6a03 	vldr	s12, [r7, #12]
 800613e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006254 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800614a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800614e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800615a:	e021      	b.n	80061a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	ee07 3a90 	vmov	s15, r3
 8006162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006166:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800625c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800616a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800616e:	4b37      	ldr	r3, [pc, #220]	@ (800624c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006176:	ee07 3a90 	vmov	s15, r3
 800617a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800617e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006182:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006254 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800618a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800618e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800619a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800619e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80061a0:	4b2a      	ldr	r3, [pc, #168]	@ (800624c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a4:	0a5b      	lsrs	r3, r3, #9
 80061a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80061be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061c6:	ee17 2a90 	vmov	r2, s15
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80061ce:	4b1f      	ldr	r3, [pc, #124]	@ (800624c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d2:	0c1b      	lsrs	r3, r3, #16
 80061d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061d8:	ee07 3a90 	vmov	s15, r3
 80061dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80061ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061f4:	ee17 2a90 	vmov	r2, s15
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80061fc:	4b13      	ldr	r3, [pc, #76]	@ (800624c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006200:	0e1b      	lsrs	r3, r3, #24
 8006202:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006206:	ee07 3a90 	vmov	s15, r3
 800620a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800620e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006212:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006216:	edd7 6a07 	vldr	s13, [r7, #28]
 800621a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800621e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006222:	ee17 2a90 	vmov	r2, s15
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800622a:	e008      	b.n	800623e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	609a      	str	r2, [r3, #8]
}
 800623e:	bf00      	nop
 8006240:	3724      	adds	r7, #36	@ 0x24
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	58024400 	.word	0x58024400
 8006250:	03d09000 	.word	0x03d09000
 8006254:	46000000 	.word	0x46000000
 8006258:	4c742400 	.word	0x4c742400
 800625c:	4a742400 	.word	0x4a742400
 8006260:	4af42400 	.word	0x4af42400

08006264 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006264:	b480      	push	{r7}
 8006266:	b089      	sub	sp, #36	@ 0x24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800626c:	4ba1      	ldr	r3, [pc, #644]	@ (80064f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800626e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006270:	f003 0303 	and.w	r3, r3, #3
 8006274:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006276:	4b9f      	ldr	r3, [pc, #636]	@ (80064f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627a:	0d1b      	lsrs	r3, r3, #20
 800627c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006280:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006282:	4b9c      	ldr	r3, [pc, #624]	@ (80064f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006286:	0a1b      	lsrs	r3, r3, #8
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800628e:	4b99      	ldr	r3, [pc, #612]	@ (80064f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006292:	08db      	lsrs	r3, r3, #3
 8006294:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	fb02 f303 	mul.w	r3, r2, r3
 800629e:	ee07 3a90 	vmov	s15, r3
 80062a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 8111 	beq.w	80064d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	f000 8083 	beq.w	80063c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	2b02      	cmp	r3, #2
 80062be:	f200 80a1 	bhi.w	8006404 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d003      	beq.n	80062d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d056      	beq.n	800637c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80062ce:	e099      	b.n	8006404 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062d0:	4b88      	ldr	r3, [pc, #544]	@ (80064f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0320 	and.w	r3, r3, #32
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d02d      	beq.n	8006338 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062dc:	4b85      	ldr	r3, [pc, #532]	@ (80064f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	08db      	lsrs	r3, r3, #3
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	4a84      	ldr	r2, [pc, #528]	@ (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80062e8:	fa22 f303 	lsr.w	r3, r2, r3
 80062ec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	ee07 3a90 	vmov	s15, r3
 80062f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	ee07 3a90 	vmov	s15, r3
 80062fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006306:	4b7b      	ldr	r3, [pc, #492]	@ (80064f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800630e:	ee07 3a90 	vmov	s15, r3
 8006312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006316:	ed97 6a03 	vldr	s12, [r7, #12]
 800631a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80064fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800631e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800632a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800632e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006332:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006336:	e087      	b.n	8006448 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	ee07 3a90 	vmov	s15, r3
 800633e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006342:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006500 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800634a:	4b6a      	ldr	r3, [pc, #424]	@ (80064f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800634c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006352:	ee07 3a90 	vmov	s15, r3
 8006356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800635a:	ed97 6a03 	vldr	s12, [r7, #12]
 800635e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80064fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800636a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800636e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006376:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800637a:	e065      	b.n	8006448 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	ee07 3a90 	vmov	s15, r3
 8006382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006386:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800638a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800638e:	4b59      	ldr	r3, [pc, #356]	@ (80064f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006396:	ee07 3a90 	vmov	s15, r3
 800639a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800639e:	ed97 6a03 	vldr	s12, [r7, #12]
 80063a2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80064fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063be:	e043      	b.n	8006448 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	ee07 3a90 	vmov	s15, r3
 80063c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006508 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80063ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063d2:	4b48      	ldr	r3, [pc, #288]	@ (80064f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063da:	ee07 3a90 	vmov	s15, r3
 80063de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80063e6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80064fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006402:	e021      	b.n	8006448 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	ee07 3a90 	vmov	s15, r3
 800640a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800640e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006416:	4b37      	ldr	r3, [pc, #220]	@ (80064f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006426:	ed97 6a03 	vldr	s12, [r7, #12]
 800642a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80064fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800642e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006436:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800643a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800643e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006446:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006448:	4b2a      	ldr	r3, [pc, #168]	@ (80064f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800644a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644c:	0a5b      	lsrs	r3, r3, #9
 800644e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006452:	ee07 3a90 	vmov	s15, r3
 8006456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800645a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800645e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006462:	edd7 6a07 	vldr	s13, [r7, #28]
 8006466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800646a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800646e:	ee17 2a90 	vmov	r2, s15
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006476:	4b1f      	ldr	r3, [pc, #124]	@ (80064f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647a:	0c1b      	lsrs	r3, r3, #16
 800647c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006480:	ee07 3a90 	vmov	s15, r3
 8006484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006488:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800648c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006490:	edd7 6a07 	vldr	s13, [r7, #28]
 8006494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800649c:	ee17 2a90 	vmov	r2, s15
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80064a4:	4b13      	ldr	r3, [pc, #76]	@ (80064f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a8:	0e1b      	lsrs	r3, r3, #24
 80064aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064ae:	ee07 3a90 	vmov	s15, r3
 80064b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064be:	edd7 6a07 	vldr	s13, [r7, #28]
 80064c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ca:	ee17 2a90 	vmov	r2, s15
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80064d2:	e008      	b.n	80064e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	609a      	str	r2, [r3, #8]
}
 80064e6:	bf00      	nop
 80064e8:	3724      	adds	r7, #36	@ 0x24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	58024400 	.word	0x58024400
 80064f8:	03d09000 	.word	0x03d09000
 80064fc:	46000000 	.word	0x46000000
 8006500:	4c742400 	.word	0x4c742400
 8006504:	4a742400 	.word	0x4a742400
 8006508:	4af42400 	.word	0x4af42400

0800650c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800651a:	4b53      	ldr	r3, [pc, #332]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 800651c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651e:	f003 0303 	and.w	r3, r3, #3
 8006522:	2b03      	cmp	r3, #3
 8006524:	d101      	bne.n	800652a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e099      	b.n	800665e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800652a:	4b4f      	ldr	r3, [pc, #316]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a4e      	ldr	r2, [pc, #312]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 8006530:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006536:	f7fb f9b7 	bl	80018a8 <HAL_GetTick>
 800653a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800653c:	e008      	b.n	8006550 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800653e:	f7fb f9b3 	bl	80018a8 <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	2b02      	cmp	r3, #2
 800654a:	d901      	bls.n	8006550 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e086      	b.n	800665e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006550:	4b45      	ldr	r3, [pc, #276]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1f0      	bne.n	800653e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800655c:	4b42      	ldr	r3, [pc, #264]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 800655e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006560:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	031b      	lsls	r3, r3, #12
 800656a:	493f      	ldr	r1, [pc, #252]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 800656c:	4313      	orrs	r3, r2
 800656e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	3b01      	subs	r3, #1
 8006576:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	3b01      	subs	r3, #1
 8006580:	025b      	lsls	r3, r3, #9
 8006582:	b29b      	uxth	r3, r3
 8006584:	431a      	orrs	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	3b01      	subs	r3, #1
 800658c:	041b      	lsls	r3, r3, #16
 800658e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006592:	431a      	orrs	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	3b01      	subs	r3, #1
 800659a:	061b      	lsls	r3, r3, #24
 800659c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80065a0:	4931      	ldr	r1, [pc, #196]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80065a6:	4b30      	ldr	r3, [pc, #192]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 80065a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	492d      	ldr	r1, [pc, #180]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80065b8:	4b2b      	ldr	r3, [pc, #172]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 80065ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065bc:	f023 0220 	bic.w	r2, r3, #32
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	4928      	ldr	r1, [pc, #160]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80065ca:	4b27      	ldr	r3, [pc, #156]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 80065cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ce:	4a26      	ldr	r2, [pc, #152]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 80065d0:	f023 0310 	bic.w	r3, r3, #16
 80065d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80065d6:	4b24      	ldr	r3, [pc, #144]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 80065d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065da:	4b24      	ldr	r3, [pc, #144]	@ (800666c <RCCEx_PLL2_Config+0x160>)
 80065dc:	4013      	ands	r3, r2
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	69d2      	ldr	r2, [r2, #28]
 80065e2:	00d2      	lsls	r2, r2, #3
 80065e4:	4920      	ldr	r1, [pc, #128]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80065ea:	4b1f      	ldr	r3, [pc, #124]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 80065ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ee:	4a1e      	ldr	r2, [pc, #120]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 80065f0:	f043 0310 	orr.w	r3, r3, #16
 80065f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d106      	bne.n	800660a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80065fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 80065fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006600:	4a19      	ldr	r2, [pc, #100]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 8006602:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006606:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006608:	e00f      	b.n	800662a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d106      	bne.n	800661e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006610:	4b15      	ldr	r3, [pc, #84]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 8006612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006614:	4a14      	ldr	r2, [pc, #80]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 8006616:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800661a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800661c:	e005      	b.n	800662a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800661e:	4b12      	ldr	r3, [pc, #72]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 8006620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006622:	4a11      	ldr	r2, [pc, #68]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 8006624:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006628:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800662a:	4b0f      	ldr	r3, [pc, #60]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a0e      	ldr	r2, [pc, #56]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 8006630:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006636:	f7fb f937 	bl	80018a8 <HAL_GetTick>
 800663a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800663c:	e008      	b.n	8006650 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800663e:	f7fb f933 	bl	80018a8 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b02      	cmp	r3, #2
 800664a:	d901      	bls.n	8006650 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e006      	b.n	800665e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006650:	4b05      	ldr	r3, [pc, #20]	@ (8006668 <RCCEx_PLL2_Config+0x15c>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d0f0      	beq.n	800663e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800665c:	7bfb      	ldrb	r3, [r7, #15]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	58024400 	.word	0x58024400
 800666c:	ffff0007 	.word	0xffff0007

08006670 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800667e:	4b53      	ldr	r3, [pc, #332]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006682:	f003 0303 	and.w	r3, r3, #3
 8006686:	2b03      	cmp	r3, #3
 8006688:	d101      	bne.n	800668e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e099      	b.n	80067c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800668e:	4b4f      	ldr	r3, [pc, #316]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a4e      	ldr	r2, [pc, #312]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006694:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006698:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800669a:	f7fb f905 	bl	80018a8 <HAL_GetTick>
 800669e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066a0:	e008      	b.n	80066b4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80066a2:	f7fb f901 	bl	80018a8 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d901      	bls.n	80066b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e086      	b.n	80067c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066b4:	4b45      	ldr	r3, [pc, #276]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1f0      	bne.n	80066a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80066c0:	4b42      	ldr	r3, [pc, #264]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 80066c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	051b      	lsls	r3, r3, #20
 80066ce:	493f      	ldr	r1, [pc, #252]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	3b01      	subs	r3, #1
 80066da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	025b      	lsls	r3, r3, #9
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	431a      	orrs	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	3b01      	subs	r3, #1
 80066f0:	041b      	lsls	r3, r3, #16
 80066f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80066f6:	431a      	orrs	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	3b01      	subs	r3, #1
 80066fe:	061b      	lsls	r3, r3, #24
 8006700:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006704:	4931      	ldr	r1, [pc, #196]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006706:	4313      	orrs	r3, r2
 8006708:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800670a:	4b30      	ldr	r3, [pc, #192]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 800670c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	492d      	ldr	r1, [pc, #180]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006718:	4313      	orrs	r3, r2
 800671a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800671c:	4b2b      	ldr	r3, [pc, #172]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 800671e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006720:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	4928      	ldr	r1, [pc, #160]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 800672a:	4313      	orrs	r3, r2
 800672c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800672e:	4b27      	ldr	r3, [pc, #156]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006732:	4a26      	ldr	r2, [pc, #152]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006738:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800673a:	4b24      	ldr	r3, [pc, #144]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 800673c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800673e:	4b24      	ldr	r3, [pc, #144]	@ (80067d0 <RCCEx_PLL3_Config+0x160>)
 8006740:	4013      	ands	r3, r2
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	69d2      	ldr	r2, [r2, #28]
 8006746:	00d2      	lsls	r2, r2, #3
 8006748:	4920      	ldr	r1, [pc, #128]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 800674a:	4313      	orrs	r3, r2
 800674c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800674e:	4b1f      	ldr	r3, [pc, #124]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006752:	4a1e      	ldr	r2, [pc, #120]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006758:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d106      	bne.n	800676e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006760:	4b1a      	ldr	r3, [pc, #104]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006764:	4a19      	ldr	r2, [pc, #100]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006766:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800676a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800676c:	e00f      	b.n	800678e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d106      	bne.n	8006782 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006774:	4b15      	ldr	r3, [pc, #84]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006778:	4a14      	ldr	r2, [pc, #80]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 800677a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800677e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006780:	e005      	b.n	800678e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006782:	4b12      	ldr	r3, [pc, #72]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006786:	4a11      	ldr	r2, [pc, #68]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006788:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800678c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800678e:	4b0f      	ldr	r3, [pc, #60]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a0e      	ldr	r2, [pc, #56]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006798:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800679a:	f7fb f885 	bl	80018a8 <HAL_GetTick>
 800679e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80067a0:	e008      	b.n	80067b4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80067a2:	f7fb f881 	bl	80018a8 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d901      	bls.n	80067b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e006      	b.n	80067c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80067b4:	4b05      	ldr	r3, [pc, #20]	@ (80067cc <RCCEx_PLL3_Config+0x15c>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d0f0      	beq.n	80067a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	58024400 	.word	0x58024400
 80067d0:	ffff0007 	.word	0xffff0007

080067d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e049      	b.n	800687a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d106      	bne.n	8006800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f841 	bl	8006882 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2202      	movs	r2, #2
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	3304      	adds	r3, #4
 8006810:	4619      	mov	r1, r3
 8006812:	4610      	mov	r0, r2
 8006814:	f000 f9e8 	bl	8006be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800688a:	bf00      	nop
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
	...

08006898 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d001      	beq.n	80068b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e054      	b.n	800695a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2202      	movs	r2, #2
 80068b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68da      	ldr	r2, [r3, #12]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f042 0201 	orr.w	r2, r2, #1
 80068c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a26      	ldr	r2, [pc, #152]	@ (8006968 <HAL_TIM_Base_Start_IT+0xd0>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d022      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0x80>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068da:	d01d      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0x80>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a22      	ldr	r2, [pc, #136]	@ (800696c <HAL_TIM_Base_Start_IT+0xd4>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d018      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0x80>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a21      	ldr	r2, [pc, #132]	@ (8006970 <HAL_TIM_Base_Start_IT+0xd8>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d013      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0x80>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006974 <HAL_TIM_Base_Start_IT+0xdc>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d00e      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0x80>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a1e      	ldr	r2, [pc, #120]	@ (8006978 <HAL_TIM_Base_Start_IT+0xe0>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d009      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0x80>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a1c      	ldr	r2, [pc, #112]	@ (800697c <HAL_TIM_Base_Start_IT+0xe4>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d004      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0x80>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a1b      	ldr	r2, [pc, #108]	@ (8006980 <HAL_TIM_Base_Start_IT+0xe8>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d115      	bne.n	8006944 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689a      	ldr	r2, [r3, #8]
 800691e:	4b19      	ldr	r3, [pc, #100]	@ (8006984 <HAL_TIM_Base_Start_IT+0xec>)
 8006920:	4013      	ands	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2b06      	cmp	r3, #6
 8006928:	d015      	beq.n	8006956 <HAL_TIM_Base_Start_IT+0xbe>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006930:	d011      	beq.n	8006956 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f042 0201 	orr.w	r2, r2, #1
 8006940:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006942:	e008      	b.n	8006956 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0201 	orr.w	r2, r2, #1
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	e000      	b.n	8006958 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006956:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	40010000 	.word	0x40010000
 800696c:	40000400 	.word	0x40000400
 8006970:	40000800 	.word	0x40000800
 8006974:	40000c00 	.word	0x40000c00
 8006978:	40010400 	.word	0x40010400
 800697c:	40001800 	.word	0x40001800
 8006980:	40014000 	.word	0x40014000
 8006984:	00010007 	.word	0x00010007

08006988 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d020      	beq.n	80069ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d01b      	beq.n	80069ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f06f 0202 	mvn.w	r2, #2
 80069bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	f003 0303 	and.w	r3, r3, #3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f8e9 	bl	8006baa <HAL_TIM_IC_CaptureCallback>
 80069d8:	e005      	b.n	80069e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f8db 	bl	8006b96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 f8ec 	bl	8006bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f003 0304 	and.w	r3, r3, #4
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d020      	beq.n	8006a38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01b      	beq.n	8006a38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f06f 0204 	mvn.w	r2, #4
 8006a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f8c3 	bl	8006baa <HAL_TIM_IC_CaptureCallback>
 8006a24:	e005      	b.n	8006a32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f8b5 	bl	8006b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f8c6 	bl	8006bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f003 0308 	and.w	r3, r3, #8
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d020      	beq.n	8006a84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f003 0308 	and.w	r3, r3, #8
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d01b      	beq.n	8006a84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f06f 0208 	mvn.w	r2, #8
 8006a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2204      	movs	r2, #4
 8006a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	f003 0303 	and.w	r3, r3, #3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d003      	beq.n	8006a72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f89d 	bl	8006baa <HAL_TIM_IC_CaptureCallback>
 8006a70:	e005      	b.n	8006a7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f88f 	bl	8006b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f8a0 	bl	8006bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f003 0310 	and.w	r3, r3, #16
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d020      	beq.n	8006ad0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f003 0310 	and.w	r3, r3, #16
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d01b      	beq.n	8006ad0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f06f 0210 	mvn.w	r2, #16
 8006aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2208      	movs	r2, #8
 8006aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f877 	bl	8006baa <HAL_TIM_IC_CaptureCallback>
 8006abc:	e005      	b.n	8006aca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f869 	bl	8006b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f87a 	bl	8006bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00c      	beq.n	8006af4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d007      	beq.n	8006af4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f06f 0201 	mvn.w	r2, #1
 8006aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7fa f9dc 	bl	8000eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d104      	bne.n	8006b08 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00c      	beq.n	8006b22 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d007      	beq.n	8006b22 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f913 	bl	8006d48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00c      	beq.n	8006b46 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d007      	beq.n	8006b46 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f90b 	bl	8006d5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00c      	beq.n	8006b6a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d007      	beq.n	8006b6a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f834 	bl	8006bd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f003 0320 	and.w	r3, r3, #32
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00c      	beq.n	8006b8e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d007      	beq.n	8006b8e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f06f 0220 	mvn.w	r2, #32
 8006b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f8d3 	bl	8006d34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b8e:	bf00      	nop
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b083      	sub	sp, #12
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b9e:	bf00      	nop
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b083      	sub	sp, #12
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bb2:	bf00      	nop
 8006bb4:	370c      	adds	r7, #12
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b083      	sub	sp, #12
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bc6:	bf00      	nop
 8006bc8:	370c      	adds	r7, #12
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b083      	sub	sp, #12
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bda:	bf00      	nop
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
	...

08006be8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a46      	ldr	r2, [pc, #280]	@ (8006d14 <TIM_Base_SetConfig+0x12c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d013      	beq.n	8006c28 <TIM_Base_SetConfig+0x40>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c06:	d00f      	beq.n	8006c28 <TIM_Base_SetConfig+0x40>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a43      	ldr	r2, [pc, #268]	@ (8006d18 <TIM_Base_SetConfig+0x130>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d00b      	beq.n	8006c28 <TIM_Base_SetConfig+0x40>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a42      	ldr	r2, [pc, #264]	@ (8006d1c <TIM_Base_SetConfig+0x134>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d007      	beq.n	8006c28 <TIM_Base_SetConfig+0x40>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a41      	ldr	r2, [pc, #260]	@ (8006d20 <TIM_Base_SetConfig+0x138>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d003      	beq.n	8006c28 <TIM_Base_SetConfig+0x40>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a40      	ldr	r2, [pc, #256]	@ (8006d24 <TIM_Base_SetConfig+0x13c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d108      	bne.n	8006c3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a35      	ldr	r2, [pc, #212]	@ (8006d14 <TIM_Base_SetConfig+0x12c>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d01f      	beq.n	8006c82 <TIM_Base_SetConfig+0x9a>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c48:	d01b      	beq.n	8006c82 <TIM_Base_SetConfig+0x9a>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a32      	ldr	r2, [pc, #200]	@ (8006d18 <TIM_Base_SetConfig+0x130>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d017      	beq.n	8006c82 <TIM_Base_SetConfig+0x9a>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a31      	ldr	r2, [pc, #196]	@ (8006d1c <TIM_Base_SetConfig+0x134>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d013      	beq.n	8006c82 <TIM_Base_SetConfig+0x9a>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a30      	ldr	r2, [pc, #192]	@ (8006d20 <TIM_Base_SetConfig+0x138>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d00f      	beq.n	8006c82 <TIM_Base_SetConfig+0x9a>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a2f      	ldr	r2, [pc, #188]	@ (8006d24 <TIM_Base_SetConfig+0x13c>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d00b      	beq.n	8006c82 <TIM_Base_SetConfig+0x9a>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a2e      	ldr	r2, [pc, #184]	@ (8006d28 <TIM_Base_SetConfig+0x140>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d007      	beq.n	8006c82 <TIM_Base_SetConfig+0x9a>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a2d      	ldr	r2, [pc, #180]	@ (8006d2c <TIM_Base_SetConfig+0x144>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d003      	beq.n	8006c82 <TIM_Base_SetConfig+0x9a>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a2c      	ldr	r2, [pc, #176]	@ (8006d30 <TIM_Base_SetConfig+0x148>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d108      	bne.n	8006c94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	689a      	ldr	r2, [r3, #8]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a16      	ldr	r2, [pc, #88]	@ (8006d14 <TIM_Base_SetConfig+0x12c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d00f      	beq.n	8006ce0 <TIM_Base_SetConfig+0xf8>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a18      	ldr	r2, [pc, #96]	@ (8006d24 <TIM_Base_SetConfig+0x13c>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d00b      	beq.n	8006ce0 <TIM_Base_SetConfig+0xf8>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a17      	ldr	r2, [pc, #92]	@ (8006d28 <TIM_Base_SetConfig+0x140>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d007      	beq.n	8006ce0 <TIM_Base_SetConfig+0xf8>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a16      	ldr	r2, [pc, #88]	@ (8006d2c <TIM_Base_SetConfig+0x144>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d003      	beq.n	8006ce0 <TIM_Base_SetConfig+0xf8>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a15      	ldr	r2, [pc, #84]	@ (8006d30 <TIM_Base_SetConfig+0x148>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d103      	bne.n	8006ce8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	691a      	ldr	r2, [r3, #16]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d105      	bne.n	8006d06 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	f023 0201 	bic.w	r2, r3, #1
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	611a      	str	r2, [r3, #16]
  }
}
 8006d06:	bf00      	nop
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	40010000 	.word	0x40010000
 8006d18:	40000400 	.word	0x40000400
 8006d1c:	40000800 	.word	0x40000800
 8006d20:	40000c00 	.word	0x40000c00
 8006d24:	40010400 	.word	0x40010400
 8006d28:	40014000 	.word	0x40014000
 8006d2c:	40014400 	.word	0x40014400
 8006d30:	40014800 	.word	0x40014800

08006d34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e042      	b.n	8006e08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d106      	bne.n	8006d9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7fa faef 	bl	8001378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2224      	movs	r2, #36	@ 0x24
 8006d9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f022 0201 	bic.w	r2, r2, #1
 8006db0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d002      	beq.n	8006dc0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fe1e 	bl	80079fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f8b3 	bl	8006f2c <UART_SetConfig>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d101      	bne.n	8006dd0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e01b      	b.n	8006e08 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	685a      	ldr	r2, [r3, #4]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006dde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	689a      	ldr	r2, [r3, #8]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006dee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f042 0201 	orr.w	r2, r2, #1
 8006dfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fe9d 	bl	8007b40 <UART_CheckIdleState>
 8006e06:	4603      	mov	r3, r0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b08a      	sub	sp, #40	@ 0x28
 8006e14:	af02      	add	r7, sp, #8
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	603b      	str	r3, [r7, #0]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e26:	2b20      	cmp	r3, #32
 8006e28:	d17b      	bne.n	8006f22 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d002      	beq.n	8006e36 <HAL_UART_Transmit+0x26>
 8006e30:	88fb      	ldrh	r3, [r7, #6]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e074      	b.n	8006f24 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2221      	movs	r2, #33	@ 0x21
 8006e46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e4a:	f7fa fd2d 	bl	80018a8 <HAL_GetTick>
 8006e4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	88fa      	ldrh	r2, [r7, #6]
 8006e54:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	88fa      	ldrh	r2, [r7, #6]
 8006e5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e68:	d108      	bne.n	8006e7c <HAL_UART_Transmit+0x6c>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d104      	bne.n	8006e7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006e72:	2300      	movs	r3, #0
 8006e74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	61bb      	str	r3, [r7, #24]
 8006e7a:	e003      	b.n	8006e84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e80:	2300      	movs	r3, #0
 8006e82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e84:	e030      	b.n	8006ee8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2180      	movs	r1, #128	@ 0x80
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f000 feff 	bl	8007c94 <UART_WaitOnFlagUntilTimeout>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d005      	beq.n	8006ea8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e03d      	b.n	8006f24 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10b      	bne.n	8006ec6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	881b      	ldrh	r3, [r3, #0]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ebc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	3302      	adds	r3, #2
 8006ec2:	61bb      	str	r3, [r7, #24]
 8006ec4:	e007      	b.n	8006ed6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	781a      	ldrb	r2, [r3, #0]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1c8      	bne.n	8006e86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	2200      	movs	r2, #0
 8006efc:	2140      	movs	r1, #64	@ 0x40
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f000 fec8 	bl	8007c94 <UART_WaitOnFlagUntilTimeout>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d005      	beq.n	8006f16 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e006      	b.n	8006f24 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2220      	movs	r2, #32
 8006f1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	e000      	b.n	8006f24 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006f22:	2302      	movs	r3, #2
  }
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3720      	adds	r7, #32
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f30:	b092      	sub	sp, #72	@ 0x48
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	689a      	ldr	r2, [r3, #8]
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	431a      	orrs	r2, r3
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	431a      	orrs	r2, r3
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	69db      	ldr	r3, [r3, #28]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	4bbe      	ldr	r3, [pc, #760]	@ (8007254 <UART_SetConfig+0x328>)
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	6812      	ldr	r2, [r2, #0]
 8006f62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006f64:	430b      	orrs	r3, r1
 8006f66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	68da      	ldr	r2, [r3, #12]
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4ab3      	ldr	r2, [pc, #716]	@ (8007258 <UART_SetConfig+0x32c>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d004      	beq.n	8006f98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f94:	4313      	orrs	r3, r2
 8006f96:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689a      	ldr	r2, [r3, #8]
 8006f9e:	4baf      	ldr	r3, [pc, #700]	@ (800725c <UART_SetConfig+0x330>)
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	6812      	ldr	r2, [r2, #0]
 8006fa6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006fa8:	430b      	orrs	r3, r1
 8006faa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb2:	f023 010f 	bic.w	r1, r3, #15
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4aa6      	ldr	r2, [pc, #664]	@ (8007260 <UART_SetConfig+0x334>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d177      	bne.n	80070bc <UART_SetConfig+0x190>
 8006fcc:	4ba5      	ldr	r3, [pc, #660]	@ (8007264 <UART_SetConfig+0x338>)
 8006fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fd4:	2b28      	cmp	r3, #40	@ 0x28
 8006fd6:	d86d      	bhi.n	80070b4 <UART_SetConfig+0x188>
 8006fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8006fe0 <UART_SetConfig+0xb4>)
 8006fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fde:	bf00      	nop
 8006fe0:	08007085 	.word	0x08007085
 8006fe4:	080070b5 	.word	0x080070b5
 8006fe8:	080070b5 	.word	0x080070b5
 8006fec:	080070b5 	.word	0x080070b5
 8006ff0:	080070b5 	.word	0x080070b5
 8006ff4:	080070b5 	.word	0x080070b5
 8006ff8:	080070b5 	.word	0x080070b5
 8006ffc:	080070b5 	.word	0x080070b5
 8007000:	0800708d 	.word	0x0800708d
 8007004:	080070b5 	.word	0x080070b5
 8007008:	080070b5 	.word	0x080070b5
 800700c:	080070b5 	.word	0x080070b5
 8007010:	080070b5 	.word	0x080070b5
 8007014:	080070b5 	.word	0x080070b5
 8007018:	080070b5 	.word	0x080070b5
 800701c:	080070b5 	.word	0x080070b5
 8007020:	08007095 	.word	0x08007095
 8007024:	080070b5 	.word	0x080070b5
 8007028:	080070b5 	.word	0x080070b5
 800702c:	080070b5 	.word	0x080070b5
 8007030:	080070b5 	.word	0x080070b5
 8007034:	080070b5 	.word	0x080070b5
 8007038:	080070b5 	.word	0x080070b5
 800703c:	080070b5 	.word	0x080070b5
 8007040:	0800709d 	.word	0x0800709d
 8007044:	080070b5 	.word	0x080070b5
 8007048:	080070b5 	.word	0x080070b5
 800704c:	080070b5 	.word	0x080070b5
 8007050:	080070b5 	.word	0x080070b5
 8007054:	080070b5 	.word	0x080070b5
 8007058:	080070b5 	.word	0x080070b5
 800705c:	080070b5 	.word	0x080070b5
 8007060:	080070a5 	.word	0x080070a5
 8007064:	080070b5 	.word	0x080070b5
 8007068:	080070b5 	.word	0x080070b5
 800706c:	080070b5 	.word	0x080070b5
 8007070:	080070b5 	.word	0x080070b5
 8007074:	080070b5 	.word	0x080070b5
 8007078:	080070b5 	.word	0x080070b5
 800707c:	080070b5 	.word	0x080070b5
 8007080:	080070ad 	.word	0x080070ad
 8007084:	2301      	movs	r3, #1
 8007086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800708a:	e222      	b.n	80074d2 <UART_SetConfig+0x5a6>
 800708c:	2304      	movs	r3, #4
 800708e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007092:	e21e      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007094:	2308      	movs	r3, #8
 8007096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800709a:	e21a      	b.n	80074d2 <UART_SetConfig+0x5a6>
 800709c:	2310      	movs	r3, #16
 800709e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070a2:	e216      	b.n	80074d2 <UART_SetConfig+0x5a6>
 80070a4:	2320      	movs	r3, #32
 80070a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070aa:	e212      	b.n	80074d2 <UART_SetConfig+0x5a6>
 80070ac:	2340      	movs	r3, #64	@ 0x40
 80070ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070b2:	e20e      	b.n	80074d2 <UART_SetConfig+0x5a6>
 80070b4:	2380      	movs	r3, #128	@ 0x80
 80070b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ba:	e20a      	b.n	80074d2 <UART_SetConfig+0x5a6>
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a69      	ldr	r2, [pc, #420]	@ (8007268 <UART_SetConfig+0x33c>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d130      	bne.n	8007128 <UART_SetConfig+0x1fc>
 80070c6:	4b67      	ldr	r3, [pc, #412]	@ (8007264 <UART_SetConfig+0x338>)
 80070c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ca:	f003 0307 	and.w	r3, r3, #7
 80070ce:	2b05      	cmp	r3, #5
 80070d0:	d826      	bhi.n	8007120 <UART_SetConfig+0x1f4>
 80070d2:	a201      	add	r2, pc, #4	@ (adr r2, 80070d8 <UART_SetConfig+0x1ac>)
 80070d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d8:	080070f1 	.word	0x080070f1
 80070dc:	080070f9 	.word	0x080070f9
 80070e0:	08007101 	.word	0x08007101
 80070e4:	08007109 	.word	0x08007109
 80070e8:	08007111 	.word	0x08007111
 80070ec:	08007119 	.word	0x08007119
 80070f0:	2300      	movs	r3, #0
 80070f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070f6:	e1ec      	b.n	80074d2 <UART_SetConfig+0x5a6>
 80070f8:	2304      	movs	r3, #4
 80070fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070fe:	e1e8      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007100:	2308      	movs	r3, #8
 8007102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007106:	e1e4      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007108:	2310      	movs	r3, #16
 800710a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800710e:	e1e0      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007110:	2320      	movs	r3, #32
 8007112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007116:	e1dc      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007118:	2340      	movs	r3, #64	@ 0x40
 800711a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800711e:	e1d8      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007120:	2380      	movs	r3, #128	@ 0x80
 8007122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007126:	e1d4      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a4f      	ldr	r2, [pc, #316]	@ (800726c <UART_SetConfig+0x340>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d130      	bne.n	8007194 <UART_SetConfig+0x268>
 8007132:	4b4c      	ldr	r3, [pc, #304]	@ (8007264 <UART_SetConfig+0x338>)
 8007134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007136:	f003 0307 	and.w	r3, r3, #7
 800713a:	2b05      	cmp	r3, #5
 800713c:	d826      	bhi.n	800718c <UART_SetConfig+0x260>
 800713e:	a201      	add	r2, pc, #4	@ (adr r2, 8007144 <UART_SetConfig+0x218>)
 8007140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007144:	0800715d 	.word	0x0800715d
 8007148:	08007165 	.word	0x08007165
 800714c:	0800716d 	.word	0x0800716d
 8007150:	08007175 	.word	0x08007175
 8007154:	0800717d 	.word	0x0800717d
 8007158:	08007185 	.word	0x08007185
 800715c:	2300      	movs	r3, #0
 800715e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007162:	e1b6      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007164:	2304      	movs	r3, #4
 8007166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800716a:	e1b2      	b.n	80074d2 <UART_SetConfig+0x5a6>
 800716c:	2308      	movs	r3, #8
 800716e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007172:	e1ae      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007174:	2310      	movs	r3, #16
 8007176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800717a:	e1aa      	b.n	80074d2 <UART_SetConfig+0x5a6>
 800717c:	2320      	movs	r3, #32
 800717e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007182:	e1a6      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007184:	2340      	movs	r3, #64	@ 0x40
 8007186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800718a:	e1a2      	b.n	80074d2 <UART_SetConfig+0x5a6>
 800718c:	2380      	movs	r3, #128	@ 0x80
 800718e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007192:	e19e      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a35      	ldr	r2, [pc, #212]	@ (8007270 <UART_SetConfig+0x344>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d130      	bne.n	8007200 <UART_SetConfig+0x2d4>
 800719e:	4b31      	ldr	r3, [pc, #196]	@ (8007264 <UART_SetConfig+0x338>)
 80071a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	2b05      	cmp	r3, #5
 80071a8:	d826      	bhi.n	80071f8 <UART_SetConfig+0x2cc>
 80071aa:	a201      	add	r2, pc, #4	@ (adr r2, 80071b0 <UART_SetConfig+0x284>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	080071c9 	.word	0x080071c9
 80071b4:	080071d1 	.word	0x080071d1
 80071b8:	080071d9 	.word	0x080071d9
 80071bc:	080071e1 	.word	0x080071e1
 80071c0:	080071e9 	.word	0x080071e9
 80071c4:	080071f1 	.word	0x080071f1
 80071c8:	2300      	movs	r3, #0
 80071ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ce:	e180      	b.n	80074d2 <UART_SetConfig+0x5a6>
 80071d0:	2304      	movs	r3, #4
 80071d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071d6:	e17c      	b.n	80074d2 <UART_SetConfig+0x5a6>
 80071d8:	2308      	movs	r3, #8
 80071da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071de:	e178      	b.n	80074d2 <UART_SetConfig+0x5a6>
 80071e0:	2310      	movs	r3, #16
 80071e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071e6:	e174      	b.n	80074d2 <UART_SetConfig+0x5a6>
 80071e8:	2320      	movs	r3, #32
 80071ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ee:	e170      	b.n	80074d2 <UART_SetConfig+0x5a6>
 80071f0:	2340      	movs	r3, #64	@ 0x40
 80071f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071f6:	e16c      	b.n	80074d2 <UART_SetConfig+0x5a6>
 80071f8:	2380      	movs	r3, #128	@ 0x80
 80071fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071fe:	e168      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a1b      	ldr	r2, [pc, #108]	@ (8007274 <UART_SetConfig+0x348>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d142      	bne.n	8007290 <UART_SetConfig+0x364>
 800720a:	4b16      	ldr	r3, [pc, #88]	@ (8007264 <UART_SetConfig+0x338>)
 800720c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800720e:	f003 0307 	and.w	r3, r3, #7
 8007212:	2b05      	cmp	r3, #5
 8007214:	d838      	bhi.n	8007288 <UART_SetConfig+0x35c>
 8007216:	a201      	add	r2, pc, #4	@ (adr r2, 800721c <UART_SetConfig+0x2f0>)
 8007218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721c:	08007235 	.word	0x08007235
 8007220:	0800723d 	.word	0x0800723d
 8007224:	08007245 	.word	0x08007245
 8007228:	0800724d 	.word	0x0800724d
 800722c:	08007279 	.word	0x08007279
 8007230:	08007281 	.word	0x08007281
 8007234:	2300      	movs	r3, #0
 8007236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800723a:	e14a      	b.n	80074d2 <UART_SetConfig+0x5a6>
 800723c:	2304      	movs	r3, #4
 800723e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007242:	e146      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007244:	2308      	movs	r3, #8
 8007246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800724a:	e142      	b.n	80074d2 <UART_SetConfig+0x5a6>
 800724c:	2310      	movs	r3, #16
 800724e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007252:	e13e      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007254:	cfff69f3 	.word	0xcfff69f3
 8007258:	58000c00 	.word	0x58000c00
 800725c:	11fff4ff 	.word	0x11fff4ff
 8007260:	40011000 	.word	0x40011000
 8007264:	58024400 	.word	0x58024400
 8007268:	40004400 	.word	0x40004400
 800726c:	40004800 	.word	0x40004800
 8007270:	40004c00 	.word	0x40004c00
 8007274:	40005000 	.word	0x40005000
 8007278:	2320      	movs	r3, #32
 800727a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800727e:	e128      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007280:	2340      	movs	r3, #64	@ 0x40
 8007282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007286:	e124      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007288:	2380      	movs	r3, #128	@ 0x80
 800728a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800728e:	e120      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4acb      	ldr	r2, [pc, #812]	@ (80075c4 <UART_SetConfig+0x698>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d176      	bne.n	8007388 <UART_SetConfig+0x45c>
 800729a:	4bcb      	ldr	r3, [pc, #812]	@ (80075c8 <UART_SetConfig+0x69c>)
 800729c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800729e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072a2:	2b28      	cmp	r3, #40	@ 0x28
 80072a4:	d86c      	bhi.n	8007380 <UART_SetConfig+0x454>
 80072a6:	a201      	add	r2, pc, #4	@ (adr r2, 80072ac <UART_SetConfig+0x380>)
 80072a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ac:	08007351 	.word	0x08007351
 80072b0:	08007381 	.word	0x08007381
 80072b4:	08007381 	.word	0x08007381
 80072b8:	08007381 	.word	0x08007381
 80072bc:	08007381 	.word	0x08007381
 80072c0:	08007381 	.word	0x08007381
 80072c4:	08007381 	.word	0x08007381
 80072c8:	08007381 	.word	0x08007381
 80072cc:	08007359 	.word	0x08007359
 80072d0:	08007381 	.word	0x08007381
 80072d4:	08007381 	.word	0x08007381
 80072d8:	08007381 	.word	0x08007381
 80072dc:	08007381 	.word	0x08007381
 80072e0:	08007381 	.word	0x08007381
 80072e4:	08007381 	.word	0x08007381
 80072e8:	08007381 	.word	0x08007381
 80072ec:	08007361 	.word	0x08007361
 80072f0:	08007381 	.word	0x08007381
 80072f4:	08007381 	.word	0x08007381
 80072f8:	08007381 	.word	0x08007381
 80072fc:	08007381 	.word	0x08007381
 8007300:	08007381 	.word	0x08007381
 8007304:	08007381 	.word	0x08007381
 8007308:	08007381 	.word	0x08007381
 800730c:	08007369 	.word	0x08007369
 8007310:	08007381 	.word	0x08007381
 8007314:	08007381 	.word	0x08007381
 8007318:	08007381 	.word	0x08007381
 800731c:	08007381 	.word	0x08007381
 8007320:	08007381 	.word	0x08007381
 8007324:	08007381 	.word	0x08007381
 8007328:	08007381 	.word	0x08007381
 800732c:	08007371 	.word	0x08007371
 8007330:	08007381 	.word	0x08007381
 8007334:	08007381 	.word	0x08007381
 8007338:	08007381 	.word	0x08007381
 800733c:	08007381 	.word	0x08007381
 8007340:	08007381 	.word	0x08007381
 8007344:	08007381 	.word	0x08007381
 8007348:	08007381 	.word	0x08007381
 800734c:	08007379 	.word	0x08007379
 8007350:	2301      	movs	r3, #1
 8007352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007356:	e0bc      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007358:	2304      	movs	r3, #4
 800735a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800735e:	e0b8      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007360:	2308      	movs	r3, #8
 8007362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007366:	e0b4      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007368:	2310      	movs	r3, #16
 800736a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800736e:	e0b0      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007370:	2320      	movs	r3, #32
 8007372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007376:	e0ac      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007378:	2340      	movs	r3, #64	@ 0x40
 800737a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800737e:	e0a8      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007380:	2380      	movs	r3, #128	@ 0x80
 8007382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007386:	e0a4      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a8f      	ldr	r2, [pc, #572]	@ (80075cc <UART_SetConfig+0x6a0>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d130      	bne.n	80073f4 <UART_SetConfig+0x4c8>
 8007392:	4b8d      	ldr	r3, [pc, #564]	@ (80075c8 <UART_SetConfig+0x69c>)
 8007394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007396:	f003 0307 	and.w	r3, r3, #7
 800739a:	2b05      	cmp	r3, #5
 800739c:	d826      	bhi.n	80073ec <UART_SetConfig+0x4c0>
 800739e:	a201      	add	r2, pc, #4	@ (adr r2, 80073a4 <UART_SetConfig+0x478>)
 80073a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a4:	080073bd 	.word	0x080073bd
 80073a8:	080073c5 	.word	0x080073c5
 80073ac:	080073cd 	.word	0x080073cd
 80073b0:	080073d5 	.word	0x080073d5
 80073b4:	080073dd 	.word	0x080073dd
 80073b8:	080073e5 	.word	0x080073e5
 80073bc:	2300      	movs	r3, #0
 80073be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073c2:	e086      	b.n	80074d2 <UART_SetConfig+0x5a6>
 80073c4:	2304      	movs	r3, #4
 80073c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ca:	e082      	b.n	80074d2 <UART_SetConfig+0x5a6>
 80073cc:	2308      	movs	r3, #8
 80073ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073d2:	e07e      	b.n	80074d2 <UART_SetConfig+0x5a6>
 80073d4:	2310      	movs	r3, #16
 80073d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073da:	e07a      	b.n	80074d2 <UART_SetConfig+0x5a6>
 80073dc:	2320      	movs	r3, #32
 80073de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073e2:	e076      	b.n	80074d2 <UART_SetConfig+0x5a6>
 80073e4:	2340      	movs	r3, #64	@ 0x40
 80073e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ea:	e072      	b.n	80074d2 <UART_SetConfig+0x5a6>
 80073ec:	2380      	movs	r3, #128	@ 0x80
 80073ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073f2:	e06e      	b.n	80074d2 <UART_SetConfig+0x5a6>
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a75      	ldr	r2, [pc, #468]	@ (80075d0 <UART_SetConfig+0x6a4>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d130      	bne.n	8007460 <UART_SetConfig+0x534>
 80073fe:	4b72      	ldr	r3, [pc, #456]	@ (80075c8 <UART_SetConfig+0x69c>)
 8007400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007402:	f003 0307 	and.w	r3, r3, #7
 8007406:	2b05      	cmp	r3, #5
 8007408:	d826      	bhi.n	8007458 <UART_SetConfig+0x52c>
 800740a:	a201      	add	r2, pc, #4	@ (adr r2, 8007410 <UART_SetConfig+0x4e4>)
 800740c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007410:	08007429 	.word	0x08007429
 8007414:	08007431 	.word	0x08007431
 8007418:	08007439 	.word	0x08007439
 800741c:	08007441 	.word	0x08007441
 8007420:	08007449 	.word	0x08007449
 8007424:	08007451 	.word	0x08007451
 8007428:	2300      	movs	r3, #0
 800742a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800742e:	e050      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007430:	2304      	movs	r3, #4
 8007432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007436:	e04c      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007438:	2308      	movs	r3, #8
 800743a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800743e:	e048      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007440:	2310      	movs	r3, #16
 8007442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007446:	e044      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007448:	2320      	movs	r3, #32
 800744a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800744e:	e040      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007450:	2340      	movs	r3, #64	@ 0x40
 8007452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007456:	e03c      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007458:	2380      	movs	r3, #128	@ 0x80
 800745a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800745e:	e038      	b.n	80074d2 <UART_SetConfig+0x5a6>
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a5b      	ldr	r2, [pc, #364]	@ (80075d4 <UART_SetConfig+0x6a8>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d130      	bne.n	80074cc <UART_SetConfig+0x5a0>
 800746a:	4b57      	ldr	r3, [pc, #348]	@ (80075c8 <UART_SetConfig+0x69c>)
 800746c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800746e:	f003 0307 	and.w	r3, r3, #7
 8007472:	2b05      	cmp	r3, #5
 8007474:	d826      	bhi.n	80074c4 <UART_SetConfig+0x598>
 8007476:	a201      	add	r2, pc, #4	@ (adr r2, 800747c <UART_SetConfig+0x550>)
 8007478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747c:	08007495 	.word	0x08007495
 8007480:	0800749d 	.word	0x0800749d
 8007484:	080074a5 	.word	0x080074a5
 8007488:	080074ad 	.word	0x080074ad
 800748c:	080074b5 	.word	0x080074b5
 8007490:	080074bd 	.word	0x080074bd
 8007494:	2302      	movs	r3, #2
 8007496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800749a:	e01a      	b.n	80074d2 <UART_SetConfig+0x5a6>
 800749c:	2304      	movs	r3, #4
 800749e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074a2:	e016      	b.n	80074d2 <UART_SetConfig+0x5a6>
 80074a4:	2308      	movs	r3, #8
 80074a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074aa:	e012      	b.n	80074d2 <UART_SetConfig+0x5a6>
 80074ac:	2310      	movs	r3, #16
 80074ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074b2:	e00e      	b.n	80074d2 <UART_SetConfig+0x5a6>
 80074b4:	2320      	movs	r3, #32
 80074b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ba:	e00a      	b.n	80074d2 <UART_SetConfig+0x5a6>
 80074bc:	2340      	movs	r3, #64	@ 0x40
 80074be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074c2:	e006      	b.n	80074d2 <UART_SetConfig+0x5a6>
 80074c4:	2380      	movs	r3, #128	@ 0x80
 80074c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ca:	e002      	b.n	80074d2 <UART_SetConfig+0x5a6>
 80074cc:	2380      	movs	r3, #128	@ 0x80
 80074ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a3f      	ldr	r2, [pc, #252]	@ (80075d4 <UART_SetConfig+0x6a8>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	f040 80f8 	bne.w	80076ce <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074de:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80074e2:	2b20      	cmp	r3, #32
 80074e4:	dc46      	bgt.n	8007574 <UART_SetConfig+0x648>
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	f2c0 8082 	blt.w	80075f0 <UART_SetConfig+0x6c4>
 80074ec:	3b02      	subs	r3, #2
 80074ee:	2b1e      	cmp	r3, #30
 80074f0:	d87e      	bhi.n	80075f0 <UART_SetConfig+0x6c4>
 80074f2:	a201      	add	r2, pc, #4	@ (adr r2, 80074f8 <UART_SetConfig+0x5cc>)
 80074f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f8:	0800757b 	.word	0x0800757b
 80074fc:	080075f1 	.word	0x080075f1
 8007500:	08007583 	.word	0x08007583
 8007504:	080075f1 	.word	0x080075f1
 8007508:	080075f1 	.word	0x080075f1
 800750c:	080075f1 	.word	0x080075f1
 8007510:	08007593 	.word	0x08007593
 8007514:	080075f1 	.word	0x080075f1
 8007518:	080075f1 	.word	0x080075f1
 800751c:	080075f1 	.word	0x080075f1
 8007520:	080075f1 	.word	0x080075f1
 8007524:	080075f1 	.word	0x080075f1
 8007528:	080075f1 	.word	0x080075f1
 800752c:	080075f1 	.word	0x080075f1
 8007530:	080075a3 	.word	0x080075a3
 8007534:	080075f1 	.word	0x080075f1
 8007538:	080075f1 	.word	0x080075f1
 800753c:	080075f1 	.word	0x080075f1
 8007540:	080075f1 	.word	0x080075f1
 8007544:	080075f1 	.word	0x080075f1
 8007548:	080075f1 	.word	0x080075f1
 800754c:	080075f1 	.word	0x080075f1
 8007550:	080075f1 	.word	0x080075f1
 8007554:	080075f1 	.word	0x080075f1
 8007558:	080075f1 	.word	0x080075f1
 800755c:	080075f1 	.word	0x080075f1
 8007560:	080075f1 	.word	0x080075f1
 8007564:	080075f1 	.word	0x080075f1
 8007568:	080075f1 	.word	0x080075f1
 800756c:	080075f1 	.word	0x080075f1
 8007570:	080075e3 	.word	0x080075e3
 8007574:	2b40      	cmp	r3, #64	@ 0x40
 8007576:	d037      	beq.n	80075e8 <UART_SetConfig+0x6bc>
 8007578:	e03a      	b.n	80075f0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800757a:	f7fe fd09 	bl	8005f90 <HAL_RCCEx_GetD3PCLK1Freq>
 800757e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007580:	e03c      	b.n	80075fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007586:	4618      	mov	r0, r3
 8007588:	f7fe fd18 	bl	8005fbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800758c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800758e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007590:	e034      	b.n	80075fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007592:	f107 0318 	add.w	r3, r7, #24
 8007596:	4618      	mov	r0, r3
 8007598:	f7fe fe64 	bl	8006264 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075a0:	e02c      	b.n	80075fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075a2:	4b09      	ldr	r3, [pc, #36]	@ (80075c8 <UART_SetConfig+0x69c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0320 	and.w	r3, r3, #32
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d016      	beq.n	80075dc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075ae:	4b06      	ldr	r3, [pc, #24]	@ (80075c8 <UART_SetConfig+0x69c>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	08db      	lsrs	r3, r3, #3
 80075b4:	f003 0303 	and.w	r3, r3, #3
 80075b8:	4a07      	ldr	r2, [pc, #28]	@ (80075d8 <UART_SetConfig+0x6ac>)
 80075ba:	fa22 f303 	lsr.w	r3, r2, r3
 80075be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80075c0:	e01c      	b.n	80075fc <UART_SetConfig+0x6d0>
 80075c2:	bf00      	nop
 80075c4:	40011400 	.word	0x40011400
 80075c8:	58024400 	.word	0x58024400
 80075cc:	40007800 	.word	0x40007800
 80075d0:	40007c00 	.word	0x40007c00
 80075d4:	58000c00 	.word	0x58000c00
 80075d8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80075dc:	4b9d      	ldr	r3, [pc, #628]	@ (8007854 <UART_SetConfig+0x928>)
 80075de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075e0:	e00c      	b.n	80075fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80075e2:	4b9d      	ldr	r3, [pc, #628]	@ (8007858 <UART_SetConfig+0x92c>)
 80075e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075e6:	e009      	b.n	80075fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075ee:	e005      	b.n	80075fc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80075fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80075fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f000 81de 	beq.w	80079c0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007608:	4a94      	ldr	r2, [pc, #592]	@ (800785c <UART_SetConfig+0x930>)
 800760a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800760e:	461a      	mov	r2, r3
 8007610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007612:	fbb3 f3f2 	udiv	r3, r3, r2
 8007616:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	4613      	mov	r3, r2
 800761e:	005b      	lsls	r3, r3, #1
 8007620:	4413      	add	r3, r2
 8007622:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007624:	429a      	cmp	r2, r3
 8007626:	d305      	bcc.n	8007634 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800762e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007630:	429a      	cmp	r2, r3
 8007632:	d903      	bls.n	800763c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800763a:	e1c1      	b.n	80079c0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800763c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800763e:	2200      	movs	r2, #0
 8007640:	60bb      	str	r3, [r7, #8]
 8007642:	60fa      	str	r2, [r7, #12]
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007648:	4a84      	ldr	r2, [pc, #528]	@ (800785c <UART_SetConfig+0x930>)
 800764a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800764e:	b29b      	uxth	r3, r3
 8007650:	2200      	movs	r2, #0
 8007652:	603b      	str	r3, [r7, #0]
 8007654:	607a      	str	r2, [r7, #4]
 8007656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800765a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800765e:	f7f8 fe8f 	bl	8000380 <__aeabi_uldivmod>
 8007662:	4602      	mov	r2, r0
 8007664:	460b      	mov	r3, r1
 8007666:	4610      	mov	r0, r2
 8007668:	4619      	mov	r1, r3
 800766a:	f04f 0200 	mov.w	r2, #0
 800766e:	f04f 0300 	mov.w	r3, #0
 8007672:	020b      	lsls	r3, r1, #8
 8007674:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007678:	0202      	lsls	r2, r0, #8
 800767a:	6979      	ldr	r1, [r7, #20]
 800767c:	6849      	ldr	r1, [r1, #4]
 800767e:	0849      	lsrs	r1, r1, #1
 8007680:	2000      	movs	r0, #0
 8007682:	460c      	mov	r4, r1
 8007684:	4605      	mov	r5, r0
 8007686:	eb12 0804 	adds.w	r8, r2, r4
 800768a:	eb43 0905 	adc.w	r9, r3, r5
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	469a      	mov	sl, r3
 8007696:	4693      	mov	fp, r2
 8007698:	4652      	mov	r2, sl
 800769a:	465b      	mov	r3, fp
 800769c:	4640      	mov	r0, r8
 800769e:	4649      	mov	r1, r9
 80076a0:	f7f8 fe6e 	bl	8000380 <__aeabi_uldivmod>
 80076a4:	4602      	mov	r2, r0
 80076a6:	460b      	mov	r3, r1
 80076a8:	4613      	mov	r3, r2
 80076aa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076b2:	d308      	bcc.n	80076c6 <UART_SetConfig+0x79a>
 80076b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076ba:	d204      	bcs.n	80076c6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076c2:	60da      	str	r2, [r3, #12]
 80076c4:	e17c      	b.n	80079c0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80076cc:	e178      	b.n	80079c0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	69db      	ldr	r3, [r3, #28]
 80076d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076d6:	f040 80c5 	bne.w	8007864 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80076da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80076de:	2b20      	cmp	r3, #32
 80076e0:	dc48      	bgt.n	8007774 <UART_SetConfig+0x848>
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	db7b      	blt.n	80077de <UART_SetConfig+0x8b2>
 80076e6:	2b20      	cmp	r3, #32
 80076e8:	d879      	bhi.n	80077de <UART_SetConfig+0x8b2>
 80076ea:	a201      	add	r2, pc, #4	@ (adr r2, 80076f0 <UART_SetConfig+0x7c4>)
 80076ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f0:	0800777b 	.word	0x0800777b
 80076f4:	08007783 	.word	0x08007783
 80076f8:	080077df 	.word	0x080077df
 80076fc:	080077df 	.word	0x080077df
 8007700:	0800778b 	.word	0x0800778b
 8007704:	080077df 	.word	0x080077df
 8007708:	080077df 	.word	0x080077df
 800770c:	080077df 	.word	0x080077df
 8007710:	0800779b 	.word	0x0800779b
 8007714:	080077df 	.word	0x080077df
 8007718:	080077df 	.word	0x080077df
 800771c:	080077df 	.word	0x080077df
 8007720:	080077df 	.word	0x080077df
 8007724:	080077df 	.word	0x080077df
 8007728:	080077df 	.word	0x080077df
 800772c:	080077df 	.word	0x080077df
 8007730:	080077ab 	.word	0x080077ab
 8007734:	080077df 	.word	0x080077df
 8007738:	080077df 	.word	0x080077df
 800773c:	080077df 	.word	0x080077df
 8007740:	080077df 	.word	0x080077df
 8007744:	080077df 	.word	0x080077df
 8007748:	080077df 	.word	0x080077df
 800774c:	080077df 	.word	0x080077df
 8007750:	080077df 	.word	0x080077df
 8007754:	080077df 	.word	0x080077df
 8007758:	080077df 	.word	0x080077df
 800775c:	080077df 	.word	0x080077df
 8007760:	080077df 	.word	0x080077df
 8007764:	080077df 	.word	0x080077df
 8007768:	080077df 	.word	0x080077df
 800776c:	080077df 	.word	0x080077df
 8007770:	080077d1 	.word	0x080077d1
 8007774:	2b40      	cmp	r3, #64	@ 0x40
 8007776:	d02e      	beq.n	80077d6 <UART_SetConfig+0x8aa>
 8007778:	e031      	b.n	80077de <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800777a:	f7fd f991 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 800777e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007780:	e033      	b.n	80077ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007782:	f7fd f9a3 	bl	8004acc <HAL_RCC_GetPCLK2Freq>
 8007786:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007788:	e02f      	b.n	80077ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800778a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800778e:	4618      	mov	r0, r3
 8007790:	f7fe fc14 	bl	8005fbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007798:	e027      	b.n	80077ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800779a:	f107 0318 	add.w	r3, r7, #24
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fe fd60 	bl	8006264 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077a8:	e01f      	b.n	80077ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077aa:	4b2d      	ldr	r3, [pc, #180]	@ (8007860 <UART_SetConfig+0x934>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0320 	and.w	r3, r3, #32
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d009      	beq.n	80077ca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80077b6:	4b2a      	ldr	r3, [pc, #168]	@ (8007860 <UART_SetConfig+0x934>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	08db      	lsrs	r3, r3, #3
 80077bc:	f003 0303 	and.w	r3, r3, #3
 80077c0:	4a24      	ldr	r2, [pc, #144]	@ (8007854 <UART_SetConfig+0x928>)
 80077c2:	fa22 f303 	lsr.w	r3, r2, r3
 80077c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80077c8:	e00f      	b.n	80077ea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80077ca:	4b22      	ldr	r3, [pc, #136]	@ (8007854 <UART_SetConfig+0x928>)
 80077cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077ce:	e00c      	b.n	80077ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80077d0:	4b21      	ldr	r3, [pc, #132]	@ (8007858 <UART_SetConfig+0x92c>)
 80077d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077d4:	e009      	b.n	80077ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077dc:	e005      	b.n	80077ea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80077de:	2300      	movs	r3, #0
 80077e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80077e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 80e7 	beq.w	80079c0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f6:	4a19      	ldr	r2, [pc, #100]	@ (800785c <UART_SetConfig+0x930>)
 80077f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077fc:	461a      	mov	r2, r3
 80077fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007800:	fbb3 f3f2 	udiv	r3, r3, r2
 8007804:	005a      	lsls	r2, r3, #1
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	085b      	lsrs	r3, r3, #1
 800780c:	441a      	add	r2, r3
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	fbb2 f3f3 	udiv	r3, r2, r3
 8007816:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800781a:	2b0f      	cmp	r3, #15
 800781c:	d916      	bls.n	800784c <UART_SetConfig+0x920>
 800781e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007824:	d212      	bcs.n	800784c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007828:	b29b      	uxth	r3, r3
 800782a:	f023 030f 	bic.w	r3, r3, #15
 800782e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007832:	085b      	lsrs	r3, r3, #1
 8007834:	b29b      	uxth	r3, r3
 8007836:	f003 0307 	and.w	r3, r3, #7
 800783a:	b29a      	uxth	r2, r3
 800783c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800783e:	4313      	orrs	r3, r2
 8007840:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007848:	60da      	str	r2, [r3, #12]
 800784a:	e0b9      	b.n	80079c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007852:	e0b5      	b.n	80079c0 <UART_SetConfig+0xa94>
 8007854:	03d09000 	.word	0x03d09000
 8007858:	003d0900 	.word	0x003d0900
 800785c:	08014454 	.word	0x08014454
 8007860:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007864:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007868:	2b20      	cmp	r3, #32
 800786a:	dc49      	bgt.n	8007900 <UART_SetConfig+0x9d4>
 800786c:	2b00      	cmp	r3, #0
 800786e:	db7c      	blt.n	800796a <UART_SetConfig+0xa3e>
 8007870:	2b20      	cmp	r3, #32
 8007872:	d87a      	bhi.n	800796a <UART_SetConfig+0xa3e>
 8007874:	a201      	add	r2, pc, #4	@ (adr r2, 800787c <UART_SetConfig+0x950>)
 8007876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787a:	bf00      	nop
 800787c:	08007907 	.word	0x08007907
 8007880:	0800790f 	.word	0x0800790f
 8007884:	0800796b 	.word	0x0800796b
 8007888:	0800796b 	.word	0x0800796b
 800788c:	08007917 	.word	0x08007917
 8007890:	0800796b 	.word	0x0800796b
 8007894:	0800796b 	.word	0x0800796b
 8007898:	0800796b 	.word	0x0800796b
 800789c:	08007927 	.word	0x08007927
 80078a0:	0800796b 	.word	0x0800796b
 80078a4:	0800796b 	.word	0x0800796b
 80078a8:	0800796b 	.word	0x0800796b
 80078ac:	0800796b 	.word	0x0800796b
 80078b0:	0800796b 	.word	0x0800796b
 80078b4:	0800796b 	.word	0x0800796b
 80078b8:	0800796b 	.word	0x0800796b
 80078bc:	08007937 	.word	0x08007937
 80078c0:	0800796b 	.word	0x0800796b
 80078c4:	0800796b 	.word	0x0800796b
 80078c8:	0800796b 	.word	0x0800796b
 80078cc:	0800796b 	.word	0x0800796b
 80078d0:	0800796b 	.word	0x0800796b
 80078d4:	0800796b 	.word	0x0800796b
 80078d8:	0800796b 	.word	0x0800796b
 80078dc:	0800796b 	.word	0x0800796b
 80078e0:	0800796b 	.word	0x0800796b
 80078e4:	0800796b 	.word	0x0800796b
 80078e8:	0800796b 	.word	0x0800796b
 80078ec:	0800796b 	.word	0x0800796b
 80078f0:	0800796b 	.word	0x0800796b
 80078f4:	0800796b 	.word	0x0800796b
 80078f8:	0800796b 	.word	0x0800796b
 80078fc:	0800795d 	.word	0x0800795d
 8007900:	2b40      	cmp	r3, #64	@ 0x40
 8007902:	d02e      	beq.n	8007962 <UART_SetConfig+0xa36>
 8007904:	e031      	b.n	800796a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007906:	f7fd f8cb 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 800790a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800790c:	e033      	b.n	8007976 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800790e:	f7fd f8dd 	bl	8004acc <HAL_RCC_GetPCLK2Freq>
 8007912:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007914:	e02f      	b.n	8007976 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007916:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800791a:	4618      	mov	r0, r3
 800791c:	f7fe fb4e 	bl	8005fbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007924:	e027      	b.n	8007976 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007926:	f107 0318 	add.w	r3, r7, #24
 800792a:	4618      	mov	r0, r3
 800792c:	f7fe fc9a 	bl	8006264 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007934:	e01f      	b.n	8007976 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007936:	4b2d      	ldr	r3, [pc, #180]	@ (80079ec <UART_SetConfig+0xac0>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0320 	and.w	r3, r3, #32
 800793e:	2b00      	cmp	r3, #0
 8007940:	d009      	beq.n	8007956 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007942:	4b2a      	ldr	r3, [pc, #168]	@ (80079ec <UART_SetConfig+0xac0>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	08db      	lsrs	r3, r3, #3
 8007948:	f003 0303 	and.w	r3, r3, #3
 800794c:	4a28      	ldr	r2, [pc, #160]	@ (80079f0 <UART_SetConfig+0xac4>)
 800794e:	fa22 f303 	lsr.w	r3, r2, r3
 8007952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007954:	e00f      	b.n	8007976 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007956:	4b26      	ldr	r3, [pc, #152]	@ (80079f0 <UART_SetConfig+0xac4>)
 8007958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800795a:	e00c      	b.n	8007976 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800795c:	4b25      	ldr	r3, [pc, #148]	@ (80079f4 <UART_SetConfig+0xac8>)
 800795e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007960:	e009      	b.n	8007976 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007968:	e005      	b.n	8007976 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800796a:	2300      	movs	r3, #0
 800796c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007974:	bf00      	nop
    }

    if (pclk != 0U)
 8007976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007978:	2b00      	cmp	r3, #0
 800797a:	d021      	beq.n	80079c0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007980:	4a1d      	ldr	r2, [pc, #116]	@ (80079f8 <UART_SetConfig+0xacc>)
 8007982:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007986:	461a      	mov	r2, r3
 8007988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800798a:	fbb3 f2f2 	udiv	r2, r3, r2
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	085b      	lsrs	r3, r3, #1
 8007994:	441a      	add	r2, r3
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	fbb2 f3f3 	udiv	r3, r2, r3
 800799e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a2:	2b0f      	cmp	r3, #15
 80079a4:	d909      	bls.n	80079ba <UART_SetConfig+0xa8e>
 80079a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079ac:	d205      	bcs.n	80079ba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	60da      	str	r2, [r3, #12]
 80079b8:	e002      	b.n	80079c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	2200      	movs	r2, #0
 80079d4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	2200      	movs	r2, #0
 80079da:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80079dc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3748      	adds	r7, #72	@ 0x48
 80079e4:	46bd      	mov	sp, r7
 80079e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079ea:	bf00      	nop
 80079ec:	58024400 	.word	0x58024400
 80079f0:	03d09000 	.word	0x03d09000
 80079f4:	003d0900 	.word	0x003d0900
 80079f8:	08014454 	.word	0x08014454

080079fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a08:	f003 0308 	and.w	r3, r3, #8
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00a      	beq.n	8007a26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a2a:	f003 0301 	and.w	r3, r3, #1
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a4c:	f003 0302 	and.w	r3, r3, #2
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00a      	beq.n	8007a6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	430a      	orrs	r2, r1
 8007a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a6e:	f003 0304 	and.w	r3, r3, #4
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00a      	beq.n	8007a8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a90:	f003 0310 	and.w	r3, r3, #16
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00a      	beq.n	8007aae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab2:	f003 0320 	and.w	r3, r3, #32
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00a      	beq.n	8007ad0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	430a      	orrs	r2, r1
 8007ace:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d01a      	beq.n	8007b12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007af6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007afa:	d10a      	bne.n	8007b12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00a      	beq.n	8007b34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	430a      	orrs	r2, r1
 8007b32:	605a      	str	r2, [r3, #4]
  }
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b098      	sub	sp, #96	@ 0x60
 8007b44:	af02      	add	r7, sp, #8
 8007b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b50:	f7f9 feaa 	bl	80018a8 <HAL_GetTick>
 8007b54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0308 	and.w	r3, r3, #8
 8007b60:	2b08      	cmp	r3, #8
 8007b62:	d12f      	bne.n	8007bc4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f88e 	bl	8007c94 <UART_WaitOnFlagUntilTimeout>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d022      	beq.n	8007bc4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b86:	e853 3f00 	ldrex	r3, [r3]
 8007b8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b92:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	461a      	mov	r2, r3
 8007b9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b9e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ba2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ba4:	e841 2300 	strex	r3, r2, [r1]
 8007ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1e6      	bne.n	8007b7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e063      	b.n	8007c8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0304 	and.w	r3, r3, #4
 8007bce:	2b04      	cmp	r3, #4
 8007bd0:	d149      	bne.n	8007c66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bd2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f857 	bl	8007c94 <UART_WaitOnFlagUntilTimeout>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d03c      	beq.n	8007c66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf4:	e853 3f00 	ldrex	r3, [r3]
 8007bf8:	623b      	str	r3, [r7, #32]
   return(result);
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	461a      	mov	r2, r3
 8007c08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c12:	e841 2300 	strex	r3, r2, [r1]
 8007c16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1e6      	bne.n	8007bec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3308      	adds	r3, #8
 8007c24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	e853 3f00 	ldrex	r3, [r3]
 8007c2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f023 0301 	bic.w	r3, r3, #1
 8007c34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	3308      	adds	r3, #8
 8007c3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c3e:	61fa      	str	r2, [r7, #28]
 8007c40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c42:	69b9      	ldr	r1, [r7, #24]
 8007c44:	69fa      	ldr	r2, [r7, #28]
 8007c46:	e841 2300 	strex	r3, r2, [r1]
 8007c4a:	617b      	str	r3, [r7, #20]
   return(result);
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1e5      	bne.n	8007c1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2220      	movs	r2, #32
 8007c56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e012      	b.n	8007c8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2220      	movs	r2, #32
 8007c6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2220      	movs	r2, #32
 8007c72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3758      	adds	r7, #88	@ 0x58
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	603b      	str	r3, [r7, #0]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ca4:	e04f      	b.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cac:	d04b      	beq.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cae:	f7f9 fdfb 	bl	80018a8 <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	69ba      	ldr	r2, [r7, #24]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d302      	bcc.n	8007cc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d101      	bne.n	8007cc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e04e      	b.n	8007d66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 0304 	and.w	r3, r3, #4
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d037      	beq.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2b80      	cmp	r3, #128	@ 0x80
 8007cda:	d034      	beq.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2b40      	cmp	r3, #64	@ 0x40
 8007ce0:	d031      	beq.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	69db      	ldr	r3, [r3, #28]
 8007ce8:	f003 0308 	and.w	r3, r3, #8
 8007cec:	2b08      	cmp	r3, #8
 8007cee:	d110      	bne.n	8007d12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2208      	movs	r2, #8
 8007cf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f000 f839 	bl	8007d70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2208      	movs	r2, #8
 8007d02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e029      	b.n	8007d66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	69db      	ldr	r3, [r3, #28]
 8007d18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d20:	d111      	bne.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f000 f81f 	bl	8007d70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2220      	movs	r2, #32
 8007d36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e00f      	b.n	8007d66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	69da      	ldr	r2, [r3, #28]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	4013      	ands	r3, r2
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	bf0c      	ite	eq
 8007d56:	2301      	moveq	r3, #1
 8007d58:	2300      	movne	r3, #0
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	79fb      	ldrb	r3, [r7, #7]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d0a0      	beq.n	8007ca6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
	...

08007d70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b095      	sub	sp, #84	@ 0x54
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d80:	e853 3f00 	ldrex	r3, [r3]
 8007d84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	461a      	mov	r2, r3
 8007d94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d96:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d98:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d9e:	e841 2300 	strex	r3, r2, [r1]
 8007da2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1e6      	bne.n	8007d78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	3308      	adds	r3, #8
 8007db0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db2:	6a3b      	ldr	r3, [r7, #32]
 8007db4:	e853 3f00 	ldrex	r3, [r3]
 8007db8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dba:	69fa      	ldr	r2, [r7, #28]
 8007dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8007e38 <UART_EndRxTransfer+0xc8>)
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	3308      	adds	r3, #8
 8007dc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007dca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007dd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dd2:	e841 2300 	strex	r3, r2, [r1]
 8007dd6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1e5      	bne.n	8007daa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d118      	bne.n	8007e18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	e853 3f00 	ldrex	r3, [r3]
 8007df2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	f023 0310 	bic.w	r3, r3, #16
 8007dfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	461a      	mov	r2, r3
 8007e02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e04:	61bb      	str	r3, [r7, #24]
 8007e06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e08:	6979      	ldr	r1, [r7, #20]
 8007e0a:	69ba      	ldr	r2, [r7, #24]
 8007e0c:	e841 2300 	strex	r3, r2, [r1]
 8007e10:	613b      	str	r3, [r7, #16]
   return(result);
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1e6      	bne.n	8007de6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2220      	movs	r2, #32
 8007e1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007e2c:	bf00      	nop
 8007e2e:	3754      	adds	r7, #84	@ 0x54
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	effffffe 	.word	0xeffffffe

08007e3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d101      	bne.n	8007e52 <HAL_UARTEx_DisableFifoMode+0x16>
 8007e4e:	2302      	movs	r3, #2
 8007e50:	e027      	b.n	8007ea2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2224      	movs	r2, #36	@ 0x24
 8007e5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f022 0201 	bic.w	r2, r2, #1
 8007e78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007e80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2220      	movs	r2, #32
 8007e94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b084      	sub	sp, #16
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
 8007eb6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d101      	bne.n	8007ec6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	e02d      	b.n	8007f22 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2224      	movs	r2, #36	@ 0x24
 8007ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f022 0201 	bic.w	r2, r2, #1
 8007eec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	683a      	ldr	r2, [r7, #0]
 8007efe:	430a      	orrs	r2, r1
 8007f00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f850 	bl	8007fa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2220      	movs	r2, #32
 8007f14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b084      	sub	sp, #16
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d101      	bne.n	8007f42 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f3e:	2302      	movs	r3, #2
 8007f40:	e02d      	b.n	8007f9e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2224      	movs	r2, #36	@ 0x24
 8007f4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f022 0201 	bic.w	r2, r2, #1
 8007f68:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	683a      	ldr	r2, [r7, #0]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f812 	bl	8007fa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2220      	movs	r2, #32
 8007f90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
	...

08007fa8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d108      	bne.n	8007fca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007fc8:	e031      	b.n	800802e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007fca:	2310      	movs	r3, #16
 8007fcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007fce:	2310      	movs	r3, #16
 8007fd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	0e5b      	lsrs	r3, r3, #25
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	f003 0307 	and.w	r3, r3, #7
 8007fe0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	0f5b      	lsrs	r3, r3, #29
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	f003 0307 	and.w	r3, r3, #7
 8007ff0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ff2:	7bbb      	ldrb	r3, [r7, #14]
 8007ff4:	7b3a      	ldrb	r2, [r7, #12]
 8007ff6:	4911      	ldr	r1, [pc, #68]	@ (800803c <UARTEx_SetNbDataToProcess+0x94>)
 8007ff8:	5c8a      	ldrb	r2, [r1, r2]
 8007ffa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ffe:	7b3a      	ldrb	r2, [r7, #12]
 8008000:	490f      	ldr	r1, [pc, #60]	@ (8008040 <UARTEx_SetNbDataToProcess+0x98>)
 8008002:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008004:	fb93 f3f2 	sdiv	r3, r3, r2
 8008008:	b29a      	uxth	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008010:	7bfb      	ldrb	r3, [r7, #15]
 8008012:	7b7a      	ldrb	r2, [r7, #13]
 8008014:	4909      	ldr	r1, [pc, #36]	@ (800803c <UARTEx_SetNbDataToProcess+0x94>)
 8008016:	5c8a      	ldrb	r2, [r1, r2]
 8008018:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800801c:	7b7a      	ldrb	r2, [r7, #13]
 800801e:	4908      	ldr	r1, [pc, #32]	@ (8008040 <UARTEx_SetNbDataToProcess+0x98>)
 8008020:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008022:	fb93 f3f2 	sdiv	r3, r3, r2
 8008026:	b29a      	uxth	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800802e:	bf00      	nop
 8008030:	3714      	adds	r7, #20
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	0801446c 	.word	0x0801446c
 8008040:	08014474 	.word	0x08014474

08008044 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008044:	b084      	sub	sp, #16
 8008046:	b580      	push	{r7, lr}
 8008048:	b084      	sub	sp, #16
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
 800804e:	f107 001c 	add.w	r0, r7, #28
 8008052:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008056:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800805a:	2b01      	cmp	r3, #1
 800805c:	d121      	bne.n	80080a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008062:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68da      	ldr	r2, [r3, #12]
 800806e:	4b2c      	ldr	r3, [pc, #176]	@ (8008120 <USB_CoreInit+0xdc>)
 8008070:	4013      	ands	r3, r2
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008082:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008086:	2b01      	cmp	r3, #1
 8008088:	d105      	bne.n	8008096 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 faaa 	bl	80085f0 <USB_CoreReset>
 800809c:	4603      	mov	r3, r0
 800809e:	73fb      	strb	r3, [r7, #15]
 80080a0:	e01b      	b.n	80080da <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fa9e 	bl	80085f0 <USB_CoreReset>
 80080b4:	4603      	mov	r3, r0
 80080b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80080b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d106      	bne.n	80080ce <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80080cc:	e005      	b.n	80080da <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80080da:	7fbb      	ldrb	r3, [r7, #30]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d116      	bne.n	800810e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80080ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008124 <USB_CoreInit+0xe0>)
 80080f0:	4313      	orrs	r3, r2
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	f043 0206 	orr.w	r2, r3, #6
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	f043 0220 	orr.w	r2, r3, #32
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800810e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800811a:	b004      	add	sp, #16
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	ffbdffbf 	.word	0xffbdffbf
 8008124:	03ee0000 	.word	0x03ee0000

08008128 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	f023 0201 	bic.w	r2, r3, #1
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	370c      	adds	r7, #12
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b084      	sub	sp, #16
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	460b      	mov	r3, r1
 8008154:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008156:	2300      	movs	r3, #0
 8008158:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008166:	78fb      	ldrb	r3, [r7, #3]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d115      	bne.n	8008198 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008178:	200a      	movs	r0, #10
 800817a:	f7f9 fba1 	bl	80018c0 <HAL_Delay>
      ms += 10U;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	330a      	adds	r3, #10
 8008182:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fa25 	bl	80085d4 <USB_GetMode>
 800818a:	4603      	mov	r3, r0
 800818c:	2b01      	cmp	r3, #1
 800818e:	d01e      	beq.n	80081ce <USB_SetCurrentMode+0x84>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2bc7      	cmp	r3, #199	@ 0xc7
 8008194:	d9f0      	bls.n	8008178 <USB_SetCurrentMode+0x2e>
 8008196:	e01a      	b.n	80081ce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008198:	78fb      	ldrb	r3, [r7, #3]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d115      	bne.n	80081ca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80081aa:	200a      	movs	r0, #10
 80081ac:	f7f9 fb88 	bl	80018c0 <HAL_Delay>
      ms += 10U;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	330a      	adds	r3, #10
 80081b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fa0c 	bl	80085d4 <USB_GetMode>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d005      	beq.n	80081ce <USB_SetCurrentMode+0x84>
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2bc7      	cmp	r3, #199	@ 0xc7
 80081c6:	d9f0      	bls.n	80081aa <USB_SetCurrentMode+0x60>
 80081c8:	e001      	b.n	80081ce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e005      	b.n	80081da <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2bc8      	cmp	r3, #200	@ 0xc8
 80081d2:	d101      	bne.n	80081d8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	e000      	b.n	80081da <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
	...

080081e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081e4:	b084      	sub	sp, #16
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b086      	sub	sp, #24
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80081f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80081fe:	2300      	movs	r3, #0
 8008200:	613b      	str	r3, [r7, #16]
 8008202:	e009      	b.n	8008218 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	3340      	adds	r3, #64	@ 0x40
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4413      	add	r3, r2
 800820e:	2200      	movs	r2, #0
 8008210:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	3301      	adds	r3, #1
 8008216:	613b      	str	r3, [r7, #16]
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	2b0e      	cmp	r3, #14
 800821c:	d9f2      	bls.n	8008204 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800821e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008222:	2b00      	cmp	r3, #0
 8008224:	d11c      	bne.n	8008260 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008234:	f043 0302 	orr.w	r3, r3, #2
 8008238:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800823e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	601a      	str	r2, [r3, #0]
 800825e:	e005      	b.n	800826c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008264:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008272:	461a      	mov	r2, r3
 8008274:	2300      	movs	r3, #0
 8008276:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008278:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800827c:	2b01      	cmp	r3, #1
 800827e:	d10d      	bne.n	800829c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008280:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008284:	2b00      	cmp	r3, #0
 8008286:	d104      	bne.n	8008292 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008288:	2100      	movs	r1, #0
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f968 	bl	8008560 <USB_SetDevSpeed>
 8008290:	e008      	b.n	80082a4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008292:	2101      	movs	r1, #1
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f963 	bl	8008560 <USB_SetDevSpeed>
 800829a:	e003      	b.n	80082a4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800829c:	2103      	movs	r1, #3
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f95e 	bl	8008560 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80082a4:	2110      	movs	r1, #16
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f8fa 	bl	80084a0 <USB_FlushTxFifo>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f924 	bl	8008504 <USB_FlushRxFifo>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d001      	beq.n	80082c6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082cc:	461a      	mov	r2, r3
 80082ce:	2300      	movs	r3, #0
 80082d0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082d8:	461a      	mov	r2, r3
 80082da:	2300      	movs	r3, #0
 80082dc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082e4:	461a      	mov	r2, r3
 80082e6:	2300      	movs	r3, #0
 80082e8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082ea:	2300      	movs	r3, #0
 80082ec:	613b      	str	r3, [r7, #16]
 80082ee:	e043      	b.n	8008378 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	015a      	lsls	r2, r3, #5
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	4413      	add	r3, r2
 80082f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008302:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008306:	d118      	bne.n	800833a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10a      	bne.n	8008324 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	015a      	lsls	r2, r3, #5
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	4413      	add	r3, r2
 8008316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800831a:	461a      	mov	r2, r3
 800831c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008320:	6013      	str	r3, [r2, #0]
 8008322:	e013      	b.n	800834c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	4413      	add	r3, r2
 800832c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008330:	461a      	mov	r2, r3
 8008332:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008336:	6013      	str	r3, [r2, #0]
 8008338:	e008      	b.n	800834c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	015a      	lsls	r2, r3, #5
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	4413      	add	r3, r2
 8008342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008346:	461a      	mov	r2, r3
 8008348:	2300      	movs	r3, #0
 800834a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	4413      	add	r3, r2
 8008354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008358:	461a      	mov	r2, r3
 800835a:	2300      	movs	r3, #0
 800835c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	015a      	lsls	r2, r3, #5
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	4413      	add	r3, r2
 8008366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800836a:	461a      	mov	r2, r3
 800836c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008370:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	3301      	adds	r3, #1
 8008376:	613b      	str	r3, [r7, #16]
 8008378:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800837c:	461a      	mov	r2, r3
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	4293      	cmp	r3, r2
 8008382:	d3b5      	bcc.n	80082f0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008384:	2300      	movs	r3, #0
 8008386:	613b      	str	r3, [r7, #16]
 8008388:	e043      	b.n	8008412 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	015a      	lsls	r2, r3, #5
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	4413      	add	r3, r2
 8008392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800839c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083a0:	d118      	bne.n	80083d4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10a      	bne.n	80083be <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	015a      	lsls	r2, r3, #5
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	4413      	add	r3, r2
 80083b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083b4:	461a      	mov	r2, r3
 80083b6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80083ba:	6013      	str	r3, [r2, #0]
 80083bc:	e013      	b.n	80083e6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	015a      	lsls	r2, r3, #5
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	4413      	add	r3, r2
 80083c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083ca:	461a      	mov	r2, r3
 80083cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80083d0:	6013      	str	r3, [r2, #0]
 80083d2:	e008      	b.n	80083e6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	015a      	lsls	r2, r3, #5
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	4413      	add	r3, r2
 80083dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083e0:	461a      	mov	r2, r3
 80083e2:	2300      	movs	r3, #0
 80083e4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	015a      	lsls	r2, r3, #5
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083f2:	461a      	mov	r2, r3
 80083f4:	2300      	movs	r3, #0
 80083f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	015a      	lsls	r2, r3, #5
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	4413      	add	r3, r2
 8008400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008404:	461a      	mov	r2, r3
 8008406:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800840a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	3301      	adds	r3, #1
 8008410:	613b      	str	r3, [r7, #16]
 8008412:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008416:	461a      	mov	r2, r3
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	4293      	cmp	r3, r2
 800841c:	d3b5      	bcc.n	800838a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800842c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008430:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800843e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008440:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008444:	2b00      	cmp	r3, #0
 8008446:	d105      	bne.n	8008454 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	699b      	ldr	r3, [r3, #24]
 800844c:	f043 0210 	orr.w	r2, r3, #16
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	699a      	ldr	r2, [r3, #24]
 8008458:	4b0f      	ldr	r3, [pc, #60]	@ (8008498 <USB_DevInit+0x2b4>)
 800845a:	4313      	orrs	r3, r2
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008460:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008464:	2b00      	cmp	r3, #0
 8008466:	d005      	beq.n	8008474 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	699b      	ldr	r3, [r3, #24]
 800846c:	f043 0208 	orr.w	r2, r3, #8
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008474:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008478:	2b01      	cmp	r3, #1
 800847a:	d105      	bne.n	8008488 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	699a      	ldr	r2, [r3, #24]
 8008480:	4b06      	ldr	r3, [pc, #24]	@ (800849c <USB_DevInit+0x2b8>)
 8008482:	4313      	orrs	r3, r2
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008488:	7dfb      	ldrb	r3, [r7, #23]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3718      	adds	r7, #24
 800848e:	46bd      	mov	sp, r7
 8008490:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008494:	b004      	add	sp, #16
 8008496:	4770      	bx	lr
 8008498:	803c3800 	.word	0x803c3800
 800849c:	40000004 	.word	0x40000004

080084a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80084aa:	2300      	movs	r3, #0
 80084ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3301      	adds	r3, #1
 80084b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084ba:	d901      	bls.n	80084c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80084bc:	2303      	movs	r3, #3
 80084be:	e01b      	b.n	80084f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	daf2      	bge.n	80084ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80084c8:	2300      	movs	r3, #0
 80084ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	019b      	lsls	r3, r3, #6
 80084d0:	f043 0220 	orr.w	r2, r3, #32
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	3301      	adds	r3, #1
 80084dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084e4:	d901      	bls.n	80084ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80084e6:	2303      	movs	r3, #3
 80084e8:	e006      	b.n	80084f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	f003 0320 	and.w	r3, r3, #32
 80084f2:	2b20      	cmp	r3, #32
 80084f4:	d0f0      	beq.n	80084d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800850c:	2300      	movs	r3, #0
 800850e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	3301      	adds	r3, #1
 8008514:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800851c:	d901      	bls.n	8008522 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800851e:	2303      	movs	r3, #3
 8008520:	e018      	b.n	8008554 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	2b00      	cmp	r3, #0
 8008528:	daf2      	bge.n	8008510 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800852a:	2300      	movs	r3, #0
 800852c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2210      	movs	r2, #16
 8008532:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	3301      	adds	r3, #1
 8008538:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008540:	d901      	bls.n	8008546 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e006      	b.n	8008554 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	f003 0310 	and.w	r3, r3, #16
 800854e:	2b10      	cmp	r3, #16
 8008550:	d0f0      	beq.n	8008534 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	460b      	mov	r3, r1
 800856a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	78fb      	ldrb	r3, [r7, #3]
 800857a:	68f9      	ldr	r1, [r7, #12]
 800857c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008580:	4313      	orrs	r3, r2
 8008582:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3714      	adds	r7, #20
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008592:	b480      	push	{r7}
 8008594:	b085      	sub	sp, #20
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80085ac:	f023 0303 	bic.w	r3, r3, #3
 80085b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80085c0:	f043 0302 	orr.w	r3, r3, #2
 80085c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	695b      	ldr	r3, [r3, #20]
 80085e0:	f003 0301 	and.w	r3, r3, #1
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085f8:	2300      	movs	r3, #0
 80085fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	3301      	adds	r3, #1
 8008600:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008608:	d901      	bls.n	800860e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e01b      	b.n	8008646 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	2b00      	cmp	r3, #0
 8008614:	daf2      	bge.n	80085fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008616:	2300      	movs	r3, #0
 8008618:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	f043 0201 	orr.w	r2, r3, #1
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	3301      	adds	r3, #1
 800862a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008632:	d901      	bls.n	8008638 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008634:	2303      	movs	r3, #3
 8008636:	e006      	b.n	8008646 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	f003 0301 	and.w	r3, r3, #1
 8008640:	2b01      	cmp	r3, #1
 8008642:	d0f0      	beq.n	8008626 <USB_CoreReset+0x36>

  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
	...

08008654 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800865a:	4b92      	ldr	r3, [pc, #584]	@ (80088a4 <MX_LWIP_Init+0x250>)
 800865c:	22c0      	movs	r2, #192	@ 0xc0
 800865e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8008660:	4b90      	ldr	r3, [pc, #576]	@ (80088a4 <MX_LWIP_Init+0x250>)
 8008662:	22a8      	movs	r2, #168	@ 0xa8
 8008664:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 100;
 8008666:	4b8f      	ldr	r3, [pc, #572]	@ (80088a4 <MX_LWIP_Init+0x250>)
 8008668:	2264      	movs	r2, #100	@ 0x64
 800866a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800866c:	4b8d      	ldr	r3, [pc, #564]	@ (80088a4 <MX_LWIP_Init+0x250>)
 800866e:	220a      	movs	r2, #10
 8008670:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8008672:	4b8d      	ldr	r3, [pc, #564]	@ (80088a8 <MX_LWIP_Init+0x254>)
 8008674:	22ff      	movs	r2, #255	@ 0xff
 8008676:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8008678:	4b8b      	ldr	r3, [pc, #556]	@ (80088a8 <MX_LWIP_Init+0x254>)
 800867a:	22ff      	movs	r2, #255	@ 0xff
 800867c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800867e:	4b8a      	ldr	r3, [pc, #552]	@ (80088a8 <MX_LWIP_Init+0x254>)
 8008680:	22ff      	movs	r2, #255	@ 0xff
 8008682:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008684:	4b88      	ldr	r3, [pc, #544]	@ (80088a8 <MX_LWIP_Init+0x254>)
 8008686:	2200      	movs	r2, #0
 8008688:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800868a:	4b88      	ldr	r3, [pc, #544]	@ (80088ac <MX_LWIP_Init+0x258>)
 800868c:	22c0      	movs	r2, #192	@ 0xc0
 800868e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8008690:	4b86      	ldr	r3, [pc, #536]	@ (80088ac <MX_LWIP_Init+0x258>)
 8008692:	22a8      	movs	r2, #168	@ 0xa8
 8008694:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 100;
 8008696:	4b85      	ldr	r3, [pc, #532]	@ (80088ac <MX_LWIP_Init+0x258>)
 8008698:	2264      	movs	r2, #100	@ 0x64
 800869a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800869c:	4b83      	ldr	r3, [pc, #524]	@ (80088ac <MX_LWIP_Init+0x258>)
 800869e:	2201      	movs	r2, #1
 80086a0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80086a2:	2100      	movs	r1, #0
 80086a4:	2000      	movs	r0, #0
 80086a6:	f004 fdd7 	bl	800d258 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80086aa:	4b7e      	ldr	r3, [pc, #504]	@ (80088a4 <MX_LWIP_Init+0x250>)
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	061a      	lsls	r2, r3, #24
 80086b0:	4b7c      	ldr	r3, [pc, #496]	@ (80088a4 <MX_LWIP_Init+0x250>)
 80086b2:	785b      	ldrb	r3, [r3, #1]
 80086b4:	041b      	lsls	r3, r3, #16
 80086b6:	431a      	orrs	r2, r3
 80086b8:	4b7a      	ldr	r3, [pc, #488]	@ (80088a4 <MX_LWIP_Init+0x250>)
 80086ba:	789b      	ldrb	r3, [r3, #2]
 80086bc:	021b      	lsls	r3, r3, #8
 80086be:	4313      	orrs	r3, r2
 80086c0:	4a78      	ldr	r2, [pc, #480]	@ (80088a4 <MX_LWIP_Init+0x250>)
 80086c2:	78d2      	ldrb	r2, [r2, #3]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	061a      	lsls	r2, r3, #24
 80086c8:	4b76      	ldr	r3, [pc, #472]	@ (80088a4 <MX_LWIP_Init+0x250>)
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	0619      	lsls	r1, r3, #24
 80086ce:	4b75      	ldr	r3, [pc, #468]	@ (80088a4 <MX_LWIP_Init+0x250>)
 80086d0:	785b      	ldrb	r3, [r3, #1]
 80086d2:	041b      	lsls	r3, r3, #16
 80086d4:	4319      	orrs	r1, r3
 80086d6:	4b73      	ldr	r3, [pc, #460]	@ (80088a4 <MX_LWIP_Init+0x250>)
 80086d8:	789b      	ldrb	r3, [r3, #2]
 80086da:	021b      	lsls	r3, r3, #8
 80086dc:	430b      	orrs	r3, r1
 80086de:	4971      	ldr	r1, [pc, #452]	@ (80088a4 <MX_LWIP_Init+0x250>)
 80086e0:	78c9      	ldrb	r1, [r1, #3]
 80086e2:	430b      	orrs	r3, r1
 80086e4:	021b      	lsls	r3, r3, #8
 80086e6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80086ea:	431a      	orrs	r2, r3
 80086ec:	4b6d      	ldr	r3, [pc, #436]	@ (80088a4 <MX_LWIP_Init+0x250>)
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	0619      	lsls	r1, r3, #24
 80086f2:	4b6c      	ldr	r3, [pc, #432]	@ (80088a4 <MX_LWIP_Init+0x250>)
 80086f4:	785b      	ldrb	r3, [r3, #1]
 80086f6:	041b      	lsls	r3, r3, #16
 80086f8:	4319      	orrs	r1, r3
 80086fa:	4b6a      	ldr	r3, [pc, #424]	@ (80088a4 <MX_LWIP_Init+0x250>)
 80086fc:	789b      	ldrb	r3, [r3, #2]
 80086fe:	021b      	lsls	r3, r3, #8
 8008700:	430b      	orrs	r3, r1
 8008702:	4968      	ldr	r1, [pc, #416]	@ (80088a4 <MX_LWIP_Init+0x250>)
 8008704:	78c9      	ldrb	r1, [r1, #3]
 8008706:	430b      	orrs	r3, r1
 8008708:	0a1b      	lsrs	r3, r3, #8
 800870a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800870e:	431a      	orrs	r2, r3
 8008710:	4b64      	ldr	r3, [pc, #400]	@ (80088a4 <MX_LWIP_Init+0x250>)
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	0619      	lsls	r1, r3, #24
 8008716:	4b63      	ldr	r3, [pc, #396]	@ (80088a4 <MX_LWIP_Init+0x250>)
 8008718:	785b      	ldrb	r3, [r3, #1]
 800871a:	041b      	lsls	r3, r3, #16
 800871c:	4319      	orrs	r1, r3
 800871e:	4b61      	ldr	r3, [pc, #388]	@ (80088a4 <MX_LWIP_Init+0x250>)
 8008720:	789b      	ldrb	r3, [r3, #2]
 8008722:	021b      	lsls	r3, r3, #8
 8008724:	430b      	orrs	r3, r1
 8008726:	495f      	ldr	r1, [pc, #380]	@ (80088a4 <MX_LWIP_Init+0x250>)
 8008728:	78c9      	ldrb	r1, [r1, #3]
 800872a:	430b      	orrs	r3, r1
 800872c:	0e1b      	lsrs	r3, r3, #24
 800872e:	4313      	orrs	r3, r2
 8008730:	4a5f      	ldr	r2, [pc, #380]	@ (80088b0 <MX_LWIP_Init+0x25c>)
 8008732:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008734:	4b5c      	ldr	r3, [pc, #368]	@ (80088a8 <MX_LWIP_Init+0x254>)
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	061a      	lsls	r2, r3, #24
 800873a:	4b5b      	ldr	r3, [pc, #364]	@ (80088a8 <MX_LWIP_Init+0x254>)
 800873c:	785b      	ldrb	r3, [r3, #1]
 800873e:	041b      	lsls	r3, r3, #16
 8008740:	431a      	orrs	r2, r3
 8008742:	4b59      	ldr	r3, [pc, #356]	@ (80088a8 <MX_LWIP_Init+0x254>)
 8008744:	789b      	ldrb	r3, [r3, #2]
 8008746:	021b      	lsls	r3, r3, #8
 8008748:	4313      	orrs	r3, r2
 800874a:	4a57      	ldr	r2, [pc, #348]	@ (80088a8 <MX_LWIP_Init+0x254>)
 800874c:	78d2      	ldrb	r2, [r2, #3]
 800874e:	4313      	orrs	r3, r2
 8008750:	061a      	lsls	r2, r3, #24
 8008752:	4b55      	ldr	r3, [pc, #340]	@ (80088a8 <MX_LWIP_Init+0x254>)
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	0619      	lsls	r1, r3, #24
 8008758:	4b53      	ldr	r3, [pc, #332]	@ (80088a8 <MX_LWIP_Init+0x254>)
 800875a:	785b      	ldrb	r3, [r3, #1]
 800875c:	041b      	lsls	r3, r3, #16
 800875e:	4319      	orrs	r1, r3
 8008760:	4b51      	ldr	r3, [pc, #324]	@ (80088a8 <MX_LWIP_Init+0x254>)
 8008762:	789b      	ldrb	r3, [r3, #2]
 8008764:	021b      	lsls	r3, r3, #8
 8008766:	430b      	orrs	r3, r1
 8008768:	494f      	ldr	r1, [pc, #316]	@ (80088a8 <MX_LWIP_Init+0x254>)
 800876a:	78c9      	ldrb	r1, [r1, #3]
 800876c:	430b      	orrs	r3, r1
 800876e:	021b      	lsls	r3, r3, #8
 8008770:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008774:	431a      	orrs	r2, r3
 8008776:	4b4c      	ldr	r3, [pc, #304]	@ (80088a8 <MX_LWIP_Init+0x254>)
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	0619      	lsls	r1, r3, #24
 800877c:	4b4a      	ldr	r3, [pc, #296]	@ (80088a8 <MX_LWIP_Init+0x254>)
 800877e:	785b      	ldrb	r3, [r3, #1]
 8008780:	041b      	lsls	r3, r3, #16
 8008782:	4319      	orrs	r1, r3
 8008784:	4b48      	ldr	r3, [pc, #288]	@ (80088a8 <MX_LWIP_Init+0x254>)
 8008786:	789b      	ldrb	r3, [r3, #2]
 8008788:	021b      	lsls	r3, r3, #8
 800878a:	430b      	orrs	r3, r1
 800878c:	4946      	ldr	r1, [pc, #280]	@ (80088a8 <MX_LWIP_Init+0x254>)
 800878e:	78c9      	ldrb	r1, [r1, #3]
 8008790:	430b      	orrs	r3, r1
 8008792:	0a1b      	lsrs	r3, r3, #8
 8008794:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008798:	431a      	orrs	r2, r3
 800879a:	4b43      	ldr	r3, [pc, #268]	@ (80088a8 <MX_LWIP_Init+0x254>)
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	0619      	lsls	r1, r3, #24
 80087a0:	4b41      	ldr	r3, [pc, #260]	@ (80088a8 <MX_LWIP_Init+0x254>)
 80087a2:	785b      	ldrb	r3, [r3, #1]
 80087a4:	041b      	lsls	r3, r3, #16
 80087a6:	4319      	orrs	r1, r3
 80087a8:	4b3f      	ldr	r3, [pc, #252]	@ (80088a8 <MX_LWIP_Init+0x254>)
 80087aa:	789b      	ldrb	r3, [r3, #2]
 80087ac:	021b      	lsls	r3, r3, #8
 80087ae:	430b      	orrs	r3, r1
 80087b0:	493d      	ldr	r1, [pc, #244]	@ (80088a8 <MX_LWIP_Init+0x254>)
 80087b2:	78c9      	ldrb	r1, [r1, #3]
 80087b4:	430b      	orrs	r3, r1
 80087b6:	0e1b      	lsrs	r3, r3, #24
 80087b8:	4313      	orrs	r3, r2
 80087ba:	4a3e      	ldr	r2, [pc, #248]	@ (80088b4 <MX_LWIP_Init+0x260>)
 80087bc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80087be:	4b3b      	ldr	r3, [pc, #236]	@ (80088ac <MX_LWIP_Init+0x258>)
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	061a      	lsls	r2, r3, #24
 80087c4:	4b39      	ldr	r3, [pc, #228]	@ (80088ac <MX_LWIP_Init+0x258>)
 80087c6:	785b      	ldrb	r3, [r3, #1]
 80087c8:	041b      	lsls	r3, r3, #16
 80087ca:	431a      	orrs	r2, r3
 80087cc:	4b37      	ldr	r3, [pc, #220]	@ (80088ac <MX_LWIP_Init+0x258>)
 80087ce:	789b      	ldrb	r3, [r3, #2]
 80087d0:	021b      	lsls	r3, r3, #8
 80087d2:	4313      	orrs	r3, r2
 80087d4:	4a35      	ldr	r2, [pc, #212]	@ (80088ac <MX_LWIP_Init+0x258>)
 80087d6:	78d2      	ldrb	r2, [r2, #3]
 80087d8:	4313      	orrs	r3, r2
 80087da:	061a      	lsls	r2, r3, #24
 80087dc:	4b33      	ldr	r3, [pc, #204]	@ (80088ac <MX_LWIP_Init+0x258>)
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	0619      	lsls	r1, r3, #24
 80087e2:	4b32      	ldr	r3, [pc, #200]	@ (80088ac <MX_LWIP_Init+0x258>)
 80087e4:	785b      	ldrb	r3, [r3, #1]
 80087e6:	041b      	lsls	r3, r3, #16
 80087e8:	4319      	orrs	r1, r3
 80087ea:	4b30      	ldr	r3, [pc, #192]	@ (80088ac <MX_LWIP_Init+0x258>)
 80087ec:	789b      	ldrb	r3, [r3, #2]
 80087ee:	021b      	lsls	r3, r3, #8
 80087f0:	430b      	orrs	r3, r1
 80087f2:	492e      	ldr	r1, [pc, #184]	@ (80088ac <MX_LWIP_Init+0x258>)
 80087f4:	78c9      	ldrb	r1, [r1, #3]
 80087f6:	430b      	orrs	r3, r1
 80087f8:	021b      	lsls	r3, r3, #8
 80087fa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80087fe:	431a      	orrs	r2, r3
 8008800:	4b2a      	ldr	r3, [pc, #168]	@ (80088ac <MX_LWIP_Init+0x258>)
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	0619      	lsls	r1, r3, #24
 8008806:	4b29      	ldr	r3, [pc, #164]	@ (80088ac <MX_LWIP_Init+0x258>)
 8008808:	785b      	ldrb	r3, [r3, #1]
 800880a:	041b      	lsls	r3, r3, #16
 800880c:	4319      	orrs	r1, r3
 800880e:	4b27      	ldr	r3, [pc, #156]	@ (80088ac <MX_LWIP_Init+0x258>)
 8008810:	789b      	ldrb	r3, [r3, #2]
 8008812:	021b      	lsls	r3, r3, #8
 8008814:	430b      	orrs	r3, r1
 8008816:	4925      	ldr	r1, [pc, #148]	@ (80088ac <MX_LWIP_Init+0x258>)
 8008818:	78c9      	ldrb	r1, [r1, #3]
 800881a:	430b      	orrs	r3, r1
 800881c:	0a1b      	lsrs	r3, r3, #8
 800881e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008822:	431a      	orrs	r2, r3
 8008824:	4b21      	ldr	r3, [pc, #132]	@ (80088ac <MX_LWIP_Init+0x258>)
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	0619      	lsls	r1, r3, #24
 800882a:	4b20      	ldr	r3, [pc, #128]	@ (80088ac <MX_LWIP_Init+0x258>)
 800882c:	785b      	ldrb	r3, [r3, #1]
 800882e:	041b      	lsls	r3, r3, #16
 8008830:	4319      	orrs	r1, r3
 8008832:	4b1e      	ldr	r3, [pc, #120]	@ (80088ac <MX_LWIP_Init+0x258>)
 8008834:	789b      	ldrb	r3, [r3, #2]
 8008836:	021b      	lsls	r3, r3, #8
 8008838:	430b      	orrs	r3, r1
 800883a:	491c      	ldr	r1, [pc, #112]	@ (80088ac <MX_LWIP_Init+0x258>)
 800883c:	78c9      	ldrb	r1, [r1, #3]
 800883e:	430b      	orrs	r3, r1
 8008840:	0e1b      	lsrs	r3, r3, #24
 8008842:	4313      	orrs	r3, r2
 8008844:	4a1c      	ldr	r2, [pc, #112]	@ (80088b8 <MX_LWIP_Init+0x264>)
 8008846:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8008848:	4b1c      	ldr	r3, [pc, #112]	@ (80088bc <MX_LWIP_Init+0x268>)
 800884a:	9302      	str	r3, [sp, #8]
 800884c:	4b1c      	ldr	r3, [pc, #112]	@ (80088c0 <MX_LWIP_Init+0x26c>)
 800884e:	9301      	str	r3, [sp, #4]
 8008850:	2300      	movs	r3, #0
 8008852:	9300      	str	r3, [sp, #0]
 8008854:	4b18      	ldr	r3, [pc, #96]	@ (80088b8 <MX_LWIP_Init+0x264>)
 8008856:	4a17      	ldr	r2, [pc, #92]	@ (80088b4 <MX_LWIP_Init+0x260>)
 8008858:	4915      	ldr	r1, [pc, #84]	@ (80088b0 <MX_LWIP_Init+0x25c>)
 800885a:	481a      	ldr	r0, [pc, #104]	@ (80088c4 <MX_LWIP_Init+0x270>)
 800885c:	f005 fb36 	bl	800decc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008860:	4818      	ldr	r0, [pc, #96]	@ (80088c4 <MX_LWIP_Init+0x270>)
 8008862:	f005 fce1 	bl	800e228 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8008866:	4817      	ldr	r0, [pc, #92]	@ (80088c4 <MX_LWIP_Init+0x270>)
 8008868:	f005 fcee 	bl	800e248 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800886c:	4916      	ldr	r1, [pc, #88]	@ (80088c8 <MX_LWIP_Init+0x274>)
 800886e:	4815      	ldr	r0, [pc, #84]	@ (80088c4 <MX_LWIP_Init+0x270>)
 8008870:	f005 fdec 	bl	800e44c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8008874:	2224      	movs	r2, #36	@ 0x24
 8008876:	2100      	movs	r1, #0
 8008878:	4814      	ldr	r0, [pc, #80]	@ (80088cc <MX_LWIP_Init+0x278>)
 800887a:	f009 fb5e 	bl	8011f3a <memset>
  attributes.name = "EthLink";
 800887e:	4b13      	ldr	r3, [pc, #76]	@ (80088cc <MX_LWIP_Init+0x278>)
 8008880:	4a13      	ldr	r2, [pc, #76]	@ (80088d0 <MX_LWIP_Init+0x27c>)
 8008882:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8008884:	4b11      	ldr	r3, [pc, #68]	@ (80088cc <MX_LWIP_Init+0x278>)
 8008886:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800888a:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800888c:	4b0f      	ldr	r3, [pc, #60]	@ (80088cc <MX_LWIP_Init+0x278>)
 800888e:	2210      	movs	r2, #16
 8008890:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8008892:	4a0e      	ldr	r2, [pc, #56]	@ (80088cc <MX_LWIP_Init+0x278>)
 8008894:	490b      	ldr	r1, [pc, #44]	@ (80088c4 <MX_LWIP_Init+0x270>)
 8008896:	480f      	ldr	r0, [pc, #60]	@ (80088d4 <MX_LWIP_Init+0x280>)
 8008898:	f000 fd87 	bl	80093aa <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800889c:	bf00      	nop
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	240006c4 	.word	0x240006c4
 80088a8:	240006c8 	.word	0x240006c8
 80088ac:	240006cc 	.word	0x240006cc
 80088b0:	240006b8 	.word	0x240006b8
 80088b4:	240006bc 	.word	0x240006bc
 80088b8:	240006c0 	.word	0x240006c0
 80088bc:	0800d215 	.word	0x0800d215
 80088c0:	08008d19 	.word	0x08008d19
 80088c4:	24000684 	.word	0x24000684
 80088c8:	080088d9 	.word	0x080088d9
 80088cc:	240006d0 	.word	0x240006d0
 80088d0:	08012d98 	.word	0x08012d98
 80088d4:	08008ffd 	.word	0x08008ffd

080088d8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80088e0:	bf00      	nop
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b0aa      	sub	sp, #168	@ 0xa8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 80088fa:	2300      	movs	r3, #0
 80088fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 8008900:	2300      	movs	r3, #0
 8008902:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8008906:	f107 0310 	add.w	r3, r7, #16
 800890a:	2264      	movs	r2, #100	@ 0x64
 800890c:	2100      	movs	r1, #0
 800890e:	4618      	mov	r0, r3
 8008910:	f009 fb13 	bl	8011f3a <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008914:	4b85      	ldr	r3, [pc, #532]	@ (8008b2c <low_level_init+0x240>)
 8008916:	4a86      	ldr	r2, [pc, #536]	@ (8008b30 <low_level_init+0x244>)
 8008918:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800891a:	2300      	movs	r3, #0
 800891c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800891e:	2380      	movs	r3, #128	@ 0x80
 8008920:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8008922:	23e1      	movs	r3, #225	@ 0xe1
 8008924:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8008926:	2300      	movs	r3, #0
 8008928:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800892a:	2300      	movs	r3, #0
 800892c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800892e:	2300      	movs	r3, #0
 8008930:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008932:	4a7e      	ldr	r2, [pc, #504]	@ (8008b2c <low_level_init+0x240>)
 8008934:	f107 0308 	add.w	r3, r7, #8
 8008938:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800893a:	4b7c      	ldr	r3, [pc, #496]	@ (8008b2c <low_level_init+0x240>)
 800893c:	2201      	movs	r2, #1
 800893e:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8008940:	4b7a      	ldr	r3, [pc, #488]	@ (8008b2c <low_level_init+0x240>)
 8008942:	4a7c      	ldr	r2, [pc, #496]	@ (8008b34 <low_level_init+0x248>)
 8008944:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8008946:	4b79      	ldr	r3, [pc, #484]	@ (8008b2c <low_level_init+0x240>)
 8008948:	4a7b      	ldr	r2, [pc, #492]	@ (8008b38 <low_level_init+0x24c>)
 800894a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800894c:	4b77      	ldr	r3, [pc, #476]	@ (8008b2c <low_level_init+0x240>)
 800894e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8008952:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008954:	4875      	ldr	r0, [pc, #468]	@ (8008b2c <low_level_init+0x240>)
 8008956:	f7f9 f94f 	bl	8001bf8 <HAL_ETH_Init>
 800895a:	4603      	mov	r3, r0
 800895c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8008960:	2238      	movs	r2, #56	@ 0x38
 8008962:	2100      	movs	r1, #0
 8008964:	4875      	ldr	r0, [pc, #468]	@ (8008b3c <low_level_init+0x250>)
 8008966:	f009 fae8 	bl	8011f3a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800896a:	4b74      	ldr	r3, [pc, #464]	@ (8008b3c <low_level_init+0x250>)
 800896c:	2221      	movs	r2, #33	@ 0x21
 800896e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8008970:	4b72      	ldr	r3, [pc, #456]	@ (8008b3c <low_level_init+0x250>)
 8008972:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8008976:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8008978:	4b70      	ldr	r3, [pc, #448]	@ (8008b3c <low_level_init+0x250>)
 800897a:	2200      	movs	r2, #0
 800897c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800897e:	4870      	ldr	r0, [pc, #448]	@ (8008b40 <low_level_init+0x254>)
 8008980:	f005 f96c 	bl	800dc5c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2206      	movs	r2, #6
 8008988:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800898c:	4b67      	ldr	r3, [pc, #412]	@ (8008b2c <low_level_init+0x240>)
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	781a      	ldrb	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008998:	4b64      	ldr	r3, [pc, #400]	@ (8008b2c <low_level_init+0x240>)
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	785a      	ldrb	r2, [r3, #1]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80089a4:	4b61      	ldr	r3, [pc, #388]	@ (8008b2c <low_level_init+0x240>)
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	789a      	ldrb	r2, [r3, #2]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80089b0:	4b5e      	ldr	r3, [pc, #376]	@ (8008b2c <low_level_init+0x240>)
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	78da      	ldrb	r2, [r3, #3]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80089bc:	4b5b      	ldr	r3, [pc, #364]	@ (8008b2c <low_level_init+0x240>)
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	791a      	ldrb	r2, [r3, #4]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80089c8:	4b58      	ldr	r3, [pc, #352]	@ (8008b2c <low_level_init+0x240>)
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	795a      	ldrb	r2, [r3, #5]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80089da:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80089e2:	f043 030a 	orr.w	r3, r3, #10
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 80089ee:	2200      	movs	r2, #0
 80089f0:	2100      	movs	r1, #0
 80089f2:	2001      	movs	r0, #1
 80089f4:	f000 fe94 	bl	8009720 <osSemaphoreNew>
 80089f8:	4603      	mov	r3, r0
 80089fa:	4a52      	ldr	r2, [pc, #328]	@ (8008b44 <low_level_init+0x258>)
 80089fc:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 80089fe:	2200      	movs	r2, #0
 8008a00:	2100      	movs	r1, #0
 8008a02:	2001      	movs	r0, #1
 8008a04:	f000 fe8c 	bl	8009720 <osSemaphoreNew>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	4a4f      	ldr	r2, [pc, #316]	@ (8008b48 <low_level_init+0x25c>)
 8008a0c:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8008a0e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8008a12:	2224      	movs	r2, #36	@ 0x24
 8008a14:	2100      	movs	r1, #0
 8008a16:	4618      	mov	r0, r3
 8008a18:	f009 fa8f 	bl	8011f3a <memset>
  attributes.name = "EthIf";
 8008a1c:	4b4b      	ldr	r3, [pc, #300]	@ (8008b4c <low_level_init+0x260>)
 8008a1e:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8008a20:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8008a24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8008a28:	2330      	movs	r3, #48	@ 0x30
 8008a2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8008a2e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8008a32:	461a      	mov	r2, r3
 8008a34:	6879      	ldr	r1, [r7, #4]
 8008a36:	4846      	ldr	r0, [pc, #280]	@ (8008b50 <low_level_init+0x264>)
 8008a38:	f000 fcb7 	bl	80093aa <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8008a3c:	4945      	ldr	r1, [pc, #276]	@ (8008b54 <low_level_init+0x268>)
 8008a3e:	4846      	ldr	r0, [pc, #280]	@ (8008b58 <low_level_init+0x26c>)
 8008a40:	f7f8 fddb 	bl	80015fa <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8008a44:	4844      	ldr	r0, [pc, #272]	@ (8008b58 <low_level_init+0x26c>)
 8008a46:	f7f8 fe0a 	bl	800165e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8008a4a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d165      	bne.n	8008b1e <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008a52:	4841      	ldr	r0, [pc, #260]	@ (8008b58 <low_level_init+0x26c>)
 8008a54:	f7f8 fe50 	bl	80016f8 <LAN8742_GetLinkState>
 8008a58:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8008a5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	dc06      	bgt.n	8008a72 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f005 fcc1 	bl	800e3ec <netif_set_link_down>
      netif_set_down(netif);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f005 fc58 	bl	800e320 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008a70:	e057      	b.n	8008b22 <low_level_init+0x236>
      switch (PHYLinkState)
 8008a72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a76:	3b02      	subs	r3, #2
 8008a78:	2b03      	cmp	r3, #3
 8008a7a:	d82b      	bhi.n	8008ad4 <low_level_init+0x1e8>
 8008a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8008a84 <low_level_init+0x198>)
 8008a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a82:	bf00      	nop
 8008a84:	08008a95 	.word	0x08008a95
 8008a88:	08008aa7 	.word	0x08008aa7
 8008a8c:	08008ab7 	.word	0x08008ab7
 8008a90:	08008ac7 	.word	0x08008ac7
        duplex = ETH_FULLDUPLEX_MODE;
 8008a94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008a98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8008a9c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008aa0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8008aa4:	e01f      	b.n	8008ae6 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8008aac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008ab0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8008ab4:	e017      	b.n	8008ae6 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8008ab6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008aba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8008ac4:	e00f      	b.n	8008ae6 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8008acc:	2300      	movs	r3, #0
 8008ace:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8008ad2:	e008      	b.n	8008ae6 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8008ad4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008ad8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8008adc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008ae0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8008ae4:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008ae6:	f107 0310 	add.w	r3, r7, #16
 8008aea:	4619      	mov	r1, r3
 8008aec:	480f      	ldr	r0, [pc, #60]	@ (8008b2c <low_level_init+0x240>)
 8008aee:	f7f9 fcff 	bl	80024f0 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8008af2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008af6:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8008af8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008afc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008afe:	f107 0310 	add.w	r3, r7, #16
 8008b02:	4619      	mov	r1, r3
 8008b04:	4809      	ldr	r0, [pc, #36]	@ (8008b2c <low_level_init+0x240>)
 8008b06:	f7f9 fec7 	bl	8002898 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8008b0a:	4808      	ldr	r0, [pc, #32]	@ (8008b2c <low_level_init+0x240>)
 8008b0c:	f7f9 f972 	bl	8001df4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f005 fb99 	bl	800e248 <netif_set_up>
    netif_set_link_up(netif);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f005 fc34 	bl	800e384 <netif_set_link_up>
}
 8008b1c:	e001      	b.n	8008b22 <low_level_init+0x236>
    Error_Handler();
 8008b1e:	f7f8 f9d7 	bl	8000ed0 <Error_Handler>
}
 8008b22:	bf00      	nop
 8008b24:	37a8      	adds	r7, #168	@ 0xa8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	24005088 	.word	0x24005088
 8008b30:	40028000 	.word	0x40028000
 8008b34:	30000080 	.word	0x30000080
 8008b38:	30000000 	.word	0x30000000
 8008b3c:	24005138 	.word	0x24005138
 8008b40:	0801447c 	.word	0x0801447c
 8008b44:	24005080 	.word	0x24005080
 8008b48:	24005084 	.word	0x24005084
 8008b4c:	08012da0 	.word	0x08012da0
 8008b50:	08008cc5 	.word	0x08008cc5
 8008b54:	24000010 	.word	0x24000010
 8008b58:	24005170 	.word	0x24005170

08008b5c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b092      	sub	sp, #72	@ 0x48
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8008b66:	2300      	movs	r3, #0
 8008b68:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8008b74:	f107 030c 	add.w	r3, r7, #12
 8008b78:	2230      	movs	r2, #48	@ 0x30
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f009 f9dc 	bl	8011f3a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008b82:	f107 030c 	add.w	r3, r7, #12
 8008b86:	2230      	movs	r2, #48	@ 0x30
 8008b88:	2100      	movs	r1, #0
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f009 f9d5 	bl	8011f3a <memset>

  for(q = p; q != NULL; q = q->next)
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b94:	e045      	b.n	8008c22 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8008b96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b98:	2b03      	cmp	r3, #3
 8008b9a:	d902      	bls.n	8008ba2 <low_level_output+0x46>
      return ERR_IF;
 8008b9c:	f06f 030b 	mvn.w	r3, #11
 8008ba0:	e06c      	b.n	8008c7c <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8008ba2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ba4:	6859      	ldr	r1, [r3, #4]
 8008ba6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ba8:	4613      	mov	r3, r2
 8008baa:	005b      	lsls	r3, r3, #1
 8008bac:	4413      	add	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	3348      	adds	r3, #72	@ 0x48
 8008bb2:	443b      	add	r3, r7
 8008bb4:	3b3c      	subs	r3, #60	@ 0x3c
 8008bb6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008bb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bba:	895b      	ldrh	r3, [r3, #10]
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	005b      	lsls	r3, r3, #1
 8008bc4:	4413      	add	r3, r2
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	3348      	adds	r3, #72	@ 0x48
 8008bca:	443b      	add	r3, r7
 8008bcc:	3b38      	subs	r3, #56	@ 0x38
 8008bce:	6019      	str	r1, [r3, #0]

    if(i>0)
 8008bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d011      	beq.n	8008bfa <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8008bd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bd8:	1e5a      	subs	r2, r3, #1
 8008bda:	f107 000c 	add.w	r0, r7, #12
 8008bde:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008be0:	460b      	mov	r3, r1
 8008be2:	005b      	lsls	r3, r3, #1
 8008be4:	440b      	add	r3, r1
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	18c1      	adds	r1, r0, r3
 8008bea:	4613      	mov	r3, r2
 8008bec:	005b      	lsls	r3, r3, #1
 8008bee:	4413      	add	r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	3348      	adds	r3, #72	@ 0x48
 8008bf4:	443b      	add	r3, r7
 8008bf6:	3b34      	subs	r3, #52	@ 0x34
 8008bf8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8008bfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d109      	bne.n	8008c16 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8008c02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c04:	4613      	mov	r3, r2
 8008c06:	005b      	lsls	r3, r3, #1
 8008c08:	4413      	add	r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	3348      	adds	r3, #72	@ 0x48
 8008c0e:	443b      	add	r3, r7
 8008c10:	3b34      	subs	r3, #52	@ 0x34
 8008c12:	2200      	movs	r2, #0
 8008c14:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008c16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c18:	3301      	adds	r3, #1
 8008c1a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8008c1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d1b6      	bne.n	8008b96 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	891b      	ldrh	r3, [r3, #8]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	4b15      	ldr	r3, [pc, #84]	@ (8008c84 <low_level_output+0x128>)
 8008c30:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8008c32:	4a14      	ldr	r2, [pc, #80]	@ (8008c84 <low_level_output+0x128>)
 8008c34:	f107 030c 	add.w	r3, r7, #12
 8008c38:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8008c3a:	4a12      	ldr	r2, [pc, #72]	@ (8008c84 <low_level_output+0x128>)
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8008c40:	6838      	ldr	r0, [r7, #0]
 8008c42:	f005 ffcf 	bl	800ebe4 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 8008c46:	490f      	ldr	r1, [pc, #60]	@ (8008c84 <low_level_output+0x128>)
 8008c48:	480f      	ldr	r0, [pc, #60]	@ (8008c88 <low_level_output+0x12c>)
 8008c4a:	f7f9 f9bf 	bl	8001fcc <HAL_ETH_Transmit_IT>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d10e      	bne.n	8008c72 <low_level_output+0x116>
    while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8008c54:	bf00      	nop
 8008c56:	4b0d      	ldr	r3, [pc, #52]	@ (8008c8c <low_level_output+0x130>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f000 fde8 	bl	8009834 <osSemaphoreAcquire>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1f5      	bne.n	8008c56 <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 8008c6a:	4807      	ldr	r0, [pc, #28]	@ (8008c88 <low_level_output+0x12c>)
 8008c6c:	f7f9 fb35 	bl	80022da <HAL_ETH_ReleaseTxPacket>
 8008c70:	e002      	b.n	8008c78 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8008c72:	6838      	ldr	r0, [r7, #0]
 8008c74:	f005 ff16 	bl	800eaa4 <pbuf_free>
  }

  return errval;
 8008c78:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3748      	adds	r7, #72	@ 0x48
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	24005138 	.word	0x24005138
 8008c88:	24005088 	.word	0x24005088
 8008c8c:	24005084 	.word	0x24005084

08008c90 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8008c9c:	4b07      	ldr	r3, [pc, #28]	@ (8008cbc <low_level_input+0x2c>)
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d105      	bne.n	8008cb0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8008ca4:	f107 030c 	add.w	r3, r7, #12
 8008ca8:	4619      	mov	r1, r3
 8008caa:	4805      	ldr	r0, [pc, #20]	@ (8008cc0 <low_level_input+0x30>)
 8008cac:	f7f9 f9df 	bl	800206e <HAL_ETH_ReadData>
  }

  return p;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	2400507c 	.word	0x2400507c
 8008cc0:	24005088 	.word	0x24005088

08008cc4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8008d14 <ethernetif_input+0x50>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f000 fda9 	bl	8009834 <osSemaphoreAcquire>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d1f5      	bne.n	8008cd4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8008ce8:	68b8      	ldr	r0, [r7, #8]
 8008cea:	f7ff ffd1 	bl	8008c90 <low_level_input>
 8008cee:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00a      	beq.n	8008d0c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	68b9      	ldr	r1, [r7, #8]
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	4798      	blx	r3
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d002      	beq.n	8008d0c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	f005 fecc 	bl	800eaa4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1ea      	bne.n	8008ce8 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008d12:	e7df      	b.n	8008cd4 <ethernetif_input+0x10>
 8008d14:	24005080 	.word	0x24005080

08008d18 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d106      	bne.n	8008d34 <ethernetif_init+0x1c>
 8008d26:	4b0e      	ldr	r3, [pc, #56]	@ (8008d60 <ethernetif_init+0x48>)
 8008d28:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8008d2c:	490d      	ldr	r1, [pc, #52]	@ (8008d64 <ethernetif_init+0x4c>)
 8008d2e:	480e      	ldr	r0, [pc, #56]	@ (8008d68 <ethernetif_init+0x50>)
 8008d30:	f009 f89e 	bl	8011e70 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2273      	movs	r2, #115	@ 0x73
 8008d38:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2274      	movs	r2, #116	@ 0x74
 8008d40:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a09      	ldr	r2, [pc, #36]	@ (8008d6c <ethernetif_init+0x54>)
 8008d48:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a08      	ldr	r2, [pc, #32]	@ (8008d70 <ethernetif_init+0x58>)
 8008d4e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7ff fdcb 	bl	80088ec <low_level_init>

  return ERR_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	08012da8 	.word	0x08012da8
 8008d64:	08012dc4 	.word	0x08012dc4
 8008d68:	08012dd4 	.word	0x08012dd4
 8008d6c:	0800fd9d 	.word	0x0800fd9d
 8008d70:	08008b5d 	.word	0x08008b5d

08008d74 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008d80:	68f9      	ldr	r1, [r7, #12]
 8008d82:	4809      	ldr	r0, [pc, #36]	@ (8008da8 <pbuf_free_custom+0x34>)
 8008d84:	f005 f84c 	bl	800de20 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8008d88:	4b08      	ldr	r3, [pc, #32]	@ (8008dac <pbuf_free_custom+0x38>)
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d107      	bne.n	8008da0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8008d90:	4b06      	ldr	r3, [pc, #24]	@ (8008dac <pbuf_free_custom+0x38>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8008d96:	4b06      	ldr	r3, [pc, #24]	@ (8008db0 <pbuf_free_custom+0x3c>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 fd9c 	bl	80098d8 <osSemaphoreRelease>
  }
}
 8008da0:	bf00      	nop
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	0801447c 	.word	0x0801447c
 8008dac:	2400507c 	.word	0x2400507c
 8008db0:	24005080 	.word	0x24005080

08008db4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008db8:	f7f8 fd76 	bl	80018a8 <HAL_GetTick>
 8008dbc:	4603      	mov	r3, r0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	bd80      	pop	{r7, pc}
	...

08008dc4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b08e      	sub	sp, #56	@ 0x38
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	601a      	str	r2, [r3, #0]
 8008dd4:	605a      	str	r2, [r3, #4]
 8008dd6:	609a      	str	r2, [r3, #8]
 8008dd8:	60da      	str	r2, [r3, #12]
 8008dda:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a59      	ldr	r2, [pc, #356]	@ (8008f48 <HAL_ETH_MspInit+0x184>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	f040 80ab 	bne.w	8008f3e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8008de8:	4b58      	ldr	r3, [pc, #352]	@ (8008f4c <HAL_ETH_MspInit+0x188>)
 8008dea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008dee:	4a57      	ldr	r2, [pc, #348]	@ (8008f4c <HAL_ETH_MspInit+0x188>)
 8008df0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008df4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008df8:	4b54      	ldr	r3, [pc, #336]	@ (8008f4c <HAL_ETH_MspInit+0x188>)
 8008dfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008dfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e02:	623b      	str	r3, [r7, #32]
 8008e04:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8008e06:	4b51      	ldr	r3, [pc, #324]	@ (8008f4c <HAL_ETH_MspInit+0x188>)
 8008e08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008e0c:	4a4f      	ldr	r2, [pc, #316]	@ (8008f4c <HAL_ETH_MspInit+0x188>)
 8008e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e12:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008e16:	4b4d      	ldr	r3, [pc, #308]	@ (8008f4c <HAL_ETH_MspInit+0x188>)
 8008e18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008e1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e20:	61fb      	str	r3, [r7, #28]
 8008e22:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8008e24:	4b49      	ldr	r3, [pc, #292]	@ (8008f4c <HAL_ETH_MspInit+0x188>)
 8008e26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008e2a:	4a48      	ldr	r2, [pc, #288]	@ (8008f4c <HAL_ETH_MspInit+0x188>)
 8008e2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e30:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008e34:	4b45      	ldr	r3, [pc, #276]	@ (8008f4c <HAL_ETH_MspInit+0x188>)
 8008e36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e3e:	61bb      	str	r3, [r7, #24]
 8008e40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e42:	4b42      	ldr	r3, [pc, #264]	@ (8008f4c <HAL_ETH_MspInit+0x188>)
 8008e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e48:	4a40      	ldr	r2, [pc, #256]	@ (8008f4c <HAL_ETH_MspInit+0x188>)
 8008e4a:	f043 0304 	orr.w	r3, r3, #4
 8008e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008e52:	4b3e      	ldr	r3, [pc, #248]	@ (8008f4c <HAL_ETH_MspInit+0x188>)
 8008e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e58:	f003 0304 	and.w	r3, r3, #4
 8008e5c:	617b      	str	r3, [r7, #20]
 8008e5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e60:	4b3a      	ldr	r3, [pc, #232]	@ (8008f4c <HAL_ETH_MspInit+0x188>)
 8008e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e66:	4a39      	ldr	r2, [pc, #228]	@ (8008f4c <HAL_ETH_MspInit+0x188>)
 8008e68:	f043 0301 	orr.w	r3, r3, #1
 8008e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008e70:	4b36      	ldr	r3, [pc, #216]	@ (8008f4c <HAL_ETH_MspInit+0x188>)
 8008e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e76:	f003 0301 	and.w	r3, r3, #1
 8008e7a:	613b      	str	r3, [r7, #16]
 8008e7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e7e:	4b33      	ldr	r3, [pc, #204]	@ (8008f4c <HAL_ETH_MspInit+0x188>)
 8008e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e84:	4a31      	ldr	r2, [pc, #196]	@ (8008f4c <HAL_ETH_MspInit+0x188>)
 8008e86:	f043 0302 	orr.w	r3, r3, #2
 8008e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008e8e:	4b2f      	ldr	r3, [pc, #188]	@ (8008f4c <HAL_ETH_MspInit+0x188>)
 8008e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e94:	f003 0302 	and.w	r3, r3, #2
 8008e98:	60fb      	str	r3, [r7, #12]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008e9c:	4b2b      	ldr	r3, [pc, #172]	@ (8008f4c <HAL_ETH_MspInit+0x188>)
 8008e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8008f4c <HAL_ETH_MspInit+0x188>)
 8008ea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008eac:	4b27      	ldr	r3, [pc, #156]	@ (8008f4c <HAL_ETH_MspInit+0x188>)
 8008eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eb6:	60bb      	str	r3, [r7, #8]
 8008eb8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8008eba:	2332      	movs	r3, #50	@ 0x32
 8008ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008eca:	230b      	movs	r3, #11
 8008ecc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008ece:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	481e      	ldr	r0, [pc, #120]	@ (8008f50 <HAL_ETH_MspInit+0x18c>)
 8008ed6:	f7fa facb 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8008eda:	2386      	movs	r3, #134	@ 0x86
 8008edc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ede:	2302      	movs	r3, #2
 8008ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008eea:	230b      	movs	r3, #11
 8008eec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008eee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	4817      	ldr	r0, [pc, #92]	@ (8008f54 <HAL_ETH_MspInit+0x190>)
 8008ef6:	f7fa fabb 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008efa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008efe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f00:	2302      	movs	r3, #2
 8008f02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f04:	2300      	movs	r3, #0
 8008f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008f0c:	230b      	movs	r3, #11
 8008f0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f14:	4619      	mov	r1, r3
 8008f16:	4810      	ldr	r0, [pc, #64]	@ (8008f58 <HAL_ETH_MspInit+0x194>)
 8008f18:	f7fa faaa 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8008f1c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8008f20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f22:	2302      	movs	r3, #2
 8008f24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f26:	2300      	movs	r3, #0
 8008f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008f2e:	230b      	movs	r3, #11
 8008f30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008f32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f36:	4619      	mov	r1, r3
 8008f38:	4808      	ldr	r0, [pc, #32]	@ (8008f5c <HAL_ETH_MspInit+0x198>)
 8008f3a:	f7fa fa99 	bl	8003470 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008f3e:	bf00      	nop
 8008f40:	3738      	adds	r7, #56	@ 0x38
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	40028000 	.word	0x40028000
 8008f4c:	58024400 	.word	0x58024400
 8008f50:	58020800 	.word	0x58020800
 8008f54:	58020000 	.word	0x58020000
 8008f58:	58020400 	.word	0x58020400
 8008f5c:	58021800 	.word	0x58021800

08008f60 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008f64:	4802      	ldr	r0, [pc, #8]	@ (8008f70 <ETH_PHY_IO_Init+0x10>)
 8008f66:	f7f9 fcb1 	bl	80028cc <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	24005088 	.word	0x24005088

08008f74 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008f74:	b480      	push	{r7}
 8008f76:	af00      	add	r7, sp, #0
  return 0;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	68f9      	ldr	r1, [r7, #12]
 8008f96:	4807      	ldr	r0, [pc, #28]	@ (8008fb4 <ETH_PHY_IO_ReadReg+0x30>)
 8008f98:	f7f9 fa02 	bl	80023a0 <HAL_ETH_ReadPHYRegister>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d002      	beq.n	8008fa8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8008fa2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008fa6:	e000      	b.n	8008faa <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	24005088 	.word	0x24005088

08008fb8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	68f9      	ldr	r1, [r7, #12]
 8008fca:	4807      	ldr	r0, [pc, #28]	@ (8008fe8 <ETH_PHY_IO_WriteReg+0x30>)
 8008fcc:	f7f9 fa3c 	bl	8002448 <HAL_ETH_WritePHYRegister>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d002      	beq.n	8008fdc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8008fd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008fda:	e000      	b.n	8008fde <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	24005088 	.word	0x24005088

08008fec <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008ff0:	f7f8 fc5a 	bl	80018a8 <HAL_GetTick>
 8008ff4:	4603      	mov	r3, r0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	bd80      	pop	{r7, pc}
	...

08008ffc <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b0a0      	sub	sp, #128	@ 0x80
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8009004:	f107 0308 	add.w	r3, r7, #8
 8009008:	2264      	movs	r2, #100	@ 0x64
 800900a:	2100      	movs	r1, #0
 800900c:	4618      	mov	r0, r3
 800900e:	f008 ff94 	bl	8011f3a <memset>
  int32_t PHYLinkState = 0;
 8009012:	2300      	movs	r3, #0
 8009014:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8009016:	2300      	movs	r3, #0
 8009018:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800901a:	2300      	movs	r3, #0
 800901c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800901e:	2300      	movs	r3, #0
 8009020:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009026:	483a      	ldr	r0, [pc, #232]	@ (8009110 <ethernet_link_thread+0x114>)
 8009028:	f7f8 fb66 	bl	80016f8 <LAN8742_GetLinkState>
 800902c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800902e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009030:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009034:	089b      	lsrs	r3, r3, #2
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b00      	cmp	r3, #0
 800903e:	d00c      	beq.n	800905a <ethernet_link_thread+0x5e>
 8009040:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009042:	2b01      	cmp	r3, #1
 8009044:	dc09      	bgt.n	800905a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8009046:	4833      	ldr	r0, [pc, #204]	@ (8009114 <ethernet_link_thread+0x118>)
 8009048:	f7f8 ff48 	bl	8001edc <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800904c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800904e:	f005 f967 	bl	800e320 <netif_set_down>
    netif_set_link_down(netif);
 8009052:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009054:	f005 f9ca 	bl	800e3ec <netif_set_link_down>
 8009058:	e055      	b.n	8009106 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800905a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800905c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009060:	f003 0304 	and.w	r3, r3, #4
 8009064:	2b00      	cmp	r3, #0
 8009066:	d14e      	bne.n	8009106 <ethernet_link_thread+0x10a>
 8009068:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800906a:	2b01      	cmp	r3, #1
 800906c:	dd4b      	ble.n	8009106 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800906e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009070:	3b02      	subs	r3, #2
 8009072:	2b03      	cmp	r3, #3
 8009074:	d82a      	bhi.n	80090cc <ethernet_link_thread+0xd0>
 8009076:	a201      	add	r2, pc, #4	@ (adr r2, 800907c <ethernet_link_thread+0x80>)
 8009078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907c:	0800908d 	.word	0x0800908d
 8009080:	0800909f 	.word	0x0800909f
 8009084:	080090af 	.word	0x080090af
 8009088:	080090bf 	.word	0x080090bf
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800908c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009090:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8009092:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009096:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009098:	2301      	movs	r3, #1
 800909a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800909c:	e017      	b.n	80090ce <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800909e:	2300      	movs	r3, #0
 80090a0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80090a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80090a6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80090a8:	2301      	movs	r3, #1
 80090aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80090ac:	e00f      	b.n	80090ce <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80090ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80090b2:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80090b4:	2300      	movs	r3, #0
 80090b6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80090b8:	2301      	movs	r3, #1
 80090ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80090bc:	e007      	b.n	80090ce <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80090be:	2300      	movs	r3, #0
 80090c0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80090c2:	2300      	movs	r3, #0
 80090c4:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80090c6:	2301      	movs	r3, #1
 80090c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80090ca:	e000      	b.n	80090ce <ethernet_link_thread+0xd2>
    default:
      break;
 80090cc:	bf00      	nop
    }

    if(linkchanged)
 80090ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d018      	beq.n	8009106 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80090d4:	f107 0308 	add.w	r3, r7, #8
 80090d8:	4619      	mov	r1, r3
 80090da:	480e      	ldr	r0, [pc, #56]	@ (8009114 <ethernet_link_thread+0x118>)
 80090dc:	f7f9 fa08 	bl	80024f0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80090e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090e2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80090e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090e6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80090e8:	f107 0308 	add.w	r3, r7, #8
 80090ec:	4619      	mov	r1, r3
 80090ee:	4809      	ldr	r0, [pc, #36]	@ (8009114 <ethernet_link_thread+0x118>)
 80090f0:	f7f9 fbd2 	bl	8002898 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80090f4:	4807      	ldr	r0, [pc, #28]	@ (8009114 <ethernet_link_thread+0x118>)
 80090f6:	f7f8 fe7d 	bl	8001df4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80090fa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80090fc:	f005 f8a4 	bl	800e248 <netif_set_up>
      netif_set_link_up(netif);
 8009100:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009102:	f005 f93f 	bl	800e384 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8009106:	2064      	movs	r0, #100	@ 0x64
 8009108:	f000 f9e1 	bl	80094ce <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800910c:	e78b      	b.n	8009026 <ethernet_link_thread+0x2a>
 800910e:	bf00      	nop
 8009110:	24005170 	.word	0x24005170
 8009114:	24005088 	.word	0x24005088

08009118 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b086      	sub	sp, #24
 800911c:	af02      	add	r7, sp, #8
 800911e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009120:	4812      	ldr	r0, [pc, #72]	@ (800916c <HAL_ETH_RxAllocateCallback+0x54>)
 8009122:	f004 fe0f 	bl	800dd44 <memp_malloc_pool>
 8009126:	60f8      	str	r0, [r7, #12]
  if (p)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d014      	beq.n	8009158 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f103 0220 	add.w	r2, r3, #32
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	4a0d      	ldr	r2, [pc, #52]	@ (8009170 <HAL_ETH_RxAllocateCallback+0x58>)
 800913c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8009146:	9201      	str	r2, [sp, #4]
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2241      	movs	r2, #65	@ 0x41
 800914e:	2100      	movs	r1, #0
 8009150:	2000      	movs	r0, #0
 8009152:	f005 faed 	bl	800e730 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8009156:	e005      	b.n	8009164 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8009158:	4b06      	ldr	r3, [pc, #24]	@ (8009174 <HAL_ETH_RxAllocateCallback+0x5c>)
 800915a:	2201      	movs	r2, #1
 800915c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	601a      	str	r2, [r3, #0]
}
 8009164:	bf00      	nop
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	0801447c 	.word	0x0801447c
 8009170:	08008d75 	.word	0x08008d75
 8009174:	2400507c 	.word	0x2400507c

08009178 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8009178:	b480      	push	{r7}
 800917a:	b08d      	sub	sp, #52	@ 0x34
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
 8009184:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 800918e:	2300      	movs	r3, #0
 8009190:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	3b20      	subs	r3, #32
 8009196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 8009198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800919a:	2200      	movs	r2, #0
 800919c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800919e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a0:	2200      	movs	r2, #0
 80091a2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80091a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a6:	887a      	ldrh	r2, [r7, #2]
 80091a8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80091aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d103      	bne.n	80091ba <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80091b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091b6:	601a      	str	r2, [r3, #0]
 80091b8:	e003      	b.n	80091c2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80091ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091c0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80091c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091c6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80091c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091ce:	e009      	b.n	80091e4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80091d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091d2:	891a      	ldrh	r2, [r3, #8]
 80091d4:	887b      	ldrh	r3, [r7, #2]
 80091d6:	4413      	add	r3, r2
 80091d8:	b29a      	uxth	r2, r3
 80091da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091dc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80091de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1f2      	bne.n	80091d0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80091ea:	887b      	ldrh	r3, [r7, #2]
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	623a      	str	r2, [r7, #32]
 80091f0:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	dd1d      	ble.n	8009234 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80091f8:	6a3b      	ldr	r3, [r7, #32]
 80091fa:	f003 021f 	and.w	r2, r3, #31
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	4413      	add	r3, r2
 8009202:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8009204:	6a3b      	ldr	r3, [r7, #32]
 8009206:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8009208:	f3bf 8f4f 	dsb	sy
}
 800920c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800920e:	4a0d      	ldr	r2, [pc, #52]	@ (8009244 <HAL_ETH_RxLinkCallback+0xcc>)
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	3320      	adds	r3, #32
 800921a:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800921c:	69bb      	ldr	r3, [r7, #24]
 800921e:	3b20      	subs	r3, #32
 8009220:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	2b00      	cmp	r3, #0
 8009226:	dcf2      	bgt.n	800920e <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8009228:	f3bf 8f4f 	dsb	sy
}
 800922c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800922e:	f3bf 8f6f 	isb	sy
}
 8009232:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8009234:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8009236:	bf00      	nop
 8009238:	3734      	adds	r7, #52	@ 0x34
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	e000ed00 	.word	0xe000ed00

08009248 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f005 fc27 	bl	800eaa4 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8009256:	bf00      	nop
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
	...

08009260 <__NVIC_SetPriority>:
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	4603      	mov	r3, r0
 8009268:	6039      	str	r1, [r7, #0]
 800926a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800926c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009270:	2b00      	cmp	r3, #0
 8009272:	db0a      	blt.n	800928a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	b2da      	uxtb	r2, r3
 8009278:	490c      	ldr	r1, [pc, #48]	@ (80092ac <__NVIC_SetPriority+0x4c>)
 800927a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800927e:	0112      	lsls	r2, r2, #4
 8009280:	b2d2      	uxtb	r2, r2
 8009282:	440b      	add	r3, r1
 8009284:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009288:	e00a      	b.n	80092a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	b2da      	uxtb	r2, r3
 800928e:	4908      	ldr	r1, [pc, #32]	@ (80092b0 <__NVIC_SetPriority+0x50>)
 8009290:	88fb      	ldrh	r3, [r7, #6]
 8009292:	f003 030f 	and.w	r3, r3, #15
 8009296:	3b04      	subs	r3, #4
 8009298:	0112      	lsls	r2, r2, #4
 800929a:	b2d2      	uxtb	r2, r2
 800929c:	440b      	add	r3, r1
 800929e:	761a      	strb	r2, [r3, #24]
}
 80092a0:	bf00      	nop
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr
 80092ac:	e000e100 	.word	0xe000e100
 80092b0:	e000ed00 	.word	0xe000ed00

080092b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80092b4:	b580      	push	{r7, lr}
 80092b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80092b8:	4b05      	ldr	r3, [pc, #20]	@ (80092d0 <SysTick_Handler+0x1c>)
 80092ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80092bc:	f002 fcec 	bl	800bc98 <xTaskGetSchedulerState>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d001      	beq.n	80092ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80092c6:	f003 fbe7 	bl	800ca98 <xPortSysTickHandler>
  }
}
 80092ca:	bf00      	nop
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	e000e010 	.word	0xe000e010

080092d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80092d4:	b580      	push	{r7, lr}
 80092d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80092d8:	2100      	movs	r1, #0
 80092da:	f06f 0004 	mvn.w	r0, #4
 80092de:	f7ff ffbf 	bl	8009260 <__NVIC_SetPriority>
#endif
}
 80092e2:	bf00      	nop
 80092e4:	bd80      	pop	{r7, pc}
	...

080092e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092ee:	f3ef 8305 	mrs	r3, IPSR
 80092f2:	603b      	str	r3, [r7, #0]
  return(result);
 80092f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d003      	beq.n	8009302 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80092fa:	f06f 0305 	mvn.w	r3, #5
 80092fe:	607b      	str	r3, [r7, #4]
 8009300:	e00f      	b.n	8009322 <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009302:	4b0a      	ldr	r3, [pc, #40]	@ (800932c <osKernelInitialize+0x44>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d108      	bne.n	800931c <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 800930a:	4809      	ldr	r0, [pc, #36]	@ (8009330 <osKernelInitialize+0x48>)
 800930c:	f003 fdbe 	bl	800ce8c <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 8009310:	4b06      	ldr	r3, [pc, #24]	@ (800932c <osKernelInitialize+0x44>)
 8009312:	2201      	movs	r2, #1
 8009314:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009316:	2300      	movs	r3, #0
 8009318:	607b      	str	r3, [r7, #4]
 800931a:	e002      	b.n	8009322 <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 800931c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009320:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009322:	687b      	ldr	r3, [r7, #4]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	24005190 	.word	0x24005190
 8009330:	24000024 	.word	0x24000024

08009334 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800933a:	f3ef 8305 	mrs	r3, IPSR
 800933e:	603b      	str	r3, [r7, #0]
  return(result);
 8009340:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009342:	2b00      	cmp	r3, #0
 8009344:	d003      	beq.n	800934e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009346:	f06f 0305 	mvn.w	r3, #5
 800934a:	607b      	str	r3, [r7, #4]
 800934c:	e010      	b.n	8009370 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800934e:	4b0b      	ldr	r3, [pc, #44]	@ (800937c <osKernelStart+0x48>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d109      	bne.n	800936a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009356:	f7ff ffbd 	bl	80092d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800935a:	4b08      	ldr	r3, [pc, #32]	@ (800937c <osKernelStart+0x48>)
 800935c:	2202      	movs	r2, #2
 800935e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009360:	f001 fff0 	bl	800b344 <vTaskStartScheduler>
      stat = osOK;
 8009364:	2300      	movs	r3, #0
 8009366:	607b      	str	r3, [r7, #4]
 8009368:	e002      	b.n	8009370 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800936a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800936e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009370:	687b      	ldr	r3, [r7, #4]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	24005190 	.word	0x24005190

08009380 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009386:	f3ef 8305 	mrs	r3, IPSR
 800938a:	603b      	str	r3, [r7, #0]
  return(result);
 800938c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800938e:	2b00      	cmp	r3, #0
 8009390:	d003      	beq.n	800939a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009392:	f002 f903 	bl	800b59c <xTaskGetTickCountFromISR>
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	e002      	b.n	80093a0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800939a:	f002 f8ef 	bl	800b57c <xTaskGetTickCount>
 800939e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80093a0:	687b      	ldr	r3, [r7, #4]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b08e      	sub	sp, #56	@ 0x38
 80093ae:	af04      	add	r7, sp, #16
 80093b0:	60f8      	str	r0, [r7, #12]
 80093b2:	60b9      	str	r1, [r7, #8]
 80093b4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80093b6:	2300      	movs	r3, #0
 80093b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093ba:	f3ef 8305 	mrs	r3, IPSR
 80093be:	617b      	str	r3, [r7, #20]
  return(result);
 80093c0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d17e      	bne.n	80094c4 <osThreadNew+0x11a>
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d07b      	beq.n	80094c4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80093cc:	2380      	movs	r3, #128	@ 0x80
 80093ce:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80093d0:	2318      	movs	r3, #24
 80093d2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80093d4:	2300      	movs	r3, #0
 80093d6:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80093d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80093dc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d045      	beq.n	8009470 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d002      	beq.n	80093f2 <osThreadNew+0x48>
        name = attr->name;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	699b      	ldr	r3, [r3, #24]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d002      	beq.n	8009400 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d008      	beq.n	8009418 <osThreadNew+0x6e>
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	2b38      	cmp	r3, #56	@ 0x38
 800940a:	d805      	bhi.n	8009418 <osThreadNew+0x6e>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	f003 0301 	and.w	r3, r3, #1
 8009414:	2b00      	cmp	r3, #0
 8009416:	d001      	beq.n	800941c <osThreadNew+0x72>
        return (NULL);
 8009418:	2300      	movs	r3, #0
 800941a:	e054      	b.n	80094c6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	695b      	ldr	r3, [r3, #20]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d003      	beq.n	800942c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	695b      	ldr	r3, [r3, #20]
 8009428:	089b      	lsrs	r3, r3, #2
 800942a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00e      	beq.n	8009452 <osThreadNew+0xa8>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	2ba7      	cmp	r3, #167	@ 0xa7
 800943a:	d90a      	bls.n	8009452 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009440:	2b00      	cmp	r3, #0
 8009442:	d006      	beq.n	8009452 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	695b      	ldr	r3, [r3, #20]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d002      	beq.n	8009452 <osThreadNew+0xa8>
        mem = 1;
 800944c:	2301      	movs	r3, #1
 800944e:	61bb      	str	r3, [r7, #24]
 8009450:	e010      	b.n	8009474 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d10c      	bne.n	8009474 <osThreadNew+0xca>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d108      	bne.n	8009474 <osThreadNew+0xca>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d104      	bne.n	8009474 <osThreadNew+0xca>
          mem = 0;
 800946a:	2300      	movs	r3, #0
 800946c:	61bb      	str	r3, [r7, #24]
 800946e:	e001      	b.n	8009474 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009470:	2300      	movs	r3, #0
 8009472:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d110      	bne.n	800949c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009482:	9202      	str	r2, [sp, #8]
 8009484:	9301      	str	r3, [sp, #4]
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	6a3a      	ldr	r2, [r7, #32]
 800948e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f001 fd63 	bl	800af5c <xTaskCreateStatic>
 8009496:	4603      	mov	r3, r0
 8009498:	613b      	str	r3, [r7, #16]
 800949a:	e013      	b.n	80094c4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d110      	bne.n	80094c4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80094a2:	6a3b      	ldr	r3, [r7, #32]
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	f107 0310 	add.w	r3, r7, #16
 80094aa:	9301      	str	r3, [sp, #4]
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f001 fdb1 	bl	800b01c <xTaskCreate>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d001      	beq.n	80094c4 <osThreadNew+0x11a>
            hTask = NULL;
 80094c0:	2300      	movs	r3, #0
 80094c2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80094c4:	693b      	ldr	r3, [r7, #16]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3728      	adds	r7, #40	@ 0x28
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b084      	sub	sp, #16
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094d6:	f3ef 8305 	mrs	r3, IPSR
 80094da:	60bb      	str	r3, [r7, #8]
  return(result);
 80094dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d003      	beq.n	80094ea <osDelay+0x1c>
    stat = osErrorISR;
 80094e2:	f06f 0305 	mvn.w	r3, #5
 80094e6:	60fb      	str	r3, [r7, #12]
 80094e8:	e007      	b.n	80094fa <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d002      	beq.n	80094fa <osDelay+0x2c>
      vTaskDelay(ticks);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f001 feef 	bl	800b2d8 <vTaskDelay>
    }
  }

  return (stat);
 80094fa:	68fb      	ldr	r3, [r7, #12]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009504:	b580      	push	{r7, lr}
 8009506:	b088      	sub	sp, #32
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800950c:	2300      	movs	r3, #0
 800950e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009510:	f3ef 8305 	mrs	r3, IPSR
 8009514:	60bb      	str	r3, [r7, #8]
  return(result);
 8009516:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009518:	2b00      	cmp	r3, #0
 800951a:	d174      	bne.n	8009606 <osMutexNew+0x102>
    if (attr != NULL) {
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d003      	beq.n	800952a <osMutexNew+0x26>
      type = attr->attr_bits;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	61bb      	str	r3, [r7, #24]
 8009528:	e001      	b.n	800952e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800952a:	2300      	movs	r3, #0
 800952c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	f003 0301 	and.w	r3, r3, #1
 8009534:	2b00      	cmp	r3, #0
 8009536:	d002      	beq.n	800953e <osMutexNew+0x3a>
      rmtx = 1U;
 8009538:	2301      	movs	r3, #1
 800953a:	617b      	str	r3, [r7, #20]
 800953c:	e001      	b.n	8009542 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800953e:	2300      	movs	r3, #0
 8009540:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	f003 0308 	and.w	r3, r3, #8
 8009548:	2b00      	cmp	r3, #0
 800954a:	d15c      	bne.n	8009606 <osMutexNew+0x102>
      mem = -1;
 800954c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009550:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d015      	beq.n	8009584 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d006      	beq.n	800956e <osMutexNew+0x6a>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	2b4f      	cmp	r3, #79	@ 0x4f
 8009566:	d902      	bls.n	800956e <osMutexNew+0x6a>
          mem = 1;
 8009568:	2301      	movs	r3, #1
 800956a:	613b      	str	r3, [r7, #16]
 800956c:	e00c      	b.n	8009588 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d108      	bne.n	8009588 <osMutexNew+0x84>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d104      	bne.n	8009588 <osMutexNew+0x84>
            mem = 0;
 800957e:	2300      	movs	r3, #0
 8009580:	613b      	str	r3, [r7, #16]
 8009582:	e001      	b.n	8009588 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009584:	2300      	movs	r3, #0
 8009586:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	2b01      	cmp	r3, #1
 800958c:	d112      	bne.n	80095b4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d007      	beq.n	80095a4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	4619      	mov	r1, r3
 800959a:	2004      	movs	r0, #4
 800959c:	f000 fd71 	bl	800a082 <xQueueCreateMutexStatic>
 80095a0:	61f8      	str	r0, [r7, #28]
 80095a2:	e016      	b.n	80095d2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	4619      	mov	r1, r3
 80095aa:	2001      	movs	r0, #1
 80095ac:	f000 fd69 	bl	800a082 <xQueueCreateMutexStatic>
 80095b0:	61f8      	str	r0, [r7, #28]
 80095b2:	e00e      	b.n	80095d2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10b      	bne.n	80095d2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d004      	beq.n	80095ca <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80095c0:	2004      	movs	r0, #4
 80095c2:	f000 fd46 	bl	800a052 <xQueueCreateMutex>
 80095c6:	61f8      	str	r0, [r7, #28]
 80095c8:	e003      	b.n	80095d2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80095ca:	2001      	movs	r0, #1
 80095cc:	f000 fd41 	bl	800a052 <xQueueCreateMutex>
 80095d0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00c      	beq.n	80095f2 <osMutexNew+0xee>
        if (attr != NULL) {
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d003      	beq.n	80095e6 <osMutexNew+0xe2>
          name = attr->name;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	60fb      	str	r3, [r7, #12]
 80095e4:	e001      	b.n	80095ea <osMutexNew+0xe6>
        } else {
          name = NULL;
 80095e6:	2300      	movs	r3, #0
 80095e8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80095ea:	68f9      	ldr	r1, [r7, #12]
 80095ec:	69f8      	ldr	r0, [r7, #28]
 80095ee:	f001 fc2d 	bl	800ae4c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80095f2:	69fb      	ldr	r3, [r7, #28]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d006      	beq.n	8009606 <osMutexNew+0x102>
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d003      	beq.n	8009606 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80095fe:	69fb      	ldr	r3, [r7, #28]
 8009600:	f043 0301 	orr.w	r3, r3, #1
 8009604:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009606:	69fb      	ldr	r3, [r7, #28]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3720      	adds	r7, #32
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f023 0301 	bic.w	r3, r3, #1
 8009620:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f003 0301 	and.w	r3, r3, #1
 8009628:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800962a:	2300      	movs	r3, #0
 800962c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800962e:	f3ef 8305 	mrs	r3, IPSR
 8009632:	60bb      	str	r3, [r7, #8]
  return(result);
 8009634:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009636:	2b00      	cmp	r3, #0
 8009638:	d003      	beq.n	8009642 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800963a:	f06f 0305 	mvn.w	r3, #5
 800963e:	617b      	str	r3, [r7, #20]
 8009640:	e02c      	b.n	800969c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d103      	bne.n	8009650 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8009648:	f06f 0303 	mvn.w	r3, #3
 800964c:	617b      	str	r3, [r7, #20]
 800964e:	e025      	b.n	800969c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d011      	beq.n	800967a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009656:	6839      	ldr	r1, [r7, #0]
 8009658:	6938      	ldr	r0, [r7, #16]
 800965a:	f000 fd62 	bl	800a122 <xQueueTakeMutexRecursive>
 800965e:	4603      	mov	r3, r0
 8009660:	2b01      	cmp	r3, #1
 8009662:	d01b      	beq.n	800969c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d003      	beq.n	8009672 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800966a:	f06f 0301 	mvn.w	r3, #1
 800966e:	617b      	str	r3, [r7, #20]
 8009670:	e014      	b.n	800969c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009672:	f06f 0302 	mvn.w	r3, #2
 8009676:	617b      	str	r3, [r7, #20]
 8009678:	e010      	b.n	800969c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800967a:	6839      	ldr	r1, [r7, #0]
 800967c:	6938      	ldr	r0, [r7, #16]
 800967e:	f001 f907 	bl	800a890 <xQueueSemaphoreTake>
 8009682:	4603      	mov	r3, r0
 8009684:	2b01      	cmp	r3, #1
 8009686:	d009      	beq.n	800969c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d003      	beq.n	8009696 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800968e:	f06f 0301 	mvn.w	r3, #1
 8009692:	617b      	str	r3, [r7, #20]
 8009694:	e002      	b.n	800969c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009696:	f06f 0302 	mvn.w	r3, #2
 800969a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800969c:	697b      	ldr	r3, [r7, #20]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3718      	adds	r7, #24
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b086      	sub	sp, #24
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f023 0301 	bic.w	r3, r3, #1
 80096b4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f003 0301 	and.w	r3, r3, #1
 80096bc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80096be:	2300      	movs	r3, #0
 80096c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096c2:	f3ef 8305 	mrs	r3, IPSR
 80096c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80096c8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d003      	beq.n	80096d6 <osMutexRelease+0x30>
    stat = osErrorISR;
 80096ce:	f06f 0305 	mvn.w	r3, #5
 80096d2:	617b      	str	r3, [r7, #20]
 80096d4:	e01f      	b.n	8009716 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d103      	bne.n	80096e4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80096dc:	f06f 0303 	mvn.w	r3, #3
 80096e0:	617b      	str	r3, [r7, #20]
 80096e2:	e018      	b.n	8009716 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d009      	beq.n	80096fe <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80096ea:	6938      	ldr	r0, [r7, #16]
 80096ec:	f000 fce4 	bl	800a0b8 <xQueueGiveMutexRecursive>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d00f      	beq.n	8009716 <osMutexRelease+0x70>
        stat = osErrorResource;
 80096f6:	f06f 0302 	mvn.w	r3, #2
 80096fa:	617b      	str	r3, [r7, #20]
 80096fc:	e00b      	b.n	8009716 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80096fe:	2300      	movs	r3, #0
 8009700:	2200      	movs	r2, #0
 8009702:	2100      	movs	r1, #0
 8009704:	6938      	ldr	r0, [r7, #16]
 8009706:	f000 fdb1 	bl	800a26c <xQueueGenericSend>
 800970a:	4603      	mov	r3, r0
 800970c:	2b01      	cmp	r3, #1
 800970e:	d002      	beq.n	8009716 <osMutexRelease+0x70>
        stat = osErrorResource;
 8009710:	f06f 0302 	mvn.w	r3, #2
 8009714:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009716:	697b      	ldr	r3, [r7, #20]
}
 8009718:	4618      	mov	r0, r3
 800971a:	3718      	adds	r7, #24
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009720:	b580      	push	{r7, lr}
 8009722:	b08a      	sub	sp, #40	@ 0x28
 8009724:	af02      	add	r7, sp, #8
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800972c:	2300      	movs	r3, #0
 800972e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009730:	f3ef 8305 	mrs	r3, IPSR
 8009734:	613b      	str	r3, [r7, #16]
  return(result);
 8009736:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009738:	2b00      	cmp	r3, #0
 800973a:	d175      	bne.n	8009828 <osSemaphoreNew+0x108>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d072      	beq.n	8009828 <osSemaphoreNew+0x108>
 8009742:	68ba      	ldr	r2, [r7, #8]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	429a      	cmp	r2, r3
 8009748:	d86e      	bhi.n	8009828 <osSemaphoreNew+0x108>
    mem = -1;
 800974a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800974e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d015      	beq.n	8009782 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d006      	beq.n	800976c <osSemaphoreNew+0x4c>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	2b4f      	cmp	r3, #79	@ 0x4f
 8009764:	d902      	bls.n	800976c <osSemaphoreNew+0x4c>
        mem = 1;
 8009766:	2301      	movs	r3, #1
 8009768:	61bb      	str	r3, [r7, #24]
 800976a:	e00c      	b.n	8009786 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d108      	bne.n	8009786 <osSemaphoreNew+0x66>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d104      	bne.n	8009786 <osSemaphoreNew+0x66>
          mem = 0;
 800977c:	2300      	movs	r3, #0
 800977e:	61bb      	str	r3, [r7, #24]
 8009780:	e001      	b.n	8009786 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009782:	2300      	movs	r3, #0
 8009784:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800978c:	d04c      	beq.n	8009828 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2b01      	cmp	r3, #1
 8009792:	d128      	bne.n	80097e6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	2b01      	cmp	r3, #1
 8009798:	d10a      	bne.n	80097b0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	2203      	movs	r2, #3
 80097a0:	9200      	str	r2, [sp, #0]
 80097a2:	2200      	movs	r2, #0
 80097a4:	2100      	movs	r1, #0
 80097a6:	2001      	movs	r0, #1
 80097a8:	f000 fb5e 	bl	8009e68 <xQueueGenericCreateStatic>
 80097ac:	61f8      	str	r0, [r7, #28]
 80097ae:	e005      	b.n	80097bc <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80097b0:	2203      	movs	r2, #3
 80097b2:	2100      	movs	r1, #0
 80097b4:	2001      	movs	r0, #1
 80097b6:	f000 fbd4 	bl	8009f62 <xQueueGenericCreate>
 80097ba:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d022      	beq.n	8009808 <osSemaphoreNew+0xe8>
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d01f      	beq.n	8009808 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80097c8:	2300      	movs	r3, #0
 80097ca:	2200      	movs	r2, #0
 80097cc:	2100      	movs	r1, #0
 80097ce:	69f8      	ldr	r0, [r7, #28]
 80097d0:	f000 fd4c 	bl	800a26c <xQueueGenericSend>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d016      	beq.n	8009808 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80097da:	69f8      	ldr	r0, [r7, #28]
 80097dc:	f001 f9ea 	bl	800abb4 <vQueueDelete>
            hSemaphore = NULL;
 80097e0:	2300      	movs	r3, #0
 80097e2:	61fb      	str	r3, [r7, #28]
 80097e4:	e010      	b.n	8009808 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d108      	bne.n	80097fe <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	461a      	mov	r2, r3
 80097f2:	68b9      	ldr	r1, [r7, #8]
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	f000 fccb 	bl	800a190 <xQueueCreateCountingSemaphoreStatic>
 80097fa:	61f8      	str	r0, [r7, #28]
 80097fc:	e004      	b.n	8009808 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80097fe:	68b9      	ldr	r1, [r7, #8]
 8009800:	68f8      	ldr	r0, [r7, #12]
 8009802:	f000 fcfe 	bl	800a202 <xQueueCreateCountingSemaphore>
 8009806:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00c      	beq.n	8009828 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d003      	beq.n	800981c <osSemaphoreNew+0xfc>
          name = attr->name;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	617b      	str	r3, [r7, #20]
 800981a:	e001      	b.n	8009820 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800981c:	2300      	movs	r3, #0
 800981e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009820:	6979      	ldr	r1, [r7, #20]
 8009822:	69f8      	ldr	r0, [r7, #28]
 8009824:	f001 fb12 	bl	800ae4c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009828:	69fb      	ldr	r3, [r7, #28]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3720      	adds	r7, #32
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
	...

08009834 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009834:	b580      	push	{r7, lr}
 8009836:	b086      	sub	sp, #24
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009842:	2300      	movs	r3, #0
 8009844:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d103      	bne.n	8009854 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800984c:	f06f 0303 	mvn.w	r3, #3
 8009850:	617b      	str	r3, [r7, #20]
 8009852:	e039      	b.n	80098c8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009854:	f3ef 8305 	mrs	r3, IPSR
 8009858:	60fb      	str	r3, [r7, #12]
  return(result);
 800985a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800985c:	2b00      	cmp	r3, #0
 800985e:	d022      	beq.n	80098a6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d003      	beq.n	800986e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009866:	f06f 0303 	mvn.w	r3, #3
 800986a:	617b      	str	r3, [r7, #20]
 800986c:	e02c      	b.n	80098c8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800986e:	2300      	movs	r3, #0
 8009870:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009872:	f107 0308 	add.w	r3, r7, #8
 8009876:	461a      	mov	r2, r3
 8009878:	2100      	movs	r1, #0
 800987a:	6938      	ldr	r0, [r7, #16]
 800987c:	f001 f918 	bl	800aab0 <xQueueReceiveFromISR>
 8009880:	4603      	mov	r3, r0
 8009882:	2b01      	cmp	r3, #1
 8009884:	d003      	beq.n	800988e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009886:	f06f 0302 	mvn.w	r3, #2
 800988a:	617b      	str	r3, [r7, #20]
 800988c:	e01c      	b.n	80098c8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d019      	beq.n	80098c8 <osSemaphoreAcquire+0x94>
 8009894:	4b0f      	ldr	r3, [pc, #60]	@ (80098d4 <osSemaphoreAcquire+0xa0>)
 8009896:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800989a:	601a      	str	r2, [r3, #0]
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	f3bf 8f6f 	isb	sy
 80098a4:	e010      	b.n	80098c8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80098a6:	6839      	ldr	r1, [r7, #0]
 80098a8:	6938      	ldr	r0, [r7, #16]
 80098aa:	f000 fff1 	bl	800a890 <xQueueSemaphoreTake>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d009      	beq.n	80098c8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d003      	beq.n	80098c2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80098ba:	f06f 0301 	mvn.w	r3, #1
 80098be:	617b      	str	r3, [r7, #20]
 80098c0:	e002      	b.n	80098c8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80098c2:	f06f 0302 	mvn.w	r3, #2
 80098c6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80098c8:	697b      	ldr	r3, [r7, #20]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3718      	adds	r7, #24
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	e000ed04 	.word	0xe000ed04

080098d8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d103      	bne.n	80098f6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80098ee:	f06f 0303 	mvn.w	r3, #3
 80098f2:	617b      	str	r3, [r7, #20]
 80098f4:	e02c      	b.n	8009950 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098f6:	f3ef 8305 	mrs	r3, IPSR
 80098fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80098fc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d01a      	beq.n	8009938 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009902:	2300      	movs	r3, #0
 8009904:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009906:	f107 0308 	add.w	r3, r7, #8
 800990a:	4619      	mov	r1, r3
 800990c:	6938      	ldr	r0, [r7, #16]
 800990e:	f000 fe4d 	bl	800a5ac <xQueueGiveFromISR>
 8009912:	4603      	mov	r3, r0
 8009914:	2b01      	cmp	r3, #1
 8009916:	d003      	beq.n	8009920 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009918:	f06f 0302 	mvn.w	r3, #2
 800991c:	617b      	str	r3, [r7, #20]
 800991e:	e017      	b.n	8009950 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d014      	beq.n	8009950 <osSemaphoreRelease+0x78>
 8009926:	4b0d      	ldr	r3, [pc, #52]	@ (800995c <osSemaphoreRelease+0x84>)
 8009928:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800992c:	601a      	str	r2, [r3, #0]
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	f3bf 8f6f 	isb	sy
 8009936:	e00b      	b.n	8009950 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009938:	2300      	movs	r3, #0
 800993a:	2200      	movs	r2, #0
 800993c:	2100      	movs	r1, #0
 800993e:	6938      	ldr	r0, [r7, #16]
 8009940:	f000 fc94 	bl	800a26c <xQueueGenericSend>
 8009944:	4603      	mov	r3, r0
 8009946:	2b01      	cmp	r3, #1
 8009948:	d002      	beq.n	8009950 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800994a:	f06f 0302 	mvn.w	r3, #2
 800994e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009950:	697b      	ldr	r3, [r7, #20]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3718      	adds	r7, #24
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	e000ed04 	.word	0xe000ed04

08009960 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009960:	b580      	push	{r7, lr}
 8009962:	b08a      	sub	sp, #40	@ 0x28
 8009964:	af02      	add	r7, sp, #8
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800996c:	2300      	movs	r3, #0
 800996e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009970:	f3ef 8305 	mrs	r3, IPSR
 8009974:	613b      	str	r3, [r7, #16]
  return(result);
 8009976:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009978:	2b00      	cmp	r3, #0
 800997a:	d15f      	bne.n	8009a3c <osMessageQueueNew+0xdc>
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d05c      	beq.n	8009a3c <osMessageQueueNew+0xdc>
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d059      	beq.n	8009a3c <osMessageQueueNew+0xdc>
    mem = -1;
 8009988:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800998c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d029      	beq.n	80099e8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d012      	beq.n	80099c2 <osMessageQueueNew+0x62>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	2b4f      	cmp	r3, #79	@ 0x4f
 80099a2:	d90e      	bls.n	80099c2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00a      	beq.n	80099c2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	695a      	ldr	r2, [r3, #20]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	68b9      	ldr	r1, [r7, #8]
 80099b4:	fb01 f303 	mul.w	r3, r1, r3
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d302      	bcc.n	80099c2 <osMessageQueueNew+0x62>
        mem = 1;
 80099bc:	2301      	movs	r3, #1
 80099be:	61bb      	str	r3, [r7, #24]
 80099c0:	e014      	b.n	80099ec <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d110      	bne.n	80099ec <osMessageQueueNew+0x8c>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10c      	bne.n	80099ec <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d108      	bne.n	80099ec <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	695b      	ldr	r3, [r3, #20]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d104      	bne.n	80099ec <osMessageQueueNew+0x8c>
          mem = 0;
 80099e2:	2300      	movs	r3, #0
 80099e4:	61bb      	str	r3, [r7, #24]
 80099e6:	e001      	b.n	80099ec <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d10b      	bne.n	8009a0a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	691a      	ldr	r2, [r3, #16]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	2100      	movs	r1, #0
 80099fc:	9100      	str	r1, [sp, #0]
 80099fe:	68b9      	ldr	r1, [r7, #8]
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f000 fa31 	bl	8009e68 <xQueueGenericCreateStatic>
 8009a06:	61f8      	str	r0, [r7, #28]
 8009a08:	e008      	b.n	8009a1c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d105      	bne.n	8009a1c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009a10:	2200      	movs	r2, #0
 8009a12:	68b9      	ldr	r1, [r7, #8]
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f000 faa4 	bl	8009f62 <xQueueGenericCreate>
 8009a1a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00c      	beq.n	8009a3c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d003      	beq.n	8009a30 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	617b      	str	r3, [r7, #20]
 8009a2e:	e001      	b.n	8009a34 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009a30:	2300      	movs	r3, #0
 8009a32:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009a34:	6979      	ldr	r1, [r7, #20]
 8009a36:	69f8      	ldr	r0, [r7, #28]
 8009a38:	f001 fa08 	bl	800ae4c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009a3c:	69fb      	ldr	r3, [r7, #28]
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3720      	adds	r7, #32
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
	...

08009a48 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b088      	sub	sp, #32
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	603b      	str	r3, [r7, #0]
 8009a54:	4613      	mov	r3, r2
 8009a56:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a60:	f3ef 8305 	mrs	r3, IPSR
 8009a64:	617b      	str	r3, [r7, #20]
  return(result);
 8009a66:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d028      	beq.n	8009abe <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d005      	beq.n	8009a7e <osMessageQueuePut+0x36>
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d002      	beq.n	8009a7e <osMessageQueuePut+0x36>
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d003      	beq.n	8009a86 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009a7e:	f06f 0303 	mvn.w	r3, #3
 8009a82:	61fb      	str	r3, [r7, #28]
 8009a84:	e038      	b.n	8009af8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009a86:	2300      	movs	r3, #0
 8009a88:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009a8a:	f107 0210 	add.w	r2, r7, #16
 8009a8e:	2300      	movs	r3, #0
 8009a90:	68b9      	ldr	r1, [r7, #8]
 8009a92:	69b8      	ldr	r0, [r7, #24]
 8009a94:	f000 fcec 	bl	800a470 <xQueueGenericSendFromISR>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d003      	beq.n	8009aa6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009a9e:	f06f 0302 	mvn.w	r3, #2
 8009aa2:	61fb      	str	r3, [r7, #28]
 8009aa4:	e028      	b.n	8009af8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d025      	beq.n	8009af8 <osMessageQueuePut+0xb0>
 8009aac:	4b15      	ldr	r3, [pc, #84]	@ (8009b04 <osMessageQueuePut+0xbc>)
 8009aae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	f3bf 8f4f 	dsb	sy
 8009ab8:	f3bf 8f6f 	isb	sy
 8009abc:	e01c      	b.n	8009af8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d002      	beq.n	8009aca <osMessageQueuePut+0x82>
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d103      	bne.n	8009ad2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009aca:	f06f 0303 	mvn.w	r3, #3
 8009ace:	61fb      	str	r3, [r7, #28]
 8009ad0:	e012      	b.n	8009af8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	683a      	ldr	r2, [r7, #0]
 8009ad6:	68b9      	ldr	r1, [r7, #8]
 8009ad8:	69b8      	ldr	r0, [r7, #24]
 8009ada:	f000 fbc7 	bl	800a26c <xQueueGenericSend>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d009      	beq.n	8009af8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d003      	beq.n	8009af2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009aea:	f06f 0301 	mvn.w	r3, #1
 8009aee:	61fb      	str	r3, [r7, #28]
 8009af0:	e002      	b.n	8009af8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009af2:	f06f 0302 	mvn.w	r3, #2
 8009af6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009af8:	69fb      	ldr	r3, [r7, #28]
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3720      	adds	r7, #32
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	e000ed04 	.word	0xe000ed04

08009b08 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b088      	sub	sp, #32
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
 8009b14:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b1e:	f3ef 8305 	mrs	r3, IPSR
 8009b22:	617b      	str	r3, [r7, #20]
  return(result);
 8009b24:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d028      	beq.n	8009b7c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d005      	beq.n	8009b3c <osMessageQueueGet+0x34>
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d002      	beq.n	8009b3c <osMessageQueueGet+0x34>
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d003      	beq.n	8009b44 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009b3c:	f06f 0303 	mvn.w	r3, #3
 8009b40:	61fb      	str	r3, [r7, #28]
 8009b42:	e037      	b.n	8009bb4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009b44:	2300      	movs	r3, #0
 8009b46:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009b48:	f107 0310 	add.w	r3, r7, #16
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	68b9      	ldr	r1, [r7, #8]
 8009b50:	69b8      	ldr	r0, [r7, #24]
 8009b52:	f000 ffad 	bl	800aab0 <xQueueReceiveFromISR>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d003      	beq.n	8009b64 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009b5c:	f06f 0302 	mvn.w	r3, #2
 8009b60:	61fb      	str	r3, [r7, #28]
 8009b62:	e027      	b.n	8009bb4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d024      	beq.n	8009bb4 <osMessageQueueGet+0xac>
 8009b6a:	4b15      	ldr	r3, [pc, #84]	@ (8009bc0 <osMessageQueueGet+0xb8>)
 8009b6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b70:	601a      	str	r2, [r3, #0]
 8009b72:	f3bf 8f4f 	dsb	sy
 8009b76:	f3bf 8f6f 	isb	sy
 8009b7a:	e01b      	b.n	8009bb4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d002      	beq.n	8009b88 <osMessageQueueGet+0x80>
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d103      	bne.n	8009b90 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009b88:	f06f 0303 	mvn.w	r3, #3
 8009b8c:	61fb      	str	r3, [r7, #28]
 8009b8e:	e011      	b.n	8009bb4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009b90:	683a      	ldr	r2, [r7, #0]
 8009b92:	68b9      	ldr	r1, [r7, #8]
 8009b94:	69b8      	ldr	r0, [r7, #24]
 8009b96:	f000 fd99 	bl	800a6cc <xQueueReceive>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d009      	beq.n	8009bb4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d003      	beq.n	8009bae <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009ba6:	f06f 0301 	mvn.w	r3, #1
 8009baa:	61fb      	str	r3, [r7, #28]
 8009bac:	e002      	b.n	8009bb4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009bae:	f06f 0302 	mvn.w	r3, #2
 8009bb2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009bb4:	69fb      	ldr	r3, [r7, #28]
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3720      	adds	r7, #32
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	e000ed04 	.word	0xe000ed04

08009bc4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009bc4:	b480      	push	{r7}
 8009bc6:	b085      	sub	sp, #20
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	4a07      	ldr	r2, [pc, #28]	@ (8009bf0 <vApplicationGetIdleTaskMemory+0x2c>)
 8009bd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	4a06      	ldr	r2, [pc, #24]	@ (8009bf4 <vApplicationGetIdleTaskMemory+0x30>)
 8009bda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2280      	movs	r2, #128	@ 0x80
 8009be0:	601a      	str	r2, [r3, #0]
}
 8009be2:	bf00      	nop
 8009be4:	3714      	adds	r7, #20
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop
 8009bf0:	24069324 	.word	0x24069324
 8009bf4:	240693cc 	.word	0x240693cc

08009bf8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	4a07      	ldr	r2, [pc, #28]	@ (8009c24 <vApplicationGetTimerTaskMemory+0x2c>)
 8009c08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	4a06      	ldr	r2, [pc, #24]	@ (8009c28 <vApplicationGetTimerTaskMemory+0x30>)
 8009c0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009c16:	601a      	str	r2, [r3, #0]
}
 8009c18:	bf00      	nop
 8009c1a:	3714      	adds	r7, #20
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr
 8009c24:	240695cc 	.word	0x240695cc
 8009c28:	24069674 	.word	0x24069674

08009c2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f103 0208 	add.w	r2, r3, #8
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009c44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f103 0208 	add.w	r2, r3, #8
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f103 0208 	add.w	r2, r3, #8
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009c60:	bf00      	nop
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009c7a:	bf00      	nop
 8009c7c:	370c      	adds	r7, #12
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr

08009c86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c86:	b480      	push	{r7}
 8009c88:	b085      	sub	sp, #20
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
 8009c8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	689a      	ldr	r2, [r3, #8]
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	683a      	ldr	r2, [r7, #0]
 8009caa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	683a      	ldr	r2, [r7, #0]
 8009cb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	1c5a      	adds	r2, r3, #1
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	601a      	str	r2, [r3, #0]
}
 8009cc2:	bf00      	nop
 8009cc4:	3714      	adds	r7, #20
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr

08009cce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009cce:	b480      	push	{r7}
 8009cd0:	b085      	sub	sp, #20
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ce4:	d103      	bne.n	8009cee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	60fb      	str	r3, [r7, #12]
 8009cec:	e00c      	b.n	8009d08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	3308      	adds	r3, #8
 8009cf2:	60fb      	str	r3, [r7, #12]
 8009cf4:	e002      	b.n	8009cfc <vListInsert+0x2e>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	60fb      	str	r3, [r7, #12]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d2f6      	bcs.n	8009cf6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	685a      	ldr	r2, [r3, #4]
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	683a      	ldr	r2, [r7, #0]
 8009d16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	683a      	ldr	r2, [r7, #0]
 8009d22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	1c5a      	adds	r2, r3, #1
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	601a      	str	r2, [r3, #0]
}
 8009d34:	bf00      	nop
 8009d36:	3714      	adds	r7, #20
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009d40:	b480      	push	{r7}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	691b      	ldr	r3, [r3, #16]
 8009d4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	6892      	ldr	r2, [r2, #8]
 8009d56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	6852      	ldr	r2, [r2, #4]
 8009d60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d103      	bne.n	8009d74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	689a      	ldr	r2, [r3, #8]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	1e5a      	subs	r2, r3, #1
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3714      	adds	r7, #20
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d10b      	bne.n	8009dc0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dac:	f383 8811 	msr	BASEPRI, r3
 8009db0:	f3bf 8f6f 	isb	sy
 8009db4:	f3bf 8f4f 	dsb	sy
 8009db8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009dba:	bf00      	nop
 8009dbc:	bf00      	nop
 8009dbe:	e7fd      	b.n	8009dbc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009dc0:	f002 fdda 	bl	800c978 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dcc:	68f9      	ldr	r1, [r7, #12]
 8009dce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009dd0:	fb01 f303 	mul.w	r3, r1, r3
 8009dd4:	441a      	add	r2, r3
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009df0:	3b01      	subs	r3, #1
 8009df2:	68f9      	ldr	r1, [r7, #12]
 8009df4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009df6:	fb01 f303 	mul.w	r3, r1, r3
 8009dfa:	441a      	add	r2, r3
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	22ff      	movs	r2, #255	@ 0xff
 8009e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	22ff      	movs	r2, #255	@ 0xff
 8009e0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d114      	bne.n	8009e40 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	691b      	ldr	r3, [r3, #16]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d01a      	beq.n	8009e54 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	3310      	adds	r3, #16
 8009e22:	4618      	mov	r0, r3
 8009e24:	f001 fd62 	bl	800b8ec <xTaskRemoveFromEventList>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d012      	beq.n	8009e54 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8009e64 <xQueueGenericReset+0xd0>)
 8009e30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e34:	601a      	str	r2, [r3, #0]
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	e009      	b.n	8009e54 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	3310      	adds	r3, #16
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7ff fef1 	bl	8009c2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	3324      	adds	r3, #36	@ 0x24
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7ff feec 	bl	8009c2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009e54:	f002 fdc2 	bl	800c9dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009e58:	2301      	movs	r3, #1
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	e000ed04 	.word	0xe000ed04

08009e68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b08e      	sub	sp, #56	@ 0x38
 8009e6c:	af02      	add	r7, sp, #8
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
 8009e74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d10b      	bne.n	8009e94 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e80:	f383 8811 	msr	BASEPRI, r3
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	f3bf 8f4f 	dsb	sy
 8009e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009e8e:	bf00      	nop
 8009e90:	bf00      	nop
 8009e92:	e7fd      	b.n	8009e90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d10b      	bne.n	8009eb2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9e:	f383 8811 	msr	BASEPRI, r3
 8009ea2:	f3bf 8f6f 	isb	sy
 8009ea6:	f3bf 8f4f 	dsb	sy
 8009eaa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009eac:	bf00      	nop
 8009eae:	bf00      	nop
 8009eb0:	e7fd      	b.n	8009eae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d002      	beq.n	8009ebe <xQueueGenericCreateStatic+0x56>
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d001      	beq.n	8009ec2 <xQueueGenericCreateStatic+0x5a>
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e000      	b.n	8009ec4 <xQueueGenericCreateStatic+0x5c>
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d10b      	bne.n	8009ee0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ecc:	f383 8811 	msr	BASEPRI, r3
 8009ed0:	f3bf 8f6f 	isb	sy
 8009ed4:	f3bf 8f4f 	dsb	sy
 8009ed8:	623b      	str	r3, [r7, #32]
}
 8009eda:	bf00      	nop
 8009edc:	bf00      	nop
 8009ede:	e7fd      	b.n	8009edc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d102      	bne.n	8009eec <xQueueGenericCreateStatic+0x84>
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d101      	bne.n	8009ef0 <xQueueGenericCreateStatic+0x88>
 8009eec:	2301      	movs	r3, #1
 8009eee:	e000      	b.n	8009ef2 <xQueueGenericCreateStatic+0x8a>
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d10b      	bne.n	8009f0e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009efa:	f383 8811 	msr	BASEPRI, r3
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	f3bf 8f4f 	dsb	sy
 8009f06:	61fb      	str	r3, [r7, #28]
}
 8009f08:	bf00      	nop
 8009f0a:	bf00      	nop
 8009f0c:	e7fd      	b.n	8009f0a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009f0e:	2350      	movs	r3, #80	@ 0x50
 8009f10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	2b50      	cmp	r3, #80	@ 0x50
 8009f16:	d00b      	beq.n	8009f30 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f1c:	f383 8811 	msr	BASEPRI, r3
 8009f20:	f3bf 8f6f 	isb	sy
 8009f24:	f3bf 8f4f 	dsb	sy
 8009f28:	61bb      	str	r3, [r7, #24]
}
 8009f2a:	bf00      	nop
 8009f2c:	bf00      	nop
 8009f2e:	e7fd      	b.n	8009f2c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009f30:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00d      	beq.n	8009f58 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f44:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	68b9      	ldr	r1, [r7, #8]
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	f000 f840 	bl	8009fd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3730      	adds	r7, #48	@ 0x30
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b08a      	sub	sp, #40	@ 0x28
 8009f66:	af02      	add	r7, sp, #8
 8009f68:	60f8      	str	r0, [r7, #12]
 8009f6a:	60b9      	str	r1, [r7, #8]
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d10b      	bne.n	8009f8e <xQueueGenericCreate+0x2c>
	__asm volatile
 8009f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f7a:	f383 8811 	msr	BASEPRI, r3
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	f3bf 8f4f 	dsb	sy
 8009f86:	613b      	str	r3, [r7, #16]
}
 8009f88:	bf00      	nop
 8009f8a:	bf00      	nop
 8009f8c:	e7fd      	b.n	8009f8a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	68ba      	ldr	r2, [r7, #8]
 8009f92:	fb02 f303 	mul.w	r3, r2, r3
 8009f96:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	3350      	adds	r3, #80	@ 0x50
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f002 fe0d 	bl	800cbbc <pvPortMalloc>
 8009fa2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d011      	beq.n	8009fce <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	3350      	adds	r3, #80	@ 0x50
 8009fb2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009fbc:	79fa      	ldrb	r2, [r7, #7]
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	9300      	str	r3, [sp, #0]
 8009fc2:	4613      	mov	r3, r2
 8009fc4:	697a      	ldr	r2, [r7, #20]
 8009fc6:	68b9      	ldr	r1, [r7, #8]
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	f000 f805 	bl	8009fd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009fce:	69bb      	ldr	r3, [r7, #24]
	}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3720      	adds	r7, #32
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	607a      	str	r2, [r7, #4]
 8009fe4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d103      	bne.n	8009ff4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	69ba      	ldr	r2, [r7, #24]
 8009ff0:	601a      	str	r2, [r3, #0]
 8009ff2:	e002      	b.n	8009ffa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	68fa      	ldr	r2, [r7, #12]
 8009ffe:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	68ba      	ldr	r2, [r7, #8]
 800a004:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a006:	2101      	movs	r1, #1
 800a008:	69b8      	ldr	r0, [r7, #24]
 800a00a:	f7ff fec3 	bl	8009d94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	78fa      	ldrb	r2, [r7, #3]
 800a012:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a016:	bf00      	nop
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b082      	sub	sp, #8
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d00e      	beq.n	800a04a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a03e:	2300      	movs	r3, #0
 800a040:	2200      	movs	r2, #0
 800a042:	2100      	movs	r1, #0
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 f911 	bl	800a26c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a04a:	bf00      	nop
 800a04c:	3708      	adds	r7, #8
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a052:	b580      	push	{r7, lr}
 800a054:	b086      	sub	sp, #24
 800a056:	af00      	add	r7, sp, #0
 800a058:	4603      	mov	r3, r0
 800a05a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a05c:	2301      	movs	r3, #1
 800a05e:	617b      	str	r3, [r7, #20]
 800a060:	2300      	movs	r3, #0
 800a062:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a064:	79fb      	ldrb	r3, [r7, #7]
 800a066:	461a      	mov	r2, r3
 800a068:	6939      	ldr	r1, [r7, #16]
 800a06a:	6978      	ldr	r0, [r7, #20]
 800a06c:	f7ff ff79 	bl	8009f62 <xQueueGenericCreate>
 800a070:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a072:	68f8      	ldr	r0, [r7, #12]
 800a074:	f7ff ffd3 	bl	800a01e <prvInitialiseMutex>

		return xNewQueue;
 800a078:	68fb      	ldr	r3, [r7, #12]
	}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3718      	adds	r7, #24
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a082:	b580      	push	{r7, lr}
 800a084:	b088      	sub	sp, #32
 800a086:	af02      	add	r7, sp, #8
 800a088:	4603      	mov	r3, r0
 800a08a:	6039      	str	r1, [r7, #0]
 800a08c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a08e:	2301      	movs	r3, #1
 800a090:	617b      	str	r3, [r7, #20]
 800a092:	2300      	movs	r3, #0
 800a094:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a096:	79fb      	ldrb	r3, [r7, #7]
 800a098:	9300      	str	r3, [sp, #0]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	2200      	movs	r2, #0
 800a09e:	6939      	ldr	r1, [r7, #16]
 800a0a0:	6978      	ldr	r0, [r7, #20]
 800a0a2:	f7ff fee1 	bl	8009e68 <xQueueGenericCreateStatic>
 800a0a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a0a8:	68f8      	ldr	r0, [r7, #12]
 800a0aa:	f7ff ffb8 	bl	800a01e <prvInitialiseMutex>

		return xNewQueue;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
	}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3718      	adds	r7, #24
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a0b8:	b590      	push	{r4, r7, lr}
 800a0ba:	b087      	sub	sp, #28
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d10b      	bne.n	800a0e2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800a0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ce:	f383 8811 	msr	BASEPRI, r3
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	60fb      	str	r3, [r7, #12]
}
 800a0dc:	bf00      	nop
 800a0de:	bf00      	nop
 800a0e0:	e7fd      	b.n	800a0de <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	689c      	ldr	r4, [r3, #8]
 800a0e6:	f001 fdc7 	bl	800bc78 <xTaskGetCurrentTaskHandle>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	429c      	cmp	r4, r3
 800a0ee:	d111      	bne.n	800a114 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	1e5a      	subs	r2, r3, #1
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d105      	bne.n	800a10e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a102:	2300      	movs	r3, #0
 800a104:	2200      	movs	r2, #0
 800a106:	2100      	movs	r1, #0
 800a108:	6938      	ldr	r0, [r7, #16]
 800a10a:	f000 f8af 	bl	800a26c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a10e:	2301      	movs	r3, #1
 800a110:	617b      	str	r3, [r7, #20]
 800a112:	e001      	b.n	800a118 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a114:	2300      	movs	r3, #0
 800a116:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a118:	697b      	ldr	r3, [r7, #20]
	}
 800a11a:	4618      	mov	r0, r3
 800a11c:	371c      	adds	r7, #28
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd90      	pop	{r4, r7, pc}

0800a122 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a122:	b590      	push	{r4, r7, lr}
 800a124:	b087      	sub	sp, #28
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
 800a12a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d10b      	bne.n	800a14e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800a136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a13a:	f383 8811 	msr	BASEPRI, r3
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	60fb      	str	r3, [r7, #12]
}
 800a148:	bf00      	nop
 800a14a:	bf00      	nop
 800a14c:	e7fd      	b.n	800a14a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	689c      	ldr	r4, [r3, #8]
 800a152:	f001 fd91 	bl	800bc78 <xTaskGetCurrentTaskHandle>
 800a156:	4603      	mov	r3, r0
 800a158:	429c      	cmp	r4, r3
 800a15a:	d107      	bne.n	800a16c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	1c5a      	adds	r2, r3, #1
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a166:	2301      	movs	r3, #1
 800a168:	617b      	str	r3, [r7, #20]
 800a16a:	e00c      	b.n	800a186 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a16c:	6839      	ldr	r1, [r7, #0]
 800a16e:	6938      	ldr	r0, [r7, #16]
 800a170:	f000 fb8e 	bl	800a890 <xQueueSemaphoreTake>
 800a174:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d004      	beq.n	800a186 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	1c5a      	adds	r2, r3, #1
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a186:	697b      	ldr	r3, [r7, #20]
	}
 800a188:	4618      	mov	r0, r3
 800a18a:	371c      	adds	r7, #28
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd90      	pop	{r4, r7, pc}

0800a190 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a190:	b580      	push	{r7, lr}
 800a192:	b08a      	sub	sp, #40	@ 0x28
 800a194:	af02      	add	r7, sp, #8
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d10b      	bne.n	800a1ba <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800a1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a6:	f383 8811 	msr	BASEPRI, r3
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	61bb      	str	r3, [r7, #24]
}
 800a1b4:	bf00      	nop
 800a1b6:	bf00      	nop
 800a1b8:	e7fd      	b.n	800a1b6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a1ba:	68ba      	ldr	r2, [r7, #8]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d90b      	bls.n	800a1da <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800a1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	617b      	str	r3, [r7, #20]
}
 800a1d4:	bf00      	nop
 800a1d6:	bf00      	nop
 800a1d8:	e7fd      	b.n	800a1d6 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a1da:	2302      	movs	r3, #2
 800a1dc:	9300      	str	r3, [sp, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f7ff fe3f 	bl	8009e68 <xQueueGenericCreateStatic>
 800a1ea:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d002      	beq.n	800a1f8 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	68ba      	ldr	r2, [r7, #8]
 800a1f6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a1f8:	69fb      	ldr	r3, [r7, #28]
	}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3720      	adds	r7, #32
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a202:	b580      	push	{r7, lr}
 800a204:	b086      	sub	sp, #24
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
 800a20a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d10b      	bne.n	800a22a <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800a212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a216:	f383 8811 	msr	BASEPRI, r3
 800a21a:	f3bf 8f6f 	isb	sy
 800a21e:	f3bf 8f4f 	dsb	sy
 800a222:	613b      	str	r3, [r7, #16]
}
 800a224:	bf00      	nop
 800a226:	bf00      	nop
 800a228:	e7fd      	b.n	800a226 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a22a:	683a      	ldr	r2, [r7, #0]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d90b      	bls.n	800a24a <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800a232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a236:	f383 8811 	msr	BASEPRI, r3
 800a23a:	f3bf 8f6f 	isb	sy
 800a23e:	f3bf 8f4f 	dsb	sy
 800a242:	60fb      	str	r3, [r7, #12]
}
 800a244:	bf00      	nop
 800a246:	bf00      	nop
 800a248:	e7fd      	b.n	800a246 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a24a:	2202      	movs	r2, #2
 800a24c:	2100      	movs	r1, #0
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f7ff fe87 	bl	8009f62 <xQueueGenericCreate>
 800a254:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d002      	beq.n	800a262 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	683a      	ldr	r2, [r7, #0]
 800a260:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a262:	697b      	ldr	r3, [r7, #20]
	}
 800a264:	4618      	mov	r0, r3
 800a266:	3718      	adds	r7, #24
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b08e      	sub	sp, #56	@ 0x38
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	607a      	str	r2, [r7, #4]
 800a278:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a27a:	2300      	movs	r3, #0
 800a27c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a284:	2b00      	cmp	r3, #0
 800a286:	d10b      	bne.n	800a2a0 <xQueueGenericSend+0x34>
	__asm volatile
 800a288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a28c:	f383 8811 	msr	BASEPRI, r3
 800a290:	f3bf 8f6f 	isb	sy
 800a294:	f3bf 8f4f 	dsb	sy
 800a298:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a29a:	bf00      	nop
 800a29c:	bf00      	nop
 800a29e:	e7fd      	b.n	800a29c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d103      	bne.n	800a2ae <xQueueGenericSend+0x42>
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d101      	bne.n	800a2b2 <xQueueGenericSend+0x46>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e000      	b.n	800a2b4 <xQueueGenericSend+0x48>
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d10b      	bne.n	800a2d0 <xQueueGenericSend+0x64>
	__asm volatile
 800a2b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2bc:	f383 8811 	msr	BASEPRI, r3
 800a2c0:	f3bf 8f6f 	isb	sy
 800a2c4:	f3bf 8f4f 	dsb	sy
 800a2c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a2ca:	bf00      	nop
 800a2cc:	bf00      	nop
 800a2ce:	e7fd      	b.n	800a2cc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	2b02      	cmp	r3, #2
 800a2d4:	d103      	bne.n	800a2de <xQueueGenericSend+0x72>
 800a2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d101      	bne.n	800a2e2 <xQueueGenericSend+0x76>
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e000      	b.n	800a2e4 <xQueueGenericSend+0x78>
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d10b      	bne.n	800a300 <xQueueGenericSend+0x94>
	__asm volatile
 800a2e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ec:	f383 8811 	msr	BASEPRI, r3
 800a2f0:	f3bf 8f6f 	isb	sy
 800a2f4:	f3bf 8f4f 	dsb	sy
 800a2f8:	623b      	str	r3, [r7, #32]
}
 800a2fa:	bf00      	nop
 800a2fc:	bf00      	nop
 800a2fe:	e7fd      	b.n	800a2fc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a300:	f001 fcca 	bl	800bc98 <xTaskGetSchedulerState>
 800a304:	4603      	mov	r3, r0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d102      	bne.n	800a310 <xQueueGenericSend+0xa4>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d101      	bne.n	800a314 <xQueueGenericSend+0xa8>
 800a310:	2301      	movs	r3, #1
 800a312:	e000      	b.n	800a316 <xQueueGenericSend+0xaa>
 800a314:	2300      	movs	r3, #0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10b      	bne.n	800a332 <xQueueGenericSend+0xc6>
	__asm volatile
 800a31a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a31e:	f383 8811 	msr	BASEPRI, r3
 800a322:	f3bf 8f6f 	isb	sy
 800a326:	f3bf 8f4f 	dsb	sy
 800a32a:	61fb      	str	r3, [r7, #28]
}
 800a32c:	bf00      	nop
 800a32e:	bf00      	nop
 800a330:	e7fd      	b.n	800a32e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a332:	f002 fb21 	bl	800c978 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a338:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a33e:	429a      	cmp	r2, r3
 800a340:	d302      	bcc.n	800a348 <xQueueGenericSend+0xdc>
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	2b02      	cmp	r3, #2
 800a346:	d129      	bne.n	800a39c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a348:	683a      	ldr	r2, [r7, #0]
 800a34a:	68b9      	ldr	r1, [r7, #8]
 800a34c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a34e:	f000 fc6d 	bl	800ac2c <prvCopyDataToQueue>
 800a352:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d010      	beq.n	800a37e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a35c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a35e:	3324      	adds	r3, #36	@ 0x24
 800a360:	4618      	mov	r0, r3
 800a362:	f001 fac3 	bl	800b8ec <xTaskRemoveFromEventList>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d013      	beq.n	800a394 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a36c:	4b3f      	ldr	r3, [pc, #252]	@ (800a46c <xQueueGenericSend+0x200>)
 800a36e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a372:	601a      	str	r2, [r3, #0]
 800a374:	f3bf 8f4f 	dsb	sy
 800a378:	f3bf 8f6f 	isb	sy
 800a37c:	e00a      	b.n	800a394 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a37e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a380:	2b00      	cmp	r3, #0
 800a382:	d007      	beq.n	800a394 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a384:	4b39      	ldr	r3, [pc, #228]	@ (800a46c <xQueueGenericSend+0x200>)
 800a386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a38a:	601a      	str	r2, [r3, #0]
 800a38c:	f3bf 8f4f 	dsb	sy
 800a390:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a394:	f002 fb22 	bl	800c9dc <vPortExitCritical>
				return pdPASS;
 800a398:	2301      	movs	r3, #1
 800a39a:	e063      	b.n	800a464 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d103      	bne.n	800a3aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3a2:	f002 fb1b 	bl	800c9dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	e05c      	b.n	800a464 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d106      	bne.n	800a3be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3b0:	f107 0314 	add.w	r3, r7, #20
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f001 fafd 	bl	800b9b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3be:	f002 fb0d 	bl	800c9dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3c2:	f001 f82f 	bl	800b424 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3c6:	f002 fad7 	bl	800c978 <vPortEnterCritical>
 800a3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a3d0:	b25b      	sxtb	r3, r3
 800a3d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3d6:	d103      	bne.n	800a3e0 <xQueueGenericSend+0x174>
 800a3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3e6:	b25b      	sxtb	r3, r3
 800a3e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3ec:	d103      	bne.n	800a3f6 <xQueueGenericSend+0x18a>
 800a3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a3f6:	f002 faf1 	bl	800c9dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3fa:	1d3a      	adds	r2, r7, #4
 800a3fc:	f107 0314 	add.w	r3, r7, #20
 800a400:	4611      	mov	r1, r2
 800a402:	4618      	mov	r0, r3
 800a404:	f001 faec 	bl	800b9e0 <xTaskCheckForTimeOut>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d124      	bne.n	800a458 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a40e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a410:	f000 fd04 	bl	800ae1c <prvIsQueueFull>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d018      	beq.n	800a44c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41c:	3310      	adds	r3, #16
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	4611      	mov	r1, r2
 800a422:	4618      	mov	r0, r3
 800a424:	f001 fa10 	bl	800b848 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a428:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a42a:	f000 fc8f 	bl	800ad4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a42e:	f001 f807 	bl	800b440 <xTaskResumeAll>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	f47f af7c 	bne.w	800a332 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a43a:	4b0c      	ldr	r3, [pc, #48]	@ (800a46c <xQueueGenericSend+0x200>)
 800a43c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a440:	601a      	str	r2, [r3, #0]
 800a442:	f3bf 8f4f 	dsb	sy
 800a446:	f3bf 8f6f 	isb	sy
 800a44a:	e772      	b.n	800a332 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a44c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a44e:	f000 fc7d 	bl	800ad4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a452:	f000 fff5 	bl	800b440 <xTaskResumeAll>
 800a456:	e76c      	b.n	800a332 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a458:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a45a:	f000 fc77 	bl	800ad4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a45e:	f000 ffef 	bl	800b440 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a462:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a464:	4618      	mov	r0, r3
 800a466:	3738      	adds	r7, #56	@ 0x38
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	e000ed04 	.word	0xe000ed04

0800a470 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b090      	sub	sp, #64	@ 0x40
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	607a      	str	r2, [r7, #4]
 800a47c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a484:	2b00      	cmp	r3, #0
 800a486:	d10b      	bne.n	800a4a0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48c:	f383 8811 	msr	BASEPRI, r3
 800a490:	f3bf 8f6f 	isb	sy
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a49a:	bf00      	nop
 800a49c:	bf00      	nop
 800a49e:	e7fd      	b.n	800a49c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d103      	bne.n	800a4ae <xQueueGenericSendFromISR+0x3e>
 800a4a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d101      	bne.n	800a4b2 <xQueueGenericSendFromISR+0x42>
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e000      	b.n	800a4b4 <xQueueGenericSendFromISR+0x44>
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d10b      	bne.n	800a4d0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a4b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4bc:	f383 8811 	msr	BASEPRI, r3
 800a4c0:	f3bf 8f6f 	isb	sy
 800a4c4:	f3bf 8f4f 	dsb	sy
 800a4c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a4ca:	bf00      	nop
 800a4cc:	bf00      	nop
 800a4ce:	e7fd      	b.n	800a4cc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d103      	bne.n	800a4de <xQueueGenericSendFromISR+0x6e>
 800a4d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d101      	bne.n	800a4e2 <xQueueGenericSendFromISR+0x72>
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e000      	b.n	800a4e4 <xQueueGenericSendFromISR+0x74>
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d10b      	bne.n	800a500 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a4e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ec:	f383 8811 	msr	BASEPRI, r3
 800a4f0:	f3bf 8f6f 	isb	sy
 800a4f4:	f3bf 8f4f 	dsb	sy
 800a4f8:	623b      	str	r3, [r7, #32]
}
 800a4fa:	bf00      	nop
 800a4fc:	bf00      	nop
 800a4fe:	e7fd      	b.n	800a4fc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a500:	f002 fb1a 	bl	800cb38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a504:	f3ef 8211 	mrs	r2, BASEPRI
 800a508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a50c:	f383 8811 	msr	BASEPRI, r3
 800a510:	f3bf 8f6f 	isb	sy
 800a514:	f3bf 8f4f 	dsb	sy
 800a518:	61fa      	str	r2, [r7, #28]
 800a51a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a51c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a51e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a522:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a528:	429a      	cmp	r2, r3
 800a52a:	d302      	bcc.n	800a532 <xQueueGenericSendFromISR+0xc2>
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	2b02      	cmp	r3, #2
 800a530:	d12f      	bne.n	800a592 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a534:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a538:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a53c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a53e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a540:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a542:	683a      	ldr	r2, [r7, #0]
 800a544:	68b9      	ldr	r1, [r7, #8]
 800a546:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a548:	f000 fb70 	bl	800ac2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a54c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a550:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a554:	d112      	bne.n	800a57c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d016      	beq.n	800a58c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a560:	3324      	adds	r3, #36	@ 0x24
 800a562:	4618      	mov	r0, r3
 800a564:	f001 f9c2 	bl	800b8ec <xTaskRemoveFromEventList>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d00e      	beq.n	800a58c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d00b      	beq.n	800a58c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2201      	movs	r2, #1
 800a578:	601a      	str	r2, [r3, #0]
 800a57a:	e007      	b.n	800a58c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a57c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a580:	3301      	adds	r3, #1
 800a582:	b2db      	uxtb	r3, r3
 800a584:	b25a      	sxtb	r2, r3
 800a586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a588:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a58c:	2301      	movs	r3, #1
 800a58e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a590:	e001      	b.n	800a596 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a592:	2300      	movs	r3, #0
 800a594:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a598:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a5a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a5a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3740      	adds	r7, #64	@ 0x40
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b08e      	sub	sp, #56	@ 0x38
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d10b      	bne.n	800a5d8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c4:	f383 8811 	msr	BASEPRI, r3
 800a5c8:	f3bf 8f6f 	isb	sy
 800a5cc:	f3bf 8f4f 	dsb	sy
 800a5d0:	623b      	str	r3, [r7, #32]
}
 800a5d2:	bf00      	nop
 800a5d4:	bf00      	nop
 800a5d6:	e7fd      	b.n	800a5d4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d00b      	beq.n	800a5f8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a5e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e4:	f383 8811 	msr	BASEPRI, r3
 800a5e8:	f3bf 8f6f 	isb	sy
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	61fb      	str	r3, [r7, #28]
}
 800a5f2:	bf00      	nop
 800a5f4:	bf00      	nop
 800a5f6:	e7fd      	b.n	800a5f4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d103      	bne.n	800a608 <xQueueGiveFromISR+0x5c>
 800a600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d101      	bne.n	800a60c <xQueueGiveFromISR+0x60>
 800a608:	2301      	movs	r3, #1
 800a60a:	e000      	b.n	800a60e <xQueueGiveFromISR+0x62>
 800a60c:	2300      	movs	r3, #0
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d10b      	bne.n	800a62a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a616:	f383 8811 	msr	BASEPRI, r3
 800a61a:	f3bf 8f6f 	isb	sy
 800a61e:	f3bf 8f4f 	dsb	sy
 800a622:	61bb      	str	r3, [r7, #24]
}
 800a624:	bf00      	nop
 800a626:	bf00      	nop
 800a628:	e7fd      	b.n	800a626 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a62a:	f002 fa85 	bl	800cb38 <vPortValidateInterruptPriority>
	__asm volatile
 800a62e:	f3ef 8211 	mrs	r2, BASEPRI
 800a632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a636:	f383 8811 	msr	BASEPRI, r3
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	617a      	str	r2, [r7, #20]
 800a644:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a646:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a648:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a64c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a64e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a654:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a656:	429a      	cmp	r2, r3
 800a658:	d22b      	bcs.n	800a6b2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a65c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a660:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a666:	1c5a      	adds	r2, r3, #1
 800a668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a66c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a670:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a674:	d112      	bne.n	800a69c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d016      	beq.n	800a6ac <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a680:	3324      	adds	r3, #36	@ 0x24
 800a682:	4618      	mov	r0, r3
 800a684:	f001 f932 	bl	800b8ec <xTaskRemoveFromEventList>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d00e      	beq.n	800a6ac <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d00b      	beq.n	800a6ac <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	2201      	movs	r2, #1
 800a698:	601a      	str	r2, [r3, #0]
 800a69a:	e007      	b.n	800a6ac <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a69c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	b25a      	sxtb	r2, r3
 800a6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6b0:	e001      	b.n	800a6b6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6b8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f383 8811 	msr	BASEPRI, r3
}
 800a6c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a6c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3738      	adds	r7, #56	@ 0x38
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b08c      	sub	sp, #48	@ 0x30
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a6e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d10b      	bne.n	800a6fe <xQueueReceive+0x32>
	__asm volatile
 800a6e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ea:	f383 8811 	msr	BASEPRI, r3
 800a6ee:	f3bf 8f6f 	isb	sy
 800a6f2:	f3bf 8f4f 	dsb	sy
 800a6f6:	623b      	str	r3, [r7, #32]
}
 800a6f8:	bf00      	nop
 800a6fa:	bf00      	nop
 800a6fc:	e7fd      	b.n	800a6fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d103      	bne.n	800a70c <xQueueReceive+0x40>
 800a704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d101      	bne.n	800a710 <xQueueReceive+0x44>
 800a70c:	2301      	movs	r3, #1
 800a70e:	e000      	b.n	800a712 <xQueueReceive+0x46>
 800a710:	2300      	movs	r3, #0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d10b      	bne.n	800a72e <xQueueReceive+0x62>
	__asm volatile
 800a716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a71a:	f383 8811 	msr	BASEPRI, r3
 800a71e:	f3bf 8f6f 	isb	sy
 800a722:	f3bf 8f4f 	dsb	sy
 800a726:	61fb      	str	r3, [r7, #28]
}
 800a728:	bf00      	nop
 800a72a:	bf00      	nop
 800a72c:	e7fd      	b.n	800a72a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a72e:	f001 fab3 	bl	800bc98 <xTaskGetSchedulerState>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d102      	bne.n	800a73e <xQueueReceive+0x72>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d101      	bne.n	800a742 <xQueueReceive+0x76>
 800a73e:	2301      	movs	r3, #1
 800a740:	e000      	b.n	800a744 <xQueueReceive+0x78>
 800a742:	2300      	movs	r3, #0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d10b      	bne.n	800a760 <xQueueReceive+0x94>
	__asm volatile
 800a748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a74c:	f383 8811 	msr	BASEPRI, r3
 800a750:	f3bf 8f6f 	isb	sy
 800a754:	f3bf 8f4f 	dsb	sy
 800a758:	61bb      	str	r3, [r7, #24]
}
 800a75a:	bf00      	nop
 800a75c:	bf00      	nop
 800a75e:	e7fd      	b.n	800a75c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a760:	f002 f90a 	bl	800c978 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a768:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d01f      	beq.n	800a7b0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a770:	68b9      	ldr	r1, [r7, #8]
 800a772:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a774:	f000 fac4 	bl	800ad00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a77a:	1e5a      	subs	r2, r3, #1
 800a77c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a782:	691b      	ldr	r3, [r3, #16]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d00f      	beq.n	800a7a8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a78a:	3310      	adds	r3, #16
 800a78c:	4618      	mov	r0, r3
 800a78e:	f001 f8ad 	bl	800b8ec <xTaskRemoveFromEventList>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d007      	beq.n	800a7a8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a798:	4b3c      	ldr	r3, [pc, #240]	@ (800a88c <xQueueReceive+0x1c0>)
 800a79a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a79e:	601a      	str	r2, [r3, #0]
 800a7a0:	f3bf 8f4f 	dsb	sy
 800a7a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a7a8:	f002 f918 	bl	800c9dc <vPortExitCritical>
				return pdPASS;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e069      	b.n	800a884 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d103      	bne.n	800a7be <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7b6:	f002 f911 	bl	800c9dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	e062      	b.n	800a884 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d106      	bne.n	800a7d2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7c4:	f107 0310 	add.w	r3, r7, #16
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f001 f8f3 	bl	800b9b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7d2:	f002 f903 	bl	800c9dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7d6:	f000 fe25 	bl	800b424 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7da:	f002 f8cd 	bl	800c978 <vPortEnterCritical>
 800a7de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a7e4:	b25b      	sxtb	r3, r3
 800a7e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7ea:	d103      	bne.n	800a7f4 <xQueueReceive+0x128>
 800a7ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a7fa:	b25b      	sxtb	r3, r3
 800a7fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a800:	d103      	bne.n	800a80a <xQueueReceive+0x13e>
 800a802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a804:	2200      	movs	r2, #0
 800a806:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a80a:	f002 f8e7 	bl	800c9dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a80e:	1d3a      	adds	r2, r7, #4
 800a810:	f107 0310 	add.w	r3, r7, #16
 800a814:	4611      	mov	r1, r2
 800a816:	4618      	mov	r0, r3
 800a818:	f001 f8e2 	bl	800b9e0 <xTaskCheckForTimeOut>
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d123      	bne.n	800a86a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a822:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a824:	f000 fae4 	bl	800adf0 <prvIsQueueEmpty>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d017      	beq.n	800a85e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a82e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a830:	3324      	adds	r3, #36	@ 0x24
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	4611      	mov	r1, r2
 800a836:	4618      	mov	r0, r3
 800a838:	f001 f806 	bl	800b848 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a83c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a83e:	f000 fa85 	bl	800ad4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a842:	f000 fdfd 	bl	800b440 <xTaskResumeAll>
 800a846:	4603      	mov	r3, r0
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d189      	bne.n	800a760 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a84c:	4b0f      	ldr	r3, [pc, #60]	@ (800a88c <xQueueReceive+0x1c0>)
 800a84e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a852:	601a      	str	r2, [r3, #0]
 800a854:	f3bf 8f4f 	dsb	sy
 800a858:	f3bf 8f6f 	isb	sy
 800a85c:	e780      	b.n	800a760 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a85e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a860:	f000 fa74 	bl	800ad4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a864:	f000 fdec 	bl	800b440 <xTaskResumeAll>
 800a868:	e77a      	b.n	800a760 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a86a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a86c:	f000 fa6e 	bl	800ad4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a870:	f000 fde6 	bl	800b440 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a874:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a876:	f000 fabb 	bl	800adf0 <prvIsQueueEmpty>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f43f af6f 	beq.w	800a760 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a882:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a884:	4618      	mov	r0, r3
 800a886:	3730      	adds	r7, #48	@ 0x30
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}
 800a88c:	e000ed04 	.word	0xe000ed04

0800a890 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b08e      	sub	sp, #56	@ 0x38
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a89a:	2300      	movs	r3, #0
 800a89c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d10b      	bne.n	800a8c4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a8ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8b0:	f383 8811 	msr	BASEPRI, r3
 800a8b4:	f3bf 8f6f 	isb	sy
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	623b      	str	r3, [r7, #32]
}
 800a8be:	bf00      	nop
 800a8c0:	bf00      	nop
 800a8c2:	e7fd      	b.n	800a8c0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a8c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00b      	beq.n	800a8e4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d0:	f383 8811 	msr	BASEPRI, r3
 800a8d4:	f3bf 8f6f 	isb	sy
 800a8d8:	f3bf 8f4f 	dsb	sy
 800a8dc:	61fb      	str	r3, [r7, #28]
}
 800a8de:	bf00      	nop
 800a8e0:	bf00      	nop
 800a8e2:	e7fd      	b.n	800a8e0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8e4:	f001 f9d8 	bl	800bc98 <xTaskGetSchedulerState>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d102      	bne.n	800a8f4 <xQueueSemaphoreTake+0x64>
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d101      	bne.n	800a8f8 <xQueueSemaphoreTake+0x68>
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e000      	b.n	800a8fa <xQueueSemaphoreTake+0x6a>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d10b      	bne.n	800a916 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a902:	f383 8811 	msr	BASEPRI, r3
 800a906:	f3bf 8f6f 	isb	sy
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	61bb      	str	r3, [r7, #24]
}
 800a910:	bf00      	nop
 800a912:	bf00      	nop
 800a914:	e7fd      	b.n	800a912 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a916:	f002 f82f 	bl	800c978 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a91a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a91c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a91e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a922:	2b00      	cmp	r3, #0
 800a924:	d024      	beq.n	800a970 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a928:	1e5a      	subs	r2, r3, #1
 800a92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a92c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a92e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d104      	bne.n	800a940 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a936:	f001 fb29 	bl	800bf8c <pvTaskIncrementMutexHeldCount>
 800a93a:	4602      	mov	r2, r0
 800a93c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a93e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00f      	beq.n	800a968 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a94a:	3310      	adds	r3, #16
 800a94c:	4618      	mov	r0, r3
 800a94e:	f000 ffcd 	bl	800b8ec <xTaskRemoveFromEventList>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d007      	beq.n	800a968 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a958:	4b54      	ldr	r3, [pc, #336]	@ (800aaac <xQueueSemaphoreTake+0x21c>)
 800a95a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a95e:	601a      	str	r2, [r3, #0]
 800a960:	f3bf 8f4f 	dsb	sy
 800a964:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a968:	f002 f838 	bl	800c9dc <vPortExitCritical>
				return pdPASS;
 800a96c:	2301      	movs	r3, #1
 800a96e:	e098      	b.n	800aaa2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d112      	bne.n	800a99c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d00b      	beq.n	800a994 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a97c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a980:	f383 8811 	msr	BASEPRI, r3
 800a984:	f3bf 8f6f 	isb	sy
 800a988:	f3bf 8f4f 	dsb	sy
 800a98c:	617b      	str	r3, [r7, #20]
}
 800a98e:	bf00      	nop
 800a990:	bf00      	nop
 800a992:	e7fd      	b.n	800a990 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a994:	f002 f822 	bl	800c9dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a998:	2300      	movs	r3, #0
 800a99a:	e082      	b.n	800aaa2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a99c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d106      	bne.n	800a9b0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9a2:	f107 030c 	add.w	r3, r7, #12
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f001 f804 	bl	800b9b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9b0:	f002 f814 	bl	800c9dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9b4:	f000 fd36 	bl	800b424 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9b8:	f001 ffde 	bl	800c978 <vPortEnterCritical>
 800a9bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9c2:	b25b      	sxtb	r3, r3
 800a9c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a9c8:	d103      	bne.n	800a9d2 <xQueueSemaphoreTake+0x142>
 800a9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9d8:	b25b      	sxtb	r3, r3
 800a9da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a9de:	d103      	bne.n	800a9e8 <xQueueSemaphoreTake+0x158>
 800a9e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a9e8:	f001 fff8 	bl	800c9dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9ec:	463a      	mov	r2, r7
 800a9ee:	f107 030c 	add.w	r3, r7, #12
 800a9f2:	4611      	mov	r1, r2
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f000 fff3 	bl	800b9e0 <xTaskCheckForTimeOut>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d132      	bne.n	800aa66 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa02:	f000 f9f5 	bl	800adf0 <prvIsQueueEmpty>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d026      	beq.n	800aa5a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d109      	bne.n	800aa28 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800aa14:	f001 ffb0 	bl	800c978 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa1a:	689b      	ldr	r3, [r3, #8]
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f001 f959 	bl	800bcd4 <xTaskPriorityInherit>
 800aa22:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800aa24:	f001 ffda 	bl	800c9dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa2a:	3324      	adds	r3, #36	@ 0x24
 800aa2c:	683a      	ldr	r2, [r7, #0]
 800aa2e:	4611      	mov	r1, r2
 800aa30:	4618      	mov	r0, r3
 800aa32:	f000 ff09 	bl	800b848 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa38:	f000 f988 	bl	800ad4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa3c:	f000 fd00 	bl	800b440 <xTaskResumeAll>
 800aa40:	4603      	mov	r3, r0
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	f47f af67 	bne.w	800a916 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800aa48:	4b18      	ldr	r3, [pc, #96]	@ (800aaac <xQueueSemaphoreTake+0x21c>)
 800aa4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa4e:	601a      	str	r2, [r3, #0]
 800aa50:	f3bf 8f4f 	dsb	sy
 800aa54:	f3bf 8f6f 	isb	sy
 800aa58:	e75d      	b.n	800a916 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800aa5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa5c:	f000 f976 	bl	800ad4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa60:	f000 fcee 	bl	800b440 <xTaskResumeAll>
 800aa64:	e757      	b.n	800a916 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800aa66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa68:	f000 f970 	bl	800ad4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa6c:	f000 fce8 	bl	800b440 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa72:	f000 f9bd 	bl	800adf0 <prvIsQueueEmpty>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f43f af4c 	beq.w	800a916 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aa7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d00d      	beq.n	800aaa0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800aa84:	f001 ff78 	bl	800c978 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aa88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa8a:	f000 f8b7 	bl	800abfc <prvGetDisinheritPriorityAfterTimeout>
 800aa8e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aa90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aa96:	4618      	mov	r0, r3
 800aa98:	f001 f9f4 	bl	800be84 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aa9c:	f001 ff9e 	bl	800c9dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aaa0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3738      	adds	r7, #56	@ 0x38
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	e000ed04 	.word	0xe000ed04

0800aab0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b08e      	sub	sp, #56	@ 0x38
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	60b9      	str	r1, [r7, #8]
 800aaba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800aac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d10b      	bne.n	800aade <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800aac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaca:	f383 8811 	msr	BASEPRI, r3
 800aace:	f3bf 8f6f 	isb	sy
 800aad2:	f3bf 8f4f 	dsb	sy
 800aad6:	623b      	str	r3, [r7, #32]
}
 800aad8:	bf00      	nop
 800aada:	bf00      	nop
 800aadc:	e7fd      	b.n	800aada <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d103      	bne.n	800aaec <xQueueReceiveFromISR+0x3c>
 800aae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d101      	bne.n	800aaf0 <xQueueReceiveFromISR+0x40>
 800aaec:	2301      	movs	r3, #1
 800aaee:	e000      	b.n	800aaf2 <xQueueReceiveFromISR+0x42>
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10b      	bne.n	800ab0e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800aaf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aafa:	f383 8811 	msr	BASEPRI, r3
 800aafe:	f3bf 8f6f 	isb	sy
 800ab02:	f3bf 8f4f 	dsb	sy
 800ab06:	61fb      	str	r3, [r7, #28]
}
 800ab08:	bf00      	nop
 800ab0a:	bf00      	nop
 800ab0c:	e7fd      	b.n	800ab0a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab0e:	f002 f813 	bl	800cb38 <vPortValidateInterruptPriority>
	__asm volatile
 800ab12:	f3ef 8211 	mrs	r2, BASEPRI
 800ab16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab1a:	f383 8811 	msr	BASEPRI, r3
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	f3bf 8f4f 	dsb	sy
 800ab26:	61ba      	str	r2, [r7, #24]
 800ab28:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ab2a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab32:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d02f      	beq.n	800ab9a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ab3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab44:	68b9      	ldr	r1, [r7, #8]
 800ab46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab48:	f000 f8da 	bl	800ad00 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab4e:	1e5a      	subs	r2, r3, #1
 800ab50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab52:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ab54:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ab58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab5c:	d112      	bne.n	800ab84 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab60:	691b      	ldr	r3, [r3, #16]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d016      	beq.n	800ab94 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab68:	3310      	adds	r3, #16
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f000 febe 	bl	800b8ec <xTaskRemoveFromEventList>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00e      	beq.n	800ab94 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d00b      	beq.n	800ab94 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	601a      	str	r2, [r3, #0]
 800ab82:	e007      	b.n	800ab94 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ab84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab88:	3301      	adds	r3, #1
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	b25a      	sxtb	r2, r3
 800ab8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ab94:	2301      	movs	r3, #1
 800ab96:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab98:	e001      	b.n	800ab9e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aba0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	f383 8811 	msr	BASEPRI, r3
}
 800aba8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800abac:	4618      	mov	r0, r3
 800abae:	3738      	adds	r7, #56	@ 0x38
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d10b      	bne.n	800abde <vQueueDelete+0x2a>
	__asm volatile
 800abc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abca:	f383 8811 	msr	BASEPRI, r3
 800abce:	f3bf 8f6f 	isb	sy
 800abd2:	f3bf 8f4f 	dsb	sy
 800abd6:	60bb      	str	r3, [r7, #8]
}
 800abd8:	bf00      	nop
 800abda:	bf00      	nop
 800abdc:	e7fd      	b.n	800abda <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800abde:	68f8      	ldr	r0, [r7, #12]
 800abe0:	f000 f95e 	bl	800aea0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800abea:	2b00      	cmp	r3, #0
 800abec:	d102      	bne.n	800abf4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f002 f88e 	bl	800cd10 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800abf4:	bf00      	nop
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800abfc:	b480      	push	{r7}
 800abfe:	b085      	sub	sp, #20
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d006      	beq.n	800ac1a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ac16:	60fb      	str	r3, [r7, #12]
 800ac18:	e001      	b.n	800ac1e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
	}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3714      	adds	r7, #20
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b086      	sub	sp, #24
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d10d      	bne.n	800ac66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d14d      	bne.n	800acee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	689b      	ldr	r3, [r3, #8]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f001 f8a4 	bl	800bda4 <xTaskPriorityDisinherit>
 800ac5c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2200      	movs	r2, #0
 800ac62:	609a      	str	r2, [r3, #8]
 800ac64:	e043      	b.n	800acee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d119      	bne.n	800aca0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6858      	ldr	r0, [r3, #4]
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac74:	461a      	mov	r2, r3
 800ac76:	68b9      	ldr	r1, [r7, #8]
 800ac78:	f007 fa2b 	bl	80120d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	685a      	ldr	r2, [r3, #4]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac84:	441a      	add	r2, r3
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	685a      	ldr	r2, [r3, #4]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d32b      	bcc.n	800acee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	605a      	str	r2, [r3, #4]
 800ac9e:	e026      	b.n	800acee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	68d8      	ldr	r0, [r3, #12]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aca8:	461a      	mov	r2, r3
 800acaa:	68b9      	ldr	r1, [r7, #8]
 800acac:	f007 fa11 	bl	80120d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	68da      	ldr	r2, [r3, #12]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acb8:	425b      	negs	r3, r3
 800acba:	441a      	add	r2, r3
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	68da      	ldr	r2, [r3, #12]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d207      	bcs.n	800acdc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	689a      	ldr	r2, [r3, #8]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acd4:	425b      	negs	r3, r3
 800acd6:	441a      	add	r2, r3
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2b02      	cmp	r3, #2
 800ace0:	d105      	bne.n	800acee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d002      	beq.n	800acee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	3b01      	subs	r3, #1
 800acec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	1c5a      	adds	r2, r3, #1
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800acf6:	697b      	ldr	r3, [r7, #20]
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3718      	adds	r7, #24
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d018      	beq.n	800ad44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	68da      	ldr	r2, [r3, #12]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad1a:	441a      	add	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	68da      	ldr	r2, [r3, #12]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d303      	bcc.n	800ad34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	68d9      	ldr	r1, [r3, #12]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	6838      	ldr	r0, [r7, #0]
 800ad40:	f007 f9c7 	bl	80120d2 <memcpy>
	}
}
 800ad44:	bf00      	nop
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ad54:	f001 fe10 	bl	800c978 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad60:	e011      	b.n	800ad86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d012      	beq.n	800ad90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	3324      	adds	r3, #36	@ 0x24
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f000 fdbc 	bl	800b8ec <xTaskRemoveFromEventList>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d001      	beq.n	800ad7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ad7a:	f000 fe95 	bl	800baa8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ad7e:	7bfb      	ldrb	r3, [r7, #15]
 800ad80:	3b01      	subs	r3, #1
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	dce9      	bgt.n	800ad62 <prvUnlockQueue+0x16>
 800ad8e:	e000      	b.n	800ad92 <prvUnlockQueue+0x46>
					break;
 800ad90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	22ff      	movs	r2, #255	@ 0xff
 800ad96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ad9a:	f001 fe1f 	bl	800c9dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad9e:	f001 fdeb 	bl	800c978 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ada8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800adaa:	e011      	b.n	800add0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	691b      	ldr	r3, [r3, #16]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d012      	beq.n	800adda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	3310      	adds	r3, #16
 800adb8:	4618      	mov	r0, r3
 800adba:	f000 fd97 	bl	800b8ec <xTaskRemoveFromEventList>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d001      	beq.n	800adc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800adc4:	f000 fe70 	bl	800baa8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800adc8:	7bbb      	ldrb	r3, [r7, #14]
 800adca:	3b01      	subs	r3, #1
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800add0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800add4:	2b00      	cmp	r3, #0
 800add6:	dce9      	bgt.n	800adac <prvUnlockQueue+0x60>
 800add8:	e000      	b.n	800addc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800adda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	22ff      	movs	r2, #255	@ 0xff
 800ade0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ade4:	f001 fdfa 	bl	800c9dc <vPortExitCritical>
}
 800ade8:	bf00      	nop
 800adea:	3710      	adds	r7, #16
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800adf8:	f001 fdbe 	bl	800c978 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d102      	bne.n	800ae0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ae04:	2301      	movs	r3, #1
 800ae06:	60fb      	str	r3, [r7, #12]
 800ae08:	e001      	b.n	800ae0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae0e:	f001 fde5 	bl	800c9dc <vPortExitCritical>

	return xReturn;
 800ae12:	68fb      	ldr	r3, [r7, #12]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae24:	f001 fda8 	bl	800c978 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d102      	bne.n	800ae3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ae34:	2301      	movs	r3, #1
 800ae36:	60fb      	str	r3, [r7, #12]
 800ae38:	e001      	b.n	800ae3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae3e:	f001 fdcd 	bl	800c9dc <vPortExitCritical>

	return xReturn;
 800ae42:	68fb      	ldr	r3, [r7, #12]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3710      	adds	r7, #16
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b085      	sub	sp, #20
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae56:	2300      	movs	r3, #0
 800ae58:	60fb      	str	r3, [r7, #12]
 800ae5a:	e014      	b.n	800ae86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ae5c:	4a0f      	ldr	r2, [pc, #60]	@ (800ae9c <vQueueAddToRegistry+0x50>)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d10b      	bne.n	800ae80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ae68:	490c      	ldr	r1, [pc, #48]	@ (800ae9c <vQueueAddToRegistry+0x50>)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	683a      	ldr	r2, [r7, #0]
 800ae6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ae72:	4a0a      	ldr	r2, [pc, #40]	@ (800ae9c <vQueueAddToRegistry+0x50>)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	00db      	lsls	r3, r3, #3
 800ae78:	4413      	add	r3, r2
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ae7e:	e006      	b.n	800ae8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	3301      	adds	r3, #1
 800ae84:	60fb      	str	r3, [r7, #12]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2b07      	cmp	r3, #7
 800ae8a:	d9e7      	bls.n	800ae5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ae8c:	bf00      	nop
 800ae8e:	bf00      	nop
 800ae90:	3714      	adds	r7, #20
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	24069a74 	.word	0x24069a74

0800aea0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aea8:	2300      	movs	r3, #0
 800aeaa:	60fb      	str	r3, [r7, #12]
 800aeac:	e016      	b.n	800aedc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800aeae:	4a10      	ldr	r2, [pc, #64]	@ (800aef0 <vQueueUnregisterQueue+0x50>)
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	00db      	lsls	r3, r3, #3
 800aeb4:	4413      	add	r3, r2
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d10b      	bne.n	800aed6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800aebe:	4a0c      	ldr	r2, [pc, #48]	@ (800aef0 <vQueueUnregisterQueue+0x50>)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2100      	movs	r1, #0
 800aec4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800aec8:	4a09      	ldr	r2, [pc, #36]	@ (800aef0 <vQueueUnregisterQueue+0x50>)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	00db      	lsls	r3, r3, #3
 800aece:	4413      	add	r3, r2
 800aed0:	2200      	movs	r2, #0
 800aed2:	605a      	str	r2, [r3, #4]
				break;
 800aed4:	e006      	b.n	800aee4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	3301      	adds	r3, #1
 800aeda:	60fb      	str	r3, [r7, #12]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2b07      	cmp	r3, #7
 800aee0:	d9e5      	bls.n	800aeae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800aee2:	bf00      	nop
 800aee4:	bf00      	nop
 800aee6:	3714      	adds	r7, #20
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr
 800aef0:	24069a74 	.word	0x24069a74

0800aef4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b086      	sub	sp, #24
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800af04:	f001 fd38 	bl	800c978 <vPortEnterCritical>
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af0e:	b25b      	sxtb	r3, r3
 800af10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af14:	d103      	bne.n	800af1e <vQueueWaitForMessageRestricted+0x2a>
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	2200      	movs	r2, #0
 800af1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af24:	b25b      	sxtb	r3, r3
 800af26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af2a:	d103      	bne.n	800af34 <vQueueWaitForMessageRestricted+0x40>
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	2200      	movs	r2, #0
 800af30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af34:	f001 fd52 	bl	800c9dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d106      	bne.n	800af4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	3324      	adds	r3, #36	@ 0x24
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	68b9      	ldr	r1, [r7, #8]
 800af48:	4618      	mov	r0, r3
 800af4a:	f000 fca3 	bl	800b894 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800af4e:	6978      	ldr	r0, [r7, #20]
 800af50:	f7ff fefc 	bl	800ad4c <prvUnlockQueue>
	}
 800af54:	bf00      	nop
 800af56:	3718      	adds	r7, #24
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b08e      	sub	sp, #56	@ 0x38
 800af60:	af04      	add	r7, sp, #16
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
 800af68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800af6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d10b      	bne.n	800af88 <xTaskCreateStatic+0x2c>
	__asm volatile
 800af70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af74:	f383 8811 	msr	BASEPRI, r3
 800af78:	f3bf 8f6f 	isb	sy
 800af7c:	f3bf 8f4f 	dsb	sy
 800af80:	623b      	str	r3, [r7, #32]
}
 800af82:	bf00      	nop
 800af84:	bf00      	nop
 800af86:	e7fd      	b.n	800af84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800af88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d10b      	bne.n	800afa6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800af8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af92:	f383 8811 	msr	BASEPRI, r3
 800af96:	f3bf 8f6f 	isb	sy
 800af9a:	f3bf 8f4f 	dsb	sy
 800af9e:	61fb      	str	r3, [r7, #28]
}
 800afa0:	bf00      	nop
 800afa2:	bf00      	nop
 800afa4:	e7fd      	b.n	800afa2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800afa6:	23a8      	movs	r3, #168	@ 0xa8
 800afa8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	2ba8      	cmp	r3, #168	@ 0xa8
 800afae:	d00b      	beq.n	800afc8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800afb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afb4:	f383 8811 	msr	BASEPRI, r3
 800afb8:	f3bf 8f6f 	isb	sy
 800afbc:	f3bf 8f4f 	dsb	sy
 800afc0:	61bb      	str	r3, [r7, #24]
}
 800afc2:	bf00      	nop
 800afc4:	bf00      	nop
 800afc6:	e7fd      	b.n	800afc4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800afc8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800afca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d01e      	beq.n	800b00e <xTaskCreateStatic+0xb2>
 800afd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d01b      	beq.n	800b00e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800afd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800afda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800afde:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800afe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe2:	2202      	movs	r2, #2
 800afe4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800afe8:	2300      	movs	r3, #0
 800afea:	9303      	str	r3, [sp, #12]
 800afec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afee:	9302      	str	r3, [sp, #8]
 800aff0:	f107 0314 	add.w	r3, r7, #20
 800aff4:	9301      	str	r3, [sp, #4]
 800aff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff8:	9300      	str	r3, [sp, #0]
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	68b9      	ldr	r1, [r7, #8]
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f000 f851 	bl	800b0a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b006:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b008:	f000 f8f6 	bl	800b1f8 <prvAddNewTaskToReadyList>
 800b00c:	e001      	b.n	800b012 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b00e:	2300      	movs	r3, #0
 800b010:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b012:	697b      	ldr	r3, [r7, #20]
	}
 800b014:	4618      	mov	r0, r3
 800b016:	3728      	adds	r7, #40	@ 0x28
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b08c      	sub	sp, #48	@ 0x30
 800b020:	af04      	add	r7, sp, #16
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	603b      	str	r3, [r7, #0]
 800b028:	4613      	mov	r3, r2
 800b02a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b02c:	88fb      	ldrh	r3, [r7, #6]
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	4618      	mov	r0, r3
 800b032:	f001 fdc3 	bl	800cbbc <pvPortMalloc>
 800b036:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00e      	beq.n	800b05c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b03e:	20a8      	movs	r0, #168	@ 0xa8
 800b040:	f001 fdbc 	bl	800cbbc <pvPortMalloc>
 800b044:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d003      	beq.n	800b054 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	697a      	ldr	r2, [r7, #20]
 800b050:	631a      	str	r2, [r3, #48]	@ 0x30
 800b052:	e005      	b.n	800b060 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b054:	6978      	ldr	r0, [r7, #20]
 800b056:	f001 fe5b 	bl	800cd10 <vPortFree>
 800b05a:	e001      	b.n	800b060 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b05c:	2300      	movs	r3, #0
 800b05e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d017      	beq.n	800b096 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	2200      	movs	r2, #0
 800b06a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b06e:	88fa      	ldrh	r2, [r7, #6]
 800b070:	2300      	movs	r3, #0
 800b072:	9303      	str	r3, [sp, #12]
 800b074:	69fb      	ldr	r3, [r7, #28]
 800b076:	9302      	str	r3, [sp, #8]
 800b078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b07a:	9301      	str	r3, [sp, #4]
 800b07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b07e:	9300      	str	r3, [sp, #0]
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	68b9      	ldr	r1, [r7, #8]
 800b084:	68f8      	ldr	r0, [r7, #12]
 800b086:	f000 f80f 	bl	800b0a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b08a:	69f8      	ldr	r0, [r7, #28]
 800b08c:	f000 f8b4 	bl	800b1f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b090:	2301      	movs	r3, #1
 800b092:	61bb      	str	r3, [r7, #24]
 800b094:	e002      	b.n	800b09c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b096:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b09a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b09c:	69bb      	ldr	r3, [r7, #24]
	}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3720      	adds	r7, #32
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
	...

0800b0a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b088      	sub	sp, #32
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	607a      	str	r2, [r7, #4]
 800b0b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0b8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	461a      	mov	r2, r3
 800b0c0:	21a5      	movs	r1, #165	@ 0xa5
 800b0c2:	f006 ff3a 	bl	8011f3a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b0ca:	6879      	ldr	r1, [r7, #4]
 800b0cc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b0d0:	440b      	add	r3, r1
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	4413      	add	r3, r2
 800b0d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	f023 0307 	bic.w	r3, r3, #7
 800b0de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	f003 0307 	and.w	r3, r3, #7
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00b      	beq.n	800b102 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b0ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ee:	f383 8811 	msr	BASEPRI, r3
 800b0f2:	f3bf 8f6f 	isb	sy
 800b0f6:	f3bf 8f4f 	dsb	sy
 800b0fa:	617b      	str	r3, [r7, #20]
}
 800b0fc:	bf00      	nop
 800b0fe:	bf00      	nop
 800b100:	e7fd      	b.n	800b0fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d01f      	beq.n	800b148 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b108:	2300      	movs	r3, #0
 800b10a:	61fb      	str	r3, [r7, #28]
 800b10c:	e012      	b.n	800b134 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b10e:	68ba      	ldr	r2, [r7, #8]
 800b110:	69fb      	ldr	r3, [r7, #28]
 800b112:	4413      	add	r3, r2
 800b114:	7819      	ldrb	r1, [r3, #0]
 800b116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	4413      	add	r3, r2
 800b11c:	3334      	adds	r3, #52	@ 0x34
 800b11e:	460a      	mov	r2, r1
 800b120:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b122:	68ba      	ldr	r2, [r7, #8]
 800b124:	69fb      	ldr	r3, [r7, #28]
 800b126:	4413      	add	r3, r2
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d006      	beq.n	800b13c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b12e:	69fb      	ldr	r3, [r7, #28]
 800b130:	3301      	adds	r3, #1
 800b132:	61fb      	str	r3, [r7, #28]
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	2b0f      	cmp	r3, #15
 800b138:	d9e9      	bls.n	800b10e <prvInitialiseNewTask+0x66>
 800b13a:	e000      	b.n	800b13e <prvInitialiseNewTask+0x96>
			{
				break;
 800b13c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b140:	2200      	movs	r2, #0
 800b142:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b146:	e003      	b.n	800b150 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b14a:	2200      	movs	r2, #0
 800b14c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b152:	2b37      	cmp	r3, #55	@ 0x37
 800b154:	d901      	bls.n	800b15a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b156:	2337      	movs	r3, #55	@ 0x37
 800b158:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b15c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b15e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b162:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b164:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b168:	2200      	movs	r2, #0
 800b16a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b16c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b16e:	3304      	adds	r3, #4
 800b170:	4618      	mov	r0, r3
 800b172:	f7fe fd7b 	bl	8009c6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b178:	3318      	adds	r3, #24
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7fe fd76 	bl	8009c6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b182:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b184:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b188:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b18e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b192:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b194:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b198:	2200      	movs	r2, #0
 800b19a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a8:	3354      	adds	r3, #84	@ 0x54
 800b1aa:	224c      	movs	r2, #76	@ 0x4c
 800b1ac:	2100      	movs	r1, #0
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f006 fec3 	bl	8011f3a <memset>
 800b1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b6:	4a0d      	ldr	r2, [pc, #52]	@ (800b1ec <prvInitialiseNewTask+0x144>)
 800b1b8:	659a      	str	r2, [r3, #88]	@ 0x58
 800b1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1bc:	4a0c      	ldr	r2, [pc, #48]	@ (800b1f0 <prvInitialiseNewTask+0x148>)
 800b1be:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c2:	4a0c      	ldr	r2, [pc, #48]	@ (800b1f4 <prvInitialiseNewTask+0x14c>)
 800b1c4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b1c6:	683a      	ldr	r2, [r7, #0]
 800b1c8:	68f9      	ldr	r1, [r7, #12]
 800b1ca:	69b8      	ldr	r0, [r7, #24]
 800b1cc:	f001 faa0 	bl	800c710 <pxPortInitialiseStack>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b1d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d002      	beq.n	800b1e2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1e2:	bf00      	nop
 800b1e4:	3720      	adds	r7, #32
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	2406cf60 	.word	0x2406cf60
 800b1f0:	2406cfc8 	.word	0x2406cfc8
 800b1f4:	2406d030 	.word	0x2406d030

0800b1f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b200:	f001 fbba 	bl	800c978 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b204:	4b2d      	ldr	r3, [pc, #180]	@ (800b2bc <prvAddNewTaskToReadyList+0xc4>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	3301      	adds	r3, #1
 800b20a:	4a2c      	ldr	r2, [pc, #176]	@ (800b2bc <prvAddNewTaskToReadyList+0xc4>)
 800b20c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b20e:	4b2c      	ldr	r3, [pc, #176]	@ (800b2c0 <prvAddNewTaskToReadyList+0xc8>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d109      	bne.n	800b22a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b216:	4a2a      	ldr	r2, [pc, #168]	@ (800b2c0 <prvAddNewTaskToReadyList+0xc8>)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b21c:	4b27      	ldr	r3, [pc, #156]	@ (800b2bc <prvAddNewTaskToReadyList+0xc4>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2b01      	cmp	r3, #1
 800b222:	d110      	bne.n	800b246 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b224:	f000 fc64 	bl	800baf0 <prvInitialiseTaskLists>
 800b228:	e00d      	b.n	800b246 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b22a:	4b26      	ldr	r3, [pc, #152]	@ (800b2c4 <prvAddNewTaskToReadyList+0xcc>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d109      	bne.n	800b246 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b232:	4b23      	ldr	r3, [pc, #140]	@ (800b2c0 <prvAddNewTaskToReadyList+0xc8>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d802      	bhi.n	800b246 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b240:	4a1f      	ldr	r2, [pc, #124]	@ (800b2c0 <prvAddNewTaskToReadyList+0xc8>)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b246:	4b20      	ldr	r3, [pc, #128]	@ (800b2c8 <prvAddNewTaskToReadyList+0xd0>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	3301      	adds	r3, #1
 800b24c:	4a1e      	ldr	r2, [pc, #120]	@ (800b2c8 <prvAddNewTaskToReadyList+0xd0>)
 800b24e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b250:	4b1d      	ldr	r3, [pc, #116]	@ (800b2c8 <prvAddNewTaskToReadyList+0xd0>)
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b25c:	4b1b      	ldr	r3, [pc, #108]	@ (800b2cc <prvAddNewTaskToReadyList+0xd4>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	429a      	cmp	r2, r3
 800b262:	d903      	bls.n	800b26c <prvAddNewTaskToReadyList+0x74>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b268:	4a18      	ldr	r2, [pc, #96]	@ (800b2cc <prvAddNewTaskToReadyList+0xd4>)
 800b26a:	6013      	str	r3, [r2, #0]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b270:	4613      	mov	r3, r2
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	4413      	add	r3, r2
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	4a15      	ldr	r2, [pc, #84]	@ (800b2d0 <prvAddNewTaskToReadyList+0xd8>)
 800b27a:	441a      	add	r2, r3
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	3304      	adds	r3, #4
 800b280:	4619      	mov	r1, r3
 800b282:	4610      	mov	r0, r2
 800b284:	f7fe fcff 	bl	8009c86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b288:	f001 fba8 	bl	800c9dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b28c:	4b0d      	ldr	r3, [pc, #52]	@ (800b2c4 <prvAddNewTaskToReadyList+0xcc>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d00e      	beq.n	800b2b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b294:	4b0a      	ldr	r3, [pc, #40]	@ (800b2c0 <prvAddNewTaskToReadyList+0xc8>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d207      	bcs.n	800b2b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b2a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b2d4 <prvAddNewTaskToReadyList+0xdc>)
 800b2a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2a8:	601a      	str	r2, [r3, #0]
 800b2aa:	f3bf 8f4f 	dsb	sy
 800b2ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2b2:	bf00      	nop
 800b2b4:	3708      	adds	r7, #8
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	24069f88 	.word	0x24069f88
 800b2c0:	24069ab4 	.word	0x24069ab4
 800b2c4:	24069f94 	.word	0x24069f94
 800b2c8:	24069fa4 	.word	0x24069fa4
 800b2cc:	24069f90 	.word	0x24069f90
 800b2d0:	24069ab8 	.word	0x24069ab8
 800b2d4:	e000ed04 	.word	0xe000ed04

0800b2d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d018      	beq.n	800b31c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b2ea:	4b14      	ldr	r3, [pc, #80]	@ (800b33c <vTaskDelay+0x64>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d00b      	beq.n	800b30a <vTaskDelay+0x32>
	__asm volatile
 800b2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f6:	f383 8811 	msr	BASEPRI, r3
 800b2fa:	f3bf 8f6f 	isb	sy
 800b2fe:	f3bf 8f4f 	dsb	sy
 800b302:	60bb      	str	r3, [r7, #8]
}
 800b304:	bf00      	nop
 800b306:	bf00      	nop
 800b308:	e7fd      	b.n	800b306 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b30a:	f000 f88b 	bl	800b424 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b30e:	2100      	movs	r1, #0
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 fe4f 	bl	800bfb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b316:	f000 f893 	bl	800b440 <xTaskResumeAll>
 800b31a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d107      	bne.n	800b332 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b322:	4b07      	ldr	r3, [pc, #28]	@ (800b340 <vTaskDelay+0x68>)
 800b324:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b328:	601a      	str	r2, [r3, #0]
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b332:	bf00      	nop
 800b334:	3710      	adds	r7, #16
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	24069fb0 	.word	0x24069fb0
 800b340:	e000ed04 	.word	0xe000ed04

0800b344 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b08a      	sub	sp, #40	@ 0x28
 800b348:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b34a:	2300      	movs	r3, #0
 800b34c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b34e:	2300      	movs	r3, #0
 800b350:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b352:	463a      	mov	r2, r7
 800b354:	1d39      	adds	r1, r7, #4
 800b356:	f107 0308 	add.w	r3, r7, #8
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fe fc32 	bl	8009bc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b360:	6839      	ldr	r1, [r7, #0]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	68ba      	ldr	r2, [r7, #8]
 800b366:	9202      	str	r2, [sp, #8]
 800b368:	9301      	str	r3, [sp, #4]
 800b36a:	2300      	movs	r3, #0
 800b36c:	9300      	str	r3, [sp, #0]
 800b36e:	2300      	movs	r3, #0
 800b370:	460a      	mov	r2, r1
 800b372:	4924      	ldr	r1, [pc, #144]	@ (800b404 <vTaskStartScheduler+0xc0>)
 800b374:	4824      	ldr	r0, [pc, #144]	@ (800b408 <vTaskStartScheduler+0xc4>)
 800b376:	f7ff fdf1 	bl	800af5c <xTaskCreateStatic>
 800b37a:	4603      	mov	r3, r0
 800b37c:	4a23      	ldr	r2, [pc, #140]	@ (800b40c <vTaskStartScheduler+0xc8>)
 800b37e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b380:	4b22      	ldr	r3, [pc, #136]	@ (800b40c <vTaskStartScheduler+0xc8>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d002      	beq.n	800b38e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b388:	2301      	movs	r3, #1
 800b38a:	617b      	str	r3, [r7, #20]
 800b38c:	e001      	b.n	800b392 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b38e:	2300      	movs	r3, #0
 800b390:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	2b01      	cmp	r3, #1
 800b396:	d102      	bne.n	800b39e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b398:	f000 fe60 	bl	800c05c <xTimerCreateTimerTask>
 800b39c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d11b      	bne.n	800b3dc <vTaskStartScheduler+0x98>
	__asm volatile
 800b3a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3a8:	f383 8811 	msr	BASEPRI, r3
 800b3ac:	f3bf 8f6f 	isb	sy
 800b3b0:	f3bf 8f4f 	dsb	sy
 800b3b4:	613b      	str	r3, [r7, #16]
}
 800b3b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b3b8:	4b15      	ldr	r3, [pc, #84]	@ (800b410 <vTaskStartScheduler+0xcc>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	3354      	adds	r3, #84	@ 0x54
 800b3be:	4a15      	ldr	r2, [pc, #84]	@ (800b414 <vTaskStartScheduler+0xd0>)
 800b3c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b3c2:	4b15      	ldr	r3, [pc, #84]	@ (800b418 <vTaskStartScheduler+0xd4>)
 800b3c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b3c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b3ca:	4b14      	ldr	r3, [pc, #80]	@ (800b41c <vTaskStartScheduler+0xd8>)
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b3d0:	4b13      	ldr	r3, [pc, #76]	@ (800b420 <vTaskStartScheduler+0xdc>)
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b3d6:	f001 fa2b 	bl	800c830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b3da:	e00f      	b.n	800b3fc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3e2:	d10b      	bne.n	800b3fc <vTaskStartScheduler+0xb8>
	__asm volatile
 800b3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3e8:	f383 8811 	msr	BASEPRI, r3
 800b3ec:	f3bf 8f6f 	isb	sy
 800b3f0:	f3bf 8f4f 	dsb	sy
 800b3f4:	60fb      	str	r3, [r7, #12]
}
 800b3f6:	bf00      	nop
 800b3f8:	bf00      	nop
 800b3fa:	e7fd      	b.n	800b3f8 <vTaskStartScheduler+0xb4>
}
 800b3fc:	bf00      	nop
 800b3fe:	3718      	adds	r7, #24
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}
 800b404:	08012dfc 	.word	0x08012dfc
 800b408:	0800bac1 	.word	0x0800bac1
 800b40c:	24069fac 	.word	0x24069fac
 800b410:	24069ab4 	.word	0x24069ab4
 800b414:	24000048 	.word	0x24000048
 800b418:	24069fa8 	.word	0x24069fa8
 800b41c:	24069f94 	.word	0x24069f94
 800b420:	24069f8c 	.word	0x24069f8c

0800b424 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b424:	b480      	push	{r7}
 800b426:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b428:	4b04      	ldr	r3, [pc, #16]	@ (800b43c <vTaskSuspendAll+0x18>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	3301      	adds	r3, #1
 800b42e:	4a03      	ldr	r2, [pc, #12]	@ (800b43c <vTaskSuspendAll+0x18>)
 800b430:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b432:	bf00      	nop
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr
 800b43c:	24069fb0 	.word	0x24069fb0

0800b440 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b446:	2300      	movs	r3, #0
 800b448:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b44a:	2300      	movs	r3, #0
 800b44c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b44e:	4b42      	ldr	r3, [pc, #264]	@ (800b558 <xTaskResumeAll+0x118>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d10b      	bne.n	800b46e <xTaskResumeAll+0x2e>
	__asm volatile
 800b456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b45a:	f383 8811 	msr	BASEPRI, r3
 800b45e:	f3bf 8f6f 	isb	sy
 800b462:	f3bf 8f4f 	dsb	sy
 800b466:	603b      	str	r3, [r7, #0]
}
 800b468:	bf00      	nop
 800b46a:	bf00      	nop
 800b46c:	e7fd      	b.n	800b46a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b46e:	f001 fa83 	bl	800c978 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b472:	4b39      	ldr	r3, [pc, #228]	@ (800b558 <xTaskResumeAll+0x118>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	3b01      	subs	r3, #1
 800b478:	4a37      	ldr	r2, [pc, #220]	@ (800b558 <xTaskResumeAll+0x118>)
 800b47a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b47c:	4b36      	ldr	r3, [pc, #216]	@ (800b558 <xTaskResumeAll+0x118>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d162      	bne.n	800b54a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b484:	4b35      	ldr	r3, [pc, #212]	@ (800b55c <xTaskResumeAll+0x11c>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d05e      	beq.n	800b54a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b48c:	e02f      	b.n	800b4ee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b48e:	4b34      	ldr	r3, [pc, #208]	@ (800b560 <xTaskResumeAll+0x120>)
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	3318      	adds	r3, #24
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7fe fc50 	bl	8009d40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	3304      	adds	r3, #4
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7fe fc4b 	bl	8009d40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4ae:	4b2d      	ldr	r3, [pc, #180]	@ (800b564 <xTaskResumeAll+0x124>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d903      	bls.n	800b4be <xTaskResumeAll+0x7e>
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4ba:	4a2a      	ldr	r2, [pc, #168]	@ (800b564 <xTaskResumeAll+0x124>)
 800b4bc:	6013      	str	r3, [r2, #0]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	4413      	add	r3, r2
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	4a27      	ldr	r2, [pc, #156]	@ (800b568 <xTaskResumeAll+0x128>)
 800b4cc:	441a      	add	r2, r3
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	3304      	adds	r3, #4
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	4610      	mov	r0, r2
 800b4d6:	f7fe fbd6 	bl	8009c86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4de:	4b23      	ldr	r3, [pc, #140]	@ (800b56c <xTaskResumeAll+0x12c>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d302      	bcc.n	800b4ee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b4e8:	4b21      	ldr	r3, [pc, #132]	@ (800b570 <xTaskResumeAll+0x130>)
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b4ee:	4b1c      	ldr	r3, [pc, #112]	@ (800b560 <xTaskResumeAll+0x120>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d1cb      	bne.n	800b48e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d001      	beq.n	800b500 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b4fc:	f000 fb9c 	bl	800bc38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b500:	4b1c      	ldr	r3, [pc, #112]	@ (800b574 <xTaskResumeAll+0x134>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d010      	beq.n	800b52e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b50c:	f000 f858 	bl	800b5c0 <xTaskIncrementTick>
 800b510:	4603      	mov	r3, r0
 800b512:	2b00      	cmp	r3, #0
 800b514:	d002      	beq.n	800b51c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b516:	4b16      	ldr	r3, [pc, #88]	@ (800b570 <xTaskResumeAll+0x130>)
 800b518:	2201      	movs	r2, #1
 800b51a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	3b01      	subs	r3, #1
 800b520:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d1f1      	bne.n	800b50c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b528:	4b12      	ldr	r3, [pc, #72]	@ (800b574 <xTaskResumeAll+0x134>)
 800b52a:	2200      	movs	r2, #0
 800b52c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b52e:	4b10      	ldr	r3, [pc, #64]	@ (800b570 <xTaskResumeAll+0x130>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d009      	beq.n	800b54a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b536:	2301      	movs	r3, #1
 800b538:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b53a:	4b0f      	ldr	r3, [pc, #60]	@ (800b578 <xTaskResumeAll+0x138>)
 800b53c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b540:	601a      	str	r2, [r3, #0]
 800b542:	f3bf 8f4f 	dsb	sy
 800b546:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b54a:	f001 fa47 	bl	800c9dc <vPortExitCritical>

	return xAlreadyYielded;
 800b54e:	68bb      	ldr	r3, [r7, #8]
}
 800b550:	4618      	mov	r0, r3
 800b552:	3710      	adds	r7, #16
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}
 800b558:	24069fb0 	.word	0x24069fb0
 800b55c:	24069f88 	.word	0x24069f88
 800b560:	24069f48 	.word	0x24069f48
 800b564:	24069f90 	.word	0x24069f90
 800b568:	24069ab8 	.word	0x24069ab8
 800b56c:	24069ab4 	.word	0x24069ab4
 800b570:	24069f9c 	.word	0x24069f9c
 800b574:	24069f98 	.word	0x24069f98
 800b578:	e000ed04 	.word	0xe000ed04

0800b57c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b57c:	b480      	push	{r7}
 800b57e:	b083      	sub	sp, #12
 800b580:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b582:	4b05      	ldr	r3, [pc, #20]	@ (800b598 <xTaskGetTickCount+0x1c>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b588:	687b      	ldr	r3, [r7, #4]
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	370c      	adds	r7, #12
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop
 800b598:	24069f8c 	.word	0x24069f8c

0800b59c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b5a2:	f001 fac9 	bl	800cb38 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b5aa:	4b04      	ldr	r3, [pc, #16]	@ (800b5bc <xTaskGetTickCountFromISR+0x20>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b5b0:	683b      	ldr	r3, [r7, #0]
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3708      	adds	r7, #8
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	24069f8c 	.word	0x24069f8c

0800b5c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b086      	sub	sp, #24
 800b5c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5ca:	4b4f      	ldr	r3, [pc, #316]	@ (800b708 <xTaskIncrementTick+0x148>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f040 8090 	bne.w	800b6f4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b5d4:	4b4d      	ldr	r3, [pc, #308]	@ (800b70c <xTaskIncrementTick+0x14c>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	3301      	adds	r3, #1
 800b5da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b5dc:	4a4b      	ldr	r2, [pc, #300]	@ (800b70c <xTaskIncrementTick+0x14c>)
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d121      	bne.n	800b62c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b5e8:	4b49      	ldr	r3, [pc, #292]	@ (800b710 <xTaskIncrementTick+0x150>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d00b      	beq.n	800b60a <xTaskIncrementTick+0x4a>
	__asm volatile
 800b5f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5f6:	f383 8811 	msr	BASEPRI, r3
 800b5fa:	f3bf 8f6f 	isb	sy
 800b5fe:	f3bf 8f4f 	dsb	sy
 800b602:	603b      	str	r3, [r7, #0]
}
 800b604:	bf00      	nop
 800b606:	bf00      	nop
 800b608:	e7fd      	b.n	800b606 <xTaskIncrementTick+0x46>
 800b60a:	4b41      	ldr	r3, [pc, #260]	@ (800b710 <xTaskIncrementTick+0x150>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	60fb      	str	r3, [r7, #12]
 800b610:	4b40      	ldr	r3, [pc, #256]	@ (800b714 <xTaskIncrementTick+0x154>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a3e      	ldr	r2, [pc, #248]	@ (800b710 <xTaskIncrementTick+0x150>)
 800b616:	6013      	str	r3, [r2, #0]
 800b618:	4a3e      	ldr	r2, [pc, #248]	@ (800b714 <xTaskIncrementTick+0x154>)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	6013      	str	r3, [r2, #0]
 800b61e:	4b3e      	ldr	r3, [pc, #248]	@ (800b718 <xTaskIncrementTick+0x158>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	3301      	adds	r3, #1
 800b624:	4a3c      	ldr	r2, [pc, #240]	@ (800b718 <xTaskIncrementTick+0x158>)
 800b626:	6013      	str	r3, [r2, #0]
 800b628:	f000 fb06 	bl	800bc38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b62c:	4b3b      	ldr	r3, [pc, #236]	@ (800b71c <xTaskIncrementTick+0x15c>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	693a      	ldr	r2, [r7, #16]
 800b632:	429a      	cmp	r2, r3
 800b634:	d349      	bcc.n	800b6ca <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b636:	4b36      	ldr	r3, [pc, #216]	@ (800b710 <xTaskIncrementTick+0x150>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d104      	bne.n	800b64a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b640:	4b36      	ldr	r3, [pc, #216]	@ (800b71c <xTaskIncrementTick+0x15c>)
 800b642:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b646:	601a      	str	r2, [r3, #0]
					break;
 800b648:	e03f      	b.n	800b6ca <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b64a:	4b31      	ldr	r3, [pc, #196]	@ (800b710 <xTaskIncrementTick+0x150>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	68db      	ldr	r3, [r3, #12]
 800b652:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b65a:	693a      	ldr	r2, [r7, #16]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d203      	bcs.n	800b66a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b662:	4a2e      	ldr	r2, [pc, #184]	@ (800b71c <xTaskIncrementTick+0x15c>)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b668:	e02f      	b.n	800b6ca <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	3304      	adds	r3, #4
 800b66e:	4618      	mov	r0, r3
 800b670:	f7fe fb66 	bl	8009d40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d004      	beq.n	800b686 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	3318      	adds	r3, #24
 800b680:	4618      	mov	r0, r3
 800b682:	f7fe fb5d 	bl	8009d40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b68a:	4b25      	ldr	r3, [pc, #148]	@ (800b720 <xTaskIncrementTick+0x160>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d903      	bls.n	800b69a <xTaskIncrementTick+0xda>
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b696:	4a22      	ldr	r2, [pc, #136]	@ (800b720 <xTaskIncrementTick+0x160>)
 800b698:	6013      	str	r3, [r2, #0]
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b69e:	4613      	mov	r3, r2
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	4413      	add	r3, r2
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4a1f      	ldr	r2, [pc, #124]	@ (800b724 <xTaskIncrementTick+0x164>)
 800b6a8:	441a      	add	r2, r3
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	3304      	adds	r3, #4
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	4610      	mov	r0, r2
 800b6b2:	f7fe fae8 	bl	8009c86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6ba:	4b1b      	ldr	r3, [pc, #108]	@ (800b728 <xTaskIncrementTick+0x168>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d3b8      	bcc.n	800b636 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6c8:	e7b5      	b.n	800b636 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b6ca:	4b17      	ldr	r3, [pc, #92]	@ (800b728 <xTaskIncrementTick+0x168>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6d0:	4914      	ldr	r1, [pc, #80]	@ (800b724 <xTaskIncrementTick+0x164>)
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	4413      	add	r3, r2
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	440b      	add	r3, r1
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d901      	bls.n	800b6e6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b6e6:	4b11      	ldr	r3, [pc, #68]	@ (800b72c <xTaskIncrementTick+0x16c>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d007      	beq.n	800b6fe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	617b      	str	r3, [r7, #20]
 800b6f2:	e004      	b.n	800b6fe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b6f4:	4b0e      	ldr	r3, [pc, #56]	@ (800b730 <xTaskIncrementTick+0x170>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	4a0d      	ldr	r2, [pc, #52]	@ (800b730 <xTaskIncrementTick+0x170>)
 800b6fc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b6fe:	697b      	ldr	r3, [r7, #20]
}
 800b700:	4618      	mov	r0, r3
 800b702:	3718      	adds	r7, #24
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	24069fb0 	.word	0x24069fb0
 800b70c:	24069f8c 	.word	0x24069f8c
 800b710:	24069f40 	.word	0x24069f40
 800b714:	24069f44 	.word	0x24069f44
 800b718:	24069fa0 	.word	0x24069fa0
 800b71c:	24069fa8 	.word	0x24069fa8
 800b720:	24069f90 	.word	0x24069f90
 800b724:	24069ab8 	.word	0x24069ab8
 800b728:	24069ab4 	.word	0x24069ab4
 800b72c:	24069f9c 	.word	0x24069f9c
 800b730:	24069f98 	.word	0x24069f98

0800b734 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b086      	sub	sp, #24
 800b738:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b73a:	4b3d      	ldr	r3, [pc, #244]	@ (800b830 <vTaskSwitchContext+0xfc>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d003      	beq.n	800b74a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b742:	4b3c      	ldr	r3, [pc, #240]	@ (800b834 <vTaskSwitchContext+0x100>)
 800b744:	2201      	movs	r2, #1
 800b746:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b748:	e06e      	b.n	800b828 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 800b74a:	4b3a      	ldr	r3, [pc, #232]	@ (800b834 <vTaskSwitchContext+0x100>)
 800b74c:	2200      	movs	r2, #0
 800b74e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800b750:	4b39      	ldr	r3, [pc, #228]	@ (800b838 <vTaskSwitchContext+0x104>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b756:	613b      	str	r3, [r7, #16]
 800b758:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800b75c:	60fb      	str	r3, [r7, #12]
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	429a      	cmp	r2, r3
 800b766:	d111      	bne.n	800b78c <vTaskSwitchContext+0x58>
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	3304      	adds	r3, #4
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	68fa      	ldr	r2, [r7, #12]
 800b770:	429a      	cmp	r2, r3
 800b772:	d10b      	bne.n	800b78c <vTaskSwitchContext+0x58>
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	3308      	adds	r3, #8
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	68fa      	ldr	r2, [r7, #12]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d105      	bne.n	800b78c <vTaskSwitchContext+0x58>
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	330c      	adds	r3, #12
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	68fa      	ldr	r2, [r7, #12]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d008      	beq.n	800b79e <vTaskSwitchContext+0x6a>
 800b78c:	4b2a      	ldr	r3, [pc, #168]	@ (800b838 <vTaskSwitchContext+0x104>)
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	4b29      	ldr	r3, [pc, #164]	@ (800b838 <vTaskSwitchContext+0x104>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	3334      	adds	r3, #52	@ 0x34
 800b796:	4619      	mov	r1, r3
 800b798:	4610      	mov	r0, r2
 800b79a:	f7f4 ff69 	bl	8000670 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b79e:	4b27      	ldr	r3, [pc, #156]	@ (800b83c <vTaskSwitchContext+0x108>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	617b      	str	r3, [r7, #20]
 800b7a4:	e011      	b.n	800b7ca <vTaskSwitchContext+0x96>
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d10b      	bne.n	800b7c4 <vTaskSwitchContext+0x90>
	__asm volatile
 800b7ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7b0:	f383 8811 	msr	BASEPRI, r3
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	f3bf 8f4f 	dsb	sy
 800b7bc:	607b      	str	r3, [r7, #4]
}
 800b7be:	bf00      	nop
 800b7c0:	bf00      	nop
 800b7c2:	e7fd      	b.n	800b7c0 <vTaskSwitchContext+0x8c>
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	3b01      	subs	r3, #1
 800b7c8:	617b      	str	r3, [r7, #20]
 800b7ca:	491d      	ldr	r1, [pc, #116]	@ (800b840 <vTaskSwitchContext+0x10c>)
 800b7cc:	697a      	ldr	r2, [r7, #20]
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	4413      	add	r3, r2
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	440b      	add	r3, r1
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d0e3      	beq.n	800b7a6 <vTaskSwitchContext+0x72>
 800b7de:	697a      	ldr	r2, [r7, #20]
 800b7e0:	4613      	mov	r3, r2
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	4413      	add	r3, r2
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	4a15      	ldr	r2, [pc, #84]	@ (800b840 <vTaskSwitchContext+0x10c>)
 800b7ea:	4413      	add	r3, r2
 800b7ec:	60bb      	str	r3, [r7, #8]
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	685a      	ldr	r2, [r3, #4]
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	605a      	str	r2, [r3, #4]
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	685a      	ldr	r2, [r3, #4]
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	3308      	adds	r3, #8
 800b800:	429a      	cmp	r2, r3
 800b802:	d104      	bne.n	800b80e <vTaskSwitchContext+0xda>
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	685a      	ldr	r2, [r3, #4]
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	605a      	str	r2, [r3, #4]
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	4a08      	ldr	r2, [pc, #32]	@ (800b838 <vTaskSwitchContext+0x104>)
 800b816:	6013      	str	r3, [r2, #0]
 800b818:	4a08      	ldr	r2, [pc, #32]	@ (800b83c <vTaskSwitchContext+0x108>)
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b81e:	4b06      	ldr	r3, [pc, #24]	@ (800b838 <vTaskSwitchContext+0x104>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	3354      	adds	r3, #84	@ 0x54
 800b824:	4a07      	ldr	r2, [pc, #28]	@ (800b844 <vTaskSwitchContext+0x110>)
 800b826:	6013      	str	r3, [r2, #0]
}
 800b828:	bf00      	nop
 800b82a:	3718      	adds	r7, #24
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	24069fb0 	.word	0x24069fb0
 800b834:	24069f9c 	.word	0x24069f9c
 800b838:	24069ab4 	.word	0x24069ab4
 800b83c:	24069f90 	.word	0x24069f90
 800b840:	24069ab8 	.word	0x24069ab8
 800b844:	24000048 	.word	0x24000048

0800b848 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d10b      	bne.n	800b870 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b85c:	f383 8811 	msr	BASEPRI, r3
 800b860:	f3bf 8f6f 	isb	sy
 800b864:	f3bf 8f4f 	dsb	sy
 800b868:	60fb      	str	r3, [r7, #12]
}
 800b86a:	bf00      	nop
 800b86c:	bf00      	nop
 800b86e:	e7fd      	b.n	800b86c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b870:	4b07      	ldr	r3, [pc, #28]	@ (800b890 <vTaskPlaceOnEventList+0x48>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	3318      	adds	r3, #24
 800b876:	4619      	mov	r1, r3
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f7fe fa28 	bl	8009cce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b87e:	2101      	movs	r1, #1
 800b880:	6838      	ldr	r0, [r7, #0]
 800b882:	f000 fb97 	bl	800bfb4 <prvAddCurrentTaskToDelayedList>
}
 800b886:	bf00      	nop
 800b888:	3710      	adds	r7, #16
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	24069ab4 	.word	0x24069ab4

0800b894 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b894:	b580      	push	{r7, lr}
 800b896:	b086      	sub	sp, #24
 800b898:	af00      	add	r7, sp, #0
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	60b9      	str	r1, [r7, #8]
 800b89e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d10b      	bne.n	800b8be <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8aa:	f383 8811 	msr	BASEPRI, r3
 800b8ae:	f3bf 8f6f 	isb	sy
 800b8b2:	f3bf 8f4f 	dsb	sy
 800b8b6:	617b      	str	r3, [r7, #20]
}
 800b8b8:	bf00      	nop
 800b8ba:	bf00      	nop
 800b8bc:	e7fd      	b.n	800b8ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8be:	4b0a      	ldr	r3, [pc, #40]	@ (800b8e8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	3318      	adds	r3, #24
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	68f8      	ldr	r0, [r7, #12]
 800b8c8:	f7fe f9dd 	bl	8009c86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d002      	beq.n	800b8d8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b8d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b8d6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b8d8:	6879      	ldr	r1, [r7, #4]
 800b8da:	68b8      	ldr	r0, [r7, #8]
 800b8dc:	f000 fb6a 	bl	800bfb4 <prvAddCurrentTaskToDelayedList>
	}
 800b8e0:	bf00      	nop
 800b8e2:	3718      	adds	r7, #24
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	24069ab4 	.word	0x24069ab4

0800b8ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b086      	sub	sp, #24
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	68db      	ldr	r3, [r3, #12]
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d10b      	bne.n	800b91a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b906:	f383 8811 	msr	BASEPRI, r3
 800b90a:	f3bf 8f6f 	isb	sy
 800b90e:	f3bf 8f4f 	dsb	sy
 800b912:	60fb      	str	r3, [r7, #12]
}
 800b914:	bf00      	nop
 800b916:	bf00      	nop
 800b918:	e7fd      	b.n	800b916 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	3318      	adds	r3, #24
 800b91e:	4618      	mov	r0, r3
 800b920:	f7fe fa0e 	bl	8009d40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b924:	4b1d      	ldr	r3, [pc, #116]	@ (800b99c <xTaskRemoveFromEventList+0xb0>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d11d      	bne.n	800b968 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	3304      	adds	r3, #4
 800b930:	4618      	mov	r0, r3
 800b932:	f7fe fa05 	bl	8009d40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b93a:	4b19      	ldr	r3, [pc, #100]	@ (800b9a0 <xTaskRemoveFromEventList+0xb4>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d903      	bls.n	800b94a <xTaskRemoveFromEventList+0x5e>
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b946:	4a16      	ldr	r2, [pc, #88]	@ (800b9a0 <xTaskRemoveFromEventList+0xb4>)
 800b948:	6013      	str	r3, [r2, #0]
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b94e:	4613      	mov	r3, r2
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	4413      	add	r3, r2
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	4a13      	ldr	r2, [pc, #76]	@ (800b9a4 <xTaskRemoveFromEventList+0xb8>)
 800b958:	441a      	add	r2, r3
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	3304      	adds	r3, #4
 800b95e:	4619      	mov	r1, r3
 800b960:	4610      	mov	r0, r2
 800b962:	f7fe f990 	bl	8009c86 <vListInsertEnd>
 800b966:	e005      	b.n	800b974 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	3318      	adds	r3, #24
 800b96c:	4619      	mov	r1, r3
 800b96e:	480e      	ldr	r0, [pc, #56]	@ (800b9a8 <xTaskRemoveFromEventList+0xbc>)
 800b970:	f7fe f989 	bl	8009c86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b978:	4b0c      	ldr	r3, [pc, #48]	@ (800b9ac <xTaskRemoveFromEventList+0xc0>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b97e:	429a      	cmp	r2, r3
 800b980:	d905      	bls.n	800b98e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b982:	2301      	movs	r3, #1
 800b984:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b986:	4b0a      	ldr	r3, [pc, #40]	@ (800b9b0 <xTaskRemoveFromEventList+0xc4>)
 800b988:	2201      	movs	r2, #1
 800b98a:	601a      	str	r2, [r3, #0]
 800b98c:	e001      	b.n	800b992 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b98e:	2300      	movs	r3, #0
 800b990:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b992:	697b      	ldr	r3, [r7, #20]
}
 800b994:	4618      	mov	r0, r3
 800b996:	3718      	adds	r7, #24
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	24069fb0 	.word	0x24069fb0
 800b9a0:	24069f90 	.word	0x24069f90
 800b9a4:	24069ab8 	.word	0x24069ab8
 800b9a8:	24069f48 	.word	0x24069f48
 800b9ac:	24069ab4 	.word	0x24069ab4
 800b9b0:	24069f9c 	.word	0x24069f9c

0800b9b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b9bc:	4b06      	ldr	r3, [pc, #24]	@ (800b9d8 <vTaskInternalSetTimeOutState+0x24>)
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b9c4:	4b05      	ldr	r3, [pc, #20]	@ (800b9dc <vTaskInternalSetTimeOutState+0x28>)
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	605a      	str	r2, [r3, #4]
}
 800b9cc:	bf00      	nop
 800b9ce:	370c      	adds	r7, #12
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr
 800b9d8:	24069fa0 	.word	0x24069fa0
 800b9dc:	24069f8c 	.word	0x24069f8c

0800b9e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b088      	sub	sp, #32
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d10b      	bne.n	800ba08 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b9f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9f4:	f383 8811 	msr	BASEPRI, r3
 800b9f8:	f3bf 8f6f 	isb	sy
 800b9fc:	f3bf 8f4f 	dsb	sy
 800ba00:	613b      	str	r3, [r7, #16]
}
 800ba02:	bf00      	nop
 800ba04:	bf00      	nop
 800ba06:	e7fd      	b.n	800ba04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d10b      	bne.n	800ba26 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ba0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba12:	f383 8811 	msr	BASEPRI, r3
 800ba16:	f3bf 8f6f 	isb	sy
 800ba1a:	f3bf 8f4f 	dsb	sy
 800ba1e:	60fb      	str	r3, [r7, #12]
}
 800ba20:	bf00      	nop
 800ba22:	bf00      	nop
 800ba24:	e7fd      	b.n	800ba22 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ba26:	f000 ffa7 	bl	800c978 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba2a:	4b1d      	ldr	r3, [pc, #116]	@ (800baa0 <xTaskCheckForTimeOut+0xc0>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	69ba      	ldr	r2, [r7, #24]
 800ba36:	1ad3      	subs	r3, r2, r3
 800ba38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba42:	d102      	bne.n	800ba4a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba44:	2300      	movs	r3, #0
 800ba46:	61fb      	str	r3, [r7, #28]
 800ba48:	e023      	b.n	800ba92 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	4b15      	ldr	r3, [pc, #84]	@ (800baa4 <xTaskCheckForTimeOut+0xc4>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d007      	beq.n	800ba66 <xTaskCheckForTimeOut+0x86>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	69ba      	ldr	r2, [r7, #24]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d302      	bcc.n	800ba66 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ba60:	2301      	movs	r3, #1
 800ba62:	61fb      	str	r3, [r7, #28]
 800ba64:	e015      	b.n	800ba92 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	697a      	ldr	r2, [r7, #20]
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d20b      	bcs.n	800ba88 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	1ad2      	subs	r2, r2, r3
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f7ff ff99 	bl	800b9b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ba82:	2300      	movs	r3, #0
 800ba84:	61fb      	str	r3, [r7, #28]
 800ba86:	e004      	b.n	800ba92 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ba92:	f000 ffa3 	bl	800c9dc <vPortExitCritical>

	return xReturn;
 800ba96:	69fb      	ldr	r3, [r7, #28]
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3720      	adds	r7, #32
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}
 800baa0:	24069f8c 	.word	0x24069f8c
 800baa4:	24069fa0 	.word	0x24069fa0

0800baa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800baa8:	b480      	push	{r7}
 800baaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800baac:	4b03      	ldr	r3, [pc, #12]	@ (800babc <vTaskMissedYield+0x14>)
 800baae:	2201      	movs	r2, #1
 800bab0:	601a      	str	r2, [r3, #0]
}
 800bab2:	bf00      	nop
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr
 800babc:	24069f9c 	.word	0x24069f9c

0800bac0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bac8:	f000 f852 	bl	800bb70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bacc:	4b06      	ldr	r3, [pc, #24]	@ (800bae8 <prvIdleTask+0x28>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	d9f9      	bls.n	800bac8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bad4:	4b05      	ldr	r3, [pc, #20]	@ (800baec <prvIdleTask+0x2c>)
 800bad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bada:	601a      	str	r2, [r3, #0]
 800badc:	f3bf 8f4f 	dsb	sy
 800bae0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bae4:	e7f0      	b.n	800bac8 <prvIdleTask+0x8>
 800bae6:	bf00      	nop
 800bae8:	24069ab8 	.word	0x24069ab8
 800baec:	e000ed04 	.word	0xe000ed04

0800baf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800baf6:	2300      	movs	r3, #0
 800baf8:	607b      	str	r3, [r7, #4]
 800bafa:	e00c      	b.n	800bb16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	4613      	mov	r3, r2
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	4413      	add	r3, r2
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	4a12      	ldr	r2, [pc, #72]	@ (800bb50 <prvInitialiseTaskLists+0x60>)
 800bb08:	4413      	add	r3, r2
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7fe f88e 	bl	8009c2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	3301      	adds	r3, #1
 800bb14:	607b      	str	r3, [r7, #4]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2b37      	cmp	r3, #55	@ 0x37
 800bb1a:	d9ef      	bls.n	800bafc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb1c:	480d      	ldr	r0, [pc, #52]	@ (800bb54 <prvInitialiseTaskLists+0x64>)
 800bb1e:	f7fe f885 	bl	8009c2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb22:	480d      	ldr	r0, [pc, #52]	@ (800bb58 <prvInitialiseTaskLists+0x68>)
 800bb24:	f7fe f882 	bl	8009c2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb28:	480c      	ldr	r0, [pc, #48]	@ (800bb5c <prvInitialiseTaskLists+0x6c>)
 800bb2a:	f7fe f87f 	bl	8009c2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb2e:	480c      	ldr	r0, [pc, #48]	@ (800bb60 <prvInitialiseTaskLists+0x70>)
 800bb30:	f7fe f87c 	bl	8009c2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb34:	480b      	ldr	r0, [pc, #44]	@ (800bb64 <prvInitialiseTaskLists+0x74>)
 800bb36:	f7fe f879 	bl	8009c2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb3a:	4b0b      	ldr	r3, [pc, #44]	@ (800bb68 <prvInitialiseTaskLists+0x78>)
 800bb3c:	4a05      	ldr	r2, [pc, #20]	@ (800bb54 <prvInitialiseTaskLists+0x64>)
 800bb3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb40:	4b0a      	ldr	r3, [pc, #40]	@ (800bb6c <prvInitialiseTaskLists+0x7c>)
 800bb42:	4a05      	ldr	r2, [pc, #20]	@ (800bb58 <prvInitialiseTaskLists+0x68>)
 800bb44:	601a      	str	r2, [r3, #0]
}
 800bb46:	bf00      	nop
 800bb48:	3708      	adds	r7, #8
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	24069ab8 	.word	0x24069ab8
 800bb54:	24069f18 	.word	0x24069f18
 800bb58:	24069f2c 	.word	0x24069f2c
 800bb5c:	24069f48 	.word	0x24069f48
 800bb60:	24069f5c 	.word	0x24069f5c
 800bb64:	24069f74 	.word	0x24069f74
 800bb68:	24069f40 	.word	0x24069f40
 800bb6c:	24069f44 	.word	0x24069f44

0800bb70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb76:	e019      	b.n	800bbac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bb78:	f000 fefe 	bl	800c978 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb7c:	4b10      	ldr	r3, [pc, #64]	@ (800bbc0 <prvCheckTasksWaitingTermination+0x50>)
 800bb7e:	68db      	ldr	r3, [r3, #12]
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	3304      	adds	r3, #4
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7fe f8d9 	bl	8009d40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bb8e:	4b0d      	ldr	r3, [pc, #52]	@ (800bbc4 <prvCheckTasksWaitingTermination+0x54>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	3b01      	subs	r3, #1
 800bb94:	4a0b      	ldr	r2, [pc, #44]	@ (800bbc4 <prvCheckTasksWaitingTermination+0x54>)
 800bb96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bb98:	4b0b      	ldr	r3, [pc, #44]	@ (800bbc8 <prvCheckTasksWaitingTermination+0x58>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	4a0a      	ldr	r2, [pc, #40]	@ (800bbc8 <prvCheckTasksWaitingTermination+0x58>)
 800bba0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bba2:	f000 ff1b 	bl	800c9dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 f810 	bl	800bbcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbac:	4b06      	ldr	r3, [pc, #24]	@ (800bbc8 <prvCheckTasksWaitingTermination+0x58>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d1e1      	bne.n	800bb78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bbb4:	bf00      	nop
 800bbb6:	bf00      	nop
 800bbb8:	3708      	adds	r7, #8
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	24069f5c 	.word	0x24069f5c
 800bbc4:	24069f88 	.word	0x24069f88
 800bbc8:	24069f70 	.word	0x24069f70

0800bbcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	3354      	adds	r3, #84	@ 0x54
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f006 f9c7 	bl	8011f6c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d108      	bne.n	800bbfa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbec:	4618      	mov	r0, r3
 800bbee:	f001 f88f 	bl	800cd10 <vPortFree>
				vPortFree( pxTCB );
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f001 f88c 	bl	800cd10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bbf8:	e019      	b.n	800bc2e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d103      	bne.n	800bc0c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f001 f883 	bl	800cd10 <vPortFree>
	}
 800bc0a:	e010      	b.n	800bc2e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bc12:	2b02      	cmp	r3, #2
 800bc14:	d00b      	beq.n	800bc2e <prvDeleteTCB+0x62>
	__asm volatile
 800bc16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc1a:	f383 8811 	msr	BASEPRI, r3
 800bc1e:	f3bf 8f6f 	isb	sy
 800bc22:	f3bf 8f4f 	dsb	sy
 800bc26:	60fb      	str	r3, [r7, #12]
}
 800bc28:	bf00      	nop
 800bc2a:	bf00      	nop
 800bc2c:	e7fd      	b.n	800bc2a <prvDeleteTCB+0x5e>
	}
 800bc2e:	bf00      	nop
 800bc30:	3710      	adds	r7, #16
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
	...

0800bc38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc3e:	4b0c      	ldr	r3, [pc, #48]	@ (800bc70 <prvResetNextTaskUnblockTime+0x38>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d104      	bne.n	800bc52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc48:	4b0a      	ldr	r3, [pc, #40]	@ (800bc74 <prvResetNextTaskUnblockTime+0x3c>)
 800bc4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc50:	e008      	b.n	800bc64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc52:	4b07      	ldr	r3, [pc, #28]	@ (800bc70 <prvResetNextTaskUnblockTime+0x38>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	4a04      	ldr	r2, [pc, #16]	@ (800bc74 <prvResetNextTaskUnblockTime+0x3c>)
 800bc62:	6013      	str	r3, [r2, #0]
}
 800bc64:	bf00      	nop
 800bc66:	370c      	adds	r7, #12
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr
 800bc70:	24069f40 	.word	0x24069f40
 800bc74:	24069fa8 	.word	0x24069fa8

0800bc78 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800bc7e:	4b05      	ldr	r3, [pc, #20]	@ (800bc94 <xTaskGetCurrentTaskHandle+0x1c>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	607b      	str	r3, [r7, #4]

		return xReturn;
 800bc84:	687b      	ldr	r3, [r7, #4]
	}
 800bc86:	4618      	mov	r0, r3
 800bc88:	370c      	adds	r7, #12
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr
 800bc92:	bf00      	nop
 800bc94:	24069ab4 	.word	0x24069ab4

0800bc98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc98:	b480      	push	{r7}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bc9e:	4b0b      	ldr	r3, [pc, #44]	@ (800bccc <xTaskGetSchedulerState+0x34>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d102      	bne.n	800bcac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bca6:	2301      	movs	r3, #1
 800bca8:	607b      	str	r3, [r7, #4]
 800bcaa:	e008      	b.n	800bcbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcac:	4b08      	ldr	r3, [pc, #32]	@ (800bcd0 <xTaskGetSchedulerState+0x38>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d102      	bne.n	800bcba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bcb4:	2302      	movs	r3, #2
 800bcb6:	607b      	str	r3, [r7, #4]
 800bcb8:	e001      	b.n	800bcbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bcbe:	687b      	ldr	r3, [r7, #4]
	}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr
 800bccc:	24069f94 	.word	0x24069f94
 800bcd0:	24069fb0 	.word	0x24069fb0

0800bcd4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bce0:	2300      	movs	r3, #0
 800bce2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d051      	beq.n	800bd8e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcee:	4b2a      	ldr	r3, [pc, #168]	@ (800bd98 <xTaskPriorityInherit+0xc4>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d241      	bcs.n	800bd7c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	699b      	ldr	r3, [r3, #24]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	db06      	blt.n	800bd0e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd00:	4b25      	ldr	r3, [pc, #148]	@ (800bd98 <xTaskPriorityInherit+0xc4>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd06:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	6959      	ldr	r1, [r3, #20]
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd16:	4613      	mov	r3, r2
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	4413      	add	r3, r2
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	4a1f      	ldr	r2, [pc, #124]	@ (800bd9c <xTaskPriorityInherit+0xc8>)
 800bd20:	4413      	add	r3, r2
 800bd22:	4299      	cmp	r1, r3
 800bd24:	d122      	bne.n	800bd6c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	3304      	adds	r3, #4
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7fe f808 	bl	8009d40 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bd30:	4b19      	ldr	r3, [pc, #100]	@ (800bd98 <xTaskPriorityInherit+0xc4>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd3e:	4b18      	ldr	r3, [pc, #96]	@ (800bda0 <xTaskPriorityInherit+0xcc>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d903      	bls.n	800bd4e <xTaskPriorityInherit+0x7a>
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd4a:	4a15      	ldr	r2, [pc, #84]	@ (800bda0 <xTaskPriorityInherit+0xcc>)
 800bd4c:	6013      	str	r3, [r2, #0]
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd52:	4613      	mov	r3, r2
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	4413      	add	r3, r2
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	4a10      	ldr	r2, [pc, #64]	@ (800bd9c <xTaskPriorityInherit+0xc8>)
 800bd5c:	441a      	add	r2, r3
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	3304      	adds	r3, #4
 800bd62:	4619      	mov	r1, r3
 800bd64:	4610      	mov	r0, r2
 800bd66:	f7fd ff8e 	bl	8009c86 <vListInsertEnd>
 800bd6a:	e004      	b.n	800bd76 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bd6c:	4b0a      	ldr	r3, [pc, #40]	@ (800bd98 <xTaskPriorityInherit+0xc4>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bd76:	2301      	movs	r3, #1
 800bd78:	60fb      	str	r3, [r7, #12]
 800bd7a:	e008      	b.n	800bd8e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bd80:	4b05      	ldr	r3, [pc, #20]	@ (800bd98 <xTaskPriorityInherit+0xc4>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d201      	bcs.n	800bd8e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
	}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3710      	adds	r7, #16
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	24069ab4 	.word	0x24069ab4
 800bd9c:	24069ab8 	.word	0x24069ab8
 800bda0:	24069f90 	.word	0x24069f90

0800bda4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b086      	sub	sp, #24
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d058      	beq.n	800be6c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bdba:	4b2f      	ldr	r3, [pc, #188]	@ (800be78 <xTaskPriorityDisinherit+0xd4>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	693a      	ldr	r2, [r7, #16]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d00b      	beq.n	800bddc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bdc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc8:	f383 8811 	msr	BASEPRI, r3
 800bdcc:	f3bf 8f6f 	isb	sy
 800bdd0:	f3bf 8f4f 	dsb	sy
 800bdd4:	60fb      	str	r3, [r7, #12]
}
 800bdd6:	bf00      	nop
 800bdd8:	bf00      	nop
 800bdda:	e7fd      	b.n	800bdd8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d10b      	bne.n	800bdfc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bde4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bde8:	f383 8811 	msr	BASEPRI, r3
 800bdec:	f3bf 8f6f 	isb	sy
 800bdf0:	f3bf 8f4f 	dsb	sy
 800bdf4:	60bb      	str	r3, [r7, #8]
}
 800bdf6:	bf00      	nop
 800bdf8:	bf00      	nop
 800bdfa:	e7fd      	b.n	800bdf8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be00:	1e5a      	subs	r2, r3, #1
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be0e:	429a      	cmp	r2, r3
 800be10:	d02c      	beq.n	800be6c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be16:	2b00      	cmp	r3, #0
 800be18:	d128      	bne.n	800be6c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	3304      	adds	r3, #4
 800be1e:	4618      	mov	r0, r3
 800be20:	f7fd ff8e 	bl	8009d40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be30:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be3c:	4b0f      	ldr	r3, [pc, #60]	@ (800be7c <xTaskPriorityDisinherit+0xd8>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	429a      	cmp	r2, r3
 800be42:	d903      	bls.n	800be4c <xTaskPriorityDisinherit+0xa8>
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be48:	4a0c      	ldr	r2, [pc, #48]	@ (800be7c <xTaskPriorityDisinherit+0xd8>)
 800be4a:	6013      	str	r3, [r2, #0]
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be50:	4613      	mov	r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4413      	add	r3, r2
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	4a09      	ldr	r2, [pc, #36]	@ (800be80 <xTaskPriorityDisinherit+0xdc>)
 800be5a:	441a      	add	r2, r3
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	3304      	adds	r3, #4
 800be60:	4619      	mov	r1, r3
 800be62:	4610      	mov	r0, r2
 800be64:	f7fd ff0f 	bl	8009c86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800be68:	2301      	movs	r3, #1
 800be6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be6c:	697b      	ldr	r3, [r7, #20]
	}
 800be6e:	4618      	mov	r0, r3
 800be70:	3718      	adds	r7, #24
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	24069ab4 	.word	0x24069ab4
 800be7c:	24069f90 	.word	0x24069f90
 800be80:	24069ab8 	.word	0x24069ab8

0800be84 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800be84:	b580      	push	{r7, lr}
 800be86:	b088      	sub	sp, #32
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800be92:	2301      	movs	r3, #1
 800be94:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d06c      	beq.n	800bf76 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800be9c:	69bb      	ldr	r3, [r7, #24]
 800be9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d10b      	bne.n	800bebc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800bea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea8:	f383 8811 	msr	BASEPRI, r3
 800beac:	f3bf 8f6f 	isb	sy
 800beb0:	f3bf 8f4f 	dsb	sy
 800beb4:	60fb      	str	r3, [r7, #12]
}
 800beb6:	bf00      	nop
 800beb8:	bf00      	nop
 800beba:	e7fd      	b.n	800beb8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bebc:	69bb      	ldr	r3, [r7, #24]
 800bebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bec0:	683a      	ldr	r2, [r7, #0]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d902      	bls.n	800becc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	61fb      	str	r3, [r7, #28]
 800beca:	e002      	b.n	800bed2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800becc:	69bb      	ldr	r3, [r7, #24]
 800bece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bed0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bed2:	69bb      	ldr	r3, [r7, #24]
 800bed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bed6:	69fa      	ldr	r2, [r7, #28]
 800bed8:	429a      	cmp	r2, r3
 800beda:	d04c      	beq.n	800bf76 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bedc:	69bb      	ldr	r3, [r7, #24]
 800bede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bee0:	697a      	ldr	r2, [r7, #20]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d147      	bne.n	800bf76 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bee6:	4b26      	ldr	r3, [pc, #152]	@ (800bf80 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	69ba      	ldr	r2, [r7, #24]
 800beec:	429a      	cmp	r2, r3
 800beee:	d10b      	bne.n	800bf08 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800bef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bef4:	f383 8811 	msr	BASEPRI, r3
 800bef8:	f3bf 8f6f 	isb	sy
 800befc:	f3bf 8f4f 	dsb	sy
 800bf00:	60bb      	str	r3, [r7, #8]
}
 800bf02:	bf00      	nop
 800bf04:	bf00      	nop
 800bf06:	e7fd      	b.n	800bf04 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf0c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bf0e:	69bb      	ldr	r3, [r7, #24]
 800bf10:	69fa      	ldr	r2, [r7, #28]
 800bf12:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf14:	69bb      	ldr	r3, [r7, #24]
 800bf16:	699b      	ldr	r3, [r3, #24]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	db04      	blt.n	800bf26 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf1c:	69fb      	ldr	r3, [r7, #28]
 800bf1e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bf26:	69bb      	ldr	r3, [r7, #24]
 800bf28:	6959      	ldr	r1, [r3, #20]
 800bf2a:	693a      	ldr	r2, [r7, #16]
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	4413      	add	r3, r2
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	4a13      	ldr	r2, [pc, #76]	@ (800bf84 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bf36:	4413      	add	r3, r2
 800bf38:	4299      	cmp	r1, r3
 800bf3a:	d11c      	bne.n	800bf76 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	3304      	adds	r3, #4
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7fd fefd 	bl	8009d40 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf4a:	4b0f      	ldr	r3, [pc, #60]	@ (800bf88 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d903      	bls.n	800bf5a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800bf52:	69bb      	ldr	r3, [r7, #24]
 800bf54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf56:	4a0c      	ldr	r2, [pc, #48]	@ (800bf88 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bf58:	6013      	str	r3, [r2, #0]
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf5e:	4613      	mov	r3, r2
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	4413      	add	r3, r2
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	4a07      	ldr	r2, [pc, #28]	@ (800bf84 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bf68:	441a      	add	r2, r3
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	3304      	adds	r3, #4
 800bf6e:	4619      	mov	r1, r3
 800bf70:	4610      	mov	r0, r2
 800bf72:	f7fd fe88 	bl	8009c86 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bf76:	bf00      	nop
 800bf78:	3720      	adds	r7, #32
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	24069ab4 	.word	0x24069ab4
 800bf84:	24069ab8 	.word	0x24069ab8
 800bf88:	24069f90 	.word	0x24069f90

0800bf8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bf8c:	b480      	push	{r7}
 800bf8e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bf90:	4b07      	ldr	r3, [pc, #28]	@ (800bfb0 <pvTaskIncrementMutexHeldCount+0x24>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d004      	beq.n	800bfa2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bf98:	4b05      	ldr	r3, [pc, #20]	@ (800bfb0 <pvTaskIncrementMutexHeldCount+0x24>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bf9e:	3201      	adds	r2, #1
 800bfa0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800bfa2:	4b03      	ldr	r3, [pc, #12]	@ (800bfb0 <pvTaskIncrementMutexHeldCount+0x24>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
	}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr
 800bfb0:	24069ab4 	.word	0x24069ab4

0800bfb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b084      	sub	sp, #16
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bfbe:	4b21      	ldr	r3, [pc, #132]	@ (800c044 <prvAddCurrentTaskToDelayedList+0x90>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfc4:	4b20      	ldr	r3, [pc, #128]	@ (800c048 <prvAddCurrentTaskToDelayedList+0x94>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	3304      	adds	r3, #4
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7fd feb8 	bl	8009d40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bfd6:	d10a      	bne.n	800bfee <prvAddCurrentTaskToDelayedList+0x3a>
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d007      	beq.n	800bfee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfde:	4b1a      	ldr	r3, [pc, #104]	@ (800c048 <prvAddCurrentTaskToDelayedList+0x94>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	3304      	adds	r3, #4
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	4819      	ldr	r0, [pc, #100]	@ (800c04c <prvAddCurrentTaskToDelayedList+0x98>)
 800bfe8:	f7fd fe4d 	bl	8009c86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bfec:	e026      	b.n	800c03c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bfee:	68fa      	ldr	r2, [r7, #12]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	4413      	add	r3, r2
 800bff4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bff6:	4b14      	ldr	r3, [pc, #80]	@ (800c048 <prvAddCurrentTaskToDelayedList+0x94>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	68ba      	ldr	r2, [r7, #8]
 800bffc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bffe:	68ba      	ldr	r2, [r7, #8]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	429a      	cmp	r2, r3
 800c004:	d209      	bcs.n	800c01a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c006:	4b12      	ldr	r3, [pc, #72]	@ (800c050 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	4b0f      	ldr	r3, [pc, #60]	@ (800c048 <prvAddCurrentTaskToDelayedList+0x94>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	3304      	adds	r3, #4
 800c010:	4619      	mov	r1, r3
 800c012:	4610      	mov	r0, r2
 800c014:	f7fd fe5b 	bl	8009cce <vListInsert>
}
 800c018:	e010      	b.n	800c03c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c01a:	4b0e      	ldr	r3, [pc, #56]	@ (800c054 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c01c:	681a      	ldr	r2, [r3, #0]
 800c01e:	4b0a      	ldr	r3, [pc, #40]	@ (800c048 <prvAddCurrentTaskToDelayedList+0x94>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	3304      	adds	r3, #4
 800c024:	4619      	mov	r1, r3
 800c026:	4610      	mov	r0, r2
 800c028:	f7fd fe51 	bl	8009cce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c02c:	4b0a      	ldr	r3, [pc, #40]	@ (800c058 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	68ba      	ldr	r2, [r7, #8]
 800c032:	429a      	cmp	r2, r3
 800c034:	d202      	bcs.n	800c03c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c036:	4a08      	ldr	r2, [pc, #32]	@ (800c058 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	6013      	str	r3, [r2, #0]
}
 800c03c:	bf00      	nop
 800c03e:	3710      	adds	r7, #16
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	24069f8c 	.word	0x24069f8c
 800c048:	24069ab4 	.word	0x24069ab4
 800c04c:	24069f74 	.word	0x24069f74
 800c050:	24069f44 	.word	0x24069f44
 800c054:	24069f40 	.word	0x24069f40
 800c058:	24069fa8 	.word	0x24069fa8

0800c05c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b08a      	sub	sp, #40	@ 0x28
 800c060:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c062:	2300      	movs	r3, #0
 800c064:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c066:	f000 fb13 	bl	800c690 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c06a:	4b1d      	ldr	r3, [pc, #116]	@ (800c0e0 <xTimerCreateTimerTask+0x84>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d021      	beq.n	800c0b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c072:	2300      	movs	r3, #0
 800c074:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c076:	2300      	movs	r3, #0
 800c078:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c07a:	1d3a      	adds	r2, r7, #4
 800c07c:	f107 0108 	add.w	r1, r7, #8
 800c080:	f107 030c 	add.w	r3, r7, #12
 800c084:	4618      	mov	r0, r3
 800c086:	f7fd fdb7 	bl	8009bf8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c08a:	6879      	ldr	r1, [r7, #4]
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	9202      	str	r2, [sp, #8]
 800c092:	9301      	str	r3, [sp, #4]
 800c094:	2302      	movs	r3, #2
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	2300      	movs	r3, #0
 800c09a:	460a      	mov	r2, r1
 800c09c:	4911      	ldr	r1, [pc, #68]	@ (800c0e4 <xTimerCreateTimerTask+0x88>)
 800c09e:	4812      	ldr	r0, [pc, #72]	@ (800c0e8 <xTimerCreateTimerTask+0x8c>)
 800c0a0:	f7fe ff5c 	bl	800af5c <xTaskCreateStatic>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	4a11      	ldr	r2, [pc, #68]	@ (800c0ec <xTimerCreateTimerTask+0x90>)
 800c0a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c0aa:	4b10      	ldr	r3, [pc, #64]	@ (800c0ec <xTimerCreateTimerTask+0x90>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d001      	beq.n	800c0b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d10b      	bne.n	800c0d4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c0bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0c0:	f383 8811 	msr	BASEPRI, r3
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	f3bf 8f4f 	dsb	sy
 800c0cc:	613b      	str	r3, [r7, #16]
}
 800c0ce:	bf00      	nop
 800c0d0:	bf00      	nop
 800c0d2:	e7fd      	b.n	800c0d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c0d4:	697b      	ldr	r3, [r7, #20]
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3718      	adds	r7, #24
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	24069fe4 	.word	0x24069fe4
 800c0e4:	08012e04 	.word	0x08012e04
 800c0e8:	0800c229 	.word	0x0800c229
 800c0ec:	24069fe8 	.word	0x24069fe8

0800c0f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b08a      	sub	sp, #40	@ 0x28
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	607a      	str	r2, [r7, #4]
 800c0fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c0fe:	2300      	movs	r3, #0
 800c100:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d10b      	bne.n	800c120 <xTimerGenericCommand+0x30>
	__asm volatile
 800c108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c10c:	f383 8811 	msr	BASEPRI, r3
 800c110:	f3bf 8f6f 	isb	sy
 800c114:	f3bf 8f4f 	dsb	sy
 800c118:	623b      	str	r3, [r7, #32]
}
 800c11a:	bf00      	nop
 800c11c:	bf00      	nop
 800c11e:	e7fd      	b.n	800c11c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c120:	4b19      	ldr	r3, [pc, #100]	@ (800c188 <xTimerGenericCommand+0x98>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d02a      	beq.n	800c17e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	2b05      	cmp	r3, #5
 800c138:	dc18      	bgt.n	800c16c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c13a:	f7ff fdad 	bl	800bc98 <xTaskGetSchedulerState>
 800c13e:	4603      	mov	r3, r0
 800c140:	2b02      	cmp	r3, #2
 800c142:	d109      	bne.n	800c158 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c144:	4b10      	ldr	r3, [pc, #64]	@ (800c188 <xTimerGenericCommand+0x98>)
 800c146:	6818      	ldr	r0, [r3, #0]
 800c148:	f107 0110 	add.w	r1, r7, #16
 800c14c:	2300      	movs	r3, #0
 800c14e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c150:	f7fe f88c 	bl	800a26c <xQueueGenericSend>
 800c154:	6278      	str	r0, [r7, #36]	@ 0x24
 800c156:	e012      	b.n	800c17e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c158:	4b0b      	ldr	r3, [pc, #44]	@ (800c188 <xTimerGenericCommand+0x98>)
 800c15a:	6818      	ldr	r0, [r3, #0]
 800c15c:	f107 0110 	add.w	r1, r7, #16
 800c160:	2300      	movs	r3, #0
 800c162:	2200      	movs	r2, #0
 800c164:	f7fe f882 	bl	800a26c <xQueueGenericSend>
 800c168:	6278      	str	r0, [r7, #36]	@ 0x24
 800c16a:	e008      	b.n	800c17e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c16c:	4b06      	ldr	r3, [pc, #24]	@ (800c188 <xTimerGenericCommand+0x98>)
 800c16e:	6818      	ldr	r0, [r3, #0]
 800c170:	f107 0110 	add.w	r1, r7, #16
 800c174:	2300      	movs	r3, #0
 800c176:	683a      	ldr	r2, [r7, #0]
 800c178:	f7fe f97a 	bl	800a470 <xQueueGenericSendFromISR>
 800c17c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c180:	4618      	mov	r0, r3
 800c182:	3728      	adds	r7, #40	@ 0x28
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}
 800c188:	24069fe4 	.word	0x24069fe4

0800c18c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b088      	sub	sp, #32
 800c190:	af02      	add	r7, sp, #8
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c196:	4b23      	ldr	r3, [pc, #140]	@ (800c224 <prvProcessExpiredTimer+0x98>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	68db      	ldr	r3, [r3, #12]
 800c19c:	68db      	ldr	r3, [r3, #12]
 800c19e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	3304      	adds	r3, #4
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f7fd fdcb 	bl	8009d40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1b0:	f003 0304 	and.w	r3, r3, #4
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d023      	beq.n	800c200 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	699a      	ldr	r2, [r3, #24]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	18d1      	adds	r1, r2, r3
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	683a      	ldr	r2, [r7, #0]
 800c1c4:	6978      	ldr	r0, [r7, #20]
 800c1c6:	f000 f8d5 	bl	800c374 <prvInsertTimerInActiveList>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d020      	beq.n	800c212 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	9300      	str	r3, [sp, #0]
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	2100      	movs	r1, #0
 800c1da:	6978      	ldr	r0, [r7, #20]
 800c1dc:	f7ff ff88 	bl	800c0f0 <xTimerGenericCommand>
 800c1e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d114      	bne.n	800c212 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c1e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ec:	f383 8811 	msr	BASEPRI, r3
 800c1f0:	f3bf 8f6f 	isb	sy
 800c1f4:	f3bf 8f4f 	dsb	sy
 800c1f8:	60fb      	str	r3, [r7, #12]
}
 800c1fa:	bf00      	nop
 800c1fc:	bf00      	nop
 800c1fe:	e7fd      	b.n	800c1fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c206:	f023 0301 	bic.w	r3, r3, #1
 800c20a:	b2da      	uxtb	r2, r3
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	6a1b      	ldr	r3, [r3, #32]
 800c216:	6978      	ldr	r0, [r7, #20]
 800c218:	4798      	blx	r3
}
 800c21a:	bf00      	nop
 800c21c:	3718      	adds	r7, #24
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	24069fdc 	.word	0x24069fdc

0800c228 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c230:	f107 0308 	add.w	r3, r7, #8
 800c234:	4618      	mov	r0, r3
 800c236:	f000 f859 	bl	800c2ec <prvGetNextExpireTime>
 800c23a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	4619      	mov	r1, r3
 800c240:	68f8      	ldr	r0, [r7, #12]
 800c242:	f000 f805 	bl	800c250 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c246:	f000 f8d7 	bl	800c3f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c24a:	bf00      	nop
 800c24c:	e7f0      	b.n	800c230 <prvTimerTask+0x8>
	...

0800c250 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c25a:	f7ff f8e3 	bl	800b424 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c25e:	f107 0308 	add.w	r3, r7, #8
 800c262:	4618      	mov	r0, r3
 800c264:	f000 f866 	bl	800c334 <prvSampleTimeNow>
 800c268:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d130      	bne.n	800c2d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d10a      	bne.n	800c28c <prvProcessTimerOrBlockTask+0x3c>
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d806      	bhi.n	800c28c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c27e:	f7ff f8df 	bl	800b440 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c282:	68f9      	ldr	r1, [r7, #12]
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f7ff ff81 	bl	800c18c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c28a:	e024      	b.n	800c2d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d008      	beq.n	800c2a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c292:	4b13      	ldr	r3, [pc, #76]	@ (800c2e0 <prvProcessTimerOrBlockTask+0x90>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d101      	bne.n	800c2a0 <prvProcessTimerOrBlockTask+0x50>
 800c29c:	2301      	movs	r3, #1
 800c29e:	e000      	b.n	800c2a2 <prvProcessTimerOrBlockTask+0x52>
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c2a4:	4b0f      	ldr	r3, [pc, #60]	@ (800c2e4 <prvProcessTimerOrBlockTask+0x94>)
 800c2a6:	6818      	ldr	r0, [r3, #0]
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	1ad3      	subs	r3, r2, r3
 800c2ae:	683a      	ldr	r2, [r7, #0]
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	f7fe fe1f 	bl	800aef4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c2b6:	f7ff f8c3 	bl	800b440 <xTaskResumeAll>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d10a      	bne.n	800c2d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c2c0:	4b09      	ldr	r3, [pc, #36]	@ (800c2e8 <prvProcessTimerOrBlockTask+0x98>)
 800c2c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2c6:	601a      	str	r2, [r3, #0]
 800c2c8:	f3bf 8f4f 	dsb	sy
 800c2cc:	f3bf 8f6f 	isb	sy
}
 800c2d0:	e001      	b.n	800c2d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c2d2:	f7ff f8b5 	bl	800b440 <xTaskResumeAll>
}
 800c2d6:	bf00      	nop
 800c2d8:	3710      	adds	r7, #16
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	24069fe0 	.word	0x24069fe0
 800c2e4:	24069fe4 	.word	0x24069fe4
 800c2e8:	e000ed04 	.word	0xe000ed04

0800c2ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b085      	sub	sp, #20
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c2f4:	4b0e      	ldr	r3, [pc, #56]	@ (800c330 <prvGetNextExpireTime+0x44>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d101      	bne.n	800c302 <prvGetNextExpireTime+0x16>
 800c2fe:	2201      	movs	r2, #1
 800c300:	e000      	b.n	800c304 <prvGetNextExpireTime+0x18>
 800c302:	2200      	movs	r2, #0
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d105      	bne.n	800c31c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c310:	4b07      	ldr	r3, [pc, #28]	@ (800c330 <prvGetNextExpireTime+0x44>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	60fb      	str	r3, [r7, #12]
 800c31a:	e001      	b.n	800c320 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c31c:	2300      	movs	r3, #0
 800c31e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c320:	68fb      	ldr	r3, [r7, #12]
}
 800c322:	4618      	mov	r0, r3
 800c324:	3714      	adds	r7, #20
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr
 800c32e:	bf00      	nop
 800c330:	24069fdc 	.word	0x24069fdc

0800c334 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c33c:	f7ff f91e 	bl	800b57c <xTaskGetTickCount>
 800c340:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c342:	4b0b      	ldr	r3, [pc, #44]	@ (800c370 <prvSampleTimeNow+0x3c>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d205      	bcs.n	800c358 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c34c:	f000 f93a 	bl	800c5c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2201      	movs	r2, #1
 800c354:	601a      	str	r2, [r3, #0]
 800c356:	e002      	b.n	800c35e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2200      	movs	r2, #0
 800c35c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c35e:	4a04      	ldr	r2, [pc, #16]	@ (800c370 <prvSampleTimeNow+0x3c>)
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c364:	68fb      	ldr	r3, [r7, #12]
}
 800c366:	4618      	mov	r0, r3
 800c368:	3710      	adds	r7, #16
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}
 800c36e:	bf00      	nop
 800c370:	24069fec 	.word	0x24069fec

0800c374 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b086      	sub	sp, #24
 800c378:	af00      	add	r7, sp, #0
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	607a      	str	r2, [r7, #4]
 800c380:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c382:	2300      	movs	r3, #0
 800c384:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	68ba      	ldr	r2, [r7, #8]
 800c38a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	68fa      	ldr	r2, [r7, #12]
 800c390:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c392:	68ba      	ldr	r2, [r7, #8]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	429a      	cmp	r2, r3
 800c398:	d812      	bhi.n	800c3c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c39a:	687a      	ldr	r2, [r7, #4]
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	1ad2      	subs	r2, r2, r3
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	699b      	ldr	r3, [r3, #24]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d302      	bcc.n	800c3ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	617b      	str	r3, [r7, #20]
 800c3ac:	e01b      	b.n	800c3e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c3ae:	4b10      	ldr	r3, [pc, #64]	@ (800c3f0 <prvInsertTimerInActiveList+0x7c>)
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	3304      	adds	r3, #4
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	4610      	mov	r0, r2
 800c3ba:	f7fd fc88 	bl	8009cce <vListInsert>
 800c3be:	e012      	b.n	800c3e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d206      	bcs.n	800c3d6 <prvInsertTimerInActiveList+0x62>
 800c3c8:	68ba      	ldr	r2, [r7, #8]
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d302      	bcc.n	800c3d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	617b      	str	r3, [r7, #20]
 800c3d4:	e007      	b.n	800c3e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c3d6:	4b07      	ldr	r3, [pc, #28]	@ (800c3f4 <prvInsertTimerInActiveList+0x80>)
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	3304      	adds	r3, #4
 800c3de:	4619      	mov	r1, r3
 800c3e0:	4610      	mov	r0, r2
 800c3e2:	f7fd fc74 	bl	8009cce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c3e6:	697b      	ldr	r3, [r7, #20]
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3718      	adds	r7, #24
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	24069fe0 	.word	0x24069fe0
 800c3f4:	24069fdc 	.word	0x24069fdc

0800c3f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b08e      	sub	sp, #56	@ 0x38
 800c3fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c3fe:	e0ce      	b.n	800c59e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2b00      	cmp	r3, #0
 800c404:	da19      	bge.n	800c43a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c406:	1d3b      	adds	r3, r7, #4
 800c408:	3304      	adds	r3, #4
 800c40a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d10b      	bne.n	800c42a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c416:	f383 8811 	msr	BASEPRI, r3
 800c41a:	f3bf 8f6f 	isb	sy
 800c41e:	f3bf 8f4f 	dsb	sy
 800c422:	61fb      	str	r3, [r7, #28]
}
 800c424:	bf00      	nop
 800c426:	bf00      	nop
 800c428:	e7fd      	b.n	800c426 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c430:	6850      	ldr	r0, [r2, #4]
 800c432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c434:	6892      	ldr	r2, [r2, #8]
 800c436:	4611      	mov	r1, r2
 800c438:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f2c0 80ae 	blt.w	800c59e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c448:	695b      	ldr	r3, [r3, #20]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d004      	beq.n	800c458 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c450:	3304      	adds	r3, #4
 800c452:	4618      	mov	r0, r3
 800c454:	f7fd fc74 	bl	8009d40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c458:	463b      	mov	r3, r7
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7ff ff6a 	bl	800c334 <prvSampleTimeNow>
 800c460:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2b09      	cmp	r3, #9
 800c466:	f200 8097 	bhi.w	800c598 <prvProcessReceivedCommands+0x1a0>
 800c46a:	a201      	add	r2, pc, #4	@ (adr r2, 800c470 <prvProcessReceivedCommands+0x78>)
 800c46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c470:	0800c499 	.word	0x0800c499
 800c474:	0800c499 	.word	0x0800c499
 800c478:	0800c499 	.word	0x0800c499
 800c47c:	0800c50f 	.word	0x0800c50f
 800c480:	0800c523 	.word	0x0800c523
 800c484:	0800c56f 	.word	0x0800c56f
 800c488:	0800c499 	.word	0x0800c499
 800c48c:	0800c499 	.word	0x0800c499
 800c490:	0800c50f 	.word	0x0800c50f
 800c494:	0800c523 	.word	0x0800c523
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c49a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c49e:	f043 0301 	orr.w	r3, r3, #1
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c4aa:	68ba      	ldr	r2, [r7, #8]
 800c4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ae:	699b      	ldr	r3, [r3, #24]
 800c4b0:	18d1      	adds	r1, r2, r3
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4b8:	f7ff ff5c 	bl	800c374 <prvInsertTimerInActiveList>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d06c      	beq.n	800c59c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4c4:	6a1b      	ldr	r3, [r3, #32]
 800c4c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4d0:	f003 0304 	and.w	r3, r3, #4
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d061      	beq.n	800c59c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c4d8:	68ba      	ldr	r2, [r7, #8]
 800c4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4dc:	699b      	ldr	r3, [r3, #24]
 800c4de:	441a      	add	r2, r3
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	9300      	str	r3, [sp, #0]
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	2100      	movs	r1, #0
 800c4e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4ea:	f7ff fe01 	bl	800c0f0 <xTimerGenericCommand>
 800c4ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c4f0:	6a3b      	ldr	r3, [r7, #32]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d152      	bne.n	800c59c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4fa:	f383 8811 	msr	BASEPRI, r3
 800c4fe:	f3bf 8f6f 	isb	sy
 800c502:	f3bf 8f4f 	dsb	sy
 800c506:	61bb      	str	r3, [r7, #24]
}
 800c508:	bf00      	nop
 800c50a:	bf00      	nop
 800c50c:	e7fd      	b.n	800c50a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c510:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c514:	f023 0301 	bic.w	r3, r3, #1
 800c518:	b2da      	uxtb	r2, r3
 800c51a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c51c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c520:	e03d      	b.n	800c59e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c524:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c528:	f043 0301 	orr.w	r3, r3, #1
 800c52c:	b2da      	uxtb	r2, r3
 800c52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c530:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c534:	68ba      	ldr	r2, [r7, #8]
 800c536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c538:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c53c:	699b      	ldr	r3, [r3, #24]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d10b      	bne.n	800c55a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c546:	f383 8811 	msr	BASEPRI, r3
 800c54a:	f3bf 8f6f 	isb	sy
 800c54e:	f3bf 8f4f 	dsb	sy
 800c552:	617b      	str	r3, [r7, #20]
}
 800c554:	bf00      	nop
 800c556:	bf00      	nop
 800c558:	e7fd      	b.n	800c556 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c55c:	699a      	ldr	r2, [r3, #24]
 800c55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c560:	18d1      	adds	r1, r2, r3
 800c562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c566:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c568:	f7ff ff04 	bl	800c374 <prvInsertTimerInActiveList>
					break;
 800c56c:	e017      	b.n	800c59e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c570:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c574:	f003 0302 	and.w	r3, r3, #2
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d103      	bne.n	800c584 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c57c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c57e:	f000 fbc7 	bl	800cd10 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c582:	e00c      	b.n	800c59e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c586:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c58a:	f023 0301 	bic.w	r3, r3, #1
 800c58e:	b2da      	uxtb	r2, r3
 800c590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c592:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c596:	e002      	b.n	800c59e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c598:	bf00      	nop
 800c59a:	e000      	b.n	800c59e <prvProcessReceivedCommands+0x1a6>
					break;
 800c59c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c59e:	4b08      	ldr	r3, [pc, #32]	@ (800c5c0 <prvProcessReceivedCommands+0x1c8>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	1d39      	adds	r1, r7, #4
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7fe f890 	bl	800a6cc <xQueueReceive>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	f47f af26 	bne.w	800c400 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c5b4:	bf00      	nop
 800c5b6:	bf00      	nop
 800c5b8:	3730      	adds	r7, #48	@ 0x30
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	24069fe4 	.word	0x24069fe4

0800c5c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b088      	sub	sp, #32
 800c5c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c5ca:	e049      	b.n	800c660 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5cc:	4b2e      	ldr	r3, [pc, #184]	@ (800c688 <prvSwitchTimerLists+0xc4>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	68db      	ldr	r3, [r3, #12]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5d6:	4b2c      	ldr	r3, [pc, #176]	@ (800c688 <prvSwitchTimerLists+0xc4>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	68db      	ldr	r3, [r3, #12]
 800c5de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	3304      	adds	r3, #4
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7fd fbab 	bl	8009d40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	6a1b      	ldr	r3, [r3, #32]
 800c5ee:	68f8      	ldr	r0, [r7, #12]
 800c5f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5f8:	f003 0304 	and.w	r3, r3, #4
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d02f      	beq.n	800c660 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	699b      	ldr	r3, [r3, #24]
 800c604:	693a      	ldr	r2, [r7, #16]
 800c606:	4413      	add	r3, r2
 800c608:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c60a:	68ba      	ldr	r2, [r7, #8]
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	429a      	cmp	r2, r3
 800c610:	d90e      	bls.n	800c630 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	68ba      	ldr	r2, [r7, #8]
 800c616:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	68fa      	ldr	r2, [r7, #12]
 800c61c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c61e:	4b1a      	ldr	r3, [pc, #104]	@ (800c688 <prvSwitchTimerLists+0xc4>)
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	3304      	adds	r3, #4
 800c626:	4619      	mov	r1, r3
 800c628:	4610      	mov	r0, r2
 800c62a:	f7fd fb50 	bl	8009cce <vListInsert>
 800c62e:	e017      	b.n	800c660 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c630:	2300      	movs	r3, #0
 800c632:	9300      	str	r3, [sp, #0]
 800c634:	2300      	movs	r3, #0
 800c636:	693a      	ldr	r2, [r7, #16]
 800c638:	2100      	movs	r1, #0
 800c63a:	68f8      	ldr	r0, [r7, #12]
 800c63c:	f7ff fd58 	bl	800c0f0 <xTimerGenericCommand>
 800c640:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d10b      	bne.n	800c660 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c64c:	f383 8811 	msr	BASEPRI, r3
 800c650:	f3bf 8f6f 	isb	sy
 800c654:	f3bf 8f4f 	dsb	sy
 800c658:	603b      	str	r3, [r7, #0]
}
 800c65a:	bf00      	nop
 800c65c:	bf00      	nop
 800c65e:	e7fd      	b.n	800c65c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c660:	4b09      	ldr	r3, [pc, #36]	@ (800c688 <prvSwitchTimerLists+0xc4>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d1b0      	bne.n	800c5cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c66a:	4b07      	ldr	r3, [pc, #28]	@ (800c688 <prvSwitchTimerLists+0xc4>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c670:	4b06      	ldr	r3, [pc, #24]	@ (800c68c <prvSwitchTimerLists+0xc8>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4a04      	ldr	r2, [pc, #16]	@ (800c688 <prvSwitchTimerLists+0xc4>)
 800c676:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c678:	4a04      	ldr	r2, [pc, #16]	@ (800c68c <prvSwitchTimerLists+0xc8>)
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	6013      	str	r3, [r2, #0]
}
 800c67e:	bf00      	nop
 800c680:	3718      	adds	r7, #24
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	24069fdc 	.word	0x24069fdc
 800c68c:	24069fe0 	.word	0x24069fe0

0800c690 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c696:	f000 f96f 	bl	800c978 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c69a:	4b15      	ldr	r3, [pc, #84]	@ (800c6f0 <prvCheckForValidListAndQueue+0x60>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d120      	bne.n	800c6e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c6a2:	4814      	ldr	r0, [pc, #80]	@ (800c6f4 <prvCheckForValidListAndQueue+0x64>)
 800c6a4:	f7fd fac2 	bl	8009c2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c6a8:	4813      	ldr	r0, [pc, #76]	@ (800c6f8 <prvCheckForValidListAndQueue+0x68>)
 800c6aa:	f7fd fabf 	bl	8009c2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c6ae:	4b13      	ldr	r3, [pc, #76]	@ (800c6fc <prvCheckForValidListAndQueue+0x6c>)
 800c6b0:	4a10      	ldr	r2, [pc, #64]	@ (800c6f4 <prvCheckForValidListAndQueue+0x64>)
 800c6b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c6b4:	4b12      	ldr	r3, [pc, #72]	@ (800c700 <prvCheckForValidListAndQueue+0x70>)
 800c6b6:	4a10      	ldr	r2, [pc, #64]	@ (800c6f8 <prvCheckForValidListAndQueue+0x68>)
 800c6b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	9300      	str	r3, [sp, #0]
 800c6be:	4b11      	ldr	r3, [pc, #68]	@ (800c704 <prvCheckForValidListAndQueue+0x74>)
 800c6c0:	4a11      	ldr	r2, [pc, #68]	@ (800c708 <prvCheckForValidListAndQueue+0x78>)
 800c6c2:	2110      	movs	r1, #16
 800c6c4:	200a      	movs	r0, #10
 800c6c6:	f7fd fbcf 	bl	8009e68 <xQueueGenericCreateStatic>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	4a08      	ldr	r2, [pc, #32]	@ (800c6f0 <prvCheckForValidListAndQueue+0x60>)
 800c6ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c6d0:	4b07      	ldr	r3, [pc, #28]	@ (800c6f0 <prvCheckForValidListAndQueue+0x60>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d005      	beq.n	800c6e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c6d8:	4b05      	ldr	r3, [pc, #20]	@ (800c6f0 <prvCheckForValidListAndQueue+0x60>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	490b      	ldr	r1, [pc, #44]	@ (800c70c <prvCheckForValidListAndQueue+0x7c>)
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7fe fbb4 	bl	800ae4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c6e4:	f000 f97a 	bl	800c9dc <vPortExitCritical>
}
 800c6e8:	bf00      	nop
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	24069fe4 	.word	0x24069fe4
 800c6f4:	24069fb4 	.word	0x24069fb4
 800c6f8:	24069fc8 	.word	0x24069fc8
 800c6fc:	24069fdc 	.word	0x24069fdc
 800c700:	24069fe0 	.word	0x24069fe0
 800c704:	2406a090 	.word	0x2406a090
 800c708:	24069ff0 	.word	0x24069ff0
 800c70c:	08012e0c 	.word	0x08012e0c

0800c710 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c710:	b480      	push	{r7}
 800c712:	b085      	sub	sp, #20
 800c714:	af00      	add	r7, sp, #0
 800c716:	60f8      	str	r0, [r7, #12]
 800c718:	60b9      	str	r1, [r7, #8]
 800c71a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	3b04      	subs	r3, #4
 800c720:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	3b04      	subs	r3, #4
 800c72e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	f023 0201 	bic.w	r2, r3, #1
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	3b04      	subs	r3, #4
 800c73e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c740:	4a0c      	ldr	r2, [pc, #48]	@ (800c774 <pxPortInitialiseStack+0x64>)
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	3b14      	subs	r3, #20
 800c74a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	3b04      	subs	r3, #4
 800c756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	f06f 0202 	mvn.w	r2, #2
 800c75e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	3b20      	subs	r3, #32
 800c764:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c766:	68fb      	ldr	r3, [r7, #12]
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3714      	adds	r7, #20
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr
 800c774:	0800c779 	.word	0x0800c779

0800c778 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c778:	b480      	push	{r7}
 800c77a:	b085      	sub	sp, #20
 800c77c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c77e:	2300      	movs	r3, #0
 800c780:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c782:	4b13      	ldr	r3, [pc, #76]	@ (800c7d0 <prvTaskExitError+0x58>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c78a:	d00b      	beq.n	800c7a4 <prvTaskExitError+0x2c>
	__asm volatile
 800c78c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c790:	f383 8811 	msr	BASEPRI, r3
 800c794:	f3bf 8f6f 	isb	sy
 800c798:	f3bf 8f4f 	dsb	sy
 800c79c:	60fb      	str	r3, [r7, #12]
}
 800c79e:	bf00      	nop
 800c7a0:	bf00      	nop
 800c7a2:	e7fd      	b.n	800c7a0 <prvTaskExitError+0x28>
	__asm volatile
 800c7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7a8:	f383 8811 	msr	BASEPRI, r3
 800c7ac:	f3bf 8f6f 	isb	sy
 800c7b0:	f3bf 8f4f 	dsb	sy
 800c7b4:	60bb      	str	r3, [r7, #8]
}
 800c7b6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c7b8:	bf00      	nop
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d0fc      	beq.n	800c7ba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c7c0:	bf00      	nop
 800c7c2:	bf00      	nop
 800c7c4:	3714      	adds	r7, #20
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr
 800c7ce:	bf00      	nop
 800c7d0:	24000034 	.word	0x24000034
	...

0800c7e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c7e0:	4b07      	ldr	r3, [pc, #28]	@ (800c800 <pxCurrentTCBConst2>)
 800c7e2:	6819      	ldr	r1, [r3, #0]
 800c7e4:	6808      	ldr	r0, [r1, #0]
 800c7e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ea:	f380 8809 	msr	PSP, r0
 800c7ee:	f3bf 8f6f 	isb	sy
 800c7f2:	f04f 0000 	mov.w	r0, #0
 800c7f6:	f380 8811 	msr	BASEPRI, r0
 800c7fa:	4770      	bx	lr
 800c7fc:	f3af 8000 	nop.w

0800c800 <pxCurrentTCBConst2>:
 800c800:	24069ab4 	.word	0x24069ab4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c804:	bf00      	nop
 800c806:	bf00      	nop

0800c808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c808:	4808      	ldr	r0, [pc, #32]	@ (800c82c <prvPortStartFirstTask+0x24>)
 800c80a:	6800      	ldr	r0, [r0, #0]
 800c80c:	6800      	ldr	r0, [r0, #0]
 800c80e:	f380 8808 	msr	MSP, r0
 800c812:	f04f 0000 	mov.w	r0, #0
 800c816:	f380 8814 	msr	CONTROL, r0
 800c81a:	b662      	cpsie	i
 800c81c:	b661      	cpsie	f
 800c81e:	f3bf 8f4f 	dsb	sy
 800c822:	f3bf 8f6f 	isb	sy
 800c826:	df00      	svc	0
 800c828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c82a:	bf00      	nop
 800c82c:	e000ed08 	.word	0xe000ed08

0800c830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b086      	sub	sp, #24
 800c834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c836:	4b47      	ldr	r3, [pc, #284]	@ (800c954 <xPortStartScheduler+0x124>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a47      	ldr	r2, [pc, #284]	@ (800c958 <xPortStartScheduler+0x128>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d10b      	bne.n	800c858 <xPortStartScheduler+0x28>
	__asm volatile
 800c840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c844:	f383 8811 	msr	BASEPRI, r3
 800c848:	f3bf 8f6f 	isb	sy
 800c84c:	f3bf 8f4f 	dsb	sy
 800c850:	613b      	str	r3, [r7, #16]
}
 800c852:	bf00      	nop
 800c854:	bf00      	nop
 800c856:	e7fd      	b.n	800c854 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c858:	4b3e      	ldr	r3, [pc, #248]	@ (800c954 <xPortStartScheduler+0x124>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a3f      	ldr	r2, [pc, #252]	@ (800c95c <xPortStartScheduler+0x12c>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d10b      	bne.n	800c87a <xPortStartScheduler+0x4a>
	__asm volatile
 800c862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c866:	f383 8811 	msr	BASEPRI, r3
 800c86a:	f3bf 8f6f 	isb	sy
 800c86e:	f3bf 8f4f 	dsb	sy
 800c872:	60fb      	str	r3, [r7, #12]
}
 800c874:	bf00      	nop
 800c876:	bf00      	nop
 800c878:	e7fd      	b.n	800c876 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c87a:	4b39      	ldr	r3, [pc, #228]	@ (800c960 <xPortStartScheduler+0x130>)
 800c87c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	781b      	ldrb	r3, [r3, #0]
 800c882:	b2db      	uxtb	r3, r3
 800c884:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	22ff      	movs	r2, #255	@ 0xff
 800c88a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	b2db      	uxtb	r3, r3
 800c892:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c894:	78fb      	ldrb	r3, [r7, #3]
 800c896:	b2db      	uxtb	r3, r3
 800c898:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c89c:	b2da      	uxtb	r2, r3
 800c89e:	4b31      	ldr	r3, [pc, #196]	@ (800c964 <xPortStartScheduler+0x134>)
 800c8a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c8a2:	4b31      	ldr	r3, [pc, #196]	@ (800c968 <xPortStartScheduler+0x138>)
 800c8a4:	2207      	movs	r2, #7
 800c8a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8a8:	e009      	b.n	800c8be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c8aa:	4b2f      	ldr	r3, [pc, #188]	@ (800c968 <xPortStartScheduler+0x138>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	3b01      	subs	r3, #1
 800c8b0:	4a2d      	ldr	r2, [pc, #180]	@ (800c968 <xPortStartScheduler+0x138>)
 800c8b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c8b4:	78fb      	ldrb	r3, [r7, #3]
 800c8b6:	b2db      	uxtb	r3, r3
 800c8b8:	005b      	lsls	r3, r3, #1
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8be:	78fb      	ldrb	r3, [r7, #3]
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8c6:	2b80      	cmp	r3, #128	@ 0x80
 800c8c8:	d0ef      	beq.n	800c8aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c8ca:	4b27      	ldr	r3, [pc, #156]	@ (800c968 <xPortStartScheduler+0x138>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f1c3 0307 	rsb	r3, r3, #7
 800c8d2:	2b04      	cmp	r3, #4
 800c8d4:	d00b      	beq.n	800c8ee <xPortStartScheduler+0xbe>
	__asm volatile
 800c8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8da:	f383 8811 	msr	BASEPRI, r3
 800c8de:	f3bf 8f6f 	isb	sy
 800c8e2:	f3bf 8f4f 	dsb	sy
 800c8e6:	60bb      	str	r3, [r7, #8]
}
 800c8e8:	bf00      	nop
 800c8ea:	bf00      	nop
 800c8ec:	e7fd      	b.n	800c8ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c8ee:	4b1e      	ldr	r3, [pc, #120]	@ (800c968 <xPortStartScheduler+0x138>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	021b      	lsls	r3, r3, #8
 800c8f4:	4a1c      	ldr	r2, [pc, #112]	@ (800c968 <xPortStartScheduler+0x138>)
 800c8f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c8f8:	4b1b      	ldr	r3, [pc, #108]	@ (800c968 <xPortStartScheduler+0x138>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c900:	4a19      	ldr	r2, [pc, #100]	@ (800c968 <xPortStartScheduler+0x138>)
 800c902:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	b2da      	uxtb	r2, r3
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c90c:	4b17      	ldr	r3, [pc, #92]	@ (800c96c <xPortStartScheduler+0x13c>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	4a16      	ldr	r2, [pc, #88]	@ (800c96c <xPortStartScheduler+0x13c>)
 800c912:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c916:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c918:	4b14      	ldr	r3, [pc, #80]	@ (800c96c <xPortStartScheduler+0x13c>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4a13      	ldr	r2, [pc, #76]	@ (800c96c <xPortStartScheduler+0x13c>)
 800c91e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c922:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c924:	f000 f8da 	bl	800cadc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c928:	4b11      	ldr	r3, [pc, #68]	@ (800c970 <xPortStartScheduler+0x140>)
 800c92a:	2200      	movs	r2, #0
 800c92c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c92e:	f000 f8f9 	bl	800cb24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c932:	4b10      	ldr	r3, [pc, #64]	@ (800c974 <xPortStartScheduler+0x144>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4a0f      	ldr	r2, [pc, #60]	@ (800c974 <xPortStartScheduler+0x144>)
 800c938:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c93c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c93e:	f7ff ff63 	bl	800c808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c942:	f7fe fef7 	bl	800b734 <vTaskSwitchContext>
	prvTaskExitError();
 800c946:	f7ff ff17 	bl	800c778 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c94a:	2300      	movs	r3, #0
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3718      	adds	r7, #24
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}
 800c954:	e000ed00 	.word	0xe000ed00
 800c958:	410fc271 	.word	0x410fc271
 800c95c:	410fc270 	.word	0x410fc270
 800c960:	e000e400 	.word	0xe000e400
 800c964:	2406a0e0 	.word	0x2406a0e0
 800c968:	2406a0e4 	.word	0x2406a0e4
 800c96c:	e000ed20 	.word	0xe000ed20
 800c970:	24000034 	.word	0x24000034
 800c974:	e000ef34 	.word	0xe000ef34

0800c978 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c978:	b480      	push	{r7}
 800c97a:	b083      	sub	sp, #12
 800c97c:	af00      	add	r7, sp, #0
	__asm volatile
 800c97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c982:	f383 8811 	msr	BASEPRI, r3
 800c986:	f3bf 8f6f 	isb	sy
 800c98a:	f3bf 8f4f 	dsb	sy
 800c98e:	607b      	str	r3, [r7, #4]
}
 800c990:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c992:	4b10      	ldr	r3, [pc, #64]	@ (800c9d4 <vPortEnterCritical+0x5c>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	3301      	adds	r3, #1
 800c998:	4a0e      	ldr	r2, [pc, #56]	@ (800c9d4 <vPortEnterCritical+0x5c>)
 800c99a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c99c:	4b0d      	ldr	r3, [pc, #52]	@ (800c9d4 <vPortEnterCritical+0x5c>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d110      	bne.n	800c9c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c9a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c9d8 <vPortEnterCritical+0x60>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	b2db      	uxtb	r3, r3
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d00b      	beq.n	800c9c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9b2:	f383 8811 	msr	BASEPRI, r3
 800c9b6:	f3bf 8f6f 	isb	sy
 800c9ba:	f3bf 8f4f 	dsb	sy
 800c9be:	603b      	str	r3, [r7, #0]
}
 800c9c0:	bf00      	nop
 800c9c2:	bf00      	nop
 800c9c4:	e7fd      	b.n	800c9c2 <vPortEnterCritical+0x4a>
	}
}
 800c9c6:	bf00      	nop
 800c9c8:	370c      	adds	r7, #12
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr
 800c9d2:	bf00      	nop
 800c9d4:	24000034 	.word	0x24000034
 800c9d8:	e000ed04 	.word	0xe000ed04

0800c9dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c9e2:	4b12      	ldr	r3, [pc, #72]	@ (800ca2c <vPortExitCritical+0x50>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d10b      	bne.n	800ca02 <vPortExitCritical+0x26>
	__asm volatile
 800c9ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ee:	f383 8811 	msr	BASEPRI, r3
 800c9f2:	f3bf 8f6f 	isb	sy
 800c9f6:	f3bf 8f4f 	dsb	sy
 800c9fa:	607b      	str	r3, [r7, #4]
}
 800c9fc:	bf00      	nop
 800c9fe:	bf00      	nop
 800ca00:	e7fd      	b.n	800c9fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ca02:	4b0a      	ldr	r3, [pc, #40]	@ (800ca2c <vPortExitCritical+0x50>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	3b01      	subs	r3, #1
 800ca08:	4a08      	ldr	r2, [pc, #32]	@ (800ca2c <vPortExitCritical+0x50>)
 800ca0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ca0c:	4b07      	ldr	r3, [pc, #28]	@ (800ca2c <vPortExitCritical+0x50>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d105      	bne.n	800ca20 <vPortExitCritical+0x44>
 800ca14:	2300      	movs	r3, #0
 800ca16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	f383 8811 	msr	BASEPRI, r3
}
 800ca1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ca20:	bf00      	nop
 800ca22:	370c      	adds	r7, #12
 800ca24:	46bd      	mov	sp, r7
 800ca26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2a:	4770      	bx	lr
 800ca2c:	24000034 	.word	0x24000034

0800ca30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ca30:	f3ef 8009 	mrs	r0, PSP
 800ca34:	f3bf 8f6f 	isb	sy
 800ca38:	4b15      	ldr	r3, [pc, #84]	@ (800ca90 <pxCurrentTCBConst>)
 800ca3a:	681a      	ldr	r2, [r3, #0]
 800ca3c:	f01e 0f10 	tst.w	lr, #16
 800ca40:	bf08      	it	eq
 800ca42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ca46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca4a:	6010      	str	r0, [r2, #0]
 800ca4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ca50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ca54:	f380 8811 	msr	BASEPRI, r0
 800ca58:	f3bf 8f4f 	dsb	sy
 800ca5c:	f3bf 8f6f 	isb	sy
 800ca60:	f7fe fe68 	bl	800b734 <vTaskSwitchContext>
 800ca64:	f04f 0000 	mov.w	r0, #0
 800ca68:	f380 8811 	msr	BASEPRI, r0
 800ca6c:	bc09      	pop	{r0, r3}
 800ca6e:	6819      	ldr	r1, [r3, #0]
 800ca70:	6808      	ldr	r0, [r1, #0]
 800ca72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca76:	f01e 0f10 	tst.w	lr, #16
 800ca7a:	bf08      	it	eq
 800ca7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ca80:	f380 8809 	msr	PSP, r0
 800ca84:	f3bf 8f6f 	isb	sy
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop
 800ca8c:	f3af 8000 	nop.w

0800ca90 <pxCurrentTCBConst>:
 800ca90:	24069ab4 	.word	0x24069ab4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ca94:	bf00      	nop
 800ca96:	bf00      	nop

0800ca98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0
	__asm volatile
 800ca9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caa2:	f383 8811 	msr	BASEPRI, r3
 800caa6:	f3bf 8f6f 	isb	sy
 800caaa:	f3bf 8f4f 	dsb	sy
 800caae:	607b      	str	r3, [r7, #4]
}
 800cab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cab2:	f7fe fd85 	bl	800b5c0 <xTaskIncrementTick>
 800cab6:	4603      	mov	r3, r0
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d003      	beq.n	800cac4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cabc:	4b06      	ldr	r3, [pc, #24]	@ (800cad8 <xPortSysTickHandler+0x40>)
 800cabe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cac2:	601a      	str	r2, [r3, #0]
 800cac4:	2300      	movs	r3, #0
 800cac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	f383 8811 	msr	BASEPRI, r3
}
 800cace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cad0:	bf00      	nop
 800cad2:	3708      	adds	r7, #8
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}
 800cad8:	e000ed04 	.word	0xe000ed04

0800cadc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cadc:	b480      	push	{r7}
 800cade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cae0:	4b0b      	ldr	r3, [pc, #44]	@ (800cb10 <vPortSetupTimerInterrupt+0x34>)
 800cae2:	2200      	movs	r2, #0
 800cae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cae6:	4b0b      	ldr	r3, [pc, #44]	@ (800cb14 <vPortSetupTimerInterrupt+0x38>)
 800cae8:	2200      	movs	r2, #0
 800caea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800caec:	4b0a      	ldr	r3, [pc, #40]	@ (800cb18 <vPortSetupTimerInterrupt+0x3c>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4a0a      	ldr	r2, [pc, #40]	@ (800cb1c <vPortSetupTimerInterrupt+0x40>)
 800caf2:	fba2 2303 	umull	r2, r3, r2, r3
 800caf6:	099b      	lsrs	r3, r3, #6
 800caf8:	4a09      	ldr	r2, [pc, #36]	@ (800cb20 <vPortSetupTimerInterrupt+0x44>)
 800cafa:	3b01      	subs	r3, #1
 800cafc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cafe:	4b04      	ldr	r3, [pc, #16]	@ (800cb10 <vPortSetupTimerInterrupt+0x34>)
 800cb00:	2207      	movs	r2, #7
 800cb02:	601a      	str	r2, [r3, #0]
}
 800cb04:	bf00      	nop
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr
 800cb0e:	bf00      	nop
 800cb10:	e000e010 	.word	0xe000e010
 800cb14:	e000e018 	.word	0xe000e018
 800cb18:	24000000 	.word	0x24000000
 800cb1c:	10624dd3 	.word	0x10624dd3
 800cb20:	e000e014 	.word	0xe000e014

0800cb24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cb24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cb34 <vPortEnableVFP+0x10>
 800cb28:	6801      	ldr	r1, [r0, #0]
 800cb2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cb2e:	6001      	str	r1, [r0, #0]
 800cb30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cb32:	bf00      	nop
 800cb34:	e000ed88 	.word	0xe000ed88

0800cb38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cb38:	b480      	push	{r7}
 800cb3a:	b085      	sub	sp, #20
 800cb3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cb3e:	f3ef 8305 	mrs	r3, IPSR
 800cb42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2b0f      	cmp	r3, #15
 800cb48:	d915      	bls.n	800cb76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cb4a:	4a18      	ldr	r2, [pc, #96]	@ (800cbac <vPortValidateInterruptPriority+0x74>)
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	4413      	add	r3, r2
 800cb50:	781b      	ldrb	r3, [r3, #0]
 800cb52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cb54:	4b16      	ldr	r3, [pc, #88]	@ (800cbb0 <vPortValidateInterruptPriority+0x78>)
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	7afa      	ldrb	r2, [r7, #11]
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d20b      	bcs.n	800cb76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cb5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb62:	f383 8811 	msr	BASEPRI, r3
 800cb66:	f3bf 8f6f 	isb	sy
 800cb6a:	f3bf 8f4f 	dsb	sy
 800cb6e:	607b      	str	r3, [r7, #4]
}
 800cb70:	bf00      	nop
 800cb72:	bf00      	nop
 800cb74:	e7fd      	b.n	800cb72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cb76:	4b0f      	ldr	r3, [pc, #60]	@ (800cbb4 <vPortValidateInterruptPriority+0x7c>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cb7e:	4b0e      	ldr	r3, [pc, #56]	@ (800cbb8 <vPortValidateInterruptPriority+0x80>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d90b      	bls.n	800cb9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cb86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb8a:	f383 8811 	msr	BASEPRI, r3
 800cb8e:	f3bf 8f6f 	isb	sy
 800cb92:	f3bf 8f4f 	dsb	sy
 800cb96:	603b      	str	r3, [r7, #0]
}
 800cb98:	bf00      	nop
 800cb9a:	bf00      	nop
 800cb9c:	e7fd      	b.n	800cb9a <vPortValidateInterruptPriority+0x62>
	}
 800cb9e:	bf00      	nop
 800cba0:	3714      	adds	r7, #20
 800cba2:	46bd      	mov	sp, r7
 800cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba8:	4770      	bx	lr
 800cbaa:	bf00      	nop
 800cbac:	e000e3f0 	.word	0xe000e3f0
 800cbb0:	2406a0e0 	.word	0x2406a0e0
 800cbb4:	e000ed0c 	.word	0xe000ed0c
 800cbb8:	2406a0e4 	.word	0x2406a0e4

0800cbbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b088      	sub	sp, #32
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 800cbc8:	4b4b      	ldr	r3, [pc, #300]	@ (800ccf8 <pvPortMalloc+0x13c>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d10b      	bne.n	800cbe8 <pvPortMalloc+0x2c>
	__asm volatile
 800cbd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbd4:	f383 8811 	msr	BASEPRI, r3
 800cbd8:	f3bf 8f6f 	isb	sy
 800cbdc:	f3bf 8f4f 	dsb	sy
 800cbe0:	60fb      	str	r3, [r7, #12]
}
 800cbe2:	bf00      	nop
 800cbe4:	bf00      	nop
 800cbe6:	e7fd      	b.n	800cbe4 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 800cbe8:	f7fe fc1c 	bl	800b424 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cbec:	4b43      	ldr	r3, [pc, #268]	@ (800ccfc <pvPortMalloc+0x140>)
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	4013      	ands	r3, r2
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d172      	bne.n	800ccde <pvPortMalloc+0x122>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d00d      	beq.n	800cc1a <pvPortMalloc+0x5e>
			{
				xWantedSize += xHeapStructSize;
 800cbfe:	2208      	movs	r2, #8
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	4413      	add	r3, r2
 800cc04:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f003 0307 	and.w	r3, r3, #7
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d004      	beq.n	800cc1a <pvPortMalloc+0x5e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f023 0307 	bic.w	r3, r3, #7
 800cc16:	3308      	adds	r3, #8
 800cc18:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d05e      	beq.n	800ccde <pvPortMalloc+0x122>
 800cc20:	4b37      	ldr	r3, [pc, #220]	@ (800cd00 <pvPortMalloc+0x144>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d859      	bhi.n	800ccde <pvPortMalloc+0x122>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cc2a:	4b36      	ldr	r3, [pc, #216]	@ (800cd04 <pvPortMalloc+0x148>)
 800cc2c:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 800cc2e:	4b35      	ldr	r3, [pc, #212]	@ (800cd04 <pvPortMalloc+0x148>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc34:	e004      	b.n	800cc40 <pvPortMalloc+0x84>
				{
					pxPreviousBlock = pxBlock;
 800cc36:	69fb      	ldr	r3, [r7, #28]
 800cc38:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc40:	69fb      	ldr	r3, [r7, #28]
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d903      	bls.n	800cc52 <pvPortMalloc+0x96>
 800cc4a:	69fb      	ldr	r3, [r7, #28]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d1f1      	bne.n	800cc36 <pvPortMalloc+0x7a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cc52:	4b29      	ldr	r3, [pc, #164]	@ (800ccf8 <pvPortMalloc+0x13c>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	69fa      	ldr	r2, [r7, #28]
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d040      	beq.n	800ccde <pvPortMalloc+0x122>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cc5c:	69bb      	ldr	r3, [r7, #24]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	2208      	movs	r2, #8
 800cc62:	4413      	add	r3, r2
 800cc64:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cc66:	69fb      	ldr	r3, [r7, #28]
 800cc68:	681a      	ldr	r2, [r3, #0]
 800cc6a:	69bb      	ldr	r3, [r7, #24]
 800cc6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cc6e:	69fb      	ldr	r3, [r7, #28]
 800cc70:	685a      	ldr	r2, [r3, #4]
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	1ad2      	subs	r2, r2, r3
 800cc76:	2308      	movs	r3, #8
 800cc78:	005b      	lsls	r3, r3, #1
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d90f      	bls.n	800cc9e <pvPortMalloc+0xe2>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cc7e:	69fa      	ldr	r2, [r7, #28]
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	4413      	add	r3, r2
 800cc84:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	685a      	ldr	r2, [r3, #4]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	1ad2      	subs	r2, r2, r3
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cc92:	69fb      	ldr	r3, [r7, #28]
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800cc98:	6938      	ldr	r0, [r7, #16]
 800cc9a:	f000 f89d 	bl	800cdd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cc9e:	4b18      	ldr	r3, [pc, #96]	@ (800cd00 <pvPortMalloc+0x144>)
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	69fb      	ldr	r3, [r7, #28]
 800cca4:	685b      	ldr	r3, [r3, #4]
 800cca6:	1ad3      	subs	r3, r2, r3
 800cca8:	4a15      	ldr	r2, [pc, #84]	@ (800cd00 <pvPortMalloc+0x144>)
 800ccaa:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ccac:	4b14      	ldr	r3, [pc, #80]	@ (800cd00 <pvPortMalloc+0x144>)
 800ccae:	681a      	ldr	r2, [r3, #0]
 800ccb0:	4b15      	ldr	r3, [pc, #84]	@ (800cd08 <pvPortMalloc+0x14c>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d203      	bcs.n	800ccc0 <pvPortMalloc+0x104>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ccb8:	4b11      	ldr	r3, [pc, #68]	@ (800cd00 <pvPortMalloc+0x144>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	4a12      	ldr	r2, [pc, #72]	@ (800cd08 <pvPortMalloc+0x14c>)
 800ccbe:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ccc0:	69fb      	ldr	r3, [r7, #28]
 800ccc2:	685a      	ldr	r2, [r3, #4]
 800ccc4:	4b0d      	ldr	r3, [pc, #52]	@ (800ccfc <pvPortMalloc+0x140>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	431a      	orrs	r2, r3
 800ccca:	69fb      	ldr	r3, [r7, #28]
 800cccc:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ccce:	69fb      	ldr	r3, [r7, #28]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ccd4:	4b0d      	ldr	r3, [pc, #52]	@ (800cd0c <pvPortMalloc+0x150>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	4a0c      	ldr	r2, [pc, #48]	@ (800cd0c <pvPortMalloc+0x150>)
 800ccdc:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ccde:	f7fe fbaf 	bl	800b440 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d101      	bne.n	800ccec <pvPortMalloc+0x130>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800cce8:	f7f3 fcce 	bl	8000688 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 800ccec:	697b      	ldr	r3, [r7, #20]
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3720      	adds	r7, #32
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	2406a0f0 	.word	0x2406a0f0
 800ccfc:	2406a104 	.word	0x2406a104
 800cd00:	2406a0f4 	.word	0x2406a0f4
 800cd04:	2406a0e8 	.word	0x2406a0e8
 800cd08:	2406a0f8 	.word	0x2406a0f8
 800cd0c:	2406a0fc 	.word	0x2406a0fc

0800cd10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b086      	sub	sp, #24
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d04f      	beq.n	800cdc2 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cd22:	2308      	movs	r3, #8
 800cd24:	425b      	negs	r3, r3
 800cd26:	697a      	ldr	r2, [r7, #20]
 800cd28:	4413      	add	r3, r2
 800cd2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	685a      	ldr	r2, [r3, #4]
 800cd34:	4b25      	ldr	r3, [pc, #148]	@ (800cdcc <vPortFree+0xbc>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4013      	ands	r3, r2
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d10b      	bne.n	800cd56 <vPortFree+0x46>
	__asm volatile
 800cd3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd42:	f383 8811 	msr	BASEPRI, r3
 800cd46:	f3bf 8f6f 	isb	sy
 800cd4a:	f3bf 8f4f 	dsb	sy
 800cd4e:	60fb      	str	r3, [r7, #12]
}
 800cd50:	bf00      	nop
 800cd52:	bf00      	nop
 800cd54:	e7fd      	b.n	800cd52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d00b      	beq.n	800cd76 <vPortFree+0x66>
	__asm volatile
 800cd5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd62:	f383 8811 	msr	BASEPRI, r3
 800cd66:	f3bf 8f6f 	isb	sy
 800cd6a:	f3bf 8f4f 	dsb	sy
 800cd6e:	60bb      	str	r3, [r7, #8]
}
 800cd70:	bf00      	nop
 800cd72:	bf00      	nop
 800cd74:	e7fd      	b.n	800cd72 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	685a      	ldr	r2, [r3, #4]
 800cd7a:	4b14      	ldr	r3, [pc, #80]	@ (800cdcc <vPortFree+0xbc>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	4013      	ands	r3, r2
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d01e      	beq.n	800cdc2 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d11a      	bne.n	800cdc2 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	685a      	ldr	r2, [r3, #4]
 800cd90:	4b0e      	ldr	r3, [pc, #56]	@ (800cdcc <vPortFree+0xbc>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	43db      	mvns	r3, r3
 800cd96:	401a      	ands	r2, r3
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cd9c:	f7fe fb42 	bl	800b424 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	685a      	ldr	r2, [r3, #4]
 800cda4:	4b0a      	ldr	r3, [pc, #40]	@ (800cdd0 <vPortFree+0xc0>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4413      	add	r3, r2
 800cdaa:	4a09      	ldr	r2, [pc, #36]	@ (800cdd0 <vPortFree+0xc0>)
 800cdac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cdae:	6938      	ldr	r0, [r7, #16]
 800cdb0:	f000 f812 	bl	800cdd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cdb4:	4b07      	ldr	r3, [pc, #28]	@ (800cdd4 <vPortFree+0xc4>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	3301      	adds	r3, #1
 800cdba:	4a06      	ldr	r2, [pc, #24]	@ (800cdd4 <vPortFree+0xc4>)
 800cdbc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cdbe:	f7fe fb3f 	bl	800b440 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cdc2:	bf00      	nop
 800cdc4:	3718      	adds	r7, #24
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	2406a104 	.word	0x2406a104
 800cdd0:	2406a0f4 	.word	0x2406a0f4
 800cdd4:	2406a100 	.word	0x2406a100

0800cdd8 <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b085      	sub	sp, #20
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cde0:	4b28      	ldr	r3, [pc, #160]	@ (800ce84 <prvInsertBlockIntoFreeList+0xac>)
 800cde2:	60fb      	str	r3, [r7, #12]
 800cde4:	e002      	b.n	800cdec <prvInsertBlockIntoFreeList+0x14>
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	60fb      	str	r3, [r7, #12]
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d8f7      	bhi.n	800cde6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	68ba      	ldr	r2, [r7, #8]
 800ce00:	4413      	add	r3, r2
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d108      	bne.n	800ce1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	685a      	ldr	r2, [r3, #4]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	441a      	add	r2, r3
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	68ba      	ldr	r2, [r7, #8]
 800ce24:	441a      	add	r2, r3
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d118      	bne.n	800ce60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681a      	ldr	r2, [r3, #0]
 800ce32:	4b15      	ldr	r3, [pc, #84]	@ (800ce88 <prvInsertBlockIntoFreeList+0xb0>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d00d      	beq.n	800ce56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	685a      	ldr	r2, [r3, #4]
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	441a      	add	r2, r3
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	601a      	str	r2, [r3, #0]
 800ce54:	e008      	b.n	800ce68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ce56:	4b0c      	ldr	r3, [pc, #48]	@ (800ce88 <prvInsertBlockIntoFreeList+0xb0>)
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	601a      	str	r2, [r3, #0]
 800ce5e:	e003      	b.n	800ce68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	681a      	ldr	r2, [r3, #0]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ce68:	68fa      	ldr	r2, [r7, #12]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d002      	beq.n	800ce76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce76:	bf00      	nop
 800ce78:	3714      	adds	r7, #20
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce80:	4770      	bx	lr
 800ce82:	bf00      	nop
 800ce84:	2406a0e8 	.word	0x2406a0e8
 800ce88:	2406a0f0 	.word	0x2406a0f0

0800ce8c <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b08f      	sub	sp, #60	@ 0x3c
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 800ce94:	2300      	movs	r3, #0
 800ce96:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	633b      	str	r3, [r7, #48]	@ 0x30
BaseType_t xDefinedRegions = 0;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 800cea0:	4b5c      	ldr	r3, [pc, #368]	@ (800d014 <vPortDefineHeapRegions+0x188>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d00b      	beq.n	800cec0 <vPortDefineHeapRegions+0x34>
	__asm volatile
 800cea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceac:	f383 8811 	msr	BASEPRI, r3
 800ceb0:	f3bf 8f6f 	isb	sy
 800ceb4:	f3bf 8f4f 	dsb	sy
 800ceb8:	617b      	str	r3, [r7, #20]
}
 800ceba:	bf00      	nop
 800cebc:	bf00      	nop
 800cebe:	e7fd      	b.n	800cebc <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800cec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cec2:	00db      	lsls	r3, r3, #3
 800cec4:	687a      	ldr	r2, [r7, #4]
 800cec6:	4413      	add	r3, r2
 800cec8:	627b      	str	r3, [r7, #36]	@ 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 800ceca:	e07f      	b.n	800cfcc <vPortDefineHeapRegions+0x140>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 800cecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 800ced2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	62bb      	str	r3, [r7, #40]	@ 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ced8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceda:	f003 0307 	and.w	r3, r3, #7
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d00e      	beq.n	800cf00 <vPortDefineHeapRegions+0x74>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 800cee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cee4:	3307      	adds	r3, #7
 800cee6:	62bb      	str	r3, [r7, #40]	@ 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800cee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceea:	f023 0307 	bic.w	r3, r3, #7
 800ceee:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 800cef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	461a      	mov	r2, r3
 800cef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cef8:	1ad3      	subs	r3, r2, r3
 800cefa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cefc:	4413      	add	r3, r2
 800cefe:	637b      	str	r3, [r7, #52]	@ 0x34
		}

		xAlignedHeap = xAddress;
 800cf00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf02:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 800cf04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d106      	bne.n	800cf18 <vPortDefineHeapRegions+0x8c>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 800cf0a:	69fb      	ldr	r3, [r7, #28]
 800cf0c:	4a42      	ldr	r2, [pc, #264]	@ (800d018 <vPortDefineHeapRegions+0x18c>)
 800cf0e:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 800cf10:	4b41      	ldr	r3, [pc, #260]	@ (800d018 <vPortDefineHeapRegions+0x18c>)
 800cf12:	2200      	movs	r2, #0
 800cf14:	605a      	str	r2, [r3, #4]
 800cf16:	e021      	b.n	800cf5c <vPortDefineHeapRegions+0xd0>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 800cf18:	4b3e      	ldr	r3, [pc, #248]	@ (800d014 <vPortDefineHeapRegions+0x188>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d10b      	bne.n	800cf38 <vPortDefineHeapRegions+0xac>
	__asm volatile
 800cf20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf24:	f383 8811 	msr	BASEPRI, r3
 800cf28:	f3bf 8f6f 	isb	sy
 800cf2c:	f3bf 8f4f 	dsb	sy
 800cf30:	613b      	str	r3, [r7, #16]
}
 800cf32:	bf00      	nop
 800cf34:	bf00      	nop
 800cf36:	e7fd      	b.n	800cf34 <vPortDefineHeapRegions+0xa8>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 800cf38:	4b36      	ldr	r3, [pc, #216]	@ (800d014 <vPortDefineHeapRegions+0x188>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d80b      	bhi.n	800cf5c <vPortDefineHeapRegions+0xd0>
	__asm volatile
 800cf44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf48:	f383 8811 	msr	BASEPRI, r3
 800cf4c:	f3bf 8f6f 	isb	sy
 800cf50:	f3bf 8f4f 	dsb	sy
 800cf54:	60fb      	str	r3, [r7, #12]
}
 800cf56:	bf00      	nop
 800cf58:	bf00      	nop
 800cf5a:	e7fd      	b.n	800cf58 <vPortDefineHeapRegions+0xcc>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 800cf5c:	4b2d      	ldr	r3, [pc, #180]	@ (800d014 <vPortDefineHeapRegions+0x188>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 800cf62:	69fa      	ldr	r2, [r7, #28]
 800cf64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf66:	4413      	add	r3, r2
 800cf68:	62bb      	str	r3, [r7, #40]	@ 0x28
		xAddress -= xHeapStructSize;
 800cf6a:	2208      	movs	r2, #8
 800cf6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf6e:	1a9b      	subs	r3, r3, r2
 800cf70:	62bb      	str	r3, [r7, #40]	@ 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800cf72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf74:	f023 0307 	bic.w	r3, r3, #7
 800cf78:	62bb      	str	r3, [r7, #40]	@ 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 800cf7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf7c:	4a25      	ldr	r2, [pc, #148]	@ (800d014 <vPortDefineHeapRegions+0x188>)
 800cf7e:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 800cf80:	4b24      	ldr	r3, [pc, #144]	@ (800d014 <vPortDefineHeapRegions+0x188>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	2200      	movs	r2, #0
 800cf86:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 800cf88:	4b22      	ldr	r3, [pc, #136]	@ (800d014 <vPortDefineHeapRegions+0x188>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800cf90:	69fb      	ldr	r3, [r7, #28]
 800cf92:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800cf94:	6a3b      	ldr	r3, [r7, #32]
 800cf96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf98:	1ad2      	subs	r2, r2, r3
 800cf9a:	6a3b      	ldr	r3, [r7, #32]
 800cf9c:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800cf9e:	4b1d      	ldr	r3, [pc, #116]	@ (800d014 <vPortDefineHeapRegions+0x188>)
 800cfa0:	681a      	ldr	r2, [r3, #0]
 800cfa2:	6a3b      	ldr	r3, [r7, #32]
 800cfa4:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 800cfa6:	69bb      	ldr	r3, [r7, #24]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d002      	beq.n	800cfb2 <vPortDefineHeapRegions+0x126>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 800cfac:	69bb      	ldr	r3, [r7, #24]
 800cfae:	6a3a      	ldr	r2, [r7, #32]
 800cfb0:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 800cfb2:	6a3b      	ldr	r3, [r7, #32]
 800cfb4:	685b      	ldr	r3, [r3, #4]
 800cfb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfb8:	4413      	add	r3, r2
 800cfba:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 800cfbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800cfc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfc4:	00db      	lsls	r3, r3, #3
 800cfc6:	687a      	ldr	r2, [r7, #4]
 800cfc8:	4413      	add	r3, r2
 800cfca:	627b      	str	r3, [r7, #36]	@ 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 800cfcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	f47f af7b 	bne.w	800cecc <vPortDefineHeapRegions+0x40>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800cfd6:	4a11      	ldr	r2, [pc, #68]	@ (800d01c <vPortDefineHeapRegions+0x190>)
 800cfd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfda:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 800cfdc:	4a10      	ldr	r2, [pc, #64]	@ (800d020 <vPortDefineHeapRegions+0x194>)
 800cfde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfe0:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 800cfe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d10b      	bne.n	800d000 <vPortDefineHeapRegions+0x174>
	__asm volatile
 800cfe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfec:	f383 8811 	msr	BASEPRI, r3
 800cff0:	f3bf 8f6f 	isb	sy
 800cff4:	f3bf 8f4f 	dsb	sy
 800cff8:	60bb      	str	r3, [r7, #8]
}
 800cffa:	bf00      	nop
 800cffc:	bf00      	nop
 800cffe:	e7fd      	b.n	800cffc <vPortDefineHeapRegions+0x170>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d000:	4b08      	ldr	r3, [pc, #32]	@ (800d024 <vPortDefineHeapRegions+0x198>)
 800d002:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d006:	601a      	str	r2, [r3, #0]
}
 800d008:	bf00      	nop
 800d00a:	373c      	adds	r7, #60	@ 0x3c
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr
 800d014:	2406a0f0 	.word	0x2406a0f0
 800d018:	2406a0e8 	.word	0x2406a0e8
 800d01c:	2406a0f8 	.word	0x2406a0f8
 800d020:	2406a0f4 	.word	0x2406a0f4
 800d024:	2406a104 	.word	0x2406a104

0800d028 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b084      	sub	sp, #16
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800d032:	f002 f875 	bl	800f120 <sys_timeouts_sleeptime>
 800d036:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d03e:	d10b      	bne.n	800d058 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800d040:	4813      	ldr	r0, [pc, #76]	@ (800d090 <tcpip_timeouts_mbox_fetch+0x68>)
 800d042:	f004 fde8 	bl	8011c16 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800d046:	2200      	movs	r2, #0
 800d048:	6839      	ldr	r1, [r7, #0]
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f004 fd70 	bl	8011b30 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800d050:	480f      	ldr	r0, [pc, #60]	@ (800d090 <tcpip_timeouts_mbox_fetch+0x68>)
 800d052:	f004 fdd1 	bl	8011bf8 <sys_mutex_lock>
    return;
 800d056:	e018      	b.n	800d08a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d102      	bne.n	800d064 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800d05e:	f002 f825 	bl	800f0ac <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d062:	e7e6      	b.n	800d032 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800d064:	480a      	ldr	r0, [pc, #40]	@ (800d090 <tcpip_timeouts_mbox_fetch+0x68>)
 800d066:	f004 fdd6 	bl	8011c16 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800d06a:	68fa      	ldr	r2, [r7, #12]
 800d06c:	6839      	ldr	r1, [r7, #0]
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f004 fd5e 	bl	8011b30 <sys_arch_mbox_fetch>
 800d074:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800d076:	4806      	ldr	r0, [pc, #24]	@ (800d090 <tcpip_timeouts_mbox_fetch+0x68>)
 800d078:	f004 fdbe 	bl	8011bf8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d082:	d102      	bne.n	800d08a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800d084:	f002 f812 	bl	800f0ac <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d088:	e7d3      	b.n	800d032 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800d08a:	3710      	adds	r7, #16
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	2406a114 	.word	0x2406a114

0800d094 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800d09c:	4810      	ldr	r0, [pc, #64]	@ (800d0e0 <tcpip_thread+0x4c>)
 800d09e:	f004 fdab 	bl	8011bf8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800d0a2:	4b10      	ldr	r3, [pc, #64]	@ (800d0e4 <tcpip_thread+0x50>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d005      	beq.n	800d0b6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800d0aa:	4b0e      	ldr	r3, [pc, #56]	@ (800d0e4 <tcpip_thread+0x50>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	4a0e      	ldr	r2, [pc, #56]	@ (800d0e8 <tcpip_thread+0x54>)
 800d0b0:	6812      	ldr	r2, [r2, #0]
 800d0b2:	4610      	mov	r0, r2
 800d0b4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d0b6:	f107 030c 	add.w	r3, r7, #12
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	480b      	ldr	r0, [pc, #44]	@ (800d0ec <tcpip_thread+0x58>)
 800d0be:	f7ff ffb3 	bl	800d028 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d106      	bne.n	800d0d6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d0c8:	4b09      	ldr	r3, [pc, #36]	@ (800d0f0 <tcpip_thread+0x5c>)
 800d0ca:	2291      	movs	r2, #145	@ 0x91
 800d0cc:	4909      	ldr	r1, [pc, #36]	@ (800d0f4 <tcpip_thread+0x60>)
 800d0ce:	480a      	ldr	r0, [pc, #40]	@ (800d0f8 <tcpip_thread+0x64>)
 800d0d0:	f004 fece 	bl	8011e70 <iprintf>
      continue;
 800d0d4:	e003      	b.n	800d0de <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f000 f80f 	bl	800d0fc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d0de:	e7ea      	b.n	800d0b6 <tcpip_thread+0x22>
 800d0e0:	2406a114 	.word	0x2406a114
 800d0e4:	2406a108 	.word	0x2406a108
 800d0e8:	2406a10c 	.word	0x2406a10c
 800d0ec:	2406a110 	.word	0x2406a110
 800d0f0:	08012e14 	.word	0x08012e14
 800d0f4:	08012e44 	.word	0x08012e44
 800d0f8:	08012e64 	.word	0x08012e64

0800d0fc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b082      	sub	sp, #8
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	2b02      	cmp	r3, #2
 800d10a:	d026      	beq.n	800d15a <tcpip_thread_handle_msg+0x5e>
 800d10c:	2b02      	cmp	r3, #2
 800d10e:	dc2b      	bgt.n	800d168 <tcpip_thread_handle_msg+0x6c>
 800d110:	2b00      	cmp	r3, #0
 800d112:	d002      	beq.n	800d11a <tcpip_thread_handle_msg+0x1e>
 800d114:	2b01      	cmp	r3, #1
 800d116:	d015      	beq.n	800d144 <tcpip_thread_handle_msg+0x48>
 800d118:	e026      	b.n	800d168 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	68db      	ldr	r3, [r3, #12]
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	6850      	ldr	r0, [r2, #4]
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	6892      	ldr	r2, [r2, #8]
 800d126:	4611      	mov	r1, r2
 800d128:	4798      	blx	r3
 800d12a:	4603      	mov	r3, r0
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d004      	beq.n	800d13a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	4618      	mov	r0, r3
 800d136:	f001 fcb5 	bl	800eaa4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d13a:	6879      	ldr	r1, [r7, #4]
 800d13c:	2006      	movs	r0, #6
 800d13e:	f000 fe93 	bl	800de68 <memp_free>
      break;
 800d142:	e018      	b.n	800d176 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	687a      	ldr	r2, [r7, #4]
 800d14a:	6892      	ldr	r2, [r2, #8]
 800d14c:	4610      	mov	r0, r2
 800d14e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d150:	6879      	ldr	r1, [r7, #4]
 800d152:	2005      	movs	r0, #5
 800d154:	f000 fe88 	bl	800de68 <memp_free>
      break;
 800d158:	e00d      	b.n	800d176 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	687a      	ldr	r2, [r7, #4]
 800d160:	6892      	ldr	r2, [r2, #8]
 800d162:	4610      	mov	r0, r2
 800d164:	4798      	blx	r3
      break;
 800d166:	e006      	b.n	800d176 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d168:	4b05      	ldr	r3, [pc, #20]	@ (800d180 <tcpip_thread_handle_msg+0x84>)
 800d16a:	22cf      	movs	r2, #207	@ 0xcf
 800d16c:	4905      	ldr	r1, [pc, #20]	@ (800d184 <tcpip_thread_handle_msg+0x88>)
 800d16e:	4806      	ldr	r0, [pc, #24]	@ (800d188 <tcpip_thread_handle_msg+0x8c>)
 800d170:	f004 fe7e 	bl	8011e70 <iprintf>
      break;
 800d174:	bf00      	nop
  }
}
 800d176:	bf00      	nop
 800d178:	3708      	adds	r7, #8
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
 800d17e:	bf00      	nop
 800d180:	08012e14 	.word	0x08012e14
 800d184:	08012e44 	.word	0x08012e44
 800d188:	08012e64 	.word	0x08012e64

0800d18c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b086      	sub	sp, #24
 800d190:	af00      	add	r7, sp, #0
 800d192:	60f8      	str	r0, [r7, #12]
 800d194:	60b9      	str	r1, [r7, #8]
 800d196:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d198:	481a      	ldr	r0, [pc, #104]	@ (800d204 <tcpip_inpkt+0x78>)
 800d19a:	f004 fcfa 	bl	8011b92 <sys_mbox_valid>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d105      	bne.n	800d1b0 <tcpip_inpkt+0x24>
 800d1a4:	4b18      	ldr	r3, [pc, #96]	@ (800d208 <tcpip_inpkt+0x7c>)
 800d1a6:	22fc      	movs	r2, #252	@ 0xfc
 800d1a8:	4918      	ldr	r1, [pc, #96]	@ (800d20c <tcpip_inpkt+0x80>)
 800d1aa:	4819      	ldr	r0, [pc, #100]	@ (800d210 <tcpip_inpkt+0x84>)
 800d1ac:	f004 fe60 	bl	8011e70 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d1b0:	2006      	movs	r0, #6
 800d1b2:	f000 fde9 	bl	800dd88 <memp_malloc>
 800d1b6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d102      	bne.n	800d1c4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d1be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d1c2:	e01a      	b.n	800d1fa <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	68fa      	ldr	r2, [r7, #12]
 800d1ce:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	68ba      	ldr	r2, [r7, #8]
 800d1d4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d1dc:	6979      	ldr	r1, [r7, #20]
 800d1de:	4809      	ldr	r0, [pc, #36]	@ (800d204 <tcpip_inpkt+0x78>)
 800d1e0:	f004 fc8c 	bl	8011afc <sys_mbox_trypost>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d006      	beq.n	800d1f8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d1ea:	6979      	ldr	r1, [r7, #20]
 800d1ec:	2006      	movs	r0, #6
 800d1ee:	f000 fe3b 	bl	800de68 <memp_free>
    return ERR_MEM;
 800d1f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d1f6:	e000      	b.n	800d1fa <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d1f8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3718      	adds	r7, #24
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
 800d202:	bf00      	nop
 800d204:	2406a110 	.word	0x2406a110
 800d208:	08012e14 	.word	0x08012e14
 800d20c:	08012e8c 	.word	0x08012e8c
 800d210:	08012e64 	.word	0x08012e64

0800d214 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d224:	f003 0318 	and.w	r3, r3, #24
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d006      	beq.n	800d23a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d22c:	4a08      	ldr	r2, [pc, #32]	@ (800d250 <tcpip_input+0x3c>)
 800d22e:	6839      	ldr	r1, [r7, #0]
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f7ff ffab 	bl	800d18c <tcpip_inpkt>
 800d236:	4603      	mov	r3, r0
 800d238:	e005      	b.n	800d246 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d23a:	4a06      	ldr	r2, [pc, #24]	@ (800d254 <tcpip_input+0x40>)
 800d23c:	6839      	ldr	r1, [r7, #0]
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f7ff ffa4 	bl	800d18c <tcpip_inpkt>
 800d244:	4603      	mov	r3, r0
}
 800d246:	4618      	mov	r0, r3
 800d248:	3708      	adds	r7, #8
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}
 800d24e:	bf00      	nop
 800d250:	0801191d 	.word	0x0801191d
 800d254:	08010839 	.word	0x08010839

0800d258 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b084      	sub	sp, #16
 800d25c:	af02      	add	r7, sp, #8
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d262:	f000 f914 	bl	800d48e <lwip_init>

  tcpip_init_done = initfunc;
 800d266:	4a17      	ldr	r2, [pc, #92]	@ (800d2c4 <tcpip_init+0x6c>)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800d26c:	4a16      	ldr	r2, [pc, #88]	@ (800d2c8 <tcpip_init+0x70>)
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d272:	2106      	movs	r1, #6
 800d274:	4815      	ldr	r0, [pc, #84]	@ (800d2cc <tcpip_init+0x74>)
 800d276:	f004 fc27 	bl	8011ac8 <sys_mbox_new>
 800d27a:	4603      	mov	r3, r0
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d006      	beq.n	800d28e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d280:	4b13      	ldr	r3, [pc, #76]	@ (800d2d0 <tcpip_init+0x78>)
 800d282:	f240 2261 	movw	r2, #609	@ 0x261
 800d286:	4913      	ldr	r1, [pc, #76]	@ (800d2d4 <tcpip_init+0x7c>)
 800d288:	4813      	ldr	r0, [pc, #76]	@ (800d2d8 <tcpip_init+0x80>)
 800d28a:	f004 fdf1 	bl	8011e70 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d28e:	4813      	ldr	r0, [pc, #76]	@ (800d2dc <tcpip_init+0x84>)
 800d290:	f004 fc9c 	bl	8011bcc <sys_mutex_new>
 800d294:	4603      	mov	r3, r0
 800d296:	2b00      	cmp	r3, #0
 800d298:	d006      	beq.n	800d2a8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d29a:	4b0d      	ldr	r3, [pc, #52]	@ (800d2d0 <tcpip_init+0x78>)
 800d29c:	f240 2265 	movw	r2, #613	@ 0x265
 800d2a0:	490f      	ldr	r1, [pc, #60]	@ (800d2e0 <tcpip_init+0x88>)
 800d2a2:	480d      	ldr	r0, [pc, #52]	@ (800d2d8 <tcpip_init+0x80>)
 800d2a4:	f004 fde4 	bl	8011e70 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d2a8:	2318      	movs	r3, #24
 800d2aa:	9300      	str	r3, [sp, #0]
 800d2ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	490c      	ldr	r1, [pc, #48]	@ (800d2e4 <tcpip_init+0x8c>)
 800d2b4:	480c      	ldr	r0, [pc, #48]	@ (800d2e8 <tcpip_init+0x90>)
 800d2b6:	f004 fcbb 	bl	8011c30 <sys_thread_new>
}
 800d2ba:	bf00      	nop
 800d2bc:	3708      	adds	r7, #8
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	2406a108 	.word	0x2406a108
 800d2c8:	2406a10c 	.word	0x2406a10c
 800d2cc:	2406a110 	.word	0x2406a110
 800d2d0:	08012e14 	.word	0x08012e14
 800d2d4:	08012e9c 	.word	0x08012e9c
 800d2d8:	08012e64 	.word	0x08012e64
 800d2dc:	2406a114 	.word	0x2406a114
 800d2e0:	08012ec0 	.word	0x08012ec0
 800d2e4:	0800d095 	.word	0x0800d095
 800d2e8:	08012ee4 	.word	0x08012ee4

0800d2ec <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b083      	sub	sp, #12
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d2f6:	88fb      	ldrh	r3, [r7, #6]
 800d2f8:	021b      	lsls	r3, r3, #8
 800d2fa:	b21a      	sxth	r2, r3
 800d2fc:	88fb      	ldrh	r3, [r7, #6]
 800d2fe:	0a1b      	lsrs	r3, r3, #8
 800d300:	b29b      	uxth	r3, r3
 800d302:	b21b      	sxth	r3, r3
 800d304:	4313      	orrs	r3, r2
 800d306:	b21b      	sxth	r3, r3
 800d308:	b29b      	uxth	r3, r3
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	370c      	adds	r7, #12
 800d30e:	46bd      	mov	sp, r7
 800d310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d314:	4770      	bx	lr

0800d316 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800d316:	b480      	push	{r7}
 800d318:	b089      	sub	sp, #36	@ 0x24
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	6078      	str	r0, [r7, #4]
 800d31e:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800d324:	2300      	movs	r3, #0
 800d326:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800d328:	2300      	movs	r3, #0
 800d32a:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800d32c:	69fb      	ldr	r3, [r7, #28]
 800d32e:	f003 0301 	and.w	r3, r3, #1
 800d332:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d00d      	beq.n	800d356 <lwip_standard_chksum+0x40>
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	dd0a      	ble.n	800d356 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800d340:	69fa      	ldr	r2, [r7, #28]
 800d342:	1c53      	adds	r3, r2, #1
 800d344:	61fb      	str	r3, [r7, #28]
 800d346:	f107 030e 	add.w	r3, r7, #14
 800d34a:	3301      	adds	r3, #1
 800d34c:	7812      	ldrb	r2, [r2, #0]
 800d34e:	701a      	strb	r2, [r3, #0]
    len--;
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	3b01      	subs	r3, #1
 800d354:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800d356:	69fb      	ldr	r3, [r7, #28]
 800d358:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800d35a:	e00a      	b.n	800d372 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800d35c:	69bb      	ldr	r3, [r7, #24]
 800d35e:	1c9a      	adds	r2, r3, #2
 800d360:	61ba      	str	r2, [r7, #24]
 800d362:	881b      	ldrh	r3, [r3, #0]
 800d364:	461a      	mov	r2, r3
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	4413      	add	r3, r2
 800d36a:	617b      	str	r3, [r7, #20]
    len -= 2;
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	3b02      	subs	r3, #2
 800d370:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	2b01      	cmp	r3, #1
 800d376:	dcf1      	bgt.n	800d35c <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	dd04      	ble.n	800d388 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800d37e:	f107 030e 	add.w	r3, r7, #14
 800d382:	69ba      	ldr	r2, [r7, #24]
 800d384:	7812      	ldrb	r2, [r2, #0]
 800d386:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800d388:	89fb      	ldrh	r3, [r7, #14]
 800d38a:	461a      	mov	r2, r3
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	4413      	add	r3, r2
 800d390:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	0c1a      	lsrs	r2, r3, #16
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	b29b      	uxth	r3, r3
 800d39a:	4413      	add	r3, r2
 800d39c:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	0c1a      	lsrs	r2, r3, #16
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	4413      	add	r3, r2
 800d3a8:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d007      	beq.n	800d3c0 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	021b      	lsls	r3, r3, #8
 800d3b4:	b29a      	uxth	r2, r3
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	0a1b      	lsrs	r3, r3, #8
 800d3ba:	b2db      	uxtb	r3, r3
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	b29b      	uxth	r3, r3
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3724      	adds	r7, #36	@ 0x24
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr

0800d3d0 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b082      	sub	sp, #8
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	460b      	mov	r3, r1
 800d3da:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800d3dc:	887b      	ldrh	r3, [r7, #2]
 800d3de:	4619      	mov	r1, r3
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f7ff ff98 	bl	800d316 <lwip_standard_chksum>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	43db      	mvns	r3, r3
 800d3ea:	b29b      	uxth	r3, r3
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3708      	adds	r7, #8
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b086      	sub	sp, #24
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800d400:	2300      	movs	r3, #0
 800d402:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	613b      	str	r3, [r7, #16]
 800d408:	e02b      	b.n	800d462 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	685a      	ldr	r2, [r3, #4]
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	895b      	ldrh	r3, [r3, #10]
 800d412:	4619      	mov	r1, r3
 800d414:	4610      	mov	r0, r2
 800d416:	f7ff ff7e 	bl	800d316 <lwip_standard_chksum>
 800d41a:	4603      	mov	r3, r0
 800d41c:	461a      	mov	r2, r3
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	4413      	add	r3, r2
 800d422:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	0c1a      	lsrs	r2, r3, #16
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	b29b      	uxth	r3, r3
 800d42c:	4413      	add	r3, r2
 800d42e:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	895b      	ldrh	r3, [r3, #10]
 800d434:	f003 0301 	and.w	r3, r3, #1
 800d438:	b29b      	uxth	r3, r3
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d00e      	beq.n	800d45c <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2b00      	cmp	r3, #0
 800d442:	bf0c      	ite	eq
 800d444:	2301      	moveq	r3, #1
 800d446:	2300      	movne	r3, #0
 800d448:	b2db      	uxtb	r3, r3
 800d44a:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	021b      	lsls	r3, r3, #8
 800d450:	b29a      	uxth	r2, r3
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	0a1b      	lsrs	r3, r3, #8
 800d456:	b2db      	uxtb	r3, r3
 800d458:	4313      	orrs	r3, r2
 800d45a:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	613b      	str	r3, [r7, #16]
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d1d0      	bne.n	800d40a <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d007      	beq.n	800d47e <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	021b      	lsls	r3, r3, #8
 800d472:	b29a      	uxth	r2, r3
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	0a1b      	lsrs	r3, r3, #8
 800d478:	b2db      	uxtb	r3, r3
 800d47a:	4313      	orrs	r3, r2
 800d47c:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	b29b      	uxth	r3, r3
 800d482:	43db      	mvns	r3, r3
 800d484:	b29b      	uxth	r3, r3
}
 800d486:	4618      	mov	r0, r3
 800d488:	3718      	adds	r7, #24
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}

0800d48e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d48e:	b580      	push	{r7, lr}
 800d490:	b082      	sub	sp, #8
 800d492:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d494:	2300      	movs	r3, #0
 800d496:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d498:	f004 fb8c 	bl	8011bb4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d49c:	f000 f8d2 	bl	800d644 <mem_init>
  memp_init();
 800d4a0:	f000 fc0c 	bl	800dcbc <memp_init>
  pbuf_init();
  netif_init();
 800d4a4:	f000 fd0a 	bl	800debc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d4a8:	f001 fe72 	bl	800f190 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d4ac:	f001 fdb6 	bl	800f01c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d4b0:	bf00      	nop
 800d4b2:	3708      	adds	r7, #8
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}

0800d4b8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b083      	sub	sp, #12
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	4603      	mov	r3, r0
 800d4c0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d4c2:	4b05      	ldr	r3, [pc, #20]	@ (800d4d8 <ptr_to_mem+0x20>)
 800d4c4:	681a      	ldr	r2, [r3, #0]
 800d4c6:	88fb      	ldrh	r3, [r7, #6]
 800d4c8:	4413      	add	r3, r2
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	370c      	adds	r7, #12
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr
 800d4d6:	bf00      	nop
 800d4d8:	2406a130 	.word	0x2406a130

0800d4dc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b083      	sub	sp, #12
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d4e4:	4b05      	ldr	r3, [pc, #20]	@ (800d4fc <mem_to_ptr+0x20>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	1ad3      	subs	r3, r2, r3
 800d4ec:	b29b      	uxth	r3, r3
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	370c      	adds	r7, #12
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f8:	4770      	bx	lr
 800d4fa:	bf00      	nop
 800d4fc:	2406a130 	.word	0x2406a130

0800d500 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d500:	b590      	push	{r4, r7, lr}
 800d502:	b085      	sub	sp, #20
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d508:	4b45      	ldr	r3, [pc, #276]	@ (800d620 <plug_holes+0x120>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	429a      	cmp	r2, r3
 800d510:	d206      	bcs.n	800d520 <plug_holes+0x20>
 800d512:	4b44      	ldr	r3, [pc, #272]	@ (800d624 <plug_holes+0x124>)
 800d514:	f240 12df 	movw	r2, #479	@ 0x1df
 800d518:	4943      	ldr	r1, [pc, #268]	@ (800d628 <plug_holes+0x128>)
 800d51a:	4844      	ldr	r0, [pc, #272]	@ (800d62c <plug_holes+0x12c>)
 800d51c:	f004 fca8 	bl	8011e70 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d520:	4b43      	ldr	r3, [pc, #268]	@ (800d630 <plug_holes+0x130>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	429a      	cmp	r2, r3
 800d528:	d306      	bcc.n	800d538 <plug_holes+0x38>
 800d52a:	4b3e      	ldr	r3, [pc, #248]	@ (800d624 <plug_holes+0x124>)
 800d52c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800d530:	4940      	ldr	r1, [pc, #256]	@ (800d634 <plug_holes+0x134>)
 800d532:	483e      	ldr	r0, [pc, #248]	@ (800d62c <plug_holes+0x12c>)
 800d534:	f004 fc9c 	bl	8011e70 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	791b      	ldrb	r3, [r3, #4]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d006      	beq.n	800d54e <plug_holes+0x4e>
 800d540:	4b38      	ldr	r3, [pc, #224]	@ (800d624 <plug_holes+0x124>)
 800d542:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800d546:	493c      	ldr	r1, [pc, #240]	@ (800d638 <plug_holes+0x138>)
 800d548:	4838      	ldr	r0, [pc, #224]	@ (800d62c <plug_holes+0x12c>)
 800d54a:	f004 fc91 	bl	8011e70 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	881b      	ldrh	r3, [r3, #0]
 800d552:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d556:	d906      	bls.n	800d566 <plug_holes+0x66>
 800d558:	4b32      	ldr	r3, [pc, #200]	@ (800d624 <plug_holes+0x124>)
 800d55a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800d55e:	4937      	ldr	r1, [pc, #220]	@ (800d63c <plug_holes+0x13c>)
 800d560:	4832      	ldr	r0, [pc, #200]	@ (800d62c <plug_holes+0x12c>)
 800d562:	f004 fc85 	bl	8011e70 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	881b      	ldrh	r3, [r3, #0]
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7ff ffa4 	bl	800d4b8 <ptr_to_mem>
 800d570:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d572:	687a      	ldr	r2, [r7, #4]
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	429a      	cmp	r2, r3
 800d578:	d024      	beq.n	800d5c4 <plug_holes+0xc4>
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	791b      	ldrb	r3, [r3, #4]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d120      	bne.n	800d5c4 <plug_holes+0xc4>
 800d582:	4b2b      	ldr	r3, [pc, #172]	@ (800d630 <plug_holes+0x130>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	68fa      	ldr	r2, [r7, #12]
 800d588:	429a      	cmp	r2, r3
 800d58a:	d01b      	beq.n	800d5c4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d58c:	4b2c      	ldr	r3, [pc, #176]	@ (800d640 <plug_holes+0x140>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	68fa      	ldr	r2, [r7, #12]
 800d592:	429a      	cmp	r2, r3
 800d594:	d102      	bne.n	800d59c <plug_holes+0x9c>
      lfree = mem;
 800d596:	4a2a      	ldr	r2, [pc, #168]	@ (800d640 <plug_holes+0x140>)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	881a      	ldrh	r2, [r3, #0]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	881b      	ldrh	r3, [r3, #0]
 800d5a8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d5ac:	d00a      	beq.n	800d5c4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	881b      	ldrh	r3, [r3, #0]
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f7ff ff80 	bl	800d4b8 <ptr_to_mem>
 800d5b8:	4604      	mov	r4, r0
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f7ff ff8e 	bl	800d4dc <mem_to_ptr>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	885b      	ldrh	r3, [r3, #2]
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f7ff ff75 	bl	800d4b8 <ptr_to_mem>
 800d5ce:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d5d0:	68ba      	ldr	r2, [r7, #8]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d01f      	beq.n	800d618 <plug_holes+0x118>
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	791b      	ldrb	r3, [r3, #4]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d11b      	bne.n	800d618 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d5e0:	4b17      	ldr	r3, [pc, #92]	@ (800d640 <plug_holes+0x140>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d102      	bne.n	800d5f0 <plug_holes+0xf0>
      lfree = pmem;
 800d5ea:	4a15      	ldr	r2, [pc, #84]	@ (800d640 <plug_holes+0x140>)
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	881a      	ldrh	r2, [r3, #0]
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	881b      	ldrh	r3, [r3, #0]
 800d5fc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d600:	d00a      	beq.n	800d618 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	881b      	ldrh	r3, [r3, #0]
 800d606:	4618      	mov	r0, r3
 800d608:	f7ff ff56 	bl	800d4b8 <ptr_to_mem>
 800d60c:	4604      	mov	r4, r0
 800d60e:	68b8      	ldr	r0, [r7, #8]
 800d610:	f7ff ff64 	bl	800d4dc <mem_to_ptr>
 800d614:	4603      	mov	r3, r0
 800d616:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d618:	bf00      	nop
 800d61a:	3714      	adds	r7, #20
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd90      	pop	{r4, r7, pc}
 800d620:	2406a130 	.word	0x2406a130
 800d624:	08012ef4 	.word	0x08012ef4
 800d628:	08012f24 	.word	0x08012f24
 800d62c:	08012f3c 	.word	0x08012f3c
 800d630:	2406a134 	.word	0x2406a134
 800d634:	08012f64 	.word	0x08012f64
 800d638:	08012f80 	.word	0x08012f80
 800d63c:	08012f9c 	.word	0x08012f9c
 800d640:	2406a13c 	.word	0x2406a13c

0800d644 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d64a:	4b1d      	ldr	r3, [pc, #116]	@ (800d6c0 <mem_init+0x7c>)
 800d64c:	4a1d      	ldr	r2, [pc, #116]	@ (800d6c4 <mem_init+0x80>)
 800d64e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d650:	4b1b      	ldr	r3, [pc, #108]	@ (800d6c0 <mem_init+0x7c>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800d65c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2200      	movs	r2, #0
 800d662:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2200      	movs	r2, #0
 800d668:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d66a:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800d66e:	f7ff ff23 	bl	800d4b8 <ptr_to_mem>
 800d672:	4603      	mov	r3, r0
 800d674:	4a14      	ldr	r2, [pc, #80]	@ (800d6c8 <mem_init+0x84>)
 800d676:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d678:	4b13      	ldr	r3, [pc, #76]	@ (800d6c8 <mem_init+0x84>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	2201      	movs	r2, #1
 800d67e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d680:	4b11      	ldr	r3, [pc, #68]	@ (800d6c8 <mem_init+0x84>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800d688:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d68a:	4b0f      	ldr	r3, [pc, #60]	@ (800d6c8 <mem_init+0x84>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800d692:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d694:	4b0a      	ldr	r3, [pc, #40]	@ (800d6c0 <mem_init+0x7c>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	4a0c      	ldr	r2, [pc, #48]	@ (800d6cc <mem_init+0x88>)
 800d69a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d69c:	480c      	ldr	r0, [pc, #48]	@ (800d6d0 <mem_init+0x8c>)
 800d69e:	f004 fa95 	bl	8011bcc <sys_mutex_new>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d006      	beq.n	800d6b6 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d6a8:	4b0a      	ldr	r3, [pc, #40]	@ (800d6d4 <mem_init+0x90>)
 800d6aa:	f240 221f 	movw	r2, #543	@ 0x21f
 800d6ae:	490a      	ldr	r1, [pc, #40]	@ (800d6d8 <mem_init+0x94>)
 800d6b0:	480a      	ldr	r0, [pc, #40]	@ (800d6dc <mem_init+0x98>)
 800d6b2:	f004 fbdd 	bl	8011e70 <iprintf>
  }
}
 800d6b6:	bf00      	nop
 800d6b8:	3708      	adds	r7, #8
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
 800d6be:	bf00      	nop
 800d6c0:	2406a130 	.word	0x2406a130
 800d6c4:	30002000 	.word	0x30002000
 800d6c8:	2406a134 	.word	0x2406a134
 800d6cc:	2406a13c 	.word	0x2406a13c
 800d6d0:	2406a138 	.word	0x2406a138
 800d6d4:	08012ef4 	.word	0x08012ef4
 800d6d8:	08012fc8 	.word	0x08012fc8
 800d6dc:	08012f3c 	.word	0x08012f3c

0800d6e0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b086      	sub	sp, #24
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f7ff fef7 	bl	800d4dc <mem_to_ptr>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	881b      	ldrh	r3, [r3, #0]
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f7ff fede 	bl	800d4b8 <ptr_to_mem>
 800d6fc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	885b      	ldrh	r3, [r3, #2]
 800d702:	4618      	mov	r0, r3
 800d704:	f7ff fed8 	bl	800d4b8 <ptr_to_mem>
 800d708:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	881b      	ldrh	r3, [r3, #0]
 800d70e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d712:	d818      	bhi.n	800d746 <mem_link_valid+0x66>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	885b      	ldrh	r3, [r3, #2]
 800d718:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d71c:	d813      	bhi.n	800d746 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d722:	8afa      	ldrh	r2, [r7, #22]
 800d724:	429a      	cmp	r2, r3
 800d726:	d004      	beq.n	800d732 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	881b      	ldrh	r3, [r3, #0]
 800d72c:	8afa      	ldrh	r2, [r7, #22]
 800d72e:	429a      	cmp	r2, r3
 800d730:	d109      	bne.n	800d746 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d732:	4b08      	ldr	r3, [pc, #32]	@ (800d754 <mem_link_valid+0x74>)
 800d734:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d736:	693a      	ldr	r2, [r7, #16]
 800d738:	429a      	cmp	r2, r3
 800d73a:	d006      	beq.n	800d74a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	885b      	ldrh	r3, [r3, #2]
 800d740:	8afa      	ldrh	r2, [r7, #22]
 800d742:	429a      	cmp	r2, r3
 800d744:	d001      	beq.n	800d74a <mem_link_valid+0x6a>
    return 0;
 800d746:	2300      	movs	r3, #0
 800d748:	e000      	b.n	800d74c <mem_link_valid+0x6c>
  }
  return 1;
 800d74a:	2301      	movs	r3, #1
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3718      	adds	r7, #24
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}
 800d754:	2406a134 	.word	0x2406a134

0800d758 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d058      	beq.n	800d818 <mem_free+0xc0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f003 0303 	and.w	r3, r3, #3
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d007      	beq.n	800d780 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d770:	4b2b      	ldr	r3, [pc, #172]	@ (800d820 <mem_free+0xc8>)
 800d772:	f240 2273 	movw	r2, #627	@ 0x273
 800d776:	492b      	ldr	r1, [pc, #172]	@ (800d824 <mem_free+0xcc>)
 800d778:	482b      	ldr	r0, [pc, #172]	@ (800d828 <mem_free+0xd0>)
 800d77a:	f004 fb79 	bl	8011e70 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d77e:	e04c      	b.n	800d81a <mem_free+0xc2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	3b08      	subs	r3, #8
 800d784:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d786:	4b29      	ldr	r3, [pc, #164]	@ (800d82c <mem_free+0xd4>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	68fa      	ldr	r2, [r7, #12]
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d306      	bcc.n	800d79e <mem_free+0x46>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f103 020c 	add.w	r2, r3, #12
 800d796:	4b26      	ldr	r3, [pc, #152]	@ (800d830 <mem_free+0xd8>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d907      	bls.n	800d7ae <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d79e:	4b20      	ldr	r3, [pc, #128]	@ (800d820 <mem_free+0xc8>)
 800d7a0:	f240 227f 	movw	r2, #639	@ 0x27f
 800d7a4:	4923      	ldr	r1, [pc, #140]	@ (800d834 <mem_free+0xdc>)
 800d7a6:	4820      	ldr	r0, [pc, #128]	@ (800d828 <mem_free+0xd0>)
 800d7a8:	f004 fb62 	bl	8011e70 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d7ac:	e035      	b.n	800d81a <mem_free+0xc2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d7ae:	4822      	ldr	r0, [pc, #136]	@ (800d838 <mem_free+0xe0>)
 800d7b0:	f004 fa22 	bl	8011bf8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	791b      	ldrb	r3, [r3, #4]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d10a      	bne.n	800d7d2 <mem_free+0x7a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d7bc:	4b18      	ldr	r3, [pc, #96]	@ (800d820 <mem_free+0xc8>)
 800d7be:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800d7c2:	491e      	ldr	r1, [pc, #120]	@ (800d83c <mem_free+0xe4>)
 800d7c4:	4818      	ldr	r0, [pc, #96]	@ (800d828 <mem_free+0xd0>)
 800d7c6:	f004 fb53 	bl	8011e70 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d7ca:	481b      	ldr	r0, [pc, #108]	@ (800d838 <mem_free+0xe0>)
 800d7cc:	f004 fa23 	bl	8011c16 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d7d0:	e023      	b.n	800d81a <mem_free+0xc2>
  }

  if (!mem_link_valid(mem)) {
 800d7d2:	68f8      	ldr	r0, [r7, #12]
 800d7d4:	f7ff ff84 	bl	800d6e0 <mem_link_valid>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d10a      	bne.n	800d7f4 <mem_free+0x9c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d7de:	4b10      	ldr	r3, [pc, #64]	@ (800d820 <mem_free+0xc8>)
 800d7e0:	f240 2295 	movw	r2, #661	@ 0x295
 800d7e4:	4916      	ldr	r1, [pc, #88]	@ (800d840 <mem_free+0xe8>)
 800d7e6:	4810      	ldr	r0, [pc, #64]	@ (800d828 <mem_free+0xd0>)
 800d7e8:	f004 fb42 	bl	8011e70 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d7ec:	4812      	ldr	r0, [pc, #72]	@ (800d838 <mem_free+0xe0>)
 800d7ee:	f004 fa12 	bl	8011c16 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d7f2:	e012      	b.n	800d81a <mem_free+0xc2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d7fa:	4b12      	ldr	r3, [pc, #72]	@ (800d844 <mem_free+0xec>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	68fa      	ldr	r2, [r7, #12]
 800d800:	429a      	cmp	r2, r3
 800d802:	d202      	bcs.n	800d80a <mem_free+0xb2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d804:	4a0f      	ldr	r2, [pc, #60]	@ (800d844 <mem_free+0xec>)
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d80a:	68f8      	ldr	r0, [r7, #12]
 800d80c:	f7ff fe78 	bl	800d500 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d810:	4809      	ldr	r0, [pc, #36]	@ (800d838 <mem_free+0xe0>)
 800d812:	f004 fa00 	bl	8011c16 <sys_mutex_unlock>
 800d816:	e000      	b.n	800d81a <mem_free+0xc2>
    return;
 800d818:	bf00      	nop
}
 800d81a:	3710      	adds	r7, #16
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	08012ef4 	.word	0x08012ef4
 800d824:	08012fe4 	.word	0x08012fe4
 800d828:	08012f3c 	.word	0x08012f3c
 800d82c:	2406a130 	.word	0x2406a130
 800d830:	2406a134 	.word	0x2406a134
 800d834:	08013008 	.word	0x08013008
 800d838:	2406a138 	.word	0x2406a138
 800d83c:	08013024 	.word	0x08013024
 800d840:	0801304c 	.word	0x0801304c
 800d844:	2406a13c 	.word	0x2406a13c

0800d848 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b088      	sub	sp, #32
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	460b      	mov	r3, r1
 800d852:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d854:	887b      	ldrh	r3, [r7, #2]
 800d856:	3303      	adds	r3, #3
 800d858:	b29b      	uxth	r3, r3
 800d85a:	f023 0303 	bic.w	r3, r3, #3
 800d85e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d860:	8bfb      	ldrh	r3, [r7, #30]
 800d862:	2b0b      	cmp	r3, #11
 800d864:	d801      	bhi.n	800d86a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d866:	230c      	movs	r3, #12
 800d868:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d86a:	8bfb      	ldrh	r3, [r7, #30]
 800d86c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d870:	d803      	bhi.n	800d87a <mem_trim+0x32>
 800d872:	8bfa      	ldrh	r2, [r7, #30]
 800d874:	887b      	ldrh	r3, [r7, #2]
 800d876:	429a      	cmp	r2, r3
 800d878:	d201      	bcs.n	800d87e <mem_trim+0x36>
    return NULL;
 800d87a:	2300      	movs	r3, #0
 800d87c:	e0d2      	b.n	800da24 <mem_trim+0x1dc>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d87e:	4b6b      	ldr	r3, [pc, #428]	@ (800da2c <mem_trim+0x1e4>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	429a      	cmp	r2, r3
 800d886:	d304      	bcc.n	800d892 <mem_trim+0x4a>
 800d888:	4b69      	ldr	r3, [pc, #420]	@ (800da30 <mem_trim+0x1e8>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	687a      	ldr	r2, [r7, #4]
 800d88e:	429a      	cmp	r2, r3
 800d890:	d306      	bcc.n	800d8a0 <mem_trim+0x58>
 800d892:	4b68      	ldr	r3, [pc, #416]	@ (800da34 <mem_trim+0x1ec>)
 800d894:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800d898:	4967      	ldr	r1, [pc, #412]	@ (800da38 <mem_trim+0x1f0>)
 800d89a:	4868      	ldr	r0, [pc, #416]	@ (800da3c <mem_trim+0x1f4>)
 800d89c:	f004 fae8 	bl	8011e70 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d8a0:	4b62      	ldr	r3, [pc, #392]	@ (800da2c <mem_trim+0x1e4>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	687a      	ldr	r2, [r7, #4]
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d304      	bcc.n	800d8b4 <mem_trim+0x6c>
 800d8aa:	4b61      	ldr	r3, [pc, #388]	@ (800da30 <mem_trim+0x1e8>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	687a      	ldr	r2, [r7, #4]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d301      	bcc.n	800d8b8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	e0b5      	b.n	800da24 <mem_trim+0x1dc>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	3b08      	subs	r3, #8
 800d8bc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d8be:	69b8      	ldr	r0, [r7, #24]
 800d8c0:	f7ff fe0c 	bl	800d4dc <mem_to_ptr>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d8c8:	69bb      	ldr	r3, [r7, #24]
 800d8ca:	881a      	ldrh	r2, [r3, #0]
 800d8cc:	8afb      	ldrh	r3, [r7, #22]
 800d8ce:	1ad3      	subs	r3, r2, r3
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	3b08      	subs	r3, #8
 800d8d4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d8d6:	8bfa      	ldrh	r2, [r7, #30]
 800d8d8:	8abb      	ldrh	r3, [r7, #20]
 800d8da:	429a      	cmp	r2, r3
 800d8dc:	d906      	bls.n	800d8ec <mem_trim+0xa4>
 800d8de:	4b55      	ldr	r3, [pc, #340]	@ (800da34 <mem_trim+0x1ec>)
 800d8e0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800d8e4:	4956      	ldr	r1, [pc, #344]	@ (800da40 <mem_trim+0x1f8>)
 800d8e6:	4855      	ldr	r0, [pc, #340]	@ (800da3c <mem_trim+0x1f4>)
 800d8e8:	f004 fac2 	bl	8011e70 <iprintf>
  if (newsize > size) {
 800d8ec:	8bfa      	ldrh	r2, [r7, #30]
 800d8ee:	8abb      	ldrh	r3, [r7, #20]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d901      	bls.n	800d8f8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	e095      	b.n	800da24 <mem_trim+0x1dc>
  }
  if (newsize == size) {
 800d8f8:	8bfa      	ldrh	r2, [r7, #30]
 800d8fa:	8abb      	ldrh	r3, [r7, #20]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d101      	bne.n	800d904 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	e08f      	b.n	800da24 <mem_trim+0x1dc>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d904:	484f      	ldr	r0, [pc, #316]	@ (800da44 <mem_trim+0x1fc>)
 800d906:	f004 f977 	bl	8011bf8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d90a:	69bb      	ldr	r3, [r7, #24]
 800d90c:	881b      	ldrh	r3, [r3, #0]
 800d90e:	4618      	mov	r0, r3
 800d910:	f7ff fdd2 	bl	800d4b8 <ptr_to_mem>
 800d914:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	791b      	ldrb	r3, [r3, #4]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d13f      	bne.n	800d99e <mem_trim+0x156>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	881b      	ldrh	r3, [r3, #0]
 800d922:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d926:	d106      	bne.n	800d936 <mem_trim+0xee>
 800d928:	4b42      	ldr	r3, [pc, #264]	@ (800da34 <mem_trim+0x1ec>)
 800d92a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800d92e:	4946      	ldr	r1, [pc, #280]	@ (800da48 <mem_trim+0x200>)
 800d930:	4842      	ldr	r0, [pc, #264]	@ (800da3c <mem_trim+0x1f4>)
 800d932:	f004 fa9d 	bl	8011e70 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	881b      	ldrh	r3, [r3, #0]
 800d93a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d93c:	8afa      	ldrh	r2, [r7, #22]
 800d93e:	8bfb      	ldrh	r3, [r7, #30]
 800d940:	4413      	add	r3, r2
 800d942:	b29b      	uxth	r3, r3
 800d944:	3308      	adds	r3, #8
 800d946:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d948:	4b40      	ldr	r3, [pc, #256]	@ (800da4c <mem_trim+0x204>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	693a      	ldr	r2, [r7, #16]
 800d94e:	429a      	cmp	r2, r3
 800d950:	d106      	bne.n	800d960 <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 800d952:	89fb      	ldrh	r3, [r7, #14]
 800d954:	4618      	mov	r0, r3
 800d956:	f7ff fdaf 	bl	800d4b8 <ptr_to_mem>
 800d95a:	4603      	mov	r3, r0
 800d95c:	4a3b      	ldr	r2, [pc, #236]	@ (800da4c <mem_trim+0x204>)
 800d95e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d960:	89fb      	ldrh	r3, [r7, #14]
 800d962:	4618      	mov	r0, r3
 800d964:	f7ff fda8 	bl	800d4b8 <ptr_to_mem>
 800d968:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	2200      	movs	r2, #0
 800d96e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	89ba      	ldrh	r2, [r7, #12]
 800d974:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	8afa      	ldrh	r2, [r7, #22]
 800d97a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d97c:	69bb      	ldr	r3, [r7, #24]
 800d97e:	89fa      	ldrh	r2, [r7, #14]
 800d980:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	881b      	ldrh	r3, [r3, #0]
 800d986:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d98a:	d047      	beq.n	800da1c <mem_trim+0x1d4>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	881b      	ldrh	r3, [r3, #0]
 800d990:	4618      	mov	r0, r3
 800d992:	f7ff fd91 	bl	800d4b8 <ptr_to_mem>
 800d996:	4602      	mov	r2, r0
 800d998:	89fb      	ldrh	r3, [r7, #14]
 800d99a:	8053      	strh	r3, [r2, #2]
 800d99c:	e03e      	b.n	800da1c <mem_trim+0x1d4>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d99e:	8bfb      	ldrh	r3, [r7, #30]
 800d9a0:	f103 0214 	add.w	r2, r3, #20
 800d9a4:	8abb      	ldrh	r3, [r7, #20]
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d838      	bhi.n	800da1c <mem_trim+0x1d4>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d9aa:	8afa      	ldrh	r2, [r7, #22]
 800d9ac:	8bfb      	ldrh	r3, [r7, #30]
 800d9ae:	4413      	add	r3, r2
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	3308      	adds	r3, #8
 800d9b4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d9b6:	69bb      	ldr	r3, [r7, #24]
 800d9b8:	881b      	ldrh	r3, [r3, #0]
 800d9ba:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d9be:	d106      	bne.n	800d9ce <mem_trim+0x186>
 800d9c0:	4b1c      	ldr	r3, [pc, #112]	@ (800da34 <mem_trim+0x1ec>)
 800d9c2:	f240 3216 	movw	r2, #790	@ 0x316
 800d9c6:	4920      	ldr	r1, [pc, #128]	@ (800da48 <mem_trim+0x200>)
 800d9c8:	481c      	ldr	r0, [pc, #112]	@ (800da3c <mem_trim+0x1f4>)
 800d9ca:	f004 fa51 	bl	8011e70 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d9ce:	89fb      	ldrh	r3, [r7, #14]
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7ff fd71 	bl	800d4b8 <ptr_to_mem>
 800d9d6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d9d8:	4b1c      	ldr	r3, [pc, #112]	@ (800da4c <mem_trim+0x204>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	693a      	ldr	r2, [r7, #16]
 800d9de:	429a      	cmp	r2, r3
 800d9e0:	d202      	bcs.n	800d9e8 <mem_trim+0x1a0>
      lfree = mem2;
 800d9e2:	4a1a      	ldr	r2, [pc, #104]	@ (800da4c <mem_trim+0x204>)
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d9ee:	69bb      	ldr	r3, [r7, #24]
 800d9f0:	881a      	ldrh	r2, [r3, #0]
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d9f6:	693b      	ldr	r3, [r7, #16]
 800d9f8:	8afa      	ldrh	r2, [r7, #22]
 800d9fa:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d9fc:	69bb      	ldr	r3, [r7, #24]
 800d9fe:	89fa      	ldrh	r2, [r7, #14]
 800da00:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	881b      	ldrh	r3, [r3, #0]
 800da06:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800da0a:	d007      	beq.n	800da1c <mem_trim+0x1d4>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	881b      	ldrh	r3, [r3, #0]
 800da10:	4618      	mov	r0, r3
 800da12:	f7ff fd51 	bl	800d4b8 <ptr_to_mem>
 800da16:	4602      	mov	r2, r0
 800da18:	89fb      	ldrh	r3, [r7, #14]
 800da1a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800da1c:	4809      	ldr	r0, [pc, #36]	@ (800da44 <mem_trim+0x1fc>)
 800da1e:	f004 f8fa 	bl	8011c16 <sys_mutex_unlock>
  return rmem;
 800da22:	687b      	ldr	r3, [r7, #4]
}
 800da24:	4618      	mov	r0, r3
 800da26:	3720      	adds	r7, #32
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}
 800da2c:	2406a130 	.word	0x2406a130
 800da30:	2406a134 	.word	0x2406a134
 800da34:	08012ef4 	.word	0x08012ef4
 800da38:	08013080 	.word	0x08013080
 800da3c:	08012f3c 	.word	0x08012f3c
 800da40:	08013098 	.word	0x08013098
 800da44:	2406a138 	.word	0x2406a138
 800da48:	080130b8 	.word	0x080130b8
 800da4c:	2406a13c 	.word	0x2406a13c

0800da50 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b088      	sub	sp, #32
 800da54:	af00      	add	r7, sp, #0
 800da56:	4603      	mov	r3, r0
 800da58:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800da5a:	88fb      	ldrh	r3, [r7, #6]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d101      	bne.n	800da64 <mem_malloc+0x14>
    return NULL;
 800da60:	2300      	movs	r3, #0
 800da62:	e0e2      	b.n	800dc2a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800da64:	88fb      	ldrh	r3, [r7, #6]
 800da66:	3303      	adds	r3, #3
 800da68:	b29b      	uxth	r3, r3
 800da6a:	f023 0303 	bic.w	r3, r3, #3
 800da6e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800da70:	8bbb      	ldrh	r3, [r7, #28]
 800da72:	2b0b      	cmp	r3, #11
 800da74:	d801      	bhi.n	800da7a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800da76:	230c      	movs	r3, #12
 800da78:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800da7a:	8bbb      	ldrh	r3, [r7, #28]
 800da7c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800da80:	d803      	bhi.n	800da8a <mem_malloc+0x3a>
 800da82:	8bba      	ldrh	r2, [r7, #28]
 800da84:	88fb      	ldrh	r3, [r7, #6]
 800da86:	429a      	cmp	r2, r3
 800da88:	d201      	bcs.n	800da8e <mem_malloc+0x3e>
    return NULL;
 800da8a:	2300      	movs	r3, #0
 800da8c:	e0cd      	b.n	800dc2a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800da8e:	4869      	ldr	r0, [pc, #420]	@ (800dc34 <mem_malloc+0x1e4>)
 800da90:	f004 f8b2 	bl	8011bf8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800da94:	4b68      	ldr	r3, [pc, #416]	@ (800dc38 <mem_malloc+0x1e8>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	4618      	mov	r0, r3
 800da9a:	f7ff fd1f 	bl	800d4dc <mem_to_ptr>
 800da9e:	4603      	mov	r3, r0
 800daa0:	83fb      	strh	r3, [r7, #30]
 800daa2:	e0b7      	b.n	800dc14 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800daa4:	8bfb      	ldrh	r3, [r7, #30]
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7ff fd06 	bl	800d4b8 <ptr_to_mem>
 800daac:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	791b      	ldrb	r3, [r3, #4]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	f040 80a7 	bne.w	800dc06 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	881b      	ldrh	r3, [r3, #0]
 800dabc:	461a      	mov	r2, r3
 800dabe:	8bfb      	ldrh	r3, [r7, #30]
 800dac0:	1ad3      	subs	r3, r2, r3
 800dac2:	f1a3 0208 	sub.w	r2, r3, #8
 800dac6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800dac8:	429a      	cmp	r2, r3
 800daca:	f0c0 809c 	bcc.w	800dc06 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	881b      	ldrh	r3, [r3, #0]
 800dad2:	461a      	mov	r2, r3
 800dad4:	8bfb      	ldrh	r3, [r7, #30]
 800dad6:	1ad3      	subs	r3, r2, r3
 800dad8:	f1a3 0208 	sub.w	r2, r3, #8
 800dadc:	8bbb      	ldrh	r3, [r7, #28]
 800dade:	3314      	adds	r3, #20
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d333      	bcc.n	800db4c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800dae4:	8bfa      	ldrh	r2, [r7, #30]
 800dae6:	8bbb      	ldrh	r3, [r7, #28]
 800dae8:	4413      	add	r3, r2
 800daea:	b29b      	uxth	r3, r3
 800daec:	3308      	adds	r3, #8
 800daee:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800daf0:	8a7b      	ldrh	r3, [r7, #18]
 800daf2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800daf6:	d106      	bne.n	800db06 <mem_malloc+0xb6>
 800daf8:	4b50      	ldr	r3, [pc, #320]	@ (800dc3c <mem_malloc+0x1ec>)
 800dafa:	f240 3287 	movw	r2, #903	@ 0x387
 800dafe:	4950      	ldr	r1, [pc, #320]	@ (800dc40 <mem_malloc+0x1f0>)
 800db00:	4850      	ldr	r0, [pc, #320]	@ (800dc44 <mem_malloc+0x1f4>)
 800db02:	f004 f9b5 	bl	8011e70 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800db06:	8a7b      	ldrh	r3, [r7, #18]
 800db08:	4618      	mov	r0, r3
 800db0a:	f7ff fcd5 	bl	800d4b8 <ptr_to_mem>
 800db0e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	2200      	movs	r2, #0
 800db14:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	881a      	ldrh	r2, [r3, #0]
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	8bfa      	ldrh	r2, [r7, #30]
 800db22:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	8a7a      	ldrh	r2, [r7, #18]
 800db28:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	2201      	movs	r2, #1
 800db2e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	881b      	ldrh	r3, [r3, #0]
 800db34:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800db38:	d00b      	beq.n	800db52 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	881b      	ldrh	r3, [r3, #0]
 800db3e:	4618      	mov	r0, r3
 800db40:	f7ff fcba 	bl	800d4b8 <ptr_to_mem>
 800db44:	4602      	mov	r2, r0
 800db46:	8a7b      	ldrh	r3, [r7, #18]
 800db48:	8053      	strh	r3, [r2, #2]
 800db4a:	e002      	b.n	800db52 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	2201      	movs	r2, #1
 800db50:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800db52:	4b39      	ldr	r3, [pc, #228]	@ (800dc38 <mem_malloc+0x1e8>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	697a      	ldr	r2, [r7, #20]
 800db58:	429a      	cmp	r2, r3
 800db5a:	d127      	bne.n	800dbac <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800db5c:	4b36      	ldr	r3, [pc, #216]	@ (800dc38 <mem_malloc+0x1e8>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800db62:	e005      	b.n	800db70 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800db64:	69bb      	ldr	r3, [r7, #24]
 800db66:	881b      	ldrh	r3, [r3, #0]
 800db68:	4618      	mov	r0, r3
 800db6a:	f7ff fca5 	bl	800d4b8 <ptr_to_mem>
 800db6e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800db70:	69bb      	ldr	r3, [r7, #24]
 800db72:	791b      	ldrb	r3, [r3, #4]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d004      	beq.n	800db82 <mem_malloc+0x132>
 800db78:	4b33      	ldr	r3, [pc, #204]	@ (800dc48 <mem_malloc+0x1f8>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	69ba      	ldr	r2, [r7, #24]
 800db7e:	429a      	cmp	r2, r3
 800db80:	d1f0      	bne.n	800db64 <mem_malloc+0x114>
          }
          lfree = cur;
 800db82:	4a2d      	ldr	r2, [pc, #180]	@ (800dc38 <mem_malloc+0x1e8>)
 800db84:	69bb      	ldr	r3, [r7, #24]
 800db86:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800db88:	4b2b      	ldr	r3, [pc, #172]	@ (800dc38 <mem_malloc+0x1e8>)
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	4b2e      	ldr	r3, [pc, #184]	@ (800dc48 <mem_malloc+0x1f8>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	429a      	cmp	r2, r3
 800db92:	d00b      	beq.n	800dbac <mem_malloc+0x15c>
 800db94:	4b28      	ldr	r3, [pc, #160]	@ (800dc38 <mem_malloc+0x1e8>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	791b      	ldrb	r3, [r3, #4]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d006      	beq.n	800dbac <mem_malloc+0x15c>
 800db9e:	4b27      	ldr	r3, [pc, #156]	@ (800dc3c <mem_malloc+0x1ec>)
 800dba0:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800dba4:	4929      	ldr	r1, [pc, #164]	@ (800dc4c <mem_malloc+0x1fc>)
 800dba6:	4827      	ldr	r0, [pc, #156]	@ (800dc44 <mem_malloc+0x1f4>)
 800dba8:	f004 f962 	bl	8011e70 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800dbac:	4821      	ldr	r0, [pc, #132]	@ (800dc34 <mem_malloc+0x1e4>)
 800dbae:	f004 f832 	bl	8011c16 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800dbb2:	8bba      	ldrh	r2, [r7, #28]
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	4413      	add	r3, r2
 800dbb8:	3308      	adds	r3, #8
 800dbba:	4a23      	ldr	r2, [pc, #140]	@ (800dc48 <mem_malloc+0x1f8>)
 800dbbc:	6812      	ldr	r2, [r2, #0]
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	d906      	bls.n	800dbd0 <mem_malloc+0x180>
 800dbc2:	4b1e      	ldr	r3, [pc, #120]	@ (800dc3c <mem_malloc+0x1ec>)
 800dbc4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800dbc8:	4921      	ldr	r1, [pc, #132]	@ (800dc50 <mem_malloc+0x200>)
 800dbca:	481e      	ldr	r0, [pc, #120]	@ (800dc44 <mem_malloc+0x1f4>)
 800dbcc:	f004 f950 	bl	8011e70 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	f003 0303 	and.w	r3, r3, #3
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d006      	beq.n	800dbe8 <mem_malloc+0x198>
 800dbda:	4b18      	ldr	r3, [pc, #96]	@ (800dc3c <mem_malloc+0x1ec>)
 800dbdc:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800dbe0:	491c      	ldr	r1, [pc, #112]	@ (800dc54 <mem_malloc+0x204>)
 800dbe2:	4818      	ldr	r0, [pc, #96]	@ (800dc44 <mem_malloc+0x1f4>)
 800dbe4:	f004 f944 	bl	8011e70 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	f003 0303 	and.w	r3, r3, #3
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d006      	beq.n	800dc00 <mem_malloc+0x1b0>
 800dbf2:	4b12      	ldr	r3, [pc, #72]	@ (800dc3c <mem_malloc+0x1ec>)
 800dbf4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800dbf8:	4917      	ldr	r1, [pc, #92]	@ (800dc58 <mem_malloc+0x208>)
 800dbfa:	4812      	ldr	r0, [pc, #72]	@ (800dc44 <mem_malloc+0x1f4>)
 800dbfc:	f004 f938 	bl	8011e70 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	3308      	adds	r3, #8
 800dc04:	e011      	b.n	800dc2a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800dc06:	8bfb      	ldrh	r3, [r7, #30]
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7ff fc55 	bl	800d4b8 <ptr_to_mem>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	881b      	ldrh	r3, [r3, #0]
 800dc12:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800dc14:	8bfa      	ldrh	r2, [r7, #30]
 800dc16:	8bbb      	ldrh	r3, [r7, #28]
 800dc18:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	f4ff af41 	bcc.w	800daa4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800dc22:	4804      	ldr	r0, [pc, #16]	@ (800dc34 <mem_malloc+0x1e4>)
 800dc24:	f003 fff7 	bl	8011c16 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800dc28:	2300      	movs	r3, #0
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3720      	adds	r7, #32
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	2406a138 	.word	0x2406a138
 800dc38:	2406a13c 	.word	0x2406a13c
 800dc3c:	08012ef4 	.word	0x08012ef4
 800dc40:	080130b8 	.word	0x080130b8
 800dc44:	08012f3c 	.word	0x08012f3c
 800dc48:	2406a134 	.word	0x2406a134
 800dc4c:	080130cc 	.word	0x080130cc
 800dc50:	080130e8 	.word	0x080130e8
 800dc54:	08013118 	.word	0x08013118
 800dc58:	08013148 	.word	0x08013148

0800dc5c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	b085      	sub	sp, #20
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	689b      	ldr	r3, [r3, #8]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	3303      	adds	r3, #3
 800dc72:	f023 0303 	bic.w	r3, r3, #3
 800dc76:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800dc78:	2300      	movs	r3, #0
 800dc7a:	60fb      	str	r3, [r7, #12]
 800dc7c:	e011      	b.n	800dca2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	689b      	ldr	r3, [r3, #8]
 800dc82:	681a      	ldr	r2, [r3, #0]
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	689b      	ldr	r3, [r3, #8]
 800dc8c:	68ba      	ldr	r2, [r7, #8]
 800dc8e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	881b      	ldrh	r3, [r3, #0]
 800dc94:	461a      	mov	r2, r3
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	4413      	add	r3, r2
 800dc9a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	3301      	adds	r3, #1
 800dca0:	60fb      	str	r3, [r7, #12]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	885b      	ldrh	r3, [r3, #2]
 800dca6:	461a      	mov	r2, r3
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	dbe7      	blt.n	800dc7e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800dcae:	bf00      	nop
 800dcb0:	bf00      	nop
 800dcb2:	3714      	adds	r7, #20
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcba:	4770      	bx	lr

0800dcbc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b082      	sub	sp, #8
 800dcc0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	80fb      	strh	r3, [r7, #6]
 800dcc6:	e009      	b.n	800dcdc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800dcc8:	88fb      	ldrh	r3, [r7, #6]
 800dcca:	4a08      	ldr	r2, [pc, #32]	@ (800dcec <memp_init+0x30>)
 800dccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7ff ffc3 	bl	800dc5c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800dcd6:	88fb      	ldrh	r3, [r7, #6]
 800dcd8:	3301      	adds	r3, #1
 800dcda:	80fb      	strh	r3, [r7, #6]
 800dcdc:	88fb      	ldrh	r3, [r7, #6]
 800dcde:	2b09      	cmp	r3, #9
 800dce0:	d9f2      	bls.n	800dcc8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800dce2:	bf00      	nop
 800dce4:	bf00      	nop
 800dce6:	3708      	adds	r7, #8
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}
 800dcec:	08014500 	.word	0x08014500

0800dcf0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	689b      	ldr	r3, [r3, #8]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d012      	beq.n	800dd2c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	689b      	ldr	r3, [r3, #8]
 800dd0a:	68fa      	ldr	r2, [r7, #12]
 800dd0c:	6812      	ldr	r2, [r2, #0]
 800dd0e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	f003 0303 	and.w	r3, r3, #3
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d006      	beq.n	800dd28 <do_memp_malloc_pool+0x38>
 800dd1a:	4b07      	ldr	r3, [pc, #28]	@ (800dd38 <do_memp_malloc_pool+0x48>)
 800dd1c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800dd20:	4906      	ldr	r1, [pc, #24]	@ (800dd3c <do_memp_malloc_pool+0x4c>)
 800dd22:	4807      	ldr	r0, [pc, #28]	@ (800dd40 <do_memp_malloc_pool+0x50>)
 800dd24:	f004 f8a4 	bl	8011e70 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	e000      	b.n	800dd2e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800dd2c:	2300      	movs	r3, #0
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3710      	adds	r7, #16
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}
 800dd36:	bf00      	nop
 800dd38:	0801316c 	.word	0x0801316c
 800dd3c:	0801319c 	.word	0x0801319c
 800dd40:	080131c0 	.word	0x080131c0

0800dd44 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d106      	bne.n	800dd60 <memp_malloc_pool+0x1c>
 800dd52:	4b0a      	ldr	r3, [pc, #40]	@ (800dd7c <memp_malloc_pool+0x38>)
 800dd54:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800dd58:	4909      	ldr	r1, [pc, #36]	@ (800dd80 <memp_malloc_pool+0x3c>)
 800dd5a:	480a      	ldr	r0, [pc, #40]	@ (800dd84 <memp_malloc_pool+0x40>)
 800dd5c:	f004 f888 	bl	8011e70 <iprintf>
  if (desc == NULL) {
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d101      	bne.n	800dd6a <memp_malloc_pool+0x26>
    return NULL;
 800dd66:	2300      	movs	r3, #0
 800dd68:	e003      	b.n	800dd72 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f7ff ffc0 	bl	800dcf0 <do_memp_malloc_pool>
 800dd70:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3708      	adds	r7, #8
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
 800dd7a:	bf00      	nop
 800dd7c:	0801316c 	.word	0x0801316c
 800dd80:	080131e8 	.word	0x080131e8
 800dd84:	080131c0 	.word	0x080131c0

0800dd88 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b084      	sub	sp, #16
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	4603      	mov	r3, r0
 800dd90:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800dd92:	79fb      	ldrb	r3, [r7, #7]
 800dd94:	2b09      	cmp	r3, #9
 800dd96:	d908      	bls.n	800ddaa <memp_malloc+0x22>
 800dd98:	4b0a      	ldr	r3, [pc, #40]	@ (800ddc4 <memp_malloc+0x3c>)
 800dd9a:	f240 1257 	movw	r2, #343	@ 0x157
 800dd9e:	490a      	ldr	r1, [pc, #40]	@ (800ddc8 <memp_malloc+0x40>)
 800dda0:	480a      	ldr	r0, [pc, #40]	@ (800ddcc <memp_malloc+0x44>)
 800dda2:	f004 f865 	bl	8011e70 <iprintf>
 800dda6:	2300      	movs	r3, #0
 800dda8:	e008      	b.n	800ddbc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ddaa:	79fb      	ldrb	r3, [r7, #7]
 800ddac:	4a08      	ldr	r2, [pc, #32]	@ (800ddd0 <memp_malloc+0x48>)
 800ddae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7ff ff9c 	bl	800dcf0 <do_memp_malloc_pool>
 800ddb8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ddba:	68fb      	ldr	r3, [r7, #12]
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3710      	adds	r7, #16
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}
 800ddc4:	0801316c 	.word	0x0801316c
 800ddc8:	080131fc 	.word	0x080131fc
 800ddcc:	080131c0 	.word	0x080131c0
 800ddd0:	08014500 	.word	0x08014500

0800ddd4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b084      	sub	sp, #16
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	f003 0303 	and.w	r3, r3, #3
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d006      	beq.n	800ddf6 <do_memp_free_pool+0x22>
 800dde8:	4b0a      	ldr	r3, [pc, #40]	@ (800de14 <do_memp_free_pool+0x40>)
 800ddea:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800ddee:	490a      	ldr	r1, [pc, #40]	@ (800de18 <do_memp_free_pool+0x44>)
 800ddf0:	480a      	ldr	r0, [pc, #40]	@ (800de1c <do_memp_free_pool+0x48>)
 800ddf2:	f004 f83d 	bl	8011e70 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	689b      	ldr	r3, [r3, #8]
 800ddfe:	681a      	ldr	r2, [r3, #0]
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	689b      	ldr	r3, [r3, #8]
 800de08:	68fa      	ldr	r2, [r7, #12]
 800de0a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800de0c:	bf00      	nop
 800de0e:	3710      	adds	r7, #16
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}
 800de14:	0801316c 	.word	0x0801316c
 800de18:	0801321c 	.word	0x0801321c
 800de1c:	080131c0 	.word	0x080131c0

0800de20 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b082      	sub	sp, #8
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d106      	bne.n	800de3e <memp_free_pool+0x1e>
 800de30:	4b0a      	ldr	r3, [pc, #40]	@ (800de5c <memp_free_pool+0x3c>)
 800de32:	f240 1295 	movw	r2, #405	@ 0x195
 800de36:	490a      	ldr	r1, [pc, #40]	@ (800de60 <memp_free_pool+0x40>)
 800de38:	480a      	ldr	r0, [pc, #40]	@ (800de64 <memp_free_pool+0x44>)
 800de3a:	f004 f819 	bl	8011e70 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d007      	beq.n	800de54 <memp_free_pool+0x34>
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d004      	beq.n	800de54 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800de4a:	6839      	ldr	r1, [r7, #0]
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f7ff ffc1 	bl	800ddd4 <do_memp_free_pool>
 800de52:	e000      	b.n	800de56 <memp_free_pool+0x36>
    return;
 800de54:	bf00      	nop
}
 800de56:	3708      	adds	r7, #8
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	0801316c 	.word	0x0801316c
 800de60:	080131e8 	.word	0x080131e8
 800de64:	080131c0 	.word	0x080131c0

0800de68 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b082      	sub	sp, #8
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	4603      	mov	r3, r0
 800de70:	6039      	str	r1, [r7, #0]
 800de72:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800de74:	79fb      	ldrb	r3, [r7, #7]
 800de76:	2b09      	cmp	r3, #9
 800de78:	d907      	bls.n	800de8a <memp_free+0x22>
 800de7a:	4b0c      	ldr	r3, [pc, #48]	@ (800deac <memp_free+0x44>)
 800de7c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800de80:	490b      	ldr	r1, [pc, #44]	@ (800deb0 <memp_free+0x48>)
 800de82:	480c      	ldr	r0, [pc, #48]	@ (800deb4 <memp_free+0x4c>)
 800de84:	f003 fff4 	bl	8011e70 <iprintf>
 800de88:	e00c      	b.n	800dea4 <memp_free+0x3c>

  if (mem == NULL) {
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d008      	beq.n	800dea2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800de90:	79fb      	ldrb	r3, [r7, #7]
 800de92:	4a09      	ldr	r2, [pc, #36]	@ (800deb8 <memp_free+0x50>)
 800de94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de98:	6839      	ldr	r1, [r7, #0]
 800de9a:	4618      	mov	r0, r3
 800de9c:	f7ff ff9a 	bl	800ddd4 <do_memp_free_pool>
 800dea0:	e000      	b.n	800dea4 <memp_free+0x3c>
    return;
 800dea2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800dea4:	3708      	adds	r7, #8
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}
 800deaa:	bf00      	nop
 800deac:	0801316c 	.word	0x0801316c
 800deb0:	0801323c 	.word	0x0801323c
 800deb4:	080131c0 	.word	0x080131c0
 800deb8:	08014500 	.word	0x08014500

0800debc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800debc:	b480      	push	{r7}
 800debe:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800dec0:	bf00      	nop
 800dec2:	46bd      	mov	sp, r7
 800dec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec8:	4770      	bx	lr
	...

0800decc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b086      	sub	sp, #24
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	60f8      	str	r0, [r7, #12]
 800ded4:	60b9      	str	r1, [r7, #8]
 800ded6:	607a      	str	r2, [r7, #4]
 800ded8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d108      	bne.n	800def2 <netif_add+0x26>
 800dee0:	4b57      	ldr	r3, [pc, #348]	@ (800e040 <netif_add+0x174>)
 800dee2:	f240 1227 	movw	r2, #295	@ 0x127
 800dee6:	4957      	ldr	r1, [pc, #348]	@ (800e044 <netif_add+0x178>)
 800dee8:	4857      	ldr	r0, [pc, #348]	@ (800e048 <netif_add+0x17c>)
 800deea:	f003 ffc1 	bl	8011e70 <iprintf>
 800deee:	2300      	movs	r3, #0
 800def0:	e0a2      	b.n	800e038 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800def2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800def4:	2b00      	cmp	r3, #0
 800def6:	d108      	bne.n	800df0a <netif_add+0x3e>
 800def8:	4b51      	ldr	r3, [pc, #324]	@ (800e040 <netif_add+0x174>)
 800defa:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800defe:	4953      	ldr	r1, [pc, #332]	@ (800e04c <netif_add+0x180>)
 800df00:	4851      	ldr	r0, [pc, #324]	@ (800e048 <netif_add+0x17c>)
 800df02:	f003 ffb5 	bl	8011e70 <iprintf>
 800df06:	2300      	movs	r3, #0
 800df08:	e096      	b.n	800e038 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d101      	bne.n	800df14 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800df10:	4b4f      	ldr	r3, [pc, #316]	@ (800e050 <netif_add+0x184>)
 800df12:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d101      	bne.n	800df1e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800df1a:	4b4d      	ldr	r3, [pc, #308]	@ (800e050 <netif_add+0x184>)
 800df1c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d101      	bne.n	800df28 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800df24:	4b4a      	ldr	r3, [pc, #296]	@ (800e050 <netif_add+0x184>)
 800df26:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	2200      	movs	r2, #0
 800df2c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2200      	movs	r2, #0
 800df32:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2200      	movs	r2, #0
 800df38:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	4a45      	ldr	r2, [pc, #276]	@ (800e054 <netif_add+0x188>)
 800df3e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	2200      	movs	r2, #0
 800df44:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	2200      	movs	r2, #0
 800df4a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2200      	movs	r2, #0
 800df52:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	6a3a      	ldr	r2, [r7, #32]
 800df58:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800df5a:	4b3f      	ldr	r3, [pc, #252]	@ (800e058 <netif_add+0x18c>)
 800df5c:	781a      	ldrb	r2, [r3, #0]
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800df68:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	687a      	ldr	r2, [r7, #4]
 800df6e:	68b9      	ldr	r1, [r7, #8]
 800df70:	68f8      	ldr	r0, [r7, #12]
 800df72:	f000 f90f 	bl	800e194 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800df76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df78:	68f8      	ldr	r0, [r7, #12]
 800df7a:	4798      	blx	r3
 800df7c:	4603      	mov	r3, r0
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d001      	beq.n	800df86 <netif_add+0xba>
    return NULL;
 800df82:	2300      	movs	r3, #0
 800df84:	e058      	b.n	800e038 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800df8c:	2bff      	cmp	r3, #255	@ 0xff
 800df8e:	d103      	bne.n	800df98 <netif_add+0xcc>
        netif->num = 0;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	2200      	movs	r2, #0
 800df94:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800df98:	2300      	movs	r3, #0
 800df9a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800df9c:	4b2f      	ldr	r3, [pc, #188]	@ (800e05c <netif_add+0x190>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	617b      	str	r3, [r7, #20]
 800dfa2:	e02b      	b.n	800dffc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800dfa4:	697a      	ldr	r2, [r7, #20]
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d106      	bne.n	800dfba <netif_add+0xee>
 800dfac:	4b24      	ldr	r3, [pc, #144]	@ (800e040 <netif_add+0x174>)
 800dfae:	f240 128b 	movw	r2, #395	@ 0x18b
 800dfb2:	492b      	ldr	r1, [pc, #172]	@ (800e060 <netif_add+0x194>)
 800dfb4:	4824      	ldr	r0, [pc, #144]	@ (800e048 <netif_add+0x17c>)
 800dfb6:	f003 ff5b 	bl	8011e70 <iprintf>
        num_netifs++;
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	2bff      	cmp	r3, #255	@ 0xff
 800dfc4:	dd06      	ble.n	800dfd4 <netif_add+0x108>
 800dfc6:	4b1e      	ldr	r3, [pc, #120]	@ (800e040 <netif_add+0x174>)
 800dfc8:	f240 128d 	movw	r2, #397	@ 0x18d
 800dfcc:	4925      	ldr	r1, [pc, #148]	@ (800e064 <netif_add+0x198>)
 800dfce:	481e      	ldr	r0, [pc, #120]	@ (800e048 <netif_add+0x17c>)
 800dfd0:	f003 ff4e 	bl	8011e70 <iprintf>
        if (netif2->num == netif->num) {
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d108      	bne.n	800dff6 <netif_add+0x12a>
          netif->num++;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dfea:	3301      	adds	r3, #1
 800dfec:	b2da      	uxtb	r2, r3
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800dff4:	e005      	b.n	800e002 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	617b      	str	r3, [r7, #20]
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d1d0      	bne.n	800dfa4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d1be      	bne.n	800df86 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e00e:	2bfe      	cmp	r3, #254	@ 0xfe
 800e010:	d103      	bne.n	800e01a <netif_add+0x14e>
    netif_num = 0;
 800e012:	4b11      	ldr	r3, [pc, #68]	@ (800e058 <netif_add+0x18c>)
 800e014:	2200      	movs	r2, #0
 800e016:	701a      	strb	r2, [r3, #0]
 800e018:	e006      	b.n	800e028 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e020:	3301      	adds	r3, #1
 800e022:	b2da      	uxtb	r2, r3
 800e024:	4b0c      	ldr	r3, [pc, #48]	@ (800e058 <netif_add+0x18c>)
 800e026:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e028:	4b0c      	ldr	r3, [pc, #48]	@ (800e05c <netif_add+0x190>)
 800e02a:	681a      	ldr	r2, [r3, #0]
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e030:	4a0a      	ldr	r2, [pc, #40]	@ (800e05c <netif_add+0x190>)
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e036:	68fb      	ldr	r3, [r7, #12]
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3718      	adds	r7, #24
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}
 800e040:	08013258 	.word	0x08013258
 800e044:	080132ec 	.word	0x080132ec
 800e048:	080132a8 	.word	0x080132a8
 800e04c:	08013308 	.word	0x08013308
 800e050:	08014538 	.word	0x08014538
 800e054:	0800e46f 	.word	0x0800e46f
 800e058:	2406ce50 	.word	0x2406ce50
 800e05c:	2406ce48 	.word	0x2406ce48
 800e060:	0801332c 	.word	0x0801332c
 800e064:	08013340 	.word	0x08013340

0800e068 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b082      	sub	sp, #8
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
 800e070:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e072:	6839      	ldr	r1, [r7, #0]
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f001 fa15 	bl	800f4a4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e07a:	bf00      	nop
 800e07c:	3708      	adds	r7, #8
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
	...

0800e084 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b086      	sub	sp, #24
 800e088:	af00      	add	r7, sp, #0
 800e08a:	60f8      	str	r0, [r7, #12]
 800e08c:	60b9      	str	r1, [r7, #8]
 800e08e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d106      	bne.n	800e0a4 <netif_do_set_ipaddr+0x20>
 800e096:	4b1d      	ldr	r3, [pc, #116]	@ (800e10c <netif_do_set_ipaddr+0x88>)
 800e098:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800e09c:	491c      	ldr	r1, [pc, #112]	@ (800e110 <netif_do_set_ipaddr+0x8c>)
 800e09e:	481d      	ldr	r0, [pc, #116]	@ (800e114 <netif_do_set_ipaddr+0x90>)
 800e0a0:	f003 fee6 	bl	8011e70 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d106      	bne.n	800e0b8 <netif_do_set_ipaddr+0x34>
 800e0aa:	4b18      	ldr	r3, [pc, #96]	@ (800e10c <netif_do_set_ipaddr+0x88>)
 800e0ac:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800e0b0:	4917      	ldr	r1, [pc, #92]	@ (800e110 <netif_do_set_ipaddr+0x8c>)
 800e0b2:	4818      	ldr	r0, [pc, #96]	@ (800e114 <netif_do_set_ipaddr+0x90>)
 800e0b4:	f003 fedc 	bl	8011e70 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	681a      	ldr	r2, [r3, #0]
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	3304      	adds	r3, #4
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d01c      	beq.n	800e100 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	3304      	adds	r3, #4
 800e0d0:	681a      	ldr	r2, [r3, #0]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e0d6:	f107 0314 	add.w	r3, r7, #20
 800e0da:	4619      	mov	r1, r3
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f7ff ffc3 	bl	800e068 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d002      	beq.n	800e0ee <netif_do_set_ipaddr+0x6a>
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	e000      	b.n	800e0f0 <netif_do_set_ipaddr+0x6c>
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	68fa      	ldr	r2, [r7, #12]
 800e0f2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e0f4:	2101      	movs	r1, #1
 800e0f6:	68f8      	ldr	r0, [r7, #12]
 800e0f8:	f000 f8d2 	bl	800e2a0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	e000      	b.n	800e102 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800e100:	2300      	movs	r3, #0
}
 800e102:	4618      	mov	r0, r3
 800e104:	3718      	adds	r7, #24
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}
 800e10a:	bf00      	nop
 800e10c:	08013258 	.word	0x08013258
 800e110:	08013370 	.word	0x08013370
 800e114:	080132a8 	.word	0x080132a8

0800e118 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e118:	b480      	push	{r7}
 800e11a:	b085      	sub	sp, #20
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	60f8      	str	r0, [r7, #12]
 800e120:	60b9      	str	r1, [r7, #8]
 800e122:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	681a      	ldr	r2, [r3, #0]
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	3308      	adds	r3, #8
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	429a      	cmp	r2, r3
 800e130:	d00a      	beq.n	800e148 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d002      	beq.n	800e13e <netif_do_set_netmask+0x26>
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	e000      	b.n	800e140 <netif_do_set_netmask+0x28>
 800e13e:	2300      	movs	r3, #0
 800e140:	68fa      	ldr	r2, [r7, #12]
 800e142:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e144:	2301      	movs	r3, #1
 800e146:	e000      	b.n	800e14a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e148:	2300      	movs	r3, #0
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3714      	adds	r7, #20
 800e14e:	46bd      	mov	sp, r7
 800e150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e154:	4770      	bx	lr

0800e156 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e156:	b480      	push	{r7}
 800e158:	b085      	sub	sp, #20
 800e15a:	af00      	add	r7, sp, #0
 800e15c:	60f8      	str	r0, [r7, #12]
 800e15e:	60b9      	str	r1, [r7, #8]
 800e160:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	681a      	ldr	r2, [r3, #0]
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	330c      	adds	r3, #12
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	429a      	cmp	r2, r3
 800e16e:	d00a      	beq.n	800e186 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d002      	beq.n	800e17c <netif_do_set_gw+0x26>
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	e000      	b.n	800e17e <netif_do_set_gw+0x28>
 800e17c:	2300      	movs	r3, #0
 800e17e:	68fa      	ldr	r2, [r7, #12]
 800e180:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e182:	2301      	movs	r3, #1
 800e184:	e000      	b.n	800e188 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e186:	2300      	movs	r3, #0
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3714      	adds	r7, #20
 800e18c:	46bd      	mov	sp, r7
 800e18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e192:	4770      	bx	lr

0800e194 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b088      	sub	sp, #32
 800e198:	af00      	add	r7, sp, #0
 800e19a:	60f8      	str	r0, [r7, #12]
 800e19c:	60b9      	str	r1, [r7, #8]
 800e19e:	607a      	str	r2, [r7, #4]
 800e1a0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d101      	bne.n	800e1b4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e1b0:	4b1c      	ldr	r3, [pc, #112]	@ (800e224 <netif_set_addr+0x90>)
 800e1b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d101      	bne.n	800e1be <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e1ba:	4b1a      	ldr	r3, [pc, #104]	@ (800e224 <netif_set_addr+0x90>)
 800e1bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d101      	bne.n	800e1c8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e1c4:	4b17      	ldr	r3, [pc, #92]	@ (800e224 <netif_set_addr+0x90>)
 800e1c6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d003      	beq.n	800e1d6 <netif_set_addr+0x42>
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d101      	bne.n	800e1da <netif_set_addr+0x46>
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	e000      	b.n	800e1dc <netif_set_addr+0x48>
 800e1da:	2300      	movs	r3, #0
 800e1dc:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d006      	beq.n	800e1f2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e1e4:	f107 0310 	add.w	r3, r7, #16
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	68b9      	ldr	r1, [r7, #8]
 800e1ec:	68f8      	ldr	r0, [r7, #12]
 800e1ee:	f7ff ff49 	bl	800e084 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e1f2:	69fa      	ldr	r2, [r7, #28]
 800e1f4:	6879      	ldr	r1, [r7, #4]
 800e1f6:	68f8      	ldr	r0, [r7, #12]
 800e1f8:	f7ff ff8e 	bl	800e118 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e1fc:	69ba      	ldr	r2, [r7, #24]
 800e1fe:	6839      	ldr	r1, [r7, #0]
 800e200:	68f8      	ldr	r0, [r7, #12]
 800e202:	f7ff ffa8 	bl	800e156 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d106      	bne.n	800e21a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e20c:	f107 0310 	add.w	r3, r7, #16
 800e210:	461a      	mov	r2, r3
 800e212:	68b9      	ldr	r1, [r7, #8]
 800e214:	68f8      	ldr	r0, [r7, #12]
 800e216:	f7ff ff35 	bl	800e084 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e21a:	bf00      	nop
 800e21c:	3720      	adds	r7, #32
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}
 800e222:	bf00      	nop
 800e224:	08014538 	.word	0x08014538

0800e228 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e228:	b480      	push	{r7}
 800e22a:	b083      	sub	sp, #12
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e230:	4a04      	ldr	r2, [pc, #16]	@ (800e244 <netif_set_default+0x1c>)
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e236:	bf00      	nop
 800e238:	370c      	adds	r7, #12
 800e23a:	46bd      	mov	sp, r7
 800e23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e240:	4770      	bx	lr
 800e242:	bf00      	nop
 800e244:	2406ce4c 	.word	0x2406ce4c

0800e248 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b082      	sub	sp, #8
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d107      	bne.n	800e266 <netif_set_up+0x1e>
 800e256:	4b0f      	ldr	r3, [pc, #60]	@ (800e294 <netif_set_up+0x4c>)
 800e258:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800e25c:	490e      	ldr	r1, [pc, #56]	@ (800e298 <netif_set_up+0x50>)
 800e25e:	480f      	ldr	r0, [pc, #60]	@ (800e29c <netif_set_up+0x54>)
 800e260:	f003 fe06 	bl	8011e70 <iprintf>
 800e264:	e013      	b.n	800e28e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e26c:	f003 0301 	and.w	r3, r3, #1
 800e270:	2b00      	cmp	r3, #0
 800e272:	d10c      	bne.n	800e28e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e27a:	f043 0301 	orr.w	r3, r3, #1
 800e27e:	b2da      	uxtb	r2, r3
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e286:	2103      	movs	r1, #3
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f000 f809 	bl	800e2a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e28e:	3708      	adds	r7, #8
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}
 800e294:	08013258 	.word	0x08013258
 800e298:	080133e0 	.word	0x080133e0
 800e29c:	080132a8 	.word	0x080132a8

0800e2a0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b082      	sub	sp, #8
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	460b      	mov	r3, r1
 800e2aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d106      	bne.n	800e2c0 <netif_issue_reports+0x20>
 800e2b2:	4b18      	ldr	r3, [pc, #96]	@ (800e314 <netif_issue_reports+0x74>)
 800e2b4:	f240 326d 	movw	r2, #877	@ 0x36d
 800e2b8:	4917      	ldr	r1, [pc, #92]	@ (800e318 <netif_issue_reports+0x78>)
 800e2ba:	4818      	ldr	r0, [pc, #96]	@ (800e31c <netif_issue_reports+0x7c>)
 800e2bc:	f003 fdd8 	bl	8011e70 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e2c6:	f003 0304 	and.w	r3, r3, #4
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d01e      	beq.n	800e30c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e2d4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d017      	beq.n	800e30c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e2dc:	78fb      	ldrb	r3, [r7, #3]
 800e2de:	f003 0301 	and.w	r3, r3, #1
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d013      	beq.n	800e30e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	3304      	adds	r3, #4
 800e2ea:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d00e      	beq.n	800e30e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e2f6:	f003 0308 	and.w	r3, r3, #8
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d007      	beq.n	800e30e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	3304      	adds	r3, #4
 800e302:	4619      	mov	r1, r3
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f002 f837 	bl	8010378 <etharp_request>
 800e30a:	e000      	b.n	800e30e <netif_issue_reports+0x6e>
    return;
 800e30c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e30e:	3708      	adds	r7, #8
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}
 800e314:	08013258 	.word	0x08013258
 800e318:	080133fc 	.word	0x080133fc
 800e31c:	080132a8 	.word	0x080132a8

0800e320 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b082      	sub	sp, #8
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d107      	bne.n	800e33e <netif_set_down+0x1e>
 800e32e:	4b12      	ldr	r3, [pc, #72]	@ (800e378 <netif_set_down+0x58>)
 800e330:	f240 329b 	movw	r2, #923	@ 0x39b
 800e334:	4911      	ldr	r1, [pc, #68]	@ (800e37c <netif_set_down+0x5c>)
 800e336:	4812      	ldr	r0, [pc, #72]	@ (800e380 <netif_set_down+0x60>)
 800e338:	f003 fd9a 	bl	8011e70 <iprintf>
 800e33c:	e019      	b.n	800e372 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e344:	f003 0301 	and.w	r3, r3, #1
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d012      	beq.n	800e372 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e352:	f023 0301 	bic.w	r3, r3, #1
 800e356:	b2da      	uxtb	r2, r3
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e364:	f003 0308 	and.w	r3, r3, #8
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d002      	beq.n	800e372 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f001 fbc1 	bl	800faf4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e372:	3708      	adds	r7, #8
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}
 800e378:	08013258 	.word	0x08013258
 800e37c:	08013420 	.word	0x08013420
 800e380:	080132a8 	.word	0x080132a8

0800e384 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b082      	sub	sp, #8
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d107      	bne.n	800e3a2 <netif_set_link_up+0x1e>
 800e392:	4b13      	ldr	r3, [pc, #76]	@ (800e3e0 <netif_set_link_up+0x5c>)
 800e394:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800e398:	4912      	ldr	r1, [pc, #72]	@ (800e3e4 <netif_set_link_up+0x60>)
 800e39a:	4813      	ldr	r0, [pc, #76]	@ (800e3e8 <netif_set_link_up+0x64>)
 800e39c:	f003 fd68 	bl	8011e70 <iprintf>
 800e3a0:	e01b      	b.n	800e3da <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e3a8:	f003 0304 	and.w	r3, r3, #4
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d114      	bne.n	800e3da <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e3b6:	f043 0304 	orr.w	r3, r3, #4
 800e3ba:	b2da      	uxtb	r2, r3
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e3c2:	2103      	movs	r1, #3
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f7ff ff6b 	bl	800e2a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	69db      	ldr	r3, [r3, #28]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d003      	beq.n	800e3da <netif_set_link_up+0x56>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	69db      	ldr	r3, [r3, #28]
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e3da:	3708      	adds	r7, #8
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	08013258 	.word	0x08013258
 800e3e4:	08013440 	.word	0x08013440
 800e3e8:	080132a8 	.word	0x080132a8

0800e3ec <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b082      	sub	sp, #8
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d107      	bne.n	800e40a <netif_set_link_down+0x1e>
 800e3fa:	4b11      	ldr	r3, [pc, #68]	@ (800e440 <netif_set_link_down+0x54>)
 800e3fc:	f240 4206 	movw	r2, #1030	@ 0x406
 800e400:	4910      	ldr	r1, [pc, #64]	@ (800e444 <netif_set_link_down+0x58>)
 800e402:	4811      	ldr	r0, [pc, #68]	@ (800e448 <netif_set_link_down+0x5c>)
 800e404:	f003 fd34 	bl	8011e70 <iprintf>
 800e408:	e017      	b.n	800e43a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e410:	f003 0304 	and.w	r3, r3, #4
 800e414:	2b00      	cmp	r3, #0
 800e416:	d010      	beq.n	800e43a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e41e:	f023 0304 	bic.w	r3, r3, #4
 800e422:	b2da      	uxtb	r2, r3
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	69db      	ldr	r3, [r3, #28]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d003      	beq.n	800e43a <netif_set_link_down+0x4e>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	69db      	ldr	r3, [r3, #28]
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e43a:	3708      	adds	r7, #8
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}
 800e440:	08013258 	.word	0x08013258
 800e444:	08013464 	.word	0x08013464
 800e448:	080132a8 	.word	0x080132a8

0800e44c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b083      	sub	sp, #12
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d002      	beq.n	800e462 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	683a      	ldr	r2, [r7, #0]
 800e460:	61da      	str	r2, [r3, #28]
  }
}
 800e462:	bf00      	nop
 800e464:	370c      	adds	r7, #12
 800e466:	46bd      	mov	sp, r7
 800e468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46c:	4770      	bx	lr

0800e46e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e46e:	b480      	push	{r7}
 800e470:	b085      	sub	sp, #20
 800e472:	af00      	add	r7, sp, #0
 800e474:	60f8      	str	r0, [r7, #12]
 800e476:	60b9      	str	r1, [r7, #8]
 800e478:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e47a:	f06f 030b 	mvn.w	r3, #11
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3714      	adds	r7, #20
 800e482:	46bd      	mov	sp, r7
 800e484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e488:	4770      	bx	lr

0800e48a <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e48a:	b480      	push	{r7}
 800e48c:	b085      	sub	sp, #20
 800e48e:	af00      	add	r7, sp, #0
 800e490:	60f8      	str	r0, [r7, #12]
 800e492:	60b9      	str	r1, [r7, #8]
 800e494:	4611      	mov	r1, r2
 800e496:	461a      	mov	r2, r3
 800e498:	460b      	mov	r3, r1
 800e49a:	80fb      	strh	r3, [r7, #6]
 800e49c:	4613      	mov	r3, r2
 800e49e:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	68ba      	ldr	r2, [r7, #8]
 800e4aa:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	88fa      	ldrh	r2, [r7, #6]
 800e4b0:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	88ba      	ldrh	r2, [r7, #4]
 800e4b6:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e4b8:	8b3b      	ldrh	r3, [r7, #24]
 800e4ba:	b2da      	uxtb	r2, r3
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	7f3a      	ldrb	r2, [r7, #28]
 800e4c4:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	73da      	strb	r2, [r3, #15]
}
 800e4d2:	bf00      	nop
 800e4d4:	3714      	adds	r7, #20
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4dc:	4770      	bx	lr
	...

0800e4e0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b08c      	sub	sp, #48	@ 0x30
 800e4e4:	af02      	add	r7, sp, #8
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	71fb      	strb	r3, [r7, #7]
 800e4ea:	460b      	mov	r3, r1
 800e4ec:	80bb      	strh	r3, [r7, #4]
 800e4ee:	4613      	mov	r3, r2
 800e4f0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e4f2:	79fb      	ldrb	r3, [r7, #7]
 800e4f4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e4f6:	887b      	ldrh	r3, [r7, #2]
 800e4f8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800e4fc:	d07d      	beq.n	800e5fa <pbuf_alloc+0x11a>
 800e4fe:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800e502:	f300 80c6 	bgt.w	800e692 <pbuf_alloc+0x1b2>
 800e506:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800e50a:	d010      	beq.n	800e52e <pbuf_alloc+0x4e>
 800e50c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800e510:	f300 80bf 	bgt.w	800e692 <pbuf_alloc+0x1b2>
 800e514:	2b01      	cmp	r3, #1
 800e516:	d002      	beq.n	800e51e <pbuf_alloc+0x3e>
 800e518:	2b41      	cmp	r3, #65	@ 0x41
 800e51a:	f040 80ba 	bne.w	800e692 <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e51e:	887a      	ldrh	r2, [r7, #2]
 800e520:	88bb      	ldrh	r3, [r7, #4]
 800e522:	4619      	mov	r1, r3
 800e524:	2000      	movs	r0, #0
 800e526:	f000 f8cf 	bl	800e6c8 <pbuf_alloc_reference>
 800e52a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800e52c:	e0bb      	b.n	800e6a6 <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e52e:	2300      	movs	r3, #0
 800e530:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800e532:	2300      	movs	r3, #0
 800e534:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e536:	88bb      	ldrh	r3, [r7, #4]
 800e538:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e53a:	2009      	movs	r0, #9
 800e53c:	f7ff fc24 	bl	800dd88 <memp_malloc>
 800e540:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d107      	bne.n	800e558 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 800e548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d002      	beq.n	800e554 <pbuf_alloc+0x74>
            pbuf_free(p);
 800e54e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e550:	f000 faa8 	bl	800eaa4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e554:	2300      	movs	r3, #0
 800e556:	e0a7      	b.n	800e6a8 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e558:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e55a:	3303      	adds	r3, #3
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	f023 0303 	bic.w	r3, r3, #3
 800e562:	b29b      	uxth	r3, r3
 800e564:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800e568:	b29b      	uxth	r3, r3
 800e56a:	8b7a      	ldrh	r2, [r7, #26]
 800e56c:	4293      	cmp	r3, r2
 800e56e:	bf28      	it	cs
 800e570:	4613      	movcs	r3, r2
 800e572:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e574:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e576:	3310      	adds	r3, #16
 800e578:	693a      	ldr	r2, [r7, #16]
 800e57a:	4413      	add	r3, r2
 800e57c:	3303      	adds	r3, #3
 800e57e:	f023 0303 	bic.w	r3, r3, #3
 800e582:	4618      	mov	r0, r3
 800e584:	89f9      	ldrh	r1, [r7, #14]
 800e586:	8b7a      	ldrh	r2, [r7, #26]
 800e588:	2300      	movs	r3, #0
 800e58a:	9301      	str	r3, [sp, #4]
 800e58c:	887b      	ldrh	r3, [r7, #2]
 800e58e:	9300      	str	r3, [sp, #0]
 800e590:	460b      	mov	r3, r1
 800e592:	4601      	mov	r1, r0
 800e594:	6938      	ldr	r0, [r7, #16]
 800e596:	f7ff ff78 	bl	800e48a <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e59a:	693b      	ldr	r3, [r7, #16]
 800e59c:	685b      	ldr	r3, [r3, #4]
 800e59e:	f003 0303 	and.w	r3, r3, #3
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d006      	beq.n	800e5b4 <pbuf_alloc+0xd4>
 800e5a6:	4b42      	ldr	r3, [pc, #264]	@ (800e6b0 <pbuf_alloc+0x1d0>)
 800e5a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e5ac:	4941      	ldr	r1, [pc, #260]	@ (800e6b4 <pbuf_alloc+0x1d4>)
 800e5ae:	4842      	ldr	r0, [pc, #264]	@ (800e6b8 <pbuf_alloc+0x1d8>)
 800e5b0:	f003 fc5e 	bl	8011e70 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e5b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e5b6:	3303      	adds	r3, #3
 800e5b8:	f023 0303 	bic.w	r3, r3, #3
 800e5bc:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800e5c0:	d106      	bne.n	800e5d0 <pbuf_alloc+0xf0>
 800e5c2:	4b3b      	ldr	r3, [pc, #236]	@ (800e6b0 <pbuf_alloc+0x1d0>)
 800e5c4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800e5c8:	493c      	ldr	r1, [pc, #240]	@ (800e6bc <pbuf_alloc+0x1dc>)
 800e5ca:	483b      	ldr	r0, [pc, #236]	@ (800e6b8 <pbuf_alloc+0x1d8>)
 800e5cc:	f003 fc50 	bl	8011e70 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d102      	bne.n	800e5dc <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5da:	e002      	b.n	800e5e2 <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e5dc:	69fb      	ldr	r3, [r7, #28]
 800e5de:	693a      	ldr	r2, [r7, #16]
 800e5e0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e5e2:	693b      	ldr	r3, [r7, #16]
 800e5e4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e5e6:	8b7a      	ldrh	r2, [r7, #26]
 800e5e8:	89fb      	ldrh	r3, [r7, #14]
 800e5ea:	1ad3      	subs	r3, r2, r3
 800e5ec:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800e5f2:	8b7b      	ldrh	r3, [r7, #26]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d1a0      	bne.n	800e53a <pbuf_alloc+0x5a>
      break;
 800e5f8:	e055      	b.n	800e6a6 <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e5fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e5fc:	3303      	adds	r3, #3
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	f023 0303 	bic.w	r3, r3, #3
 800e604:	b29a      	uxth	r2, r3
 800e606:	88bb      	ldrh	r3, [r7, #4]
 800e608:	3303      	adds	r3, #3
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	f023 0303 	bic.w	r3, r3, #3
 800e610:	b29b      	uxth	r3, r3
 800e612:	4413      	add	r3, r2
 800e614:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e616:	8b3b      	ldrh	r3, [r7, #24]
 800e618:	3310      	adds	r3, #16
 800e61a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e61c:	8b3a      	ldrh	r2, [r7, #24]
 800e61e:	88bb      	ldrh	r3, [r7, #4]
 800e620:	3303      	adds	r3, #3
 800e622:	f023 0303 	bic.w	r3, r3, #3
 800e626:	429a      	cmp	r2, r3
 800e628:	d306      	bcc.n	800e638 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e62a:	8afa      	ldrh	r2, [r7, #22]
 800e62c:	88bb      	ldrh	r3, [r7, #4]
 800e62e:	3303      	adds	r3, #3
 800e630:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e634:	429a      	cmp	r2, r3
 800e636:	d201      	bcs.n	800e63c <pbuf_alloc+0x15c>
        return NULL;
 800e638:	2300      	movs	r3, #0
 800e63a:	e035      	b.n	800e6a8 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e63c:	8afb      	ldrh	r3, [r7, #22]
 800e63e:	4618      	mov	r0, r3
 800e640:	f7ff fa06 	bl	800da50 <mem_malloc>
 800e644:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800e646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d101      	bne.n	800e650 <pbuf_alloc+0x170>
        return NULL;
 800e64c:	2300      	movs	r3, #0
 800e64e:	e02b      	b.n	800e6a8 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e650:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e652:	3310      	adds	r3, #16
 800e654:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e656:	4413      	add	r3, r2
 800e658:	3303      	adds	r3, #3
 800e65a:	f023 0303 	bic.w	r3, r3, #3
 800e65e:	4618      	mov	r0, r3
 800e660:	88b9      	ldrh	r1, [r7, #4]
 800e662:	88ba      	ldrh	r2, [r7, #4]
 800e664:	2300      	movs	r3, #0
 800e666:	9301      	str	r3, [sp, #4]
 800e668:	887b      	ldrh	r3, [r7, #2]
 800e66a:	9300      	str	r3, [sp, #0]
 800e66c:	460b      	mov	r3, r1
 800e66e:	4601      	mov	r1, r0
 800e670:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e672:	f7ff ff0a 	bl	800e48a <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	f003 0303 	and.w	r3, r3, #3
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d010      	beq.n	800e6a4 <pbuf_alloc+0x1c4>
 800e682:	4b0b      	ldr	r3, [pc, #44]	@ (800e6b0 <pbuf_alloc+0x1d0>)
 800e684:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800e688:	490d      	ldr	r1, [pc, #52]	@ (800e6c0 <pbuf_alloc+0x1e0>)
 800e68a:	480b      	ldr	r0, [pc, #44]	@ (800e6b8 <pbuf_alloc+0x1d8>)
 800e68c:	f003 fbf0 	bl	8011e70 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e690:	e008      	b.n	800e6a4 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e692:	4b07      	ldr	r3, [pc, #28]	@ (800e6b0 <pbuf_alloc+0x1d0>)
 800e694:	f240 1227 	movw	r2, #295	@ 0x127
 800e698:	490a      	ldr	r1, [pc, #40]	@ (800e6c4 <pbuf_alloc+0x1e4>)
 800e69a:	4807      	ldr	r0, [pc, #28]	@ (800e6b8 <pbuf_alloc+0x1d8>)
 800e69c:	f003 fbe8 	bl	8011e70 <iprintf>
      return NULL;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	e001      	b.n	800e6a8 <pbuf_alloc+0x1c8>
      break;
 800e6a4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3728      	adds	r7, #40	@ 0x28
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	08013488 	.word	0x08013488
 800e6b4:	080134b8 	.word	0x080134b8
 800e6b8:	080134e8 	.word	0x080134e8
 800e6bc:	08013510 	.word	0x08013510
 800e6c0:	08013544 	.word	0x08013544
 800e6c4:	08013570 	.word	0x08013570

0800e6c8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b086      	sub	sp, #24
 800e6cc:	af02      	add	r7, sp, #8
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	807b      	strh	r3, [r7, #2]
 800e6d4:	4613      	mov	r3, r2
 800e6d6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e6d8:	883b      	ldrh	r3, [r7, #0]
 800e6da:	2b41      	cmp	r3, #65	@ 0x41
 800e6dc:	d009      	beq.n	800e6f2 <pbuf_alloc_reference+0x2a>
 800e6de:	883b      	ldrh	r3, [r7, #0]
 800e6e0:	2b01      	cmp	r3, #1
 800e6e2:	d006      	beq.n	800e6f2 <pbuf_alloc_reference+0x2a>
 800e6e4:	4b0f      	ldr	r3, [pc, #60]	@ (800e724 <pbuf_alloc_reference+0x5c>)
 800e6e6:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800e6ea:	490f      	ldr	r1, [pc, #60]	@ (800e728 <pbuf_alloc_reference+0x60>)
 800e6ec:	480f      	ldr	r0, [pc, #60]	@ (800e72c <pbuf_alloc_reference+0x64>)
 800e6ee:	f003 fbbf 	bl	8011e70 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e6f2:	2008      	movs	r0, #8
 800e6f4:	f7ff fb48 	bl	800dd88 <memp_malloc>
 800e6f8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d101      	bne.n	800e704 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e700:	2300      	movs	r3, #0
 800e702:	e00b      	b.n	800e71c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e704:	8879      	ldrh	r1, [r7, #2]
 800e706:	887a      	ldrh	r2, [r7, #2]
 800e708:	2300      	movs	r3, #0
 800e70a:	9301      	str	r3, [sp, #4]
 800e70c:	883b      	ldrh	r3, [r7, #0]
 800e70e:	9300      	str	r3, [sp, #0]
 800e710:	460b      	mov	r3, r1
 800e712:	6879      	ldr	r1, [r7, #4]
 800e714:	68f8      	ldr	r0, [r7, #12]
 800e716:	f7ff feb8 	bl	800e48a <pbuf_init_alloced_pbuf>
  return p;
 800e71a:	68fb      	ldr	r3, [r7, #12]
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	3710      	adds	r7, #16
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}
 800e724:	08013488 	.word	0x08013488
 800e728:	0801358c 	.word	0x0801358c
 800e72c:	080134e8 	.word	0x080134e8

0800e730 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b088      	sub	sp, #32
 800e734:	af02      	add	r7, sp, #8
 800e736:	607b      	str	r3, [r7, #4]
 800e738:	4603      	mov	r3, r0
 800e73a:	73fb      	strb	r3, [r7, #15]
 800e73c:	460b      	mov	r3, r1
 800e73e:	81bb      	strh	r3, [r7, #12]
 800e740:	4613      	mov	r3, r2
 800e742:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e744:	7bfb      	ldrb	r3, [r7, #15]
 800e746:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e748:	8a7b      	ldrh	r3, [r7, #18]
 800e74a:	3303      	adds	r3, #3
 800e74c:	f023 0203 	bic.w	r2, r3, #3
 800e750:	89bb      	ldrh	r3, [r7, #12]
 800e752:	441a      	add	r2, r3
 800e754:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e756:	429a      	cmp	r2, r3
 800e758:	d901      	bls.n	800e75e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e75a:	2300      	movs	r3, #0
 800e75c:	e018      	b.n	800e790 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e75e:	6a3b      	ldr	r3, [r7, #32]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d007      	beq.n	800e774 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e764:	8a7b      	ldrh	r3, [r7, #18]
 800e766:	3303      	adds	r3, #3
 800e768:	f023 0303 	bic.w	r3, r3, #3
 800e76c:	6a3a      	ldr	r2, [r7, #32]
 800e76e:	4413      	add	r3, r2
 800e770:	617b      	str	r3, [r7, #20]
 800e772:	e001      	b.n	800e778 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e774:	2300      	movs	r3, #0
 800e776:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	89b9      	ldrh	r1, [r7, #12]
 800e77c:	89ba      	ldrh	r2, [r7, #12]
 800e77e:	2302      	movs	r3, #2
 800e780:	9301      	str	r3, [sp, #4]
 800e782:	897b      	ldrh	r3, [r7, #10]
 800e784:	9300      	str	r3, [sp, #0]
 800e786:	460b      	mov	r3, r1
 800e788:	6979      	ldr	r1, [r7, #20]
 800e78a:	f7ff fe7e 	bl	800e48a <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e78e:	687b      	ldr	r3, [r7, #4]
}
 800e790:	4618      	mov	r0, r3
 800e792:	3718      	adds	r7, #24
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}

0800e798 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b084      	sub	sp, #16
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	460b      	mov	r3, r1
 800e7a2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d106      	bne.n	800e7b8 <pbuf_realloc+0x20>
 800e7aa:	4b3a      	ldr	r3, [pc, #232]	@ (800e894 <pbuf_realloc+0xfc>)
 800e7ac:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800e7b0:	4939      	ldr	r1, [pc, #228]	@ (800e898 <pbuf_realloc+0x100>)
 800e7b2:	483a      	ldr	r0, [pc, #232]	@ (800e89c <pbuf_realloc+0x104>)
 800e7b4:	f003 fb5c 	bl	8011e70 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	891b      	ldrh	r3, [r3, #8]
 800e7bc:	887a      	ldrh	r2, [r7, #2]
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d263      	bcs.n	800e88a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	891a      	ldrh	r2, [r3, #8]
 800e7c6:	887b      	ldrh	r3, [r7, #2]
 800e7c8:	1ad3      	subs	r3, r2, r3
 800e7ca:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e7cc:	887b      	ldrh	r3, [r7, #2]
 800e7ce:	817b      	strh	r3, [r7, #10]
  q = p;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e7d4:	e018      	b.n	800e808 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	895b      	ldrh	r3, [r3, #10]
 800e7da:	897a      	ldrh	r2, [r7, #10]
 800e7dc:	1ad3      	subs	r3, r2, r3
 800e7de:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	891a      	ldrh	r2, [r3, #8]
 800e7e4:	893b      	ldrh	r3, [r7, #8]
 800e7e6:	1ad3      	subs	r3, r2, r3
 800e7e8:	b29a      	uxth	r2, r3
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d106      	bne.n	800e808 <pbuf_realloc+0x70>
 800e7fa:	4b26      	ldr	r3, [pc, #152]	@ (800e894 <pbuf_realloc+0xfc>)
 800e7fc:	f240 12af 	movw	r2, #431	@ 0x1af
 800e800:	4927      	ldr	r1, [pc, #156]	@ (800e8a0 <pbuf_realloc+0x108>)
 800e802:	4826      	ldr	r0, [pc, #152]	@ (800e89c <pbuf_realloc+0x104>)
 800e804:	f003 fb34 	bl	8011e70 <iprintf>
  while (rem_len > q->len) {
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	895b      	ldrh	r3, [r3, #10]
 800e80c:	897a      	ldrh	r2, [r7, #10]
 800e80e:	429a      	cmp	r2, r3
 800e810:	d8e1      	bhi.n	800e7d6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	7b1b      	ldrb	r3, [r3, #12]
 800e816:	f003 030f 	and.w	r3, r3, #15
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d121      	bne.n	800e862 <pbuf_realloc+0xca>
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	895b      	ldrh	r3, [r3, #10]
 800e822:	897a      	ldrh	r2, [r7, #10]
 800e824:	429a      	cmp	r2, r3
 800e826:	d01c      	beq.n	800e862 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	7b5b      	ldrb	r3, [r3, #13]
 800e82c:	f003 0302 	and.w	r3, r3, #2
 800e830:	2b00      	cmp	r3, #0
 800e832:	d116      	bne.n	800e862 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	685a      	ldr	r2, [r3, #4]
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	1ad3      	subs	r3, r2, r3
 800e83c:	b29a      	uxth	r2, r3
 800e83e:	897b      	ldrh	r3, [r7, #10]
 800e840:	4413      	add	r3, r2
 800e842:	b29b      	uxth	r3, r3
 800e844:	4619      	mov	r1, r3
 800e846:	68f8      	ldr	r0, [r7, #12]
 800e848:	f7fe fffe 	bl	800d848 <mem_trim>
 800e84c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d106      	bne.n	800e862 <pbuf_realloc+0xca>
 800e854:	4b0f      	ldr	r3, [pc, #60]	@ (800e894 <pbuf_realloc+0xfc>)
 800e856:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800e85a:	4912      	ldr	r1, [pc, #72]	@ (800e8a4 <pbuf_realloc+0x10c>)
 800e85c:	480f      	ldr	r0, [pc, #60]	@ (800e89c <pbuf_realloc+0x104>)
 800e85e:	f003 fb07 	bl	8011e70 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	897a      	ldrh	r2, [r7, #10]
 800e866:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	895a      	ldrh	r2, [r3, #10]
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d004      	beq.n	800e882 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	4618      	mov	r0, r3
 800e87e:	f000 f911 	bl	800eaa4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	2200      	movs	r2, #0
 800e886:	601a      	str	r2, [r3, #0]
 800e888:	e000      	b.n	800e88c <pbuf_realloc+0xf4>
    return;
 800e88a:	bf00      	nop

}
 800e88c:	3710      	adds	r7, #16
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}
 800e892:	bf00      	nop
 800e894:	08013488 	.word	0x08013488
 800e898:	080135a0 	.word	0x080135a0
 800e89c:	080134e8 	.word	0x080134e8
 800e8a0:	080135b8 	.word	0x080135b8
 800e8a4:	080135d0 	.word	0x080135d0

0800e8a8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b086      	sub	sp, #24
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	60f8      	str	r0, [r7, #12]
 800e8b0:	60b9      	str	r1, [r7, #8]
 800e8b2:	4613      	mov	r3, r2
 800e8b4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d106      	bne.n	800e8ca <pbuf_add_header_impl+0x22>
 800e8bc:	4b2b      	ldr	r3, [pc, #172]	@ (800e96c <pbuf_add_header_impl+0xc4>)
 800e8be:	f240 12df 	movw	r2, #479	@ 0x1df
 800e8c2:	492b      	ldr	r1, [pc, #172]	@ (800e970 <pbuf_add_header_impl+0xc8>)
 800e8c4:	482b      	ldr	r0, [pc, #172]	@ (800e974 <pbuf_add_header_impl+0xcc>)
 800e8c6:	f003 fad3 	bl	8011e70 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d003      	beq.n	800e8d8 <pbuf_add_header_impl+0x30>
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e8d6:	d301      	bcc.n	800e8dc <pbuf_add_header_impl+0x34>
    return 1;
 800e8d8:	2301      	movs	r3, #1
 800e8da:	e043      	b.n	800e964 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d101      	bne.n	800e8e6 <pbuf_add_header_impl+0x3e>
    return 0;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	e03e      	b.n	800e964 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	891a      	ldrh	r2, [r3, #8]
 800e8ee:	8a7b      	ldrh	r3, [r7, #18]
 800e8f0:	4413      	add	r3, r2
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	8a7a      	ldrh	r2, [r7, #18]
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d901      	bls.n	800e8fe <pbuf_add_header_impl+0x56>
    return 1;
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	e032      	b.n	800e964 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	7b1b      	ldrb	r3, [r3, #12]
 800e902:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e904:	8a3b      	ldrh	r3, [r7, #16]
 800e906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d00c      	beq.n	800e928 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	685a      	ldr	r2, [r3, #4]
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	425b      	negs	r3, r3
 800e916:	4413      	add	r3, r2
 800e918:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	3310      	adds	r3, #16
 800e91e:	697a      	ldr	r2, [r7, #20]
 800e920:	429a      	cmp	r2, r3
 800e922:	d20d      	bcs.n	800e940 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e924:	2301      	movs	r3, #1
 800e926:	e01d      	b.n	800e964 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e928:	79fb      	ldrb	r3, [r7, #7]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d006      	beq.n	800e93c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	685a      	ldr	r2, [r3, #4]
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	425b      	negs	r3, r3
 800e936:	4413      	add	r3, r2
 800e938:	617b      	str	r3, [r7, #20]
 800e93a:	e001      	b.n	800e940 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e93c:	2301      	movs	r3, #1
 800e93e:	e011      	b.n	800e964 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	697a      	ldr	r2, [r7, #20]
 800e944:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	895a      	ldrh	r2, [r3, #10]
 800e94a:	8a7b      	ldrh	r3, [r7, #18]
 800e94c:	4413      	add	r3, r2
 800e94e:	b29a      	uxth	r2, r3
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	891a      	ldrh	r2, [r3, #8]
 800e958:	8a7b      	ldrh	r3, [r7, #18]
 800e95a:	4413      	add	r3, r2
 800e95c:	b29a      	uxth	r2, r3
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	811a      	strh	r2, [r3, #8]


  return 0;
 800e962:	2300      	movs	r3, #0
}
 800e964:	4618      	mov	r0, r3
 800e966:	3718      	adds	r7, #24
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}
 800e96c:	08013488 	.word	0x08013488
 800e970:	080135ec 	.word	0x080135ec
 800e974:	080134e8 	.word	0x080134e8

0800e978 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b082      	sub	sp, #8
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e982:	2200      	movs	r2, #0
 800e984:	6839      	ldr	r1, [r7, #0]
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	f7ff ff8e 	bl	800e8a8 <pbuf_add_header_impl>
 800e98c:	4603      	mov	r3, r0
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3708      	adds	r7, #8
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
	...

0800e998 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b084      	sub	sp, #16
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d106      	bne.n	800e9b6 <pbuf_remove_header+0x1e>
 800e9a8:	4b20      	ldr	r3, [pc, #128]	@ (800ea2c <pbuf_remove_header+0x94>)
 800e9aa:	f240 224b 	movw	r2, #587	@ 0x24b
 800e9ae:	4920      	ldr	r1, [pc, #128]	@ (800ea30 <pbuf_remove_header+0x98>)
 800e9b0:	4820      	ldr	r0, [pc, #128]	@ (800ea34 <pbuf_remove_header+0x9c>)
 800e9b2:	f003 fa5d 	bl	8011e70 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d003      	beq.n	800e9c4 <pbuf_remove_header+0x2c>
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e9c2:	d301      	bcc.n	800e9c8 <pbuf_remove_header+0x30>
    return 1;
 800e9c4:	2301      	movs	r3, #1
 800e9c6:	e02c      	b.n	800ea22 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d101      	bne.n	800e9d2 <pbuf_remove_header+0x3a>
    return 0;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	e027      	b.n	800ea22 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	895b      	ldrh	r3, [r3, #10]
 800e9da:	89fa      	ldrh	r2, [r7, #14]
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d908      	bls.n	800e9f2 <pbuf_remove_header+0x5a>
 800e9e0:	4b12      	ldr	r3, [pc, #72]	@ (800ea2c <pbuf_remove_header+0x94>)
 800e9e2:	f240 2255 	movw	r2, #597	@ 0x255
 800e9e6:	4914      	ldr	r1, [pc, #80]	@ (800ea38 <pbuf_remove_header+0xa0>)
 800e9e8:	4812      	ldr	r0, [pc, #72]	@ (800ea34 <pbuf_remove_header+0x9c>)
 800e9ea:	f003 fa41 	bl	8011e70 <iprintf>
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	e017      	b.n	800ea22 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	685b      	ldr	r3, [r3, #4]
 800e9f6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	685a      	ldr	r2, [r3, #4]
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	441a      	add	r2, r3
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	895a      	ldrh	r2, [r3, #10]
 800ea08:	89fb      	ldrh	r3, [r7, #14]
 800ea0a:	1ad3      	subs	r3, r2, r3
 800ea0c:	b29a      	uxth	r2, r3
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	891a      	ldrh	r2, [r3, #8]
 800ea16:	89fb      	ldrh	r3, [r7, #14]
 800ea18:	1ad3      	subs	r3, r2, r3
 800ea1a:	b29a      	uxth	r2, r3
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ea20:	2300      	movs	r3, #0
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3710      	adds	r7, #16
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	08013488 	.word	0x08013488
 800ea30:	080135ec 	.word	0x080135ec
 800ea34:	080134e8 	.word	0x080134e8
 800ea38:	080135f8 	.word	0x080135f8

0800ea3c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b082      	sub	sp, #8
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
 800ea44:	460b      	mov	r3, r1
 800ea46:	807b      	strh	r3, [r7, #2]
 800ea48:	4613      	mov	r3, r2
 800ea4a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ea4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	da08      	bge.n	800ea66 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ea54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ea58:	425b      	negs	r3, r3
 800ea5a:	4619      	mov	r1, r3
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f7ff ff9b 	bl	800e998 <pbuf_remove_header>
 800ea62:	4603      	mov	r3, r0
 800ea64:	e007      	b.n	800ea76 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ea66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ea6a:	787a      	ldrb	r2, [r7, #1]
 800ea6c:	4619      	mov	r1, r3
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f7ff ff1a 	bl	800e8a8 <pbuf_add_header_impl>
 800ea74:	4603      	mov	r3, r0
  }
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3708      	adds	r7, #8
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}

0800ea7e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ea7e:	b580      	push	{r7, lr}
 800ea80:	b082      	sub	sp, #8
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	6078      	str	r0, [r7, #4]
 800ea86:	460b      	mov	r3, r1
 800ea88:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ea8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ea8e:	2201      	movs	r2, #1
 800ea90:	4619      	mov	r1, r3
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f7ff ffd2 	bl	800ea3c <pbuf_header_impl>
 800ea98:	4603      	mov	r3, r0
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3708      	adds	r7, #8
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}
	...

0800eaa4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b086      	sub	sp, #24
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d10b      	bne.n	800eaca <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d106      	bne.n	800eac6 <pbuf_free+0x22>
 800eab8:	4b38      	ldr	r3, [pc, #224]	@ (800eb9c <pbuf_free+0xf8>)
 800eaba:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800eabe:	4938      	ldr	r1, [pc, #224]	@ (800eba0 <pbuf_free+0xfc>)
 800eac0:	4838      	ldr	r0, [pc, #224]	@ (800eba4 <pbuf_free+0x100>)
 800eac2:	f003 f9d5 	bl	8011e70 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800eac6:	2300      	movs	r3, #0
 800eac8:	e063      	b.n	800eb92 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800eaca:	2300      	movs	r3, #0
 800eacc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800eace:	e05c      	b.n	800eb8a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	7b9b      	ldrb	r3, [r3, #14]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d106      	bne.n	800eae6 <pbuf_free+0x42>
 800ead8:	4b30      	ldr	r3, [pc, #192]	@ (800eb9c <pbuf_free+0xf8>)
 800eada:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800eade:	4932      	ldr	r1, [pc, #200]	@ (800eba8 <pbuf_free+0x104>)
 800eae0:	4830      	ldr	r0, [pc, #192]	@ (800eba4 <pbuf_free+0x100>)
 800eae2:	f003 f9c5 	bl	8011e70 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	7b9b      	ldrb	r3, [r3, #14]
 800eaea:	3b01      	subs	r3, #1
 800eaec:	b2da      	uxtb	r2, r3
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	739a      	strb	r2, [r3, #14]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	7b9b      	ldrb	r3, [r3, #14]
 800eaf6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800eaf8:	7dbb      	ldrb	r3, [r7, #22]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d143      	bne.n	800eb86 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	7b1b      	ldrb	r3, [r3, #12]
 800eb08:	f003 030f 	and.w	r3, r3, #15
 800eb0c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	7b5b      	ldrb	r3, [r3, #13]
 800eb12:	f003 0302 	and.w	r3, r3, #2
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d011      	beq.n	800eb3e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	691b      	ldr	r3, [r3, #16]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d106      	bne.n	800eb34 <pbuf_free+0x90>
 800eb26:	4b1d      	ldr	r3, [pc, #116]	@ (800eb9c <pbuf_free+0xf8>)
 800eb28:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800eb2c:	491f      	ldr	r1, [pc, #124]	@ (800ebac <pbuf_free+0x108>)
 800eb2e:	481d      	ldr	r0, [pc, #116]	@ (800eba4 <pbuf_free+0x100>)
 800eb30:	f003 f99e 	bl	8011e70 <iprintf>
        pc->custom_free_function(p);
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	691b      	ldr	r3, [r3, #16]
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	4798      	blx	r3
 800eb3c:	e01d      	b.n	800eb7a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800eb3e:	7bfb      	ldrb	r3, [r7, #15]
 800eb40:	2b02      	cmp	r3, #2
 800eb42:	d104      	bne.n	800eb4e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800eb44:	6879      	ldr	r1, [r7, #4]
 800eb46:	2009      	movs	r0, #9
 800eb48:	f7ff f98e 	bl	800de68 <memp_free>
 800eb4c:	e015      	b.n	800eb7a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800eb4e:	7bfb      	ldrb	r3, [r7, #15]
 800eb50:	2b01      	cmp	r3, #1
 800eb52:	d104      	bne.n	800eb5e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800eb54:	6879      	ldr	r1, [r7, #4]
 800eb56:	2008      	movs	r0, #8
 800eb58:	f7ff f986 	bl	800de68 <memp_free>
 800eb5c:	e00d      	b.n	800eb7a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800eb5e:	7bfb      	ldrb	r3, [r7, #15]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d103      	bne.n	800eb6c <pbuf_free+0xc8>
          mem_free(p);
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f7fe fdf7 	bl	800d758 <mem_free>
 800eb6a:	e006      	b.n	800eb7a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800eb6c:	4b0b      	ldr	r3, [pc, #44]	@ (800eb9c <pbuf_free+0xf8>)
 800eb6e:	f240 320f 	movw	r2, #783	@ 0x30f
 800eb72:	490f      	ldr	r1, [pc, #60]	@ (800ebb0 <pbuf_free+0x10c>)
 800eb74:	480b      	ldr	r0, [pc, #44]	@ (800eba4 <pbuf_free+0x100>)
 800eb76:	f003 f97b 	bl	8011e70 <iprintf>
        }
      }
      count++;
 800eb7a:	7dfb      	ldrb	r3, [r7, #23]
 800eb7c:	3301      	adds	r3, #1
 800eb7e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	607b      	str	r3, [r7, #4]
 800eb84:	e001      	b.n	800eb8a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800eb86:	2300      	movs	r3, #0
 800eb88:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d19f      	bne.n	800ead0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800eb90:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3718      	adds	r7, #24
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	08013488 	.word	0x08013488
 800eba0:	080135ec 	.word	0x080135ec
 800eba4:	080134e8 	.word	0x080134e8
 800eba8:	08013618 	.word	0x08013618
 800ebac:	08013630 	.word	0x08013630
 800ebb0:	08013654 	.word	0x08013654

0800ebb4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b085      	sub	sp, #20
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ebc0:	e005      	b.n	800ebce <pbuf_clen+0x1a>
    ++len;
 800ebc2:	89fb      	ldrh	r3, [r7, #14]
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d1f6      	bne.n	800ebc2 <pbuf_clen+0xe>
  }
  return len;
 800ebd4:	89fb      	ldrh	r3, [r7, #14]
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3714      	adds	r7, #20
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe0:	4770      	bx	lr
	...

0800ebe4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d010      	beq.n	800ec14 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	7b9b      	ldrb	r3, [r3, #14]
 800ebf6:	3301      	adds	r3, #1
 800ebf8:	b2da      	uxtb	r2, r3
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	7b9b      	ldrb	r3, [r3, #14]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d106      	bne.n	800ec14 <pbuf_ref+0x30>
 800ec06:	4b05      	ldr	r3, [pc, #20]	@ (800ec1c <pbuf_ref+0x38>)
 800ec08:	f240 3242 	movw	r2, #834	@ 0x342
 800ec0c:	4904      	ldr	r1, [pc, #16]	@ (800ec20 <pbuf_ref+0x3c>)
 800ec0e:	4805      	ldr	r0, [pc, #20]	@ (800ec24 <pbuf_ref+0x40>)
 800ec10:	f003 f92e 	bl	8011e70 <iprintf>
  }
}
 800ec14:	bf00      	nop
 800ec16:	3708      	adds	r7, #8
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}
 800ec1c:	08013488 	.word	0x08013488
 800ec20:	08013668 	.word	0x08013668
 800ec24:	080134e8 	.word	0x080134e8

0800ec28 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b084      	sub	sp, #16
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d002      	beq.n	800ec3e <pbuf_cat+0x16>
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d107      	bne.n	800ec4e <pbuf_cat+0x26>
 800ec3e:	4b20      	ldr	r3, [pc, #128]	@ (800ecc0 <pbuf_cat+0x98>)
 800ec40:	f240 3259 	movw	r2, #857	@ 0x359
 800ec44:	491f      	ldr	r1, [pc, #124]	@ (800ecc4 <pbuf_cat+0x9c>)
 800ec46:	4820      	ldr	r0, [pc, #128]	@ (800ecc8 <pbuf_cat+0xa0>)
 800ec48:	f003 f912 	bl	8011e70 <iprintf>
 800ec4c:	e034      	b.n	800ecb8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	60fb      	str	r3, [r7, #12]
 800ec52:	e00a      	b.n	800ec6a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	891a      	ldrh	r2, [r3, #8]
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	891b      	ldrh	r3, [r3, #8]
 800ec5c:	4413      	add	r3, r2
 800ec5e:	b29a      	uxth	r2, r3
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	60fb      	str	r3, [r7, #12]
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d1f0      	bne.n	800ec54 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	891a      	ldrh	r2, [r3, #8]
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	895b      	ldrh	r3, [r3, #10]
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d006      	beq.n	800ec8c <pbuf_cat+0x64>
 800ec7e:	4b10      	ldr	r3, [pc, #64]	@ (800ecc0 <pbuf_cat+0x98>)
 800ec80:	f240 3262 	movw	r2, #866	@ 0x362
 800ec84:	4911      	ldr	r1, [pc, #68]	@ (800eccc <pbuf_cat+0xa4>)
 800ec86:	4810      	ldr	r0, [pc, #64]	@ (800ecc8 <pbuf_cat+0xa0>)
 800ec88:	f003 f8f2 	bl	8011e70 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d006      	beq.n	800eca2 <pbuf_cat+0x7a>
 800ec94:	4b0a      	ldr	r3, [pc, #40]	@ (800ecc0 <pbuf_cat+0x98>)
 800ec96:	f240 3263 	movw	r2, #867	@ 0x363
 800ec9a:	490d      	ldr	r1, [pc, #52]	@ (800ecd0 <pbuf_cat+0xa8>)
 800ec9c:	480a      	ldr	r0, [pc, #40]	@ (800ecc8 <pbuf_cat+0xa0>)
 800ec9e:	f003 f8e7 	bl	8011e70 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	891a      	ldrh	r2, [r3, #8]
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	891b      	ldrh	r3, [r3, #8]
 800ecaa:	4413      	add	r3, r2
 800ecac:	b29a      	uxth	r2, r3
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	683a      	ldr	r2, [r7, #0]
 800ecb6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ecb8:	3710      	adds	r7, #16
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
 800ecbe:	bf00      	nop
 800ecc0:	08013488 	.word	0x08013488
 800ecc4:	0801367c 	.word	0x0801367c
 800ecc8:	080134e8 	.word	0x080134e8
 800eccc:	080136b4 	.word	0x080136b4
 800ecd0:	080136e4 	.word	0x080136e4

0800ecd4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b086      	sub	sp, #24
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
 800ecdc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ecde:	2300      	movs	r3, #0
 800ece0:	617b      	str	r3, [r7, #20]
 800ece2:	2300      	movs	r3, #0
 800ece4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d008      	beq.n	800ecfe <pbuf_copy+0x2a>
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d005      	beq.n	800ecfe <pbuf_copy+0x2a>
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	891a      	ldrh	r2, [r3, #8]
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	891b      	ldrh	r3, [r3, #8]
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	d209      	bcs.n	800ed12 <pbuf_copy+0x3e>
 800ecfe:	4b57      	ldr	r3, [pc, #348]	@ (800ee5c <pbuf_copy+0x188>)
 800ed00:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800ed04:	4956      	ldr	r1, [pc, #344]	@ (800ee60 <pbuf_copy+0x18c>)
 800ed06:	4857      	ldr	r0, [pc, #348]	@ (800ee64 <pbuf_copy+0x190>)
 800ed08:	f003 f8b2 	bl	8011e70 <iprintf>
 800ed0c:	f06f 030f 	mvn.w	r3, #15
 800ed10:	e09f      	b.n	800ee52 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	895b      	ldrh	r3, [r3, #10]
 800ed16:	461a      	mov	r2, r3
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	1ad2      	subs	r2, r2, r3
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	895b      	ldrh	r3, [r3, #10]
 800ed20:	4619      	mov	r1, r3
 800ed22:	693b      	ldr	r3, [r7, #16]
 800ed24:	1acb      	subs	r3, r1, r3
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d306      	bcc.n	800ed38 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	895b      	ldrh	r3, [r3, #10]
 800ed2e:	461a      	mov	r2, r3
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	1ad3      	subs	r3, r2, r3
 800ed34:	60fb      	str	r3, [r7, #12]
 800ed36:	e005      	b.n	800ed44 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	895b      	ldrh	r3, [r3, #10]
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	1ad3      	subs	r3, r2, r3
 800ed42:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	685a      	ldr	r2, [r3, #4]
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	18d0      	adds	r0, r2, r3
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	685a      	ldr	r2, [r3, #4]
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	4413      	add	r3, r2
 800ed54:	68fa      	ldr	r2, [r7, #12]
 800ed56:	4619      	mov	r1, r3
 800ed58:	f003 f9bb 	bl	80120d2 <memcpy>
    offset_to += len;
 800ed5c:	697a      	ldr	r2, [r7, #20]
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	4413      	add	r3, r2
 800ed62:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ed64:	693a      	ldr	r2, [r7, #16]
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	4413      	add	r3, r2
 800ed6a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	895b      	ldrh	r3, [r3, #10]
 800ed70:	461a      	mov	r2, r3
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	4293      	cmp	r3, r2
 800ed76:	d906      	bls.n	800ed86 <pbuf_copy+0xb2>
 800ed78:	4b38      	ldr	r3, [pc, #224]	@ (800ee5c <pbuf_copy+0x188>)
 800ed7a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800ed7e:	493a      	ldr	r1, [pc, #232]	@ (800ee68 <pbuf_copy+0x194>)
 800ed80:	4838      	ldr	r0, [pc, #224]	@ (800ee64 <pbuf_copy+0x190>)
 800ed82:	f003 f875 	bl	8011e70 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	895b      	ldrh	r3, [r3, #10]
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d906      	bls.n	800eda0 <pbuf_copy+0xcc>
 800ed92:	4b32      	ldr	r3, [pc, #200]	@ (800ee5c <pbuf_copy+0x188>)
 800ed94:	f240 32da 	movw	r2, #986	@ 0x3da
 800ed98:	4934      	ldr	r1, [pc, #208]	@ (800ee6c <pbuf_copy+0x198>)
 800ed9a:	4832      	ldr	r0, [pc, #200]	@ (800ee64 <pbuf_copy+0x190>)
 800ed9c:	f003 f868 	bl	8011e70 <iprintf>
    if (offset_from >= p_from->len) {
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	895b      	ldrh	r3, [r3, #10]
 800eda4:	461a      	mov	r2, r3
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	4293      	cmp	r3, r2
 800edaa:	d304      	bcc.n	800edb6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800edac:	2300      	movs	r3, #0
 800edae:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	895b      	ldrh	r3, [r3, #10]
 800edba:	461a      	mov	r2, r3
 800edbc:	697b      	ldr	r3, [r7, #20]
 800edbe:	4293      	cmp	r3, r2
 800edc0:	d114      	bne.n	800edec <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800edc2:	2300      	movs	r3, #0
 800edc4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d10c      	bne.n	800edec <pbuf_copy+0x118>
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d009      	beq.n	800edec <pbuf_copy+0x118>
 800edd8:	4b20      	ldr	r3, [pc, #128]	@ (800ee5c <pbuf_copy+0x188>)
 800edda:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800edde:	4924      	ldr	r1, [pc, #144]	@ (800ee70 <pbuf_copy+0x19c>)
 800ede0:	4820      	ldr	r0, [pc, #128]	@ (800ee64 <pbuf_copy+0x190>)
 800ede2:	f003 f845 	bl	8011e70 <iprintf>
 800ede6:	f06f 030f 	mvn.w	r3, #15
 800edea:	e032      	b.n	800ee52 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d013      	beq.n	800ee1a <pbuf_copy+0x146>
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	895a      	ldrh	r2, [r3, #10]
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	891b      	ldrh	r3, [r3, #8]
 800edfa:	429a      	cmp	r2, r3
 800edfc:	d10d      	bne.n	800ee1a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d009      	beq.n	800ee1a <pbuf_copy+0x146>
 800ee06:	4b15      	ldr	r3, [pc, #84]	@ (800ee5c <pbuf_copy+0x188>)
 800ee08:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800ee0c:	4919      	ldr	r1, [pc, #100]	@ (800ee74 <pbuf_copy+0x1a0>)
 800ee0e:	4815      	ldr	r0, [pc, #84]	@ (800ee64 <pbuf_copy+0x190>)
 800ee10:	f003 f82e 	bl	8011e70 <iprintf>
 800ee14:	f06f 0305 	mvn.w	r3, #5
 800ee18:	e01b      	b.n	800ee52 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d013      	beq.n	800ee48 <pbuf_copy+0x174>
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	895a      	ldrh	r2, [r3, #10]
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	891b      	ldrh	r3, [r3, #8]
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	d10d      	bne.n	800ee48 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d009      	beq.n	800ee48 <pbuf_copy+0x174>
 800ee34:	4b09      	ldr	r3, [pc, #36]	@ (800ee5c <pbuf_copy+0x188>)
 800ee36:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800ee3a:	490e      	ldr	r1, [pc, #56]	@ (800ee74 <pbuf_copy+0x1a0>)
 800ee3c:	4809      	ldr	r0, [pc, #36]	@ (800ee64 <pbuf_copy+0x190>)
 800ee3e:	f003 f817 	bl	8011e70 <iprintf>
 800ee42:	f06f 0305 	mvn.w	r3, #5
 800ee46:	e004      	b.n	800ee52 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	f47f af61 	bne.w	800ed12 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ee50:	2300      	movs	r3, #0
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	3718      	adds	r7, #24
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
 800ee5a:	bf00      	nop
 800ee5c:	08013488 	.word	0x08013488
 800ee60:	08013730 	.word	0x08013730
 800ee64:	080134e8 	.word	0x080134e8
 800ee68:	08013760 	.word	0x08013760
 800ee6c:	08013778 	.word	0x08013778
 800ee70:	08013794 	.word	0x08013794
 800ee74:	080137a4 	.word	0x080137a4

0800ee78 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b084      	sub	sp, #16
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	4603      	mov	r3, r0
 800ee80:	603a      	str	r2, [r7, #0]
 800ee82:	71fb      	strb	r3, [r7, #7]
 800ee84:	460b      	mov	r3, r1
 800ee86:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	8919      	ldrh	r1, [r3, #8]
 800ee8c:	88ba      	ldrh	r2, [r7, #4]
 800ee8e:	79fb      	ldrb	r3, [r7, #7]
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7ff fb25 	bl	800e4e0 <pbuf_alloc>
 800ee96:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d101      	bne.n	800eea2 <pbuf_clone+0x2a>
    return NULL;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	e011      	b.n	800eec6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800eea2:	6839      	ldr	r1, [r7, #0]
 800eea4:	68f8      	ldr	r0, [r7, #12]
 800eea6:	f7ff ff15 	bl	800ecd4 <pbuf_copy>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800eeae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d006      	beq.n	800eec4 <pbuf_clone+0x4c>
 800eeb6:	4b06      	ldr	r3, [pc, #24]	@ (800eed0 <pbuf_clone+0x58>)
 800eeb8:	f240 5224 	movw	r2, #1316	@ 0x524
 800eebc:	4905      	ldr	r1, [pc, #20]	@ (800eed4 <pbuf_clone+0x5c>)
 800eebe:	4806      	ldr	r0, [pc, #24]	@ (800eed8 <pbuf_clone+0x60>)
 800eec0:	f002 ffd6 	bl	8011e70 <iprintf>
  return q;
 800eec4:	68fb      	ldr	r3, [r7, #12]
}
 800eec6:	4618      	mov	r0, r3
 800eec8:	3710      	adds	r7, #16
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}
 800eece:	bf00      	nop
 800eed0:	08013488 	.word	0x08013488
 800eed4:	080138fc 	.word	0x080138fc
 800eed8:	080134e8 	.word	0x080134e8

0800eedc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b086      	sub	sp, #24
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	60f8      	str	r0, [r7, #12]
 800eee4:	60b9      	str	r1, [r7, #8]
 800eee6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800eee8:	2007      	movs	r0, #7
 800eeea:	f7fe ff4d 	bl	800dd88 <memp_malloc>
 800eeee:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d109      	bne.n	800ef0a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800eef6:	693b      	ldr	r3, [r7, #16]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d151      	bne.n	800efa0 <sys_timeout_abs+0xc4>
 800eefc:	4b2a      	ldr	r3, [pc, #168]	@ (800efa8 <sys_timeout_abs+0xcc>)
 800eefe:	22be      	movs	r2, #190	@ 0xbe
 800ef00:	492a      	ldr	r1, [pc, #168]	@ (800efac <sys_timeout_abs+0xd0>)
 800ef02:	482b      	ldr	r0, [pc, #172]	@ (800efb0 <sys_timeout_abs+0xd4>)
 800ef04:	f002 ffb4 	bl	8011e70 <iprintf>
    return;
 800ef08:	e04a      	b.n	800efa0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ef0a:	693b      	ldr	r3, [r7, #16]
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	68ba      	ldr	r2, [r7, #8]
 800ef14:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	687a      	ldr	r2, [r7, #4]
 800ef1a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ef1c:	693b      	ldr	r3, [r7, #16]
 800ef1e:	68fa      	ldr	r2, [r7, #12]
 800ef20:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ef22:	4b24      	ldr	r3, [pc, #144]	@ (800efb4 <sys_timeout_abs+0xd8>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d103      	bne.n	800ef32 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ef2a:	4a22      	ldr	r2, [pc, #136]	@ (800efb4 <sys_timeout_abs+0xd8>)
 800ef2c:	693b      	ldr	r3, [r7, #16]
 800ef2e:	6013      	str	r3, [r2, #0]
    return;
 800ef30:	e037      	b.n	800efa2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ef32:	693b      	ldr	r3, [r7, #16]
 800ef34:	685a      	ldr	r2, [r3, #4]
 800ef36:	4b1f      	ldr	r3, [pc, #124]	@ (800efb4 <sys_timeout_abs+0xd8>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	685b      	ldr	r3, [r3, #4]
 800ef3c:	1ad3      	subs	r3, r2, r3
 800ef3e:	0fdb      	lsrs	r3, r3, #31
 800ef40:	f003 0301 	and.w	r3, r3, #1
 800ef44:	b2db      	uxtb	r3, r3
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d007      	beq.n	800ef5a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ef4a:	4b1a      	ldr	r3, [pc, #104]	@ (800efb4 <sys_timeout_abs+0xd8>)
 800ef4c:	681a      	ldr	r2, [r3, #0]
 800ef4e:	693b      	ldr	r3, [r7, #16]
 800ef50:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ef52:	4a18      	ldr	r2, [pc, #96]	@ (800efb4 <sys_timeout_abs+0xd8>)
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	6013      	str	r3, [r2, #0]
 800ef58:	e023      	b.n	800efa2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ef5a:	4b16      	ldr	r3, [pc, #88]	@ (800efb4 <sys_timeout_abs+0xd8>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	617b      	str	r3, [r7, #20]
 800ef60:	e01a      	b.n	800ef98 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d00b      	beq.n	800ef82 <sys_timeout_abs+0xa6>
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	685a      	ldr	r2, [r3, #4]
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	685b      	ldr	r3, [r3, #4]
 800ef74:	1ad3      	subs	r3, r2, r3
 800ef76:	0fdb      	lsrs	r3, r3, #31
 800ef78:	f003 0301 	and.w	r3, r3, #1
 800ef7c:	b2db      	uxtb	r3, r3
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d007      	beq.n	800ef92 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	681a      	ldr	r2, [r3, #0]
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	693a      	ldr	r2, [r7, #16]
 800ef8e:	601a      	str	r2, [r3, #0]
        break;
 800ef90:	e007      	b.n	800efa2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	617b      	str	r3, [r7, #20]
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d1e1      	bne.n	800ef62 <sys_timeout_abs+0x86>
 800ef9e:	e000      	b.n	800efa2 <sys_timeout_abs+0xc6>
    return;
 800efa0:	bf00      	nop
      }
    }
  }
}
 800efa2:	3718      	adds	r7, #24
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}
 800efa8:	08013910 	.word	0x08013910
 800efac:	08013944 	.word	0x08013944
 800efb0:	08013984 	.word	0x08013984
 800efb4:	2406ce54 	.word	0x2406ce54

0800efb8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b086      	sub	sp, #24
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	685b      	ldr	r3, [r3, #4]
 800efc8:	4798      	blx	r3

  now = sys_now();
 800efca:	f7f9 fef3 	bl	8008db4 <sys_now>
 800efce:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	681a      	ldr	r2, [r3, #0]
 800efd4:	4b0f      	ldr	r3, [pc, #60]	@ (800f014 <lwip_cyclic_timer+0x5c>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	4413      	add	r3, r2
 800efda:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800efdc:	68fa      	ldr	r2, [r7, #12]
 800efde:	693b      	ldr	r3, [r7, #16]
 800efe0:	1ad3      	subs	r3, r2, r3
 800efe2:	0fdb      	lsrs	r3, r3, #31
 800efe4:	f003 0301 	and.w	r3, r3, #1
 800efe8:	b2db      	uxtb	r3, r3
 800efea:	2b00      	cmp	r3, #0
 800efec:	d009      	beq.n	800f002 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800efee:	697b      	ldr	r3, [r7, #20]
 800eff0:	681a      	ldr	r2, [r3, #0]
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	4413      	add	r3, r2
 800eff6:	687a      	ldr	r2, [r7, #4]
 800eff8:	4907      	ldr	r1, [pc, #28]	@ (800f018 <lwip_cyclic_timer+0x60>)
 800effa:	4618      	mov	r0, r3
 800effc:	f7ff ff6e 	bl	800eedc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f000:	e004      	b.n	800f00c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f002:	687a      	ldr	r2, [r7, #4]
 800f004:	4904      	ldr	r1, [pc, #16]	@ (800f018 <lwip_cyclic_timer+0x60>)
 800f006:	68f8      	ldr	r0, [r7, #12]
 800f008:	f7ff ff68 	bl	800eedc <sys_timeout_abs>
}
 800f00c:	bf00      	nop
 800f00e:	3718      	adds	r7, #24
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}
 800f014:	2406ce58 	.word	0x2406ce58
 800f018:	0800efb9 	.word	0x0800efb9

0800f01c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b082      	sub	sp, #8
 800f020:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f022:	2300      	movs	r3, #0
 800f024:	607b      	str	r3, [r7, #4]
 800f026:	e00e      	b.n	800f046 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f028:	4a0b      	ldr	r2, [pc, #44]	@ (800f058 <sys_timeouts_init+0x3c>)
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	00db      	lsls	r3, r3, #3
 800f034:	4a08      	ldr	r2, [pc, #32]	@ (800f058 <sys_timeouts_init+0x3c>)
 800f036:	4413      	add	r3, r2
 800f038:	461a      	mov	r2, r3
 800f03a:	4908      	ldr	r1, [pc, #32]	@ (800f05c <sys_timeouts_init+0x40>)
 800f03c:	f000 f810 	bl	800f060 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	3301      	adds	r3, #1
 800f044:	607b      	str	r3, [r7, #4]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2b01      	cmp	r3, #1
 800f04a:	d9ed      	bls.n	800f028 <sys_timeouts_init+0xc>
  }
}
 800f04c:	bf00      	nop
 800f04e:	bf00      	nop
 800f050:	3708      	adds	r7, #8
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}
 800f056:	bf00      	nop
 800f058:	08014528 	.word	0x08014528
 800f05c:	0800efb9 	.word	0x0800efb9

0800f060 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b086      	sub	sp, #24
 800f064:	af00      	add	r7, sp, #0
 800f066:	60f8      	str	r0, [r7, #12]
 800f068:	60b9      	str	r1, [r7, #8]
 800f06a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f072:	d306      	bcc.n	800f082 <sys_timeout+0x22>
 800f074:	4b0a      	ldr	r3, [pc, #40]	@ (800f0a0 <sys_timeout+0x40>)
 800f076:	f240 1229 	movw	r2, #297	@ 0x129
 800f07a:	490a      	ldr	r1, [pc, #40]	@ (800f0a4 <sys_timeout+0x44>)
 800f07c:	480a      	ldr	r0, [pc, #40]	@ (800f0a8 <sys_timeout+0x48>)
 800f07e:	f002 fef7 	bl	8011e70 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f082:	f7f9 fe97 	bl	8008db4 <sys_now>
 800f086:	4602      	mov	r2, r0
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	4413      	add	r3, r2
 800f08c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	68b9      	ldr	r1, [r7, #8]
 800f092:	6978      	ldr	r0, [r7, #20]
 800f094:	f7ff ff22 	bl	800eedc <sys_timeout_abs>
#endif
}
 800f098:	bf00      	nop
 800f09a:	3718      	adds	r7, #24
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}
 800f0a0:	08013910 	.word	0x08013910
 800f0a4:	080139ac 	.word	0x080139ac
 800f0a8:	08013984 	.word	0x08013984

0800f0ac <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f0b2:	f7f9 fe7f 	bl	8008db4 <sys_now>
 800f0b6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800f0b8:	4b17      	ldr	r3, [pc, #92]	@ (800f118 <sys_check_timeouts+0x6c>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d022      	beq.n	800f10a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	685b      	ldr	r3, [r3, #4]
 800f0c8:	68fa      	ldr	r2, [r7, #12]
 800f0ca:	1ad3      	subs	r3, r2, r3
 800f0cc:	0fdb      	lsrs	r3, r3, #31
 800f0ce:	f003 0301 	and.w	r3, r3, #1
 800f0d2:	b2db      	uxtb	r3, r3
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d11a      	bne.n	800f10e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	4a0e      	ldr	r2, [pc, #56]	@ (800f118 <sys_check_timeouts+0x6c>)
 800f0de:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	689b      	ldr	r3, [r3, #8]
 800f0e4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	68db      	ldr	r3, [r3, #12]
 800f0ea:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	685b      	ldr	r3, [r3, #4]
 800f0f0:	4a0a      	ldr	r2, [pc, #40]	@ (800f11c <sys_check_timeouts+0x70>)
 800f0f2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f0f4:	68b9      	ldr	r1, [r7, #8]
 800f0f6:	2007      	movs	r0, #7
 800f0f8:	f7fe feb6 	bl	800de68 <memp_free>
    if (handler != NULL) {
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d0da      	beq.n	800f0b8 <sys_check_timeouts+0xc>
      handler(arg);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6838      	ldr	r0, [r7, #0]
 800f106:	4798      	blx	r3
  do {
 800f108:	e7d6      	b.n	800f0b8 <sys_check_timeouts+0xc>
      return;
 800f10a:	bf00      	nop
 800f10c:	e000      	b.n	800f110 <sys_check_timeouts+0x64>
      return;
 800f10e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f110:	3710      	adds	r7, #16
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	2406ce54 	.word	0x2406ce54
 800f11c:	2406ce58 	.word	0x2406ce58

0800f120 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b082      	sub	sp, #8
 800f124:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800f126:	4b16      	ldr	r3, [pc, #88]	@ (800f180 <sys_timeouts_sleeptime+0x60>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d102      	bne.n	800f134 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800f12e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f132:	e020      	b.n	800f176 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800f134:	f7f9 fe3e 	bl	8008db4 <sys_now>
 800f138:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800f13a:	4b11      	ldr	r3, [pc, #68]	@ (800f180 <sys_timeouts_sleeptime+0x60>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	685a      	ldr	r2, [r3, #4]
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	1ad3      	subs	r3, r2, r3
 800f144:	0fdb      	lsrs	r3, r3, #31
 800f146:	f003 0301 	and.w	r3, r3, #1
 800f14a:	b2db      	uxtb	r3, r3
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d001      	beq.n	800f154 <sys_timeouts_sleeptime+0x34>
    return 0;
 800f150:	2300      	movs	r3, #0
 800f152:	e010      	b.n	800f176 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800f154:	4b0a      	ldr	r3, [pc, #40]	@ (800f180 <sys_timeouts_sleeptime+0x60>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	685a      	ldr	r2, [r3, #4]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	1ad3      	subs	r3, r2, r3
 800f15e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	2b00      	cmp	r3, #0
 800f164:	da06      	bge.n	800f174 <sys_timeouts_sleeptime+0x54>
 800f166:	4b07      	ldr	r3, [pc, #28]	@ (800f184 <sys_timeouts_sleeptime+0x64>)
 800f168:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800f16c:	4906      	ldr	r1, [pc, #24]	@ (800f188 <sys_timeouts_sleeptime+0x68>)
 800f16e:	4807      	ldr	r0, [pc, #28]	@ (800f18c <sys_timeouts_sleeptime+0x6c>)
 800f170:	f002 fe7e 	bl	8011e70 <iprintf>
    return ret;
 800f174:	683b      	ldr	r3, [r7, #0]
  }
}
 800f176:	4618      	mov	r0, r3
 800f178:	3708      	adds	r7, #8
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bd80      	pop	{r7, pc}
 800f17e:	bf00      	nop
 800f180:	2406ce54 	.word	0x2406ce54
 800f184:	08013910 	.word	0x08013910
 800f188:	080139e4 	.word	0x080139e4
 800f18c:	08013984 	.word	0x08013984

0800f190 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f194:	f002 fd6c 	bl	8011c70 <rand>
 800f198:	4603      	mov	r3, r0
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f1a0:	b29b      	uxth	r3, r3
 800f1a2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800f1a6:	b29a      	uxth	r2, r3
 800f1a8:	4b01      	ldr	r3, [pc, #4]	@ (800f1b0 <udp_init+0x20>)
 800f1aa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f1ac:	bf00      	nop
 800f1ae:	bd80      	pop	{r7, pc}
 800f1b0:	24000038 	.word	0x24000038

0800f1b4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b084      	sub	sp, #16
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	60f8      	str	r0, [r7, #12]
 800f1bc:	60b9      	str	r1, [r7, #8]
 800f1be:	4613      	mov	r3, r2
 800f1c0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d105      	bne.n	800f1d4 <udp_input_local_match+0x20>
 800f1c8:	4b27      	ldr	r3, [pc, #156]	@ (800f268 <udp_input_local_match+0xb4>)
 800f1ca:	2287      	movs	r2, #135	@ 0x87
 800f1cc:	4927      	ldr	r1, [pc, #156]	@ (800f26c <udp_input_local_match+0xb8>)
 800f1ce:	4828      	ldr	r0, [pc, #160]	@ (800f270 <udp_input_local_match+0xbc>)
 800f1d0:	f002 fe4e 	bl	8011e70 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d105      	bne.n	800f1e6 <udp_input_local_match+0x32>
 800f1da:	4b23      	ldr	r3, [pc, #140]	@ (800f268 <udp_input_local_match+0xb4>)
 800f1dc:	2288      	movs	r2, #136	@ 0x88
 800f1de:	4925      	ldr	r1, [pc, #148]	@ (800f274 <udp_input_local_match+0xc0>)
 800f1e0:	4823      	ldr	r0, [pc, #140]	@ (800f270 <udp_input_local_match+0xbc>)
 800f1e2:	f002 fe45 	bl	8011e70 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	7a1b      	ldrb	r3, [r3, #8]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d00b      	beq.n	800f206 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	7a1a      	ldrb	r2, [r3, #8]
 800f1f2:	4b21      	ldr	r3, [pc, #132]	@ (800f278 <udp_input_local_match+0xc4>)
 800f1f4:	685b      	ldr	r3, [r3, #4]
 800f1f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f1fa:	3301      	adds	r3, #1
 800f1fc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f1fe:	429a      	cmp	r2, r3
 800f200:	d001      	beq.n	800f206 <udp_input_local_match+0x52>
    return 0;
 800f202:	2300      	movs	r3, #0
 800f204:	e02b      	b.n	800f25e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f206:	79fb      	ldrb	r3, [r7, #7]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d018      	beq.n	800f23e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d013      	beq.n	800f23a <udp_input_local_match+0x86>
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d00f      	beq.n	800f23a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f21a:	4b17      	ldr	r3, [pc, #92]	@ (800f278 <udp_input_local_match+0xc4>)
 800f21c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f21e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f222:	d00a      	beq.n	800f23a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	681a      	ldr	r2, [r3, #0]
 800f228:	4b13      	ldr	r3, [pc, #76]	@ (800f278 <udp_input_local_match+0xc4>)
 800f22a:	695b      	ldr	r3, [r3, #20]
 800f22c:	405a      	eors	r2, r3
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	3308      	adds	r3, #8
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f236:	2b00      	cmp	r3, #0
 800f238:	d110      	bne.n	800f25c <udp_input_local_match+0xa8>
          return 1;
 800f23a:	2301      	movs	r3, #1
 800f23c:	e00f      	b.n	800f25e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d009      	beq.n	800f258 <udp_input_local_match+0xa4>
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d005      	beq.n	800f258 <udp_input_local_match+0xa4>
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681a      	ldr	r2, [r3, #0]
 800f250:	4b09      	ldr	r3, [pc, #36]	@ (800f278 <udp_input_local_match+0xc4>)
 800f252:	695b      	ldr	r3, [r3, #20]
 800f254:	429a      	cmp	r2, r3
 800f256:	d101      	bne.n	800f25c <udp_input_local_match+0xa8>
        return 1;
 800f258:	2301      	movs	r3, #1
 800f25a:	e000      	b.n	800f25e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f25c:	2300      	movs	r3, #0
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3710      	adds	r7, #16
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}
 800f266:	bf00      	nop
 800f268:	080139f8 	.word	0x080139f8
 800f26c:	08013a28 	.word	0x08013a28
 800f270:	08013a4c 	.word	0x08013a4c
 800f274:	08013a74 	.word	0x08013a74
 800f278:	2406a118 	.word	0x2406a118

0800f27c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f27c:	b590      	push	{r4, r7, lr}
 800f27e:	b08d      	sub	sp, #52	@ 0x34
 800f280:	af02      	add	r7, sp, #8
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f286:	2300      	movs	r3, #0
 800f288:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d105      	bne.n	800f29c <udp_input+0x20>
 800f290:	4b7c      	ldr	r3, [pc, #496]	@ (800f484 <udp_input+0x208>)
 800f292:	22cf      	movs	r2, #207	@ 0xcf
 800f294:	497c      	ldr	r1, [pc, #496]	@ (800f488 <udp_input+0x20c>)
 800f296:	487d      	ldr	r0, [pc, #500]	@ (800f48c <udp_input+0x210>)
 800f298:	f002 fdea 	bl	8011e70 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d105      	bne.n	800f2ae <udp_input+0x32>
 800f2a2:	4b78      	ldr	r3, [pc, #480]	@ (800f484 <udp_input+0x208>)
 800f2a4:	22d0      	movs	r2, #208	@ 0xd0
 800f2a6:	497a      	ldr	r1, [pc, #488]	@ (800f490 <udp_input+0x214>)
 800f2a8:	4878      	ldr	r0, [pc, #480]	@ (800f48c <udp_input+0x210>)
 800f2aa:	f002 fde1 	bl	8011e70 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	895b      	ldrh	r3, [r3, #10]
 800f2b2:	2b07      	cmp	r3, #7
 800f2b4:	d803      	bhi.n	800f2be <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f7ff fbf4 	bl	800eaa4 <pbuf_free>
    goto end;
 800f2bc:	e0de      	b.n	800f47c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	685b      	ldr	r3, [r3, #4]
 800f2c2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f2c4:	4b73      	ldr	r3, [pc, #460]	@ (800f494 <udp_input+0x218>)
 800f2c6:	695b      	ldr	r3, [r3, #20]
 800f2c8:	4a72      	ldr	r2, [pc, #456]	@ (800f494 <udp_input+0x218>)
 800f2ca:	6812      	ldr	r2, [r2, #0]
 800f2cc:	4611      	mov	r1, r2
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f001 fca4 	bl	8010c1c <ip4_addr_isbroadcast_u32>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	881b      	ldrh	r3, [r3, #0]
 800f2dc:	b29b      	uxth	r3, r3
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f7fe f804 	bl	800d2ec <lwip_htons>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	885b      	ldrh	r3, [r3, #2]
 800f2ec:	b29b      	uxth	r3, r3
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7fd fffc 	bl	800d2ec <lwip_htons>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f300:	2300      	movs	r3, #0
 800f302:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f304:	4b64      	ldr	r3, [pc, #400]	@ (800f498 <udp_input+0x21c>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	627b      	str	r3, [r7, #36]	@ 0x24
 800f30a:	e054      	b.n	800f3b6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f30e:	8a5b      	ldrh	r3, [r3, #18]
 800f310:	89fa      	ldrh	r2, [r7, #14]
 800f312:	429a      	cmp	r2, r3
 800f314:	d14a      	bne.n	800f3ac <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f316:	7cfb      	ldrb	r3, [r7, #19]
 800f318:	461a      	mov	r2, r3
 800f31a:	6839      	ldr	r1, [r7, #0]
 800f31c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f31e:	f7ff ff49 	bl	800f1b4 <udp_input_local_match>
 800f322:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f324:	2b00      	cmp	r3, #0
 800f326:	d041      	beq.n	800f3ac <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f32a:	7c1b      	ldrb	r3, [r3, #16]
 800f32c:	f003 0304 	and.w	r3, r3, #4
 800f330:	2b00      	cmp	r3, #0
 800f332:	d11d      	bne.n	800f370 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f334:	69fb      	ldr	r3, [r7, #28]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d102      	bne.n	800f340 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f33c:	61fb      	str	r3, [r7, #28]
 800f33e:	e017      	b.n	800f370 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f340:	7cfb      	ldrb	r3, [r7, #19]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d014      	beq.n	800f370 <udp_input+0xf4>
 800f346:	4b53      	ldr	r3, [pc, #332]	@ (800f494 <udp_input+0x218>)
 800f348:	695b      	ldr	r3, [r3, #20]
 800f34a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f34e:	d10f      	bne.n	800f370 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f350:	69fb      	ldr	r3, [r7, #28]
 800f352:	681a      	ldr	r2, [r3, #0]
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	3304      	adds	r3, #4
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d008      	beq.n	800f370 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f360:	681a      	ldr	r2, [r3, #0]
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	3304      	adds	r3, #4
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	429a      	cmp	r2, r3
 800f36a:	d101      	bne.n	800f370 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f36e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f372:	8a9b      	ldrh	r3, [r3, #20]
 800f374:	8a3a      	ldrh	r2, [r7, #16]
 800f376:	429a      	cmp	r2, r3
 800f378:	d118      	bne.n	800f3ac <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f37c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d005      	beq.n	800f38e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f384:	685a      	ldr	r2, [r3, #4]
 800f386:	4b43      	ldr	r3, [pc, #268]	@ (800f494 <udp_input+0x218>)
 800f388:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f38a:	429a      	cmp	r2, r3
 800f38c:	d10e      	bne.n	800f3ac <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f38e:	6a3b      	ldr	r3, [r7, #32]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d014      	beq.n	800f3be <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f396:	68da      	ldr	r2, [r3, #12]
 800f398:	6a3b      	ldr	r3, [r7, #32]
 800f39a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f39c:	4b3e      	ldr	r3, [pc, #248]	@ (800f498 <udp_input+0x21c>)
 800f39e:	681a      	ldr	r2, [r3, #0]
 800f3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3a2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f3a4:	4a3c      	ldr	r2, [pc, #240]	@ (800f498 <udp_input+0x21c>)
 800f3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3a8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f3aa:	e008      	b.n	800f3be <udp_input+0x142>
      }
    }

    prev = pcb;
 800f3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3ae:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3b2:	68db      	ldr	r3, [r3, #12]
 800f3b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800f3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d1a7      	bne.n	800f30c <udp_input+0x90>
 800f3bc:	e000      	b.n	800f3c0 <udp_input+0x144>
        break;
 800f3be:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d101      	bne.n	800f3ca <udp_input+0x14e>
    pcb = uncon_pcb;
 800f3c6:	69fb      	ldr	r3, [r7, #28]
 800f3c8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d002      	beq.n	800f3d6 <udp_input+0x15a>
    for_us = 1;
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	76fb      	strb	r3, [r7, #27]
 800f3d4:	e00a      	b.n	800f3ec <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	3304      	adds	r3, #4
 800f3da:	681a      	ldr	r2, [r3, #0]
 800f3dc:	4b2d      	ldr	r3, [pc, #180]	@ (800f494 <udp_input+0x218>)
 800f3de:	695b      	ldr	r3, [r3, #20]
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	bf0c      	ite	eq
 800f3e4:	2301      	moveq	r3, #1
 800f3e6:	2300      	movne	r3, #0
 800f3e8:	b2db      	uxtb	r3, r3
 800f3ea:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f3ec:	7efb      	ldrb	r3, [r7, #27]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d041      	beq.n	800f476 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f3f2:	2108      	movs	r1, #8
 800f3f4:	6878      	ldr	r0, [r7, #4]
 800f3f6:	f7ff facf 	bl	800e998 <pbuf_remove_header>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d00a      	beq.n	800f416 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f400:	4b20      	ldr	r3, [pc, #128]	@ (800f484 <udp_input+0x208>)
 800f402:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800f406:	4925      	ldr	r1, [pc, #148]	@ (800f49c <udp_input+0x220>)
 800f408:	4820      	ldr	r0, [pc, #128]	@ (800f48c <udp_input+0x210>)
 800f40a:	f002 fd31 	bl	8011e70 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	f7ff fb48 	bl	800eaa4 <pbuf_free>
      goto end;
 800f414:	e032      	b.n	800f47c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d012      	beq.n	800f442 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f41e:	699b      	ldr	r3, [r3, #24]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d00a      	beq.n	800f43a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f426:	699c      	ldr	r4, [r3, #24]
 800f428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f42a:	69d8      	ldr	r0, [r3, #28]
 800f42c:	8a3b      	ldrh	r3, [r7, #16]
 800f42e:	9300      	str	r3, [sp, #0]
 800f430:	4b1b      	ldr	r3, [pc, #108]	@ (800f4a0 <udp_input+0x224>)
 800f432:	687a      	ldr	r2, [r7, #4]
 800f434:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f436:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f438:	e021      	b.n	800f47e <udp_input+0x202>
        pbuf_free(p);
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f7ff fb32 	bl	800eaa4 <pbuf_free>
        goto end;
 800f440:	e01c      	b.n	800f47c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f442:	7cfb      	ldrb	r3, [r7, #19]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d112      	bne.n	800f46e <udp_input+0x1f2>
 800f448:	4b12      	ldr	r3, [pc, #72]	@ (800f494 <udp_input+0x218>)
 800f44a:	695b      	ldr	r3, [r3, #20]
 800f44c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f450:	2be0      	cmp	r3, #224	@ 0xe0
 800f452:	d00c      	beq.n	800f46e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f454:	4b0f      	ldr	r3, [pc, #60]	@ (800f494 <udp_input+0x218>)
 800f456:	899b      	ldrh	r3, [r3, #12]
 800f458:	3308      	adds	r3, #8
 800f45a:	b29b      	uxth	r3, r3
 800f45c:	b21b      	sxth	r3, r3
 800f45e:	4619      	mov	r1, r3
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f7ff fb0c 	bl	800ea7e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f466:	2103      	movs	r1, #3
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f001 f8b7 	bl	80105dc <icmp_dest_unreach>
      pbuf_free(p);
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f7ff fb18 	bl	800eaa4 <pbuf_free>
  return;
 800f474:	e003      	b.n	800f47e <udp_input+0x202>
    pbuf_free(p);
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f7ff fb14 	bl	800eaa4 <pbuf_free>
  return;
 800f47c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f47e:	372c      	adds	r7, #44	@ 0x2c
 800f480:	46bd      	mov	sp, r7
 800f482:	bd90      	pop	{r4, r7, pc}
 800f484:	080139f8 	.word	0x080139f8
 800f488:	08013a9c 	.word	0x08013a9c
 800f48c:	08013a4c 	.word	0x08013a4c
 800f490:	08013ab4 	.word	0x08013ab4
 800f494:	2406a118 	.word	0x2406a118
 800f498:	2406ce5c 	.word	0x2406ce5c
 800f49c:	08013ad0 	.word	0x08013ad0
 800f4a0:	2406a128 	.word	0x2406a128

0800f4a4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	b085      	sub	sp, #20
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d01e      	beq.n	800f4f2 <udp_netif_ip_addr_changed+0x4e>
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d01a      	beq.n	800f4f2 <udp_netif_ip_addr_changed+0x4e>
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d017      	beq.n	800f4f2 <udp_netif_ip_addr_changed+0x4e>
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d013      	beq.n	800f4f2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f4ca:	4b0d      	ldr	r3, [pc, #52]	@ (800f500 <udp_netif_ip_addr_changed+0x5c>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	60fb      	str	r3, [r7, #12]
 800f4d0:	e00c      	b.n	800f4ec <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	681a      	ldr	r2, [r3, #0]
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	429a      	cmp	r2, r3
 800f4dc:	d103      	bne.n	800f4e6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	681a      	ldr	r2, [r3, #0]
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	68db      	ldr	r3, [r3, #12]
 800f4ea:	60fb      	str	r3, [r7, #12]
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d1ef      	bne.n	800f4d2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f4f2:	bf00      	nop
 800f4f4:	3714      	adds	r7, #20
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fc:	4770      	bx	lr
 800f4fe:	bf00      	nop
 800f500:	2406ce5c 	.word	0x2406ce5c

0800f504 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b082      	sub	sp, #8
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f50c:	4915      	ldr	r1, [pc, #84]	@ (800f564 <etharp_free_entry+0x60>)
 800f50e:	687a      	ldr	r2, [r7, #4]
 800f510:	4613      	mov	r3, r2
 800f512:	005b      	lsls	r3, r3, #1
 800f514:	4413      	add	r3, r2
 800f516:	00db      	lsls	r3, r3, #3
 800f518:	440b      	add	r3, r1
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d013      	beq.n	800f548 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f520:	4910      	ldr	r1, [pc, #64]	@ (800f564 <etharp_free_entry+0x60>)
 800f522:	687a      	ldr	r2, [r7, #4]
 800f524:	4613      	mov	r3, r2
 800f526:	005b      	lsls	r3, r3, #1
 800f528:	4413      	add	r3, r2
 800f52a:	00db      	lsls	r3, r3, #3
 800f52c:	440b      	add	r3, r1
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	4618      	mov	r0, r3
 800f532:	f7ff fab7 	bl	800eaa4 <pbuf_free>
    arp_table[i].q = NULL;
 800f536:	490b      	ldr	r1, [pc, #44]	@ (800f564 <etharp_free_entry+0x60>)
 800f538:	687a      	ldr	r2, [r7, #4]
 800f53a:	4613      	mov	r3, r2
 800f53c:	005b      	lsls	r3, r3, #1
 800f53e:	4413      	add	r3, r2
 800f540:	00db      	lsls	r3, r3, #3
 800f542:	440b      	add	r3, r1
 800f544:	2200      	movs	r2, #0
 800f546:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f548:	4906      	ldr	r1, [pc, #24]	@ (800f564 <etharp_free_entry+0x60>)
 800f54a:	687a      	ldr	r2, [r7, #4]
 800f54c:	4613      	mov	r3, r2
 800f54e:	005b      	lsls	r3, r3, #1
 800f550:	4413      	add	r3, r2
 800f552:	00db      	lsls	r3, r3, #3
 800f554:	440b      	add	r3, r1
 800f556:	3314      	adds	r3, #20
 800f558:	2200      	movs	r2, #0
 800f55a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800f55c:	bf00      	nop
 800f55e:	3708      	adds	r7, #8
 800f560:	46bd      	mov	sp, r7
 800f562:	bd80      	pop	{r7, pc}
 800f564:	2406ce60 	.word	0x2406ce60

0800f568 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b082      	sub	sp, #8
 800f56c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f56e:	2300      	movs	r3, #0
 800f570:	607b      	str	r3, [r7, #4]
 800f572:	e096      	b.n	800f6a2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800f574:	494f      	ldr	r1, [pc, #316]	@ (800f6b4 <etharp_tmr+0x14c>)
 800f576:	687a      	ldr	r2, [r7, #4]
 800f578:	4613      	mov	r3, r2
 800f57a:	005b      	lsls	r3, r3, #1
 800f57c:	4413      	add	r3, r2
 800f57e:	00db      	lsls	r3, r3, #3
 800f580:	440b      	add	r3, r1
 800f582:	3314      	adds	r3, #20
 800f584:	781b      	ldrb	r3, [r3, #0]
 800f586:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800f588:	78fb      	ldrb	r3, [r7, #3]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	f000 8086 	beq.w	800f69c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800f590:	4948      	ldr	r1, [pc, #288]	@ (800f6b4 <etharp_tmr+0x14c>)
 800f592:	687a      	ldr	r2, [r7, #4]
 800f594:	4613      	mov	r3, r2
 800f596:	005b      	lsls	r3, r3, #1
 800f598:	4413      	add	r3, r2
 800f59a:	00db      	lsls	r3, r3, #3
 800f59c:	440b      	add	r3, r1
 800f59e:	3312      	adds	r3, #18
 800f5a0:	881b      	ldrh	r3, [r3, #0]
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	b298      	uxth	r0, r3
 800f5a6:	4943      	ldr	r1, [pc, #268]	@ (800f6b4 <etharp_tmr+0x14c>)
 800f5a8:	687a      	ldr	r2, [r7, #4]
 800f5aa:	4613      	mov	r3, r2
 800f5ac:	005b      	lsls	r3, r3, #1
 800f5ae:	4413      	add	r3, r2
 800f5b0:	00db      	lsls	r3, r3, #3
 800f5b2:	440b      	add	r3, r1
 800f5b4:	3312      	adds	r3, #18
 800f5b6:	4602      	mov	r2, r0
 800f5b8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f5ba:	493e      	ldr	r1, [pc, #248]	@ (800f6b4 <etharp_tmr+0x14c>)
 800f5bc:	687a      	ldr	r2, [r7, #4]
 800f5be:	4613      	mov	r3, r2
 800f5c0:	005b      	lsls	r3, r3, #1
 800f5c2:	4413      	add	r3, r2
 800f5c4:	00db      	lsls	r3, r3, #3
 800f5c6:	440b      	add	r3, r1
 800f5c8:	3312      	adds	r3, #18
 800f5ca:	881b      	ldrh	r3, [r3, #0]
 800f5cc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800f5d0:	d215      	bcs.n	800f5fe <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f5d2:	4938      	ldr	r1, [pc, #224]	@ (800f6b4 <etharp_tmr+0x14c>)
 800f5d4:	687a      	ldr	r2, [r7, #4]
 800f5d6:	4613      	mov	r3, r2
 800f5d8:	005b      	lsls	r3, r3, #1
 800f5da:	4413      	add	r3, r2
 800f5dc:	00db      	lsls	r3, r3, #3
 800f5de:	440b      	add	r3, r1
 800f5e0:	3314      	adds	r3, #20
 800f5e2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f5e4:	2b01      	cmp	r3, #1
 800f5e6:	d10e      	bne.n	800f606 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800f5e8:	4932      	ldr	r1, [pc, #200]	@ (800f6b4 <etharp_tmr+0x14c>)
 800f5ea:	687a      	ldr	r2, [r7, #4]
 800f5ec:	4613      	mov	r3, r2
 800f5ee:	005b      	lsls	r3, r3, #1
 800f5f0:	4413      	add	r3, r2
 800f5f2:	00db      	lsls	r3, r3, #3
 800f5f4:	440b      	add	r3, r1
 800f5f6:	3312      	adds	r3, #18
 800f5f8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f5fa:	2b04      	cmp	r3, #4
 800f5fc:	d903      	bls.n	800f606 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	f7ff ff80 	bl	800f504 <etharp_free_entry>
 800f604:	e04a      	b.n	800f69c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f606:	492b      	ldr	r1, [pc, #172]	@ (800f6b4 <etharp_tmr+0x14c>)
 800f608:	687a      	ldr	r2, [r7, #4]
 800f60a:	4613      	mov	r3, r2
 800f60c:	005b      	lsls	r3, r3, #1
 800f60e:	4413      	add	r3, r2
 800f610:	00db      	lsls	r3, r3, #3
 800f612:	440b      	add	r3, r1
 800f614:	3314      	adds	r3, #20
 800f616:	781b      	ldrb	r3, [r3, #0]
 800f618:	2b03      	cmp	r3, #3
 800f61a:	d10a      	bne.n	800f632 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f61c:	4925      	ldr	r1, [pc, #148]	@ (800f6b4 <etharp_tmr+0x14c>)
 800f61e:	687a      	ldr	r2, [r7, #4]
 800f620:	4613      	mov	r3, r2
 800f622:	005b      	lsls	r3, r3, #1
 800f624:	4413      	add	r3, r2
 800f626:	00db      	lsls	r3, r3, #3
 800f628:	440b      	add	r3, r1
 800f62a:	3314      	adds	r3, #20
 800f62c:	2204      	movs	r2, #4
 800f62e:	701a      	strb	r2, [r3, #0]
 800f630:	e034      	b.n	800f69c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f632:	4920      	ldr	r1, [pc, #128]	@ (800f6b4 <etharp_tmr+0x14c>)
 800f634:	687a      	ldr	r2, [r7, #4]
 800f636:	4613      	mov	r3, r2
 800f638:	005b      	lsls	r3, r3, #1
 800f63a:	4413      	add	r3, r2
 800f63c:	00db      	lsls	r3, r3, #3
 800f63e:	440b      	add	r3, r1
 800f640:	3314      	adds	r3, #20
 800f642:	781b      	ldrb	r3, [r3, #0]
 800f644:	2b04      	cmp	r3, #4
 800f646:	d10a      	bne.n	800f65e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f648:	491a      	ldr	r1, [pc, #104]	@ (800f6b4 <etharp_tmr+0x14c>)
 800f64a:	687a      	ldr	r2, [r7, #4]
 800f64c:	4613      	mov	r3, r2
 800f64e:	005b      	lsls	r3, r3, #1
 800f650:	4413      	add	r3, r2
 800f652:	00db      	lsls	r3, r3, #3
 800f654:	440b      	add	r3, r1
 800f656:	3314      	adds	r3, #20
 800f658:	2202      	movs	r2, #2
 800f65a:	701a      	strb	r2, [r3, #0]
 800f65c:	e01e      	b.n	800f69c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f65e:	4915      	ldr	r1, [pc, #84]	@ (800f6b4 <etharp_tmr+0x14c>)
 800f660:	687a      	ldr	r2, [r7, #4]
 800f662:	4613      	mov	r3, r2
 800f664:	005b      	lsls	r3, r3, #1
 800f666:	4413      	add	r3, r2
 800f668:	00db      	lsls	r3, r3, #3
 800f66a:	440b      	add	r3, r1
 800f66c:	3314      	adds	r3, #20
 800f66e:	781b      	ldrb	r3, [r3, #0]
 800f670:	2b01      	cmp	r3, #1
 800f672:	d113      	bne.n	800f69c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f674:	490f      	ldr	r1, [pc, #60]	@ (800f6b4 <etharp_tmr+0x14c>)
 800f676:	687a      	ldr	r2, [r7, #4]
 800f678:	4613      	mov	r3, r2
 800f67a:	005b      	lsls	r3, r3, #1
 800f67c:	4413      	add	r3, r2
 800f67e:	00db      	lsls	r3, r3, #3
 800f680:	440b      	add	r3, r1
 800f682:	3308      	adds	r3, #8
 800f684:	6818      	ldr	r0, [r3, #0]
 800f686:	687a      	ldr	r2, [r7, #4]
 800f688:	4613      	mov	r3, r2
 800f68a:	005b      	lsls	r3, r3, #1
 800f68c:	4413      	add	r3, r2
 800f68e:	00db      	lsls	r3, r3, #3
 800f690:	4a08      	ldr	r2, [pc, #32]	@ (800f6b4 <etharp_tmr+0x14c>)
 800f692:	4413      	add	r3, r2
 800f694:	3304      	adds	r3, #4
 800f696:	4619      	mov	r1, r3
 800f698:	f000 fe6e 	bl	8010378 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	3301      	adds	r3, #1
 800f6a0:	607b      	str	r3, [r7, #4]
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2b09      	cmp	r3, #9
 800f6a6:	f77f af65 	ble.w	800f574 <etharp_tmr+0xc>
      }
    }
  }
}
 800f6aa:	bf00      	nop
 800f6ac:	bf00      	nop
 800f6ae:	3708      	adds	r7, #8
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}
 800f6b4:	2406ce60 	.word	0x2406ce60

0800f6b8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b08a      	sub	sp, #40	@ 0x28
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	60f8      	str	r0, [r7, #12]
 800f6c0:	460b      	mov	r3, r1
 800f6c2:	607a      	str	r2, [r7, #4]
 800f6c4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f6c6:	230a      	movs	r3, #10
 800f6c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f6ca:	230a      	movs	r3, #10
 800f6cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800f6ce:	230a      	movs	r3, #10
 800f6d0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800f6d6:	230a      	movs	r3, #10
 800f6d8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	83bb      	strh	r3, [r7, #28]
 800f6de:	2300      	movs	r3, #0
 800f6e0:	837b      	strh	r3, [r7, #26]
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	843b      	strh	r3, [r7, #32]
 800f6ea:	e0ae      	b.n	800f84a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800f6ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f6f0:	49a6      	ldr	r1, [pc, #664]	@ (800f98c <etharp_find_entry+0x2d4>)
 800f6f2:	4613      	mov	r3, r2
 800f6f4:	005b      	lsls	r3, r3, #1
 800f6f6:	4413      	add	r3, r2
 800f6f8:	00db      	lsls	r3, r3, #3
 800f6fa:	440b      	add	r3, r1
 800f6fc:	3314      	adds	r3, #20
 800f6fe:	781b      	ldrb	r3, [r3, #0]
 800f700:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f702:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800f706:	2b0a      	cmp	r3, #10
 800f708:	d105      	bne.n	800f716 <etharp_find_entry+0x5e>
 800f70a:	7dfb      	ldrb	r3, [r7, #23]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d102      	bne.n	800f716 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800f710:	8c3b      	ldrh	r3, [r7, #32]
 800f712:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f714:	e095      	b.n	800f842 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800f716:	7dfb      	ldrb	r3, [r7, #23]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	f000 8092 	beq.w	800f842 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800f71e:	7dfb      	ldrb	r3, [r7, #23]
 800f720:	2b01      	cmp	r3, #1
 800f722:	d009      	beq.n	800f738 <etharp_find_entry+0x80>
 800f724:	7dfb      	ldrb	r3, [r7, #23]
 800f726:	2b01      	cmp	r3, #1
 800f728:	d806      	bhi.n	800f738 <etharp_find_entry+0x80>
 800f72a:	4b99      	ldr	r3, [pc, #612]	@ (800f990 <etharp_find_entry+0x2d8>)
 800f72c:	f240 1223 	movw	r2, #291	@ 0x123
 800f730:	4998      	ldr	r1, [pc, #608]	@ (800f994 <etharp_find_entry+0x2dc>)
 800f732:	4899      	ldr	r0, [pc, #612]	@ (800f998 <etharp_find_entry+0x2e0>)
 800f734:	f002 fb9c 	bl	8011e70 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d020      	beq.n	800f780 <etharp_find_entry+0xc8>
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	6819      	ldr	r1, [r3, #0]
 800f742:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f746:	4891      	ldr	r0, [pc, #580]	@ (800f98c <etharp_find_entry+0x2d4>)
 800f748:	4613      	mov	r3, r2
 800f74a:	005b      	lsls	r3, r3, #1
 800f74c:	4413      	add	r3, r2
 800f74e:	00db      	lsls	r3, r3, #3
 800f750:	4403      	add	r3, r0
 800f752:	3304      	adds	r3, #4
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	4299      	cmp	r1, r3
 800f758:	d112      	bne.n	800f780 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d00c      	beq.n	800f77a <etharp_find_entry+0xc2>
 800f760:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f764:	4989      	ldr	r1, [pc, #548]	@ (800f98c <etharp_find_entry+0x2d4>)
 800f766:	4613      	mov	r3, r2
 800f768:	005b      	lsls	r3, r3, #1
 800f76a:	4413      	add	r3, r2
 800f76c:	00db      	lsls	r3, r3, #3
 800f76e:	440b      	add	r3, r1
 800f770:	3308      	adds	r3, #8
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	687a      	ldr	r2, [r7, #4]
 800f776:	429a      	cmp	r2, r3
 800f778:	d102      	bne.n	800f780 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800f77a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f77e:	e100      	b.n	800f982 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f780:	7dfb      	ldrb	r3, [r7, #23]
 800f782:	2b01      	cmp	r3, #1
 800f784:	d140      	bne.n	800f808 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800f786:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f78a:	4980      	ldr	r1, [pc, #512]	@ (800f98c <etharp_find_entry+0x2d4>)
 800f78c:	4613      	mov	r3, r2
 800f78e:	005b      	lsls	r3, r3, #1
 800f790:	4413      	add	r3, r2
 800f792:	00db      	lsls	r3, r3, #3
 800f794:	440b      	add	r3, r1
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d01a      	beq.n	800f7d2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800f79c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f7a0:	497a      	ldr	r1, [pc, #488]	@ (800f98c <etharp_find_entry+0x2d4>)
 800f7a2:	4613      	mov	r3, r2
 800f7a4:	005b      	lsls	r3, r3, #1
 800f7a6:	4413      	add	r3, r2
 800f7a8:	00db      	lsls	r3, r3, #3
 800f7aa:	440b      	add	r3, r1
 800f7ac:	3312      	adds	r3, #18
 800f7ae:	881b      	ldrh	r3, [r3, #0]
 800f7b0:	8bba      	ldrh	r2, [r7, #28]
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d845      	bhi.n	800f842 <etharp_find_entry+0x18a>
            old_queue = i;
 800f7b6:	8c3b      	ldrh	r3, [r7, #32]
 800f7b8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800f7ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f7be:	4973      	ldr	r1, [pc, #460]	@ (800f98c <etharp_find_entry+0x2d4>)
 800f7c0:	4613      	mov	r3, r2
 800f7c2:	005b      	lsls	r3, r3, #1
 800f7c4:	4413      	add	r3, r2
 800f7c6:	00db      	lsls	r3, r3, #3
 800f7c8:	440b      	add	r3, r1
 800f7ca:	3312      	adds	r3, #18
 800f7cc:	881b      	ldrh	r3, [r3, #0]
 800f7ce:	83bb      	strh	r3, [r7, #28]
 800f7d0:	e037      	b.n	800f842 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800f7d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f7d6:	496d      	ldr	r1, [pc, #436]	@ (800f98c <etharp_find_entry+0x2d4>)
 800f7d8:	4613      	mov	r3, r2
 800f7da:	005b      	lsls	r3, r3, #1
 800f7dc:	4413      	add	r3, r2
 800f7de:	00db      	lsls	r3, r3, #3
 800f7e0:	440b      	add	r3, r1
 800f7e2:	3312      	adds	r3, #18
 800f7e4:	881b      	ldrh	r3, [r3, #0]
 800f7e6:	8b7a      	ldrh	r2, [r7, #26]
 800f7e8:	429a      	cmp	r2, r3
 800f7ea:	d82a      	bhi.n	800f842 <etharp_find_entry+0x18a>
            old_pending = i;
 800f7ec:	8c3b      	ldrh	r3, [r7, #32]
 800f7ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800f7f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f7f4:	4965      	ldr	r1, [pc, #404]	@ (800f98c <etharp_find_entry+0x2d4>)
 800f7f6:	4613      	mov	r3, r2
 800f7f8:	005b      	lsls	r3, r3, #1
 800f7fa:	4413      	add	r3, r2
 800f7fc:	00db      	lsls	r3, r3, #3
 800f7fe:	440b      	add	r3, r1
 800f800:	3312      	adds	r3, #18
 800f802:	881b      	ldrh	r3, [r3, #0]
 800f804:	837b      	strh	r3, [r7, #26]
 800f806:	e01c      	b.n	800f842 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f808:	7dfb      	ldrb	r3, [r7, #23]
 800f80a:	2b01      	cmp	r3, #1
 800f80c:	d919      	bls.n	800f842 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f80e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f812:	495e      	ldr	r1, [pc, #376]	@ (800f98c <etharp_find_entry+0x2d4>)
 800f814:	4613      	mov	r3, r2
 800f816:	005b      	lsls	r3, r3, #1
 800f818:	4413      	add	r3, r2
 800f81a:	00db      	lsls	r3, r3, #3
 800f81c:	440b      	add	r3, r1
 800f81e:	3312      	adds	r3, #18
 800f820:	881b      	ldrh	r3, [r3, #0]
 800f822:	8b3a      	ldrh	r2, [r7, #24]
 800f824:	429a      	cmp	r2, r3
 800f826:	d80c      	bhi.n	800f842 <etharp_find_entry+0x18a>
            old_stable = i;
 800f828:	8c3b      	ldrh	r3, [r7, #32]
 800f82a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800f82c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f830:	4956      	ldr	r1, [pc, #344]	@ (800f98c <etharp_find_entry+0x2d4>)
 800f832:	4613      	mov	r3, r2
 800f834:	005b      	lsls	r3, r3, #1
 800f836:	4413      	add	r3, r2
 800f838:	00db      	lsls	r3, r3, #3
 800f83a:	440b      	add	r3, r1
 800f83c:	3312      	adds	r3, #18
 800f83e:	881b      	ldrh	r3, [r3, #0]
 800f840:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f842:	8c3b      	ldrh	r3, [r7, #32]
 800f844:	3301      	adds	r3, #1
 800f846:	b29b      	uxth	r3, r3
 800f848:	843b      	strh	r3, [r7, #32]
 800f84a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f84e:	2b09      	cmp	r3, #9
 800f850:	f77f af4c 	ble.w	800f6ec <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f854:	7afb      	ldrb	r3, [r7, #11]
 800f856:	f003 0302 	and.w	r3, r3, #2
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d108      	bne.n	800f870 <etharp_find_entry+0x1b8>
 800f85e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800f862:	2b0a      	cmp	r3, #10
 800f864:	d107      	bne.n	800f876 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f866:	7afb      	ldrb	r3, [r7, #11]
 800f868:	f003 0301 	and.w	r3, r3, #1
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d102      	bne.n	800f876 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800f870:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f874:	e085      	b.n	800f982 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f876:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800f87a:	2b09      	cmp	r3, #9
 800f87c:	dc02      	bgt.n	800f884 <etharp_find_entry+0x1cc>
    i = empty;
 800f87e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f880:	843b      	strh	r3, [r7, #32]
 800f882:	e039      	b.n	800f8f8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f884:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800f888:	2b09      	cmp	r3, #9
 800f88a:	dc14      	bgt.n	800f8b6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800f88c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f88e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f890:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f894:	493d      	ldr	r1, [pc, #244]	@ (800f98c <etharp_find_entry+0x2d4>)
 800f896:	4613      	mov	r3, r2
 800f898:	005b      	lsls	r3, r3, #1
 800f89a:	4413      	add	r3, r2
 800f89c:	00db      	lsls	r3, r3, #3
 800f89e:	440b      	add	r3, r1
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d018      	beq.n	800f8d8 <etharp_find_entry+0x220>
 800f8a6:	4b3a      	ldr	r3, [pc, #232]	@ (800f990 <etharp_find_entry+0x2d8>)
 800f8a8:	f240 126d 	movw	r2, #365	@ 0x16d
 800f8ac:	493b      	ldr	r1, [pc, #236]	@ (800f99c <etharp_find_entry+0x2e4>)
 800f8ae:	483a      	ldr	r0, [pc, #232]	@ (800f998 <etharp_find_entry+0x2e0>)
 800f8b0:	f002 fade 	bl	8011e70 <iprintf>
 800f8b4:	e010      	b.n	800f8d8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f8b6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800f8ba:	2b09      	cmp	r3, #9
 800f8bc:	dc02      	bgt.n	800f8c4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800f8be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f8c0:	843b      	strh	r3, [r7, #32]
 800f8c2:	e009      	b.n	800f8d8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f8c4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f8c8:	2b09      	cmp	r3, #9
 800f8ca:	dc02      	bgt.n	800f8d2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f8cc:	8bfb      	ldrh	r3, [r7, #30]
 800f8ce:	843b      	strh	r3, [r7, #32]
 800f8d0:	e002      	b.n	800f8d8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800f8d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f8d6:	e054      	b.n	800f982 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f8d8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f8dc:	2b09      	cmp	r3, #9
 800f8de:	dd06      	ble.n	800f8ee <etharp_find_entry+0x236>
 800f8e0:	4b2b      	ldr	r3, [pc, #172]	@ (800f990 <etharp_find_entry+0x2d8>)
 800f8e2:	f240 127f 	movw	r2, #383	@ 0x17f
 800f8e6:	492e      	ldr	r1, [pc, #184]	@ (800f9a0 <etharp_find_entry+0x2e8>)
 800f8e8:	482b      	ldr	r0, [pc, #172]	@ (800f998 <etharp_find_entry+0x2e0>)
 800f8ea:	f002 fac1 	bl	8011e70 <iprintf>
    etharp_free_entry(i);
 800f8ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f7ff fe06 	bl	800f504 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f8f8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f8fc:	2b09      	cmp	r3, #9
 800f8fe:	dd06      	ble.n	800f90e <etharp_find_entry+0x256>
 800f900:	4b23      	ldr	r3, [pc, #140]	@ (800f990 <etharp_find_entry+0x2d8>)
 800f902:	f240 1283 	movw	r2, #387	@ 0x183
 800f906:	4926      	ldr	r1, [pc, #152]	@ (800f9a0 <etharp_find_entry+0x2e8>)
 800f908:	4823      	ldr	r0, [pc, #140]	@ (800f998 <etharp_find_entry+0x2e0>)
 800f90a:	f002 fab1 	bl	8011e70 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f90e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f912:	491e      	ldr	r1, [pc, #120]	@ (800f98c <etharp_find_entry+0x2d4>)
 800f914:	4613      	mov	r3, r2
 800f916:	005b      	lsls	r3, r3, #1
 800f918:	4413      	add	r3, r2
 800f91a:	00db      	lsls	r3, r3, #3
 800f91c:	440b      	add	r3, r1
 800f91e:	3314      	adds	r3, #20
 800f920:	781b      	ldrb	r3, [r3, #0]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d006      	beq.n	800f934 <etharp_find_entry+0x27c>
 800f926:	4b1a      	ldr	r3, [pc, #104]	@ (800f990 <etharp_find_entry+0x2d8>)
 800f928:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800f92c:	491d      	ldr	r1, [pc, #116]	@ (800f9a4 <etharp_find_entry+0x2ec>)
 800f92e:	481a      	ldr	r0, [pc, #104]	@ (800f998 <etharp_find_entry+0x2e0>)
 800f930:	f002 fa9e 	bl	8011e70 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d00b      	beq.n	800f952 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f93a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	6819      	ldr	r1, [r3, #0]
 800f942:	4812      	ldr	r0, [pc, #72]	@ (800f98c <etharp_find_entry+0x2d4>)
 800f944:	4613      	mov	r3, r2
 800f946:	005b      	lsls	r3, r3, #1
 800f948:	4413      	add	r3, r2
 800f94a:	00db      	lsls	r3, r3, #3
 800f94c:	4403      	add	r3, r0
 800f94e:	3304      	adds	r3, #4
 800f950:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f952:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f956:	490d      	ldr	r1, [pc, #52]	@ (800f98c <etharp_find_entry+0x2d4>)
 800f958:	4613      	mov	r3, r2
 800f95a:	005b      	lsls	r3, r3, #1
 800f95c:	4413      	add	r3, r2
 800f95e:	00db      	lsls	r3, r3, #3
 800f960:	440b      	add	r3, r1
 800f962:	3312      	adds	r3, #18
 800f964:	2200      	movs	r2, #0
 800f966:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f968:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f96c:	4907      	ldr	r1, [pc, #28]	@ (800f98c <etharp_find_entry+0x2d4>)
 800f96e:	4613      	mov	r3, r2
 800f970:	005b      	lsls	r3, r3, #1
 800f972:	4413      	add	r3, r2
 800f974:	00db      	lsls	r3, r3, #3
 800f976:	440b      	add	r3, r1
 800f978:	3308      	adds	r3, #8
 800f97a:	687a      	ldr	r2, [r7, #4]
 800f97c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800f97e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800f982:	4618      	mov	r0, r3
 800f984:	3728      	adds	r7, #40	@ 0x28
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}
 800f98a:	bf00      	nop
 800f98c:	2406ce60 	.word	0x2406ce60
 800f990:	08013d5c 	.word	0x08013d5c
 800f994:	08013d94 	.word	0x08013d94
 800f998:	08013dd4 	.word	0x08013dd4
 800f99c:	08013dfc 	.word	0x08013dfc
 800f9a0:	08013e14 	.word	0x08013e14
 800f9a4:	08013e28 	.word	0x08013e28

0800f9a8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b088      	sub	sp, #32
 800f9ac:	af02      	add	r7, sp, #8
 800f9ae:	60f8      	str	r0, [r7, #12]
 800f9b0:	60b9      	str	r1, [r7, #8]
 800f9b2:	607a      	str	r2, [r7, #4]
 800f9b4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f9bc:	2b06      	cmp	r3, #6
 800f9be:	d006      	beq.n	800f9ce <etharp_update_arp_entry+0x26>
 800f9c0:	4b48      	ldr	r3, [pc, #288]	@ (800fae4 <etharp_update_arp_entry+0x13c>)
 800f9c2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800f9c6:	4948      	ldr	r1, [pc, #288]	@ (800fae8 <etharp_update_arp_entry+0x140>)
 800f9c8:	4848      	ldr	r0, [pc, #288]	@ (800faec <etharp_update_arp_entry+0x144>)
 800f9ca:	f002 fa51 	bl	8011e70 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d012      	beq.n	800f9fa <etharp_update_arp_entry+0x52>
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d00e      	beq.n	800f9fa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	68f9      	ldr	r1, [r7, #12]
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f001 f91a 	bl	8010c1c <ip4_addr_isbroadcast_u32>
 800f9e8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d105      	bne.n	800f9fa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f9f6:	2be0      	cmp	r3, #224	@ 0xe0
 800f9f8:	d102      	bne.n	800fa00 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f9fa:	f06f 030f 	mvn.w	r3, #15
 800f9fe:	e06c      	b.n	800fada <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800fa00:	78fb      	ldrb	r3, [r7, #3]
 800fa02:	68fa      	ldr	r2, [r7, #12]
 800fa04:	4619      	mov	r1, r3
 800fa06:	68b8      	ldr	r0, [r7, #8]
 800fa08:	f7ff fe56 	bl	800f6b8 <etharp_find_entry>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800fa10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	da02      	bge.n	800fa1e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800fa18:	8afb      	ldrh	r3, [r7, #22]
 800fa1a:	b25b      	sxtb	r3, r3
 800fa1c:	e05d      	b.n	800fada <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800fa1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fa22:	4933      	ldr	r1, [pc, #204]	@ (800faf0 <etharp_update_arp_entry+0x148>)
 800fa24:	4613      	mov	r3, r2
 800fa26:	005b      	lsls	r3, r3, #1
 800fa28:	4413      	add	r3, r2
 800fa2a:	00db      	lsls	r3, r3, #3
 800fa2c:	440b      	add	r3, r1
 800fa2e:	3314      	adds	r3, #20
 800fa30:	2202      	movs	r2, #2
 800fa32:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800fa34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fa38:	492d      	ldr	r1, [pc, #180]	@ (800faf0 <etharp_update_arp_entry+0x148>)
 800fa3a:	4613      	mov	r3, r2
 800fa3c:	005b      	lsls	r3, r3, #1
 800fa3e:	4413      	add	r3, r2
 800fa40:	00db      	lsls	r3, r3, #3
 800fa42:	440b      	add	r3, r1
 800fa44:	3308      	adds	r3, #8
 800fa46:	68fa      	ldr	r2, [r7, #12]
 800fa48:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800fa4a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fa4e:	4613      	mov	r3, r2
 800fa50:	005b      	lsls	r3, r3, #1
 800fa52:	4413      	add	r3, r2
 800fa54:	00db      	lsls	r3, r3, #3
 800fa56:	3308      	adds	r3, #8
 800fa58:	4a25      	ldr	r2, [pc, #148]	@ (800faf0 <etharp_update_arp_entry+0x148>)
 800fa5a:	4413      	add	r3, r2
 800fa5c:	3304      	adds	r3, #4
 800fa5e:	2206      	movs	r2, #6
 800fa60:	6879      	ldr	r1, [r7, #4]
 800fa62:	4618      	mov	r0, r3
 800fa64:	f002 fb35 	bl	80120d2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800fa68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fa6c:	4920      	ldr	r1, [pc, #128]	@ (800faf0 <etharp_update_arp_entry+0x148>)
 800fa6e:	4613      	mov	r3, r2
 800fa70:	005b      	lsls	r3, r3, #1
 800fa72:	4413      	add	r3, r2
 800fa74:	00db      	lsls	r3, r3, #3
 800fa76:	440b      	add	r3, r1
 800fa78:	3312      	adds	r3, #18
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800fa7e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fa82:	491b      	ldr	r1, [pc, #108]	@ (800faf0 <etharp_update_arp_entry+0x148>)
 800fa84:	4613      	mov	r3, r2
 800fa86:	005b      	lsls	r3, r3, #1
 800fa88:	4413      	add	r3, r2
 800fa8a:	00db      	lsls	r3, r3, #3
 800fa8c:	440b      	add	r3, r1
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d021      	beq.n	800fad8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800fa94:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fa98:	4915      	ldr	r1, [pc, #84]	@ (800faf0 <etharp_update_arp_entry+0x148>)
 800fa9a:	4613      	mov	r3, r2
 800fa9c:	005b      	lsls	r3, r3, #1
 800fa9e:	4413      	add	r3, r2
 800faa0:	00db      	lsls	r3, r3, #3
 800faa2:	440b      	add	r3, r1
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800faa8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800faac:	4910      	ldr	r1, [pc, #64]	@ (800faf0 <etharp_update_arp_entry+0x148>)
 800faae:	4613      	mov	r3, r2
 800fab0:	005b      	lsls	r3, r3, #1
 800fab2:	4413      	add	r3, r2
 800fab4:	00db      	lsls	r3, r3, #3
 800fab6:	440b      	add	r3, r1
 800fab8:	2200      	movs	r2, #0
 800faba:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800fac2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fac6:	9300      	str	r3, [sp, #0]
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	6939      	ldr	r1, [r7, #16]
 800facc:	68f8      	ldr	r0, [r7, #12]
 800face:	f001 ffb3 	bl	8011a38 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800fad2:	6938      	ldr	r0, [r7, #16]
 800fad4:	f7fe ffe6 	bl	800eaa4 <pbuf_free>
  }
  return ERR_OK;
 800fad8:	2300      	movs	r3, #0
}
 800fada:	4618      	mov	r0, r3
 800fadc:	3718      	adds	r7, #24
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}
 800fae2:	bf00      	nop
 800fae4:	08013d5c 	.word	0x08013d5c
 800fae8:	08013e54 	.word	0x08013e54
 800faec:	08013dd4 	.word	0x08013dd4
 800faf0:	2406ce60 	.word	0x2406ce60

0800faf4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b084      	sub	sp, #16
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fafc:	2300      	movs	r3, #0
 800fafe:	60fb      	str	r3, [r7, #12]
 800fb00:	e01e      	b.n	800fb40 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800fb02:	4913      	ldr	r1, [pc, #76]	@ (800fb50 <etharp_cleanup_netif+0x5c>)
 800fb04:	68fa      	ldr	r2, [r7, #12]
 800fb06:	4613      	mov	r3, r2
 800fb08:	005b      	lsls	r3, r3, #1
 800fb0a:	4413      	add	r3, r2
 800fb0c:	00db      	lsls	r3, r3, #3
 800fb0e:	440b      	add	r3, r1
 800fb10:	3314      	adds	r3, #20
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800fb16:	7afb      	ldrb	r3, [r7, #11]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d00e      	beq.n	800fb3a <etharp_cleanup_netif+0x46>
 800fb1c:	490c      	ldr	r1, [pc, #48]	@ (800fb50 <etharp_cleanup_netif+0x5c>)
 800fb1e:	68fa      	ldr	r2, [r7, #12]
 800fb20:	4613      	mov	r3, r2
 800fb22:	005b      	lsls	r3, r3, #1
 800fb24:	4413      	add	r3, r2
 800fb26:	00db      	lsls	r3, r3, #3
 800fb28:	440b      	add	r3, r1
 800fb2a:	3308      	adds	r3, #8
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	687a      	ldr	r2, [r7, #4]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d102      	bne.n	800fb3a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800fb34:	68f8      	ldr	r0, [r7, #12]
 800fb36:	f7ff fce5 	bl	800f504 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	3301      	adds	r3, #1
 800fb3e:	60fb      	str	r3, [r7, #12]
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	2b09      	cmp	r3, #9
 800fb44:	dddd      	ble.n	800fb02 <etharp_cleanup_netif+0xe>
    }
  }
}
 800fb46:	bf00      	nop
 800fb48:	bf00      	nop
 800fb4a:	3710      	adds	r7, #16
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}
 800fb50:	2406ce60 	.word	0x2406ce60

0800fb54 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800fb54:	b5b0      	push	{r4, r5, r7, lr}
 800fb56:	b08a      	sub	sp, #40	@ 0x28
 800fb58:	af04      	add	r7, sp, #16
 800fb5a:	6078      	str	r0, [r7, #4]
 800fb5c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d107      	bne.n	800fb74 <etharp_input+0x20>
 800fb64:	4b3d      	ldr	r3, [pc, #244]	@ (800fc5c <etharp_input+0x108>)
 800fb66:	f240 228a 	movw	r2, #650	@ 0x28a
 800fb6a:	493d      	ldr	r1, [pc, #244]	@ (800fc60 <etharp_input+0x10c>)
 800fb6c:	483d      	ldr	r0, [pc, #244]	@ (800fc64 <etharp_input+0x110>)
 800fb6e:	f002 f97f 	bl	8011e70 <iprintf>
 800fb72:	e06f      	b.n	800fc54 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	685b      	ldr	r3, [r3, #4]
 800fb78:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800fb7a:	693b      	ldr	r3, [r7, #16]
 800fb7c:	881b      	ldrh	r3, [r3, #0]
 800fb7e:	b29b      	uxth	r3, r3
 800fb80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fb84:	d10c      	bne.n	800fba0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800fb86:	693b      	ldr	r3, [r7, #16]
 800fb88:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800fb8a:	2b06      	cmp	r3, #6
 800fb8c:	d108      	bne.n	800fba0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800fb8e:	693b      	ldr	r3, [r7, #16]
 800fb90:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800fb92:	2b04      	cmp	r3, #4
 800fb94:	d104      	bne.n	800fba0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800fb96:	693b      	ldr	r3, [r7, #16]
 800fb98:	885b      	ldrh	r3, [r3, #2]
 800fb9a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800fb9c:	2b08      	cmp	r3, #8
 800fb9e:	d003      	beq.n	800fba8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800fba0:	6878      	ldr	r0, [r7, #4]
 800fba2:	f7fe ff7f 	bl	800eaa4 <pbuf_free>
    return;
 800fba6:	e055      	b.n	800fc54 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800fba8:	693b      	ldr	r3, [r7, #16]
 800fbaa:	330e      	adds	r3, #14
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	3318      	adds	r3, #24
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	3304      	adds	r3, #4
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d102      	bne.n	800fbc8 <etharp_input+0x74>
    for_us = 0;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	75fb      	strb	r3, [r7, #23]
 800fbc6:	e009      	b.n	800fbdc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800fbc8:	68ba      	ldr	r2, [r7, #8]
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	3304      	adds	r3, #4
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	bf0c      	ite	eq
 800fbd4:	2301      	moveq	r3, #1
 800fbd6:	2300      	movne	r3, #0
 800fbd8:	b2db      	uxtb	r3, r3
 800fbda:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800fbdc:	693b      	ldr	r3, [r7, #16]
 800fbde:	f103 0208 	add.w	r2, r3, #8
 800fbe2:	7dfb      	ldrb	r3, [r7, #23]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d001      	beq.n	800fbec <etharp_input+0x98>
 800fbe8:	2301      	movs	r3, #1
 800fbea:	e000      	b.n	800fbee <etharp_input+0x9a>
 800fbec:	2302      	movs	r3, #2
 800fbee:	f107 010c 	add.w	r1, r7, #12
 800fbf2:	6838      	ldr	r0, [r7, #0]
 800fbf4:	f7ff fed8 	bl	800f9a8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800fbf8:	693b      	ldr	r3, [r7, #16]
 800fbfa:	88db      	ldrh	r3, [r3, #6]
 800fbfc:	b29b      	uxth	r3, r3
 800fbfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fc02:	d003      	beq.n	800fc0c <etharp_input+0xb8>
 800fc04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fc08:	d01e      	beq.n	800fc48 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800fc0a:	e020      	b.n	800fc4e <etharp_input+0xfa>
      if (for_us) {
 800fc0c:	7dfb      	ldrb	r3, [r7, #23]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d01c      	beq.n	800fc4c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800fc18:	693b      	ldr	r3, [r7, #16]
 800fc1a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800fc28:	693a      	ldr	r2, [r7, #16]
 800fc2a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800fc2c:	2102      	movs	r1, #2
 800fc2e:	9103      	str	r1, [sp, #12]
 800fc30:	f107 010c 	add.w	r1, r7, #12
 800fc34:	9102      	str	r1, [sp, #8]
 800fc36:	9201      	str	r2, [sp, #4]
 800fc38:	9300      	str	r3, [sp, #0]
 800fc3a:	462b      	mov	r3, r5
 800fc3c:	4622      	mov	r2, r4
 800fc3e:	4601      	mov	r1, r0
 800fc40:	6838      	ldr	r0, [r7, #0]
 800fc42:	f000 faeb 	bl	801021c <etharp_raw>
      break;
 800fc46:	e001      	b.n	800fc4c <etharp_input+0xf8>
      break;
 800fc48:	bf00      	nop
 800fc4a:	e000      	b.n	800fc4e <etharp_input+0xfa>
      break;
 800fc4c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	f7fe ff28 	bl	800eaa4 <pbuf_free>
}
 800fc54:	3718      	adds	r7, #24
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bdb0      	pop	{r4, r5, r7, pc}
 800fc5a:	bf00      	nop
 800fc5c:	08013d5c 	.word	0x08013d5c
 800fc60:	08013eac 	.word	0x08013eac
 800fc64:	08013dd4 	.word	0x08013dd4

0800fc68 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b086      	sub	sp, #24
 800fc6c:	af02      	add	r7, sp, #8
 800fc6e:	60f8      	str	r0, [r7, #12]
 800fc70:	60b9      	str	r1, [r7, #8]
 800fc72:	4613      	mov	r3, r2
 800fc74:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800fc76:	79fa      	ldrb	r2, [r7, #7]
 800fc78:	4944      	ldr	r1, [pc, #272]	@ (800fd8c <etharp_output_to_arp_index+0x124>)
 800fc7a:	4613      	mov	r3, r2
 800fc7c:	005b      	lsls	r3, r3, #1
 800fc7e:	4413      	add	r3, r2
 800fc80:	00db      	lsls	r3, r3, #3
 800fc82:	440b      	add	r3, r1
 800fc84:	3314      	adds	r3, #20
 800fc86:	781b      	ldrb	r3, [r3, #0]
 800fc88:	2b01      	cmp	r3, #1
 800fc8a:	d806      	bhi.n	800fc9a <etharp_output_to_arp_index+0x32>
 800fc8c:	4b40      	ldr	r3, [pc, #256]	@ (800fd90 <etharp_output_to_arp_index+0x128>)
 800fc8e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800fc92:	4940      	ldr	r1, [pc, #256]	@ (800fd94 <etharp_output_to_arp_index+0x12c>)
 800fc94:	4840      	ldr	r0, [pc, #256]	@ (800fd98 <etharp_output_to_arp_index+0x130>)
 800fc96:	f002 f8eb 	bl	8011e70 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800fc9a:	79fa      	ldrb	r2, [r7, #7]
 800fc9c:	493b      	ldr	r1, [pc, #236]	@ (800fd8c <etharp_output_to_arp_index+0x124>)
 800fc9e:	4613      	mov	r3, r2
 800fca0:	005b      	lsls	r3, r3, #1
 800fca2:	4413      	add	r3, r2
 800fca4:	00db      	lsls	r3, r3, #3
 800fca6:	440b      	add	r3, r1
 800fca8:	3314      	adds	r3, #20
 800fcaa:	781b      	ldrb	r3, [r3, #0]
 800fcac:	2b02      	cmp	r3, #2
 800fcae:	d153      	bne.n	800fd58 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800fcb0:	79fa      	ldrb	r2, [r7, #7]
 800fcb2:	4936      	ldr	r1, [pc, #216]	@ (800fd8c <etharp_output_to_arp_index+0x124>)
 800fcb4:	4613      	mov	r3, r2
 800fcb6:	005b      	lsls	r3, r3, #1
 800fcb8:	4413      	add	r3, r2
 800fcba:	00db      	lsls	r3, r3, #3
 800fcbc:	440b      	add	r3, r1
 800fcbe:	3312      	adds	r3, #18
 800fcc0:	881b      	ldrh	r3, [r3, #0]
 800fcc2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800fcc6:	d919      	bls.n	800fcfc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800fcc8:	79fa      	ldrb	r2, [r7, #7]
 800fcca:	4613      	mov	r3, r2
 800fccc:	005b      	lsls	r3, r3, #1
 800fcce:	4413      	add	r3, r2
 800fcd0:	00db      	lsls	r3, r3, #3
 800fcd2:	4a2e      	ldr	r2, [pc, #184]	@ (800fd8c <etharp_output_to_arp_index+0x124>)
 800fcd4:	4413      	add	r3, r2
 800fcd6:	3304      	adds	r3, #4
 800fcd8:	4619      	mov	r1, r3
 800fcda:	68f8      	ldr	r0, [r7, #12]
 800fcdc:	f000 fb4c 	bl	8010378 <etharp_request>
 800fce0:	4603      	mov	r3, r0
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d138      	bne.n	800fd58 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800fce6:	79fa      	ldrb	r2, [r7, #7]
 800fce8:	4928      	ldr	r1, [pc, #160]	@ (800fd8c <etharp_output_to_arp_index+0x124>)
 800fcea:	4613      	mov	r3, r2
 800fcec:	005b      	lsls	r3, r3, #1
 800fcee:	4413      	add	r3, r2
 800fcf0:	00db      	lsls	r3, r3, #3
 800fcf2:	440b      	add	r3, r1
 800fcf4:	3314      	adds	r3, #20
 800fcf6:	2203      	movs	r2, #3
 800fcf8:	701a      	strb	r2, [r3, #0]
 800fcfa:	e02d      	b.n	800fd58 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800fcfc:	79fa      	ldrb	r2, [r7, #7]
 800fcfe:	4923      	ldr	r1, [pc, #140]	@ (800fd8c <etharp_output_to_arp_index+0x124>)
 800fd00:	4613      	mov	r3, r2
 800fd02:	005b      	lsls	r3, r3, #1
 800fd04:	4413      	add	r3, r2
 800fd06:	00db      	lsls	r3, r3, #3
 800fd08:	440b      	add	r3, r1
 800fd0a:	3312      	adds	r3, #18
 800fd0c:	881b      	ldrh	r3, [r3, #0]
 800fd0e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800fd12:	d321      	bcc.n	800fd58 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800fd14:	79fa      	ldrb	r2, [r7, #7]
 800fd16:	4613      	mov	r3, r2
 800fd18:	005b      	lsls	r3, r3, #1
 800fd1a:	4413      	add	r3, r2
 800fd1c:	00db      	lsls	r3, r3, #3
 800fd1e:	4a1b      	ldr	r2, [pc, #108]	@ (800fd8c <etharp_output_to_arp_index+0x124>)
 800fd20:	4413      	add	r3, r2
 800fd22:	1d19      	adds	r1, r3, #4
 800fd24:	79fa      	ldrb	r2, [r7, #7]
 800fd26:	4613      	mov	r3, r2
 800fd28:	005b      	lsls	r3, r3, #1
 800fd2a:	4413      	add	r3, r2
 800fd2c:	00db      	lsls	r3, r3, #3
 800fd2e:	3308      	adds	r3, #8
 800fd30:	4a16      	ldr	r2, [pc, #88]	@ (800fd8c <etharp_output_to_arp_index+0x124>)
 800fd32:	4413      	add	r3, r2
 800fd34:	3304      	adds	r3, #4
 800fd36:	461a      	mov	r2, r3
 800fd38:	68f8      	ldr	r0, [r7, #12]
 800fd3a:	f000 fafb 	bl	8010334 <etharp_request_dst>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d109      	bne.n	800fd58 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800fd44:	79fa      	ldrb	r2, [r7, #7]
 800fd46:	4911      	ldr	r1, [pc, #68]	@ (800fd8c <etharp_output_to_arp_index+0x124>)
 800fd48:	4613      	mov	r3, r2
 800fd4a:	005b      	lsls	r3, r3, #1
 800fd4c:	4413      	add	r3, r2
 800fd4e:	00db      	lsls	r3, r3, #3
 800fd50:	440b      	add	r3, r1
 800fd52:	3314      	adds	r3, #20
 800fd54:	2203      	movs	r2, #3
 800fd56:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800fd5e:	79fa      	ldrb	r2, [r7, #7]
 800fd60:	4613      	mov	r3, r2
 800fd62:	005b      	lsls	r3, r3, #1
 800fd64:	4413      	add	r3, r2
 800fd66:	00db      	lsls	r3, r3, #3
 800fd68:	3308      	adds	r3, #8
 800fd6a:	4a08      	ldr	r2, [pc, #32]	@ (800fd8c <etharp_output_to_arp_index+0x124>)
 800fd6c:	4413      	add	r3, r2
 800fd6e:	3304      	adds	r3, #4
 800fd70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fd74:	9200      	str	r2, [sp, #0]
 800fd76:	460a      	mov	r2, r1
 800fd78:	68b9      	ldr	r1, [r7, #8]
 800fd7a:	68f8      	ldr	r0, [r7, #12]
 800fd7c:	f001 fe5c 	bl	8011a38 <ethernet_output>
 800fd80:	4603      	mov	r3, r0
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3710      	adds	r7, #16
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}
 800fd8a:	bf00      	nop
 800fd8c:	2406ce60 	.word	0x2406ce60
 800fd90:	08013d5c 	.word	0x08013d5c
 800fd94:	08013ecc 	.word	0x08013ecc
 800fd98:	08013dd4 	.word	0x08013dd4

0800fd9c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b08a      	sub	sp, #40	@ 0x28
 800fda0:	af02      	add	r7, sp, #8
 800fda2:	60f8      	str	r0, [r7, #12]
 800fda4:	60b9      	str	r1, [r7, #8]
 800fda6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d106      	bne.n	800fdc0 <etharp_output+0x24>
 800fdb2:	4b73      	ldr	r3, [pc, #460]	@ (800ff80 <etharp_output+0x1e4>)
 800fdb4:	f240 321e 	movw	r2, #798	@ 0x31e
 800fdb8:	4972      	ldr	r1, [pc, #456]	@ (800ff84 <etharp_output+0x1e8>)
 800fdba:	4873      	ldr	r0, [pc, #460]	@ (800ff88 <etharp_output+0x1ec>)
 800fdbc:	f002 f858 	bl	8011e70 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d106      	bne.n	800fdd4 <etharp_output+0x38>
 800fdc6:	4b6e      	ldr	r3, [pc, #440]	@ (800ff80 <etharp_output+0x1e4>)
 800fdc8:	f240 321f 	movw	r2, #799	@ 0x31f
 800fdcc:	496f      	ldr	r1, [pc, #444]	@ (800ff8c <etharp_output+0x1f0>)
 800fdce:	486e      	ldr	r0, [pc, #440]	@ (800ff88 <etharp_output+0x1ec>)
 800fdd0:	f002 f84e 	bl	8011e70 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d106      	bne.n	800fde8 <etharp_output+0x4c>
 800fdda:	4b69      	ldr	r3, [pc, #420]	@ (800ff80 <etharp_output+0x1e4>)
 800fddc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800fde0:	496b      	ldr	r1, [pc, #428]	@ (800ff90 <etharp_output+0x1f4>)
 800fde2:	4869      	ldr	r0, [pc, #420]	@ (800ff88 <etharp_output+0x1ec>)
 800fde4:	f002 f844 	bl	8011e70 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	68f9      	ldr	r1, [r7, #12]
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f000 ff14 	bl	8010c1c <ip4_addr_isbroadcast_u32>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d002      	beq.n	800fe00 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800fdfa:	4b66      	ldr	r3, [pc, #408]	@ (800ff94 <etharp_output+0x1f8>)
 800fdfc:	61fb      	str	r3, [r7, #28]
 800fdfe:	e0af      	b.n	800ff60 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fe08:	2be0      	cmp	r3, #224	@ 0xe0
 800fe0a:	d118      	bne.n	800fe3e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800fe0c:	2301      	movs	r3, #1
 800fe0e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800fe10:	2300      	movs	r3, #0
 800fe12:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800fe14:	235e      	movs	r3, #94	@ 0x5e
 800fe16:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	3301      	adds	r3, #1
 800fe1c:	781b      	ldrb	r3, [r3, #0]
 800fe1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe22:	b2db      	uxtb	r3, r3
 800fe24:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	3302      	adds	r3, #2
 800fe2a:	781b      	ldrb	r3, [r3, #0]
 800fe2c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	3303      	adds	r3, #3
 800fe32:	781b      	ldrb	r3, [r3, #0]
 800fe34:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800fe36:	f107 0310 	add.w	r3, r7, #16
 800fe3a:	61fb      	str	r3, [r7, #28]
 800fe3c:	e090      	b.n	800ff60 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681a      	ldr	r2, [r3, #0]
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	3304      	adds	r3, #4
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	405a      	eors	r2, r3
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	3308      	adds	r3, #8
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	4013      	ands	r3, r2
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d012      	beq.n	800fe7c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fe5c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800fe60:	4293      	cmp	r3, r2
 800fe62:	d00b      	beq.n	800fe7c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	330c      	adds	r3, #12
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d003      	beq.n	800fe76 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	330c      	adds	r3, #12
 800fe72:	61bb      	str	r3, [r7, #24]
 800fe74:	e002      	b.n	800fe7c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800fe76:	f06f 0303 	mvn.w	r3, #3
 800fe7a:	e07d      	b.n	800ff78 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fe7c:	4b46      	ldr	r3, [pc, #280]	@ (800ff98 <etharp_output+0x1fc>)
 800fe7e:	781b      	ldrb	r3, [r3, #0]
 800fe80:	4619      	mov	r1, r3
 800fe82:	4a46      	ldr	r2, [pc, #280]	@ (800ff9c <etharp_output+0x200>)
 800fe84:	460b      	mov	r3, r1
 800fe86:	005b      	lsls	r3, r3, #1
 800fe88:	440b      	add	r3, r1
 800fe8a:	00db      	lsls	r3, r3, #3
 800fe8c:	4413      	add	r3, r2
 800fe8e:	3314      	adds	r3, #20
 800fe90:	781b      	ldrb	r3, [r3, #0]
 800fe92:	2b01      	cmp	r3, #1
 800fe94:	d925      	bls.n	800fee2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800fe96:	4b40      	ldr	r3, [pc, #256]	@ (800ff98 <etharp_output+0x1fc>)
 800fe98:	781b      	ldrb	r3, [r3, #0]
 800fe9a:	4619      	mov	r1, r3
 800fe9c:	4a3f      	ldr	r2, [pc, #252]	@ (800ff9c <etharp_output+0x200>)
 800fe9e:	460b      	mov	r3, r1
 800fea0:	005b      	lsls	r3, r3, #1
 800fea2:	440b      	add	r3, r1
 800fea4:	00db      	lsls	r3, r3, #3
 800fea6:	4413      	add	r3, r2
 800fea8:	3308      	adds	r3, #8
 800feaa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800feac:	68fa      	ldr	r2, [r7, #12]
 800feae:	429a      	cmp	r2, r3
 800feb0:	d117      	bne.n	800fee2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800feb2:	69bb      	ldr	r3, [r7, #24]
 800feb4:	681a      	ldr	r2, [r3, #0]
 800feb6:	4b38      	ldr	r3, [pc, #224]	@ (800ff98 <etharp_output+0x1fc>)
 800feb8:	781b      	ldrb	r3, [r3, #0]
 800feba:	4618      	mov	r0, r3
 800febc:	4937      	ldr	r1, [pc, #220]	@ (800ff9c <etharp_output+0x200>)
 800febe:	4603      	mov	r3, r0
 800fec0:	005b      	lsls	r3, r3, #1
 800fec2:	4403      	add	r3, r0
 800fec4:	00db      	lsls	r3, r3, #3
 800fec6:	440b      	add	r3, r1
 800fec8:	3304      	adds	r3, #4
 800feca:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800fecc:	429a      	cmp	r2, r3
 800fece:	d108      	bne.n	800fee2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800fed0:	4b31      	ldr	r3, [pc, #196]	@ (800ff98 <etharp_output+0x1fc>)
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	461a      	mov	r2, r3
 800fed6:	68b9      	ldr	r1, [r7, #8]
 800fed8:	68f8      	ldr	r0, [r7, #12]
 800feda:	f7ff fec5 	bl	800fc68 <etharp_output_to_arp_index>
 800fede:	4603      	mov	r3, r0
 800fee0:	e04a      	b.n	800ff78 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fee2:	2300      	movs	r3, #0
 800fee4:	75fb      	strb	r3, [r7, #23]
 800fee6:	e031      	b.n	800ff4c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fee8:	7dfa      	ldrb	r2, [r7, #23]
 800feea:	492c      	ldr	r1, [pc, #176]	@ (800ff9c <etharp_output+0x200>)
 800feec:	4613      	mov	r3, r2
 800feee:	005b      	lsls	r3, r3, #1
 800fef0:	4413      	add	r3, r2
 800fef2:	00db      	lsls	r3, r3, #3
 800fef4:	440b      	add	r3, r1
 800fef6:	3314      	adds	r3, #20
 800fef8:	781b      	ldrb	r3, [r3, #0]
 800fefa:	2b01      	cmp	r3, #1
 800fefc:	d923      	bls.n	800ff46 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800fefe:	7dfa      	ldrb	r2, [r7, #23]
 800ff00:	4926      	ldr	r1, [pc, #152]	@ (800ff9c <etharp_output+0x200>)
 800ff02:	4613      	mov	r3, r2
 800ff04:	005b      	lsls	r3, r3, #1
 800ff06:	4413      	add	r3, r2
 800ff08:	00db      	lsls	r3, r3, #3
 800ff0a:	440b      	add	r3, r1
 800ff0c:	3308      	adds	r3, #8
 800ff0e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ff10:	68fa      	ldr	r2, [r7, #12]
 800ff12:	429a      	cmp	r2, r3
 800ff14:	d117      	bne.n	800ff46 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800ff16:	69bb      	ldr	r3, [r7, #24]
 800ff18:	6819      	ldr	r1, [r3, #0]
 800ff1a:	7dfa      	ldrb	r2, [r7, #23]
 800ff1c:	481f      	ldr	r0, [pc, #124]	@ (800ff9c <etharp_output+0x200>)
 800ff1e:	4613      	mov	r3, r2
 800ff20:	005b      	lsls	r3, r3, #1
 800ff22:	4413      	add	r3, r2
 800ff24:	00db      	lsls	r3, r3, #3
 800ff26:	4403      	add	r3, r0
 800ff28:	3304      	adds	r3, #4
 800ff2a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800ff2c:	4299      	cmp	r1, r3
 800ff2e:	d10a      	bne.n	800ff46 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800ff30:	4a19      	ldr	r2, [pc, #100]	@ (800ff98 <etharp_output+0x1fc>)
 800ff32:	7dfb      	ldrb	r3, [r7, #23]
 800ff34:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800ff36:	7dfb      	ldrb	r3, [r7, #23]
 800ff38:	461a      	mov	r2, r3
 800ff3a:	68b9      	ldr	r1, [r7, #8]
 800ff3c:	68f8      	ldr	r0, [r7, #12]
 800ff3e:	f7ff fe93 	bl	800fc68 <etharp_output_to_arp_index>
 800ff42:	4603      	mov	r3, r0
 800ff44:	e018      	b.n	800ff78 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ff46:	7dfb      	ldrb	r3, [r7, #23]
 800ff48:	3301      	adds	r3, #1
 800ff4a:	75fb      	strb	r3, [r7, #23]
 800ff4c:	7dfb      	ldrb	r3, [r7, #23]
 800ff4e:	2b09      	cmp	r3, #9
 800ff50:	d9ca      	bls.n	800fee8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800ff52:	68ba      	ldr	r2, [r7, #8]
 800ff54:	69b9      	ldr	r1, [r7, #24]
 800ff56:	68f8      	ldr	r0, [r7, #12]
 800ff58:	f000 f822 	bl	800ffa0 <etharp_query>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	e00b      	b.n	800ff78 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800ff66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ff6a:	9300      	str	r3, [sp, #0]
 800ff6c:	69fb      	ldr	r3, [r7, #28]
 800ff6e:	68b9      	ldr	r1, [r7, #8]
 800ff70:	68f8      	ldr	r0, [r7, #12]
 800ff72:	f001 fd61 	bl	8011a38 <ethernet_output>
 800ff76:	4603      	mov	r3, r0
}
 800ff78:	4618      	mov	r0, r3
 800ff7a:	3720      	adds	r7, #32
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}
 800ff80:	08013d5c 	.word	0x08013d5c
 800ff84:	08013eac 	.word	0x08013eac
 800ff88:	08013dd4 	.word	0x08013dd4
 800ff8c:	08013efc 	.word	0x08013efc
 800ff90:	08013e9c 	.word	0x08013e9c
 800ff94:	0801453c 	.word	0x0801453c
 800ff98:	2406cf50 	.word	0x2406cf50
 800ff9c:	2406ce60 	.word	0x2406ce60

0800ffa0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b08c      	sub	sp, #48	@ 0x30
 800ffa4:	af02      	add	r7, sp, #8
 800ffa6:	60f8      	str	r0, [r7, #12]
 800ffa8:	60b9      	str	r1, [r7, #8]
 800ffaa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	3326      	adds	r3, #38	@ 0x26
 800ffb0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800ffb2:	23ff      	movs	r3, #255	@ 0xff
 800ffb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800ffb8:	2300      	movs	r3, #0
 800ffba:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	68f9      	ldr	r1, [r7, #12]
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f000 fe2a 	bl	8010c1c <ip4_addr_isbroadcast_u32>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d10c      	bne.n	800ffe8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ffd6:	2be0      	cmp	r3, #224	@ 0xe0
 800ffd8:	d006      	beq.n	800ffe8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ffda:	68bb      	ldr	r3, [r7, #8]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d003      	beq.n	800ffe8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d102      	bne.n	800ffee <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ffe8:	f06f 030f 	mvn.w	r3, #15
 800ffec:	e101      	b.n	80101f2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ffee:	68fa      	ldr	r2, [r7, #12]
 800fff0:	2101      	movs	r1, #1
 800fff2:	68b8      	ldr	r0, [r7, #8]
 800fff4:	f7ff fb60 	bl	800f6b8 <etharp_find_entry>
 800fff8:	4603      	mov	r3, r0
 800fffa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800fffc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010000:	2b00      	cmp	r3, #0
 8010002:	da02      	bge.n	801000a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010004:	8a7b      	ldrh	r3, [r7, #18]
 8010006:	b25b      	sxtb	r3, r3
 8010008:	e0f3      	b.n	80101f2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801000a:	8a7b      	ldrh	r3, [r7, #18]
 801000c:	2b7e      	cmp	r3, #126	@ 0x7e
 801000e:	d906      	bls.n	801001e <etharp_query+0x7e>
 8010010:	4b7a      	ldr	r3, [pc, #488]	@ (80101fc <etharp_query+0x25c>)
 8010012:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8010016:	497a      	ldr	r1, [pc, #488]	@ (8010200 <etharp_query+0x260>)
 8010018:	487a      	ldr	r0, [pc, #488]	@ (8010204 <etharp_query+0x264>)
 801001a:	f001 ff29 	bl	8011e70 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801001e:	8a7b      	ldrh	r3, [r7, #18]
 8010020:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010022:	7c7a      	ldrb	r2, [r7, #17]
 8010024:	4978      	ldr	r1, [pc, #480]	@ (8010208 <etharp_query+0x268>)
 8010026:	4613      	mov	r3, r2
 8010028:	005b      	lsls	r3, r3, #1
 801002a:	4413      	add	r3, r2
 801002c:	00db      	lsls	r3, r3, #3
 801002e:	440b      	add	r3, r1
 8010030:	3314      	adds	r3, #20
 8010032:	781b      	ldrb	r3, [r3, #0]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d115      	bne.n	8010064 <etharp_query+0xc4>
    is_new_entry = 1;
 8010038:	2301      	movs	r3, #1
 801003a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801003c:	7c7a      	ldrb	r2, [r7, #17]
 801003e:	4972      	ldr	r1, [pc, #456]	@ (8010208 <etharp_query+0x268>)
 8010040:	4613      	mov	r3, r2
 8010042:	005b      	lsls	r3, r3, #1
 8010044:	4413      	add	r3, r2
 8010046:	00db      	lsls	r3, r3, #3
 8010048:	440b      	add	r3, r1
 801004a:	3314      	adds	r3, #20
 801004c:	2201      	movs	r2, #1
 801004e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010050:	7c7a      	ldrb	r2, [r7, #17]
 8010052:	496d      	ldr	r1, [pc, #436]	@ (8010208 <etharp_query+0x268>)
 8010054:	4613      	mov	r3, r2
 8010056:	005b      	lsls	r3, r3, #1
 8010058:	4413      	add	r3, r2
 801005a:	00db      	lsls	r3, r3, #3
 801005c:	440b      	add	r3, r1
 801005e:	3308      	adds	r3, #8
 8010060:	68fa      	ldr	r2, [r7, #12]
 8010062:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010064:	7c7a      	ldrb	r2, [r7, #17]
 8010066:	4968      	ldr	r1, [pc, #416]	@ (8010208 <etharp_query+0x268>)
 8010068:	4613      	mov	r3, r2
 801006a:	005b      	lsls	r3, r3, #1
 801006c:	4413      	add	r3, r2
 801006e:	00db      	lsls	r3, r3, #3
 8010070:	440b      	add	r3, r1
 8010072:	3314      	adds	r3, #20
 8010074:	781b      	ldrb	r3, [r3, #0]
 8010076:	2b01      	cmp	r3, #1
 8010078:	d011      	beq.n	801009e <etharp_query+0xfe>
 801007a:	7c7a      	ldrb	r2, [r7, #17]
 801007c:	4962      	ldr	r1, [pc, #392]	@ (8010208 <etharp_query+0x268>)
 801007e:	4613      	mov	r3, r2
 8010080:	005b      	lsls	r3, r3, #1
 8010082:	4413      	add	r3, r2
 8010084:	00db      	lsls	r3, r3, #3
 8010086:	440b      	add	r3, r1
 8010088:	3314      	adds	r3, #20
 801008a:	781b      	ldrb	r3, [r3, #0]
 801008c:	2b01      	cmp	r3, #1
 801008e:	d806      	bhi.n	801009e <etharp_query+0xfe>
 8010090:	4b5a      	ldr	r3, [pc, #360]	@ (80101fc <etharp_query+0x25c>)
 8010092:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8010096:	495d      	ldr	r1, [pc, #372]	@ (801020c <etharp_query+0x26c>)
 8010098:	485a      	ldr	r0, [pc, #360]	@ (8010204 <etharp_query+0x264>)
 801009a:	f001 fee9 	bl	8011e70 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801009e:	6a3b      	ldr	r3, [r7, #32]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d102      	bne.n	80100aa <etharp_query+0x10a>
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d10c      	bne.n	80100c4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80100aa:	68b9      	ldr	r1, [r7, #8]
 80100ac:	68f8      	ldr	r0, [r7, #12]
 80100ae:	f000 f963 	bl	8010378 <etharp_request>
 80100b2:	4603      	mov	r3, r0
 80100b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d102      	bne.n	80100c4 <etharp_query+0x124>
      return result;
 80100be:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80100c2:	e096      	b.n	80101f2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d106      	bne.n	80100d8 <etharp_query+0x138>
 80100ca:	4b4c      	ldr	r3, [pc, #304]	@ (80101fc <etharp_query+0x25c>)
 80100cc:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80100d0:	494f      	ldr	r1, [pc, #316]	@ (8010210 <etharp_query+0x270>)
 80100d2:	484c      	ldr	r0, [pc, #304]	@ (8010204 <etharp_query+0x264>)
 80100d4:	f001 fecc 	bl	8011e70 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80100d8:	7c7a      	ldrb	r2, [r7, #17]
 80100da:	494b      	ldr	r1, [pc, #300]	@ (8010208 <etharp_query+0x268>)
 80100dc:	4613      	mov	r3, r2
 80100de:	005b      	lsls	r3, r3, #1
 80100e0:	4413      	add	r3, r2
 80100e2:	00db      	lsls	r3, r3, #3
 80100e4:	440b      	add	r3, r1
 80100e6:	3314      	adds	r3, #20
 80100e8:	781b      	ldrb	r3, [r3, #0]
 80100ea:	2b01      	cmp	r3, #1
 80100ec:	d917      	bls.n	801011e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80100ee:	4a49      	ldr	r2, [pc, #292]	@ (8010214 <etharp_query+0x274>)
 80100f0:	7c7b      	ldrb	r3, [r7, #17]
 80100f2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80100f4:	7c7a      	ldrb	r2, [r7, #17]
 80100f6:	4613      	mov	r3, r2
 80100f8:	005b      	lsls	r3, r3, #1
 80100fa:	4413      	add	r3, r2
 80100fc:	00db      	lsls	r3, r3, #3
 80100fe:	3308      	adds	r3, #8
 8010100:	4a41      	ldr	r2, [pc, #260]	@ (8010208 <etharp_query+0x268>)
 8010102:	4413      	add	r3, r2
 8010104:	3304      	adds	r3, #4
 8010106:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801010a:	9200      	str	r2, [sp, #0]
 801010c:	697a      	ldr	r2, [r7, #20]
 801010e:	6879      	ldr	r1, [r7, #4]
 8010110:	68f8      	ldr	r0, [r7, #12]
 8010112:	f001 fc91 	bl	8011a38 <ethernet_output>
 8010116:	4603      	mov	r3, r0
 8010118:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801011c:	e067      	b.n	80101ee <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801011e:	7c7a      	ldrb	r2, [r7, #17]
 8010120:	4939      	ldr	r1, [pc, #228]	@ (8010208 <etharp_query+0x268>)
 8010122:	4613      	mov	r3, r2
 8010124:	005b      	lsls	r3, r3, #1
 8010126:	4413      	add	r3, r2
 8010128:	00db      	lsls	r3, r3, #3
 801012a:	440b      	add	r3, r1
 801012c:	3314      	adds	r3, #20
 801012e:	781b      	ldrb	r3, [r3, #0]
 8010130:	2b01      	cmp	r3, #1
 8010132:	d15c      	bne.n	80101ee <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010134:	2300      	movs	r3, #0
 8010136:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801013c:	e01c      	b.n	8010178 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801013e:	69fb      	ldr	r3, [r7, #28]
 8010140:	895a      	ldrh	r2, [r3, #10]
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	891b      	ldrh	r3, [r3, #8]
 8010146:	429a      	cmp	r2, r3
 8010148:	d10a      	bne.n	8010160 <etharp_query+0x1c0>
 801014a:	69fb      	ldr	r3, [r7, #28]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d006      	beq.n	8010160 <etharp_query+0x1c0>
 8010152:	4b2a      	ldr	r3, [pc, #168]	@ (80101fc <etharp_query+0x25c>)
 8010154:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8010158:	492f      	ldr	r1, [pc, #188]	@ (8010218 <etharp_query+0x278>)
 801015a:	482a      	ldr	r0, [pc, #168]	@ (8010204 <etharp_query+0x264>)
 801015c:	f001 fe88 	bl	8011e70 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010160:	69fb      	ldr	r3, [r7, #28]
 8010162:	7b1b      	ldrb	r3, [r3, #12]
 8010164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010168:	2b00      	cmp	r3, #0
 801016a:	d002      	beq.n	8010172 <etharp_query+0x1d2>
        copy_needed = 1;
 801016c:	2301      	movs	r3, #1
 801016e:	61bb      	str	r3, [r7, #24]
        break;
 8010170:	e005      	b.n	801017e <etharp_query+0x1de>
      }
      p = p->next;
 8010172:	69fb      	ldr	r3, [r7, #28]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010178:	69fb      	ldr	r3, [r7, #28]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d1df      	bne.n	801013e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801017e:	69bb      	ldr	r3, [r7, #24]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d007      	beq.n	8010194 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010184:	687a      	ldr	r2, [r7, #4]
 8010186:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801018a:	200e      	movs	r0, #14
 801018c:	f7fe fe74 	bl	800ee78 <pbuf_clone>
 8010190:	61f8      	str	r0, [r7, #28]
 8010192:	e004      	b.n	801019e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010198:	69f8      	ldr	r0, [r7, #28]
 801019a:	f7fe fd23 	bl	800ebe4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801019e:	69fb      	ldr	r3, [r7, #28]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d021      	beq.n	80101e8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80101a4:	7c7a      	ldrb	r2, [r7, #17]
 80101a6:	4918      	ldr	r1, [pc, #96]	@ (8010208 <etharp_query+0x268>)
 80101a8:	4613      	mov	r3, r2
 80101aa:	005b      	lsls	r3, r3, #1
 80101ac:	4413      	add	r3, r2
 80101ae:	00db      	lsls	r3, r3, #3
 80101b0:	440b      	add	r3, r1
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d00a      	beq.n	80101ce <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80101b8:	7c7a      	ldrb	r2, [r7, #17]
 80101ba:	4913      	ldr	r1, [pc, #76]	@ (8010208 <etharp_query+0x268>)
 80101bc:	4613      	mov	r3, r2
 80101be:	005b      	lsls	r3, r3, #1
 80101c0:	4413      	add	r3, r2
 80101c2:	00db      	lsls	r3, r3, #3
 80101c4:	440b      	add	r3, r1
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	4618      	mov	r0, r3
 80101ca:	f7fe fc6b 	bl	800eaa4 <pbuf_free>
      }
      arp_table[i].q = p;
 80101ce:	7c7a      	ldrb	r2, [r7, #17]
 80101d0:	490d      	ldr	r1, [pc, #52]	@ (8010208 <etharp_query+0x268>)
 80101d2:	4613      	mov	r3, r2
 80101d4:	005b      	lsls	r3, r3, #1
 80101d6:	4413      	add	r3, r2
 80101d8:	00db      	lsls	r3, r3, #3
 80101da:	440b      	add	r3, r1
 80101dc:	69fa      	ldr	r2, [r7, #28]
 80101de:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80101e0:	2300      	movs	r3, #0
 80101e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80101e6:	e002      	b.n	80101ee <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80101e8:	23ff      	movs	r3, #255	@ 0xff
 80101ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80101ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80101f2:	4618      	mov	r0, r3
 80101f4:	3728      	adds	r7, #40	@ 0x28
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}
 80101fa:	bf00      	nop
 80101fc:	08013d5c 	.word	0x08013d5c
 8010200:	08013f08 	.word	0x08013f08
 8010204:	08013dd4 	.word	0x08013dd4
 8010208:	2406ce60 	.word	0x2406ce60
 801020c:	08013f18 	.word	0x08013f18
 8010210:	08013efc 	.word	0x08013efc
 8010214:	2406cf50 	.word	0x2406cf50
 8010218:	08013f40 	.word	0x08013f40

0801021c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b08a      	sub	sp, #40	@ 0x28
 8010220:	af02      	add	r7, sp, #8
 8010222:	60f8      	str	r0, [r7, #12]
 8010224:	60b9      	str	r1, [r7, #8]
 8010226:	607a      	str	r2, [r7, #4]
 8010228:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801022a:	2300      	movs	r3, #0
 801022c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d106      	bne.n	8010242 <etharp_raw+0x26>
 8010234:	4b3a      	ldr	r3, [pc, #232]	@ (8010320 <etharp_raw+0x104>)
 8010236:	f240 4257 	movw	r2, #1111	@ 0x457
 801023a:	493a      	ldr	r1, [pc, #232]	@ (8010324 <etharp_raw+0x108>)
 801023c:	483a      	ldr	r0, [pc, #232]	@ (8010328 <etharp_raw+0x10c>)
 801023e:	f001 fe17 	bl	8011e70 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010242:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010246:	211c      	movs	r1, #28
 8010248:	200e      	movs	r0, #14
 801024a:	f7fe f949 	bl	800e4e0 <pbuf_alloc>
 801024e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010250:	69bb      	ldr	r3, [r7, #24]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d102      	bne.n	801025c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010256:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801025a:	e05d      	b.n	8010318 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801025c:	69bb      	ldr	r3, [r7, #24]
 801025e:	895b      	ldrh	r3, [r3, #10]
 8010260:	2b1b      	cmp	r3, #27
 8010262:	d806      	bhi.n	8010272 <etharp_raw+0x56>
 8010264:	4b2e      	ldr	r3, [pc, #184]	@ (8010320 <etharp_raw+0x104>)
 8010266:	f240 4262 	movw	r2, #1122	@ 0x462
 801026a:	4930      	ldr	r1, [pc, #192]	@ (801032c <etharp_raw+0x110>)
 801026c:	482e      	ldr	r0, [pc, #184]	@ (8010328 <etharp_raw+0x10c>)
 801026e:	f001 fdff 	bl	8011e70 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010272:	69bb      	ldr	r3, [r7, #24]
 8010274:	685b      	ldr	r3, [r3, #4]
 8010276:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010278:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801027a:	4618      	mov	r0, r3
 801027c:	f7fd f836 	bl	800d2ec <lwip_htons>
 8010280:	4603      	mov	r3, r0
 8010282:	461a      	mov	r2, r3
 8010284:	697b      	ldr	r3, [r7, #20]
 8010286:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801028e:	2b06      	cmp	r3, #6
 8010290:	d006      	beq.n	80102a0 <etharp_raw+0x84>
 8010292:	4b23      	ldr	r3, [pc, #140]	@ (8010320 <etharp_raw+0x104>)
 8010294:	f240 4269 	movw	r2, #1129	@ 0x469
 8010298:	4925      	ldr	r1, [pc, #148]	@ (8010330 <etharp_raw+0x114>)
 801029a:	4823      	ldr	r0, [pc, #140]	@ (8010328 <etharp_raw+0x10c>)
 801029c:	f001 fde8 	bl	8011e70 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	3308      	adds	r3, #8
 80102a4:	2206      	movs	r2, #6
 80102a6:	6839      	ldr	r1, [r7, #0]
 80102a8:	4618      	mov	r0, r3
 80102aa:	f001 ff12 	bl	80120d2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	3312      	adds	r3, #18
 80102b2:	2206      	movs	r2, #6
 80102b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80102b6:	4618      	mov	r0, r3
 80102b8:	f001 ff0b 	bl	80120d2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	330e      	adds	r3, #14
 80102c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80102c2:	6812      	ldr	r2, [r2, #0]
 80102c4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	3318      	adds	r3, #24
 80102ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80102cc:	6812      	ldr	r2, [r2, #0]
 80102ce:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	2200      	movs	r2, #0
 80102d4:	701a      	strb	r2, [r3, #0]
 80102d6:	2200      	movs	r2, #0
 80102d8:	f042 0201 	orr.w	r2, r2, #1
 80102dc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80102de:	697b      	ldr	r3, [r7, #20]
 80102e0:	2200      	movs	r2, #0
 80102e2:	f042 0208 	orr.w	r2, r2, #8
 80102e6:	709a      	strb	r2, [r3, #2]
 80102e8:	2200      	movs	r2, #0
 80102ea:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80102ec:	697b      	ldr	r3, [r7, #20]
 80102ee:	2206      	movs	r2, #6
 80102f0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	2204      	movs	r2, #4
 80102f6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80102f8:	f640 0306 	movw	r3, #2054	@ 0x806
 80102fc:	9300      	str	r3, [sp, #0]
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	68ba      	ldr	r2, [r7, #8]
 8010302:	69b9      	ldr	r1, [r7, #24]
 8010304:	68f8      	ldr	r0, [r7, #12]
 8010306:	f001 fb97 	bl	8011a38 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801030a:	69b8      	ldr	r0, [r7, #24]
 801030c:	f7fe fbca 	bl	800eaa4 <pbuf_free>
  p = NULL;
 8010310:	2300      	movs	r3, #0
 8010312:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010314:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010318:	4618      	mov	r0, r3
 801031a:	3720      	adds	r7, #32
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}
 8010320:	08013d5c 	.word	0x08013d5c
 8010324:	08013eac 	.word	0x08013eac
 8010328:	08013dd4 	.word	0x08013dd4
 801032c:	08013f5c 	.word	0x08013f5c
 8010330:	08013f90 	.word	0x08013f90

08010334 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b088      	sub	sp, #32
 8010338:	af04      	add	r7, sp, #16
 801033a:	60f8      	str	r0, [r7, #12]
 801033c:	60b9      	str	r1, [r7, #8]
 801033e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010350:	2201      	movs	r2, #1
 8010352:	9203      	str	r2, [sp, #12]
 8010354:	68ba      	ldr	r2, [r7, #8]
 8010356:	9202      	str	r2, [sp, #8]
 8010358:	4a06      	ldr	r2, [pc, #24]	@ (8010374 <etharp_request_dst+0x40>)
 801035a:	9201      	str	r2, [sp, #4]
 801035c:	9300      	str	r3, [sp, #0]
 801035e:	4603      	mov	r3, r0
 8010360:	687a      	ldr	r2, [r7, #4]
 8010362:	68f8      	ldr	r0, [r7, #12]
 8010364:	f7ff ff5a 	bl	801021c <etharp_raw>
 8010368:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801036a:	4618      	mov	r0, r3
 801036c:	3710      	adds	r7, #16
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}
 8010372:	bf00      	nop
 8010374:	08014544 	.word	0x08014544

08010378 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b082      	sub	sp, #8
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
 8010380:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010382:	4a05      	ldr	r2, [pc, #20]	@ (8010398 <etharp_request+0x20>)
 8010384:	6839      	ldr	r1, [r7, #0]
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	f7ff ffd4 	bl	8010334 <etharp_request_dst>
 801038c:	4603      	mov	r3, r0
}
 801038e:	4618      	mov	r0, r3
 8010390:	3708      	adds	r7, #8
 8010392:	46bd      	mov	sp, r7
 8010394:	bd80      	pop	{r7, pc}
 8010396:	bf00      	nop
 8010398:	0801453c 	.word	0x0801453c

0801039c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b08e      	sub	sp, #56	@ 0x38
 80103a0:	af04      	add	r7, sp, #16
 80103a2:	6078      	str	r0, [r7, #4]
 80103a4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80103a6:	4b87      	ldr	r3, [pc, #540]	@ (80105c4 <icmp_input+0x228>)
 80103a8:	689b      	ldr	r3, [r3, #8]
 80103aa:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80103ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103ae:	781b      	ldrb	r3, [r3, #0]
 80103b0:	f003 030f 	and.w	r3, r3, #15
 80103b4:	b2db      	uxtb	r3, r3
 80103b6:	009b      	lsls	r3, r3, #2
 80103b8:	b2db      	uxtb	r3, r3
 80103ba:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80103bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80103be:	2b13      	cmp	r3, #19
 80103c0:	f240 80e8 	bls.w	8010594 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	895b      	ldrh	r3, [r3, #10]
 80103c8:	2b03      	cmp	r3, #3
 80103ca:	f240 80e5 	bls.w	8010598 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	685b      	ldr	r3, [r3, #4]
 80103d2:	781b      	ldrb	r3, [r3, #0]
 80103d4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80103d8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80103dc:	2b00      	cmp	r3, #0
 80103de:	f000 80d2 	beq.w	8010586 <icmp_input+0x1ea>
 80103e2:	2b08      	cmp	r3, #8
 80103e4:	f040 80d2 	bne.w	801058c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80103e8:	4b77      	ldr	r3, [pc, #476]	@ (80105c8 <icmp_input+0x22c>)
 80103ea:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80103ec:	4b75      	ldr	r3, [pc, #468]	@ (80105c4 <icmp_input+0x228>)
 80103ee:	695b      	ldr	r3, [r3, #20]
 80103f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80103f4:	2be0      	cmp	r3, #224	@ 0xe0
 80103f6:	f000 80d6 	beq.w	80105a6 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80103fa:	4b72      	ldr	r3, [pc, #456]	@ (80105c4 <icmp_input+0x228>)
 80103fc:	695b      	ldr	r3, [r3, #20]
 80103fe:	4a71      	ldr	r2, [pc, #452]	@ (80105c4 <icmp_input+0x228>)
 8010400:	6812      	ldr	r2, [r2, #0]
 8010402:	4611      	mov	r1, r2
 8010404:	4618      	mov	r0, r3
 8010406:	f000 fc09 	bl	8010c1c <ip4_addr_isbroadcast_u32>
 801040a:	4603      	mov	r3, r0
 801040c:	2b00      	cmp	r3, #0
 801040e:	f040 80cc 	bne.w	80105aa <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	891b      	ldrh	r3, [r3, #8]
 8010416:	2b07      	cmp	r3, #7
 8010418:	f240 80c0 	bls.w	801059c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f7fc ffe9 	bl	800d3f4 <inet_chksum_pbuf>
 8010422:	4603      	mov	r3, r0
 8010424:	2b00      	cmp	r3, #0
 8010426:	d003      	beq.n	8010430 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f7fe fb3b 	bl	800eaa4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801042e:	e0c5      	b.n	80105bc <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010430:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010432:	330e      	adds	r3, #14
 8010434:	4619      	mov	r1, r3
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f7fe fa9e 	bl	800e978 <pbuf_add_header>
 801043c:	4603      	mov	r3, r0
 801043e:	2b00      	cmp	r3, #0
 8010440:	d04b      	beq.n	80104da <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	891a      	ldrh	r2, [r3, #8]
 8010446:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010448:	4413      	add	r3, r2
 801044a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	891b      	ldrh	r3, [r3, #8]
 8010450:	8b7a      	ldrh	r2, [r7, #26]
 8010452:	429a      	cmp	r2, r3
 8010454:	f0c0 80ab 	bcc.w	80105ae <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010458:	8b7b      	ldrh	r3, [r7, #26]
 801045a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801045e:	4619      	mov	r1, r3
 8010460:	200e      	movs	r0, #14
 8010462:	f7fe f83d 	bl	800e4e0 <pbuf_alloc>
 8010466:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	2b00      	cmp	r3, #0
 801046c:	f000 80a1 	beq.w	80105b2 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010470:	697b      	ldr	r3, [r7, #20]
 8010472:	895b      	ldrh	r3, [r3, #10]
 8010474:	461a      	mov	r2, r3
 8010476:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010478:	3308      	adds	r3, #8
 801047a:	429a      	cmp	r2, r3
 801047c:	d203      	bcs.n	8010486 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801047e:	6978      	ldr	r0, [r7, #20]
 8010480:	f7fe fb10 	bl	800eaa4 <pbuf_free>
          goto icmperr;
 8010484:	e096      	b.n	80105b4 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8010486:	697b      	ldr	r3, [r7, #20]
 8010488:	685b      	ldr	r3, [r3, #4]
 801048a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801048c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801048e:	4618      	mov	r0, r3
 8010490:	f001 fe1f 	bl	80120d2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8010494:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010496:	4619      	mov	r1, r3
 8010498:	6978      	ldr	r0, [r7, #20]
 801049a:	f7fe fa7d 	bl	800e998 <pbuf_remove_header>
 801049e:	4603      	mov	r3, r0
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d009      	beq.n	80104b8 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80104a4:	4b49      	ldr	r3, [pc, #292]	@ (80105cc <icmp_input+0x230>)
 80104a6:	22b6      	movs	r2, #182	@ 0xb6
 80104a8:	4949      	ldr	r1, [pc, #292]	@ (80105d0 <icmp_input+0x234>)
 80104aa:	484a      	ldr	r0, [pc, #296]	@ (80105d4 <icmp_input+0x238>)
 80104ac:	f001 fce0 	bl	8011e70 <iprintf>
          pbuf_free(r);
 80104b0:	6978      	ldr	r0, [r7, #20]
 80104b2:	f7fe faf7 	bl	800eaa4 <pbuf_free>
          goto icmperr;
 80104b6:	e07d      	b.n	80105b4 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80104b8:	6879      	ldr	r1, [r7, #4]
 80104ba:	6978      	ldr	r0, [r7, #20]
 80104bc:	f7fe fc0a 	bl	800ecd4 <pbuf_copy>
 80104c0:	4603      	mov	r3, r0
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d003      	beq.n	80104ce <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80104c6:	6978      	ldr	r0, [r7, #20]
 80104c8:	f7fe faec 	bl	800eaa4 <pbuf_free>
          goto icmperr;
 80104cc:	e072      	b.n	80105b4 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f7fe fae8 	bl	800eaa4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80104d4:	697b      	ldr	r3, [r7, #20]
 80104d6:	607b      	str	r3, [r7, #4]
 80104d8:	e00f      	b.n	80104fa <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80104da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80104dc:	330e      	adds	r3, #14
 80104de:	4619      	mov	r1, r3
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f7fe fa59 	bl	800e998 <pbuf_remove_header>
 80104e6:	4603      	mov	r3, r0
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d006      	beq.n	80104fa <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80104ec:	4b37      	ldr	r3, [pc, #220]	@ (80105cc <icmp_input+0x230>)
 80104ee:	22c7      	movs	r2, #199	@ 0xc7
 80104f0:	4939      	ldr	r1, [pc, #228]	@ (80105d8 <icmp_input+0x23c>)
 80104f2:	4838      	ldr	r0, [pc, #224]	@ (80105d4 <icmp_input+0x238>)
 80104f4:	f001 fcbc 	bl	8011e70 <iprintf>
          goto icmperr;
 80104f8:	e05c      	b.n	80105b4 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	685b      	ldr	r3, [r3, #4]
 80104fe:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8010500:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010502:	4619      	mov	r1, r3
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f7fe fa37 	bl	800e978 <pbuf_add_header>
 801050a:	4603      	mov	r3, r0
 801050c:	2b00      	cmp	r3, #0
 801050e:	d13c      	bne.n	801058a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	685b      	ldr	r3, [r3, #4]
 8010514:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8010516:	69fb      	ldr	r3, [r7, #28]
 8010518:	681a      	ldr	r2, [r3, #0]
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801051e:	4b29      	ldr	r3, [pc, #164]	@ (80105c4 <icmp_input+0x228>)
 8010520:	691a      	ldr	r2, [r3, #16]
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	2200      	movs	r2, #0
 801052a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801052c:	693b      	ldr	r3, [r7, #16]
 801052e:	885b      	ldrh	r3, [r3, #2]
 8010530:	b29b      	uxth	r3, r3
 8010532:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8010536:	4293      	cmp	r3, r2
 8010538:	d907      	bls.n	801054a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	885b      	ldrh	r3, [r3, #2]
 801053e:	b29b      	uxth	r3, r3
 8010540:	3309      	adds	r3, #9
 8010542:	b29a      	uxth	r2, r3
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	805a      	strh	r2, [r3, #2]
 8010548:	e006      	b.n	8010558 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	885b      	ldrh	r3, [r3, #2]
 801054e:	b29b      	uxth	r3, r3
 8010550:	3308      	adds	r3, #8
 8010552:	b29a      	uxth	r2, r3
 8010554:	693b      	ldr	r3, [r7, #16]
 8010556:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	22ff      	movs	r2, #255	@ 0xff
 801055c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	2200      	movs	r2, #0
 8010562:	729a      	strb	r2, [r3, #10]
 8010564:	2200      	movs	r2, #0
 8010566:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	9302      	str	r3, [sp, #8]
 801056c:	2301      	movs	r3, #1
 801056e:	9301      	str	r3, [sp, #4]
 8010570:	2300      	movs	r3, #0
 8010572:	9300      	str	r3, [sp, #0]
 8010574:	23ff      	movs	r3, #255	@ 0xff
 8010576:	2200      	movs	r2, #0
 8010578:	69f9      	ldr	r1, [r7, #28]
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f000 fa76 	bl	8010a6c <ip4_output_if>
 8010580:	4603      	mov	r3, r0
 8010582:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8010584:	e001      	b.n	801058a <icmp_input+0x1ee>
      break;
 8010586:	bf00      	nop
 8010588:	e000      	b.n	801058c <icmp_input+0x1f0>
      break;
 801058a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f7fe fa89 	bl	800eaa4 <pbuf_free>
  return;
 8010592:	e013      	b.n	80105bc <icmp_input+0x220>
    goto lenerr;
 8010594:	bf00      	nop
 8010596:	e002      	b.n	801059e <icmp_input+0x202>
    goto lenerr;
 8010598:	bf00      	nop
 801059a:	e000      	b.n	801059e <icmp_input+0x202>
        goto lenerr;
 801059c:	bf00      	nop
lenerr:
  pbuf_free(p);
 801059e:	6878      	ldr	r0, [r7, #4]
 80105a0:	f7fe fa80 	bl	800eaa4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80105a4:	e00a      	b.n	80105bc <icmp_input+0x220>
        goto icmperr;
 80105a6:	bf00      	nop
 80105a8:	e004      	b.n	80105b4 <icmp_input+0x218>
        goto icmperr;
 80105aa:	bf00      	nop
 80105ac:	e002      	b.n	80105b4 <icmp_input+0x218>
          goto icmperr;
 80105ae:	bf00      	nop
 80105b0:	e000      	b.n	80105b4 <icmp_input+0x218>
          goto icmperr;
 80105b2:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f7fe fa75 	bl	800eaa4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80105ba:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80105bc:	3728      	adds	r7, #40	@ 0x28
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
 80105c2:	bf00      	nop
 80105c4:	2406a118 	.word	0x2406a118
 80105c8:	2406a12c 	.word	0x2406a12c
 80105cc:	08013fd4 	.word	0x08013fd4
 80105d0:	0801400c 	.word	0x0801400c
 80105d4:	08014044 	.word	0x08014044
 80105d8:	0801406c 	.word	0x0801406c

080105dc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b082      	sub	sp, #8
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
 80105e4:	460b      	mov	r3, r1
 80105e6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80105e8:	78fb      	ldrb	r3, [r7, #3]
 80105ea:	461a      	mov	r2, r3
 80105ec:	2103      	movs	r1, #3
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f000 f814 	bl	801061c <icmp_send_response>
}
 80105f4:	bf00      	nop
 80105f6:	3708      	adds	r7, #8
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}

080105fc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b082      	sub	sp, #8
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	460b      	mov	r3, r1
 8010606:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010608:	78fb      	ldrb	r3, [r7, #3]
 801060a:	461a      	mov	r2, r3
 801060c:	210b      	movs	r1, #11
 801060e:	6878      	ldr	r0, [r7, #4]
 8010610:	f000 f804 	bl	801061c <icmp_send_response>
}
 8010614:	bf00      	nop
 8010616:	3708      	adds	r7, #8
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}

0801061c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b08c      	sub	sp, #48	@ 0x30
 8010620:	af04      	add	r7, sp, #16
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	460b      	mov	r3, r1
 8010626:	70fb      	strb	r3, [r7, #3]
 8010628:	4613      	mov	r3, r2
 801062a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801062c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010630:	2124      	movs	r1, #36	@ 0x24
 8010632:	2022      	movs	r0, #34	@ 0x22
 8010634:	f7fd ff54 	bl	800e4e0 <pbuf_alloc>
 8010638:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801063a:	69fb      	ldr	r3, [r7, #28]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d056      	beq.n	80106ee <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010640:	69fb      	ldr	r3, [r7, #28]
 8010642:	895b      	ldrh	r3, [r3, #10]
 8010644:	2b23      	cmp	r3, #35	@ 0x23
 8010646:	d806      	bhi.n	8010656 <icmp_send_response+0x3a>
 8010648:	4b2b      	ldr	r3, [pc, #172]	@ (80106f8 <icmp_send_response+0xdc>)
 801064a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801064e:	492b      	ldr	r1, [pc, #172]	@ (80106fc <icmp_send_response+0xe0>)
 8010650:	482b      	ldr	r0, [pc, #172]	@ (8010700 <icmp_send_response+0xe4>)
 8010652:	f001 fc0d 	bl	8011e70 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	685b      	ldr	r3, [r3, #4]
 801065a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801065c:	69fb      	ldr	r3, [r7, #28]
 801065e:	685b      	ldr	r3, [r3, #4]
 8010660:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8010662:	697b      	ldr	r3, [r7, #20]
 8010664:	78fa      	ldrb	r2, [r7, #3]
 8010666:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010668:	697b      	ldr	r3, [r7, #20]
 801066a:	78ba      	ldrb	r2, [r7, #2]
 801066c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801066e:	697b      	ldr	r3, [r7, #20]
 8010670:	2200      	movs	r2, #0
 8010672:	711a      	strb	r2, [r3, #4]
 8010674:	2200      	movs	r2, #0
 8010676:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010678:	697b      	ldr	r3, [r7, #20]
 801067a:	2200      	movs	r2, #0
 801067c:	719a      	strb	r2, [r3, #6]
 801067e:	2200      	movs	r2, #0
 8010680:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010682:	69fb      	ldr	r3, [r7, #28]
 8010684:	685b      	ldr	r3, [r3, #4]
 8010686:	f103 0008 	add.w	r0, r3, #8
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	685b      	ldr	r3, [r3, #4]
 801068e:	221c      	movs	r2, #28
 8010690:	4619      	mov	r1, r3
 8010692:	f001 fd1e 	bl	80120d2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010696:	69bb      	ldr	r3, [r7, #24]
 8010698:	68db      	ldr	r3, [r3, #12]
 801069a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801069c:	f107 030c 	add.w	r3, r7, #12
 80106a0:	4618      	mov	r0, r3
 80106a2:	f000 f82f 	bl	8010704 <ip4_route>
 80106a6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d01b      	beq.n	80106e6 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80106ae:	697b      	ldr	r3, [r7, #20]
 80106b0:	2200      	movs	r2, #0
 80106b2:	709a      	strb	r2, [r3, #2]
 80106b4:	2200      	movs	r2, #0
 80106b6:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80106b8:	69fb      	ldr	r3, [r7, #28]
 80106ba:	895b      	ldrh	r3, [r3, #10]
 80106bc:	4619      	mov	r1, r3
 80106be:	6978      	ldr	r0, [r7, #20]
 80106c0:	f7fc fe86 	bl	800d3d0 <inet_chksum>
 80106c4:	4603      	mov	r3, r0
 80106c6:	461a      	mov	r2, r3
 80106c8:	697b      	ldr	r3, [r7, #20]
 80106ca:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80106cc:	f107 020c 	add.w	r2, r7, #12
 80106d0:	693b      	ldr	r3, [r7, #16]
 80106d2:	9302      	str	r3, [sp, #8]
 80106d4:	2301      	movs	r3, #1
 80106d6:	9301      	str	r3, [sp, #4]
 80106d8:	2300      	movs	r3, #0
 80106da:	9300      	str	r3, [sp, #0]
 80106dc:	23ff      	movs	r3, #255	@ 0xff
 80106de:	2100      	movs	r1, #0
 80106e0:	69f8      	ldr	r0, [r7, #28]
 80106e2:	f000 f9c3 	bl	8010a6c <ip4_output_if>
  }
  pbuf_free(q);
 80106e6:	69f8      	ldr	r0, [r7, #28]
 80106e8:	f7fe f9dc 	bl	800eaa4 <pbuf_free>
 80106ec:	e000      	b.n	80106f0 <icmp_send_response+0xd4>
    return;
 80106ee:	bf00      	nop
}
 80106f0:	3720      	adds	r7, #32
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}
 80106f6:	bf00      	nop
 80106f8:	08013fd4 	.word	0x08013fd4
 80106fc:	080140a0 	.word	0x080140a0
 8010700:	08014044 	.word	0x08014044

08010704 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8010704:	b480      	push	{r7}
 8010706:	b085      	sub	sp, #20
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801070c:	4b33      	ldr	r3, [pc, #204]	@ (80107dc <ip4_route+0xd8>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	60fb      	str	r3, [r7, #12]
 8010712:	e036      	b.n	8010782 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801071a:	f003 0301 	and.w	r3, r3, #1
 801071e:	b2db      	uxtb	r3, r3
 8010720:	2b00      	cmp	r3, #0
 8010722:	d02b      	beq.n	801077c <ip4_route+0x78>
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801072a:	089b      	lsrs	r3, r3, #2
 801072c:	f003 0301 	and.w	r3, r3, #1
 8010730:	b2db      	uxtb	r3, r3
 8010732:	2b00      	cmp	r3, #0
 8010734:	d022      	beq.n	801077c <ip4_route+0x78>
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	3304      	adds	r3, #4
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d01d      	beq.n	801077c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681a      	ldr	r2, [r3, #0]
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	3304      	adds	r3, #4
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	405a      	eors	r2, r3
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	3308      	adds	r3, #8
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	4013      	ands	r3, r2
 8010754:	2b00      	cmp	r3, #0
 8010756:	d101      	bne.n	801075c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	e038      	b.n	80107ce <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010762:	f003 0302 	and.w	r3, r3, #2
 8010766:	2b00      	cmp	r3, #0
 8010768:	d108      	bne.n	801077c <ip4_route+0x78>
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681a      	ldr	r2, [r3, #0]
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	330c      	adds	r3, #12
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	429a      	cmp	r2, r3
 8010776:	d101      	bne.n	801077c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	e028      	b.n	80107ce <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	60fb      	str	r3, [r7, #12]
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d1c5      	bne.n	8010714 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010788:	4b15      	ldr	r3, [pc, #84]	@ (80107e0 <ip4_route+0xdc>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d01a      	beq.n	80107c6 <ip4_route+0xc2>
 8010790:	4b13      	ldr	r3, [pc, #76]	@ (80107e0 <ip4_route+0xdc>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010798:	f003 0301 	and.w	r3, r3, #1
 801079c:	2b00      	cmp	r3, #0
 801079e:	d012      	beq.n	80107c6 <ip4_route+0xc2>
 80107a0:	4b0f      	ldr	r3, [pc, #60]	@ (80107e0 <ip4_route+0xdc>)
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80107a8:	f003 0304 	and.w	r3, r3, #4
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d00a      	beq.n	80107c6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80107b0:	4b0b      	ldr	r3, [pc, #44]	@ (80107e0 <ip4_route+0xdc>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	3304      	adds	r3, #4
 80107b6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d004      	beq.n	80107c6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	b2db      	uxtb	r3, r3
 80107c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80107c4:	d101      	bne.n	80107ca <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80107c6:	2300      	movs	r3, #0
 80107c8:	e001      	b.n	80107ce <ip4_route+0xca>
  }

  return netif_default;
 80107ca:	4b05      	ldr	r3, [pc, #20]	@ (80107e0 <ip4_route+0xdc>)
 80107cc:	681b      	ldr	r3, [r3, #0]
}
 80107ce:	4618      	mov	r0, r3
 80107d0:	3714      	adds	r7, #20
 80107d2:	46bd      	mov	sp, r7
 80107d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d8:	4770      	bx	lr
 80107da:	bf00      	nop
 80107dc:	2406ce48 	.word	0x2406ce48
 80107e0:	2406ce4c 	.word	0x2406ce4c

080107e4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b082      	sub	sp, #8
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80107f2:	f003 0301 	and.w	r3, r3, #1
 80107f6:	b2db      	uxtb	r3, r3
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d016      	beq.n	801082a <ip4_input_accept+0x46>
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	3304      	adds	r3, #4
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d011      	beq.n	801082a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010806:	4b0b      	ldr	r3, [pc, #44]	@ (8010834 <ip4_input_accept+0x50>)
 8010808:	695a      	ldr	r2, [r3, #20]
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	3304      	adds	r3, #4
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	429a      	cmp	r2, r3
 8010812:	d008      	beq.n	8010826 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010814:	4b07      	ldr	r3, [pc, #28]	@ (8010834 <ip4_input_accept+0x50>)
 8010816:	695b      	ldr	r3, [r3, #20]
 8010818:	6879      	ldr	r1, [r7, #4]
 801081a:	4618      	mov	r0, r3
 801081c:	f000 f9fe 	bl	8010c1c <ip4_addr_isbroadcast_u32>
 8010820:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010822:	2b00      	cmp	r3, #0
 8010824:	d001      	beq.n	801082a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8010826:	2301      	movs	r3, #1
 8010828:	e000      	b.n	801082c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801082a:	2300      	movs	r3, #0
}
 801082c:	4618      	mov	r0, r3
 801082e:	3708      	adds	r7, #8
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}
 8010834:	2406a118 	.word	0x2406a118

08010838 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b086      	sub	sp, #24
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
 8010840:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	685b      	ldr	r3, [r3, #4]
 8010846:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8010848:	697b      	ldr	r3, [r7, #20]
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	091b      	lsrs	r3, r3, #4
 801084e:	b2db      	uxtb	r3, r3
 8010850:	2b04      	cmp	r3, #4
 8010852:	d004      	beq.n	801085e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010854:	6878      	ldr	r0, [r7, #4]
 8010856:	f7fe f925 	bl	800eaa4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801085a:	2300      	movs	r3, #0
 801085c:	e0fd      	b.n	8010a5a <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	781b      	ldrb	r3, [r3, #0]
 8010862:	f003 030f 	and.w	r3, r3, #15
 8010866:	b2db      	uxtb	r3, r3
 8010868:	009b      	lsls	r3, r3, #2
 801086a:	b2db      	uxtb	r3, r3
 801086c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801086e:	697b      	ldr	r3, [r7, #20]
 8010870:	885b      	ldrh	r3, [r3, #2]
 8010872:	b29b      	uxth	r3, r3
 8010874:	4618      	mov	r0, r3
 8010876:	f7fc fd39 	bl	800d2ec <lwip_htons>
 801087a:	4603      	mov	r3, r0
 801087c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	891b      	ldrh	r3, [r3, #8]
 8010882:	89ba      	ldrh	r2, [r7, #12]
 8010884:	429a      	cmp	r2, r3
 8010886:	d204      	bcs.n	8010892 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8010888:	89bb      	ldrh	r3, [r7, #12]
 801088a:	4619      	mov	r1, r3
 801088c:	6878      	ldr	r0, [r7, #4]
 801088e:	f7fd ff83 	bl	800e798 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	895b      	ldrh	r3, [r3, #10]
 8010896:	89fa      	ldrh	r2, [r7, #14]
 8010898:	429a      	cmp	r2, r3
 801089a:	d807      	bhi.n	80108ac <ip4_input+0x74>
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	891b      	ldrh	r3, [r3, #8]
 80108a0:	89ba      	ldrh	r2, [r7, #12]
 80108a2:	429a      	cmp	r2, r3
 80108a4:	d802      	bhi.n	80108ac <ip4_input+0x74>
 80108a6:	89fb      	ldrh	r3, [r7, #14]
 80108a8:	2b13      	cmp	r3, #19
 80108aa:	d804      	bhi.n	80108b6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f7fe f8f9 	bl	800eaa4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80108b2:	2300      	movs	r3, #0
 80108b4:	e0d1      	b.n	8010a5a <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	691b      	ldr	r3, [r3, #16]
 80108ba:	4a6a      	ldr	r2, [pc, #424]	@ (8010a64 <ip4_input+0x22c>)
 80108bc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80108be:	697b      	ldr	r3, [r7, #20]
 80108c0:	68db      	ldr	r3, [r3, #12]
 80108c2:	4a68      	ldr	r2, [pc, #416]	@ (8010a64 <ip4_input+0x22c>)
 80108c4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80108c6:	4b67      	ldr	r3, [pc, #412]	@ (8010a64 <ip4_input+0x22c>)
 80108c8:	695b      	ldr	r3, [r3, #20]
 80108ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80108ce:	2be0      	cmp	r3, #224	@ 0xe0
 80108d0:	d112      	bne.n	80108f8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80108d8:	f003 0301 	and.w	r3, r3, #1
 80108dc:	b2db      	uxtb	r3, r3
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d007      	beq.n	80108f2 <ip4_input+0xba>
 80108e2:	683b      	ldr	r3, [r7, #0]
 80108e4:	3304      	adds	r3, #4
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d002      	beq.n	80108f2 <ip4_input+0xba>
      netif = inp;
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	613b      	str	r3, [r7, #16]
 80108f0:	e02a      	b.n	8010948 <ip4_input+0x110>
    } else {
      netif = NULL;
 80108f2:	2300      	movs	r3, #0
 80108f4:	613b      	str	r3, [r7, #16]
 80108f6:	e027      	b.n	8010948 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80108f8:	6838      	ldr	r0, [r7, #0]
 80108fa:	f7ff ff73 	bl	80107e4 <ip4_input_accept>
 80108fe:	4603      	mov	r3, r0
 8010900:	2b00      	cmp	r3, #0
 8010902:	d002      	beq.n	801090a <ip4_input+0xd2>
      netif = inp;
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	613b      	str	r3, [r7, #16]
 8010908:	e01e      	b.n	8010948 <ip4_input+0x110>
    } else {
      netif = NULL;
 801090a:	2300      	movs	r3, #0
 801090c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801090e:	4b55      	ldr	r3, [pc, #340]	@ (8010a64 <ip4_input+0x22c>)
 8010910:	695b      	ldr	r3, [r3, #20]
 8010912:	b2db      	uxtb	r3, r3
 8010914:	2b7f      	cmp	r3, #127	@ 0x7f
 8010916:	d017      	beq.n	8010948 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8010918:	4b53      	ldr	r3, [pc, #332]	@ (8010a68 <ip4_input+0x230>)
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	613b      	str	r3, [r7, #16]
 801091e:	e00e      	b.n	801093e <ip4_input+0x106>
          if (netif == inp) {
 8010920:	693a      	ldr	r2, [r7, #16]
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	429a      	cmp	r2, r3
 8010926:	d006      	beq.n	8010936 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010928:	6938      	ldr	r0, [r7, #16]
 801092a:	f7ff ff5b 	bl	80107e4 <ip4_input_accept>
 801092e:	4603      	mov	r3, r0
 8010930:	2b00      	cmp	r3, #0
 8010932:	d108      	bne.n	8010946 <ip4_input+0x10e>
 8010934:	e000      	b.n	8010938 <ip4_input+0x100>
            continue;
 8010936:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010938:	693b      	ldr	r3, [r7, #16]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	613b      	str	r3, [r7, #16]
 801093e:	693b      	ldr	r3, [r7, #16]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d1ed      	bne.n	8010920 <ip4_input+0xe8>
 8010944:	e000      	b.n	8010948 <ip4_input+0x110>
            break;
 8010946:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010948:	4b46      	ldr	r3, [pc, #280]	@ (8010a64 <ip4_input+0x22c>)
 801094a:	691b      	ldr	r3, [r3, #16]
 801094c:	6839      	ldr	r1, [r7, #0]
 801094e:	4618      	mov	r0, r3
 8010950:	f000 f964 	bl	8010c1c <ip4_addr_isbroadcast_u32>
 8010954:	4603      	mov	r3, r0
 8010956:	2b00      	cmp	r3, #0
 8010958:	d105      	bne.n	8010966 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801095a:	4b42      	ldr	r3, [pc, #264]	@ (8010a64 <ip4_input+0x22c>)
 801095c:	691b      	ldr	r3, [r3, #16]
 801095e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010962:	2be0      	cmp	r3, #224	@ 0xe0
 8010964:	d104      	bne.n	8010970 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f7fe f89c 	bl	800eaa4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801096c:	2300      	movs	r3, #0
 801096e:	e074      	b.n	8010a5a <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010970:	693b      	ldr	r3, [r7, #16]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d104      	bne.n	8010980 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	f7fe f894 	bl	800eaa4 <pbuf_free>
    return ERR_OK;
 801097c:	2300      	movs	r3, #0
 801097e:	e06c      	b.n	8010a5a <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010980:	697b      	ldr	r3, [r7, #20]
 8010982:	88db      	ldrh	r3, [r3, #6]
 8010984:	b29b      	uxth	r3, r3
 8010986:	461a      	mov	r2, r3
 8010988:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801098c:	4013      	ands	r3, r2
 801098e:	2b00      	cmp	r3, #0
 8010990:	d00b      	beq.n	80109aa <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f000 fc88 	bl	80112a8 <ip4_reass>
 8010998:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d101      	bne.n	80109a4 <ip4_input+0x16c>
      return ERR_OK;
 80109a0:	2300      	movs	r3, #0
 80109a2:	e05a      	b.n	8010a5a <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	685b      	ldr	r3, [r3, #4]
 80109a8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80109aa:	4a2e      	ldr	r2, [pc, #184]	@ (8010a64 <ip4_input+0x22c>)
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80109b0:	4a2c      	ldr	r2, [pc, #176]	@ (8010a64 <ip4_input+0x22c>)
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80109b6:	4a2b      	ldr	r2, [pc, #172]	@ (8010a64 <ip4_input+0x22c>)
 80109b8:	697b      	ldr	r3, [r7, #20]
 80109ba:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80109bc:	697b      	ldr	r3, [r7, #20]
 80109be:	781b      	ldrb	r3, [r3, #0]
 80109c0:	f003 030f 	and.w	r3, r3, #15
 80109c4:	b2db      	uxtb	r3, r3
 80109c6:	009b      	lsls	r3, r3, #2
 80109c8:	b2db      	uxtb	r3, r3
 80109ca:	461a      	mov	r2, r3
 80109cc:	4b25      	ldr	r3, [pc, #148]	@ (8010a64 <ip4_input+0x22c>)
 80109ce:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80109d0:	89fb      	ldrh	r3, [r7, #14]
 80109d2:	4619      	mov	r1, r3
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	f7fd ffdf 	bl	800e998 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80109da:	697b      	ldr	r3, [r7, #20]
 80109dc:	7a5b      	ldrb	r3, [r3, #9]
 80109de:	2b01      	cmp	r3, #1
 80109e0:	d006      	beq.n	80109f0 <ip4_input+0x1b8>
 80109e2:	2b11      	cmp	r3, #17
 80109e4:	d109      	bne.n	80109fa <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80109e6:	6839      	ldr	r1, [r7, #0]
 80109e8:	6878      	ldr	r0, [r7, #4]
 80109ea:	f7fe fc47 	bl	800f27c <udp_input>
        break;
 80109ee:	e021      	b.n	8010a34 <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80109f0:	6839      	ldr	r1, [r7, #0]
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f7ff fcd2 	bl	801039c <icmp_input>
        break;
 80109f8:	e01c      	b.n	8010a34 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80109fa:	4b1a      	ldr	r3, [pc, #104]	@ (8010a64 <ip4_input+0x22c>)
 80109fc:	695b      	ldr	r3, [r3, #20]
 80109fe:	6939      	ldr	r1, [r7, #16]
 8010a00:	4618      	mov	r0, r3
 8010a02:	f000 f90b 	bl	8010c1c <ip4_addr_isbroadcast_u32>
 8010a06:	4603      	mov	r3, r0
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d10f      	bne.n	8010a2c <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010a0c:	4b15      	ldr	r3, [pc, #84]	@ (8010a64 <ip4_input+0x22c>)
 8010a0e:	695b      	ldr	r3, [r3, #20]
 8010a10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010a14:	2be0      	cmp	r3, #224	@ 0xe0
 8010a16:	d009      	beq.n	8010a2c <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010a18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010a1c:	4619      	mov	r1, r3
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f7fe f82d 	bl	800ea7e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010a24:	2102      	movs	r1, #2
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f7ff fdd8 	bl	80105dc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010a2c:	6878      	ldr	r0, [r7, #4]
 8010a2e:	f7fe f839 	bl	800eaa4 <pbuf_free>
        break;
 8010a32:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010a34:	4b0b      	ldr	r3, [pc, #44]	@ (8010a64 <ip4_input+0x22c>)
 8010a36:	2200      	movs	r2, #0
 8010a38:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8010a64 <ip4_input+0x22c>)
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010a40:	4b08      	ldr	r3, [pc, #32]	@ (8010a64 <ip4_input+0x22c>)
 8010a42:	2200      	movs	r2, #0
 8010a44:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010a46:	4b07      	ldr	r3, [pc, #28]	@ (8010a64 <ip4_input+0x22c>)
 8010a48:	2200      	movs	r2, #0
 8010a4a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010a4c:	4b05      	ldr	r3, [pc, #20]	@ (8010a64 <ip4_input+0x22c>)
 8010a4e:	2200      	movs	r2, #0
 8010a50:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8010a52:	4b04      	ldr	r3, [pc, #16]	@ (8010a64 <ip4_input+0x22c>)
 8010a54:	2200      	movs	r2, #0
 8010a56:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010a58:	2300      	movs	r3, #0
}
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	3718      	adds	r7, #24
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	bd80      	pop	{r7, pc}
 8010a62:	bf00      	nop
 8010a64:	2406a118 	.word	0x2406a118
 8010a68:	2406ce48 	.word	0x2406ce48

08010a6c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b08a      	sub	sp, #40	@ 0x28
 8010a70:	af04      	add	r7, sp, #16
 8010a72:	60f8      	str	r0, [r7, #12]
 8010a74:	60b9      	str	r1, [r7, #8]
 8010a76:	607a      	str	r2, [r7, #4]
 8010a78:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d009      	beq.n	8010a98 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d003      	beq.n	8010a92 <ip4_output_if+0x26>
 8010a8a:	68bb      	ldr	r3, [r7, #8]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d102      	bne.n	8010a98 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8010a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a94:	3304      	adds	r3, #4
 8010a96:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010a98:	78fa      	ldrb	r2, [r7, #3]
 8010a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a9c:	9302      	str	r3, [sp, #8]
 8010a9e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010aa2:	9301      	str	r3, [sp, #4]
 8010aa4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010aa8:	9300      	str	r3, [sp, #0]
 8010aaa:	4613      	mov	r3, r2
 8010aac:	687a      	ldr	r2, [r7, #4]
 8010aae:	6979      	ldr	r1, [r7, #20]
 8010ab0:	68f8      	ldr	r0, [r7, #12]
 8010ab2:	f000 f805 	bl	8010ac0 <ip4_output_if_src>
 8010ab6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010ab8:	4618      	mov	r0, r3
 8010aba:	3718      	adds	r7, #24
 8010abc:	46bd      	mov	sp, r7
 8010abe:	bd80      	pop	{r7, pc}

08010ac0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b088      	sub	sp, #32
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	60f8      	str	r0, [r7, #12]
 8010ac8:	60b9      	str	r1, [r7, #8]
 8010aca:	607a      	str	r2, [r7, #4]
 8010acc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	7b9b      	ldrb	r3, [r3, #14]
 8010ad2:	2b01      	cmp	r3, #1
 8010ad4:	d006      	beq.n	8010ae4 <ip4_output_if_src+0x24>
 8010ad6:	4b4b      	ldr	r3, [pc, #300]	@ (8010c04 <ip4_output_if_src+0x144>)
 8010ad8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8010adc:	494a      	ldr	r1, [pc, #296]	@ (8010c08 <ip4_output_if_src+0x148>)
 8010ade:	484b      	ldr	r0, [pc, #300]	@ (8010c0c <ip4_output_if_src+0x14c>)
 8010ae0:	f001 f9c6 	bl	8011e70 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d060      	beq.n	8010bac <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8010aea:	2314      	movs	r3, #20
 8010aec:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8010aee:	2114      	movs	r1, #20
 8010af0:	68f8      	ldr	r0, [r7, #12]
 8010af2:	f7fd ff41 	bl	800e978 <pbuf_add_header>
 8010af6:	4603      	mov	r3, r0
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d002      	beq.n	8010b02 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010afc:	f06f 0301 	mvn.w	r3, #1
 8010b00:	e07c      	b.n	8010bfc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	685b      	ldr	r3, [r3, #4]
 8010b06:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	895b      	ldrh	r3, [r3, #10]
 8010b0c:	2b13      	cmp	r3, #19
 8010b0e:	d806      	bhi.n	8010b1e <ip4_output_if_src+0x5e>
 8010b10:	4b3c      	ldr	r3, [pc, #240]	@ (8010c04 <ip4_output_if_src+0x144>)
 8010b12:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8010b16:	493e      	ldr	r1, [pc, #248]	@ (8010c10 <ip4_output_if_src+0x150>)
 8010b18:	483c      	ldr	r0, [pc, #240]	@ (8010c0c <ip4_output_if_src+0x14c>)
 8010b1a:	f001 f9a9 	bl	8011e70 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010b1e:	69fb      	ldr	r3, [r7, #28]
 8010b20:	78fa      	ldrb	r2, [r7, #3]
 8010b22:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010b24:	69fb      	ldr	r3, [r7, #28]
 8010b26:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8010b2a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	681a      	ldr	r2, [r3, #0]
 8010b30:	69fb      	ldr	r3, [r7, #28]
 8010b32:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010b34:	8b7b      	ldrh	r3, [r7, #26]
 8010b36:	089b      	lsrs	r3, r3, #2
 8010b38:	b29b      	uxth	r3, r3
 8010b3a:	b2db      	uxtb	r3, r3
 8010b3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b40:	b2da      	uxtb	r2, r3
 8010b42:	69fb      	ldr	r3, [r7, #28]
 8010b44:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8010b46:	69fb      	ldr	r3, [r7, #28]
 8010b48:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8010b4c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	891b      	ldrh	r3, [r3, #8]
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7fc fbca 	bl	800d2ec <lwip_htons>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	69fb      	ldr	r3, [r7, #28]
 8010b5e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010b60:	69fb      	ldr	r3, [r7, #28]
 8010b62:	2200      	movs	r2, #0
 8010b64:	719a      	strb	r2, [r3, #6]
 8010b66:	2200      	movs	r2, #0
 8010b68:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010b6a:	4b2a      	ldr	r3, [pc, #168]	@ (8010c14 <ip4_output_if_src+0x154>)
 8010b6c:	881b      	ldrh	r3, [r3, #0]
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f7fc fbbc 	bl	800d2ec <lwip_htons>
 8010b74:	4603      	mov	r3, r0
 8010b76:	461a      	mov	r2, r3
 8010b78:	69fb      	ldr	r3, [r7, #28]
 8010b7a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010b7c:	4b25      	ldr	r3, [pc, #148]	@ (8010c14 <ip4_output_if_src+0x154>)
 8010b7e:	881b      	ldrh	r3, [r3, #0]
 8010b80:	3301      	adds	r3, #1
 8010b82:	b29a      	uxth	r2, r3
 8010b84:	4b23      	ldr	r3, [pc, #140]	@ (8010c14 <ip4_output_if_src+0x154>)
 8010b86:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d104      	bne.n	8010b98 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010b8e:	4b22      	ldr	r3, [pc, #136]	@ (8010c18 <ip4_output_if_src+0x158>)
 8010b90:	681a      	ldr	r2, [r3, #0]
 8010b92:	69fb      	ldr	r3, [r7, #28]
 8010b94:	60da      	str	r2, [r3, #12]
 8010b96:	e003      	b.n	8010ba0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	681a      	ldr	r2, [r3, #0]
 8010b9c:	69fb      	ldr	r3, [r7, #28]
 8010b9e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010ba0:	69fb      	ldr	r3, [r7, #28]
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	729a      	strb	r2, [r3, #10]
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	72da      	strb	r2, [r3, #11]
 8010baa:	e00f      	b.n	8010bcc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	895b      	ldrh	r3, [r3, #10]
 8010bb0:	2b13      	cmp	r3, #19
 8010bb2:	d802      	bhi.n	8010bba <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010bb4:	f06f 0301 	mvn.w	r3, #1
 8010bb8:	e020      	b.n	8010bfc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	685b      	ldr	r3, [r3, #4]
 8010bbe:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010bc0:	69fb      	ldr	r3, [r7, #28]
 8010bc2:	691b      	ldr	r3, [r3, #16]
 8010bc4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8010bc6:	f107 0314 	add.w	r3, r7, #20
 8010bca:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bce:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d00c      	beq.n	8010bee <ip4_output_if_src+0x12e>
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	891a      	ldrh	r2, [r3, #8]
 8010bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bda:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010bdc:	429a      	cmp	r2, r3
 8010bde:	d906      	bls.n	8010bee <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8010be0:	687a      	ldr	r2, [r7, #4]
 8010be2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010be4:	68f8      	ldr	r0, [r7, #12]
 8010be6:	f000 fd53 	bl	8011690 <ip4_frag>
 8010bea:	4603      	mov	r3, r0
 8010bec:	e006      	b.n	8010bfc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bf0:	695b      	ldr	r3, [r3, #20]
 8010bf2:	687a      	ldr	r2, [r7, #4]
 8010bf4:	68f9      	ldr	r1, [r7, #12]
 8010bf6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010bf8:	4798      	blx	r3
 8010bfa:	4603      	mov	r3, r0
}
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	3720      	adds	r7, #32
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd80      	pop	{r7, pc}
 8010c04:	080140cc 	.word	0x080140cc
 8010c08:	08014100 	.word	0x08014100
 8010c0c:	0801410c 	.word	0x0801410c
 8010c10:	08014134 	.word	0x08014134
 8010c14:	2406cf52 	.word	0x2406cf52
 8010c18:	08014538 	.word	0x08014538

08010c1c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010c1c:	b480      	push	{r7}
 8010c1e:	b085      	sub	sp, #20
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
 8010c24:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010c30:	d002      	beq.n	8010c38 <ip4_addr_isbroadcast_u32+0x1c>
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d101      	bne.n	8010c3c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010c38:	2301      	movs	r3, #1
 8010c3a:	e02a      	b.n	8010c92 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010c42:	f003 0302 	and.w	r3, r3, #2
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d101      	bne.n	8010c4e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	e021      	b.n	8010c92 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	3304      	adds	r3, #4
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	687a      	ldr	r2, [r7, #4]
 8010c56:	429a      	cmp	r2, r3
 8010c58:	d101      	bne.n	8010c5e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	e019      	b.n	8010c92 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010c5e:	68fa      	ldr	r2, [r7, #12]
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	3304      	adds	r3, #4
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	405a      	eors	r2, r3
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	3308      	adds	r3, #8
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	4013      	ands	r3, r2
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d10d      	bne.n	8010c90 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	3308      	adds	r3, #8
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	43da      	mvns	r2, r3
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	3308      	adds	r3, #8
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	d101      	bne.n	8010c90 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	e000      	b.n	8010c92 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010c90:	2300      	movs	r3, #0
  }
}
 8010c92:	4618      	mov	r0, r3
 8010c94:	3714      	adds	r7, #20
 8010c96:	46bd      	mov	sp, r7
 8010c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9c:	4770      	bx	lr
	...

08010ca0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b084      	sub	sp, #16
 8010ca4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010caa:	4b12      	ldr	r3, [pc, #72]	@ (8010cf4 <ip_reass_tmr+0x54>)
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010cb0:	e018      	b.n	8010ce4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	7fdb      	ldrb	r3, [r3, #31]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d00b      	beq.n	8010cd2 <ip_reass_tmr+0x32>
      r->timer--;
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	7fdb      	ldrb	r3, [r3, #31]
 8010cbe:	3b01      	subs	r3, #1
 8010cc0:	b2da      	uxtb	r2, r3
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	60fb      	str	r3, [r7, #12]
 8010cd0:	e008      	b.n	8010ce4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010cdc:	68b9      	ldr	r1, [r7, #8]
 8010cde:	6878      	ldr	r0, [r7, #4]
 8010ce0:	f000 f80a 	bl	8010cf8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d1e3      	bne.n	8010cb2 <ip_reass_tmr+0x12>
    }
  }
}
 8010cea:	bf00      	nop
 8010cec:	bf00      	nop
 8010cee:	3710      	adds	r7, #16
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}
 8010cf4:	2406cf54 	.word	0x2406cf54

08010cf8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b088      	sub	sp, #32
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
 8010d00:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8010d02:	2300      	movs	r3, #0
 8010d04:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8010d06:	683a      	ldr	r2, [r7, #0]
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	d105      	bne.n	8010d1a <ip_reass_free_complete_datagram+0x22>
 8010d0e:	4b45      	ldr	r3, [pc, #276]	@ (8010e24 <ip_reass_free_complete_datagram+0x12c>)
 8010d10:	22ab      	movs	r2, #171	@ 0xab
 8010d12:	4945      	ldr	r1, [pc, #276]	@ (8010e28 <ip_reass_free_complete_datagram+0x130>)
 8010d14:	4845      	ldr	r0, [pc, #276]	@ (8010e2c <ip_reass_free_complete_datagram+0x134>)
 8010d16:	f001 f8ab 	bl	8011e70 <iprintf>
  if (prev != NULL) {
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d00a      	beq.n	8010d36 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	687a      	ldr	r2, [r7, #4]
 8010d26:	429a      	cmp	r2, r3
 8010d28:	d005      	beq.n	8010d36 <ip_reass_free_complete_datagram+0x3e>
 8010d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8010e24 <ip_reass_free_complete_datagram+0x12c>)
 8010d2c:	22ad      	movs	r2, #173	@ 0xad
 8010d2e:	4940      	ldr	r1, [pc, #256]	@ (8010e30 <ip_reass_free_complete_datagram+0x138>)
 8010d30:	483e      	ldr	r0, [pc, #248]	@ (8010e2c <ip_reass_free_complete_datagram+0x134>)
 8010d32:	f001 f89d 	bl	8011e70 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	685b      	ldr	r3, [r3, #4]
 8010d3a:	685b      	ldr	r3, [r3, #4]
 8010d3c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010d3e:	697b      	ldr	r3, [r7, #20]
 8010d40:	889b      	ldrh	r3, [r3, #4]
 8010d42:	b29b      	uxth	r3, r3
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d12a      	bne.n	8010d9e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	685b      	ldr	r3, [r3, #4]
 8010d4c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010d4e:	697b      	ldr	r3, [r7, #20]
 8010d50:	681a      	ldr	r2, [r3, #0]
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8010d56:	69bb      	ldr	r3, [r7, #24]
 8010d58:	6858      	ldr	r0, [r3, #4]
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	3308      	adds	r3, #8
 8010d5e:	2214      	movs	r2, #20
 8010d60:	4619      	mov	r1, r3
 8010d62:	f001 f9b6 	bl	80120d2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8010d66:	2101      	movs	r1, #1
 8010d68:	69b8      	ldr	r0, [r7, #24]
 8010d6a:	f7ff fc47 	bl	80105fc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010d6e:	69b8      	ldr	r0, [r7, #24]
 8010d70:	f7fd ff20 	bl	800ebb4 <pbuf_clen>
 8010d74:	4603      	mov	r3, r0
 8010d76:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010d78:	8bfa      	ldrh	r2, [r7, #30]
 8010d7a:	8a7b      	ldrh	r3, [r7, #18]
 8010d7c:	4413      	add	r3, r2
 8010d7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010d82:	db05      	blt.n	8010d90 <ip_reass_free_complete_datagram+0x98>
 8010d84:	4b27      	ldr	r3, [pc, #156]	@ (8010e24 <ip_reass_free_complete_datagram+0x12c>)
 8010d86:	22bc      	movs	r2, #188	@ 0xbc
 8010d88:	492a      	ldr	r1, [pc, #168]	@ (8010e34 <ip_reass_free_complete_datagram+0x13c>)
 8010d8a:	4828      	ldr	r0, [pc, #160]	@ (8010e2c <ip_reass_free_complete_datagram+0x134>)
 8010d8c:	f001 f870 	bl	8011e70 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010d90:	8bfa      	ldrh	r2, [r7, #30]
 8010d92:	8a7b      	ldrh	r3, [r7, #18]
 8010d94:	4413      	add	r3, r2
 8010d96:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010d98:	69b8      	ldr	r0, [r7, #24]
 8010d9a:	f7fd fe83 	bl	800eaa4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	685b      	ldr	r3, [r3, #4]
 8010da2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8010da4:	e01f      	b.n	8010de6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8010da6:	69bb      	ldr	r3, [r7, #24]
 8010da8:	685b      	ldr	r3, [r3, #4]
 8010daa:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010dac:	69bb      	ldr	r3, [r7, #24]
 8010dae:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8010db6:	68f8      	ldr	r0, [r7, #12]
 8010db8:	f7fd fefc 	bl	800ebb4 <pbuf_clen>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010dc0:	8bfa      	ldrh	r2, [r7, #30]
 8010dc2:	8a7b      	ldrh	r3, [r7, #18]
 8010dc4:	4413      	add	r3, r2
 8010dc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010dca:	db05      	blt.n	8010dd8 <ip_reass_free_complete_datagram+0xe0>
 8010dcc:	4b15      	ldr	r3, [pc, #84]	@ (8010e24 <ip_reass_free_complete_datagram+0x12c>)
 8010dce:	22cc      	movs	r2, #204	@ 0xcc
 8010dd0:	4918      	ldr	r1, [pc, #96]	@ (8010e34 <ip_reass_free_complete_datagram+0x13c>)
 8010dd2:	4816      	ldr	r0, [pc, #88]	@ (8010e2c <ip_reass_free_complete_datagram+0x134>)
 8010dd4:	f001 f84c 	bl	8011e70 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010dd8:	8bfa      	ldrh	r2, [r7, #30]
 8010dda:	8a7b      	ldrh	r3, [r7, #18]
 8010ddc:	4413      	add	r3, r2
 8010dde:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8010de0:	68f8      	ldr	r0, [r7, #12]
 8010de2:	f7fd fe5f 	bl	800eaa4 <pbuf_free>
  while (p != NULL) {
 8010de6:	69bb      	ldr	r3, [r7, #24]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d1dc      	bne.n	8010da6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010dec:	6839      	ldr	r1, [r7, #0]
 8010dee:	6878      	ldr	r0, [r7, #4]
 8010df0:	f000 f8c2 	bl	8010f78 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010df4:	4b10      	ldr	r3, [pc, #64]	@ (8010e38 <ip_reass_free_complete_datagram+0x140>)
 8010df6:	881b      	ldrh	r3, [r3, #0]
 8010df8:	8bfa      	ldrh	r2, [r7, #30]
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	d905      	bls.n	8010e0a <ip_reass_free_complete_datagram+0x112>
 8010dfe:	4b09      	ldr	r3, [pc, #36]	@ (8010e24 <ip_reass_free_complete_datagram+0x12c>)
 8010e00:	22d2      	movs	r2, #210	@ 0xd2
 8010e02:	490e      	ldr	r1, [pc, #56]	@ (8010e3c <ip_reass_free_complete_datagram+0x144>)
 8010e04:	4809      	ldr	r0, [pc, #36]	@ (8010e2c <ip_reass_free_complete_datagram+0x134>)
 8010e06:	f001 f833 	bl	8011e70 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8010e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8010e38 <ip_reass_free_complete_datagram+0x140>)
 8010e0c:	881a      	ldrh	r2, [r3, #0]
 8010e0e:	8bfb      	ldrh	r3, [r7, #30]
 8010e10:	1ad3      	subs	r3, r2, r3
 8010e12:	b29a      	uxth	r2, r3
 8010e14:	4b08      	ldr	r3, [pc, #32]	@ (8010e38 <ip_reass_free_complete_datagram+0x140>)
 8010e16:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010e18:	8bfb      	ldrh	r3, [r7, #30]
}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3720      	adds	r7, #32
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}
 8010e22:	bf00      	nop
 8010e24:	08014164 	.word	0x08014164
 8010e28:	080141a0 	.word	0x080141a0
 8010e2c:	080141ac 	.word	0x080141ac
 8010e30:	080141d4 	.word	0x080141d4
 8010e34:	080141e8 	.word	0x080141e8
 8010e38:	2406cf58 	.word	0x2406cf58
 8010e3c:	08014208 	.word	0x08014208

08010e40 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b08a      	sub	sp, #40	@ 0x28
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
 8010e48:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010e4e:	2300      	movs	r3, #0
 8010e50:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8010e52:	2300      	movs	r3, #0
 8010e54:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8010e56:	2300      	movs	r3, #0
 8010e58:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010e5e:	4b28      	ldr	r3, [pc, #160]	@ (8010f00 <ip_reass_remove_oldest_datagram+0xc0>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8010e64:	e030      	b.n	8010ec8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e68:	695a      	ldr	r2, [r3, #20]
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	68db      	ldr	r3, [r3, #12]
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	d10c      	bne.n	8010e8c <ip_reass_remove_oldest_datagram+0x4c>
 8010e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e74:	699a      	ldr	r2, [r3, #24]
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	691b      	ldr	r3, [r3, #16]
 8010e7a:	429a      	cmp	r2, r3
 8010e7c:	d106      	bne.n	8010e8c <ip_reass_remove_oldest_datagram+0x4c>
 8010e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e80:	899a      	ldrh	r2, [r3, #12]
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	889b      	ldrh	r3, [r3, #4]
 8010e86:	b29b      	uxth	r3, r3
 8010e88:	429a      	cmp	r2, r3
 8010e8a:	d014      	beq.n	8010eb6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010e8c:	693b      	ldr	r3, [r7, #16]
 8010e8e:	3301      	adds	r3, #1
 8010e90:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8010e92:	6a3b      	ldr	r3, [r7, #32]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d104      	bne.n	8010ea2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e9a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010e9c:	69fb      	ldr	r3, [r7, #28]
 8010e9e:	61bb      	str	r3, [r7, #24]
 8010ea0:	e009      	b.n	8010eb6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8010ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ea4:	7fda      	ldrb	r2, [r3, #31]
 8010ea6:	6a3b      	ldr	r3, [r7, #32]
 8010ea8:	7fdb      	ldrb	r3, [r3, #31]
 8010eaa:	429a      	cmp	r2, r3
 8010eac:	d803      	bhi.n	8010eb6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eb0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010eb2:	69fb      	ldr	r3, [r7, #28]
 8010eb4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8010eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d001      	beq.n	8010ec2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8010ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ec0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8010ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8010ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d1cb      	bne.n	8010e66 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010ece:	6a3b      	ldr	r3, [r7, #32]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d008      	beq.n	8010ee6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010ed4:	69b9      	ldr	r1, [r7, #24]
 8010ed6:	6a38      	ldr	r0, [r7, #32]
 8010ed8:	f7ff ff0e 	bl	8010cf8 <ip_reass_free_complete_datagram>
 8010edc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010ede:	697a      	ldr	r2, [r7, #20]
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	4413      	add	r3, r2
 8010ee4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8010ee6:	697a      	ldr	r2, [r7, #20]
 8010ee8:	683b      	ldr	r3, [r7, #0]
 8010eea:	429a      	cmp	r2, r3
 8010eec:	da02      	bge.n	8010ef4 <ip_reass_remove_oldest_datagram+0xb4>
 8010eee:	693b      	ldr	r3, [r7, #16]
 8010ef0:	2b01      	cmp	r3, #1
 8010ef2:	dcac      	bgt.n	8010e4e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8010ef4:	697b      	ldr	r3, [r7, #20]
}
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	3728      	adds	r7, #40	@ 0x28
 8010efa:	46bd      	mov	sp, r7
 8010efc:	bd80      	pop	{r7, pc}
 8010efe:	bf00      	nop
 8010f00:	2406cf54 	.word	0x2406cf54

08010f04 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b084      	sub	sp, #16
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
 8010f0c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010f0e:	2001      	movs	r0, #1
 8010f10:	f7fc ff3a 	bl	800dd88 <memp_malloc>
 8010f14:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d110      	bne.n	8010f3e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010f1c:	6839      	ldr	r1, [r7, #0]
 8010f1e:	6878      	ldr	r0, [r7, #4]
 8010f20:	f7ff ff8e 	bl	8010e40 <ip_reass_remove_oldest_datagram>
 8010f24:	4602      	mov	r2, r0
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	4293      	cmp	r3, r2
 8010f2a:	dc03      	bgt.n	8010f34 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010f2c:	2001      	movs	r0, #1
 8010f2e:	f7fc ff2b 	bl	800dd88 <memp_malloc>
 8010f32:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d101      	bne.n	8010f3e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	e016      	b.n	8010f6c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010f3e:	2220      	movs	r2, #32
 8010f40:	2100      	movs	r1, #0
 8010f42:	68f8      	ldr	r0, [r7, #12]
 8010f44:	f000 fff9 	bl	8011f3a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	220f      	movs	r2, #15
 8010f4c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010f4e:	4b09      	ldr	r3, [pc, #36]	@ (8010f74 <ip_reass_enqueue_new_datagram+0x70>)
 8010f50:	681a      	ldr	r2, [r3, #0]
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8010f56:	4a07      	ldr	r2, [pc, #28]	@ (8010f74 <ip_reass_enqueue_new_datagram+0x70>)
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	3308      	adds	r3, #8
 8010f60:	2214      	movs	r2, #20
 8010f62:	6879      	ldr	r1, [r7, #4]
 8010f64:	4618      	mov	r0, r3
 8010f66:	f001 f8b4 	bl	80120d2 <memcpy>
  return ipr;
 8010f6a:	68fb      	ldr	r3, [r7, #12]
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	3710      	adds	r7, #16
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd80      	pop	{r7, pc}
 8010f74:	2406cf54 	.word	0x2406cf54

08010f78 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b082      	sub	sp, #8
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
 8010f80:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8010f82:	4b10      	ldr	r3, [pc, #64]	@ (8010fc4 <ip_reass_dequeue_datagram+0x4c>)
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	687a      	ldr	r2, [r7, #4]
 8010f88:	429a      	cmp	r2, r3
 8010f8a:	d104      	bne.n	8010f96 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	4a0c      	ldr	r2, [pc, #48]	@ (8010fc4 <ip_reass_dequeue_datagram+0x4c>)
 8010f92:	6013      	str	r3, [r2, #0]
 8010f94:	e00d      	b.n	8010fb2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d106      	bne.n	8010faa <ip_reass_dequeue_datagram+0x32>
 8010f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8010fc8 <ip_reass_dequeue_datagram+0x50>)
 8010f9e:	f240 1245 	movw	r2, #325	@ 0x145
 8010fa2:	490a      	ldr	r1, [pc, #40]	@ (8010fcc <ip_reass_dequeue_datagram+0x54>)
 8010fa4:	480a      	ldr	r0, [pc, #40]	@ (8010fd0 <ip_reass_dequeue_datagram+0x58>)
 8010fa6:	f000 ff63 	bl	8011e70 <iprintf>
    prev->next = ipr->next;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	681a      	ldr	r2, [r3, #0]
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8010fb2:	6879      	ldr	r1, [r7, #4]
 8010fb4:	2001      	movs	r0, #1
 8010fb6:	f7fc ff57 	bl	800de68 <memp_free>
}
 8010fba:	bf00      	nop
 8010fbc:	3708      	adds	r7, #8
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}
 8010fc2:	bf00      	nop
 8010fc4:	2406cf54 	.word	0x2406cf54
 8010fc8:	08014164 	.word	0x08014164
 8010fcc:	0801422c 	.word	0x0801422c
 8010fd0:	080141ac 	.word	0x080141ac

08010fd4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b08c      	sub	sp, #48	@ 0x30
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	60f8      	str	r0, [r7, #12]
 8010fdc:	60b9      	str	r1, [r7, #8]
 8010fde:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010fe4:	2301      	movs	r3, #1
 8010fe6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010fe8:	68bb      	ldr	r3, [r7, #8]
 8010fea:	685b      	ldr	r3, [r3, #4]
 8010fec:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010fee:	69fb      	ldr	r3, [r7, #28]
 8010ff0:	885b      	ldrh	r3, [r3, #2]
 8010ff2:	b29b      	uxth	r3, r3
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f7fc f979 	bl	800d2ec <lwip_htons>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010ffe:	69fb      	ldr	r3, [r7, #28]
 8011000:	781b      	ldrb	r3, [r3, #0]
 8011002:	f003 030f 	and.w	r3, r3, #15
 8011006:	b2db      	uxtb	r3, r3
 8011008:	009b      	lsls	r3, r3, #2
 801100a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801100c:	7e7b      	ldrb	r3, [r7, #25]
 801100e:	b29b      	uxth	r3, r3
 8011010:	8b7a      	ldrh	r2, [r7, #26]
 8011012:	429a      	cmp	r2, r3
 8011014:	d202      	bcs.n	801101c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011016:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801101a:	e135      	b.n	8011288 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801101c:	7e7b      	ldrb	r3, [r7, #25]
 801101e:	b29b      	uxth	r3, r3
 8011020:	8b7a      	ldrh	r2, [r7, #26]
 8011022:	1ad3      	subs	r3, r2, r3
 8011024:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011026:	69fb      	ldr	r3, [r7, #28]
 8011028:	88db      	ldrh	r3, [r3, #6]
 801102a:	b29b      	uxth	r3, r3
 801102c:	4618      	mov	r0, r3
 801102e:	f7fc f95d 	bl	800d2ec <lwip_htons>
 8011032:	4603      	mov	r3, r0
 8011034:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011038:	b29b      	uxth	r3, r3
 801103a:	00db      	lsls	r3, r3, #3
 801103c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	685b      	ldr	r3, [r3, #4]
 8011042:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8011044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011046:	2200      	movs	r2, #0
 8011048:	701a      	strb	r2, [r3, #0]
 801104a:	2200      	movs	r2, #0
 801104c:	705a      	strb	r2, [r3, #1]
 801104e:	2200      	movs	r2, #0
 8011050:	709a      	strb	r2, [r3, #2]
 8011052:	2200      	movs	r2, #0
 8011054:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011058:	8afa      	ldrh	r2, [r7, #22]
 801105a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801105c:	8afa      	ldrh	r2, [r7, #22]
 801105e:	8b7b      	ldrh	r3, [r7, #26]
 8011060:	4413      	add	r3, r2
 8011062:	b29a      	uxth	r2, r3
 8011064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011066:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801106a:	88db      	ldrh	r3, [r3, #6]
 801106c:	b29b      	uxth	r3, r3
 801106e:	8afa      	ldrh	r2, [r7, #22]
 8011070:	429a      	cmp	r2, r3
 8011072:	d902      	bls.n	801107a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011074:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011078:	e106      	b.n	8011288 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	685b      	ldr	r3, [r3, #4]
 801107e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011080:	e068      	b.n	8011154 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011084:	685b      	ldr	r3, [r3, #4]
 8011086:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801108a:	889b      	ldrh	r3, [r3, #4]
 801108c:	b29a      	uxth	r2, r3
 801108e:	693b      	ldr	r3, [r7, #16]
 8011090:	889b      	ldrh	r3, [r3, #4]
 8011092:	b29b      	uxth	r3, r3
 8011094:	429a      	cmp	r2, r3
 8011096:	d235      	bcs.n	8011104 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801109a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801109c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801109e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d020      	beq.n	80110e6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80110a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110a6:	889b      	ldrh	r3, [r3, #4]
 80110a8:	b29a      	uxth	r2, r3
 80110aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110ac:	88db      	ldrh	r3, [r3, #6]
 80110ae:	b29b      	uxth	r3, r3
 80110b0:	429a      	cmp	r2, r3
 80110b2:	d307      	bcc.n	80110c4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80110b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110b6:	88db      	ldrh	r3, [r3, #6]
 80110b8:	b29a      	uxth	r2, r3
 80110ba:	693b      	ldr	r3, [r7, #16]
 80110bc:	889b      	ldrh	r3, [r3, #4]
 80110be:	b29b      	uxth	r3, r3
 80110c0:	429a      	cmp	r2, r3
 80110c2:	d902      	bls.n	80110ca <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80110c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80110c8:	e0de      	b.n	8011288 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80110ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110cc:	68ba      	ldr	r2, [r7, #8]
 80110ce:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80110d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110d2:	88db      	ldrh	r3, [r3, #6]
 80110d4:	b29a      	uxth	r2, r3
 80110d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110d8:	889b      	ldrh	r3, [r3, #4]
 80110da:	b29b      	uxth	r3, r3
 80110dc:	429a      	cmp	r2, r3
 80110de:	d03d      	beq.n	801115c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80110e0:	2300      	movs	r3, #0
 80110e2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80110e4:	e03a      	b.n	801115c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80110e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110e8:	88db      	ldrh	r3, [r3, #6]
 80110ea:	b29a      	uxth	r2, r3
 80110ec:	693b      	ldr	r3, [r7, #16]
 80110ee:	889b      	ldrh	r3, [r3, #4]
 80110f0:	b29b      	uxth	r3, r3
 80110f2:	429a      	cmp	r2, r3
 80110f4:	d902      	bls.n	80110fc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80110f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80110fa:	e0c5      	b.n	8011288 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	68ba      	ldr	r2, [r7, #8]
 8011100:	605a      	str	r2, [r3, #4]
      break;
 8011102:	e02b      	b.n	801115c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8011104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011106:	889b      	ldrh	r3, [r3, #4]
 8011108:	b29a      	uxth	r2, r3
 801110a:	693b      	ldr	r3, [r7, #16]
 801110c:	889b      	ldrh	r3, [r3, #4]
 801110e:	b29b      	uxth	r3, r3
 8011110:	429a      	cmp	r2, r3
 8011112:	d102      	bne.n	801111a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011114:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011118:	e0b6      	b.n	8011288 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801111a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801111c:	889b      	ldrh	r3, [r3, #4]
 801111e:	b29a      	uxth	r2, r3
 8011120:	693b      	ldr	r3, [r7, #16]
 8011122:	88db      	ldrh	r3, [r3, #6]
 8011124:	b29b      	uxth	r3, r3
 8011126:	429a      	cmp	r2, r3
 8011128:	d202      	bcs.n	8011130 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801112a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801112e:	e0ab      	b.n	8011288 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011132:	2b00      	cmp	r3, #0
 8011134:	d009      	beq.n	801114a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8011136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011138:	88db      	ldrh	r3, [r3, #6]
 801113a:	b29a      	uxth	r2, r3
 801113c:	693b      	ldr	r3, [r7, #16]
 801113e:	889b      	ldrh	r3, [r3, #4]
 8011140:	b29b      	uxth	r3, r3
 8011142:	429a      	cmp	r2, r3
 8011144:	d001      	beq.n	801114a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011146:	2300      	movs	r3, #0
 8011148:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801114a:	693b      	ldr	r3, [r7, #16]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8011150:	693b      	ldr	r3, [r7, #16]
 8011152:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8011154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011156:	2b00      	cmp	r3, #0
 8011158:	d193      	bne.n	8011082 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801115a:	e000      	b.n	801115e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801115c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801115e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011160:	2b00      	cmp	r3, #0
 8011162:	d12d      	bne.n	80111c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8011164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011166:	2b00      	cmp	r3, #0
 8011168:	d01c      	beq.n	80111a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801116a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801116c:	88db      	ldrh	r3, [r3, #6]
 801116e:	b29a      	uxth	r2, r3
 8011170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011172:	889b      	ldrh	r3, [r3, #4]
 8011174:	b29b      	uxth	r3, r3
 8011176:	429a      	cmp	r2, r3
 8011178:	d906      	bls.n	8011188 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801117a:	4b45      	ldr	r3, [pc, #276]	@ (8011290 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801117c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8011180:	4944      	ldr	r1, [pc, #272]	@ (8011294 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011182:	4845      	ldr	r0, [pc, #276]	@ (8011298 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011184:	f000 fe74 	bl	8011e70 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801118a:	68ba      	ldr	r2, [r7, #8]
 801118c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801118e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011190:	88db      	ldrh	r3, [r3, #6]
 8011192:	b29a      	uxth	r2, r3
 8011194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011196:	889b      	ldrh	r3, [r3, #4]
 8011198:	b29b      	uxth	r3, r3
 801119a:	429a      	cmp	r2, r3
 801119c:	d010      	beq.n	80111c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801119e:	2300      	movs	r3, #0
 80111a0:	623b      	str	r3, [r7, #32]
 80111a2:	e00d      	b.n	80111c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	685b      	ldr	r3, [r3, #4]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d006      	beq.n	80111ba <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80111ac:	4b38      	ldr	r3, [pc, #224]	@ (8011290 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80111ae:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80111b2:	493a      	ldr	r1, [pc, #232]	@ (801129c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80111b4:	4838      	ldr	r0, [pc, #224]	@ (8011298 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80111b6:	f000 fe5b 	bl	8011e70 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	68ba      	ldr	r2, [r7, #8]
 80111be:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d105      	bne.n	80111d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	7f9b      	ldrb	r3, [r3, #30]
 80111ca:	f003 0301 	and.w	r3, r3, #1
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d059      	beq.n	8011286 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80111d2:	6a3b      	ldr	r3, [r7, #32]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d04f      	beq.n	8011278 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	685b      	ldr	r3, [r3, #4]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d006      	beq.n	80111ee <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	685b      	ldr	r3, [r3, #4]
 80111e4:	685b      	ldr	r3, [r3, #4]
 80111e6:	889b      	ldrh	r3, [r3, #4]
 80111e8:	b29b      	uxth	r3, r3
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d002      	beq.n	80111f4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80111ee:	2300      	movs	r3, #0
 80111f0:	623b      	str	r3, [r7, #32]
 80111f2:	e041      	b.n	8011278 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80111f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111f6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80111f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80111fe:	e012      	b.n	8011226 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8011200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011202:	685b      	ldr	r3, [r3, #4]
 8011204:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8011206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011208:	88db      	ldrh	r3, [r3, #6]
 801120a:	b29a      	uxth	r2, r3
 801120c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801120e:	889b      	ldrh	r3, [r3, #4]
 8011210:	b29b      	uxth	r3, r3
 8011212:	429a      	cmp	r2, r3
 8011214:	d002      	beq.n	801121c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8011216:	2300      	movs	r3, #0
 8011218:	623b      	str	r3, [r7, #32]
            break;
 801121a:	e007      	b.n	801122c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801121c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801121e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8011220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8011226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011228:	2b00      	cmp	r3, #0
 801122a:	d1e9      	bne.n	8011200 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801122c:	6a3b      	ldr	r3, [r7, #32]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d022      	beq.n	8011278 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	685b      	ldr	r3, [r3, #4]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d106      	bne.n	8011248 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801123a:	4b15      	ldr	r3, [pc, #84]	@ (8011290 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801123c:	f240 12df 	movw	r2, #479	@ 0x1df
 8011240:	4917      	ldr	r1, [pc, #92]	@ (80112a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011242:	4815      	ldr	r0, [pc, #84]	@ (8011298 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011244:	f000 fe14 	bl	8011e70 <iprintf>
          LWIP_ASSERT("sanity check",
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	685b      	ldr	r3, [r3, #4]
 801124c:	685b      	ldr	r3, [r3, #4]
 801124e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011250:	429a      	cmp	r2, r3
 8011252:	d106      	bne.n	8011262 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8011254:	4b0e      	ldr	r3, [pc, #56]	@ (8011290 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011256:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801125a:	4911      	ldr	r1, [pc, #68]	@ (80112a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801125c:	480e      	ldr	r0, [pc, #56]	@ (8011298 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801125e:	f000 fe07 	bl	8011e70 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d006      	beq.n	8011278 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801126a:	4b09      	ldr	r3, [pc, #36]	@ (8011290 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801126c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8011270:	490c      	ldr	r1, [pc, #48]	@ (80112a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011272:	4809      	ldr	r0, [pc, #36]	@ (8011298 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011274:	f000 fdfc 	bl	8011e70 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011278:	6a3b      	ldr	r3, [r7, #32]
 801127a:	2b00      	cmp	r3, #0
 801127c:	bf14      	ite	ne
 801127e:	2301      	movne	r3, #1
 8011280:	2300      	moveq	r3, #0
 8011282:	b2db      	uxtb	r3, r3
 8011284:	e000      	b.n	8011288 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011286:	2300      	movs	r3, #0
}
 8011288:	4618      	mov	r0, r3
 801128a:	3730      	adds	r7, #48	@ 0x30
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}
 8011290:	08014164 	.word	0x08014164
 8011294:	08014248 	.word	0x08014248
 8011298:	080141ac 	.word	0x080141ac
 801129c:	08014268 	.word	0x08014268
 80112a0:	080142a0 	.word	0x080142a0
 80112a4:	080142b0 	.word	0x080142b0

080112a8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b08e      	sub	sp, #56	@ 0x38
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	685b      	ldr	r3, [r3, #4]
 80112b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80112b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112b8:	781b      	ldrb	r3, [r3, #0]
 80112ba:	f003 030f 	and.w	r3, r3, #15
 80112be:	b2db      	uxtb	r3, r3
 80112c0:	009b      	lsls	r3, r3, #2
 80112c2:	b2db      	uxtb	r3, r3
 80112c4:	2b14      	cmp	r3, #20
 80112c6:	f040 8171 	bne.w	80115ac <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80112ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112cc:	88db      	ldrh	r3, [r3, #6]
 80112ce:	b29b      	uxth	r3, r3
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7fc f80b 	bl	800d2ec <lwip_htons>
 80112d6:	4603      	mov	r3, r0
 80112d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80112dc:	b29b      	uxth	r3, r3
 80112de:	00db      	lsls	r3, r3, #3
 80112e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80112e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112e4:	885b      	ldrh	r3, [r3, #2]
 80112e6:	b29b      	uxth	r3, r3
 80112e8:	4618      	mov	r0, r3
 80112ea:	f7fb ffff 	bl	800d2ec <lwip_htons>
 80112ee:	4603      	mov	r3, r0
 80112f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80112f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112f4:	781b      	ldrb	r3, [r3, #0]
 80112f6:	f003 030f 	and.w	r3, r3, #15
 80112fa:	b2db      	uxtb	r3, r3
 80112fc:	009b      	lsls	r3, r3, #2
 80112fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8011302:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011306:	b29b      	uxth	r3, r3
 8011308:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801130a:	429a      	cmp	r2, r3
 801130c:	f0c0 8150 	bcc.w	80115b0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8011310:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011314:	b29b      	uxth	r3, r3
 8011316:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011318:	1ad3      	subs	r3, r2, r3
 801131a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801131c:	6878      	ldr	r0, [r7, #4]
 801131e:	f7fd fc49 	bl	800ebb4 <pbuf_clen>
 8011322:	4603      	mov	r3, r0
 8011324:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011326:	4b8c      	ldr	r3, [pc, #560]	@ (8011558 <ip4_reass+0x2b0>)
 8011328:	881b      	ldrh	r3, [r3, #0]
 801132a:	461a      	mov	r2, r3
 801132c:	8c3b      	ldrh	r3, [r7, #32]
 801132e:	4413      	add	r3, r2
 8011330:	2b0a      	cmp	r3, #10
 8011332:	dd10      	ble.n	8011356 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011334:	8c3b      	ldrh	r3, [r7, #32]
 8011336:	4619      	mov	r1, r3
 8011338:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801133a:	f7ff fd81 	bl	8010e40 <ip_reass_remove_oldest_datagram>
 801133e:	4603      	mov	r3, r0
 8011340:	2b00      	cmp	r3, #0
 8011342:	f000 8137 	beq.w	80115b4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011346:	4b84      	ldr	r3, [pc, #528]	@ (8011558 <ip4_reass+0x2b0>)
 8011348:	881b      	ldrh	r3, [r3, #0]
 801134a:	461a      	mov	r2, r3
 801134c:	8c3b      	ldrh	r3, [r7, #32]
 801134e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011350:	2b0a      	cmp	r3, #10
 8011352:	f300 812f 	bgt.w	80115b4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011356:	4b81      	ldr	r3, [pc, #516]	@ (801155c <ip4_reass+0x2b4>)
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	633b      	str	r3, [r7, #48]	@ 0x30
 801135c:	e015      	b.n	801138a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801135e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011360:	695a      	ldr	r2, [r3, #20]
 8011362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011364:	68db      	ldr	r3, [r3, #12]
 8011366:	429a      	cmp	r2, r3
 8011368:	d10c      	bne.n	8011384 <ip4_reass+0xdc>
 801136a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801136c:	699a      	ldr	r2, [r3, #24]
 801136e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011370:	691b      	ldr	r3, [r3, #16]
 8011372:	429a      	cmp	r2, r3
 8011374:	d106      	bne.n	8011384 <ip4_reass+0xdc>
 8011376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011378:	899a      	ldrh	r2, [r3, #12]
 801137a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801137c:	889b      	ldrh	r3, [r3, #4]
 801137e:	b29b      	uxth	r3, r3
 8011380:	429a      	cmp	r2, r3
 8011382:	d006      	beq.n	8011392 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	633b      	str	r3, [r7, #48]	@ 0x30
 801138a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801138c:	2b00      	cmp	r3, #0
 801138e:	d1e6      	bne.n	801135e <ip4_reass+0xb6>
 8011390:	e000      	b.n	8011394 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011392:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011396:	2b00      	cmp	r3, #0
 8011398:	d109      	bne.n	80113ae <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801139a:	8c3b      	ldrh	r3, [r7, #32]
 801139c:	4619      	mov	r1, r3
 801139e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80113a0:	f7ff fdb0 	bl	8010f04 <ip_reass_enqueue_new_datagram>
 80113a4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80113a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d11c      	bne.n	80113e6 <ip4_reass+0x13e>
      goto nullreturn;
 80113ac:	e105      	b.n	80115ba <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80113ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113b0:	88db      	ldrh	r3, [r3, #6]
 80113b2:	b29b      	uxth	r3, r3
 80113b4:	4618      	mov	r0, r3
 80113b6:	f7fb ff99 	bl	800d2ec <lwip_htons>
 80113ba:	4603      	mov	r3, r0
 80113bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d110      	bne.n	80113e6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80113c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113c6:	89db      	ldrh	r3, [r3, #14]
 80113c8:	4618      	mov	r0, r3
 80113ca:	f7fb ff8f 	bl	800d2ec <lwip_htons>
 80113ce:	4603      	mov	r3, r0
 80113d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d006      	beq.n	80113e6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80113d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113da:	3308      	adds	r3, #8
 80113dc:	2214      	movs	r2, #20
 80113de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80113e0:	4618      	mov	r0, r3
 80113e2:	f000 fe76 	bl	80120d2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80113e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113e8:	88db      	ldrh	r3, [r3, #6]
 80113ea:	b29b      	uxth	r3, r3
 80113ec:	f003 0320 	and.w	r3, r3, #32
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	bf0c      	ite	eq
 80113f4:	2301      	moveq	r3, #1
 80113f6:	2300      	movne	r3, #0
 80113f8:	b2db      	uxtb	r3, r3
 80113fa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80113fc:	69fb      	ldr	r3, [r7, #28]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d00e      	beq.n	8011420 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8011402:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8011404:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011406:	4413      	add	r3, r2
 8011408:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801140a:	8b7a      	ldrh	r2, [r7, #26]
 801140c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801140e:	429a      	cmp	r2, r3
 8011410:	f0c0 80a0 	bcc.w	8011554 <ip4_reass+0x2ac>
 8011414:	8b7b      	ldrh	r3, [r7, #26]
 8011416:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801141a:	4293      	cmp	r3, r2
 801141c:	f200 809a 	bhi.w	8011554 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011420:	69fa      	ldr	r2, [r7, #28]
 8011422:	6879      	ldr	r1, [r7, #4]
 8011424:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011426:	f7ff fdd5 	bl	8010fd4 <ip_reass_chain_frag_into_datagram_and_validate>
 801142a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011432:	f000 809b 	beq.w	801156c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011436:	4b48      	ldr	r3, [pc, #288]	@ (8011558 <ip4_reass+0x2b0>)
 8011438:	881a      	ldrh	r2, [r3, #0]
 801143a:	8c3b      	ldrh	r3, [r7, #32]
 801143c:	4413      	add	r3, r2
 801143e:	b29a      	uxth	r2, r3
 8011440:	4b45      	ldr	r3, [pc, #276]	@ (8011558 <ip4_reass+0x2b0>)
 8011442:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8011444:	69fb      	ldr	r3, [r7, #28]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d00d      	beq.n	8011466 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801144a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801144c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801144e:	4413      	add	r3, r2
 8011450:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8011452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011454:	8a7a      	ldrh	r2, [r7, #18]
 8011456:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801145a:	7f9b      	ldrb	r3, [r3, #30]
 801145c:	f043 0301 	orr.w	r3, r3, #1
 8011460:	b2da      	uxtb	r2, r3
 8011462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011464:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	2b01      	cmp	r3, #1
 801146a:	d171      	bne.n	8011550 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801146c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801146e:	8b9b      	ldrh	r3, [r3, #28]
 8011470:	3314      	adds	r3, #20
 8011472:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8011474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011476:	685b      	ldr	r3, [r3, #4]
 8011478:	685b      	ldr	r3, [r3, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801147e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011480:	685b      	ldr	r3, [r3, #4]
 8011482:	685b      	ldr	r3, [r3, #4]
 8011484:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011488:	3308      	adds	r3, #8
 801148a:	2214      	movs	r2, #20
 801148c:	4619      	mov	r1, r3
 801148e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011490:	f000 fe1f 	bl	80120d2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011494:	8a3b      	ldrh	r3, [r7, #16]
 8011496:	4618      	mov	r0, r3
 8011498:	f7fb ff28 	bl	800d2ec <lwip_htons>
 801149c:	4603      	mov	r3, r0
 801149e:	461a      	mov	r2, r3
 80114a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114a2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80114a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114a6:	2200      	movs	r2, #0
 80114a8:	719a      	strb	r2, [r3, #6]
 80114aa:	2200      	movs	r2, #0
 80114ac:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80114ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114b0:	2200      	movs	r2, #0
 80114b2:	729a      	strb	r2, [r3, #10]
 80114b4:	2200      	movs	r2, #0
 80114b6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80114b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114ba:	685b      	ldr	r3, [r3, #4]
 80114bc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80114be:	e00d      	b.n	80114dc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80114c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114c2:	685b      	ldr	r3, [r3, #4]
 80114c4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80114c6:	2114      	movs	r1, #20
 80114c8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80114ca:	f7fd fa65 	bl	800e998 <pbuf_remove_header>
      pbuf_cat(p, r);
 80114ce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80114d0:	6878      	ldr	r0, [r7, #4]
 80114d2:	f7fd fba9 	bl	800ec28 <pbuf_cat>
      r = iprh->next_pbuf;
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80114dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d1ee      	bne.n	80114c0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80114e2:	4b1e      	ldr	r3, [pc, #120]	@ (801155c <ip4_reass+0x2b4>)
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80114e8:	429a      	cmp	r2, r3
 80114ea:	d102      	bne.n	80114f2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80114ec:	2300      	movs	r3, #0
 80114ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80114f0:	e010      	b.n	8011514 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80114f2:	4b1a      	ldr	r3, [pc, #104]	@ (801155c <ip4_reass+0x2b4>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80114f8:	e007      	b.n	801150a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80114fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011500:	429a      	cmp	r2, r3
 8011502:	d006      	beq.n	8011512 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801150a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801150c:	2b00      	cmp	r3, #0
 801150e:	d1f4      	bne.n	80114fa <ip4_reass+0x252>
 8011510:	e000      	b.n	8011514 <ip4_reass+0x26c>
          break;
 8011512:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8011514:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011516:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011518:	f7ff fd2e 	bl	8010f78 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801151c:	6878      	ldr	r0, [r7, #4]
 801151e:	f7fd fb49 	bl	800ebb4 <pbuf_clen>
 8011522:	4603      	mov	r3, r0
 8011524:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8011526:	4b0c      	ldr	r3, [pc, #48]	@ (8011558 <ip4_reass+0x2b0>)
 8011528:	881b      	ldrh	r3, [r3, #0]
 801152a:	8c3a      	ldrh	r2, [r7, #32]
 801152c:	429a      	cmp	r2, r3
 801152e:	d906      	bls.n	801153e <ip4_reass+0x296>
 8011530:	4b0b      	ldr	r3, [pc, #44]	@ (8011560 <ip4_reass+0x2b8>)
 8011532:	f240 229b 	movw	r2, #667	@ 0x29b
 8011536:	490b      	ldr	r1, [pc, #44]	@ (8011564 <ip4_reass+0x2bc>)
 8011538:	480b      	ldr	r0, [pc, #44]	@ (8011568 <ip4_reass+0x2c0>)
 801153a:	f000 fc99 	bl	8011e70 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801153e:	4b06      	ldr	r3, [pc, #24]	@ (8011558 <ip4_reass+0x2b0>)
 8011540:	881a      	ldrh	r2, [r3, #0]
 8011542:	8c3b      	ldrh	r3, [r7, #32]
 8011544:	1ad3      	subs	r3, r2, r3
 8011546:	b29a      	uxth	r2, r3
 8011548:	4b03      	ldr	r3, [pc, #12]	@ (8011558 <ip4_reass+0x2b0>)
 801154a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	e038      	b.n	80115c2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011550:	2300      	movs	r3, #0
 8011552:	e036      	b.n	80115c2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8011554:	bf00      	nop
 8011556:	e00a      	b.n	801156e <ip4_reass+0x2c6>
 8011558:	2406cf58 	.word	0x2406cf58
 801155c:	2406cf54 	.word	0x2406cf54
 8011560:	08014164 	.word	0x08014164
 8011564:	080142d4 	.word	0x080142d4
 8011568:	080141ac 	.word	0x080141ac
    goto nullreturn_ipr;
 801156c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801156e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011570:	2b00      	cmp	r3, #0
 8011572:	d106      	bne.n	8011582 <ip4_reass+0x2da>
 8011574:	4b15      	ldr	r3, [pc, #84]	@ (80115cc <ip4_reass+0x324>)
 8011576:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801157a:	4915      	ldr	r1, [pc, #84]	@ (80115d0 <ip4_reass+0x328>)
 801157c:	4815      	ldr	r0, [pc, #84]	@ (80115d4 <ip4_reass+0x32c>)
 801157e:	f000 fc77 	bl	8011e70 <iprintf>
  if (ipr->p == NULL) {
 8011582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011584:	685b      	ldr	r3, [r3, #4]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d116      	bne.n	80115b8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801158a:	4b13      	ldr	r3, [pc, #76]	@ (80115d8 <ip4_reass+0x330>)
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011590:	429a      	cmp	r2, r3
 8011592:	d006      	beq.n	80115a2 <ip4_reass+0x2fa>
 8011594:	4b0d      	ldr	r3, [pc, #52]	@ (80115cc <ip4_reass+0x324>)
 8011596:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801159a:	4910      	ldr	r1, [pc, #64]	@ (80115dc <ip4_reass+0x334>)
 801159c:	480d      	ldr	r0, [pc, #52]	@ (80115d4 <ip4_reass+0x32c>)
 801159e:	f000 fc67 	bl	8011e70 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80115a2:	2100      	movs	r1, #0
 80115a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80115a6:	f7ff fce7 	bl	8010f78 <ip_reass_dequeue_datagram>
 80115aa:	e006      	b.n	80115ba <ip4_reass+0x312>
    goto nullreturn;
 80115ac:	bf00      	nop
 80115ae:	e004      	b.n	80115ba <ip4_reass+0x312>
    goto nullreturn;
 80115b0:	bf00      	nop
 80115b2:	e002      	b.n	80115ba <ip4_reass+0x312>
      goto nullreturn;
 80115b4:	bf00      	nop
 80115b6:	e000      	b.n	80115ba <ip4_reass+0x312>
  }

nullreturn:
 80115b8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80115ba:	6878      	ldr	r0, [r7, #4]
 80115bc:	f7fd fa72 	bl	800eaa4 <pbuf_free>
  return NULL;
 80115c0:	2300      	movs	r3, #0
}
 80115c2:	4618      	mov	r0, r3
 80115c4:	3738      	adds	r7, #56	@ 0x38
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bd80      	pop	{r7, pc}
 80115ca:	bf00      	nop
 80115cc:	08014164 	.word	0x08014164
 80115d0:	080142f0 	.word	0x080142f0
 80115d4:	080141ac 	.word	0x080141ac
 80115d8:	2406cf54 	.word	0x2406cf54
 80115dc:	080142fc 	.word	0x080142fc

080115e0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80115e4:	2002      	movs	r0, #2
 80115e6:	f7fc fbcf 	bl	800dd88 <memp_malloc>
 80115ea:	4603      	mov	r3, r0
}
 80115ec:	4618      	mov	r0, r3
 80115ee:	bd80      	pop	{r7, pc}

080115f0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b082      	sub	sp, #8
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d106      	bne.n	801160c <ip_frag_free_pbuf_custom_ref+0x1c>
 80115fe:	4b07      	ldr	r3, [pc, #28]	@ (801161c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8011600:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8011604:	4906      	ldr	r1, [pc, #24]	@ (8011620 <ip_frag_free_pbuf_custom_ref+0x30>)
 8011606:	4807      	ldr	r0, [pc, #28]	@ (8011624 <ip_frag_free_pbuf_custom_ref+0x34>)
 8011608:	f000 fc32 	bl	8011e70 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801160c:	6879      	ldr	r1, [r7, #4]
 801160e:	2002      	movs	r0, #2
 8011610:	f7fc fc2a 	bl	800de68 <memp_free>
}
 8011614:	bf00      	nop
 8011616:	3708      	adds	r7, #8
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}
 801161c:	08014164 	.word	0x08014164
 8011620:	0801431c 	.word	0x0801431c
 8011624:	080141ac 	.word	0x080141ac

08011628 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b084      	sub	sp, #16
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d106      	bne.n	8011648 <ipfrag_free_pbuf_custom+0x20>
 801163a:	4b11      	ldr	r3, [pc, #68]	@ (8011680 <ipfrag_free_pbuf_custom+0x58>)
 801163c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8011640:	4910      	ldr	r1, [pc, #64]	@ (8011684 <ipfrag_free_pbuf_custom+0x5c>)
 8011642:	4811      	ldr	r0, [pc, #68]	@ (8011688 <ipfrag_free_pbuf_custom+0x60>)
 8011644:	f000 fc14 	bl	8011e70 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011648:	68fa      	ldr	r2, [r7, #12]
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	429a      	cmp	r2, r3
 801164e:	d006      	beq.n	801165e <ipfrag_free_pbuf_custom+0x36>
 8011650:	4b0b      	ldr	r3, [pc, #44]	@ (8011680 <ipfrag_free_pbuf_custom+0x58>)
 8011652:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8011656:	490d      	ldr	r1, [pc, #52]	@ (801168c <ipfrag_free_pbuf_custom+0x64>)
 8011658:	480b      	ldr	r0, [pc, #44]	@ (8011688 <ipfrag_free_pbuf_custom+0x60>)
 801165a:	f000 fc09 	bl	8011e70 <iprintf>
  if (pcr->original != NULL) {
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	695b      	ldr	r3, [r3, #20]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d004      	beq.n	8011670 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	695b      	ldr	r3, [r3, #20]
 801166a:	4618      	mov	r0, r3
 801166c:	f7fd fa1a 	bl	800eaa4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011670:	68f8      	ldr	r0, [r7, #12]
 8011672:	f7ff ffbd 	bl	80115f0 <ip_frag_free_pbuf_custom_ref>
}
 8011676:	bf00      	nop
 8011678:	3710      	adds	r7, #16
 801167a:	46bd      	mov	sp, r7
 801167c:	bd80      	pop	{r7, pc}
 801167e:	bf00      	nop
 8011680:	08014164 	.word	0x08014164
 8011684:	08014328 	.word	0x08014328
 8011688:	080141ac 	.word	0x080141ac
 801168c:	08014334 	.word	0x08014334

08011690 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b094      	sub	sp, #80	@ 0x50
 8011694:	af02      	add	r7, sp, #8
 8011696:	60f8      	str	r0, [r7, #12]
 8011698:	60b9      	str	r1, [r7, #8]
 801169a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801169c:	2300      	movs	r3, #0
 801169e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80116a2:	68bb      	ldr	r3, [r7, #8]
 80116a4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80116a6:	3b14      	subs	r3, #20
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	da00      	bge.n	80116ae <ip4_frag+0x1e>
 80116ac:	3307      	adds	r3, #7
 80116ae:	10db      	asrs	r3, r3, #3
 80116b0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80116b2:	2314      	movs	r3, #20
 80116b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	685b      	ldr	r3, [r3, #4]
 80116ba:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80116bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116be:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80116c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116c2:	781b      	ldrb	r3, [r3, #0]
 80116c4:	f003 030f 	and.w	r3, r3, #15
 80116c8:	b2db      	uxtb	r3, r3
 80116ca:	009b      	lsls	r3, r3, #2
 80116cc:	b2db      	uxtb	r3, r3
 80116ce:	2b14      	cmp	r3, #20
 80116d0:	d002      	beq.n	80116d8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80116d2:	f06f 0305 	mvn.w	r3, #5
 80116d6:	e110      	b.n	80118fa <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	895b      	ldrh	r3, [r3, #10]
 80116dc:	2b13      	cmp	r3, #19
 80116de:	d809      	bhi.n	80116f4 <ip4_frag+0x64>
 80116e0:	4b88      	ldr	r3, [pc, #544]	@ (8011904 <ip4_frag+0x274>)
 80116e2:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80116e6:	4988      	ldr	r1, [pc, #544]	@ (8011908 <ip4_frag+0x278>)
 80116e8:	4888      	ldr	r0, [pc, #544]	@ (801190c <ip4_frag+0x27c>)
 80116ea:	f000 fbc1 	bl	8011e70 <iprintf>
 80116ee:	f06f 0305 	mvn.w	r3, #5
 80116f2:	e102      	b.n	80118fa <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80116f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116f6:	88db      	ldrh	r3, [r3, #6]
 80116f8:	b29b      	uxth	r3, r3
 80116fa:	4618      	mov	r0, r3
 80116fc:	f7fb fdf6 	bl	800d2ec <lwip_htons>
 8011700:	4603      	mov	r3, r0
 8011702:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8011704:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011706:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801170a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801170e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011710:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011714:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	891b      	ldrh	r3, [r3, #8]
 801171a:	3b14      	subs	r3, #20
 801171c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8011720:	e0e1      	b.n	80118e6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011722:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011724:	00db      	lsls	r3, r3, #3
 8011726:	b29b      	uxth	r3, r3
 8011728:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801172c:	4293      	cmp	r3, r2
 801172e:	bf28      	it	cs
 8011730:	4613      	movcs	r3, r2
 8011732:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011734:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011738:	2114      	movs	r1, #20
 801173a:	200e      	movs	r0, #14
 801173c:	f7fc fed0 	bl	800e4e0 <pbuf_alloc>
 8011740:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8011742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011744:	2b00      	cmp	r3, #0
 8011746:	f000 80d5 	beq.w	80118f4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801174a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801174c:	895b      	ldrh	r3, [r3, #10]
 801174e:	2b13      	cmp	r3, #19
 8011750:	d806      	bhi.n	8011760 <ip4_frag+0xd0>
 8011752:	4b6c      	ldr	r3, [pc, #432]	@ (8011904 <ip4_frag+0x274>)
 8011754:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8011758:	496d      	ldr	r1, [pc, #436]	@ (8011910 <ip4_frag+0x280>)
 801175a:	486c      	ldr	r0, [pc, #432]	@ (801190c <ip4_frag+0x27c>)
 801175c:	f000 fb88 	bl	8011e70 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011762:	685b      	ldr	r3, [r3, #4]
 8011764:	2214      	movs	r2, #20
 8011766:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011768:	4618      	mov	r0, r3
 801176a:	f000 fcb2 	bl	80120d2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801176e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011770:	685b      	ldr	r3, [r3, #4]
 8011772:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8011774:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011776:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801177a:	e064      	b.n	8011846 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	895a      	ldrh	r2, [r3, #10]
 8011780:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011782:	1ad3      	subs	r3, r2, r3
 8011784:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	895b      	ldrh	r3, [r3, #10]
 801178a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801178c:	429a      	cmp	r2, r3
 801178e:	d906      	bls.n	801179e <ip4_frag+0x10e>
 8011790:	4b5c      	ldr	r3, [pc, #368]	@ (8011904 <ip4_frag+0x274>)
 8011792:	f240 322d 	movw	r2, #813	@ 0x32d
 8011796:	495f      	ldr	r1, [pc, #380]	@ (8011914 <ip4_frag+0x284>)
 8011798:	485c      	ldr	r0, [pc, #368]	@ (801190c <ip4_frag+0x27c>)
 801179a:	f000 fb69 	bl	8011e70 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801179e:	8bfa      	ldrh	r2, [r7, #30]
 80117a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80117a4:	4293      	cmp	r3, r2
 80117a6:	bf28      	it	cs
 80117a8:	4613      	movcs	r3, r2
 80117aa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80117ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d105      	bne.n	80117c2 <ip4_frag+0x132>
        poff = 0;
 80117b6:	2300      	movs	r3, #0
 80117b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	60fb      	str	r3, [r7, #12]
        continue;
 80117c0:	e041      	b.n	8011846 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80117c2:	f7ff ff0d 	bl	80115e0 <ip_frag_alloc_pbuf_custom_ref>
 80117c6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80117c8:	69bb      	ldr	r3, [r7, #24]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d103      	bne.n	80117d6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80117ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80117d0:	f7fd f968 	bl	800eaa4 <pbuf_free>
        goto memerr;
 80117d4:	e08f      	b.n	80118f6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80117d6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80117dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80117de:	4413      	add	r3, r2
 80117e0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80117e4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80117e8:	9201      	str	r2, [sp, #4]
 80117ea:	9300      	str	r3, [sp, #0]
 80117ec:	4603      	mov	r3, r0
 80117ee:	2241      	movs	r2, #65	@ 0x41
 80117f0:	2000      	movs	r0, #0
 80117f2:	f7fc ff9d 	bl	800e730 <pbuf_alloced_custom>
 80117f6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80117f8:	697b      	ldr	r3, [r7, #20]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d106      	bne.n	801180c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80117fe:	69b8      	ldr	r0, [r7, #24]
 8011800:	f7ff fef6 	bl	80115f0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011804:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011806:	f7fd f94d 	bl	800eaa4 <pbuf_free>
        goto memerr;
 801180a:	e074      	b.n	80118f6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801180c:	68f8      	ldr	r0, [r7, #12]
 801180e:	f7fd f9e9 	bl	800ebe4 <pbuf_ref>
      pcr->original = p;
 8011812:	69bb      	ldr	r3, [r7, #24]
 8011814:	68fa      	ldr	r2, [r7, #12]
 8011816:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011818:	69bb      	ldr	r3, [r7, #24]
 801181a:	4a3f      	ldr	r2, [pc, #252]	@ (8011918 <ip4_frag+0x288>)
 801181c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801181e:	6979      	ldr	r1, [r7, #20]
 8011820:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011822:	f7fd fa01 	bl	800ec28 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011826:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801182a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801182e:	1ad3      	subs	r3, r2, r3
 8011830:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8011834:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8011838:	2b00      	cmp	r3, #0
 801183a:	d004      	beq.n	8011846 <ip4_frag+0x1b6>
        poff = 0;
 801183c:	2300      	movs	r3, #0
 801183e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011846:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801184a:	2b00      	cmp	r3, #0
 801184c:	d196      	bne.n	801177c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801184e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8011850:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011854:	4413      	add	r3, r2
 8011856:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011858:	68bb      	ldr	r3, [r7, #8]
 801185a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801185c:	f1a3 0213 	sub.w	r2, r3, #19
 8011860:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011864:	429a      	cmp	r2, r3
 8011866:	bfcc      	ite	gt
 8011868:	2301      	movgt	r3, #1
 801186a:	2300      	movle	r3, #0
 801186c:	b2db      	uxtb	r3, r3
 801186e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011870:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011874:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011878:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801187a:	6a3b      	ldr	r3, [r7, #32]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d002      	beq.n	8011886 <ip4_frag+0x1f6>
 8011880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011882:	2b00      	cmp	r3, #0
 8011884:	d003      	beq.n	801188e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8011886:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011888:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801188c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801188e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011890:	4618      	mov	r0, r3
 8011892:	f7fb fd2b 	bl	800d2ec <lwip_htons>
 8011896:	4603      	mov	r3, r0
 8011898:	461a      	mov	r2, r3
 801189a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801189c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801189e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80118a0:	3314      	adds	r3, #20
 80118a2:	b29b      	uxth	r3, r3
 80118a4:	4618      	mov	r0, r3
 80118a6:	f7fb fd21 	bl	800d2ec <lwip_htons>
 80118aa:	4603      	mov	r3, r0
 80118ac:	461a      	mov	r2, r3
 80118ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118b0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80118b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118b4:	2200      	movs	r2, #0
 80118b6:	729a      	strb	r2, [r3, #10]
 80118b8:	2200      	movs	r2, #0
 80118ba:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	695b      	ldr	r3, [r3, #20]
 80118c0:	687a      	ldr	r2, [r7, #4]
 80118c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80118c4:	68b8      	ldr	r0, [r7, #8]
 80118c6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80118c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80118ca:	f7fd f8eb 	bl	800eaa4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80118ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80118d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80118d4:	1ad3      	subs	r3, r2, r3
 80118d6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80118da:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80118de:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80118e0:	4413      	add	r3, r2
 80118e2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80118e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	f47f af19 	bne.w	8011722 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80118f0:	2300      	movs	r3, #0
 80118f2:	e002      	b.n	80118fa <ip4_frag+0x26a>
      goto memerr;
 80118f4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80118f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80118fa:	4618      	mov	r0, r3
 80118fc:	3748      	adds	r7, #72	@ 0x48
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}
 8011902:	bf00      	nop
 8011904:	08014164 	.word	0x08014164
 8011908:	08014340 	.word	0x08014340
 801190c:	080141ac 	.word	0x080141ac
 8011910:	0801435c 	.word	0x0801435c
 8011914:	0801437c 	.word	0x0801437c
 8011918:	08011629 	.word	0x08011629

0801191c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b086      	sub	sp, #24
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
 8011924:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8011926:	230e      	movs	r3, #14
 8011928:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	895b      	ldrh	r3, [r3, #10]
 801192e:	2b0e      	cmp	r3, #14
 8011930:	d96e      	bls.n	8011a10 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	7bdb      	ldrb	r3, [r3, #15]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d106      	bne.n	8011948 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011940:	3301      	adds	r3, #1
 8011942:	b2da      	uxtb	r2, r3
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	685b      	ldr	r3, [r3, #4]
 801194c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801194e:	693b      	ldr	r3, [r7, #16]
 8011950:	7b1a      	ldrb	r2, [r3, #12]
 8011952:	7b5b      	ldrb	r3, [r3, #13]
 8011954:	021b      	lsls	r3, r3, #8
 8011956:	4313      	orrs	r3, r2
 8011958:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801195a:	693b      	ldr	r3, [r7, #16]
 801195c:	781b      	ldrb	r3, [r3, #0]
 801195e:	f003 0301 	and.w	r3, r3, #1
 8011962:	2b00      	cmp	r3, #0
 8011964:	d023      	beq.n	80119ae <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	781b      	ldrb	r3, [r3, #0]
 801196a:	2b01      	cmp	r3, #1
 801196c:	d10f      	bne.n	801198e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	785b      	ldrb	r3, [r3, #1]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d11b      	bne.n	80119ae <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8011976:	693b      	ldr	r3, [r7, #16]
 8011978:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801197a:	2b5e      	cmp	r3, #94	@ 0x5e
 801197c:	d117      	bne.n	80119ae <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	7b5b      	ldrb	r3, [r3, #13]
 8011982:	f043 0310 	orr.w	r3, r3, #16
 8011986:	b2da      	uxtb	r2, r3
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	735a      	strb	r2, [r3, #13]
 801198c:	e00f      	b.n	80119ae <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801198e:	693b      	ldr	r3, [r7, #16]
 8011990:	2206      	movs	r2, #6
 8011992:	4928      	ldr	r1, [pc, #160]	@ (8011a34 <ethernet_input+0x118>)
 8011994:	4618      	mov	r0, r3
 8011996:	f000 fac0 	bl	8011f1a <memcmp>
 801199a:	4603      	mov	r3, r0
 801199c:	2b00      	cmp	r3, #0
 801199e:	d106      	bne.n	80119ae <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	7b5b      	ldrb	r3, [r3, #13]
 80119a4:	f043 0308 	orr.w	r3, r3, #8
 80119a8:	b2da      	uxtb	r2, r3
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80119ae:	89fb      	ldrh	r3, [r7, #14]
 80119b0:	2b08      	cmp	r3, #8
 80119b2:	d003      	beq.n	80119bc <ethernet_input+0xa0>
 80119b4:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80119b8:	d014      	beq.n	80119e4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80119ba:	e032      	b.n	8011a22 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80119c2:	f003 0308 	and.w	r3, r3, #8
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d024      	beq.n	8011a14 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80119ca:	8afb      	ldrh	r3, [r7, #22]
 80119cc:	4619      	mov	r1, r3
 80119ce:	6878      	ldr	r0, [r7, #4]
 80119d0:	f7fc ffe2 	bl	800e998 <pbuf_remove_header>
 80119d4:	4603      	mov	r3, r0
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d11e      	bne.n	8011a18 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80119da:	6839      	ldr	r1, [r7, #0]
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	f7fe ff2b 	bl	8010838 <ip4_input>
      break;
 80119e2:	e013      	b.n	8011a0c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80119ea:	f003 0308 	and.w	r3, r3, #8
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d014      	beq.n	8011a1c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80119f2:	8afb      	ldrh	r3, [r7, #22]
 80119f4:	4619      	mov	r1, r3
 80119f6:	6878      	ldr	r0, [r7, #4]
 80119f8:	f7fc ffce 	bl	800e998 <pbuf_remove_header>
 80119fc:	4603      	mov	r3, r0
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d10e      	bne.n	8011a20 <ethernet_input+0x104>
        etharp_input(p, netif);
 8011a02:	6839      	ldr	r1, [r7, #0]
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	f7fe f8a5 	bl	800fb54 <etharp_input>
      break;
 8011a0a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	e00c      	b.n	8011a2a <ethernet_input+0x10e>
    goto free_and_return;
 8011a10:	bf00      	nop
 8011a12:	e006      	b.n	8011a22 <ethernet_input+0x106>
        goto free_and_return;
 8011a14:	bf00      	nop
 8011a16:	e004      	b.n	8011a22 <ethernet_input+0x106>
        goto free_and_return;
 8011a18:	bf00      	nop
 8011a1a:	e002      	b.n	8011a22 <ethernet_input+0x106>
        goto free_and_return;
 8011a1c:	bf00      	nop
 8011a1e:	e000      	b.n	8011a22 <ethernet_input+0x106>
        goto free_and_return;
 8011a20:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f7fd f83e 	bl	800eaa4 <pbuf_free>
  return ERR_OK;
 8011a28:	2300      	movs	r3, #0
}
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	3718      	adds	r7, #24
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}
 8011a32:	bf00      	nop
 8011a34:	0801453c 	.word	0x0801453c

08011a38 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b086      	sub	sp, #24
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	60f8      	str	r0, [r7, #12]
 8011a40:	60b9      	str	r1, [r7, #8]
 8011a42:	607a      	str	r2, [r7, #4]
 8011a44:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011a46:	8c3b      	ldrh	r3, [r7, #32]
 8011a48:	4618      	mov	r0, r3
 8011a4a:	f7fb fc4f 	bl	800d2ec <lwip_htons>
 8011a4e:	4603      	mov	r3, r0
 8011a50:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8011a52:	210e      	movs	r1, #14
 8011a54:	68b8      	ldr	r0, [r7, #8]
 8011a56:	f7fc ff8f 	bl	800e978 <pbuf_add_header>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d125      	bne.n	8011aac <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	685b      	ldr	r3, [r3, #4]
 8011a64:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011a66:	693b      	ldr	r3, [r7, #16]
 8011a68:	8afa      	ldrh	r2, [r7, #22]
 8011a6a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011a6c:	693b      	ldr	r3, [r7, #16]
 8011a6e:	2206      	movs	r2, #6
 8011a70:	6839      	ldr	r1, [r7, #0]
 8011a72:	4618      	mov	r0, r3
 8011a74:	f000 fb2d 	bl	80120d2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011a78:	693b      	ldr	r3, [r7, #16]
 8011a7a:	3306      	adds	r3, #6
 8011a7c:	2206      	movs	r2, #6
 8011a7e:	6879      	ldr	r1, [r7, #4]
 8011a80:	4618      	mov	r0, r3
 8011a82:	f000 fb26 	bl	80120d2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8011a8c:	2b06      	cmp	r3, #6
 8011a8e:	d006      	beq.n	8011a9e <ethernet_output+0x66>
 8011a90:	4b0a      	ldr	r3, [pc, #40]	@ (8011abc <ethernet_output+0x84>)
 8011a92:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8011a96:	490a      	ldr	r1, [pc, #40]	@ (8011ac0 <ethernet_output+0x88>)
 8011a98:	480a      	ldr	r0, [pc, #40]	@ (8011ac4 <ethernet_output+0x8c>)
 8011a9a:	f000 f9e9 	bl	8011e70 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	699b      	ldr	r3, [r3, #24]
 8011aa2:	68b9      	ldr	r1, [r7, #8]
 8011aa4:	68f8      	ldr	r0, [r7, #12]
 8011aa6:	4798      	blx	r3
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	e002      	b.n	8011ab2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011aac:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8011aae:	f06f 0301 	mvn.w	r3, #1
}
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3718      	adds	r7, #24
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}
 8011aba:	bf00      	nop
 8011abc:	0801438c 	.word	0x0801438c
 8011ac0:	080143c4 	.word	0x080143c4
 8011ac4:	080143f8 	.word	0x080143f8

08011ac8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b082      	sub	sp, #8
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	2200      	movs	r2, #0
 8011ad6:	2104      	movs	r1, #4
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f7f7 ff41 	bl	8009960 <osMessageQueueNew>
 8011ade:	4602      	mov	r2, r0
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d102      	bne.n	8011af2 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8011aec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011af0:	e000      	b.n	8011af4 <sys_mbox_new+0x2c>

  return ERR_OK;
 8011af2:	2300      	movs	r3, #0
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3708      	adds	r7, #8
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}

08011afc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b084      	sub	sp, #16
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
 8011b04:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	6818      	ldr	r0, [r3, #0]
 8011b0a:	4639      	mov	r1, r7
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	2200      	movs	r2, #0
 8011b10:	f7f7 ff9a 	bl	8009a48 <osMessageQueuePut>
 8011b14:	4603      	mov	r3, r0
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d102      	bne.n	8011b20 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	73fb      	strb	r3, [r7, #15]
 8011b1e:	e001      	b.n	8011b24 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8011b20:	23ff      	movs	r3, #255	@ 0xff
 8011b22:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8011b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	3710      	adds	r7, #16
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}

08011b30 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b086      	sub	sp, #24
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	60f8      	str	r0, [r7, #12]
 8011b38:	60b9      	str	r1, [r7, #8]
 8011b3a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8011b3c:	f7f7 fc20 	bl	8009380 <osKernelGetTickCount>
 8011b40:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d013      	beq.n	8011b70 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	6818      	ldr	r0, [r3, #0]
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	2200      	movs	r2, #0
 8011b50:	68b9      	ldr	r1, [r7, #8]
 8011b52:	f7f7 ffd9 	bl	8009b08 <osMessageQueueGet>
 8011b56:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d105      	bne.n	8011b6a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8011b5e:	f7f7 fc0f 	bl	8009380 <osKernelGetTickCount>
 8011b62:	4602      	mov	r2, r0
 8011b64:	697b      	ldr	r3, [r7, #20]
 8011b66:	1ad3      	subs	r3, r2, r3
 8011b68:	e00f      	b.n	8011b8a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8011b6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011b6e:	e00c      	b.n	8011b8a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	6818      	ldr	r0, [r3, #0]
 8011b74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011b78:	2200      	movs	r2, #0
 8011b7a:	68b9      	ldr	r1, [r7, #8]
 8011b7c:	f7f7 ffc4 	bl	8009b08 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8011b80:	f7f7 fbfe 	bl	8009380 <osKernelGetTickCount>
 8011b84:	4602      	mov	r2, r0
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	3718      	adds	r7, #24
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	bd80      	pop	{r7, pc}

08011b92 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8011b92:	b480      	push	{r7}
 8011b94:	b083      	sub	sp, #12
 8011b96:	af00      	add	r7, sp, #0
 8011b98:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d101      	bne.n	8011ba6 <sys_mbox_valid+0x14>
    return 0;
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	e000      	b.n	8011ba8 <sys_mbox_valid+0x16>
  else
    return 1;
 8011ba6:	2301      	movs	r3, #1
}
 8011ba8:	4618      	mov	r0, r3
 8011baa:	370c      	adds	r7, #12
 8011bac:	46bd      	mov	sp, r7
 8011bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb2:	4770      	bx	lr

08011bb4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8011bb8:	2000      	movs	r0, #0
 8011bba:	f7f7 fca3 	bl	8009504 <osMutexNew>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	4a01      	ldr	r2, [pc, #4]	@ (8011bc8 <sys_init+0x14>)
 8011bc2:	6013      	str	r3, [r2, #0]
#endif
}
 8011bc4:	bf00      	nop
 8011bc6:	bd80      	pop	{r7, pc}
 8011bc8:	2406cf5c 	.word	0x2406cf5c

08011bcc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b082      	sub	sp, #8
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8011bd4:	2000      	movs	r0, #0
 8011bd6:	f7f7 fc95 	bl	8009504 <osMutexNew>
 8011bda:	4602      	mov	r2, r0
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d102      	bne.n	8011bee <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8011be8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011bec:	e000      	b.n	8011bf0 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8011bee:	2300      	movs	r3, #0
}
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	3708      	adds	r7, #8
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	bd80      	pop	{r7, pc}

08011bf8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b082      	sub	sp, #8
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f7f7 fd01 	bl	8009610 <osMutexAcquire>
#endif
}
 8011c0e:	bf00      	nop
 8011c10:	3708      	adds	r7, #8
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd80      	pop	{r7, pc}

08011c16 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8011c16:	b580      	push	{r7, lr}
 8011c18:	b082      	sub	sp, #8
 8011c1a:	af00      	add	r7, sp, #0
 8011c1c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	4618      	mov	r0, r3
 8011c24:	f7f7 fd3f 	bl	80096a6 <osMutexRelease>
}
 8011c28:	bf00      	nop
 8011c2a:	3708      	adds	r7, #8
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}

08011c30 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b08e      	sub	sp, #56	@ 0x38
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	60f8      	str	r0, [r7, #12]
 8011c38:	60b9      	str	r1, [r7, #8]
 8011c3a:	607a      	str	r2, [r7, #4]
 8011c3c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8011c3e:	f107 0314 	add.w	r3, r7, #20
 8011c42:	2224      	movs	r2, #36	@ 0x24
 8011c44:	2100      	movs	r1, #0
 8011c46:	4618      	mov	r0, r3
 8011c48:	f000 f977 	bl	8011f3a <memset>
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	617b      	str	r3, [r7, #20]
 8011c50:	683b      	ldr	r3, [r7, #0]
 8011c52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011c54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8011c58:	f107 0314 	add.w	r3, r7, #20
 8011c5c:	461a      	mov	r2, r3
 8011c5e:	6879      	ldr	r1, [r7, #4]
 8011c60:	68b8      	ldr	r0, [r7, #8]
 8011c62:	f7f7 fba2 	bl	80093aa <osThreadNew>
 8011c66:	4603      	mov	r3, r0
#endif
}
 8011c68:	4618      	mov	r0, r3
 8011c6a:	3738      	adds	r7, #56	@ 0x38
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}

08011c70 <rand>:
 8011c70:	4b16      	ldr	r3, [pc, #88]	@ (8011ccc <rand+0x5c>)
 8011c72:	b510      	push	{r4, lr}
 8011c74:	681c      	ldr	r4, [r3, #0]
 8011c76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011c78:	b9b3      	cbnz	r3, 8011ca8 <rand+0x38>
 8011c7a:	2018      	movs	r0, #24
 8011c7c:	f000 faa0 	bl	80121c0 <malloc>
 8011c80:	4602      	mov	r2, r0
 8011c82:	6320      	str	r0, [r4, #48]	@ 0x30
 8011c84:	b920      	cbnz	r0, 8011c90 <rand+0x20>
 8011c86:	4b12      	ldr	r3, [pc, #72]	@ (8011cd0 <rand+0x60>)
 8011c88:	4812      	ldr	r0, [pc, #72]	@ (8011cd4 <rand+0x64>)
 8011c8a:	2152      	movs	r1, #82	@ 0x52
 8011c8c:	f000 fa30 	bl	80120f0 <__assert_func>
 8011c90:	4911      	ldr	r1, [pc, #68]	@ (8011cd8 <rand+0x68>)
 8011c92:	4b12      	ldr	r3, [pc, #72]	@ (8011cdc <rand+0x6c>)
 8011c94:	e9c0 1300 	strd	r1, r3, [r0]
 8011c98:	4b11      	ldr	r3, [pc, #68]	@ (8011ce0 <rand+0x70>)
 8011c9a:	6083      	str	r3, [r0, #8]
 8011c9c:	230b      	movs	r3, #11
 8011c9e:	8183      	strh	r3, [r0, #12]
 8011ca0:	2100      	movs	r1, #0
 8011ca2:	2001      	movs	r0, #1
 8011ca4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011ca8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011caa:	480e      	ldr	r0, [pc, #56]	@ (8011ce4 <rand+0x74>)
 8011cac:	690b      	ldr	r3, [r1, #16]
 8011cae:	694c      	ldr	r4, [r1, #20]
 8011cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8011ce8 <rand+0x78>)
 8011cb2:	4358      	muls	r0, r3
 8011cb4:	fb02 0004 	mla	r0, r2, r4, r0
 8011cb8:	fba3 3202 	umull	r3, r2, r3, r2
 8011cbc:	3301      	adds	r3, #1
 8011cbe:	eb40 0002 	adc.w	r0, r0, r2
 8011cc2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8011cc6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8011cca:	bd10      	pop	{r4, pc}
 8011ccc:	24000048 	.word	0x24000048
 8011cd0:	0801454a 	.word	0x0801454a
 8011cd4:	08014561 	.word	0x08014561
 8011cd8:	abcd330e 	.word	0xabcd330e
 8011cdc:	e66d1234 	.word	0xe66d1234
 8011ce0:	0005deec 	.word	0x0005deec
 8011ce4:	5851f42d 	.word	0x5851f42d
 8011ce8:	4c957f2d 	.word	0x4c957f2d

08011cec <std>:
 8011cec:	2300      	movs	r3, #0
 8011cee:	b510      	push	{r4, lr}
 8011cf0:	4604      	mov	r4, r0
 8011cf2:	e9c0 3300 	strd	r3, r3, [r0]
 8011cf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011cfa:	6083      	str	r3, [r0, #8]
 8011cfc:	8181      	strh	r1, [r0, #12]
 8011cfe:	6643      	str	r3, [r0, #100]	@ 0x64
 8011d00:	81c2      	strh	r2, [r0, #14]
 8011d02:	6183      	str	r3, [r0, #24]
 8011d04:	4619      	mov	r1, r3
 8011d06:	2208      	movs	r2, #8
 8011d08:	305c      	adds	r0, #92	@ 0x5c
 8011d0a:	f000 f916 	bl	8011f3a <memset>
 8011d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8011d44 <std+0x58>)
 8011d10:	6263      	str	r3, [r4, #36]	@ 0x24
 8011d12:	4b0d      	ldr	r3, [pc, #52]	@ (8011d48 <std+0x5c>)
 8011d14:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011d16:	4b0d      	ldr	r3, [pc, #52]	@ (8011d4c <std+0x60>)
 8011d18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8011d50 <std+0x64>)
 8011d1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8011d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8011d54 <std+0x68>)
 8011d20:	6224      	str	r4, [r4, #32]
 8011d22:	429c      	cmp	r4, r3
 8011d24:	d006      	beq.n	8011d34 <std+0x48>
 8011d26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011d2a:	4294      	cmp	r4, r2
 8011d2c:	d002      	beq.n	8011d34 <std+0x48>
 8011d2e:	33d0      	adds	r3, #208	@ 0xd0
 8011d30:	429c      	cmp	r4, r3
 8011d32:	d105      	bne.n	8011d40 <std+0x54>
 8011d34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d3c:	f000 b9c6 	b.w	80120cc <__retarget_lock_init_recursive>
 8011d40:	bd10      	pop	{r4, pc}
 8011d42:	bf00      	nop
 8011d44:	08011e95 	.word	0x08011e95
 8011d48:	08011eb7 	.word	0x08011eb7
 8011d4c:	08011eef 	.word	0x08011eef
 8011d50:	08011f13 	.word	0x08011f13
 8011d54:	2406cf60 	.word	0x2406cf60

08011d58 <stdio_exit_handler>:
 8011d58:	4a02      	ldr	r2, [pc, #8]	@ (8011d64 <stdio_exit_handler+0xc>)
 8011d5a:	4903      	ldr	r1, [pc, #12]	@ (8011d68 <stdio_exit_handler+0x10>)
 8011d5c:	4803      	ldr	r0, [pc, #12]	@ (8011d6c <stdio_exit_handler+0x14>)
 8011d5e:	f000 b869 	b.w	8011e34 <_fwalk_sglue>
 8011d62:	bf00      	nop
 8011d64:	2400003c 	.word	0x2400003c
 8011d68:	080129d5 	.word	0x080129d5
 8011d6c:	2400004c 	.word	0x2400004c

08011d70 <cleanup_stdio>:
 8011d70:	6841      	ldr	r1, [r0, #4]
 8011d72:	4b0c      	ldr	r3, [pc, #48]	@ (8011da4 <cleanup_stdio+0x34>)
 8011d74:	4299      	cmp	r1, r3
 8011d76:	b510      	push	{r4, lr}
 8011d78:	4604      	mov	r4, r0
 8011d7a:	d001      	beq.n	8011d80 <cleanup_stdio+0x10>
 8011d7c:	f000 fe2a 	bl	80129d4 <_fflush_r>
 8011d80:	68a1      	ldr	r1, [r4, #8]
 8011d82:	4b09      	ldr	r3, [pc, #36]	@ (8011da8 <cleanup_stdio+0x38>)
 8011d84:	4299      	cmp	r1, r3
 8011d86:	d002      	beq.n	8011d8e <cleanup_stdio+0x1e>
 8011d88:	4620      	mov	r0, r4
 8011d8a:	f000 fe23 	bl	80129d4 <_fflush_r>
 8011d8e:	68e1      	ldr	r1, [r4, #12]
 8011d90:	4b06      	ldr	r3, [pc, #24]	@ (8011dac <cleanup_stdio+0x3c>)
 8011d92:	4299      	cmp	r1, r3
 8011d94:	d004      	beq.n	8011da0 <cleanup_stdio+0x30>
 8011d96:	4620      	mov	r0, r4
 8011d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d9c:	f000 be1a 	b.w	80129d4 <_fflush_r>
 8011da0:	bd10      	pop	{r4, pc}
 8011da2:	bf00      	nop
 8011da4:	2406cf60 	.word	0x2406cf60
 8011da8:	2406cfc8 	.word	0x2406cfc8
 8011dac:	2406d030 	.word	0x2406d030

08011db0 <global_stdio_init.part.0>:
 8011db0:	b510      	push	{r4, lr}
 8011db2:	4b0b      	ldr	r3, [pc, #44]	@ (8011de0 <global_stdio_init.part.0+0x30>)
 8011db4:	4c0b      	ldr	r4, [pc, #44]	@ (8011de4 <global_stdio_init.part.0+0x34>)
 8011db6:	4a0c      	ldr	r2, [pc, #48]	@ (8011de8 <global_stdio_init.part.0+0x38>)
 8011db8:	601a      	str	r2, [r3, #0]
 8011dba:	4620      	mov	r0, r4
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	2104      	movs	r1, #4
 8011dc0:	f7ff ff94 	bl	8011cec <std>
 8011dc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011dc8:	2201      	movs	r2, #1
 8011dca:	2109      	movs	r1, #9
 8011dcc:	f7ff ff8e 	bl	8011cec <std>
 8011dd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011dd4:	2202      	movs	r2, #2
 8011dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011dda:	2112      	movs	r1, #18
 8011ddc:	f7ff bf86 	b.w	8011cec <std>
 8011de0:	2406d098 	.word	0x2406d098
 8011de4:	2406cf60 	.word	0x2406cf60
 8011de8:	08011d59 	.word	0x08011d59

08011dec <__sfp_lock_acquire>:
 8011dec:	4801      	ldr	r0, [pc, #4]	@ (8011df4 <__sfp_lock_acquire+0x8>)
 8011dee:	f000 b96e 	b.w	80120ce <__retarget_lock_acquire_recursive>
 8011df2:	bf00      	nop
 8011df4:	2406d0a1 	.word	0x2406d0a1

08011df8 <__sfp_lock_release>:
 8011df8:	4801      	ldr	r0, [pc, #4]	@ (8011e00 <__sfp_lock_release+0x8>)
 8011dfa:	f000 b969 	b.w	80120d0 <__retarget_lock_release_recursive>
 8011dfe:	bf00      	nop
 8011e00:	2406d0a1 	.word	0x2406d0a1

08011e04 <__sinit>:
 8011e04:	b510      	push	{r4, lr}
 8011e06:	4604      	mov	r4, r0
 8011e08:	f7ff fff0 	bl	8011dec <__sfp_lock_acquire>
 8011e0c:	6a23      	ldr	r3, [r4, #32]
 8011e0e:	b11b      	cbz	r3, 8011e18 <__sinit+0x14>
 8011e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e14:	f7ff bff0 	b.w	8011df8 <__sfp_lock_release>
 8011e18:	4b04      	ldr	r3, [pc, #16]	@ (8011e2c <__sinit+0x28>)
 8011e1a:	6223      	str	r3, [r4, #32]
 8011e1c:	4b04      	ldr	r3, [pc, #16]	@ (8011e30 <__sinit+0x2c>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d1f5      	bne.n	8011e10 <__sinit+0xc>
 8011e24:	f7ff ffc4 	bl	8011db0 <global_stdio_init.part.0>
 8011e28:	e7f2      	b.n	8011e10 <__sinit+0xc>
 8011e2a:	bf00      	nop
 8011e2c:	08011d71 	.word	0x08011d71
 8011e30:	2406d098 	.word	0x2406d098

08011e34 <_fwalk_sglue>:
 8011e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e38:	4607      	mov	r7, r0
 8011e3a:	4688      	mov	r8, r1
 8011e3c:	4614      	mov	r4, r2
 8011e3e:	2600      	movs	r6, #0
 8011e40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011e44:	f1b9 0901 	subs.w	r9, r9, #1
 8011e48:	d505      	bpl.n	8011e56 <_fwalk_sglue+0x22>
 8011e4a:	6824      	ldr	r4, [r4, #0]
 8011e4c:	2c00      	cmp	r4, #0
 8011e4e:	d1f7      	bne.n	8011e40 <_fwalk_sglue+0xc>
 8011e50:	4630      	mov	r0, r6
 8011e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e56:	89ab      	ldrh	r3, [r5, #12]
 8011e58:	2b01      	cmp	r3, #1
 8011e5a:	d907      	bls.n	8011e6c <_fwalk_sglue+0x38>
 8011e5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011e60:	3301      	adds	r3, #1
 8011e62:	d003      	beq.n	8011e6c <_fwalk_sglue+0x38>
 8011e64:	4629      	mov	r1, r5
 8011e66:	4638      	mov	r0, r7
 8011e68:	47c0      	blx	r8
 8011e6a:	4306      	orrs	r6, r0
 8011e6c:	3568      	adds	r5, #104	@ 0x68
 8011e6e:	e7e9      	b.n	8011e44 <_fwalk_sglue+0x10>

08011e70 <iprintf>:
 8011e70:	b40f      	push	{r0, r1, r2, r3}
 8011e72:	b507      	push	{r0, r1, r2, lr}
 8011e74:	4906      	ldr	r1, [pc, #24]	@ (8011e90 <iprintf+0x20>)
 8011e76:	ab04      	add	r3, sp, #16
 8011e78:	6808      	ldr	r0, [r1, #0]
 8011e7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e7e:	6881      	ldr	r1, [r0, #8]
 8011e80:	9301      	str	r3, [sp, #4]
 8011e82:	f000 fa7d 	bl	8012380 <_vfiprintf_r>
 8011e86:	b003      	add	sp, #12
 8011e88:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e8c:	b004      	add	sp, #16
 8011e8e:	4770      	bx	lr
 8011e90:	24000048 	.word	0x24000048

08011e94 <__sread>:
 8011e94:	b510      	push	{r4, lr}
 8011e96:	460c      	mov	r4, r1
 8011e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e9c:	f000 f8ce 	bl	801203c <_read_r>
 8011ea0:	2800      	cmp	r0, #0
 8011ea2:	bfab      	itete	ge
 8011ea4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011ea6:	89a3      	ldrhlt	r3, [r4, #12]
 8011ea8:	181b      	addge	r3, r3, r0
 8011eaa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011eae:	bfac      	ite	ge
 8011eb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011eb2:	81a3      	strhlt	r3, [r4, #12]
 8011eb4:	bd10      	pop	{r4, pc}

08011eb6 <__swrite>:
 8011eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011eba:	461f      	mov	r7, r3
 8011ebc:	898b      	ldrh	r3, [r1, #12]
 8011ebe:	05db      	lsls	r3, r3, #23
 8011ec0:	4605      	mov	r5, r0
 8011ec2:	460c      	mov	r4, r1
 8011ec4:	4616      	mov	r6, r2
 8011ec6:	d505      	bpl.n	8011ed4 <__swrite+0x1e>
 8011ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ecc:	2302      	movs	r3, #2
 8011ece:	2200      	movs	r2, #0
 8011ed0:	f000 f8a2 	bl	8012018 <_lseek_r>
 8011ed4:	89a3      	ldrh	r3, [r4, #12]
 8011ed6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011eda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011ede:	81a3      	strh	r3, [r4, #12]
 8011ee0:	4632      	mov	r2, r6
 8011ee2:	463b      	mov	r3, r7
 8011ee4:	4628      	mov	r0, r5
 8011ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011eea:	f000 b8b9 	b.w	8012060 <_write_r>

08011eee <__sseek>:
 8011eee:	b510      	push	{r4, lr}
 8011ef0:	460c      	mov	r4, r1
 8011ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ef6:	f000 f88f 	bl	8012018 <_lseek_r>
 8011efa:	1c43      	adds	r3, r0, #1
 8011efc:	89a3      	ldrh	r3, [r4, #12]
 8011efe:	bf15      	itete	ne
 8011f00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011f02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011f06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011f0a:	81a3      	strheq	r3, [r4, #12]
 8011f0c:	bf18      	it	ne
 8011f0e:	81a3      	strhne	r3, [r4, #12]
 8011f10:	bd10      	pop	{r4, pc}

08011f12 <__sclose>:
 8011f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f16:	f000 b819 	b.w	8011f4c <_close_r>

08011f1a <memcmp>:
 8011f1a:	b510      	push	{r4, lr}
 8011f1c:	3901      	subs	r1, #1
 8011f1e:	4402      	add	r2, r0
 8011f20:	4290      	cmp	r0, r2
 8011f22:	d101      	bne.n	8011f28 <memcmp+0xe>
 8011f24:	2000      	movs	r0, #0
 8011f26:	e005      	b.n	8011f34 <memcmp+0x1a>
 8011f28:	7803      	ldrb	r3, [r0, #0]
 8011f2a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011f2e:	42a3      	cmp	r3, r4
 8011f30:	d001      	beq.n	8011f36 <memcmp+0x1c>
 8011f32:	1b18      	subs	r0, r3, r4
 8011f34:	bd10      	pop	{r4, pc}
 8011f36:	3001      	adds	r0, #1
 8011f38:	e7f2      	b.n	8011f20 <memcmp+0x6>

08011f3a <memset>:
 8011f3a:	4402      	add	r2, r0
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	4293      	cmp	r3, r2
 8011f40:	d100      	bne.n	8011f44 <memset+0xa>
 8011f42:	4770      	bx	lr
 8011f44:	f803 1b01 	strb.w	r1, [r3], #1
 8011f48:	e7f9      	b.n	8011f3e <memset+0x4>
	...

08011f4c <_close_r>:
 8011f4c:	b538      	push	{r3, r4, r5, lr}
 8011f4e:	4d06      	ldr	r5, [pc, #24]	@ (8011f68 <_close_r+0x1c>)
 8011f50:	2300      	movs	r3, #0
 8011f52:	4604      	mov	r4, r0
 8011f54:	4608      	mov	r0, r1
 8011f56:	602b      	str	r3, [r5, #0]
 8011f58:	f7ef f8ce 	bl	80010f8 <_close>
 8011f5c:	1c43      	adds	r3, r0, #1
 8011f5e:	d102      	bne.n	8011f66 <_close_r+0x1a>
 8011f60:	682b      	ldr	r3, [r5, #0]
 8011f62:	b103      	cbz	r3, 8011f66 <_close_r+0x1a>
 8011f64:	6023      	str	r3, [r4, #0]
 8011f66:	bd38      	pop	{r3, r4, r5, pc}
 8011f68:	2406d09c 	.word	0x2406d09c

08011f6c <_reclaim_reent>:
 8011f6c:	4b29      	ldr	r3, [pc, #164]	@ (8012014 <_reclaim_reent+0xa8>)
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	4283      	cmp	r3, r0
 8011f72:	b570      	push	{r4, r5, r6, lr}
 8011f74:	4604      	mov	r4, r0
 8011f76:	d04b      	beq.n	8012010 <_reclaim_reent+0xa4>
 8011f78:	69c3      	ldr	r3, [r0, #28]
 8011f7a:	b1ab      	cbz	r3, 8011fa8 <_reclaim_reent+0x3c>
 8011f7c:	68db      	ldr	r3, [r3, #12]
 8011f7e:	b16b      	cbz	r3, 8011f9c <_reclaim_reent+0x30>
 8011f80:	2500      	movs	r5, #0
 8011f82:	69e3      	ldr	r3, [r4, #28]
 8011f84:	68db      	ldr	r3, [r3, #12]
 8011f86:	5959      	ldr	r1, [r3, r5]
 8011f88:	2900      	cmp	r1, #0
 8011f8a:	d13b      	bne.n	8012004 <_reclaim_reent+0x98>
 8011f8c:	3504      	adds	r5, #4
 8011f8e:	2d80      	cmp	r5, #128	@ 0x80
 8011f90:	d1f7      	bne.n	8011f82 <_reclaim_reent+0x16>
 8011f92:	69e3      	ldr	r3, [r4, #28]
 8011f94:	4620      	mov	r0, r4
 8011f96:	68d9      	ldr	r1, [r3, #12]
 8011f98:	f000 f8c8 	bl	801212c <_free_r>
 8011f9c:	69e3      	ldr	r3, [r4, #28]
 8011f9e:	6819      	ldr	r1, [r3, #0]
 8011fa0:	b111      	cbz	r1, 8011fa8 <_reclaim_reent+0x3c>
 8011fa2:	4620      	mov	r0, r4
 8011fa4:	f000 f8c2 	bl	801212c <_free_r>
 8011fa8:	6961      	ldr	r1, [r4, #20]
 8011faa:	b111      	cbz	r1, 8011fb2 <_reclaim_reent+0x46>
 8011fac:	4620      	mov	r0, r4
 8011fae:	f000 f8bd 	bl	801212c <_free_r>
 8011fb2:	69e1      	ldr	r1, [r4, #28]
 8011fb4:	b111      	cbz	r1, 8011fbc <_reclaim_reent+0x50>
 8011fb6:	4620      	mov	r0, r4
 8011fb8:	f000 f8b8 	bl	801212c <_free_r>
 8011fbc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011fbe:	b111      	cbz	r1, 8011fc6 <_reclaim_reent+0x5a>
 8011fc0:	4620      	mov	r0, r4
 8011fc2:	f000 f8b3 	bl	801212c <_free_r>
 8011fc6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011fc8:	b111      	cbz	r1, 8011fd0 <_reclaim_reent+0x64>
 8011fca:	4620      	mov	r0, r4
 8011fcc:	f000 f8ae 	bl	801212c <_free_r>
 8011fd0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8011fd2:	b111      	cbz	r1, 8011fda <_reclaim_reent+0x6e>
 8011fd4:	4620      	mov	r0, r4
 8011fd6:	f000 f8a9 	bl	801212c <_free_r>
 8011fda:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011fdc:	b111      	cbz	r1, 8011fe4 <_reclaim_reent+0x78>
 8011fde:	4620      	mov	r0, r4
 8011fe0:	f000 f8a4 	bl	801212c <_free_r>
 8011fe4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8011fe6:	b111      	cbz	r1, 8011fee <_reclaim_reent+0x82>
 8011fe8:	4620      	mov	r0, r4
 8011fea:	f000 f89f 	bl	801212c <_free_r>
 8011fee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011ff0:	b111      	cbz	r1, 8011ff8 <_reclaim_reent+0x8c>
 8011ff2:	4620      	mov	r0, r4
 8011ff4:	f000 f89a 	bl	801212c <_free_r>
 8011ff8:	6a23      	ldr	r3, [r4, #32]
 8011ffa:	b14b      	cbz	r3, 8012010 <_reclaim_reent+0xa4>
 8011ffc:	4620      	mov	r0, r4
 8011ffe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012002:	4718      	bx	r3
 8012004:	680e      	ldr	r6, [r1, #0]
 8012006:	4620      	mov	r0, r4
 8012008:	f000 f890 	bl	801212c <_free_r>
 801200c:	4631      	mov	r1, r6
 801200e:	e7bb      	b.n	8011f88 <_reclaim_reent+0x1c>
 8012010:	bd70      	pop	{r4, r5, r6, pc}
 8012012:	bf00      	nop
 8012014:	24000048 	.word	0x24000048

08012018 <_lseek_r>:
 8012018:	b538      	push	{r3, r4, r5, lr}
 801201a:	4d07      	ldr	r5, [pc, #28]	@ (8012038 <_lseek_r+0x20>)
 801201c:	4604      	mov	r4, r0
 801201e:	4608      	mov	r0, r1
 8012020:	4611      	mov	r1, r2
 8012022:	2200      	movs	r2, #0
 8012024:	602a      	str	r2, [r5, #0]
 8012026:	461a      	mov	r2, r3
 8012028:	f7ef f88d 	bl	8001146 <_lseek>
 801202c:	1c43      	adds	r3, r0, #1
 801202e:	d102      	bne.n	8012036 <_lseek_r+0x1e>
 8012030:	682b      	ldr	r3, [r5, #0]
 8012032:	b103      	cbz	r3, 8012036 <_lseek_r+0x1e>
 8012034:	6023      	str	r3, [r4, #0]
 8012036:	bd38      	pop	{r3, r4, r5, pc}
 8012038:	2406d09c 	.word	0x2406d09c

0801203c <_read_r>:
 801203c:	b538      	push	{r3, r4, r5, lr}
 801203e:	4d07      	ldr	r5, [pc, #28]	@ (801205c <_read_r+0x20>)
 8012040:	4604      	mov	r4, r0
 8012042:	4608      	mov	r0, r1
 8012044:	4611      	mov	r1, r2
 8012046:	2200      	movs	r2, #0
 8012048:	602a      	str	r2, [r5, #0]
 801204a:	461a      	mov	r2, r3
 801204c:	f7ef f81b 	bl	8001086 <_read>
 8012050:	1c43      	adds	r3, r0, #1
 8012052:	d102      	bne.n	801205a <_read_r+0x1e>
 8012054:	682b      	ldr	r3, [r5, #0]
 8012056:	b103      	cbz	r3, 801205a <_read_r+0x1e>
 8012058:	6023      	str	r3, [r4, #0]
 801205a:	bd38      	pop	{r3, r4, r5, pc}
 801205c:	2406d09c 	.word	0x2406d09c

08012060 <_write_r>:
 8012060:	b538      	push	{r3, r4, r5, lr}
 8012062:	4d07      	ldr	r5, [pc, #28]	@ (8012080 <_write_r+0x20>)
 8012064:	4604      	mov	r4, r0
 8012066:	4608      	mov	r0, r1
 8012068:	4611      	mov	r1, r2
 801206a:	2200      	movs	r2, #0
 801206c:	602a      	str	r2, [r5, #0]
 801206e:	461a      	mov	r2, r3
 8012070:	f7ef f826 	bl	80010c0 <_write>
 8012074:	1c43      	adds	r3, r0, #1
 8012076:	d102      	bne.n	801207e <_write_r+0x1e>
 8012078:	682b      	ldr	r3, [r5, #0]
 801207a:	b103      	cbz	r3, 801207e <_write_r+0x1e>
 801207c:	6023      	str	r3, [r4, #0]
 801207e:	bd38      	pop	{r3, r4, r5, pc}
 8012080:	2406d09c 	.word	0x2406d09c

08012084 <__libc_init_array>:
 8012084:	b570      	push	{r4, r5, r6, lr}
 8012086:	4d0d      	ldr	r5, [pc, #52]	@ (80120bc <__libc_init_array+0x38>)
 8012088:	4c0d      	ldr	r4, [pc, #52]	@ (80120c0 <__libc_init_array+0x3c>)
 801208a:	1b64      	subs	r4, r4, r5
 801208c:	10a4      	asrs	r4, r4, #2
 801208e:	2600      	movs	r6, #0
 8012090:	42a6      	cmp	r6, r4
 8012092:	d109      	bne.n	80120a8 <__libc_init_array+0x24>
 8012094:	4d0b      	ldr	r5, [pc, #44]	@ (80120c4 <__libc_init_array+0x40>)
 8012096:	4c0c      	ldr	r4, [pc, #48]	@ (80120c8 <__libc_init_array+0x44>)
 8012098:	f000 fe4a 	bl	8012d30 <_init>
 801209c:	1b64      	subs	r4, r4, r5
 801209e:	10a4      	asrs	r4, r4, #2
 80120a0:	2600      	movs	r6, #0
 80120a2:	42a6      	cmp	r6, r4
 80120a4:	d105      	bne.n	80120b2 <__libc_init_array+0x2e>
 80120a6:	bd70      	pop	{r4, r5, r6, pc}
 80120a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80120ac:	4798      	blx	r3
 80120ae:	3601      	adds	r6, #1
 80120b0:	e7ee      	b.n	8012090 <__libc_init_array+0xc>
 80120b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80120b6:	4798      	blx	r3
 80120b8:	3601      	adds	r6, #1
 80120ba:	e7f2      	b.n	80120a2 <__libc_init_array+0x1e>
 80120bc:	08014630 	.word	0x08014630
 80120c0:	08014630 	.word	0x08014630
 80120c4:	08014630 	.word	0x08014630
 80120c8:	08014634 	.word	0x08014634

080120cc <__retarget_lock_init_recursive>:
 80120cc:	4770      	bx	lr

080120ce <__retarget_lock_acquire_recursive>:
 80120ce:	4770      	bx	lr

080120d0 <__retarget_lock_release_recursive>:
 80120d0:	4770      	bx	lr

080120d2 <memcpy>:
 80120d2:	440a      	add	r2, r1
 80120d4:	4291      	cmp	r1, r2
 80120d6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80120da:	d100      	bne.n	80120de <memcpy+0xc>
 80120dc:	4770      	bx	lr
 80120de:	b510      	push	{r4, lr}
 80120e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80120e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80120e8:	4291      	cmp	r1, r2
 80120ea:	d1f9      	bne.n	80120e0 <memcpy+0xe>
 80120ec:	bd10      	pop	{r4, pc}
	...

080120f0 <__assert_func>:
 80120f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80120f2:	4614      	mov	r4, r2
 80120f4:	461a      	mov	r2, r3
 80120f6:	4b09      	ldr	r3, [pc, #36]	@ (801211c <__assert_func+0x2c>)
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	4605      	mov	r5, r0
 80120fc:	68d8      	ldr	r0, [r3, #12]
 80120fe:	b954      	cbnz	r4, 8012116 <__assert_func+0x26>
 8012100:	4b07      	ldr	r3, [pc, #28]	@ (8012120 <__assert_func+0x30>)
 8012102:	461c      	mov	r4, r3
 8012104:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012108:	9100      	str	r1, [sp, #0]
 801210a:	462b      	mov	r3, r5
 801210c:	4905      	ldr	r1, [pc, #20]	@ (8012124 <__assert_func+0x34>)
 801210e:	f000 fc89 	bl	8012a24 <fiprintf>
 8012112:	f000 fd3d 	bl	8012b90 <abort>
 8012116:	4b04      	ldr	r3, [pc, #16]	@ (8012128 <__assert_func+0x38>)
 8012118:	e7f4      	b.n	8012104 <__assert_func+0x14>
 801211a:	bf00      	nop
 801211c:	24000048 	.word	0x24000048
 8012120:	080145f4 	.word	0x080145f4
 8012124:	080145c6 	.word	0x080145c6
 8012128:	080145b9 	.word	0x080145b9

0801212c <_free_r>:
 801212c:	b538      	push	{r3, r4, r5, lr}
 801212e:	4605      	mov	r5, r0
 8012130:	2900      	cmp	r1, #0
 8012132:	d041      	beq.n	80121b8 <_free_r+0x8c>
 8012134:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012138:	1f0c      	subs	r4, r1, #4
 801213a:	2b00      	cmp	r3, #0
 801213c:	bfb8      	it	lt
 801213e:	18e4      	addlt	r4, r4, r3
 8012140:	f000 f8e8 	bl	8012314 <__malloc_lock>
 8012144:	4a1d      	ldr	r2, [pc, #116]	@ (80121bc <_free_r+0x90>)
 8012146:	6813      	ldr	r3, [r2, #0]
 8012148:	b933      	cbnz	r3, 8012158 <_free_r+0x2c>
 801214a:	6063      	str	r3, [r4, #4]
 801214c:	6014      	str	r4, [r2, #0]
 801214e:	4628      	mov	r0, r5
 8012150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012154:	f000 b8e4 	b.w	8012320 <__malloc_unlock>
 8012158:	42a3      	cmp	r3, r4
 801215a:	d908      	bls.n	801216e <_free_r+0x42>
 801215c:	6820      	ldr	r0, [r4, #0]
 801215e:	1821      	adds	r1, r4, r0
 8012160:	428b      	cmp	r3, r1
 8012162:	bf01      	itttt	eq
 8012164:	6819      	ldreq	r1, [r3, #0]
 8012166:	685b      	ldreq	r3, [r3, #4]
 8012168:	1809      	addeq	r1, r1, r0
 801216a:	6021      	streq	r1, [r4, #0]
 801216c:	e7ed      	b.n	801214a <_free_r+0x1e>
 801216e:	461a      	mov	r2, r3
 8012170:	685b      	ldr	r3, [r3, #4]
 8012172:	b10b      	cbz	r3, 8012178 <_free_r+0x4c>
 8012174:	42a3      	cmp	r3, r4
 8012176:	d9fa      	bls.n	801216e <_free_r+0x42>
 8012178:	6811      	ldr	r1, [r2, #0]
 801217a:	1850      	adds	r0, r2, r1
 801217c:	42a0      	cmp	r0, r4
 801217e:	d10b      	bne.n	8012198 <_free_r+0x6c>
 8012180:	6820      	ldr	r0, [r4, #0]
 8012182:	4401      	add	r1, r0
 8012184:	1850      	adds	r0, r2, r1
 8012186:	4283      	cmp	r3, r0
 8012188:	6011      	str	r1, [r2, #0]
 801218a:	d1e0      	bne.n	801214e <_free_r+0x22>
 801218c:	6818      	ldr	r0, [r3, #0]
 801218e:	685b      	ldr	r3, [r3, #4]
 8012190:	6053      	str	r3, [r2, #4]
 8012192:	4408      	add	r0, r1
 8012194:	6010      	str	r0, [r2, #0]
 8012196:	e7da      	b.n	801214e <_free_r+0x22>
 8012198:	d902      	bls.n	80121a0 <_free_r+0x74>
 801219a:	230c      	movs	r3, #12
 801219c:	602b      	str	r3, [r5, #0]
 801219e:	e7d6      	b.n	801214e <_free_r+0x22>
 80121a0:	6820      	ldr	r0, [r4, #0]
 80121a2:	1821      	adds	r1, r4, r0
 80121a4:	428b      	cmp	r3, r1
 80121a6:	bf04      	itt	eq
 80121a8:	6819      	ldreq	r1, [r3, #0]
 80121aa:	685b      	ldreq	r3, [r3, #4]
 80121ac:	6063      	str	r3, [r4, #4]
 80121ae:	bf04      	itt	eq
 80121b0:	1809      	addeq	r1, r1, r0
 80121b2:	6021      	streq	r1, [r4, #0]
 80121b4:	6054      	str	r4, [r2, #4]
 80121b6:	e7ca      	b.n	801214e <_free_r+0x22>
 80121b8:	bd38      	pop	{r3, r4, r5, pc}
 80121ba:	bf00      	nop
 80121bc:	2406d0a8 	.word	0x2406d0a8

080121c0 <malloc>:
 80121c0:	4b02      	ldr	r3, [pc, #8]	@ (80121cc <malloc+0xc>)
 80121c2:	4601      	mov	r1, r0
 80121c4:	6818      	ldr	r0, [r3, #0]
 80121c6:	f000 b825 	b.w	8012214 <_malloc_r>
 80121ca:	bf00      	nop
 80121cc:	24000048 	.word	0x24000048

080121d0 <sbrk_aligned>:
 80121d0:	b570      	push	{r4, r5, r6, lr}
 80121d2:	4e0f      	ldr	r6, [pc, #60]	@ (8012210 <sbrk_aligned+0x40>)
 80121d4:	460c      	mov	r4, r1
 80121d6:	6831      	ldr	r1, [r6, #0]
 80121d8:	4605      	mov	r5, r0
 80121da:	b911      	cbnz	r1, 80121e2 <sbrk_aligned+0x12>
 80121dc:	f000 fcc8 	bl	8012b70 <_sbrk_r>
 80121e0:	6030      	str	r0, [r6, #0]
 80121e2:	4621      	mov	r1, r4
 80121e4:	4628      	mov	r0, r5
 80121e6:	f000 fcc3 	bl	8012b70 <_sbrk_r>
 80121ea:	1c43      	adds	r3, r0, #1
 80121ec:	d103      	bne.n	80121f6 <sbrk_aligned+0x26>
 80121ee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80121f2:	4620      	mov	r0, r4
 80121f4:	bd70      	pop	{r4, r5, r6, pc}
 80121f6:	1cc4      	adds	r4, r0, #3
 80121f8:	f024 0403 	bic.w	r4, r4, #3
 80121fc:	42a0      	cmp	r0, r4
 80121fe:	d0f8      	beq.n	80121f2 <sbrk_aligned+0x22>
 8012200:	1a21      	subs	r1, r4, r0
 8012202:	4628      	mov	r0, r5
 8012204:	f000 fcb4 	bl	8012b70 <_sbrk_r>
 8012208:	3001      	adds	r0, #1
 801220a:	d1f2      	bne.n	80121f2 <sbrk_aligned+0x22>
 801220c:	e7ef      	b.n	80121ee <sbrk_aligned+0x1e>
 801220e:	bf00      	nop
 8012210:	2406d0a4 	.word	0x2406d0a4

08012214 <_malloc_r>:
 8012214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012218:	1ccd      	adds	r5, r1, #3
 801221a:	f025 0503 	bic.w	r5, r5, #3
 801221e:	3508      	adds	r5, #8
 8012220:	2d0c      	cmp	r5, #12
 8012222:	bf38      	it	cc
 8012224:	250c      	movcc	r5, #12
 8012226:	2d00      	cmp	r5, #0
 8012228:	4606      	mov	r6, r0
 801222a:	db01      	blt.n	8012230 <_malloc_r+0x1c>
 801222c:	42a9      	cmp	r1, r5
 801222e:	d904      	bls.n	801223a <_malloc_r+0x26>
 8012230:	230c      	movs	r3, #12
 8012232:	6033      	str	r3, [r6, #0]
 8012234:	2000      	movs	r0, #0
 8012236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801223a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012310 <_malloc_r+0xfc>
 801223e:	f000 f869 	bl	8012314 <__malloc_lock>
 8012242:	f8d8 3000 	ldr.w	r3, [r8]
 8012246:	461c      	mov	r4, r3
 8012248:	bb44      	cbnz	r4, 801229c <_malloc_r+0x88>
 801224a:	4629      	mov	r1, r5
 801224c:	4630      	mov	r0, r6
 801224e:	f7ff ffbf 	bl	80121d0 <sbrk_aligned>
 8012252:	1c43      	adds	r3, r0, #1
 8012254:	4604      	mov	r4, r0
 8012256:	d158      	bne.n	801230a <_malloc_r+0xf6>
 8012258:	f8d8 4000 	ldr.w	r4, [r8]
 801225c:	4627      	mov	r7, r4
 801225e:	2f00      	cmp	r7, #0
 8012260:	d143      	bne.n	80122ea <_malloc_r+0xd6>
 8012262:	2c00      	cmp	r4, #0
 8012264:	d04b      	beq.n	80122fe <_malloc_r+0xea>
 8012266:	6823      	ldr	r3, [r4, #0]
 8012268:	4639      	mov	r1, r7
 801226a:	4630      	mov	r0, r6
 801226c:	eb04 0903 	add.w	r9, r4, r3
 8012270:	f000 fc7e 	bl	8012b70 <_sbrk_r>
 8012274:	4581      	cmp	r9, r0
 8012276:	d142      	bne.n	80122fe <_malloc_r+0xea>
 8012278:	6821      	ldr	r1, [r4, #0]
 801227a:	1a6d      	subs	r5, r5, r1
 801227c:	4629      	mov	r1, r5
 801227e:	4630      	mov	r0, r6
 8012280:	f7ff ffa6 	bl	80121d0 <sbrk_aligned>
 8012284:	3001      	adds	r0, #1
 8012286:	d03a      	beq.n	80122fe <_malloc_r+0xea>
 8012288:	6823      	ldr	r3, [r4, #0]
 801228a:	442b      	add	r3, r5
 801228c:	6023      	str	r3, [r4, #0]
 801228e:	f8d8 3000 	ldr.w	r3, [r8]
 8012292:	685a      	ldr	r2, [r3, #4]
 8012294:	bb62      	cbnz	r2, 80122f0 <_malloc_r+0xdc>
 8012296:	f8c8 7000 	str.w	r7, [r8]
 801229a:	e00f      	b.n	80122bc <_malloc_r+0xa8>
 801229c:	6822      	ldr	r2, [r4, #0]
 801229e:	1b52      	subs	r2, r2, r5
 80122a0:	d420      	bmi.n	80122e4 <_malloc_r+0xd0>
 80122a2:	2a0b      	cmp	r2, #11
 80122a4:	d917      	bls.n	80122d6 <_malloc_r+0xc2>
 80122a6:	1961      	adds	r1, r4, r5
 80122a8:	42a3      	cmp	r3, r4
 80122aa:	6025      	str	r5, [r4, #0]
 80122ac:	bf18      	it	ne
 80122ae:	6059      	strne	r1, [r3, #4]
 80122b0:	6863      	ldr	r3, [r4, #4]
 80122b2:	bf08      	it	eq
 80122b4:	f8c8 1000 	streq.w	r1, [r8]
 80122b8:	5162      	str	r2, [r4, r5]
 80122ba:	604b      	str	r3, [r1, #4]
 80122bc:	4630      	mov	r0, r6
 80122be:	f000 f82f 	bl	8012320 <__malloc_unlock>
 80122c2:	f104 000b 	add.w	r0, r4, #11
 80122c6:	1d23      	adds	r3, r4, #4
 80122c8:	f020 0007 	bic.w	r0, r0, #7
 80122cc:	1ac2      	subs	r2, r0, r3
 80122ce:	bf1c      	itt	ne
 80122d0:	1a1b      	subne	r3, r3, r0
 80122d2:	50a3      	strne	r3, [r4, r2]
 80122d4:	e7af      	b.n	8012236 <_malloc_r+0x22>
 80122d6:	6862      	ldr	r2, [r4, #4]
 80122d8:	42a3      	cmp	r3, r4
 80122da:	bf0c      	ite	eq
 80122dc:	f8c8 2000 	streq.w	r2, [r8]
 80122e0:	605a      	strne	r2, [r3, #4]
 80122e2:	e7eb      	b.n	80122bc <_malloc_r+0xa8>
 80122e4:	4623      	mov	r3, r4
 80122e6:	6864      	ldr	r4, [r4, #4]
 80122e8:	e7ae      	b.n	8012248 <_malloc_r+0x34>
 80122ea:	463c      	mov	r4, r7
 80122ec:	687f      	ldr	r7, [r7, #4]
 80122ee:	e7b6      	b.n	801225e <_malloc_r+0x4a>
 80122f0:	461a      	mov	r2, r3
 80122f2:	685b      	ldr	r3, [r3, #4]
 80122f4:	42a3      	cmp	r3, r4
 80122f6:	d1fb      	bne.n	80122f0 <_malloc_r+0xdc>
 80122f8:	2300      	movs	r3, #0
 80122fa:	6053      	str	r3, [r2, #4]
 80122fc:	e7de      	b.n	80122bc <_malloc_r+0xa8>
 80122fe:	230c      	movs	r3, #12
 8012300:	6033      	str	r3, [r6, #0]
 8012302:	4630      	mov	r0, r6
 8012304:	f000 f80c 	bl	8012320 <__malloc_unlock>
 8012308:	e794      	b.n	8012234 <_malloc_r+0x20>
 801230a:	6005      	str	r5, [r0, #0]
 801230c:	e7d6      	b.n	80122bc <_malloc_r+0xa8>
 801230e:	bf00      	nop
 8012310:	2406d0a8 	.word	0x2406d0a8

08012314 <__malloc_lock>:
 8012314:	4801      	ldr	r0, [pc, #4]	@ (801231c <__malloc_lock+0x8>)
 8012316:	f7ff beda 	b.w	80120ce <__retarget_lock_acquire_recursive>
 801231a:	bf00      	nop
 801231c:	2406d0a0 	.word	0x2406d0a0

08012320 <__malloc_unlock>:
 8012320:	4801      	ldr	r0, [pc, #4]	@ (8012328 <__malloc_unlock+0x8>)
 8012322:	f7ff bed5 	b.w	80120d0 <__retarget_lock_release_recursive>
 8012326:	bf00      	nop
 8012328:	2406d0a0 	.word	0x2406d0a0

0801232c <__sfputc_r>:
 801232c:	6893      	ldr	r3, [r2, #8]
 801232e:	3b01      	subs	r3, #1
 8012330:	2b00      	cmp	r3, #0
 8012332:	b410      	push	{r4}
 8012334:	6093      	str	r3, [r2, #8]
 8012336:	da08      	bge.n	801234a <__sfputc_r+0x1e>
 8012338:	6994      	ldr	r4, [r2, #24]
 801233a:	42a3      	cmp	r3, r4
 801233c:	db01      	blt.n	8012342 <__sfputc_r+0x16>
 801233e:	290a      	cmp	r1, #10
 8012340:	d103      	bne.n	801234a <__sfputc_r+0x1e>
 8012342:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012346:	f000 bb7f 	b.w	8012a48 <__swbuf_r>
 801234a:	6813      	ldr	r3, [r2, #0]
 801234c:	1c58      	adds	r0, r3, #1
 801234e:	6010      	str	r0, [r2, #0]
 8012350:	7019      	strb	r1, [r3, #0]
 8012352:	4608      	mov	r0, r1
 8012354:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012358:	4770      	bx	lr

0801235a <__sfputs_r>:
 801235a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801235c:	4606      	mov	r6, r0
 801235e:	460f      	mov	r7, r1
 8012360:	4614      	mov	r4, r2
 8012362:	18d5      	adds	r5, r2, r3
 8012364:	42ac      	cmp	r4, r5
 8012366:	d101      	bne.n	801236c <__sfputs_r+0x12>
 8012368:	2000      	movs	r0, #0
 801236a:	e007      	b.n	801237c <__sfputs_r+0x22>
 801236c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012370:	463a      	mov	r2, r7
 8012372:	4630      	mov	r0, r6
 8012374:	f7ff ffda 	bl	801232c <__sfputc_r>
 8012378:	1c43      	adds	r3, r0, #1
 801237a:	d1f3      	bne.n	8012364 <__sfputs_r+0xa>
 801237c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012380 <_vfiprintf_r>:
 8012380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012384:	460d      	mov	r5, r1
 8012386:	b09d      	sub	sp, #116	@ 0x74
 8012388:	4614      	mov	r4, r2
 801238a:	4698      	mov	r8, r3
 801238c:	4606      	mov	r6, r0
 801238e:	b118      	cbz	r0, 8012398 <_vfiprintf_r+0x18>
 8012390:	6a03      	ldr	r3, [r0, #32]
 8012392:	b90b      	cbnz	r3, 8012398 <_vfiprintf_r+0x18>
 8012394:	f7ff fd36 	bl	8011e04 <__sinit>
 8012398:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801239a:	07d9      	lsls	r1, r3, #31
 801239c:	d405      	bmi.n	80123aa <_vfiprintf_r+0x2a>
 801239e:	89ab      	ldrh	r3, [r5, #12]
 80123a0:	059a      	lsls	r2, r3, #22
 80123a2:	d402      	bmi.n	80123aa <_vfiprintf_r+0x2a>
 80123a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80123a6:	f7ff fe92 	bl	80120ce <__retarget_lock_acquire_recursive>
 80123aa:	89ab      	ldrh	r3, [r5, #12]
 80123ac:	071b      	lsls	r3, r3, #28
 80123ae:	d501      	bpl.n	80123b4 <_vfiprintf_r+0x34>
 80123b0:	692b      	ldr	r3, [r5, #16]
 80123b2:	b99b      	cbnz	r3, 80123dc <_vfiprintf_r+0x5c>
 80123b4:	4629      	mov	r1, r5
 80123b6:	4630      	mov	r0, r6
 80123b8:	f000 fb84 	bl	8012ac4 <__swsetup_r>
 80123bc:	b170      	cbz	r0, 80123dc <_vfiprintf_r+0x5c>
 80123be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80123c0:	07dc      	lsls	r4, r3, #31
 80123c2:	d504      	bpl.n	80123ce <_vfiprintf_r+0x4e>
 80123c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80123c8:	b01d      	add	sp, #116	@ 0x74
 80123ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123ce:	89ab      	ldrh	r3, [r5, #12]
 80123d0:	0598      	lsls	r0, r3, #22
 80123d2:	d4f7      	bmi.n	80123c4 <_vfiprintf_r+0x44>
 80123d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80123d6:	f7ff fe7b 	bl	80120d0 <__retarget_lock_release_recursive>
 80123da:	e7f3      	b.n	80123c4 <_vfiprintf_r+0x44>
 80123dc:	2300      	movs	r3, #0
 80123de:	9309      	str	r3, [sp, #36]	@ 0x24
 80123e0:	2320      	movs	r3, #32
 80123e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80123e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80123ea:	2330      	movs	r3, #48	@ 0x30
 80123ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801259c <_vfiprintf_r+0x21c>
 80123f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80123f4:	f04f 0901 	mov.w	r9, #1
 80123f8:	4623      	mov	r3, r4
 80123fa:	469a      	mov	sl, r3
 80123fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012400:	b10a      	cbz	r2, 8012406 <_vfiprintf_r+0x86>
 8012402:	2a25      	cmp	r2, #37	@ 0x25
 8012404:	d1f9      	bne.n	80123fa <_vfiprintf_r+0x7a>
 8012406:	ebba 0b04 	subs.w	fp, sl, r4
 801240a:	d00b      	beq.n	8012424 <_vfiprintf_r+0xa4>
 801240c:	465b      	mov	r3, fp
 801240e:	4622      	mov	r2, r4
 8012410:	4629      	mov	r1, r5
 8012412:	4630      	mov	r0, r6
 8012414:	f7ff ffa1 	bl	801235a <__sfputs_r>
 8012418:	3001      	adds	r0, #1
 801241a:	f000 80a7 	beq.w	801256c <_vfiprintf_r+0x1ec>
 801241e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012420:	445a      	add	r2, fp
 8012422:	9209      	str	r2, [sp, #36]	@ 0x24
 8012424:	f89a 3000 	ldrb.w	r3, [sl]
 8012428:	2b00      	cmp	r3, #0
 801242a:	f000 809f 	beq.w	801256c <_vfiprintf_r+0x1ec>
 801242e:	2300      	movs	r3, #0
 8012430:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012434:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012438:	f10a 0a01 	add.w	sl, sl, #1
 801243c:	9304      	str	r3, [sp, #16]
 801243e:	9307      	str	r3, [sp, #28]
 8012440:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012444:	931a      	str	r3, [sp, #104]	@ 0x68
 8012446:	4654      	mov	r4, sl
 8012448:	2205      	movs	r2, #5
 801244a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801244e:	4853      	ldr	r0, [pc, #332]	@ (801259c <_vfiprintf_r+0x21c>)
 8012450:	f7ed ff46 	bl	80002e0 <memchr>
 8012454:	9a04      	ldr	r2, [sp, #16]
 8012456:	b9d8      	cbnz	r0, 8012490 <_vfiprintf_r+0x110>
 8012458:	06d1      	lsls	r1, r2, #27
 801245a:	bf44      	itt	mi
 801245c:	2320      	movmi	r3, #32
 801245e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012462:	0713      	lsls	r3, r2, #28
 8012464:	bf44      	itt	mi
 8012466:	232b      	movmi	r3, #43	@ 0x2b
 8012468:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801246c:	f89a 3000 	ldrb.w	r3, [sl]
 8012470:	2b2a      	cmp	r3, #42	@ 0x2a
 8012472:	d015      	beq.n	80124a0 <_vfiprintf_r+0x120>
 8012474:	9a07      	ldr	r2, [sp, #28]
 8012476:	4654      	mov	r4, sl
 8012478:	2000      	movs	r0, #0
 801247a:	f04f 0c0a 	mov.w	ip, #10
 801247e:	4621      	mov	r1, r4
 8012480:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012484:	3b30      	subs	r3, #48	@ 0x30
 8012486:	2b09      	cmp	r3, #9
 8012488:	d94b      	bls.n	8012522 <_vfiprintf_r+0x1a2>
 801248a:	b1b0      	cbz	r0, 80124ba <_vfiprintf_r+0x13a>
 801248c:	9207      	str	r2, [sp, #28]
 801248e:	e014      	b.n	80124ba <_vfiprintf_r+0x13a>
 8012490:	eba0 0308 	sub.w	r3, r0, r8
 8012494:	fa09 f303 	lsl.w	r3, r9, r3
 8012498:	4313      	orrs	r3, r2
 801249a:	9304      	str	r3, [sp, #16]
 801249c:	46a2      	mov	sl, r4
 801249e:	e7d2      	b.n	8012446 <_vfiprintf_r+0xc6>
 80124a0:	9b03      	ldr	r3, [sp, #12]
 80124a2:	1d19      	adds	r1, r3, #4
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	9103      	str	r1, [sp, #12]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	bfbb      	ittet	lt
 80124ac:	425b      	neglt	r3, r3
 80124ae:	f042 0202 	orrlt.w	r2, r2, #2
 80124b2:	9307      	strge	r3, [sp, #28]
 80124b4:	9307      	strlt	r3, [sp, #28]
 80124b6:	bfb8      	it	lt
 80124b8:	9204      	strlt	r2, [sp, #16]
 80124ba:	7823      	ldrb	r3, [r4, #0]
 80124bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80124be:	d10a      	bne.n	80124d6 <_vfiprintf_r+0x156>
 80124c0:	7863      	ldrb	r3, [r4, #1]
 80124c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80124c4:	d132      	bne.n	801252c <_vfiprintf_r+0x1ac>
 80124c6:	9b03      	ldr	r3, [sp, #12]
 80124c8:	1d1a      	adds	r2, r3, #4
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	9203      	str	r2, [sp, #12]
 80124ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80124d2:	3402      	adds	r4, #2
 80124d4:	9305      	str	r3, [sp, #20]
 80124d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80125ac <_vfiprintf_r+0x22c>
 80124da:	7821      	ldrb	r1, [r4, #0]
 80124dc:	2203      	movs	r2, #3
 80124de:	4650      	mov	r0, sl
 80124e0:	f7ed fefe 	bl	80002e0 <memchr>
 80124e4:	b138      	cbz	r0, 80124f6 <_vfiprintf_r+0x176>
 80124e6:	9b04      	ldr	r3, [sp, #16]
 80124e8:	eba0 000a 	sub.w	r0, r0, sl
 80124ec:	2240      	movs	r2, #64	@ 0x40
 80124ee:	4082      	lsls	r2, r0
 80124f0:	4313      	orrs	r3, r2
 80124f2:	3401      	adds	r4, #1
 80124f4:	9304      	str	r3, [sp, #16]
 80124f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124fa:	4829      	ldr	r0, [pc, #164]	@ (80125a0 <_vfiprintf_r+0x220>)
 80124fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012500:	2206      	movs	r2, #6
 8012502:	f7ed feed 	bl	80002e0 <memchr>
 8012506:	2800      	cmp	r0, #0
 8012508:	d03f      	beq.n	801258a <_vfiprintf_r+0x20a>
 801250a:	4b26      	ldr	r3, [pc, #152]	@ (80125a4 <_vfiprintf_r+0x224>)
 801250c:	bb1b      	cbnz	r3, 8012556 <_vfiprintf_r+0x1d6>
 801250e:	9b03      	ldr	r3, [sp, #12]
 8012510:	3307      	adds	r3, #7
 8012512:	f023 0307 	bic.w	r3, r3, #7
 8012516:	3308      	adds	r3, #8
 8012518:	9303      	str	r3, [sp, #12]
 801251a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801251c:	443b      	add	r3, r7
 801251e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012520:	e76a      	b.n	80123f8 <_vfiprintf_r+0x78>
 8012522:	fb0c 3202 	mla	r2, ip, r2, r3
 8012526:	460c      	mov	r4, r1
 8012528:	2001      	movs	r0, #1
 801252a:	e7a8      	b.n	801247e <_vfiprintf_r+0xfe>
 801252c:	2300      	movs	r3, #0
 801252e:	3401      	adds	r4, #1
 8012530:	9305      	str	r3, [sp, #20]
 8012532:	4619      	mov	r1, r3
 8012534:	f04f 0c0a 	mov.w	ip, #10
 8012538:	4620      	mov	r0, r4
 801253a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801253e:	3a30      	subs	r2, #48	@ 0x30
 8012540:	2a09      	cmp	r2, #9
 8012542:	d903      	bls.n	801254c <_vfiprintf_r+0x1cc>
 8012544:	2b00      	cmp	r3, #0
 8012546:	d0c6      	beq.n	80124d6 <_vfiprintf_r+0x156>
 8012548:	9105      	str	r1, [sp, #20]
 801254a:	e7c4      	b.n	80124d6 <_vfiprintf_r+0x156>
 801254c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012550:	4604      	mov	r4, r0
 8012552:	2301      	movs	r3, #1
 8012554:	e7f0      	b.n	8012538 <_vfiprintf_r+0x1b8>
 8012556:	ab03      	add	r3, sp, #12
 8012558:	9300      	str	r3, [sp, #0]
 801255a:	462a      	mov	r2, r5
 801255c:	4b12      	ldr	r3, [pc, #72]	@ (80125a8 <_vfiprintf_r+0x228>)
 801255e:	a904      	add	r1, sp, #16
 8012560:	4630      	mov	r0, r6
 8012562:	f3af 8000 	nop.w
 8012566:	4607      	mov	r7, r0
 8012568:	1c78      	adds	r0, r7, #1
 801256a:	d1d6      	bne.n	801251a <_vfiprintf_r+0x19a>
 801256c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801256e:	07d9      	lsls	r1, r3, #31
 8012570:	d405      	bmi.n	801257e <_vfiprintf_r+0x1fe>
 8012572:	89ab      	ldrh	r3, [r5, #12]
 8012574:	059a      	lsls	r2, r3, #22
 8012576:	d402      	bmi.n	801257e <_vfiprintf_r+0x1fe>
 8012578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801257a:	f7ff fda9 	bl	80120d0 <__retarget_lock_release_recursive>
 801257e:	89ab      	ldrh	r3, [r5, #12]
 8012580:	065b      	lsls	r3, r3, #25
 8012582:	f53f af1f 	bmi.w	80123c4 <_vfiprintf_r+0x44>
 8012586:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012588:	e71e      	b.n	80123c8 <_vfiprintf_r+0x48>
 801258a:	ab03      	add	r3, sp, #12
 801258c:	9300      	str	r3, [sp, #0]
 801258e:	462a      	mov	r2, r5
 8012590:	4b05      	ldr	r3, [pc, #20]	@ (80125a8 <_vfiprintf_r+0x228>)
 8012592:	a904      	add	r1, sp, #16
 8012594:	4630      	mov	r0, r6
 8012596:	f000 f879 	bl	801268c <_printf_i>
 801259a:	e7e4      	b.n	8012566 <_vfiprintf_r+0x1e6>
 801259c:	080145f5 	.word	0x080145f5
 80125a0:	080145ff 	.word	0x080145ff
 80125a4:	00000000 	.word	0x00000000
 80125a8:	0801235b 	.word	0x0801235b
 80125ac:	080145fb 	.word	0x080145fb

080125b0 <_printf_common>:
 80125b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125b4:	4616      	mov	r6, r2
 80125b6:	4698      	mov	r8, r3
 80125b8:	688a      	ldr	r2, [r1, #8]
 80125ba:	690b      	ldr	r3, [r1, #16]
 80125bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80125c0:	4293      	cmp	r3, r2
 80125c2:	bfb8      	it	lt
 80125c4:	4613      	movlt	r3, r2
 80125c6:	6033      	str	r3, [r6, #0]
 80125c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80125cc:	4607      	mov	r7, r0
 80125ce:	460c      	mov	r4, r1
 80125d0:	b10a      	cbz	r2, 80125d6 <_printf_common+0x26>
 80125d2:	3301      	adds	r3, #1
 80125d4:	6033      	str	r3, [r6, #0]
 80125d6:	6823      	ldr	r3, [r4, #0]
 80125d8:	0699      	lsls	r1, r3, #26
 80125da:	bf42      	ittt	mi
 80125dc:	6833      	ldrmi	r3, [r6, #0]
 80125de:	3302      	addmi	r3, #2
 80125e0:	6033      	strmi	r3, [r6, #0]
 80125e2:	6825      	ldr	r5, [r4, #0]
 80125e4:	f015 0506 	ands.w	r5, r5, #6
 80125e8:	d106      	bne.n	80125f8 <_printf_common+0x48>
 80125ea:	f104 0a19 	add.w	sl, r4, #25
 80125ee:	68e3      	ldr	r3, [r4, #12]
 80125f0:	6832      	ldr	r2, [r6, #0]
 80125f2:	1a9b      	subs	r3, r3, r2
 80125f4:	42ab      	cmp	r3, r5
 80125f6:	dc26      	bgt.n	8012646 <_printf_common+0x96>
 80125f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80125fc:	6822      	ldr	r2, [r4, #0]
 80125fe:	3b00      	subs	r3, #0
 8012600:	bf18      	it	ne
 8012602:	2301      	movne	r3, #1
 8012604:	0692      	lsls	r2, r2, #26
 8012606:	d42b      	bmi.n	8012660 <_printf_common+0xb0>
 8012608:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801260c:	4641      	mov	r1, r8
 801260e:	4638      	mov	r0, r7
 8012610:	47c8      	blx	r9
 8012612:	3001      	adds	r0, #1
 8012614:	d01e      	beq.n	8012654 <_printf_common+0xa4>
 8012616:	6823      	ldr	r3, [r4, #0]
 8012618:	6922      	ldr	r2, [r4, #16]
 801261a:	f003 0306 	and.w	r3, r3, #6
 801261e:	2b04      	cmp	r3, #4
 8012620:	bf02      	ittt	eq
 8012622:	68e5      	ldreq	r5, [r4, #12]
 8012624:	6833      	ldreq	r3, [r6, #0]
 8012626:	1aed      	subeq	r5, r5, r3
 8012628:	68a3      	ldr	r3, [r4, #8]
 801262a:	bf0c      	ite	eq
 801262c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012630:	2500      	movne	r5, #0
 8012632:	4293      	cmp	r3, r2
 8012634:	bfc4      	itt	gt
 8012636:	1a9b      	subgt	r3, r3, r2
 8012638:	18ed      	addgt	r5, r5, r3
 801263a:	2600      	movs	r6, #0
 801263c:	341a      	adds	r4, #26
 801263e:	42b5      	cmp	r5, r6
 8012640:	d11a      	bne.n	8012678 <_printf_common+0xc8>
 8012642:	2000      	movs	r0, #0
 8012644:	e008      	b.n	8012658 <_printf_common+0xa8>
 8012646:	2301      	movs	r3, #1
 8012648:	4652      	mov	r2, sl
 801264a:	4641      	mov	r1, r8
 801264c:	4638      	mov	r0, r7
 801264e:	47c8      	blx	r9
 8012650:	3001      	adds	r0, #1
 8012652:	d103      	bne.n	801265c <_printf_common+0xac>
 8012654:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801265c:	3501      	adds	r5, #1
 801265e:	e7c6      	b.n	80125ee <_printf_common+0x3e>
 8012660:	18e1      	adds	r1, r4, r3
 8012662:	1c5a      	adds	r2, r3, #1
 8012664:	2030      	movs	r0, #48	@ 0x30
 8012666:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801266a:	4422      	add	r2, r4
 801266c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012670:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012674:	3302      	adds	r3, #2
 8012676:	e7c7      	b.n	8012608 <_printf_common+0x58>
 8012678:	2301      	movs	r3, #1
 801267a:	4622      	mov	r2, r4
 801267c:	4641      	mov	r1, r8
 801267e:	4638      	mov	r0, r7
 8012680:	47c8      	blx	r9
 8012682:	3001      	adds	r0, #1
 8012684:	d0e6      	beq.n	8012654 <_printf_common+0xa4>
 8012686:	3601      	adds	r6, #1
 8012688:	e7d9      	b.n	801263e <_printf_common+0x8e>
	...

0801268c <_printf_i>:
 801268c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012690:	7e0f      	ldrb	r7, [r1, #24]
 8012692:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012694:	2f78      	cmp	r7, #120	@ 0x78
 8012696:	4691      	mov	r9, r2
 8012698:	4680      	mov	r8, r0
 801269a:	460c      	mov	r4, r1
 801269c:	469a      	mov	sl, r3
 801269e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80126a2:	d807      	bhi.n	80126b4 <_printf_i+0x28>
 80126a4:	2f62      	cmp	r7, #98	@ 0x62
 80126a6:	d80a      	bhi.n	80126be <_printf_i+0x32>
 80126a8:	2f00      	cmp	r7, #0
 80126aa:	f000 80d2 	beq.w	8012852 <_printf_i+0x1c6>
 80126ae:	2f58      	cmp	r7, #88	@ 0x58
 80126b0:	f000 80b9 	beq.w	8012826 <_printf_i+0x19a>
 80126b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80126b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80126bc:	e03a      	b.n	8012734 <_printf_i+0xa8>
 80126be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80126c2:	2b15      	cmp	r3, #21
 80126c4:	d8f6      	bhi.n	80126b4 <_printf_i+0x28>
 80126c6:	a101      	add	r1, pc, #4	@ (adr r1, 80126cc <_printf_i+0x40>)
 80126c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80126cc:	08012725 	.word	0x08012725
 80126d0:	08012739 	.word	0x08012739
 80126d4:	080126b5 	.word	0x080126b5
 80126d8:	080126b5 	.word	0x080126b5
 80126dc:	080126b5 	.word	0x080126b5
 80126e0:	080126b5 	.word	0x080126b5
 80126e4:	08012739 	.word	0x08012739
 80126e8:	080126b5 	.word	0x080126b5
 80126ec:	080126b5 	.word	0x080126b5
 80126f0:	080126b5 	.word	0x080126b5
 80126f4:	080126b5 	.word	0x080126b5
 80126f8:	08012839 	.word	0x08012839
 80126fc:	08012763 	.word	0x08012763
 8012700:	080127f3 	.word	0x080127f3
 8012704:	080126b5 	.word	0x080126b5
 8012708:	080126b5 	.word	0x080126b5
 801270c:	0801285b 	.word	0x0801285b
 8012710:	080126b5 	.word	0x080126b5
 8012714:	08012763 	.word	0x08012763
 8012718:	080126b5 	.word	0x080126b5
 801271c:	080126b5 	.word	0x080126b5
 8012720:	080127fb 	.word	0x080127fb
 8012724:	6833      	ldr	r3, [r6, #0]
 8012726:	1d1a      	adds	r2, r3, #4
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	6032      	str	r2, [r6, #0]
 801272c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012730:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012734:	2301      	movs	r3, #1
 8012736:	e09d      	b.n	8012874 <_printf_i+0x1e8>
 8012738:	6833      	ldr	r3, [r6, #0]
 801273a:	6820      	ldr	r0, [r4, #0]
 801273c:	1d19      	adds	r1, r3, #4
 801273e:	6031      	str	r1, [r6, #0]
 8012740:	0606      	lsls	r6, r0, #24
 8012742:	d501      	bpl.n	8012748 <_printf_i+0xbc>
 8012744:	681d      	ldr	r5, [r3, #0]
 8012746:	e003      	b.n	8012750 <_printf_i+0xc4>
 8012748:	0645      	lsls	r5, r0, #25
 801274a:	d5fb      	bpl.n	8012744 <_printf_i+0xb8>
 801274c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012750:	2d00      	cmp	r5, #0
 8012752:	da03      	bge.n	801275c <_printf_i+0xd0>
 8012754:	232d      	movs	r3, #45	@ 0x2d
 8012756:	426d      	negs	r5, r5
 8012758:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801275c:	4859      	ldr	r0, [pc, #356]	@ (80128c4 <_printf_i+0x238>)
 801275e:	230a      	movs	r3, #10
 8012760:	e011      	b.n	8012786 <_printf_i+0xfa>
 8012762:	6821      	ldr	r1, [r4, #0]
 8012764:	6833      	ldr	r3, [r6, #0]
 8012766:	0608      	lsls	r0, r1, #24
 8012768:	f853 5b04 	ldr.w	r5, [r3], #4
 801276c:	d402      	bmi.n	8012774 <_printf_i+0xe8>
 801276e:	0649      	lsls	r1, r1, #25
 8012770:	bf48      	it	mi
 8012772:	b2ad      	uxthmi	r5, r5
 8012774:	2f6f      	cmp	r7, #111	@ 0x6f
 8012776:	4853      	ldr	r0, [pc, #332]	@ (80128c4 <_printf_i+0x238>)
 8012778:	6033      	str	r3, [r6, #0]
 801277a:	bf14      	ite	ne
 801277c:	230a      	movne	r3, #10
 801277e:	2308      	moveq	r3, #8
 8012780:	2100      	movs	r1, #0
 8012782:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012786:	6866      	ldr	r6, [r4, #4]
 8012788:	60a6      	str	r6, [r4, #8]
 801278a:	2e00      	cmp	r6, #0
 801278c:	bfa2      	ittt	ge
 801278e:	6821      	ldrge	r1, [r4, #0]
 8012790:	f021 0104 	bicge.w	r1, r1, #4
 8012794:	6021      	strge	r1, [r4, #0]
 8012796:	b90d      	cbnz	r5, 801279c <_printf_i+0x110>
 8012798:	2e00      	cmp	r6, #0
 801279a:	d04b      	beq.n	8012834 <_printf_i+0x1a8>
 801279c:	4616      	mov	r6, r2
 801279e:	fbb5 f1f3 	udiv	r1, r5, r3
 80127a2:	fb03 5711 	mls	r7, r3, r1, r5
 80127a6:	5dc7      	ldrb	r7, [r0, r7]
 80127a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80127ac:	462f      	mov	r7, r5
 80127ae:	42bb      	cmp	r3, r7
 80127b0:	460d      	mov	r5, r1
 80127b2:	d9f4      	bls.n	801279e <_printf_i+0x112>
 80127b4:	2b08      	cmp	r3, #8
 80127b6:	d10b      	bne.n	80127d0 <_printf_i+0x144>
 80127b8:	6823      	ldr	r3, [r4, #0]
 80127ba:	07df      	lsls	r7, r3, #31
 80127bc:	d508      	bpl.n	80127d0 <_printf_i+0x144>
 80127be:	6923      	ldr	r3, [r4, #16]
 80127c0:	6861      	ldr	r1, [r4, #4]
 80127c2:	4299      	cmp	r1, r3
 80127c4:	bfde      	ittt	le
 80127c6:	2330      	movle	r3, #48	@ 0x30
 80127c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80127cc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80127d0:	1b92      	subs	r2, r2, r6
 80127d2:	6122      	str	r2, [r4, #16]
 80127d4:	f8cd a000 	str.w	sl, [sp]
 80127d8:	464b      	mov	r3, r9
 80127da:	aa03      	add	r2, sp, #12
 80127dc:	4621      	mov	r1, r4
 80127de:	4640      	mov	r0, r8
 80127e0:	f7ff fee6 	bl	80125b0 <_printf_common>
 80127e4:	3001      	adds	r0, #1
 80127e6:	d14a      	bne.n	801287e <_printf_i+0x1f2>
 80127e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80127ec:	b004      	add	sp, #16
 80127ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127f2:	6823      	ldr	r3, [r4, #0]
 80127f4:	f043 0320 	orr.w	r3, r3, #32
 80127f8:	6023      	str	r3, [r4, #0]
 80127fa:	4833      	ldr	r0, [pc, #204]	@ (80128c8 <_printf_i+0x23c>)
 80127fc:	2778      	movs	r7, #120	@ 0x78
 80127fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012802:	6823      	ldr	r3, [r4, #0]
 8012804:	6831      	ldr	r1, [r6, #0]
 8012806:	061f      	lsls	r7, r3, #24
 8012808:	f851 5b04 	ldr.w	r5, [r1], #4
 801280c:	d402      	bmi.n	8012814 <_printf_i+0x188>
 801280e:	065f      	lsls	r7, r3, #25
 8012810:	bf48      	it	mi
 8012812:	b2ad      	uxthmi	r5, r5
 8012814:	6031      	str	r1, [r6, #0]
 8012816:	07d9      	lsls	r1, r3, #31
 8012818:	bf44      	itt	mi
 801281a:	f043 0320 	orrmi.w	r3, r3, #32
 801281e:	6023      	strmi	r3, [r4, #0]
 8012820:	b11d      	cbz	r5, 801282a <_printf_i+0x19e>
 8012822:	2310      	movs	r3, #16
 8012824:	e7ac      	b.n	8012780 <_printf_i+0xf4>
 8012826:	4827      	ldr	r0, [pc, #156]	@ (80128c4 <_printf_i+0x238>)
 8012828:	e7e9      	b.n	80127fe <_printf_i+0x172>
 801282a:	6823      	ldr	r3, [r4, #0]
 801282c:	f023 0320 	bic.w	r3, r3, #32
 8012830:	6023      	str	r3, [r4, #0]
 8012832:	e7f6      	b.n	8012822 <_printf_i+0x196>
 8012834:	4616      	mov	r6, r2
 8012836:	e7bd      	b.n	80127b4 <_printf_i+0x128>
 8012838:	6833      	ldr	r3, [r6, #0]
 801283a:	6825      	ldr	r5, [r4, #0]
 801283c:	6961      	ldr	r1, [r4, #20]
 801283e:	1d18      	adds	r0, r3, #4
 8012840:	6030      	str	r0, [r6, #0]
 8012842:	062e      	lsls	r6, r5, #24
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	d501      	bpl.n	801284c <_printf_i+0x1c0>
 8012848:	6019      	str	r1, [r3, #0]
 801284a:	e002      	b.n	8012852 <_printf_i+0x1c6>
 801284c:	0668      	lsls	r0, r5, #25
 801284e:	d5fb      	bpl.n	8012848 <_printf_i+0x1bc>
 8012850:	8019      	strh	r1, [r3, #0]
 8012852:	2300      	movs	r3, #0
 8012854:	6123      	str	r3, [r4, #16]
 8012856:	4616      	mov	r6, r2
 8012858:	e7bc      	b.n	80127d4 <_printf_i+0x148>
 801285a:	6833      	ldr	r3, [r6, #0]
 801285c:	1d1a      	adds	r2, r3, #4
 801285e:	6032      	str	r2, [r6, #0]
 8012860:	681e      	ldr	r6, [r3, #0]
 8012862:	6862      	ldr	r2, [r4, #4]
 8012864:	2100      	movs	r1, #0
 8012866:	4630      	mov	r0, r6
 8012868:	f7ed fd3a 	bl	80002e0 <memchr>
 801286c:	b108      	cbz	r0, 8012872 <_printf_i+0x1e6>
 801286e:	1b80      	subs	r0, r0, r6
 8012870:	6060      	str	r0, [r4, #4]
 8012872:	6863      	ldr	r3, [r4, #4]
 8012874:	6123      	str	r3, [r4, #16]
 8012876:	2300      	movs	r3, #0
 8012878:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801287c:	e7aa      	b.n	80127d4 <_printf_i+0x148>
 801287e:	6923      	ldr	r3, [r4, #16]
 8012880:	4632      	mov	r2, r6
 8012882:	4649      	mov	r1, r9
 8012884:	4640      	mov	r0, r8
 8012886:	47d0      	blx	sl
 8012888:	3001      	adds	r0, #1
 801288a:	d0ad      	beq.n	80127e8 <_printf_i+0x15c>
 801288c:	6823      	ldr	r3, [r4, #0]
 801288e:	079b      	lsls	r3, r3, #30
 8012890:	d413      	bmi.n	80128ba <_printf_i+0x22e>
 8012892:	68e0      	ldr	r0, [r4, #12]
 8012894:	9b03      	ldr	r3, [sp, #12]
 8012896:	4298      	cmp	r0, r3
 8012898:	bfb8      	it	lt
 801289a:	4618      	movlt	r0, r3
 801289c:	e7a6      	b.n	80127ec <_printf_i+0x160>
 801289e:	2301      	movs	r3, #1
 80128a0:	4632      	mov	r2, r6
 80128a2:	4649      	mov	r1, r9
 80128a4:	4640      	mov	r0, r8
 80128a6:	47d0      	blx	sl
 80128a8:	3001      	adds	r0, #1
 80128aa:	d09d      	beq.n	80127e8 <_printf_i+0x15c>
 80128ac:	3501      	adds	r5, #1
 80128ae:	68e3      	ldr	r3, [r4, #12]
 80128b0:	9903      	ldr	r1, [sp, #12]
 80128b2:	1a5b      	subs	r3, r3, r1
 80128b4:	42ab      	cmp	r3, r5
 80128b6:	dcf2      	bgt.n	801289e <_printf_i+0x212>
 80128b8:	e7eb      	b.n	8012892 <_printf_i+0x206>
 80128ba:	2500      	movs	r5, #0
 80128bc:	f104 0619 	add.w	r6, r4, #25
 80128c0:	e7f5      	b.n	80128ae <_printf_i+0x222>
 80128c2:	bf00      	nop
 80128c4:	08014606 	.word	0x08014606
 80128c8:	08014617 	.word	0x08014617

080128cc <__sflush_r>:
 80128cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80128d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128d4:	0716      	lsls	r6, r2, #28
 80128d6:	4605      	mov	r5, r0
 80128d8:	460c      	mov	r4, r1
 80128da:	d454      	bmi.n	8012986 <__sflush_r+0xba>
 80128dc:	684b      	ldr	r3, [r1, #4]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	dc02      	bgt.n	80128e8 <__sflush_r+0x1c>
 80128e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	dd48      	ble.n	801297a <__sflush_r+0xae>
 80128e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80128ea:	2e00      	cmp	r6, #0
 80128ec:	d045      	beq.n	801297a <__sflush_r+0xae>
 80128ee:	2300      	movs	r3, #0
 80128f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80128f4:	682f      	ldr	r7, [r5, #0]
 80128f6:	6a21      	ldr	r1, [r4, #32]
 80128f8:	602b      	str	r3, [r5, #0]
 80128fa:	d030      	beq.n	801295e <__sflush_r+0x92>
 80128fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80128fe:	89a3      	ldrh	r3, [r4, #12]
 8012900:	0759      	lsls	r1, r3, #29
 8012902:	d505      	bpl.n	8012910 <__sflush_r+0x44>
 8012904:	6863      	ldr	r3, [r4, #4]
 8012906:	1ad2      	subs	r2, r2, r3
 8012908:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801290a:	b10b      	cbz	r3, 8012910 <__sflush_r+0x44>
 801290c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801290e:	1ad2      	subs	r2, r2, r3
 8012910:	2300      	movs	r3, #0
 8012912:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012914:	6a21      	ldr	r1, [r4, #32]
 8012916:	4628      	mov	r0, r5
 8012918:	47b0      	blx	r6
 801291a:	1c43      	adds	r3, r0, #1
 801291c:	89a3      	ldrh	r3, [r4, #12]
 801291e:	d106      	bne.n	801292e <__sflush_r+0x62>
 8012920:	6829      	ldr	r1, [r5, #0]
 8012922:	291d      	cmp	r1, #29
 8012924:	d82b      	bhi.n	801297e <__sflush_r+0xb2>
 8012926:	4a2a      	ldr	r2, [pc, #168]	@ (80129d0 <__sflush_r+0x104>)
 8012928:	410a      	asrs	r2, r1
 801292a:	07d6      	lsls	r6, r2, #31
 801292c:	d427      	bmi.n	801297e <__sflush_r+0xb2>
 801292e:	2200      	movs	r2, #0
 8012930:	6062      	str	r2, [r4, #4]
 8012932:	04d9      	lsls	r1, r3, #19
 8012934:	6922      	ldr	r2, [r4, #16]
 8012936:	6022      	str	r2, [r4, #0]
 8012938:	d504      	bpl.n	8012944 <__sflush_r+0x78>
 801293a:	1c42      	adds	r2, r0, #1
 801293c:	d101      	bne.n	8012942 <__sflush_r+0x76>
 801293e:	682b      	ldr	r3, [r5, #0]
 8012940:	b903      	cbnz	r3, 8012944 <__sflush_r+0x78>
 8012942:	6560      	str	r0, [r4, #84]	@ 0x54
 8012944:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012946:	602f      	str	r7, [r5, #0]
 8012948:	b1b9      	cbz	r1, 801297a <__sflush_r+0xae>
 801294a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801294e:	4299      	cmp	r1, r3
 8012950:	d002      	beq.n	8012958 <__sflush_r+0x8c>
 8012952:	4628      	mov	r0, r5
 8012954:	f7ff fbea 	bl	801212c <_free_r>
 8012958:	2300      	movs	r3, #0
 801295a:	6363      	str	r3, [r4, #52]	@ 0x34
 801295c:	e00d      	b.n	801297a <__sflush_r+0xae>
 801295e:	2301      	movs	r3, #1
 8012960:	4628      	mov	r0, r5
 8012962:	47b0      	blx	r6
 8012964:	4602      	mov	r2, r0
 8012966:	1c50      	adds	r0, r2, #1
 8012968:	d1c9      	bne.n	80128fe <__sflush_r+0x32>
 801296a:	682b      	ldr	r3, [r5, #0]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d0c6      	beq.n	80128fe <__sflush_r+0x32>
 8012970:	2b1d      	cmp	r3, #29
 8012972:	d001      	beq.n	8012978 <__sflush_r+0xac>
 8012974:	2b16      	cmp	r3, #22
 8012976:	d11e      	bne.n	80129b6 <__sflush_r+0xea>
 8012978:	602f      	str	r7, [r5, #0]
 801297a:	2000      	movs	r0, #0
 801297c:	e022      	b.n	80129c4 <__sflush_r+0xf8>
 801297e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012982:	b21b      	sxth	r3, r3
 8012984:	e01b      	b.n	80129be <__sflush_r+0xf2>
 8012986:	690f      	ldr	r7, [r1, #16]
 8012988:	2f00      	cmp	r7, #0
 801298a:	d0f6      	beq.n	801297a <__sflush_r+0xae>
 801298c:	0793      	lsls	r3, r2, #30
 801298e:	680e      	ldr	r6, [r1, #0]
 8012990:	bf08      	it	eq
 8012992:	694b      	ldreq	r3, [r1, #20]
 8012994:	600f      	str	r7, [r1, #0]
 8012996:	bf18      	it	ne
 8012998:	2300      	movne	r3, #0
 801299a:	eba6 0807 	sub.w	r8, r6, r7
 801299e:	608b      	str	r3, [r1, #8]
 80129a0:	f1b8 0f00 	cmp.w	r8, #0
 80129a4:	dde9      	ble.n	801297a <__sflush_r+0xae>
 80129a6:	6a21      	ldr	r1, [r4, #32]
 80129a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80129aa:	4643      	mov	r3, r8
 80129ac:	463a      	mov	r2, r7
 80129ae:	4628      	mov	r0, r5
 80129b0:	47b0      	blx	r6
 80129b2:	2800      	cmp	r0, #0
 80129b4:	dc08      	bgt.n	80129c8 <__sflush_r+0xfc>
 80129b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80129be:	81a3      	strh	r3, [r4, #12]
 80129c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80129c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129c8:	4407      	add	r7, r0
 80129ca:	eba8 0800 	sub.w	r8, r8, r0
 80129ce:	e7e7      	b.n	80129a0 <__sflush_r+0xd4>
 80129d0:	dfbffffe 	.word	0xdfbffffe

080129d4 <_fflush_r>:
 80129d4:	b538      	push	{r3, r4, r5, lr}
 80129d6:	690b      	ldr	r3, [r1, #16]
 80129d8:	4605      	mov	r5, r0
 80129da:	460c      	mov	r4, r1
 80129dc:	b913      	cbnz	r3, 80129e4 <_fflush_r+0x10>
 80129de:	2500      	movs	r5, #0
 80129e0:	4628      	mov	r0, r5
 80129e2:	bd38      	pop	{r3, r4, r5, pc}
 80129e4:	b118      	cbz	r0, 80129ee <_fflush_r+0x1a>
 80129e6:	6a03      	ldr	r3, [r0, #32]
 80129e8:	b90b      	cbnz	r3, 80129ee <_fflush_r+0x1a>
 80129ea:	f7ff fa0b 	bl	8011e04 <__sinit>
 80129ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d0f3      	beq.n	80129de <_fflush_r+0xa>
 80129f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80129f8:	07d0      	lsls	r0, r2, #31
 80129fa:	d404      	bmi.n	8012a06 <_fflush_r+0x32>
 80129fc:	0599      	lsls	r1, r3, #22
 80129fe:	d402      	bmi.n	8012a06 <_fflush_r+0x32>
 8012a00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a02:	f7ff fb64 	bl	80120ce <__retarget_lock_acquire_recursive>
 8012a06:	4628      	mov	r0, r5
 8012a08:	4621      	mov	r1, r4
 8012a0a:	f7ff ff5f 	bl	80128cc <__sflush_r>
 8012a0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012a10:	07da      	lsls	r2, r3, #31
 8012a12:	4605      	mov	r5, r0
 8012a14:	d4e4      	bmi.n	80129e0 <_fflush_r+0xc>
 8012a16:	89a3      	ldrh	r3, [r4, #12]
 8012a18:	059b      	lsls	r3, r3, #22
 8012a1a:	d4e1      	bmi.n	80129e0 <_fflush_r+0xc>
 8012a1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a1e:	f7ff fb57 	bl	80120d0 <__retarget_lock_release_recursive>
 8012a22:	e7dd      	b.n	80129e0 <_fflush_r+0xc>

08012a24 <fiprintf>:
 8012a24:	b40e      	push	{r1, r2, r3}
 8012a26:	b503      	push	{r0, r1, lr}
 8012a28:	4601      	mov	r1, r0
 8012a2a:	ab03      	add	r3, sp, #12
 8012a2c:	4805      	ldr	r0, [pc, #20]	@ (8012a44 <fiprintf+0x20>)
 8012a2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a32:	6800      	ldr	r0, [r0, #0]
 8012a34:	9301      	str	r3, [sp, #4]
 8012a36:	f7ff fca3 	bl	8012380 <_vfiprintf_r>
 8012a3a:	b002      	add	sp, #8
 8012a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012a40:	b003      	add	sp, #12
 8012a42:	4770      	bx	lr
 8012a44:	24000048 	.word	0x24000048

08012a48 <__swbuf_r>:
 8012a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a4a:	460e      	mov	r6, r1
 8012a4c:	4614      	mov	r4, r2
 8012a4e:	4605      	mov	r5, r0
 8012a50:	b118      	cbz	r0, 8012a5a <__swbuf_r+0x12>
 8012a52:	6a03      	ldr	r3, [r0, #32]
 8012a54:	b90b      	cbnz	r3, 8012a5a <__swbuf_r+0x12>
 8012a56:	f7ff f9d5 	bl	8011e04 <__sinit>
 8012a5a:	69a3      	ldr	r3, [r4, #24]
 8012a5c:	60a3      	str	r3, [r4, #8]
 8012a5e:	89a3      	ldrh	r3, [r4, #12]
 8012a60:	071a      	lsls	r2, r3, #28
 8012a62:	d501      	bpl.n	8012a68 <__swbuf_r+0x20>
 8012a64:	6923      	ldr	r3, [r4, #16]
 8012a66:	b943      	cbnz	r3, 8012a7a <__swbuf_r+0x32>
 8012a68:	4621      	mov	r1, r4
 8012a6a:	4628      	mov	r0, r5
 8012a6c:	f000 f82a 	bl	8012ac4 <__swsetup_r>
 8012a70:	b118      	cbz	r0, 8012a7a <__swbuf_r+0x32>
 8012a72:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012a76:	4638      	mov	r0, r7
 8012a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a7a:	6823      	ldr	r3, [r4, #0]
 8012a7c:	6922      	ldr	r2, [r4, #16]
 8012a7e:	1a98      	subs	r0, r3, r2
 8012a80:	6963      	ldr	r3, [r4, #20]
 8012a82:	b2f6      	uxtb	r6, r6
 8012a84:	4283      	cmp	r3, r0
 8012a86:	4637      	mov	r7, r6
 8012a88:	dc05      	bgt.n	8012a96 <__swbuf_r+0x4e>
 8012a8a:	4621      	mov	r1, r4
 8012a8c:	4628      	mov	r0, r5
 8012a8e:	f7ff ffa1 	bl	80129d4 <_fflush_r>
 8012a92:	2800      	cmp	r0, #0
 8012a94:	d1ed      	bne.n	8012a72 <__swbuf_r+0x2a>
 8012a96:	68a3      	ldr	r3, [r4, #8]
 8012a98:	3b01      	subs	r3, #1
 8012a9a:	60a3      	str	r3, [r4, #8]
 8012a9c:	6823      	ldr	r3, [r4, #0]
 8012a9e:	1c5a      	adds	r2, r3, #1
 8012aa0:	6022      	str	r2, [r4, #0]
 8012aa2:	701e      	strb	r6, [r3, #0]
 8012aa4:	6962      	ldr	r2, [r4, #20]
 8012aa6:	1c43      	adds	r3, r0, #1
 8012aa8:	429a      	cmp	r2, r3
 8012aaa:	d004      	beq.n	8012ab6 <__swbuf_r+0x6e>
 8012aac:	89a3      	ldrh	r3, [r4, #12]
 8012aae:	07db      	lsls	r3, r3, #31
 8012ab0:	d5e1      	bpl.n	8012a76 <__swbuf_r+0x2e>
 8012ab2:	2e0a      	cmp	r6, #10
 8012ab4:	d1df      	bne.n	8012a76 <__swbuf_r+0x2e>
 8012ab6:	4621      	mov	r1, r4
 8012ab8:	4628      	mov	r0, r5
 8012aba:	f7ff ff8b 	bl	80129d4 <_fflush_r>
 8012abe:	2800      	cmp	r0, #0
 8012ac0:	d0d9      	beq.n	8012a76 <__swbuf_r+0x2e>
 8012ac2:	e7d6      	b.n	8012a72 <__swbuf_r+0x2a>

08012ac4 <__swsetup_r>:
 8012ac4:	b538      	push	{r3, r4, r5, lr}
 8012ac6:	4b29      	ldr	r3, [pc, #164]	@ (8012b6c <__swsetup_r+0xa8>)
 8012ac8:	4605      	mov	r5, r0
 8012aca:	6818      	ldr	r0, [r3, #0]
 8012acc:	460c      	mov	r4, r1
 8012ace:	b118      	cbz	r0, 8012ad8 <__swsetup_r+0x14>
 8012ad0:	6a03      	ldr	r3, [r0, #32]
 8012ad2:	b90b      	cbnz	r3, 8012ad8 <__swsetup_r+0x14>
 8012ad4:	f7ff f996 	bl	8011e04 <__sinit>
 8012ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012adc:	0719      	lsls	r1, r3, #28
 8012ade:	d422      	bmi.n	8012b26 <__swsetup_r+0x62>
 8012ae0:	06da      	lsls	r2, r3, #27
 8012ae2:	d407      	bmi.n	8012af4 <__swsetup_r+0x30>
 8012ae4:	2209      	movs	r2, #9
 8012ae6:	602a      	str	r2, [r5, #0]
 8012ae8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012aec:	81a3      	strh	r3, [r4, #12]
 8012aee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012af2:	e033      	b.n	8012b5c <__swsetup_r+0x98>
 8012af4:	0758      	lsls	r0, r3, #29
 8012af6:	d512      	bpl.n	8012b1e <__swsetup_r+0x5a>
 8012af8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012afa:	b141      	cbz	r1, 8012b0e <__swsetup_r+0x4a>
 8012afc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012b00:	4299      	cmp	r1, r3
 8012b02:	d002      	beq.n	8012b0a <__swsetup_r+0x46>
 8012b04:	4628      	mov	r0, r5
 8012b06:	f7ff fb11 	bl	801212c <_free_r>
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8012b0e:	89a3      	ldrh	r3, [r4, #12]
 8012b10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012b14:	81a3      	strh	r3, [r4, #12]
 8012b16:	2300      	movs	r3, #0
 8012b18:	6063      	str	r3, [r4, #4]
 8012b1a:	6923      	ldr	r3, [r4, #16]
 8012b1c:	6023      	str	r3, [r4, #0]
 8012b1e:	89a3      	ldrh	r3, [r4, #12]
 8012b20:	f043 0308 	orr.w	r3, r3, #8
 8012b24:	81a3      	strh	r3, [r4, #12]
 8012b26:	6923      	ldr	r3, [r4, #16]
 8012b28:	b94b      	cbnz	r3, 8012b3e <__swsetup_r+0x7a>
 8012b2a:	89a3      	ldrh	r3, [r4, #12]
 8012b2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012b30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012b34:	d003      	beq.n	8012b3e <__swsetup_r+0x7a>
 8012b36:	4621      	mov	r1, r4
 8012b38:	4628      	mov	r0, r5
 8012b3a:	f000 f856 	bl	8012bea <__smakebuf_r>
 8012b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b42:	f013 0201 	ands.w	r2, r3, #1
 8012b46:	d00a      	beq.n	8012b5e <__swsetup_r+0x9a>
 8012b48:	2200      	movs	r2, #0
 8012b4a:	60a2      	str	r2, [r4, #8]
 8012b4c:	6962      	ldr	r2, [r4, #20]
 8012b4e:	4252      	negs	r2, r2
 8012b50:	61a2      	str	r2, [r4, #24]
 8012b52:	6922      	ldr	r2, [r4, #16]
 8012b54:	b942      	cbnz	r2, 8012b68 <__swsetup_r+0xa4>
 8012b56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012b5a:	d1c5      	bne.n	8012ae8 <__swsetup_r+0x24>
 8012b5c:	bd38      	pop	{r3, r4, r5, pc}
 8012b5e:	0799      	lsls	r1, r3, #30
 8012b60:	bf58      	it	pl
 8012b62:	6962      	ldrpl	r2, [r4, #20]
 8012b64:	60a2      	str	r2, [r4, #8]
 8012b66:	e7f4      	b.n	8012b52 <__swsetup_r+0x8e>
 8012b68:	2000      	movs	r0, #0
 8012b6a:	e7f7      	b.n	8012b5c <__swsetup_r+0x98>
 8012b6c:	24000048 	.word	0x24000048

08012b70 <_sbrk_r>:
 8012b70:	b538      	push	{r3, r4, r5, lr}
 8012b72:	4d06      	ldr	r5, [pc, #24]	@ (8012b8c <_sbrk_r+0x1c>)
 8012b74:	2300      	movs	r3, #0
 8012b76:	4604      	mov	r4, r0
 8012b78:	4608      	mov	r0, r1
 8012b7a:	602b      	str	r3, [r5, #0]
 8012b7c:	f7ee faf0 	bl	8001160 <_sbrk>
 8012b80:	1c43      	adds	r3, r0, #1
 8012b82:	d102      	bne.n	8012b8a <_sbrk_r+0x1a>
 8012b84:	682b      	ldr	r3, [r5, #0]
 8012b86:	b103      	cbz	r3, 8012b8a <_sbrk_r+0x1a>
 8012b88:	6023      	str	r3, [r4, #0]
 8012b8a:	bd38      	pop	{r3, r4, r5, pc}
 8012b8c:	2406d09c 	.word	0x2406d09c

08012b90 <abort>:
 8012b90:	b508      	push	{r3, lr}
 8012b92:	2006      	movs	r0, #6
 8012b94:	f000 f88e 	bl	8012cb4 <raise>
 8012b98:	2001      	movs	r0, #1
 8012b9a:	f7ee fa69 	bl	8001070 <_exit>

08012b9e <__swhatbuf_r>:
 8012b9e:	b570      	push	{r4, r5, r6, lr}
 8012ba0:	460c      	mov	r4, r1
 8012ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ba6:	2900      	cmp	r1, #0
 8012ba8:	b096      	sub	sp, #88	@ 0x58
 8012baa:	4615      	mov	r5, r2
 8012bac:	461e      	mov	r6, r3
 8012bae:	da0d      	bge.n	8012bcc <__swhatbuf_r+0x2e>
 8012bb0:	89a3      	ldrh	r3, [r4, #12]
 8012bb2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012bb6:	f04f 0100 	mov.w	r1, #0
 8012bba:	bf14      	ite	ne
 8012bbc:	2340      	movne	r3, #64	@ 0x40
 8012bbe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012bc2:	2000      	movs	r0, #0
 8012bc4:	6031      	str	r1, [r6, #0]
 8012bc6:	602b      	str	r3, [r5, #0]
 8012bc8:	b016      	add	sp, #88	@ 0x58
 8012bca:	bd70      	pop	{r4, r5, r6, pc}
 8012bcc:	466a      	mov	r2, sp
 8012bce:	f000 f879 	bl	8012cc4 <_fstat_r>
 8012bd2:	2800      	cmp	r0, #0
 8012bd4:	dbec      	blt.n	8012bb0 <__swhatbuf_r+0x12>
 8012bd6:	9901      	ldr	r1, [sp, #4]
 8012bd8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012bdc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012be0:	4259      	negs	r1, r3
 8012be2:	4159      	adcs	r1, r3
 8012be4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012be8:	e7eb      	b.n	8012bc2 <__swhatbuf_r+0x24>

08012bea <__smakebuf_r>:
 8012bea:	898b      	ldrh	r3, [r1, #12]
 8012bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012bee:	079d      	lsls	r5, r3, #30
 8012bf0:	4606      	mov	r6, r0
 8012bf2:	460c      	mov	r4, r1
 8012bf4:	d507      	bpl.n	8012c06 <__smakebuf_r+0x1c>
 8012bf6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012bfa:	6023      	str	r3, [r4, #0]
 8012bfc:	6123      	str	r3, [r4, #16]
 8012bfe:	2301      	movs	r3, #1
 8012c00:	6163      	str	r3, [r4, #20]
 8012c02:	b003      	add	sp, #12
 8012c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c06:	ab01      	add	r3, sp, #4
 8012c08:	466a      	mov	r2, sp
 8012c0a:	f7ff ffc8 	bl	8012b9e <__swhatbuf_r>
 8012c0e:	9f00      	ldr	r7, [sp, #0]
 8012c10:	4605      	mov	r5, r0
 8012c12:	4639      	mov	r1, r7
 8012c14:	4630      	mov	r0, r6
 8012c16:	f7ff fafd 	bl	8012214 <_malloc_r>
 8012c1a:	b948      	cbnz	r0, 8012c30 <__smakebuf_r+0x46>
 8012c1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c20:	059a      	lsls	r2, r3, #22
 8012c22:	d4ee      	bmi.n	8012c02 <__smakebuf_r+0x18>
 8012c24:	f023 0303 	bic.w	r3, r3, #3
 8012c28:	f043 0302 	orr.w	r3, r3, #2
 8012c2c:	81a3      	strh	r3, [r4, #12]
 8012c2e:	e7e2      	b.n	8012bf6 <__smakebuf_r+0xc>
 8012c30:	89a3      	ldrh	r3, [r4, #12]
 8012c32:	6020      	str	r0, [r4, #0]
 8012c34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c38:	81a3      	strh	r3, [r4, #12]
 8012c3a:	9b01      	ldr	r3, [sp, #4]
 8012c3c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012c40:	b15b      	cbz	r3, 8012c5a <__smakebuf_r+0x70>
 8012c42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c46:	4630      	mov	r0, r6
 8012c48:	f000 f84e 	bl	8012ce8 <_isatty_r>
 8012c4c:	b128      	cbz	r0, 8012c5a <__smakebuf_r+0x70>
 8012c4e:	89a3      	ldrh	r3, [r4, #12]
 8012c50:	f023 0303 	bic.w	r3, r3, #3
 8012c54:	f043 0301 	orr.w	r3, r3, #1
 8012c58:	81a3      	strh	r3, [r4, #12]
 8012c5a:	89a3      	ldrh	r3, [r4, #12]
 8012c5c:	431d      	orrs	r5, r3
 8012c5e:	81a5      	strh	r5, [r4, #12]
 8012c60:	e7cf      	b.n	8012c02 <__smakebuf_r+0x18>

08012c62 <_raise_r>:
 8012c62:	291f      	cmp	r1, #31
 8012c64:	b538      	push	{r3, r4, r5, lr}
 8012c66:	4605      	mov	r5, r0
 8012c68:	460c      	mov	r4, r1
 8012c6a:	d904      	bls.n	8012c76 <_raise_r+0x14>
 8012c6c:	2316      	movs	r3, #22
 8012c6e:	6003      	str	r3, [r0, #0]
 8012c70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c74:	bd38      	pop	{r3, r4, r5, pc}
 8012c76:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012c78:	b112      	cbz	r2, 8012c80 <_raise_r+0x1e>
 8012c7a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012c7e:	b94b      	cbnz	r3, 8012c94 <_raise_r+0x32>
 8012c80:	4628      	mov	r0, r5
 8012c82:	f000 f853 	bl	8012d2c <_getpid_r>
 8012c86:	4622      	mov	r2, r4
 8012c88:	4601      	mov	r1, r0
 8012c8a:	4628      	mov	r0, r5
 8012c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c90:	f000 b83a 	b.w	8012d08 <_kill_r>
 8012c94:	2b01      	cmp	r3, #1
 8012c96:	d00a      	beq.n	8012cae <_raise_r+0x4c>
 8012c98:	1c59      	adds	r1, r3, #1
 8012c9a:	d103      	bne.n	8012ca4 <_raise_r+0x42>
 8012c9c:	2316      	movs	r3, #22
 8012c9e:	6003      	str	r3, [r0, #0]
 8012ca0:	2001      	movs	r0, #1
 8012ca2:	e7e7      	b.n	8012c74 <_raise_r+0x12>
 8012ca4:	2100      	movs	r1, #0
 8012ca6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012caa:	4620      	mov	r0, r4
 8012cac:	4798      	blx	r3
 8012cae:	2000      	movs	r0, #0
 8012cb0:	e7e0      	b.n	8012c74 <_raise_r+0x12>
	...

08012cb4 <raise>:
 8012cb4:	4b02      	ldr	r3, [pc, #8]	@ (8012cc0 <raise+0xc>)
 8012cb6:	4601      	mov	r1, r0
 8012cb8:	6818      	ldr	r0, [r3, #0]
 8012cba:	f7ff bfd2 	b.w	8012c62 <_raise_r>
 8012cbe:	bf00      	nop
 8012cc0:	24000048 	.word	0x24000048

08012cc4 <_fstat_r>:
 8012cc4:	b538      	push	{r3, r4, r5, lr}
 8012cc6:	4d07      	ldr	r5, [pc, #28]	@ (8012ce4 <_fstat_r+0x20>)
 8012cc8:	2300      	movs	r3, #0
 8012cca:	4604      	mov	r4, r0
 8012ccc:	4608      	mov	r0, r1
 8012cce:	4611      	mov	r1, r2
 8012cd0:	602b      	str	r3, [r5, #0]
 8012cd2:	f7ee fa1d 	bl	8001110 <_fstat>
 8012cd6:	1c43      	adds	r3, r0, #1
 8012cd8:	d102      	bne.n	8012ce0 <_fstat_r+0x1c>
 8012cda:	682b      	ldr	r3, [r5, #0]
 8012cdc:	b103      	cbz	r3, 8012ce0 <_fstat_r+0x1c>
 8012cde:	6023      	str	r3, [r4, #0]
 8012ce0:	bd38      	pop	{r3, r4, r5, pc}
 8012ce2:	bf00      	nop
 8012ce4:	2406d09c 	.word	0x2406d09c

08012ce8 <_isatty_r>:
 8012ce8:	b538      	push	{r3, r4, r5, lr}
 8012cea:	4d06      	ldr	r5, [pc, #24]	@ (8012d04 <_isatty_r+0x1c>)
 8012cec:	2300      	movs	r3, #0
 8012cee:	4604      	mov	r4, r0
 8012cf0:	4608      	mov	r0, r1
 8012cf2:	602b      	str	r3, [r5, #0]
 8012cf4:	f7ee fa1c 	bl	8001130 <_isatty>
 8012cf8:	1c43      	adds	r3, r0, #1
 8012cfa:	d102      	bne.n	8012d02 <_isatty_r+0x1a>
 8012cfc:	682b      	ldr	r3, [r5, #0]
 8012cfe:	b103      	cbz	r3, 8012d02 <_isatty_r+0x1a>
 8012d00:	6023      	str	r3, [r4, #0]
 8012d02:	bd38      	pop	{r3, r4, r5, pc}
 8012d04:	2406d09c 	.word	0x2406d09c

08012d08 <_kill_r>:
 8012d08:	b538      	push	{r3, r4, r5, lr}
 8012d0a:	4d07      	ldr	r5, [pc, #28]	@ (8012d28 <_kill_r+0x20>)
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	4604      	mov	r4, r0
 8012d10:	4608      	mov	r0, r1
 8012d12:	4611      	mov	r1, r2
 8012d14:	602b      	str	r3, [r5, #0]
 8012d16:	f7ee f999 	bl	800104c <_kill>
 8012d1a:	1c43      	adds	r3, r0, #1
 8012d1c:	d102      	bne.n	8012d24 <_kill_r+0x1c>
 8012d1e:	682b      	ldr	r3, [r5, #0]
 8012d20:	b103      	cbz	r3, 8012d24 <_kill_r+0x1c>
 8012d22:	6023      	str	r3, [r4, #0]
 8012d24:	bd38      	pop	{r3, r4, r5, pc}
 8012d26:	bf00      	nop
 8012d28:	2406d09c 	.word	0x2406d09c

08012d2c <_getpid_r>:
 8012d2c:	f7ee b986 	b.w	800103c <_getpid>

08012d30 <_init>:
 8012d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d32:	bf00      	nop
 8012d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d36:	bc08      	pop	{r3}
 8012d38:	469e      	mov	lr, r3
 8012d3a:	4770      	bx	lr

08012d3c <_fini>:
 8012d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d3e:	bf00      	nop
 8012d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d42:	bc08      	pop	{r3}
 8012d44:	469e      	mov	lr, r3
 8012d46:	4770      	bx	lr
