
Aula2_Ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000642c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080066c4  080066c4  000076c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080066fc  080066fc  000076fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006704  08006704  00007704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006708  08006708  00007708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800670c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  0800671c  00008010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  0800677c  00008070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  240000d0  080067dc  000080d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000758  080067dc  00008758  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017746  00000000  00000000  000080fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e27  00000000  00000000  0001f844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00022670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c0b  00000000  00000000  00023620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038578  00000000  00000000  0002422b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b91  00000000  00000000  0005c7a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00160559  00000000  00000000  00072334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d288d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000415c  00000000  00000000  001d28d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001d6a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080066ac 	.word	0x080066ac

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	080066ac 	.word	0x080066ac

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000648 <MX_ETH_Init+0x80>)
 80005ce:	4a1f      	ldr	r2, [pc, #124]	@ (800064c <MX_ETH_Init+0x84>)
 80005d0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000650 <MX_ETH_Init+0x88>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000650 <MX_ETH_Init+0x88>)
 80005da:	2280      	movs	r2, #128	@ 0x80
 80005dc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005de:	4b1c      	ldr	r3, [pc, #112]	@ (8000650 <MX_ETH_Init+0x88>)
 80005e0:	22e1      	movs	r2, #225	@ 0xe1
 80005e2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000650 <MX_ETH_Init+0x88>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005ea:	4b19      	ldr	r3, [pc, #100]	@ (8000650 <MX_ETH_Init+0x88>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80005f0:	4b17      	ldr	r3, [pc, #92]	@ (8000650 <MX_ETH_Init+0x88>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80005f6:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <MX_ETH_Init+0x80>)
 80005f8:	4a15      	ldr	r2, [pc, #84]	@ (8000650 <MX_ETH_Init+0x88>)
 80005fa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <MX_ETH_Init+0x80>)
 80005fe:	2201      	movs	r2, #1
 8000600:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000602:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <MX_ETH_Init+0x80>)
 8000604:	4a13      	ldr	r2, [pc, #76]	@ (8000654 <MX_ETH_Init+0x8c>)
 8000606:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000608:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <MX_ETH_Init+0x80>)
 800060a:	4a13      	ldr	r2, [pc, #76]	@ (8000658 <MX_ETH_Init+0x90>)
 800060c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800060e:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <MX_ETH_Init+0x80>)
 8000610:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000614:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000616:	480c      	ldr	r0, [pc, #48]	@ (8000648 <MX_ETH_Init+0x80>)
 8000618:	f000 fe96 	bl	8001348 <HAL_ETH_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000622:	f000 fa71 	bl	8000b08 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000626:	2238      	movs	r2, #56	@ 0x38
 8000628:	2100      	movs	r1, #0
 800062a:	480c      	ldr	r0, [pc, #48]	@ (800065c <MX_ETH_Init+0x94>)
 800062c:	f006 f811 	bl	8006652 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000630:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <MX_ETH_Init+0x94>)
 8000632:	2221      	movs	r2, #33	@ 0x21
 8000634:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000636:	4b09      	ldr	r3, [pc, #36]	@ (800065c <MX_ETH_Init+0x94>)
 8000638:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800063c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800063e:	4b07      	ldr	r3, [pc, #28]	@ (800065c <MX_ETH_Init+0x94>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	24000124 	.word	0x24000124
 800064c:	40028000 	.word	0x40028000
 8000650:	240001d4 	.word	0x240001d4
 8000654:	24000070 	.word	0x24000070
 8000658:	24000010 	.word	0x24000010
 800065c:	240000ec 	.word	0x240000ec

08000660 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08e      	sub	sp, #56	@ 0x38
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a59      	ldr	r2, [pc, #356]	@ (80007e4 <HAL_ETH_MspInit+0x184>)
 800067e:	4293      	cmp	r3, r2
 8000680:	f040 80ab 	bne.w	80007da <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000684:	4b58      	ldr	r3, [pc, #352]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000686:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800068a:	4a57      	ldr	r2, [pc, #348]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800068c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000690:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000694:	4b54      	ldr	r3, [pc, #336]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000696:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800069a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800069e:	623b      	str	r3, [r7, #32]
 80006a0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80006a2:	4b51      	ldr	r3, [pc, #324]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006a8:	4a4f      	ldr	r2, [pc, #316]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006b2:	4b4d      	ldr	r3, [pc, #308]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006bc:	61fb      	str	r3, [r7, #28]
 80006be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80006c0:	4b49      	ldr	r3, [pc, #292]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006c6:	4a48      	ldr	r2, [pc, #288]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006cc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006d0:	4b45      	ldr	r3, [pc, #276]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006da:	61bb      	str	r3, [r7, #24]
 80006dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b42      	ldr	r3, [pc, #264]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e4:	4a40      	ldr	r2, [pc, #256]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006e6:	f043 0304 	orr.w	r3, r3, #4
 80006ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006ee:	4b3e      	ldr	r3, [pc, #248]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	4b3a      	ldr	r3, [pc, #232]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000702:	4a39      	ldr	r2, [pc, #228]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800070c:	4b36      	ldr	r3, [pc, #216]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800070e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	4b33      	ldr	r3, [pc, #204]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800071c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000720:	4a31      	ldr	r2, [pc, #196]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000722:	f043 0302 	orr.w	r3, r3, #2
 8000726:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800072a:	4b2f      	ldr	r3, [pc, #188]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000730:	f003 0302 	and.w	r3, r3, #2
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000738:	4b2b      	ldr	r3, [pc, #172]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800073a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073e:	4a2a      	ldr	r2, [pc, #168]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000740:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000744:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000748:	4b27      	ldr	r3, [pc, #156]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800074a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800074e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000756:	2332      	movs	r3, #50	@ 0x32
 8000758:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000766:	230b      	movs	r3, #11
 8000768:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076e:	4619      	mov	r1, r3
 8000770:	481e      	ldr	r0, [pc, #120]	@ (80007ec <HAL_ETH_MspInit+0x18c>)
 8000772:	f001 fa1d 	bl	8001bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000776:	2386      	movs	r3, #134	@ 0x86
 8000778:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000786:	230b      	movs	r3, #11
 8000788:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078e:	4619      	mov	r1, r3
 8000790:	4817      	ldr	r0, [pc, #92]	@ (80007f0 <HAL_ETH_MspInit+0x190>)
 8000792:	f001 fa0d 	bl	8001bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000796:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079c:	2302      	movs	r3, #2
 800079e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a8:	230b      	movs	r3, #11
 80007aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b0:	4619      	mov	r1, r3
 80007b2:	4810      	ldr	r0, [pc, #64]	@ (80007f4 <HAL_ETH_MspInit+0x194>)
 80007b4:	f001 f9fc 	bl	8001bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80007b8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	2302      	movs	r3, #2
 80007c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ca:	230b      	movs	r3, #11
 80007cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d2:	4619      	mov	r1, r3
 80007d4:	4808      	ldr	r0, [pc, #32]	@ (80007f8 <HAL_ETH_MspInit+0x198>)
 80007d6:	f001 f9eb 	bl	8001bb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007da:	bf00      	nop
 80007dc:	3738      	adds	r7, #56	@ 0x38
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40028000 	.word	0x40028000
 80007e8:	58024400 	.word	0x58024400
 80007ec:	58020800 	.word	0x58020800
 80007f0:	58020000 	.word	0x58020000
 80007f4:	58020400 	.word	0x58020400
 80007f8:	58021800 	.word	0x58021800

080007fc <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	@ 0x30
 8000800:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b62      	ldr	r3, [pc, #392]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000818:	4a60      	ldr	r2, [pc, #384]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800081a:	f043 0304 	orr.w	r3, r3, #4
 800081e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000822:	4b5e      	ldr	r3, [pc, #376]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000828:	f003 0304 	and.w	r3, r3, #4
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000830:	4b5a      	ldr	r3, [pc, #360]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000836:	4a59      	ldr	r2, [pc, #356]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800083c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000840:	4b56      	ldr	r3, [pc, #344]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b53      	ldr	r3, [pc, #332]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000854:	4a51      	ldr	r2, [pc, #324]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800085e:	4b4f      	ldr	r3, [pc, #316]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086c:	4b4b      	ldr	r3, [pc, #300]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800086e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000872:	4a4a      	ldr	r2, [pc, #296]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800087c:	4b47      	ldr	r3, [pc, #284]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800087e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088a:	4b44      	ldr	r3, [pc, #272]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000890:	4a42      	ldr	r2, [pc, #264]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000892:	f043 0308 	orr.w	r3, r3, #8
 8000896:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800089a:	4b40      	ldr	r3, [pc, #256]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a0:	f003 0308 	and.w	r3, r3, #8
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a8:	4b3c      	ldr	r3, [pc, #240]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ae:	4a3b      	ldr	r2, [pc, #236]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008b8:	4b38      	ldr	r3, [pc, #224]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c6:	4b35      	ldr	r3, [pc, #212]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008cc:	4a33      	ldr	r2, [pc, #204]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008ce:	f043 0310 	orr.w	r3, r3, #16
 80008d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008d6:	4b31      	ldr	r3, [pc, #196]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008dc:	f003 0310 	and.w	r3, r3, #16
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f244 0101 	movw	r1, #16385	@ 0x4001
 80008ea:	482d      	ldr	r0, [pc, #180]	@ (80009a0 <MX_GPIO_Init+0x1a4>)
 80008ec:	f001 fb28 	bl	8001f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008f6:	482b      	ldr	r0, [pc, #172]	@ (80009a4 <MX_GPIO_Init+0x1a8>)
 80008f8:	f001 fb22 	bl	8001f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2102      	movs	r1, #2
 8000900:	4829      	ldr	r0, [pc, #164]	@ (80009a8 <MX_GPIO_Init+0x1ac>)
 8000902:	f001 fb1d 	bl	8001f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000906:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4824      	ldr	r0, [pc, #144]	@ (80009ac <MX_GPIO_Init+0x1b0>)
 800091c:	f001 f948 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000920:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4819      	ldr	r0, [pc, #100]	@ (80009a0 <MX_GPIO_Init+0x1a4>)
 800093a:	f001 f939 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800093e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4813      	ldr	r0, [pc, #76]	@ (80009a4 <MX_GPIO_Init+0x1a8>)
 8000958:	f001 f92a 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800095c:	2380      	movs	r3, #128	@ 0x80
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000960:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	480f      	ldr	r0, [pc, #60]	@ (80009b0 <MX_GPIO_Init+0x1b4>)
 8000972:	f001 f91d 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000976:	2302      	movs	r3, #2
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4806      	ldr	r0, [pc, #24]	@ (80009a8 <MX_GPIO_Init+0x1ac>)
 800098e:	f001 f90f 	bl	8001bb0 <HAL_GPIO_Init>

}
 8000992:	bf00      	nop
 8000994:	3730      	adds	r7, #48	@ 0x30
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	58024400 	.word	0x58024400
 80009a0:	58020400 	.word	0x58020400
 80009a4:	58020c00 	.word	0x58020c00
 80009a8:	58021000 	.word	0x58021000
 80009ac:	58020800 	.word	0x58020800
 80009b0:	58021800 	.word	0x58021800

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b8:	f000 fb0c 	bl	8000fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009bc:	f000 f824 	bl	8000a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c0:	f7ff ff1c 	bl	80007fc <MX_GPIO_Init>
  MX_ETH_Init();
 80009c4:	f7ff fe00 	bl	80005c8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009c8:	f000 f976 	bl	8000cb8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009cc:	f000 fa2a 	bl	8000e24 <MX_USB_OTG_FS_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Reading B1 state
    ucB1State = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80009d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d4:	4809      	ldr	r0, [pc, #36]	@ (80009fc <main+0x48>)
 80009d6:	f001 fa9b 	bl	8001f10 <HAL_GPIO_ReadPin>
 80009da:	4603      	mov	r3, r0
 80009dc:	461a      	mov	r2, r3
 80009de:	4b08      	ldr	r3, [pc, #32]	@ (8000a00 <main+0x4c>)
 80009e0:	701a      	strb	r2, [r3, #0]

	// Writing B1 state in L2
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, ucB1State);
 80009e2:	4b07      	ldr	r3, [pc, #28]	@ (8000a00 <main+0x4c>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	2102      	movs	r1, #2
 80009ea:	4806      	ldr	r0, [pc, #24]	@ (8000a04 <main+0x50>)
 80009ec:	f001 faa8 	bl	8001f40 <HAL_GPIO_WritePin>

	// Anti-debounce delay
	HAL_Delay(50);
 80009f0:	2032      	movs	r0, #50	@ 0x32
 80009f2:	f000 fb81 	bl	80010f8 <HAL_Delay>
    ucB1State = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80009f6:	bf00      	nop
 80009f8:	e7ea      	b.n	80009d0 <main+0x1c>
 80009fa:	bf00      	nop
 80009fc:	58020800 	.word	0x58020800
 8000a00:	240001da 	.word	0x240001da
 8000a04:	58021000 	.word	0x58021000

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b09c      	sub	sp, #112	@ 0x70
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a12:	224c      	movs	r2, #76	@ 0x4c
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f005 fe1b 	bl	8006652 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2220      	movs	r2, #32
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f005 fe15 	bl	8006652 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a28:	2002      	movs	r0, #2
 8000a2a:	f001 fbd3 	bl	80021d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4b33      	ldr	r3, [pc, #204]	@ (8000b00 <SystemClock_Config+0xf8>)
 8000a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a36:	4a32      	ldr	r2, [pc, #200]	@ (8000b00 <SystemClock_Config+0xf8>)
 8000a38:	f023 0301 	bic.w	r3, r3, #1
 8000a3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a3e:	4b30      	ldr	r3, [pc, #192]	@ (8000b00 <SystemClock_Config+0xf8>)
 8000a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	4b2e      	ldr	r3, [pc, #184]	@ (8000b04 <SystemClock_Config+0xfc>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a50:	4a2c      	ldr	r2, [pc, #176]	@ (8000b04 <SystemClock_Config+0xfc>)
 8000a52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a56:	6193      	str	r3, [r2, #24]
 8000a58:	4b2a      	ldr	r3, [pc, #168]	@ (8000b04 <SystemClock_Config+0xfc>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a64:	bf00      	nop
 8000a66:	4b27      	ldr	r3, [pc, #156]	@ (8000b04 <SystemClock_Config+0xfc>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a72:	d1f8      	bne.n	8000a66 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000a74:	2303      	movs	r3, #3
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a78:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a82:	2340      	movs	r3, #64	@ 0x40
 8000a84:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a86:	2302      	movs	r3, #2
 8000a88:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000a92:	2318      	movs	r3, #24
 8000a94:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a96:	2302      	movs	r3, #2
 8000a98:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000aa2:	230c      	movs	r3, #12
 8000aa4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 fbd8 	bl	8002268 <HAL_RCC_OscConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000abe:	f000 f823 	bl	8000b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac2:	233f      	movs	r3, #63	@ 0x3f
 8000ac4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 f818 	bl	8002b1c <HAL_RCC_ClockConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000af2:	f000 f809 	bl	8000b08 <Error_Handler>
  }
}
 8000af6:	bf00      	nop
 8000af8:	3770      	adds	r7, #112	@ 0x70
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	58000400 	.word	0x58000400
 8000b04:	58024800 	.word	0x58024800

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
}
 8000b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <Error_Handler+0x8>

08000b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b44 <HAL_MspInit+0x30>)
 8000b1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b20:	4a08      	ldr	r2, [pc, #32]	@ (8000b44 <HAL_MspInit+0x30>)
 8000b22:	f043 0302 	orr.w	r3, r3, #2
 8000b26:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b2a:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <HAL_MspInit+0x30>)
 8000b2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b30:	f003 0302 	and.w	r3, r3, #2
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	58024400 	.word	0x58024400

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <NMI_Handler+0x4>

08000b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <MemManage_Handler+0x4>

08000b60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9e:	f000 fa8b 	bl	80010b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bac:	4b37      	ldr	r3, [pc, #220]	@ (8000c8c <SystemInit+0xe4>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bb2:	4a36      	ldr	r2, [pc, #216]	@ (8000c8c <SystemInit+0xe4>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bbc:	4b34      	ldr	r3, [pc, #208]	@ (8000c90 <SystemInit+0xe8>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f003 030f 	and.w	r3, r3, #15
 8000bc4:	2b06      	cmp	r3, #6
 8000bc6:	d807      	bhi.n	8000bd8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bc8:	4b31      	ldr	r3, [pc, #196]	@ (8000c90 <SystemInit+0xe8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f023 030f 	bic.w	r3, r3, #15
 8000bd0:	4a2f      	ldr	r2, [pc, #188]	@ (8000c90 <SystemInit+0xe8>)
 8000bd2:	f043 0307 	orr.w	r3, r3, #7
 8000bd6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bd8:	4b2e      	ldr	r3, [pc, #184]	@ (8000c94 <SystemInit+0xec>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a2d      	ldr	r2, [pc, #180]	@ (8000c94 <SystemInit+0xec>)
 8000bde:	f043 0301 	orr.w	r3, r3, #1
 8000be2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000be4:	4b2b      	ldr	r3, [pc, #172]	@ (8000c94 <SystemInit+0xec>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bea:	4b2a      	ldr	r3, [pc, #168]	@ (8000c94 <SystemInit+0xec>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	4929      	ldr	r1, [pc, #164]	@ (8000c94 <SystemInit+0xec>)
 8000bf0:	4b29      	ldr	r3, [pc, #164]	@ (8000c98 <SystemInit+0xf0>)
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bf6:	4b26      	ldr	r3, [pc, #152]	@ (8000c90 <SystemInit+0xe8>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0308 	and.w	r3, r3, #8
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d007      	beq.n	8000c12 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c02:	4b23      	ldr	r3, [pc, #140]	@ (8000c90 <SystemInit+0xe8>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f023 030f 	bic.w	r3, r3, #15
 8000c0a:	4a21      	ldr	r2, [pc, #132]	@ (8000c90 <SystemInit+0xe8>)
 8000c0c:	f043 0307 	orr.w	r3, r3, #7
 8000c10:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c12:	4b20      	ldr	r3, [pc, #128]	@ (8000c94 <SystemInit+0xec>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c18:	4b1e      	ldr	r3, [pc, #120]	@ (8000c94 <SystemInit+0xec>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c94 <SystemInit+0xec>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c24:	4b1b      	ldr	r3, [pc, #108]	@ (8000c94 <SystemInit+0xec>)
 8000c26:	4a1d      	ldr	r2, [pc, #116]	@ (8000c9c <SystemInit+0xf4>)
 8000c28:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c94 <SystemInit+0xec>)
 8000c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca0 <SystemInit+0xf8>)
 8000c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c30:	4b18      	ldr	r3, [pc, #96]	@ (8000c94 <SystemInit+0xec>)
 8000c32:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca4 <SystemInit+0xfc>)
 8000c34:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c36:	4b17      	ldr	r3, [pc, #92]	@ (8000c94 <SystemInit+0xec>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c3c:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <SystemInit+0xec>)
 8000c3e:	4a19      	ldr	r2, [pc, #100]	@ (8000ca4 <SystemInit+0xfc>)
 8000c40:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c42:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <SystemInit+0xec>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c48:	4b12      	ldr	r3, [pc, #72]	@ (8000c94 <SystemInit+0xec>)
 8000c4a:	4a16      	ldr	r2, [pc, #88]	@ (8000ca4 <SystemInit+0xfc>)
 8000c4c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <SystemInit+0xec>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	@ (8000c94 <SystemInit+0xec>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0e      	ldr	r2, [pc, #56]	@ (8000c94 <SystemInit+0xec>)
 8000c5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <SystemInit+0xec>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c66:	4b10      	ldr	r3, [pc, #64]	@ (8000ca8 <SystemInit+0x100>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <SystemInit+0x104>)
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c72:	d202      	bcs.n	8000c7a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c74:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <SystemInit+0x108>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <SystemInit+0x10c>)
 8000c7c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c80:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000ed00 	.word	0xe000ed00
 8000c90:	52002000 	.word	0x52002000
 8000c94:	58024400 	.word	0x58024400
 8000c98:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c9c:	02020200 	.word	0x02020200
 8000ca0:	01ff0000 	.word	0x01ff0000
 8000ca4:	01010280 	.word	0x01010280
 8000ca8:	5c001000 	.word	0x5c001000
 8000cac:	ffff0000 	.word	0xffff0000
 8000cb0:	51008108 	.word	0x51008108
 8000cb4:	52004000 	.word	0x52004000

08000cb8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cbc:	4b22      	ldr	r3, [pc, #136]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000cbe:	4a23      	ldr	r2, [pc, #140]	@ (8000d4c <MX_USART3_UART_Init+0x94>)
 8000cc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cc2:	4b21      	ldr	r3, [pc, #132]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000cc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cca:	4b1f      	ldr	r3, [pc, #124]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000cde:	220c      	movs	r2, #12
 8000ce0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce8:	4b17      	ldr	r3, [pc, #92]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cee:	4b16      	ldr	r3, [pc, #88]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d00:	4811      	ldr	r0, [pc, #68]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000d02:	f004 f8c3 	bl	8004e8c <HAL_UART_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d0c:	f7ff fefc 	bl	8000b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d10:	2100      	movs	r1, #0
 8000d12:	480d      	ldr	r0, [pc, #52]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000d14:	f005 f8cb 	bl	8005eae <HAL_UARTEx_SetTxFifoThreshold>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d1e:	f7ff fef3 	bl	8000b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d22:	2100      	movs	r1, #0
 8000d24:	4808      	ldr	r0, [pc, #32]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000d26:	f005 f900 	bl	8005f2a <HAL_UARTEx_SetRxFifoThreshold>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d30:	f7ff feea 	bl	8000b08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d34:	4804      	ldr	r0, [pc, #16]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000d36:	f005 f881 	bl	8005e3c <HAL_UARTEx_DisableFifoMode>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d40:	f7ff fee2 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	240001dc 	.word	0x240001dc
 8000d4c:	40004800 	.word	0x40004800

08000d50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b0ba      	sub	sp, #232	@ 0xe8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	22c0      	movs	r2, #192	@ 0xc0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f005 fc6e 	bl	8006652 <memset>
  if(uartHandle->Instance==USART3)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a27      	ldr	r2, [pc, #156]	@ (8000e18 <HAL_UART_MspInit+0xc8>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d146      	bne.n	8000e0e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d80:	f04f 0202 	mov.w	r2, #2
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	4618      	mov	r0, r3
 8000d98:	f002 fa4c 	bl	8003234 <HAL_RCCEx_PeriphCLKConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000da2:	f7ff feb1 	bl	8000b08 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000da6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e1c <HAL_UART_MspInit+0xcc>)
 8000da8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dac:	4a1b      	ldr	r2, [pc, #108]	@ (8000e1c <HAL_UART_MspInit+0xcc>)
 8000dae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000db2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000db6:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <HAL_UART_MspInit+0xcc>)
 8000db8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc4:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <HAL_UART_MspInit+0xcc>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dca:	4a14      	ldr	r2, [pc, #80]	@ (8000e1c <HAL_UART_MspInit+0xcc>)
 8000dcc:	f043 0308 	orr.w	r3, r3, #8
 8000dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd4:	4b11      	ldr	r3, [pc, #68]	@ (8000e1c <HAL_UART_MspInit+0xcc>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dda:	f003 0308 	and.w	r3, r3, #8
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000de2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000de6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dfc:	2307      	movs	r3, #7
 8000dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e02:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	@ (8000e20 <HAL_UART_MspInit+0xd0>)
 8000e0a:	f000 fed1 	bl	8001bb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e0e:	bf00      	nop
 8000e10:	37e8      	adds	r7, #232	@ 0xe8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40004800 	.word	0x40004800
 8000e1c:	58024400 	.word	0x58024400
 8000e20:	58020c00 	.word	0x58020c00

08000e24 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e28:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e2a:	4a16      	ldr	r2, [pc, #88]	@ (8000e84 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000e2e:	4b14      	ldr	r3, [pc, #80]	@ (8000e80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e30:	2209      	movs	r2, #9
 8000e32:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e34:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e36:	2202      	movs	r2, #2
 8000e38:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	@ (8000e80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e42:	2202      	movs	r2, #2
 8000e44:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000e58:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e64:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e6a:	4805      	ldr	r0, [pc, #20]	@ (8000e80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e6c:	f001 f881 	bl	8001f72 <HAL_PCD_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000e76:	f7ff fe47 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	24000270 	.word	0x24000270
 8000e84:	40080000 	.word	0x40080000

08000e88 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b0ba      	sub	sp, #232	@ 0xe8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	22c0      	movs	r2, #192	@ 0xc0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f005 fbd2 	bl	8006652 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a30      	ldr	r2, [pc, #192]	@ (8000f74 <HAL_PCD_MspInit+0xec>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d159      	bne.n	8000f6c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000eb8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000ebc:	f04f 0300 	mov.w	r3, #0
 8000ec0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000ec4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000ec8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f002 f9af 	bl	8003234 <HAL_RCCEx_PeriphCLKConfig>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000edc:	f7ff fe14 	bl	8000b08 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000ee0:	f001 f9b2 	bl	8002248 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee4:	4b24      	ldr	r3, [pc, #144]	@ (8000f78 <HAL_PCD_MspInit+0xf0>)
 8000ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eea:	4a23      	ldr	r2, [pc, #140]	@ (8000f78 <HAL_PCD_MspInit+0xf0>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ef4:	4b20      	ldr	r3, [pc, #128]	@ (8000f78 <HAL_PCD_MspInit+0xf0>)
 8000ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f02:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000f06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f1c:	230a      	movs	r3, #10
 8000f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f26:	4619      	mov	r1, r3
 8000f28:	4814      	ldr	r0, [pc, #80]	@ (8000f7c <HAL_PCD_MspInit+0xf4>)
 8000f2a:	f000 fe41 	bl	8001bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f46:	4619      	mov	r1, r3
 8000f48:	480c      	ldr	r0, [pc, #48]	@ (8000f7c <HAL_PCD_MspInit+0xf4>)
 8000f4a:	f000 fe31 	bl	8001bb0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <HAL_PCD_MspInit+0xf0>)
 8000f50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f54:	4a08      	ldr	r2, [pc, #32]	@ (8000f78 <HAL_PCD_MspInit+0xf0>)
 8000f56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000f5a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <HAL_PCD_MspInit+0xf0>)
 8000f60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	37e8      	adds	r7, #232	@ 0xe8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40080000 	.word	0x40080000
 8000f78:	58024400 	.word	0x58024400
 8000f7c:	58020000 	.word	0x58020000

08000f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f84:	f7ff fe10 	bl	8000ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f88:	480c      	ldr	r0, [pc, #48]	@ (8000fbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f8a:	490d      	ldr	r1, [pc, #52]	@ (8000fc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f90:	e002      	b.n	8000f98 <LoopCopyDataInit>

08000f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f96:	3304      	adds	r3, #4

08000f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f9c:	d3f9      	bcc.n	8000f92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fa0:	4c0a      	ldr	r4, [pc, #40]	@ (8000fcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa4:	e001      	b.n	8000faa <LoopFillZerobss>

08000fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa8:	3204      	adds	r2, #4

08000faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fac:	d3fb      	bcc.n	8000fa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fae:	f005 fb59 	bl	8006664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb2:	f7ff fcff 	bl	80009b4 <main>
  bx  lr
 8000fb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fb8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fbc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fc0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000fc4:	0800670c 	.word	0x0800670c
  ldr r2, =_sbss
 8000fc8:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000fcc:	24000758 	.word	0x24000758

08000fd0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd0:	e7fe      	b.n	8000fd0 <ADC3_IRQHandler>
	...

08000fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fda:	2003      	movs	r0, #3
 8000fdc:	f000 f982 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fe0:	f001 ff52 	bl	8002e88 <HAL_RCC_GetSysClockFreq>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	4b15      	ldr	r3, [pc, #84]	@ (800103c <HAL_Init+0x68>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	0a1b      	lsrs	r3, r3, #8
 8000fec:	f003 030f 	and.w	r3, r3, #15
 8000ff0:	4913      	ldr	r1, [pc, #76]	@ (8001040 <HAL_Init+0x6c>)
 8000ff2:	5ccb      	ldrb	r3, [r1, r3]
 8000ff4:	f003 031f 	and.w	r3, r3, #31
 8000ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ffc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <HAL_Init+0x68>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	4a0e      	ldr	r2, [pc, #56]	@ (8001040 <HAL_Init+0x6c>)
 8001008:	5cd3      	ldrb	r3, [r2, r3]
 800100a:	f003 031f 	and.w	r3, r3, #31
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	fa22 f303 	lsr.w	r3, r2, r3
 8001014:	4a0b      	ldr	r2, [pc, #44]	@ (8001044 <HAL_Init+0x70>)
 8001016:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001018:	4a0b      	ldr	r2, [pc, #44]	@ (8001048 <HAL_Init+0x74>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800101e:	2000      	movs	r0, #0
 8001020:	f000 f814 	bl	800104c <HAL_InitTick>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e002      	b.n	8001034 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800102e:	f7ff fd71 	bl	8000b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	58024400 	.word	0x58024400
 8001040:	080066c4 	.word	0x080066c4
 8001044:	24000004 	.word	0x24000004
 8001048:	24000000 	.word	0x24000000

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001054:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <HAL_InitTick+0x60>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d101      	bne.n	8001060 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e021      	b.n	80010a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001060:	4b13      	ldr	r3, [pc, #76]	@ (80010b0 <HAL_InitTick+0x64>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <HAL_InitTick+0x60>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4619      	mov	r1, r3
 800106a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800106e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001072:	fbb2 f3f3 	udiv	r3, r2, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f959 	bl	800132e <HAL_SYSTICK_Config>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e00e      	b.n	80010a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b0f      	cmp	r3, #15
 800108a:	d80a      	bhi.n	80010a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108c:	2200      	movs	r2, #0
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001094:	f000 f931 	bl	80012fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001098:	4a06      	ldr	r2, [pc, #24]	@ (80010b4 <HAL_InitTick+0x68>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	e000      	b.n	80010a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	2400000c 	.word	0x2400000c
 80010b0:	24000000 	.word	0x24000000
 80010b4:	24000008 	.word	0x24000008

080010b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <HAL_IncTick+0x20>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <HAL_IncTick+0x24>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	4a04      	ldr	r2, [pc, #16]	@ (80010dc <HAL_IncTick+0x24>)
 80010ca:	6013      	str	r3, [r2, #0]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	2400000c 	.word	0x2400000c
 80010dc:	24000754 	.word	0x24000754

080010e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return uwTick;
 80010e4:	4b03      	ldr	r3, [pc, #12]	@ (80010f4 <HAL_GetTick+0x14>)
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	24000754 	.word	0x24000754

080010f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001100:	f7ff ffee 	bl	80010e0 <HAL_GetTick>
 8001104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001110:	d005      	beq.n	800111e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001112:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <HAL_Delay+0x44>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4413      	add	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800111e:	bf00      	nop
 8001120:	f7ff ffde 	bl	80010e0 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	429a      	cmp	r2, r3
 800112e:	d8f7      	bhi.n	8001120 <HAL_Delay+0x28>
  {
  }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2400000c 	.word	0x2400000c

08001140 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001144:	4b03      	ldr	r3, [pc, #12]	@ (8001154 <HAL_GetREVID+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	0c1b      	lsrs	r3, r3, #16
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	5c001000 	.word	0x5c001000

08001158 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001168:	4904      	ldr	r1, [pc, #16]	@ (800117c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4313      	orrs	r3, r2
 800116e:	604b      	str	r3, [r1, #4]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	58000400 	.word	0x58000400

08001180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800119c:	4013      	ands	r3, r2
 800119e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 80011aa:	4313      	orrs	r3, r2
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <__NVIC_SetPriorityGrouping+0x40>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00
 80011c4:	05fa0000 	.word	0x05fa0000

080011c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011cc:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	f003 0307 	and.w	r3, r3, #7
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	@ (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	@ (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	@ 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	@ 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff47 	bl	8001180 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001308:	f7ff ff5e 	bl	80011c8 <__NVIC_GetPriorityGrouping>
 800130c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68b9      	ldr	r1, [r7, #8]
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f7ff ff90 	bl	8001238 <NVIC_EncodePriority>
 8001318:	4602      	mov	r2, r0
 800131a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff5f 	bl	80011e4 <__NVIC_SetPriority>
}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ffb2 	bl	80012a0 <SysTick_Config>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e0e3      	b.n	8001522 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001360:	2b00      	cmp	r3, #0
 8001362:	d106      	bne.n	8001372 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2223      	movs	r2, #35	@ 0x23
 8001368:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff f977 	bl	8000660 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	4b6e      	ldr	r3, [pc, #440]	@ (800152c <HAL_ETH_Init+0x1e4>)
 8001374:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001378:	4a6c      	ldr	r2, [pc, #432]	@ (800152c <HAL_ETH_Init+0x1e4>)
 800137a:	f043 0302 	orr.w	r3, r3, #2
 800137e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001382:	4b6a      	ldr	r3, [pc, #424]	@ (800152c <HAL_ETH_Init+0x1e4>)
 8001384:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	7a1b      	ldrb	r3, [r3, #8]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d103      	bne.n	80013a0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001398:	2000      	movs	r0, #0
 800139a:	f7ff fedd 	bl	8001158 <HAL_SYSCFG_ETHInterfaceSelect>
 800139e:	e003      	b.n	80013a8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80013a0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80013a4:	f7ff fed8 	bl	8001158 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80013a8:	4b61      	ldr	r3, [pc, #388]	@ (8001530 <HAL_ETH_Init+0x1e8>)
 80013aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6812      	ldr	r2, [r2, #0]
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013c4:	f7ff fe8c 	bl	80010e0 <HAL_GetTick>
 80013c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013ca:	e011      	b.n	80013f0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013cc:	f7ff fe88 	bl	80010e0 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013da:	d909      	bls.n	80013f0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2204      	movs	r2, #4
 80013e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	22e0      	movs	r2, #224	@ 0xe0
 80013e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e098      	b.n	8001522 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1e4      	bne.n	80013cc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f89e 	bl	8001544 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001408:	f001 feb8 	bl	800317c <HAL_RCC_GetHCLKFreq>
 800140c:	4603      	mov	r3, r0
 800140e:	4a49      	ldr	r2, [pc, #292]	@ (8001534 <HAL_ETH_Init+0x1ec>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	0c9a      	lsrs	r2, r3, #18
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	3a01      	subs	r2, #1
 800141c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 fa81 	bl	8001928 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800142e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001432:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6812      	ldr	r2, [r2, #0]
 800143a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800143e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001442:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d009      	beq.n	8001466 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2201      	movs	r2, #1
 8001456:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	22e0      	movs	r2, #224	@ 0xe0
 800145e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e05d      	b.n	8001522 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800146e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001472:	4b31      	ldr	r3, [pc, #196]	@ (8001538 <HAL_ETH_Init+0x1f0>)
 8001474:	4013      	ands	r3, r2
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6952      	ldr	r2, [r2, #20]
 800147a:	0051      	lsls	r1, r2, #1
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	430b      	orrs	r3, r1
 8001482:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001486:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 fae9 	bl	8001a62 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 fb2f 	bl	8001af4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	3305      	adds	r3, #5
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	021a      	lsls	r2, r3, #8
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	3304      	adds	r3, #4
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4619      	mov	r1, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	3303      	adds	r3, #3
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	061a      	lsls	r2, r3, #24
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	3302      	adds	r3, #2
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	041b      	lsls	r3, r3, #16
 80014c8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	3301      	adds	r3, #1
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014d4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014e2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014e4:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b11      	ldr	r3, [pc, #68]	@ (800153c <HAL_ETH_Init+0x1f4>)
 80014f6:	430b      	orrs	r3, r1
 80014f8:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b0d      	ldr	r3, [pc, #52]	@ (8001540 <HAL_ETH_Init+0x1f8>)
 800150a:	430b      	orrs	r3, r1
 800150c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2210      	movs	r2, #16
 800151c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	58024400 	.word	0x58024400
 8001530:	58000400 	.word	0x58000400
 8001534:	431bde83 	.word	0x431bde83
 8001538:	ffff8001 	.word	0xffff8001
 800153c:	0c020060 	.word	0x0c020060
 8001540:	0c20c000 	.word	0x0c20c000

08001544 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001554:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800155c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800155e:	f001 fe0d 	bl	800317c <HAL_RCC_GetHCLKFreq>
 8001562:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	4a1a      	ldr	r2, [pc, #104]	@ (80015d0 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d804      	bhi.n	8001576 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	e022      	b.n	80015bc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	4a16      	ldr	r2, [pc, #88]	@ (80015d4 <HAL_ETH_SetMDIOClockRange+0x90>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d204      	bcs.n	8001588 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	e019      	b.n	80015bc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4a13      	ldr	r2, [pc, #76]	@ (80015d8 <HAL_ETH_SetMDIOClockRange+0x94>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d915      	bls.n	80015bc <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4a12      	ldr	r2, [pc, #72]	@ (80015dc <HAL_ETH_SetMDIOClockRange+0x98>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d804      	bhi.n	80015a2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	e00c      	b.n	80015bc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	4a0e      	ldr	r2, [pc, #56]	@ (80015e0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d804      	bhi.n	80015b4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	e003      	b.n	80015bc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80015ba:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	02160ebf 	.word	0x02160ebf
 80015d4:	03938700 	.word	0x03938700
 80015d8:	05f5e0ff 	.word	0x05f5e0ff
 80015dc:	08f0d17f 	.word	0x08f0d17f
 80015e0:	0ee6b27f 	.word	0x0ee6b27f

080015e4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80015f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	791b      	ldrb	r3, [r3, #4]
 80015fc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80015fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	7b1b      	ldrb	r3, [r3, #12]
 8001604:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001606:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	7b5b      	ldrb	r3, [r3, #13]
 800160c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800160e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	7b9b      	ldrb	r3, [r3, #14]
 8001614:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001616:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	7bdb      	ldrb	r3, [r3, #15]
 800161c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800161e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	7c12      	ldrb	r2, [r2, #16]
 8001624:	2a00      	cmp	r2, #0
 8001626:	d102      	bne.n	800162e <ETH_SetMACConfig+0x4a>
 8001628:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800162c:	e000      	b.n	8001630 <ETH_SetMACConfig+0x4c>
 800162e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001630:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	7c52      	ldrb	r2, [r2, #17]
 8001636:	2a00      	cmp	r2, #0
 8001638:	d102      	bne.n	8001640 <ETH_SetMACConfig+0x5c>
 800163a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800163e:	e000      	b.n	8001642 <ETH_SetMACConfig+0x5e>
 8001640:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001642:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	7c9b      	ldrb	r3, [r3, #18]
 8001648:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800164a:	431a      	orrs	r2, r3
               macconf->Speed |
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001650:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001656:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	7f1b      	ldrb	r3, [r3, #28]
 800165c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800165e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	7f5b      	ldrb	r3, [r3, #29]
 8001664:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001666:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	7f92      	ldrb	r2, [r2, #30]
 800166c:	2a00      	cmp	r2, #0
 800166e:	d102      	bne.n	8001676 <ETH_SetMACConfig+0x92>
 8001670:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001674:	e000      	b.n	8001678 <ETH_SetMACConfig+0x94>
 8001676:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001678:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	7fdb      	ldrb	r3, [r3, #31]
 800167e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001680:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001688:	2a00      	cmp	r2, #0
 800168a:	d102      	bne.n	8001692 <ETH_SetMACConfig+0xae>
 800168c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001690:	e000      	b.n	8001694 <ETH_SetMACConfig+0xb0>
 8001692:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001694:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800169a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80016a2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80016a4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80016aa:	4313      	orrs	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b56      	ldr	r3, [pc, #344]	@ (8001810 <ETH_SetMACConfig+0x22c>)
 80016b6:	4013      	ands	r3, r2
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	68f9      	ldr	r1, [r7, #12]
 80016be:	430b      	orrs	r3, r1
 80016c0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016c6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80016ce:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016d0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016d8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80016da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80016e2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80016e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80016ec:	2a00      	cmp	r2, #0
 80016ee:	d102      	bne.n	80016f6 <ETH_SetMACConfig+0x112>
 80016f0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016f4:	e000      	b.n	80016f8 <ETH_SetMACConfig+0x114>
 80016f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80016f8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016fe:	4313      	orrs	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	4b42      	ldr	r3, [pc, #264]	@ (8001814 <ETH_SetMACConfig+0x230>)
 800170a:	4013      	ands	r3, r2
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	68f9      	ldr	r1, [r7, #12]
 8001712:	430b      	orrs	r3, r1
 8001714:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800171c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001722:	4313      	orrs	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	4b3a      	ldr	r3, [pc, #232]	@ (8001818 <ETH_SetMACConfig+0x234>)
 800172e:	4013      	ands	r3, r2
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	68f9      	ldr	r1, [r7, #12]
 8001736:	430b      	orrs	r3, r1
 8001738:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001740:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001746:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800174e:	2a00      	cmp	r2, #0
 8001750:	d101      	bne.n	8001756 <ETH_SetMACConfig+0x172>
 8001752:	2280      	movs	r2, #128	@ 0x80
 8001754:	e000      	b.n	8001758 <ETH_SetMACConfig+0x174>
 8001756:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001758:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800175e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001760:	4313      	orrs	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800176a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800176e:	4013      	ands	r3, r2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	68f9      	ldr	r1, [r7, #12]
 8001776:	430b      	orrs	r3, r1
 8001778:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001780:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001788:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800178a:	4313      	orrs	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001796:	f023 0103 	bic.w	r1, r3, #3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80017ae:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80017ca:	2a00      	cmp	r2, #0
 80017cc:	d101      	bne.n	80017d2 <ETH_SetMACConfig+0x1ee>
 80017ce:	2240      	movs	r2, #64	@ 0x40
 80017d0:	e000      	b.n	80017d4 <ETH_SetMACConfig+0x1f0>
 80017d2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80017d4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80017dc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80017de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80017e6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80017e8:	4313      	orrs	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80017f4:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	430a      	orrs	r2, r1
 8001800:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001804:	bf00      	nop
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	00048083 	.word	0x00048083
 8001814:	c0f88000 	.word	0xc0f88000
 8001818:	fffffef0 	.word	0xfffffef0

0800181c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b38      	ldr	r3, [pc, #224]	@ (8001914 <ETH_SetDMAConfig+0xf8>)
 8001832:	4013      	ands	r3, r2
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	6811      	ldr	r1, [r2, #0]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	430b      	orrs	r3, r1
 800183e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001842:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	791b      	ldrb	r3, [r3, #4]
 8001848:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800184e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	7b1b      	ldrb	r3, [r3, #12]
 8001854:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001856:	4313      	orrs	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	4b2c      	ldr	r3, [pc, #176]	@ (8001918 <ETH_SetDMAConfig+0xfc>)
 8001866:	4013      	ands	r3, r2
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	68f9      	ldr	r1, [r7, #12]
 800186e:	430b      	orrs	r3, r1
 8001870:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001874:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	7b5b      	ldrb	r3, [r3, #13]
 800187a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001880:	4313      	orrs	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800188c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001890:	4b22      	ldr	r3, [pc, #136]	@ (800191c <ETH_SetDMAConfig+0x100>)
 8001892:	4013      	ands	r3, r2
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	68f9      	ldr	r1, [r7, #12]
 800189a:	430b      	orrs	r3, r1
 800189c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018a0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	7d1b      	ldrb	r3, [r3, #20]
 80018ac:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80018ae:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	7f5b      	ldrb	r3, [r3, #29]
 80018b4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80018b6:	4313      	orrs	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018c2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80018c6:	4b16      	ldr	r3, [pc, #88]	@ (8001920 <ETH_SetDMAConfig+0x104>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	68f9      	ldr	r1, [r7, #12]
 80018d0:	430b      	orrs	r3, r1
 80018d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018d6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	7f1b      	ldrb	r3, [r3, #28]
 80018de:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80018e4:	4313      	orrs	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018f0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80018f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001924 <ETH_SetDMAConfig+0x108>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	68f9      	ldr	r1, [r7, #12]
 80018fe:	430b      	orrs	r3, r1
 8001900:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001904:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	ffff87fd 	.word	0xffff87fd
 8001918:	ffff2ffe 	.word	0xffff2ffe
 800191c:	fffec000 	.word	0xfffec000
 8001920:	ffc0efef 	.word	0xffc0efef
 8001924:	7fc0ffff 	.word	0x7fc0ffff

08001928 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b0a4      	sub	sp, #144	@ 0x90
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001930:	2301      	movs	r3, #1
 8001932:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001936:	2300      	movs	r3, #0
 8001938:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001946:	2301      	movs	r3, #1
 8001948:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800194c:	2301      	movs	r3, #1
 800194e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001952:	2301      	movs	r3, #1
 8001954:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800195e:	2301      	movs	r3, #1
 8001960:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001964:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001968:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001970:	2300      	movs	r3, #0
 8001972:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001980:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001984:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800198c:	2300      	movs	r3, #0
 800198e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001990:	2301      	movs	r3, #1
 8001992:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001996:	2300      	movs	r3, #0
 8001998:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80019a2:	2300      	movs	r3, #0
 80019a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80019aa:	2300      	movs	r3, #0
 80019ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80019ba:	2301      	movs	r3, #1
 80019bc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80019c0:	2320      	movs	r3, #32
 80019c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80019c6:	2301      	movs	r3, #1
 80019c8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80019d2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80019d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80019d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019dc:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80019e4:	2302      	movs	r3, #2
 80019e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80019fc:	2301      	movs	r3, #1
 80019fe:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001a02:	2300      	movs	r3, #0
 8001a04:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001a06:	2301      	movs	r3, #1
 8001a08:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a10:	4619      	mov	r1, r3
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff fde6 	bl	80015e4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a32:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a36:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a3c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a40:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001a48:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001a4c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a4e:	f107 0308 	add.w	r3, r7, #8
 8001a52:	4619      	mov	r1, r3
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff fee1 	bl	800181c <ETH_SetDMAConfig>
}
 8001a5a:	bf00      	nop
 8001a5c:	3790      	adds	r7, #144	@ 0x90
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b085      	sub	sp, #20
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	e01d      	b.n	8001aac <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68d9      	ldr	r1, [r3, #12]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	4613      	mov	r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	4413      	add	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	440b      	add	r3, r1
 8001a80:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001a9a:	68b9      	ldr	r1, [r7, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	3206      	adds	r2, #6
 8001aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d9de      	bls.n	8001a70 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ad4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ae4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	e023      	b.n	8001b4a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6919      	ldr	r1, [r3, #16]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4413      	add	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	440b      	add	r3, r1
 8001b12:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2200      	movs	r2, #0
 8001b36:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	3212      	adds	r2, #18
 8001b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	3301      	adds	r3, #1
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d9d8      	bls.n	8001b02 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b76:	461a      	mov	r2, r3
 8001b78:	2303      	movs	r3, #3
 8001b7a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691a      	ldr	r2, [r3, #16]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b8a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b9e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	@ 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001bbe:	4b89      	ldr	r3, [pc, #548]	@ (8001de4 <HAL_GPIO_Init+0x234>)
 8001bc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bc2:	e194      	b.n	8001eee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	2101      	movs	r1, #1
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 8186 	beq.w	8001ee8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d005      	beq.n	8001bf4 <HAL_GPIO_Init+0x44>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d130      	bne.n	8001c56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	091b      	lsrs	r3, r3, #4
 8001c40:	f003 0201 	and.w	r2, r3, #1
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d017      	beq.n	8001c92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d123      	bne.n	8001ce6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	08da      	lsrs	r2, r3, #3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3208      	adds	r2, #8
 8001ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	220f      	movs	r2, #15
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	691a      	ldr	r2, [r3, #16]
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	08da      	lsrs	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3208      	adds	r2, #8
 8001ce0:	69b9      	ldr	r1, [r7, #24]
 8001ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0203 	and.w	r2, r3, #3
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 80e0 	beq.w	8001ee8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d28:	4b2f      	ldr	r3, [pc, #188]	@ (8001de8 <HAL_GPIO_Init+0x238>)
 8001d2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d2e:	4a2e      	ldr	r2, [pc, #184]	@ (8001de8 <HAL_GPIO_Init+0x238>)
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d38:	4b2b      	ldr	r3, [pc, #172]	@ (8001de8 <HAL_GPIO_Init+0x238>)
 8001d3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d46:	4a29      	ldr	r2, [pc, #164]	@ (8001dec <HAL_GPIO_Init+0x23c>)
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	089b      	lsrs	r3, r3, #2
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a20      	ldr	r2, [pc, #128]	@ (8001df0 <HAL_GPIO_Init+0x240>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d052      	beq.n	8001e18 <HAL_GPIO_Init+0x268>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a1f      	ldr	r2, [pc, #124]	@ (8001df4 <HAL_GPIO_Init+0x244>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d031      	beq.n	8001dde <HAL_GPIO_Init+0x22e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8001df8 <HAL_GPIO_Init+0x248>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d02b      	beq.n	8001dda <HAL_GPIO_Init+0x22a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a1d      	ldr	r2, [pc, #116]	@ (8001dfc <HAL_GPIO_Init+0x24c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d025      	beq.n	8001dd6 <HAL_GPIO_Init+0x226>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8001e00 <HAL_GPIO_Init+0x250>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d01f      	beq.n	8001dd2 <HAL_GPIO_Init+0x222>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a1b      	ldr	r2, [pc, #108]	@ (8001e04 <HAL_GPIO_Init+0x254>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d019      	beq.n	8001dce <HAL_GPIO_Init+0x21e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a1a      	ldr	r2, [pc, #104]	@ (8001e08 <HAL_GPIO_Init+0x258>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d013      	beq.n	8001dca <HAL_GPIO_Init+0x21a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a19      	ldr	r2, [pc, #100]	@ (8001e0c <HAL_GPIO_Init+0x25c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00d      	beq.n	8001dc6 <HAL_GPIO_Init+0x216>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a18      	ldr	r2, [pc, #96]	@ (8001e10 <HAL_GPIO_Init+0x260>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d007      	beq.n	8001dc2 <HAL_GPIO_Init+0x212>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a17      	ldr	r2, [pc, #92]	@ (8001e14 <HAL_GPIO_Init+0x264>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d101      	bne.n	8001dbe <HAL_GPIO_Init+0x20e>
 8001dba:	2309      	movs	r3, #9
 8001dbc:	e02d      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dbe:	230a      	movs	r3, #10
 8001dc0:	e02b      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dc2:	2308      	movs	r3, #8
 8001dc4:	e029      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dc6:	2307      	movs	r3, #7
 8001dc8:	e027      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dca:	2306      	movs	r3, #6
 8001dcc:	e025      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dce:	2305      	movs	r3, #5
 8001dd0:	e023      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dd2:	2304      	movs	r3, #4
 8001dd4:	e021      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e01f      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e01d      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e01b      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001de2:	bf00      	nop
 8001de4:	58000080 	.word	0x58000080
 8001de8:	58024400 	.word	0x58024400
 8001dec:	58000400 	.word	0x58000400
 8001df0:	58020000 	.word	0x58020000
 8001df4:	58020400 	.word	0x58020400
 8001df8:	58020800 	.word	0x58020800
 8001dfc:	58020c00 	.word	0x58020c00
 8001e00:	58021000 	.word	0x58021000
 8001e04:	58021400 	.word	0x58021400
 8001e08:	58021800 	.word	0x58021800
 8001e0c:	58021c00 	.word	0x58021c00
 8001e10:	58022000 	.word	0x58022000
 8001e14:	58022400 	.word	0x58022400
 8001e18:	2300      	movs	r3, #0
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	f002 0203 	and.w	r2, r2, #3
 8001e20:	0092      	lsls	r2, r2, #2
 8001e22:	4093      	lsls	r3, r2
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e2a:	4938      	ldr	r1, [pc, #224]	@ (8001f0c <HAL_GPIO_Init+0x35c>)
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	089b      	lsrs	r3, r3, #2
 8001e30:	3302      	adds	r3, #2
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	3301      	adds	r3, #1
 8001eec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f47f ae63 	bne.w	8001bc4 <HAL_GPIO_Init+0x14>
  }
}
 8001efe:	bf00      	nop
 8001f00:	bf00      	nop
 8001f02:	3724      	adds	r7, #36	@ 0x24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	58000400 	.word	0x58000400

08001f10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	887b      	ldrh	r3, [r7, #2]
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
 8001f2c:	e001      	b.n	8001f32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	807b      	strh	r3, [r7, #2]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f50:	787b      	ldrb	r3, [r7, #1]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f56:	887a      	ldrh	r2, [r7, #2]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f5c:	e003      	b.n	8001f66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f5e:	887b      	ldrh	r3, [r7, #2]
 8001f60:	041a      	lsls	r2, r3, #16
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	619a      	str	r2, [r3, #24]
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b086      	sub	sp, #24
 8001f76:	af02      	add	r7, sp, #8
 8001f78:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0fe      	b.n	8002182 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d106      	bne.n	8001f9e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7fe ff75 	bl	8000e88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f004 f8bc 	bl	8006128 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	7c1a      	ldrb	r2, [r3, #16]
 8001fb8:	f88d 2000 	strb.w	r2, [sp]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fc0:	f004 f840 	bl	8006044 <USB_CoreInit>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2202      	movs	r2, #2
 8001fce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e0d5      	b.n	8002182 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f004 f8b4 	bl	800614a <USB_SetCurrentMode>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2202      	movs	r2, #2
 8001fec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0c6      	b.n	8002182 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	73fb      	strb	r3, [r7, #15]
 8001ff8:	e04a      	b.n	8002090 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	3315      	adds	r3, #21
 800200a:	2201      	movs	r2, #1
 800200c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	3314      	adds	r3, #20
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	b298      	uxth	r0, r3
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	332e      	adds	r3, #46	@ 0x2e
 8002036:	4602      	mov	r2, r0
 8002038:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	3318      	adds	r3, #24
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	331c      	adds	r3, #28
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002062:	7bfa      	ldrb	r2, [r7, #15]
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	440b      	add	r3, r1
 8002070:	3320      	adds	r3, #32
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002076:	7bfa      	ldrb	r2, [r7, #15]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	3324      	adds	r3, #36	@ 0x24
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	3301      	adds	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	791b      	ldrb	r3, [r3, #4]
 8002094:	7bfa      	ldrb	r2, [r7, #15]
 8002096:	429a      	cmp	r2, r3
 8002098:	d3af      	bcc.n	8001ffa <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800209a:	2300      	movs	r3, #0
 800209c:	73fb      	strb	r3, [r7, #15]
 800209e:	e044      	b.n	800212a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4413      	add	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80020c8:	7bfa      	ldrb	r2, [r7, #15]
 80020ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020cc:	7bfa      	ldrb	r2, [r7, #15]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4413      	add	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020e2:	7bfa      	ldrb	r2, [r7, #15]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020f8:	7bfa      	ldrb	r2, [r7, #15]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800210e:	7bfa      	ldrb	r2, [r7, #15]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4413      	add	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	3301      	adds	r3, #1
 8002128:	73fb      	strb	r3, [r7, #15]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	791b      	ldrb	r3, [r3, #4]
 800212e:	7bfa      	ldrb	r2, [r7, #15]
 8002130:	429a      	cmp	r2, r3
 8002132:	d3b5      	bcc.n	80020a0 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7c1a      	ldrb	r2, [r3, #16]
 800213c:	f88d 2000 	strb.w	r2, [sp]
 8002140:	3304      	adds	r3, #4
 8002142:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002144:	f004 f84e 	bl	80061e4 <USB_DevInit>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d005      	beq.n	800215a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2202      	movs	r2, #2
 8002152:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e013      	b.n	8002182 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	7b1b      	ldrb	r3, [r3, #12]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d102      	bne.n	8002176 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f80b 	bl	800218c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f004 fa09 	bl	8006592 <USB_DevDisconnect>

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80021ba:	4b05      	ldr	r3, [pc, #20]	@ (80021d0 <HAL_PCDEx_ActivateLPM+0x44>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	10000003 	.word	0x10000003

080021d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80021dc:	4b19      	ldr	r3, [pc, #100]	@ (8002244 <HAL_PWREx_ConfigSupply+0x70>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d00a      	beq.n	80021fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80021e8:	4b16      	ldr	r3, [pc, #88]	@ (8002244 <HAL_PWREx_ConfigSupply+0x70>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d001      	beq.n	80021fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e01f      	b.n	800223a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	e01d      	b.n	800223a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80021fe:	4b11      	ldr	r3, [pc, #68]	@ (8002244 <HAL_PWREx_ConfigSupply+0x70>)
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f023 0207 	bic.w	r2, r3, #7
 8002206:	490f      	ldr	r1, [pc, #60]	@ (8002244 <HAL_PWREx_ConfigSupply+0x70>)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4313      	orrs	r3, r2
 800220c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800220e:	f7fe ff67 	bl	80010e0 <HAL_GetTick>
 8002212:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002214:	e009      	b.n	800222a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002216:	f7fe ff63 	bl	80010e0 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002224:	d901      	bls.n	800222a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e007      	b.n	800223a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800222a:	4b06      	ldr	r3, [pc, #24]	@ (8002244 <HAL_PWREx_ConfigSupply+0x70>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002232:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002236:	d1ee      	bne.n	8002216 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	58024800 	.word	0x58024800

08002248 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800224c:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a04      	ldr	r2, [pc, #16]	@ (8002264 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002252:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002256:	60d3      	str	r3, [r2, #12]
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	58024800 	.word	0x58024800

08002268 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08c      	sub	sp, #48	@ 0x30
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d102      	bne.n	800227c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	f000 bc48 	b.w	8002b0c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 8088 	beq.w	800239a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800228a:	4b99      	ldr	r3, [pc, #612]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002292:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002294:	4b96      	ldr	r3, [pc, #600]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 8002296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002298:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800229a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800229c:	2b10      	cmp	r3, #16
 800229e:	d007      	beq.n	80022b0 <HAL_RCC_OscConfig+0x48>
 80022a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022a2:	2b18      	cmp	r3, #24
 80022a4:	d111      	bne.n	80022ca <HAL_RCC_OscConfig+0x62>
 80022a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d10c      	bne.n	80022ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b0:	4b8f      	ldr	r3, [pc, #572]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d06d      	beq.n	8002398 <HAL_RCC_OscConfig+0x130>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d169      	bne.n	8002398 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	f000 bc21 	b.w	8002b0c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022d2:	d106      	bne.n	80022e2 <HAL_RCC_OscConfig+0x7a>
 80022d4:	4b86      	ldr	r3, [pc, #536]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a85      	ldr	r2, [pc, #532]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 80022da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	e02e      	b.n	8002340 <HAL_RCC_OscConfig+0xd8>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10c      	bne.n	8002304 <HAL_RCC_OscConfig+0x9c>
 80022ea:	4b81      	ldr	r3, [pc, #516]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a80      	ldr	r2, [pc, #512]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 80022f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	4b7e      	ldr	r3, [pc, #504]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a7d      	ldr	r2, [pc, #500]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 80022fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e01d      	b.n	8002340 <HAL_RCC_OscConfig+0xd8>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800230c:	d10c      	bne.n	8002328 <HAL_RCC_OscConfig+0xc0>
 800230e:	4b78      	ldr	r3, [pc, #480]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a77      	ldr	r2, [pc, #476]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 8002314:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	4b75      	ldr	r3, [pc, #468]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a74      	ldr	r2, [pc, #464]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 8002320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	e00b      	b.n	8002340 <HAL_RCC_OscConfig+0xd8>
 8002328:	4b71      	ldr	r3, [pc, #452]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a70      	ldr	r2, [pc, #448]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 800232e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	4b6e      	ldr	r3, [pc, #440]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a6d      	ldr	r2, [pc, #436]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 800233a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800233e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d013      	beq.n	8002370 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7fe feca 	bl	80010e0 <HAL_GetTick>
 800234c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002350:	f7fe fec6 	bl	80010e0 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	@ 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e3d4      	b.n	8002b0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002362:	4b63      	ldr	r3, [pc, #396]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0xe8>
 800236e:	e014      	b.n	800239a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002370:	f7fe feb6 	bl	80010e0 <HAL_GetTick>
 8002374:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002378:	f7fe feb2 	bl	80010e0 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	@ 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e3c0      	b.n	8002b0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800238a:	4b59      	ldr	r3, [pc, #356]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x110>
 8002396:	e000      	b.n	800239a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 80ca 	beq.w	800253c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023a8:	4b51      	ldr	r3, [pc, #324]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023b2:	4b4f      	ldr	r3, [pc, #316]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 80023b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d007      	beq.n	80023ce <HAL_RCC_OscConfig+0x166>
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	2b18      	cmp	r3, #24
 80023c2:	d156      	bne.n	8002472 <HAL_RCC_OscConfig+0x20a>
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d151      	bne.n	8002472 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023ce:	4b48      	ldr	r3, [pc, #288]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <HAL_RCC_OscConfig+0x17e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e392      	b.n	8002b0c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023e6:	4b42      	ldr	r3, [pc, #264]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 0219 	bic.w	r2, r3, #25
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	493f      	ldr	r1, [pc, #252]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f8:	f7fe fe72 	bl	80010e0 <HAL_GetTick>
 80023fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002400:	f7fe fe6e 	bl	80010e0 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e37c      	b.n	8002b0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002412:	4b37      	ldr	r3, [pc, #220]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241e:	f7fe fe8f 	bl	8001140 <HAL_GetREVID>
 8002422:	4603      	mov	r3, r0
 8002424:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002428:	4293      	cmp	r3, r2
 800242a:	d817      	bhi.n	800245c <HAL_RCC_OscConfig+0x1f4>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	2b40      	cmp	r3, #64	@ 0x40
 8002432:	d108      	bne.n	8002446 <HAL_RCC_OscConfig+0x1de>
 8002434:	4b2e      	ldr	r3, [pc, #184]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800243c:	4a2c      	ldr	r2, [pc, #176]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 800243e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002442:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002444:	e07a      	b.n	800253c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002446:	4b2a      	ldr	r3, [pc, #168]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	031b      	lsls	r3, r3, #12
 8002454:	4926      	ldr	r1, [pc, #152]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 8002456:	4313      	orrs	r3, r2
 8002458:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800245a:	e06f      	b.n	800253c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245c:	4b24      	ldr	r3, [pc, #144]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	061b      	lsls	r3, r3, #24
 800246a:	4921      	ldr	r1, [pc, #132]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 800246c:	4313      	orrs	r3, r2
 800246e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002470:	e064      	b.n	800253c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d047      	beq.n	800250a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800247a:	4b1d      	ldr	r3, [pc, #116]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 0219 	bic.w	r2, r3, #25
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	491a      	ldr	r1, [pc, #104]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 8002488:	4313      	orrs	r3, r2
 800248a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7fe fe28 	bl	80010e0 <HAL_GetTick>
 8002490:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002494:	f7fe fe24 	bl	80010e0 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e332      	b.n	8002b0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024a6:	4b12      	ldr	r3, [pc, #72]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b2:	f7fe fe45 	bl	8001140 <HAL_GetREVID>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80024bc:	4293      	cmp	r3, r2
 80024be:	d819      	bhi.n	80024f4 <HAL_RCC_OscConfig+0x28c>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	2b40      	cmp	r3, #64	@ 0x40
 80024c6:	d108      	bne.n	80024da <HAL_RCC_OscConfig+0x272>
 80024c8:	4b09      	ldr	r3, [pc, #36]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80024d0:	4a07      	ldr	r2, [pc, #28]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 80024d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024d6:	6053      	str	r3, [r2, #4]
 80024d8:	e030      	b.n	800253c <HAL_RCC_OscConfig+0x2d4>
 80024da:	4b05      	ldr	r3, [pc, #20]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	031b      	lsls	r3, r3, #12
 80024e8:	4901      	ldr	r1, [pc, #4]	@ (80024f0 <HAL_RCC_OscConfig+0x288>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	604b      	str	r3, [r1, #4]
 80024ee:	e025      	b.n	800253c <HAL_RCC_OscConfig+0x2d4>
 80024f0:	58024400 	.word	0x58024400
 80024f4:	4b9a      	ldr	r3, [pc, #616]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	061b      	lsls	r3, r3, #24
 8002502:	4997      	ldr	r1, [pc, #604]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]
 8002508:	e018      	b.n	800253c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800250a:	4b95      	ldr	r3, [pc, #596]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a94      	ldr	r2, [pc, #592]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 8002510:	f023 0301 	bic.w	r3, r3, #1
 8002514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002516:	f7fe fde3 	bl	80010e0 <HAL_GetTick>
 800251a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800251e:	f7fe fddf 	bl	80010e0 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e2ed      	b.n	8002b0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002530:	4b8b      	ldr	r3, [pc, #556]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1f0      	bne.n	800251e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80a9 	beq.w	800269c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800254a:	4b85      	ldr	r3, [pc, #532]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002552:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002554:	4b82      	ldr	r3, [pc, #520]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 8002556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002558:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	2b08      	cmp	r3, #8
 800255e:	d007      	beq.n	8002570 <HAL_RCC_OscConfig+0x308>
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	2b18      	cmp	r3, #24
 8002564:	d13a      	bne.n	80025dc <HAL_RCC_OscConfig+0x374>
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	2b01      	cmp	r3, #1
 800256e:	d135      	bne.n	80025dc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002570:	4b7b      	ldr	r3, [pc, #492]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_RCC_OscConfig+0x320>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	2b80      	cmp	r3, #128	@ 0x80
 8002582:	d001      	beq.n	8002588 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e2c1      	b.n	8002b0c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002588:	f7fe fdda 	bl	8001140 <HAL_GetREVID>
 800258c:	4603      	mov	r3, r0
 800258e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002592:	4293      	cmp	r3, r2
 8002594:	d817      	bhi.n	80025c6 <HAL_RCC_OscConfig+0x35e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	2b20      	cmp	r3, #32
 800259c:	d108      	bne.n	80025b0 <HAL_RCC_OscConfig+0x348>
 800259e:	4b70      	ldr	r3, [pc, #448]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80025a6:	4a6e      	ldr	r2, [pc, #440]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 80025a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80025ac:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025ae:	e075      	b.n	800269c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025b0:	4b6b      	ldr	r3, [pc, #428]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	069b      	lsls	r3, r3, #26
 80025be:	4968      	ldr	r1, [pc, #416]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025c4:	e06a      	b.n	800269c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025c6:	4b66      	ldr	r3, [pc, #408]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	061b      	lsls	r3, r3, #24
 80025d4:	4962      	ldr	r1, [pc, #392]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025da:	e05f      	b.n	800269c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d042      	beq.n	800266a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a5d      	ldr	r2, [pc, #372]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 80025ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7fe fd76 	bl	80010e0 <HAL_GetTick>
 80025f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80025f8:	f7fe fd72 	bl	80010e0 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e280      	b.n	8002b0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800260a:	4b55      	ldr	r3, [pc, #340]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002616:	f7fe fd93 	bl	8001140 <HAL_GetREVID>
 800261a:	4603      	mov	r3, r0
 800261c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002620:	4293      	cmp	r3, r2
 8002622:	d817      	bhi.n	8002654 <HAL_RCC_OscConfig+0x3ec>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	2b20      	cmp	r3, #32
 800262a:	d108      	bne.n	800263e <HAL_RCC_OscConfig+0x3d6>
 800262c:	4b4c      	ldr	r3, [pc, #304]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002634:	4a4a      	ldr	r2, [pc, #296]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 8002636:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800263a:	6053      	str	r3, [r2, #4]
 800263c:	e02e      	b.n	800269c <HAL_RCC_OscConfig+0x434>
 800263e:	4b48      	ldr	r3, [pc, #288]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	069b      	lsls	r3, r3, #26
 800264c:	4944      	ldr	r1, [pc, #272]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 800264e:	4313      	orrs	r3, r2
 8002650:	604b      	str	r3, [r1, #4]
 8002652:	e023      	b.n	800269c <HAL_RCC_OscConfig+0x434>
 8002654:	4b42      	ldr	r3, [pc, #264]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	061b      	lsls	r3, r3, #24
 8002662:	493f      	ldr	r1, [pc, #252]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 8002664:	4313      	orrs	r3, r2
 8002666:	60cb      	str	r3, [r1, #12]
 8002668:	e018      	b.n	800269c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800266a:	4b3d      	ldr	r3, [pc, #244]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a3c      	ldr	r2, [pc, #240]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 8002670:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002676:	f7fe fd33 	bl	80010e0 <HAL_GetTick>
 800267a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800267e:	f7fe fd2f 	bl	80010e0 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e23d      	b.n	8002b0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002690:	4b33      	ldr	r3, [pc, #204]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f0      	bne.n	800267e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d036      	beq.n	8002716 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d019      	beq.n	80026e4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 80026b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b4:	4a2a      	ldr	r2, [pc, #168]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026bc:	f7fe fd10 	bl	80010e0 <HAL_GetTick>
 80026c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c4:	f7fe fd0c 	bl	80010e0 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e21a      	b.n	8002b0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026d6:	4b22      	ldr	r3, [pc, #136]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 80026d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f0      	beq.n	80026c4 <HAL_RCC_OscConfig+0x45c>
 80026e2:	e018      	b.n	8002716 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 80026e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 80026ea:	f023 0301 	bic.w	r3, r3, #1
 80026ee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f0:	f7fe fcf6 	bl	80010e0 <HAL_GetTick>
 80026f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f8:	f7fe fcf2 	bl	80010e0 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e200      	b.n	8002b0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800270a:	4b15      	ldr	r3, [pc, #84]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 800270c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	2b00      	cmp	r3, #0
 8002720:	d039      	beq.n	8002796 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d01c      	beq.n	8002764 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800272a:	4b0d      	ldr	r3, [pc, #52]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a0c      	ldr	r2, [pc, #48]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 8002730:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002734:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002736:	f7fe fcd3 	bl	80010e0 <HAL_GetTick>
 800273a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800273e:	f7fe fccf 	bl	80010e0 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e1dd      	b.n	8002b0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002750:	4b03      	ldr	r3, [pc, #12]	@ (8002760 <HAL_RCC_OscConfig+0x4f8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0f0      	beq.n	800273e <HAL_RCC_OscConfig+0x4d6>
 800275c:	e01b      	b.n	8002796 <HAL_RCC_OscConfig+0x52e>
 800275e:	bf00      	nop
 8002760:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002764:	4b9b      	ldr	r3, [pc, #620]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a9a      	ldr	r2, [pc, #616]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 800276a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800276e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002770:	f7fe fcb6 	bl	80010e0 <HAL_GetTick>
 8002774:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002778:	f7fe fcb2 	bl	80010e0 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e1c0      	b.n	8002b0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800278a:	4b92      	ldr	r3, [pc, #584]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8081 	beq.w	80028a6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027a4:	4b8c      	ldr	r3, [pc, #560]	@ (80029d8 <HAL_RCC_OscConfig+0x770>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a8b      	ldr	r2, [pc, #556]	@ (80029d8 <HAL_RCC_OscConfig+0x770>)
 80027aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027b0:	f7fe fc96 	bl	80010e0 <HAL_GetTick>
 80027b4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b8:	f7fe fc92 	bl	80010e0 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b64      	cmp	r3, #100	@ 0x64
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e1a0      	b.n	8002b0c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027ca:	4b83      	ldr	r3, [pc, #524]	@ (80029d8 <HAL_RCC_OscConfig+0x770>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d106      	bne.n	80027ec <HAL_RCC_OscConfig+0x584>
 80027de:	4b7d      	ldr	r3, [pc, #500]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e2:	4a7c      	ldr	r2, [pc, #496]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ea:	e02d      	b.n	8002848 <HAL_RCC_OscConfig+0x5e0>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10c      	bne.n	800280e <HAL_RCC_OscConfig+0x5a6>
 80027f4:	4b77      	ldr	r3, [pc, #476]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 80027f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f8:	4a76      	ldr	r2, [pc, #472]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 80027fa:	f023 0301 	bic.w	r3, r3, #1
 80027fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002800:	4b74      	ldr	r3, [pc, #464]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002804:	4a73      	ldr	r2, [pc, #460]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 8002806:	f023 0304 	bic.w	r3, r3, #4
 800280a:	6713      	str	r3, [r2, #112]	@ 0x70
 800280c:	e01c      	b.n	8002848 <HAL_RCC_OscConfig+0x5e0>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2b05      	cmp	r3, #5
 8002814:	d10c      	bne.n	8002830 <HAL_RCC_OscConfig+0x5c8>
 8002816:	4b6f      	ldr	r3, [pc, #444]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 8002818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281a:	4a6e      	ldr	r2, [pc, #440]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 800281c:	f043 0304 	orr.w	r3, r3, #4
 8002820:	6713      	str	r3, [r2, #112]	@ 0x70
 8002822:	4b6c      	ldr	r3, [pc, #432]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002826:	4a6b      	ldr	r2, [pc, #428]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6713      	str	r3, [r2, #112]	@ 0x70
 800282e:	e00b      	b.n	8002848 <HAL_RCC_OscConfig+0x5e0>
 8002830:	4b68      	ldr	r3, [pc, #416]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 8002832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002834:	4a67      	ldr	r2, [pc, #412]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 8002836:	f023 0301 	bic.w	r3, r3, #1
 800283a:	6713      	str	r3, [r2, #112]	@ 0x70
 800283c:	4b65      	ldr	r3, [pc, #404]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 800283e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002840:	4a64      	ldr	r2, [pc, #400]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 8002842:	f023 0304 	bic.w	r3, r3, #4
 8002846:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d015      	beq.n	800287c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002850:	f7fe fc46 	bl	80010e0 <HAL_GetTick>
 8002854:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002856:	e00a      	b.n	800286e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002858:	f7fe fc42 	bl	80010e0 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002866:	4293      	cmp	r3, r2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e14e      	b.n	8002b0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800286e:	4b59      	ldr	r3, [pc, #356]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 8002870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0ee      	beq.n	8002858 <HAL_RCC_OscConfig+0x5f0>
 800287a:	e014      	b.n	80028a6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287c:	f7fe fc30 	bl	80010e0 <HAL_GetTick>
 8002880:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002882:	e00a      	b.n	800289a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002884:	f7fe fc2c 	bl	80010e0 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e138      	b.n	8002b0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800289a:	4b4e      	ldr	r3, [pc, #312]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 800289c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1ee      	bne.n	8002884 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 812d 	beq.w	8002b0a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80028b0:	4b48      	ldr	r3, [pc, #288]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028b8:	2b18      	cmp	r3, #24
 80028ba:	f000 80bd 	beq.w	8002a38 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	f040 809e 	bne.w	8002a04 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c8:	4b42      	ldr	r3, [pc, #264]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a41      	ldr	r2, [pc, #260]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 80028ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe fc04 	bl	80010e0 <HAL_GetTick>
 80028d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028dc:	f7fe fc00 	bl	80010e0 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e10e      	b.n	8002b0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028ee:	4b39      	ldr	r3, [pc, #228]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028fa:	4b36      	ldr	r3, [pc, #216]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 80028fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028fe:	4b37      	ldr	r3, [pc, #220]	@ (80029dc <HAL_RCC_OscConfig+0x774>)
 8002900:	4013      	ands	r3, r2
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800290a:	0112      	lsls	r2, r2, #4
 800290c:	430a      	orrs	r2, r1
 800290e:	4931      	ldr	r1, [pc, #196]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 8002910:	4313      	orrs	r3, r2
 8002912:	628b      	str	r3, [r1, #40]	@ 0x28
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002918:	3b01      	subs	r3, #1
 800291a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002922:	3b01      	subs	r3, #1
 8002924:	025b      	lsls	r3, r3, #9
 8002926:	b29b      	uxth	r3, r3
 8002928:	431a      	orrs	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800292e:	3b01      	subs	r3, #1
 8002930:	041b      	lsls	r3, r3, #16
 8002932:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800293c:	3b01      	subs	r3, #1
 800293e:	061b      	lsls	r3, r3, #24
 8002940:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002944:	4923      	ldr	r1, [pc, #140]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 8002946:	4313      	orrs	r3, r2
 8002948:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800294a:	4b22      	ldr	r3, [pc, #136]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 800294c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294e:	4a21      	ldr	r2, [pc, #132]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002956:	4b1f      	ldr	r3, [pc, #124]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 8002958:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800295a:	4b21      	ldr	r3, [pc, #132]	@ (80029e0 <HAL_RCC_OscConfig+0x778>)
 800295c:	4013      	ands	r3, r2
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002962:	00d2      	lsls	r2, r2, #3
 8002964:	491b      	ldr	r1, [pc, #108]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 8002966:	4313      	orrs	r3, r2
 8002968:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800296a:	4b1a      	ldr	r3, [pc, #104]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 800296c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296e:	f023 020c 	bic.w	r2, r3, #12
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002976:	4917      	ldr	r1, [pc, #92]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 8002978:	4313      	orrs	r3, r2
 800297a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800297c:	4b15      	ldr	r3, [pc, #84]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 800297e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002980:	f023 0202 	bic.w	r2, r3, #2
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002988:	4912      	ldr	r1, [pc, #72]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 800298a:	4313      	orrs	r3, r2
 800298c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800298e:	4b11      	ldr	r3, [pc, #68]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 8002990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002992:	4a10      	ldr	r2, [pc, #64]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 8002994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002998:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800299a:	4b0e      	ldr	r3, [pc, #56]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 800299c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299e:	4a0d      	ldr	r2, [pc, #52]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 80029a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80029a6:	4b0b      	ldr	r3, [pc, #44]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 80029a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029aa:	4a0a      	ldr	r2, [pc, #40]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 80029ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80029b2:	4b08      	ldr	r3, [pc, #32]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 80029b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b6:	4a07      	ldr	r2, [pc, #28]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029be:	4b05      	ldr	r3, [pc, #20]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a04      	ldr	r2, [pc, #16]	@ (80029d4 <HAL_RCC_OscConfig+0x76c>)
 80029c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ca:	f7fe fb89 	bl	80010e0 <HAL_GetTick>
 80029ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029d0:	e011      	b.n	80029f6 <HAL_RCC_OscConfig+0x78e>
 80029d2:	bf00      	nop
 80029d4:	58024400 	.word	0x58024400
 80029d8:	58024800 	.word	0x58024800
 80029dc:	fffffc0c 	.word	0xfffffc0c
 80029e0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e4:	f7fe fb7c 	bl	80010e0 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e08a      	b.n	8002b0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029f6:	4b47      	ldr	r3, [pc, #284]	@ (8002b14 <HAL_RCC_OscConfig+0x8ac>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0x77c>
 8002a02:	e082      	b.n	8002b0a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a04:	4b43      	ldr	r3, [pc, #268]	@ (8002b14 <HAL_RCC_OscConfig+0x8ac>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a42      	ldr	r2, [pc, #264]	@ (8002b14 <HAL_RCC_OscConfig+0x8ac>)
 8002a0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7fe fb66 	bl	80010e0 <HAL_GetTick>
 8002a14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a18:	f7fe fb62 	bl	80010e0 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e070      	b.n	8002b0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a2a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b14 <HAL_RCC_OscConfig+0x8ac>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x7b0>
 8002a36:	e068      	b.n	8002b0a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a38:	4b36      	ldr	r3, [pc, #216]	@ (8002b14 <HAL_RCC_OscConfig+0x8ac>)
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a3e:	4b35      	ldr	r3, [pc, #212]	@ (8002b14 <HAL_RCC_OscConfig+0x8ac>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d031      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f003 0203 	and.w	r2, r3, #3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d12a      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d122      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a74:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d11a      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	0a5b      	lsrs	r3, r3, #9
 8002a7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a86:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d111      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	0c1b      	lsrs	r3, r3, #16
 8002a90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a98:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d108      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	0e1b      	lsrs	r3, r3, #24
 8002aa2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aaa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e02b      	b.n	8002b0c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002ab4:	4b17      	ldr	r3, [pc, #92]	@ (8002b14 <HAL_RCC_OscConfig+0x8ac>)
 8002ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab8:	08db      	lsrs	r3, r3, #3
 8002aba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002abe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d01f      	beq.n	8002b0a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002aca:	4b12      	ldr	r3, [pc, #72]	@ (8002b14 <HAL_RCC_OscConfig+0x8ac>)
 8002acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ace:	4a11      	ldr	r2, [pc, #68]	@ (8002b14 <HAL_RCC_OscConfig+0x8ac>)
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ad6:	f7fe fb03 	bl	80010e0 <HAL_GetTick>
 8002ada:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002adc:	bf00      	nop
 8002ade:	f7fe faff 	bl	80010e0 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d0f9      	beq.n	8002ade <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002aea:	4b0a      	ldr	r3, [pc, #40]	@ (8002b14 <HAL_RCC_OscConfig+0x8ac>)
 8002aec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002aee:	4b0a      	ldr	r3, [pc, #40]	@ (8002b18 <HAL_RCC_OscConfig+0x8b0>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002af6:	00d2      	lsls	r2, r2, #3
 8002af8:	4906      	ldr	r1, [pc, #24]	@ (8002b14 <HAL_RCC_OscConfig+0x8ac>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002afe:	4b05      	ldr	r3, [pc, #20]	@ (8002b14 <HAL_RCC_OscConfig+0x8ac>)
 8002b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b02:	4a04      	ldr	r2, [pc, #16]	@ (8002b14 <HAL_RCC_OscConfig+0x8ac>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3730      	adds	r7, #48	@ 0x30
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	58024400 	.word	0x58024400
 8002b18:	ffff0007 	.word	0xffff0007

08002b1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e19c      	b.n	8002e6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b30:	4b8a      	ldr	r3, [pc, #552]	@ (8002d5c <HAL_RCC_ClockConfig+0x240>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d910      	bls.n	8002b60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b87      	ldr	r3, [pc, #540]	@ (8002d5c <HAL_RCC_ClockConfig+0x240>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 020f 	bic.w	r2, r3, #15
 8002b46:	4985      	ldr	r1, [pc, #532]	@ (8002d5c <HAL_RCC_ClockConfig+0x240>)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b83      	ldr	r3, [pc, #524]	@ (8002d5c <HAL_RCC_ClockConfig+0x240>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e184      	b.n	8002e6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d010      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	4b7b      	ldr	r3, [pc, #492]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d908      	bls.n	8002b8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b7c:	4b78      	ldr	r3, [pc, #480]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	4975      	ldr	r1, [pc, #468]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d010      	beq.n	8002bbc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	4b70      	ldr	r3, [pc, #448]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d908      	bls.n	8002bbc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002baa:	4b6d      	ldr	r3, [pc, #436]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	496a      	ldr	r1, [pc, #424]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d010      	beq.n	8002bea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699a      	ldr	r2, [r3, #24]
 8002bcc:	4b64      	ldr	r3, [pc, #400]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d908      	bls.n	8002bea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bd8:	4b61      	ldr	r3, [pc, #388]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	495e      	ldr	r1, [pc, #376]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0320 	and.w	r3, r3, #32
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d010      	beq.n	8002c18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69da      	ldr	r2, [r3, #28]
 8002bfa:	4b59      	ldr	r3, [pc, #356]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d908      	bls.n	8002c18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c06:	4b56      	ldr	r3, [pc, #344]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	4953      	ldr	r1, [pc, #332]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d010      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	4b4d      	ldr	r3, [pc, #308]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	f003 030f 	and.w	r3, r3, #15
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d908      	bls.n	8002c46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c34:	4b4a      	ldr	r3, [pc, #296]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f023 020f 	bic.w	r2, r3, #15
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4947      	ldr	r1, [pc, #284]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d055      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c52:	4b43      	ldr	r3, [pc, #268]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	4940      	ldr	r1, [pc, #256]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d107      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c6c:	4b3c      	ldr	r3, [pc, #240]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d121      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0f6      	b.n	8002e6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d107      	bne.n	8002c94 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c84:	4b36      	ldr	r3, [pc, #216]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d115      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0ea      	b.n	8002e6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d107      	bne.n	8002cac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c9c:	4b30      	ldr	r3, [pc, #192]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d109      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0de      	b.n	8002e6a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cac:	4b2c      	ldr	r3, [pc, #176]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e0d6      	b.n	8002e6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cbc:	4b28      	ldr	r3, [pc, #160]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f023 0207 	bic.w	r2, r3, #7
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	4925      	ldr	r1, [pc, #148]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cce:	f7fe fa07 	bl	80010e0 <HAL_GetTick>
 8002cd2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd4:	e00a      	b.n	8002cec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd6:	f7fe fa03 	bl	80010e0 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e0be      	b.n	8002e6a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cec:	4b1c      	ldr	r3, [pc, #112]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d1eb      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d010      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	4b14      	ldr	r3, [pc, #80]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d208      	bcs.n	8002d2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d1a:	4b11      	ldr	r3, [pc, #68]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	f023 020f 	bic.w	r2, r3, #15
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	490e      	ldr	r1, [pc, #56]	@ (8002d60 <HAL_RCC_ClockConfig+0x244>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d5c <HAL_RCC_ClockConfig+0x240>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d214      	bcs.n	8002d64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3a:	4b08      	ldr	r3, [pc, #32]	@ (8002d5c <HAL_RCC_ClockConfig+0x240>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 020f 	bic.w	r2, r3, #15
 8002d42:	4906      	ldr	r1, [pc, #24]	@ (8002d5c <HAL_RCC_ClockConfig+0x240>)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4a:	4b04      	ldr	r3, [pc, #16]	@ (8002d5c <HAL_RCC_ClockConfig+0x240>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e086      	b.n	8002e6a <HAL_RCC_ClockConfig+0x34e>
 8002d5c:	52002000 	.word	0x52002000
 8002d60:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d010      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	4b3f      	ldr	r3, [pc, #252]	@ (8002e74 <HAL_RCC_ClockConfig+0x358>)
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d208      	bcs.n	8002d92 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d80:	4b3c      	ldr	r3, [pc, #240]	@ (8002e74 <HAL_RCC_ClockConfig+0x358>)
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	4939      	ldr	r1, [pc, #228]	@ (8002e74 <HAL_RCC_ClockConfig+0x358>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d010      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	4b34      	ldr	r3, [pc, #208]	@ (8002e74 <HAL_RCC_ClockConfig+0x358>)
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d208      	bcs.n	8002dc0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002dae:	4b31      	ldr	r3, [pc, #196]	@ (8002e74 <HAL_RCC_ClockConfig+0x358>)
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	492e      	ldr	r1, [pc, #184]	@ (8002e74 <HAL_RCC_ClockConfig+0x358>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d010      	beq.n	8002dee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699a      	ldr	r2, [r3, #24]
 8002dd0:	4b28      	ldr	r3, [pc, #160]	@ (8002e74 <HAL_RCC_ClockConfig+0x358>)
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d208      	bcs.n	8002dee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ddc:	4b25      	ldr	r3, [pc, #148]	@ (8002e74 <HAL_RCC_ClockConfig+0x358>)
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	4922      	ldr	r1, [pc, #136]	@ (8002e74 <HAL_RCC_ClockConfig+0x358>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0320 	and.w	r3, r3, #32
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d010      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69da      	ldr	r2, [r3, #28]
 8002dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8002e74 <HAL_RCC_ClockConfig+0x358>)
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d208      	bcs.n	8002e1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e74 <HAL_RCC_ClockConfig+0x358>)
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	4917      	ldr	r1, [pc, #92]	@ (8002e74 <HAL_RCC_ClockConfig+0x358>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e1c:	f000 f834 	bl	8002e88 <HAL_RCC_GetSysClockFreq>
 8002e20:	4602      	mov	r2, r0
 8002e22:	4b14      	ldr	r3, [pc, #80]	@ (8002e74 <HAL_RCC_ClockConfig+0x358>)
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	0a1b      	lsrs	r3, r3, #8
 8002e28:	f003 030f 	and.w	r3, r3, #15
 8002e2c:	4912      	ldr	r1, [pc, #72]	@ (8002e78 <HAL_RCC_ClockConfig+0x35c>)
 8002e2e:	5ccb      	ldrb	r3, [r1, r3]
 8002e30:	f003 031f 	and.w	r3, r3, #31
 8002e34:	fa22 f303 	lsr.w	r3, r2, r3
 8002e38:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e74 <HAL_RCC_ClockConfig+0x358>)
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	4a0d      	ldr	r2, [pc, #52]	@ (8002e78 <HAL_RCC_ClockConfig+0x35c>)
 8002e44:	5cd3      	ldrb	r3, [r2, r3]
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e50:	4a0a      	ldr	r2, [pc, #40]	@ (8002e7c <HAL_RCC_ClockConfig+0x360>)
 8002e52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e54:	4a0a      	ldr	r2, [pc, #40]	@ (8002e80 <HAL_RCC_ClockConfig+0x364>)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e84 <HAL_RCC_ClockConfig+0x368>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fe f8f4 	bl	800104c <HAL_InitTick>
 8002e64:	4603      	mov	r3, r0
 8002e66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	58024400 	.word	0x58024400
 8002e78:	080066c4 	.word	0x080066c4
 8002e7c:	24000004 	.word	0x24000004
 8002e80:	24000000 	.word	0x24000000
 8002e84:	24000008 	.word	0x24000008

08002e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b089      	sub	sp, #36	@ 0x24
 8002e8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e8e:	4bb3      	ldr	r3, [pc, #716]	@ (800315c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e96:	2b18      	cmp	r3, #24
 8002e98:	f200 8155 	bhi.w	8003146 <HAL_RCC_GetSysClockFreq+0x2be>
 8002e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea2:	bf00      	nop
 8002ea4:	08002f09 	.word	0x08002f09
 8002ea8:	08003147 	.word	0x08003147
 8002eac:	08003147 	.word	0x08003147
 8002eb0:	08003147 	.word	0x08003147
 8002eb4:	08003147 	.word	0x08003147
 8002eb8:	08003147 	.word	0x08003147
 8002ebc:	08003147 	.word	0x08003147
 8002ec0:	08003147 	.word	0x08003147
 8002ec4:	08002f2f 	.word	0x08002f2f
 8002ec8:	08003147 	.word	0x08003147
 8002ecc:	08003147 	.word	0x08003147
 8002ed0:	08003147 	.word	0x08003147
 8002ed4:	08003147 	.word	0x08003147
 8002ed8:	08003147 	.word	0x08003147
 8002edc:	08003147 	.word	0x08003147
 8002ee0:	08003147 	.word	0x08003147
 8002ee4:	08002f35 	.word	0x08002f35
 8002ee8:	08003147 	.word	0x08003147
 8002eec:	08003147 	.word	0x08003147
 8002ef0:	08003147 	.word	0x08003147
 8002ef4:	08003147 	.word	0x08003147
 8002ef8:	08003147 	.word	0x08003147
 8002efc:	08003147 	.word	0x08003147
 8002f00:	08003147 	.word	0x08003147
 8002f04:	08002f3b 	.word	0x08002f3b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f08:	4b94      	ldr	r3, [pc, #592]	@ (800315c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0320 	and.w	r3, r3, #32
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d009      	beq.n	8002f28 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f14:	4b91      	ldr	r3, [pc, #580]	@ (800315c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	08db      	lsrs	r3, r3, #3
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	4a90      	ldr	r2, [pc, #576]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f20:	fa22 f303 	lsr.w	r3, r2, r3
 8002f24:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002f26:	e111      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f28:	4b8d      	ldr	r3, [pc, #564]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f2a:	61bb      	str	r3, [r7, #24]
      break;
 8002f2c:	e10e      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002f2e:	4b8d      	ldr	r3, [pc, #564]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f30:	61bb      	str	r3, [r7, #24]
      break;
 8002f32:	e10b      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002f34:	4b8c      	ldr	r3, [pc, #560]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002f36:	61bb      	str	r3, [r7, #24]
      break;
 8002f38:	e108      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f3a:	4b88      	ldr	r3, [pc, #544]	@ (800315c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002f44:	4b85      	ldr	r3, [pc, #532]	@ (800315c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f4e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f50:	4b82      	ldr	r3, [pc, #520]	@ (800315c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002f5a:	4b80      	ldr	r3, [pc, #512]	@ (800315c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f5e:	08db      	lsrs	r3, r3, #3
 8002f60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	fb02 f303 	mul.w	r3, r2, r3
 8002f6a:	ee07 3a90 	vmov	s15, r3
 8002f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f72:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80e1 	beq.w	8003140 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	f000 8083 	beq.w	800308c <HAL_RCC_GetSysClockFreq+0x204>
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	f200 80a1 	bhi.w	80030d0 <HAL_RCC_GetSysClockFreq+0x248>
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_RCC_GetSysClockFreq+0x114>
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d056      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f9a:	e099      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f9c:	4b6f      	ldr	r3, [pc, #444]	@ (800315c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0320 	and.w	r3, r3, #32
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d02d      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fa8:	4b6c      	ldr	r3, [pc, #432]	@ (800315c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	08db      	lsrs	r3, r3, #3
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	4a6b      	ldr	r2, [pc, #428]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	ee07 3a90 	vmov	s15, r3
 8002fc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	ee07 3a90 	vmov	s15, r3
 8002fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fd2:	4b62      	ldr	r3, [pc, #392]	@ (800315c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fda:	ee07 3a90 	vmov	s15, r3
 8002fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fe2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fe6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800316c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ffe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003002:	e087      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	ee07 3a90 	vmov	s15, r3
 800300a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800300e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003170 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003016:	4b51      	ldr	r3, [pc, #324]	@ (800315c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800301e:	ee07 3a90 	vmov	s15, r3
 8003022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003026:	ed97 6a02 	vldr	s12, [r7, #8]
 800302a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800316c <HAL_RCC_GetSysClockFreq+0x2e4>
 800302e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800303a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800303e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003042:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003046:	e065      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	ee07 3a90 	vmov	s15, r3
 800304e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003052:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003174 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800305a:	4b40      	ldr	r3, [pc, #256]	@ (800315c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003062:	ee07 3a90 	vmov	s15, r3
 8003066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800306a:	ed97 6a02 	vldr	s12, [r7, #8]
 800306e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800316c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800307a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800307e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003086:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800308a:	e043      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	ee07 3a90 	vmov	s15, r3
 8003092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003096:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003178 <HAL_RCC_GetSysClockFreq+0x2f0>
 800309a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800309e:	4b2f      	ldr	r3, [pc, #188]	@ (800315c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030a6:	ee07 3a90 	vmov	s15, r3
 80030aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80030b2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800316c <HAL_RCC_GetSysClockFreq+0x2e4>
 80030b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030ce:	e021      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	ee07 3a90 	vmov	s15, r3
 80030d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030da:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003174 <HAL_RCC_GetSysClockFreq+0x2ec>
 80030de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030e2:	4b1e      	ldr	r3, [pc, #120]	@ (800315c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ea:	ee07 3a90 	vmov	s15, r3
 80030ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80030f6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800316c <HAL_RCC_GetSysClockFreq+0x2e4>
 80030fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800310a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800310e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003112:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003114:	4b11      	ldr	r3, [pc, #68]	@ (800315c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003118:	0a5b      	lsrs	r3, r3, #9
 800311a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800311e:	3301      	adds	r3, #1
 8003120:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	ee07 3a90 	vmov	s15, r3
 8003128:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800312c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003134:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003138:	ee17 3a90 	vmov	r3, s15
 800313c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800313e:	e005      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	61bb      	str	r3, [r7, #24]
      break;
 8003144:	e002      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003146:	4b07      	ldr	r3, [pc, #28]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003148:	61bb      	str	r3, [r7, #24]
      break;
 800314a:	bf00      	nop
  }

  return sysclockfreq;
 800314c:	69bb      	ldr	r3, [r7, #24]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3724      	adds	r7, #36	@ 0x24
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	58024400 	.word	0x58024400
 8003160:	03d09000 	.word	0x03d09000
 8003164:	003d0900 	.word	0x003d0900
 8003168:	007a1200 	.word	0x007a1200
 800316c:	46000000 	.word	0x46000000
 8003170:	4c742400 	.word	0x4c742400
 8003174:	4a742400 	.word	0x4a742400
 8003178:	4af42400 	.word	0x4af42400

0800317c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003182:	f7ff fe81 	bl	8002e88 <HAL_RCC_GetSysClockFreq>
 8003186:	4602      	mov	r2, r0
 8003188:	4b10      	ldr	r3, [pc, #64]	@ (80031cc <HAL_RCC_GetHCLKFreq+0x50>)
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	0a1b      	lsrs	r3, r3, #8
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	490f      	ldr	r1, [pc, #60]	@ (80031d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003194:	5ccb      	ldrb	r3, [r1, r3]
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	fa22 f303 	lsr.w	r3, r2, r3
 800319e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031a0:	4b0a      	ldr	r3, [pc, #40]	@ (80031cc <HAL_RCC_GetHCLKFreq+0x50>)
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	4a09      	ldr	r2, [pc, #36]	@ (80031d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80031aa:	5cd3      	ldrb	r3, [r2, r3]
 80031ac:	f003 031f 	and.w	r3, r3, #31
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	fa22 f303 	lsr.w	r3, r2, r3
 80031b6:	4a07      	ldr	r2, [pc, #28]	@ (80031d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80031b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031ba:	4a07      	ldr	r2, [pc, #28]	@ (80031d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80031c0:	4b04      	ldr	r3, [pc, #16]	@ (80031d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80031c2:	681b      	ldr	r3, [r3, #0]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	58024400 	.word	0x58024400
 80031d0:	080066c4 	.word	0x080066c4
 80031d4:	24000004 	.word	0x24000004
 80031d8:	24000000 	.word	0x24000000

080031dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80031e0:	f7ff ffcc 	bl	800317c <HAL_RCC_GetHCLKFreq>
 80031e4:	4602      	mov	r2, r0
 80031e6:	4b06      	ldr	r3, [pc, #24]	@ (8003200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	091b      	lsrs	r3, r3, #4
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	4904      	ldr	r1, [pc, #16]	@ (8003204 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031f2:	5ccb      	ldrb	r3, [r1, r3]
 80031f4:	f003 031f 	and.w	r3, r3, #31
 80031f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	58024400 	.word	0x58024400
 8003204:	080066c4 	.word	0x080066c4

08003208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800320c:	f7ff ffb6 	bl	800317c <HAL_RCC_GetHCLKFreq>
 8003210:	4602      	mov	r2, r0
 8003212:	4b06      	ldr	r3, [pc, #24]	@ (800322c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	0a1b      	lsrs	r3, r3, #8
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	4904      	ldr	r1, [pc, #16]	@ (8003230 <HAL_RCC_GetPCLK2Freq+0x28>)
 800321e:	5ccb      	ldrb	r3, [r1, r3]
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003228:	4618      	mov	r0, r3
 800322a:	bd80      	pop	{r7, pc}
 800322c:	58024400 	.word	0x58024400
 8003230:	080066c4 	.word	0x080066c4

08003234 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003238:	b0ca      	sub	sp, #296	@ 0x128
 800323a:	af00      	add	r7, sp, #0
 800323c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003240:	2300      	movs	r3, #0
 8003242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003246:	2300      	movs	r3, #0
 8003248:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800324c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003254:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003258:	2500      	movs	r5, #0
 800325a:	ea54 0305 	orrs.w	r3, r4, r5
 800325e:	d049      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003264:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003266:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800326a:	d02f      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800326c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003270:	d828      	bhi.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003272:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003276:	d01a      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003278:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800327c:	d822      	bhi.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003282:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003286:	d007      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003288:	e01c      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800328a:	4bb8      	ldr	r3, [pc, #736]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800328c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328e:	4ab7      	ldr	r2, [pc, #732]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003294:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003296:	e01a      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800329c:	3308      	adds	r3, #8
 800329e:	2102      	movs	r1, #2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f001 fc8f 	bl	8004bc4 <RCCEx_PLL2_Config>
 80032a6:	4603      	mov	r3, r0
 80032a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032ac:	e00f      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b2:	3328      	adds	r3, #40	@ 0x28
 80032b4:	2102      	movs	r1, #2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f001 fd36 	bl	8004d28 <RCCEx_PLL3_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032c2:	e004      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032ca:	e000      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80032cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10a      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80032d6:	4ba5      	ldr	r3, [pc, #660]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80032de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032e4:	4aa1      	ldr	r2, [pc, #644]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032e6:	430b      	orrs	r3, r1
 80032e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80032ea:	e003      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80032f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003300:	f04f 0900 	mov.w	r9, #0
 8003304:	ea58 0309 	orrs.w	r3, r8, r9
 8003308:	d047      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800330a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800330e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003310:	2b04      	cmp	r3, #4
 8003312:	d82a      	bhi.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003314:	a201      	add	r2, pc, #4	@ (adr r2, 800331c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331a:	bf00      	nop
 800331c:	08003331 	.word	0x08003331
 8003320:	0800333f 	.word	0x0800333f
 8003324:	08003355 	.word	0x08003355
 8003328:	08003373 	.word	0x08003373
 800332c:	08003373 	.word	0x08003373
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003330:	4b8e      	ldr	r3, [pc, #568]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003334:	4a8d      	ldr	r2, [pc, #564]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003336:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800333a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800333c:	e01a      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800333e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003342:	3308      	adds	r3, #8
 8003344:	2100      	movs	r1, #0
 8003346:	4618      	mov	r0, r3
 8003348:	f001 fc3c 	bl	8004bc4 <RCCEx_PLL2_Config>
 800334c:	4603      	mov	r3, r0
 800334e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003352:	e00f      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003358:	3328      	adds	r3, #40	@ 0x28
 800335a:	2100      	movs	r1, #0
 800335c:	4618      	mov	r0, r3
 800335e:	f001 fce3 	bl	8004d28 <RCCEx_PLL3_Config>
 8003362:	4603      	mov	r3, r0
 8003364:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003368:	e004      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003370:	e000      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003372:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003374:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10a      	bne.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800337c:	4b7b      	ldr	r3, [pc, #492]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800337e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003380:	f023 0107 	bic.w	r1, r3, #7
 8003384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338a:	4a78      	ldr	r2, [pc, #480]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800338c:	430b      	orrs	r3, r1
 800338e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003390:	e003      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003396:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800339a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80033a6:	f04f 0b00 	mov.w	fp, #0
 80033aa:	ea5a 030b 	orrs.w	r3, sl, fp
 80033ae:	d04c      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80033b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033ba:	d030      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80033bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033c0:	d829      	bhi.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80033c4:	d02d      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80033c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80033c8:	d825      	bhi.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033ca:	2b80      	cmp	r3, #128	@ 0x80
 80033cc:	d018      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80033ce:	2b80      	cmp	r3, #128	@ 0x80
 80033d0:	d821      	bhi.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80033d6:	2b40      	cmp	r3, #64	@ 0x40
 80033d8:	d007      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80033da:	e01c      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033dc:	4b63      	ldr	r3, [pc, #396]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e0:	4a62      	ldr	r2, [pc, #392]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033e8:	e01c      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ee:	3308      	adds	r3, #8
 80033f0:	2100      	movs	r1, #0
 80033f2:	4618      	mov	r0, r3
 80033f4:	f001 fbe6 	bl	8004bc4 <RCCEx_PLL2_Config>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033fe:	e011      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003404:	3328      	adds	r3, #40	@ 0x28
 8003406:	2100      	movs	r1, #0
 8003408:	4618      	mov	r0, r3
 800340a:	f001 fc8d 	bl	8004d28 <RCCEx_PLL3_Config>
 800340e:	4603      	mov	r3, r0
 8003410:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003414:	e006      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800341c:	e002      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800341e:	bf00      	nop
 8003420:	e000      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003422:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003424:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10a      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800342c:	4b4f      	ldr	r3, [pc, #316]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800342e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003430:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800343a:	4a4c      	ldr	r2, [pc, #304]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800343c:	430b      	orrs	r3, r1
 800343e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003440:	e003      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003446:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800344a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003452:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003456:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800345a:	2300      	movs	r3, #0
 800345c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003460:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003464:	460b      	mov	r3, r1
 8003466:	4313      	orrs	r3, r2
 8003468:	d053      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800346a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800346e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003472:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003476:	d035      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003478:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800347c:	d82e      	bhi.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800347e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003482:	d031      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003484:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003488:	d828      	bhi.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800348a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800348e:	d01a      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003490:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003494:	d822      	bhi.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800349a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800349e:	d007      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80034a0:	e01c      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034a2:	4b32      	ldr	r3, [pc, #200]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a6:	4a31      	ldr	r2, [pc, #196]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034ae:	e01c      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b4:	3308      	adds	r3, #8
 80034b6:	2100      	movs	r1, #0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f001 fb83 	bl	8004bc4 <RCCEx_PLL2_Config>
 80034be:	4603      	mov	r3, r0
 80034c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80034c4:	e011      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ca:	3328      	adds	r3, #40	@ 0x28
 80034cc:	2100      	movs	r1, #0
 80034ce:	4618      	mov	r0, r3
 80034d0:	f001 fc2a 	bl	8004d28 <RCCEx_PLL3_Config>
 80034d4:	4603      	mov	r3, r0
 80034d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034da:	e006      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034e2:	e002      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80034e4:	bf00      	nop
 80034e6:	e000      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80034e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10b      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80034f2:	4b1e      	ldr	r3, [pc, #120]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80034fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003502:	4a1a      	ldr	r2, [pc, #104]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003504:	430b      	orrs	r3, r1
 8003506:	6593      	str	r3, [r2, #88]	@ 0x58
 8003508:	e003      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800350a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800350e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800351e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003522:	2300      	movs	r3, #0
 8003524:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003528:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800352c:	460b      	mov	r3, r1
 800352e:	4313      	orrs	r3, r2
 8003530:	d056      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003536:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800353a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800353e:	d038      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003540:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003544:	d831      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003546:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800354a:	d034      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800354c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003550:	d82b      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003552:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003556:	d01d      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003558:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800355c:	d825      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800355e:	2b00      	cmp	r3, #0
 8003560:	d006      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003562:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003566:	d00a      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003568:	e01f      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800356a:	bf00      	nop
 800356c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003570:	4ba2      	ldr	r3, [pc, #648]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003574:	4aa1      	ldr	r2, [pc, #644]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800357a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800357c:	e01c      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800357e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003582:	3308      	adds	r3, #8
 8003584:	2100      	movs	r1, #0
 8003586:	4618      	mov	r0, r3
 8003588:	f001 fb1c 	bl	8004bc4 <RCCEx_PLL2_Config>
 800358c:	4603      	mov	r3, r0
 800358e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003592:	e011      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003598:	3328      	adds	r3, #40	@ 0x28
 800359a:	2100      	movs	r1, #0
 800359c:	4618      	mov	r0, r3
 800359e:	f001 fbc3 	bl	8004d28 <RCCEx_PLL3_Config>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035a8:	e006      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035b0:	e002      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80035b2:	bf00      	nop
 80035b4:	e000      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80035b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10b      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80035c0:	4b8e      	ldr	r3, [pc, #568]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80035c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035d0:	4a8a      	ldr	r2, [pc, #552]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035d2:	430b      	orrs	r3, r1
 80035d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80035d6:	e003      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80035e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80035ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80035f0:	2300      	movs	r3, #0
 80035f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80035f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80035fa:	460b      	mov	r3, r1
 80035fc:	4313      	orrs	r3, r2
 80035fe:	d03a      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003606:	2b30      	cmp	r3, #48	@ 0x30
 8003608:	d01f      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800360a:	2b30      	cmp	r3, #48	@ 0x30
 800360c:	d819      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800360e:	2b20      	cmp	r3, #32
 8003610:	d00c      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003612:	2b20      	cmp	r3, #32
 8003614:	d815      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d019      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800361a:	2b10      	cmp	r3, #16
 800361c:	d111      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800361e:	4b77      	ldr	r3, [pc, #476]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003622:	4a76      	ldr	r2, [pc, #472]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003624:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003628:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800362a:	e011      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800362c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003630:	3308      	adds	r3, #8
 8003632:	2102      	movs	r1, #2
 8003634:	4618      	mov	r0, r3
 8003636:	f001 fac5 	bl	8004bc4 <RCCEx_PLL2_Config>
 800363a:	4603      	mov	r3, r0
 800363c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003640:	e006      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003648:	e002      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800364a:	bf00      	nop
 800364c:	e000      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800364e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003650:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10a      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003658:	4b68      	ldr	r3, [pc, #416]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800365a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800365c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003666:	4a65      	ldr	r2, [pc, #404]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003668:	430b      	orrs	r3, r1
 800366a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800366c:	e003      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003672:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003682:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003686:	2300      	movs	r3, #0
 8003688:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800368c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003690:	460b      	mov	r3, r1
 8003692:	4313      	orrs	r3, r2
 8003694:	d051      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800369c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036a0:	d035      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80036a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036a6:	d82e      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80036a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036ac:	d031      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80036ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036b2:	d828      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80036b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036b8:	d01a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80036ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036be:	d822      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80036c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036c8:	d007      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80036ca:	e01c      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036cc:	4b4b      	ldr	r3, [pc, #300]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d0:	4a4a      	ldr	r2, [pc, #296]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036d8:	e01c      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036de:	3308      	adds	r3, #8
 80036e0:	2100      	movs	r1, #0
 80036e2:	4618      	mov	r0, r3
 80036e4:	f001 fa6e 	bl	8004bc4 <RCCEx_PLL2_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036ee:	e011      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f4:	3328      	adds	r3, #40	@ 0x28
 80036f6:	2100      	movs	r1, #0
 80036f8:	4618      	mov	r0, r3
 80036fa:	f001 fb15 	bl	8004d28 <RCCEx_PLL3_Config>
 80036fe:	4603      	mov	r3, r0
 8003700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003704:	e006      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800370c:	e002      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800370e:	bf00      	nop
 8003710:	e000      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003712:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003714:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10a      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800371c:	4b37      	ldr	r3, [pc, #220]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800371e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003720:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800372a:	4a34      	ldr	r2, [pc, #208]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800372c:	430b      	orrs	r3, r1
 800372e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003730:	e003      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003736:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800373a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003742:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003746:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800374a:	2300      	movs	r3, #0
 800374c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003750:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003754:	460b      	mov	r3, r1
 8003756:	4313      	orrs	r3, r2
 8003758:	d056      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800375a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003760:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003764:	d033      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003766:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800376a:	d82c      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800376c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003770:	d02f      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003772:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003776:	d826      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003778:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800377c:	d02b      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800377e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003782:	d820      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003784:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003788:	d012      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800378a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800378e:	d81a      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003790:	2b00      	cmp	r3, #0
 8003792:	d022      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003798:	d115      	bne.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800379a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800379e:	3308      	adds	r3, #8
 80037a0:	2101      	movs	r1, #1
 80037a2:	4618      	mov	r0, r3
 80037a4:	f001 fa0e 	bl	8004bc4 <RCCEx_PLL2_Config>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80037ae:	e015      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b4:	3328      	adds	r3, #40	@ 0x28
 80037b6:	2101      	movs	r1, #1
 80037b8:	4618      	mov	r0, r3
 80037ba:	f001 fab5 	bl	8004d28 <RCCEx_PLL3_Config>
 80037be:	4603      	mov	r3, r0
 80037c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80037c4:	e00a      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037cc:	e006      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037ce:	bf00      	nop
 80037d0:	e004      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037d2:	bf00      	nop
 80037d4:	e002      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037d6:	bf00      	nop
 80037d8:	e000      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10d      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80037e4:	4b05      	ldr	r3, [pc, #20]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80037ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037f2:	4a02      	ldr	r2, [pc, #8]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037f4:	430b      	orrs	r3, r1
 80037f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80037f8:	e006      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80037fa:	bf00      	nop
 80037fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003800:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003804:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003810:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003814:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003818:	2300      	movs	r3, #0
 800381a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800381e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003822:	460b      	mov	r3, r1
 8003824:	4313      	orrs	r3, r2
 8003826:	d055      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800382c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003830:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003834:	d033      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003836:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800383a:	d82c      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800383c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003840:	d02f      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003846:	d826      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003848:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800384c:	d02b      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800384e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003852:	d820      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003854:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003858:	d012      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800385a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800385e:	d81a      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003860:	2b00      	cmp	r3, #0
 8003862:	d022      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003864:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003868:	d115      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800386a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386e:	3308      	adds	r3, #8
 8003870:	2101      	movs	r1, #1
 8003872:	4618      	mov	r0, r3
 8003874:	f001 f9a6 	bl	8004bc4 <RCCEx_PLL2_Config>
 8003878:	4603      	mov	r3, r0
 800387a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800387e:	e015      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003884:	3328      	adds	r3, #40	@ 0x28
 8003886:	2101      	movs	r1, #1
 8003888:	4618      	mov	r0, r3
 800388a:	f001 fa4d 	bl	8004d28 <RCCEx_PLL3_Config>
 800388e:	4603      	mov	r3, r0
 8003890:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003894:	e00a      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800389c:	e006      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800389e:	bf00      	nop
 80038a0:	e004      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038a2:	bf00      	nop
 80038a4:	e002      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038a6:	bf00      	nop
 80038a8:	e000      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10b      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80038b4:	4ba3      	ldr	r3, [pc, #652]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80038bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038c4:	4a9f      	ldr	r2, [pc, #636]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038c6:	430b      	orrs	r3, r1
 80038c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80038ca:	e003      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038dc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80038e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038e4:	2300      	movs	r3, #0
 80038e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80038ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038ee:	460b      	mov	r3, r1
 80038f0:	4313      	orrs	r3, r2
 80038f2:	d037      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80038f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038fe:	d00e      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003900:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003904:	d816      	bhi.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003906:	2b00      	cmp	r3, #0
 8003908:	d018      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800390a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800390e:	d111      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003910:	4b8c      	ldr	r3, [pc, #560]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003914:	4a8b      	ldr	r2, [pc, #556]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800391a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800391c:	e00f      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800391e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003922:	3308      	adds	r3, #8
 8003924:	2101      	movs	r1, #1
 8003926:	4618      	mov	r0, r3
 8003928:	f001 f94c 	bl	8004bc4 <RCCEx_PLL2_Config>
 800392c:	4603      	mov	r3, r0
 800392e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003932:	e004      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800393a:	e000      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800393c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800393e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10a      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003946:	4b7f      	ldr	r3, [pc, #508]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800394a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800394e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003954:	4a7b      	ldr	r2, [pc, #492]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003956:	430b      	orrs	r3, r1
 8003958:	6513      	str	r3, [r2, #80]	@ 0x50
 800395a:	e003      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003960:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003970:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003974:	2300      	movs	r3, #0
 8003976:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800397a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800397e:	460b      	mov	r3, r1
 8003980:	4313      	orrs	r3, r2
 8003982:	d039      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800398a:	2b03      	cmp	r3, #3
 800398c:	d81c      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800398e:	a201      	add	r2, pc, #4	@ (adr r2, 8003994 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003994:	080039d1 	.word	0x080039d1
 8003998:	080039a5 	.word	0x080039a5
 800399c:	080039b3 	.word	0x080039b3
 80039a0:	080039d1 	.word	0x080039d1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039a4:	4b67      	ldr	r3, [pc, #412]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a8:	4a66      	ldr	r2, [pc, #408]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039b0:	e00f      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b6:	3308      	adds	r3, #8
 80039b8:	2102      	movs	r1, #2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f001 f902 	bl	8004bc4 <RCCEx_PLL2_Config>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039c6:	e004      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039ce:	e000      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80039d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10a      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80039da:	4b5a      	ldr	r3, [pc, #360]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039de:	f023 0103 	bic.w	r1, r3, #3
 80039e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039e8:	4a56      	ldr	r2, [pc, #344]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ea:	430b      	orrs	r3, r1
 80039ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039ee:	e003      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a00:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003a04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a0e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003a12:	460b      	mov	r3, r1
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f000 809f 	beq.w	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a1a:	4b4b      	ldr	r3, [pc, #300]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a4a      	ldr	r2, [pc, #296]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a26:	f7fd fb5b 	bl	80010e0 <HAL_GetTick>
 8003a2a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a2e:	e00b      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a30:	f7fd fb56 	bl	80010e0 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b64      	cmp	r3, #100	@ 0x64
 8003a3e:	d903      	bls.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a46:	e005      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a48:	4b3f      	ldr	r3, [pc, #252]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0ed      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003a54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d179      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a5c:	4b39      	ldr	r3, [pc, #228]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a5e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a68:	4053      	eors	r3, r2
 8003a6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d015      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a72:	4b34      	ldr	r3, [pc, #208]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a7a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a7e:	4b31      	ldr	r3, [pc, #196]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a82:	4a30      	ldr	r2, [pc, #192]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a88:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a8a:	4b2e      	ldr	r3, [pc, #184]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8e:	4a2d      	ldr	r2, [pc, #180]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a94:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a96:	4a2b      	ldr	r2, [pc, #172]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a9c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003aa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aaa:	d118      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aac:	f7fd fb18 	bl	80010e0 <HAL_GetTick>
 8003ab0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ab4:	e00d      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab6:	f7fd fb13 	bl	80010e0 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003ac0:	1ad2      	subs	r2, r2, r3
 8003ac2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d903      	bls.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003ad0:	e005      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0eb      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003ade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d129      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003af2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003af6:	d10e      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003af8:	4b12      	ldr	r3, [pc, #72]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b08:	091a      	lsrs	r2, r3, #4
 8003b0a:	4b10      	ldr	r3, [pc, #64]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	4a0d      	ldr	r2, [pc, #52]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b10:	430b      	orrs	r3, r1
 8003b12:	6113      	str	r3, [r2, #16]
 8003b14:	e005      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003b16:	4b0b      	ldr	r3, [pc, #44]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b20:	6113      	str	r3, [r2, #16]
 8003b22:	4b08      	ldr	r3, [pc, #32]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b24:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b32:	4a04      	ldr	r2, [pc, #16]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b34:	430b      	orrs	r3, r1
 8003b36:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b38:	e00e      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003b42:	e009      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003b44:	58024400 	.word	0x58024400
 8003b48:	58024800 	.word	0x58024800
 8003b4c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b60:	f002 0301 	and.w	r3, r2, #1
 8003b64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b6e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f000 8089 	beq.w	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b80:	2b28      	cmp	r3, #40	@ 0x28
 8003b82:	d86b      	bhi.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003b84:	a201      	add	r2, pc, #4	@ (adr r2, 8003b8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8a:	bf00      	nop
 8003b8c:	08003c65 	.word	0x08003c65
 8003b90:	08003c5d 	.word	0x08003c5d
 8003b94:	08003c5d 	.word	0x08003c5d
 8003b98:	08003c5d 	.word	0x08003c5d
 8003b9c:	08003c5d 	.word	0x08003c5d
 8003ba0:	08003c5d 	.word	0x08003c5d
 8003ba4:	08003c5d 	.word	0x08003c5d
 8003ba8:	08003c5d 	.word	0x08003c5d
 8003bac:	08003c31 	.word	0x08003c31
 8003bb0:	08003c5d 	.word	0x08003c5d
 8003bb4:	08003c5d 	.word	0x08003c5d
 8003bb8:	08003c5d 	.word	0x08003c5d
 8003bbc:	08003c5d 	.word	0x08003c5d
 8003bc0:	08003c5d 	.word	0x08003c5d
 8003bc4:	08003c5d 	.word	0x08003c5d
 8003bc8:	08003c5d 	.word	0x08003c5d
 8003bcc:	08003c47 	.word	0x08003c47
 8003bd0:	08003c5d 	.word	0x08003c5d
 8003bd4:	08003c5d 	.word	0x08003c5d
 8003bd8:	08003c5d 	.word	0x08003c5d
 8003bdc:	08003c5d 	.word	0x08003c5d
 8003be0:	08003c5d 	.word	0x08003c5d
 8003be4:	08003c5d 	.word	0x08003c5d
 8003be8:	08003c5d 	.word	0x08003c5d
 8003bec:	08003c65 	.word	0x08003c65
 8003bf0:	08003c5d 	.word	0x08003c5d
 8003bf4:	08003c5d 	.word	0x08003c5d
 8003bf8:	08003c5d 	.word	0x08003c5d
 8003bfc:	08003c5d 	.word	0x08003c5d
 8003c00:	08003c5d 	.word	0x08003c5d
 8003c04:	08003c5d 	.word	0x08003c5d
 8003c08:	08003c5d 	.word	0x08003c5d
 8003c0c:	08003c65 	.word	0x08003c65
 8003c10:	08003c5d 	.word	0x08003c5d
 8003c14:	08003c5d 	.word	0x08003c5d
 8003c18:	08003c5d 	.word	0x08003c5d
 8003c1c:	08003c5d 	.word	0x08003c5d
 8003c20:	08003c5d 	.word	0x08003c5d
 8003c24:	08003c5d 	.word	0x08003c5d
 8003c28:	08003c5d 	.word	0x08003c5d
 8003c2c:	08003c65 	.word	0x08003c65
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c34:	3308      	adds	r3, #8
 8003c36:	2101      	movs	r1, #1
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 ffc3 	bl	8004bc4 <RCCEx_PLL2_Config>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c44:	e00f      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4a:	3328      	adds	r3, #40	@ 0x28
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f001 f86a 	bl	8004d28 <RCCEx_PLL3_Config>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c5a:	e004      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c62:	e000      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003c64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10a      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c6e:	4bbf      	ldr	r3, [pc, #764]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c72:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c7c:	4abb      	ldr	r2, [pc, #748]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c7e:	430b      	orrs	r3, r1
 8003c80:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c82:	e003      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c94:	f002 0302 	and.w	r3, r2, #2
 8003c98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003ca2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	d041      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cb2:	2b05      	cmp	r3, #5
 8003cb4:	d824      	bhi.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8003cbc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbc:	08003d09 	.word	0x08003d09
 8003cc0:	08003cd5 	.word	0x08003cd5
 8003cc4:	08003ceb 	.word	0x08003ceb
 8003cc8:	08003d09 	.word	0x08003d09
 8003ccc:	08003d09 	.word	0x08003d09
 8003cd0:	08003d09 	.word	0x08003d09
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd8:	3308      	adds	r3, #8
 8003cda:	2101      	movs	r1, #1
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 ff71 	bl	8004bc4 <RCCEx_PLL2_Config>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ce8:	e00f      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cee:	3328      	adds	r3, #40	@ 0x28
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f001 f818 	bl	8004d28 <RCCEx_PLL3_Config>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cfe:	e004      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d06:	e000      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10a      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d12:	4b96      	ldr	r3, [pc, #600]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d16:	f023 0107 	bic.w	r1, r3, #7
 8003d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d20:	4a92      	ldr	r2, [pc, #584]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d22:	430b      	orrs	r3, r1
 8003d24:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d26:	e003      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d38:	f002 0304 	and.w	r3, r2, #4
 8003d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d40:	2300      	movs	r3, #0
 8003d42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d46:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	d044      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d58:	2b05      	cmp	r3, #5
 8003d5a:	d825      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d64 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d62:	bf00      	nop
 8003d64:	08003db1 	.word	0x08003db1
 8003d68:	08003d7d 	.word	0x08003d7d
 8003d6c:	08003d93 	.word	0x08003d93
 8003d70:	08003db1 	.word	0x08003db1
 8003d74:	08003db1 	.word	0x08003db1
 8003d78:	08003db1 	.word	0x08003db1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d80:	3308      	adds	r3, #8
 8003d82:	2101      	movs	r1, #1
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 ff1d 	bl	8004bc4 <RCCEx_PLL2_Config>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d90:	e00f      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d96:	3328      	adds	r3, #40	@ 0x28
 8003d98:	2101      	movs	r1, #1
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 ffc4 	bl	8004d28 <RCCEx_PLL3_Config>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003da6:	e004      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dae:	e000      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10b      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dba:	4b6c      	ldr	r3, [pc, #432]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dbe:	f023 0107 	bic.w	r1, r3, #7
 8003dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dca:	4a68      	ldr	r2, [pc, #416]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dd0:	e003      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de2:	f002 0320 	and.w	r3, r2, #32
 8003de6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003dea:	2300      	movs	r3, #0
 8003dec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003df0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003df4:	460b      	mov	r3, r1
 8003df6:	4313      	orrs	r3, r2
 8003df8:	d055      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e06:	d033      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e0c:	d82c      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e12:	d02f      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e18:	d826      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e1e:	d02b      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003e20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e24:	d820      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e2a:	d012      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003e2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e30:	d81a      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d022      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003e36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e3a:	d115      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e40:	3308      	adds	r3, #8
 8003e42:	2100      	movs	r1, #0
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 febd 	bl	8004bc4 <RCCEx_PLL2_Config>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e50:	e015      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e56:	3328      	adds	r3, #40	@ 0x28
 8003e58:	2102      	movs	r1, #2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 ff64 	bl	8004d28 <RCCEx_PLL3_Config>
 8003e60:	4603      	mov	r3, r0
 8003e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e66:	e00a      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e6e:	e006      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e70:	bf00      	nop
 8003e72:	e004      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e74:	bf00      	nop
 8003e76:	e002      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e78:	bf00      	nop
 8003e7a:	e000      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10b      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e86:	4b39      	ldr	r3, [pc, #228]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e96:	4a35      	ldr	r2, [pc, #212]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e98:	430b      	orrs	r3, r1
 8003e9a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e9c:	e003      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ea2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eae:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003ebc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	d058      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ece:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ed2:	d033      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003ed4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ed8:	d82c      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003eda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ede:	d02f      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003ee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ee4:	d826      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ee6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003eea:	d02b      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003eec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ef0:	d820      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ef2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ef6:	d012      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003ef8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003efc:	d81a      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d022      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f06:	d115      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0c:	3308      	adds	r3, #8
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fe57 	bl	8004bc4 <RCCEx_PLL2_Config>
 8003f16:	4603      	mov	r3, r0
 8003f18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f1c:	e015      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f22:	3328      	adds	r3, #40	@ 0x28
 8003f24:	2102      	movs	r1, #2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fefe 	bl	8004d28 <RCCEx_PLL3_Config>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f32:	e00a      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f3a:	e006      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f3c:	bf00      	nop
 8003f3e:	e004      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f40:	bf00      	nop
 8003f42:	e002      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f44:	bf00      	nop
 8003f46:	e000      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10e      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f52:	4b06      	ldr	r3, [pc, #24]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f56:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f62:	4a02      	ldr	r2, [pc, #8]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f64:	430b      	orrs	r3, r1
 8003f66:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f68:	e006      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003f6a:	bf00      	nop
 8003f6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f80:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003f84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f8e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003f92:	460b      	mov	r3, r1
 8003f94:	4313      	orrs	r3, r2
 8003f96:	d055      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003fa0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003fa4:	d033      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003fa6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003faa:	d82c      	bhi.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fb0:	d02f      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003fb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fb6:	d826      	bhi.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fb8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003fbc:	d02b      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003fbe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003fc2:	d820      	bhi.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fc8:	d012      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003fca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fce:	d81a      	bhi.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d022      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003fd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fd8:	d115      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fde:	3308      	adds	r3, #8
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fdee 	bl	8004bc4 <RCCEx_PLL2_Config>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fee:	e015      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff4:	3328      	adds	r3, #40	@ 0x28
 8003ff6:	2102      	movs	r1, #2
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fe95 	bl	8004d28 <RCCEx_PLL3_Config>
 8003ffe:	4603      	mov	r3, r0
 8004000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004004:	e00a      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800400c:	e006      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800400e:	bf00      	nop
 8004010:	e004      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004012:	bf00      	nop
 8004014:	e002      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004016:	bf00      	nop
 8004018:	e000      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800401a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800401c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10b      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004024:	4ba1      	ldr	r3, [pc, #644]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004028:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800402c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004030:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004034:	4a9d      	ldr	r2, [pc, #628]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004036:	430b      	orrs	r3, r1
 8004038:	6593      	str	r3, [r2, #88]	@ 0x58
 800403a:	e003      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004040:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404c:	f002 0308 	and.w	r3, r2, #8
 8004050:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004054:	2300      	movs	r3, #0
 8004056:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800405a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800405e:	460b      	mov	r3, r1
 8004060:	4313      	orrs	r3, r2
 8004062:	d01e      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004068:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800406c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004070:	d10c      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004076:	3328      	adds	r3, #40	@ 0x28
 8004078:	2102      	movs	r1, #2
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fe54 	bl	8004d28 <RCCEx_PLL3_Config>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800408c:	4b87      	ldr	r3, [pc, #540]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800408e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004090:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004098:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800409c:	4a83      	ldr	r2, [pc, #524]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800409e:	430b      	orrs	r3, r1
 80040a0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040aa:	f002 0310 	and.w	r3, r2, #16
 80040ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040b2:	2300      	movs	r3, #0
 80040b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80040b8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80040bc:	460b      	mov	r3, r1
 80040be:	4313      	orrs	r3, r2
 80040c0:	d01e      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80040c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040ce:	d10c      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d4:	3328      	adds	r3, #40	@ 0x28
 80040d6:	2102      	movs	r1, #2
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 fe25 	bl	8004d28 <RCCEx_PLL3_Config>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d002      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040ea:	4b70      	ldr	r3, [pc, #448]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040fa:	4a6c      	ldr	r2, [pc, #432]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040fc:	430b      	orrs	r3, r1
 80040fe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004108:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800410c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004110:	2300      	movs	r3, #0
 8004112:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004116:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800411a:	460b      	mov	r3, r1
 800411c:	4313      	orrs	r3, r2
 800411e:	d03e      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004124:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004128:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800412c:	d022      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800412e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004132:	d81b      	bhi.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800413c:	d00b      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800413e:	e015      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004144:	3308      	adds	r3, #8
 8004146:	2100      	movs	r1, #0
 8004148:	4618      	mov	r0, r3
 800414a:	f000 fd3b 	bl	8004bc4 <RCCEx_PLL2_Config>
 800414e:	4603      	mov	r3, r0
 8004150:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004154:	e00f      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415a:	3328      	adds	r3, #40	@ 0x28
 800415c:	2102      	movs	r1, #2
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fde2 	bl	8004d28 <RCCEx_PLL3_Config>
 8004164:	4603      	mov	r3, r0
 8004166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800416a:	e004      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004172:	e000      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10b      	bne.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800417e:	4b4b      	ldr	r3, [pc, #300]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004182:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800418e:	4a47      	ldr	r2, [pc, #284]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004190:	430b      	orrs	r3, r1
 8004192:	6593      	str	r3, [r2, #88]	@ 0x58
 8004194:	e003      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800419a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800419e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80041aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041ac:	2300      	movs	r3, #0
 80041ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80041b4:	460b      	mov	r3, r1
 80041b6:	4313      	orrs	r3, r2
 80041b8:	d03b      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80041ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041c6:	d01f      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80041c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041cc:	d818      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80041ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041d2:	d003      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80041d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041d8:	d007      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80041da:	e011      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041dc:	4b33      	ldr	r3, [pc, #204]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e0:	4a32      	ldr	r2, [pc, #200]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80041e8:	e00f      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ee:	3328      	adds	r3, #40	@ 0x28
 80041f0:	2101      	movs	r1, #1
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fd98 	bl	8004d28 <RCCEx_PLL3_Config>
 80041f8:	4603      	mov	r3, r0
 80041fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80041fe:	e004      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004206:	e000      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800420a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10b      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004212:	4b26      	ldr	r3, [pc, #152]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004216:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800421a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004222:	4a22      	ldr	r2, [pc, #136]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004224:	430b      	orrs	r3, r1
 8004226:	6553      	str	r3, [r2, #84]	@ 0x54
 8004228:	e003      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800422e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800423e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004240:	2300      	movs	r3, #0
 8004242:	677b      	str	r3, [r7, #116]	@ 0x74
 8004244:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004248:	460b      	mov	r3, r1
 800424a:	4313      	orrs	r3, r2
 800424c:	d034      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800424e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800425c:	d007      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800425e:	e011      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004260:	4b12      	ldr	r3, [pc, #72]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004264:	4a11      	ldr	r2, [pc, #68]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004266:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800426a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800426c:	e00e      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800426e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004272:	3308      	adds	r3, #8
 8004274:	2102      	movs	r1, #2
 8004276:	4618      	mov	r0, r3
 8004278:	f000 fca4 	bl	8004bc4 <RCCEx_PLL2_Config>
 800427c:	4603      	mov	r3, r0
 800427e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004282:	e003      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800428a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800428c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10d      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004294:	4b05      	ldr	r3, [pc, #20]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004298:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800429c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042a2:	4a02      	ldr	r2, [pc, #8]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042a4:	430b      	orrs	r3, r1
 80042a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042a8:	e006      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80042aa:	bf00      	nop
 80042ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80042c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042c6:	2300      	movs	r3, #0
 80042c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042ca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80042ce:	460b      	mov	r3, r1
 80042d0:	4313      	orrs	r3, r2
 80042d2:	d00c      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d8:	3328      	adds	r3, #40	@ 0x28
 80042da:	2102      	movs	r1, #2
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 fd23 	bl	8004d28 <RCCEx_PLL3_Config>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80042fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80042fc:	2300      	movs	r3, #0
 80042fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8004300:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004304:	460b      	mov	r3, r1
 8004306:	4313      	orrs	r3, r2
 8004308:	d038      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800430a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004312:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004316:	d018      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004318:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800431c:	d811      	bhi.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800431e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004322:	d014      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004328:	d80b      	bhi.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800432a:	2b00      	cmp	r3, #0
 800432c:	d011      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800432e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004332:	d106      	bne.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004334:	4bc3      	ldr	r3, [pc, #780]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004338:	4ac2      	ldr	r2, [pc, #776]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800433a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800433e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004340:	e008      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004348:	e004      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800434a:	bf00      	nop
 800434c:	e002      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800434e:	bf00      	nop
 8004350:	e000      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004354:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10b      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800435c:	4bb9      	ldr	r3, [pc, #740]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800435e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004360:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004368:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800436c:	4ab5      	ldr	r2, [pc, #724]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800436e:	430b      	orrs	r3, r1
 8004370:	6553      	str	r3, [r2, #84]	@ 0x54
 8004372:	e003      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004374:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004378:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800437c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004384:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004388:	65bb      	str	r3, [r7, #88]	@ 0x58
 800438a:	2300      	movs	r3, #0
 800438c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800438e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004392:	460b      	mov	r3, r1
 8004394:	4313      	orrs	r3, r2
 8004396:	d009      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004398:	4baa      	ldr	r3, [pc, #680]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800439a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800439c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80043a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043a6:	4aa7      	ldr	r2, [pc, #668]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043a8:	430b      	orrs	r3, r1
 80043aa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80043ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80043b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80043ba:	2300      	movs	r3, #0
 80043bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80043be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80043c2:	460b      	mov	r3, r1
 80043c4:	4313      	orrs	r3, r2
 80043c6:	d00a      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80043c8:	4b9e      	ldr	r3, [pc, #632]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80043d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80043d8:	4a9a      	ldr	r2, [pc, #616]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043da:	430b      	orrs	r3, r1
 80043dc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80043ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043ec:	2300      	movs	r3, #0
 80043ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043f0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80043f4:	460b      	mov	r3, r1
 80043f6:	4313      	orrs	r3, r2
 80043f8:	d009      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043fa:	4b92      	ldr	r3, [pc, #584]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043fe:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004406:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004408:	4a8e      	ldr	r2, [pc, #568]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800440a:	430b      	orrs	r3, r1
 800440c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800440e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004416:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800441a:	643b      	str	r3, [r7, #64]	@ 0x40
 800441c:	2300      	movs	r3, #0
 800441e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004420:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004424:	460b      	mov	r3, r1
 8004426:	4313      	orrs	r3, r2
 8004428:	d00e      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800442a:	4b86      	ldr	r3, [pc, #536]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	4a85      	ldr	r2, [pc, #532]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004430:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004434:	6113      	str	r3, [r2, #16]
 8004436:	4b83      	ldr	r3, [pc, #524]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004438:	6919      	ldr	r1, [r3, #16]
 800443a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004442:	4a80      	ldr	r2, [pc, #512]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004444:	430b      	orrs	r3, r1
 8004446:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004450:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004454:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004456:	2300      	movs	r3, #0
 8004458:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800445a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800445e:	460b      	mov	r3, r1
 8004460:	4313      	orrs	r3, r2
 8004462:	d009      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004464:	4b77      	ldr	r3, [pc, #476]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004468:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800446c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004472:	4a74      	ldr	r2, [pc, #464]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004474:	430b      	orrs	r3, r1
 8004476:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004480:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004484:	633b      	str	r3, [r7, #48]	@ 0x30
 8004486:	2300      	movs	r3, #0
 8004488:	637b      	str	r3, [r7, #52]	@ 0x34
 800448a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800448e:	460b      	mov	r3, r1
 8004490:	4313      	orrs	r3, r2
 8004492:	d00a      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004494:	4b6b      	ldr	r3, [pc, #428]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004498:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800449c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044a4:	4a67      	ldr	r2, [pc, #412]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044a6:	430b      	orrs	r3, r1
 80044a8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80044aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	2100      	movs	r1, #0
 80044b4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044bc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80044c0:	460b      	mov	r3, r1
 80044c2:	4313      	orrs	r3, r2
 80044c4:	d011      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ca:	3308      	adds	r3, #8
 80044cc:	2100      	movs	r1, #0
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 fb78 	bl	8004bc4 <RCCEx_PLL2_Config>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80044da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80044ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f2:	2100      	movs	r1, #0
 80044f4:	6239      	str	r1, [r7, #32]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80044fc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004500:	460b      	mov	r3, r1
 8004502:	4313      	orrs	r3, r2
 8004504:	d011      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450a:	3308      	adds	r3, #8
 800450c:	2101      	movs	r1, #1
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fb58 	bl	8004bc4 <RCCEx_PLL2_Config>
 8004514:	4603      	mov	r3, r0
 8004516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800451a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004526:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800452a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800452e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004532:	2100      	movs	r1, #0
 8004534:	61b9      	str	r1, [r7, #24]
 8004536:	f003 0304 	and.w	r3, r3, #4
 800453a:	61fb      	str	r3, [r7, #28]
 800453c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004540:	460b      	mov	r3, r1
 8004542:	4313      	orrs	r3, r2
 8004544:	d011      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454a:	3308      	adds	r3, #8
 800454c:	2102      	movs	r1, #2
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fb38 	bl	8004bc4 <RCCEx_PLL2_Config>
 8004554:	4603      	mov	r3, r0
 8004556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800455a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004566:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800456a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004572:	2100      	movs	r1, #0
 8004574:	6139      	str	r1, [r7, #16]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004580:	460b      	mov	r3, r1
 8004582:	4313      	orrs	r3, r2
 8004584:	d011      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458a:	3328      	adds	r3, #40	@ 0x28
 800458c:	2100      	movs	r1, #0
 800458e:	4618      	mov	r0, r3
 8004590:	f000 fbca 	bl	8004d28 <RCCEx_PLL3_Config>
 8004594:	4603      	mov	r3, r0
 8004596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800459a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80045aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b2:	2100      	movs	r1, #0
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	f003 0310 	and.w	r3, r3, #16
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80045c0:	460b      	mov	r3, r1
 80045c2:	4313      	orrs	r3, r2
 80045c4:	d011      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ca:	3328      	adds	r3, #40	@ 0x28
 80045cc:	2101      	movs	r1, #1
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 fbaa 	bl	8004d28 <RCCEx_PLL3_Config>
 80045d4:	4603      	mov	r3, r0
 80045d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80045ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f2:	2100      	movs	r1, #0
 80045f4:	6039      	str	r1, [r7, #0]
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	607b      	str	r3, [r7, #4]
 80045fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004600:	460b      	mov	r3, r1
 8004602:	4313      	orrs	r3, r2
 8004604:	d011      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460a:	3328      	adds	r3, #40	@ 0x28
 800460c:	2102      	movs	r1, #2
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fb8a 	bl	8004d28 <RCCEx_PLL3_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800461a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004626:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800462a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	e000      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
}
 8004638:	4618      	mov	r0, r3
 800463a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800463e:	46bd      	mov	sp, r7
 8004640:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004644:	58024400 	.word	0x58024400

08004648 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800464c:	f7fe fd96 	bl	800317c <HAL_RCC_GetHCLKFreq>
 8004650:	4602      	mov	r2, r0
 8004652:	4b06      	ldr	r3, [pc, #24]	@ (800466c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	091b      	lsrs	r3, r3, #4
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	4904      	ldr	r1, [pc, #16]	@ (8004670 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800465e:	5ccb      	ldrb	r3, [r1, r3]
 8004660:	f003 031f 	and.w	r3, r3, #31
 8004664:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004668:	4618      	mov	r0, r3
 800466a:	bd80      	pop	{r7, pc}
 800466c:	58024400 	.word	0x58024400
 8004670:	080066c4 	.word	0x080066c4

08004674 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004674:	b480      	push	{r7}
 8004676:	b089      	sub	sp, #36	@ 0x24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800467c:	4ba1      	ldr	r3, [pc, #644]	@ (8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800467e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004680:	f003 0303 	and.w	r3, r3, #3
 8004684:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004686:	4b9f      	ldr	r3, [pc, #636]	@ (8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468a:	0b1b      	lsrs	r3, r3, #12
 800468c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004690:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004692:	4b9c      	ldr	r3, [pc, #624]	@ (8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004696:	091b      	lsrs	r3, r3, #4
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800469e:	4b99      	ldr	r3, [pc, #612]	@ (8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a2:	08db      	lsrs	r3, r3, #3
 80046a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	fb02 f303 	mul.w	r3, r2, r3
 80046ae:	ee07 3a90 	vmov	s15, r3
 80046b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 8111 	beq.w	80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	f000 8083 	beq.w	80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	f200 80a1 	bhi.w	8004814 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d056      	beq.n	800478c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80046de:	e099      	b.n	8004814 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046e0:	4b88      	ldr	r3, [pc, #544]	@ (8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d02d      	beq.n	8004748 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046ec:	4b85      	ldr	r3, [pc, #532]	@ (8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	08db      	lsrs	r3, r3, #3
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	4a84      	ldr	r2, [pc, #528]	@ (8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80046f8:	fa22 f303 	lsr.w	r3, r2, r3
 80046fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	ee07 3a90 	vmov	s15, r3
 8004704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004716:	4b7b      	ldr	r3, [pc, #492]	@ (8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800471a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471e:	ee07 3a90 	vmov	s15, r3
 8004722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004726:	ed97 6a03 	vldr	s12, [r7, #12]
 800472a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800490c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800472e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004736:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800473a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800473e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004742:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004746:	e087      	b.n	8004858 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	ee07 3a90 	vmov	s15, r3
 800474e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004752:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800475a:	4b6a      	ldr	r3, [pc, #424]	@ (8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800475c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004762:	ee07 3a90 	vmov	s15, r3
 8004766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800476a:	ed97 6a03 	vldr	s12, [r7, #12]
 800476e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800490c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800477a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800477e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004786:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800478a:	e065      	b.n	8004858 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	ee07 3a90 	vmov	s15, r3
 8004792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004796:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004914 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800479a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800479e:	4b59      	ldr	r3, [pc, #356]	@ (8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a6:	ee07 3a90 	vmov	s15, r3
 80047aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80047b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800490c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047ce:	e043      	b.n	8004858 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	ee07 3a90 	vmov	s15, r3
 80047d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004918 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80047de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e2:	4b48      	ldr	r3, [pc, #288]	@ (8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ea:	ee07 3a90 	vmov	s15, r3
 80047ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800490c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004802:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800480a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800480e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004812:	e021      	b.n	8004858 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	ee07 3a90 	vmov	s15, r3
 800481a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800481e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004914 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004826:	4b37      	ldr	r3, [pc, #220]	@ (8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004836:	ed97 6a03 	vldr	s12, [r7, #12]
 800483a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800490c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800483e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004846:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800484a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800484e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004852:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004856:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004858:	4b2a      	ldr	r3, [pc, #168]	@ (8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800485a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485c:	0a5b      	lsrs	r3, r3, #9
 800485e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004862:	ee07 3a90 	vmov	s15, r3
 8004866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800486e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004872:	edd7 6a07 	vldr	s13, [r7, #28]
 8004876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800487a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800487e:	ee17 2a90 	vmov	r2, s15
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004886:	4b1f      	ldr	r3, [pc, #124]	@ (8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488a:	0c1b      	lsrs	r3, r3, #16
 800488c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004890:	ee07 3a90 	vmov	s15, r3
 8004894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004898:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800489c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80048a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048ac:	ee17 2a90 	vmov	r2, s15
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80048b4:	4b13      	ldr	r3, [pc, #76]	@ (8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b8:	0e1b      	lsrs	r3, r3, #24
 80048ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048be:	ee07 3a90 	vmov	s15, r3
 80048c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80048d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048da:	ee17 2a90 	vmov	r2, s15
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80048e2:	e008      	b.n	80048f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	609a      	str	r2, [r3, #8]
}
 80048f6:	bf00      	nop
 80048f8:	3724      	adds	r7, #36	@ 0x24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	58024400 	.word	0x58024400
 8004908:	03d09000 	.word	0x03d09000
 800490c:	46000000 	.word	0x46000000
 8004910:	4c742400 	.word	0x4c742400
 8004914:	4a742400 	.word	0x4a742400
 8004918:	4af42400 	.word	0x4af42400

0800491c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800491c:	b480      	push	{r7}
 800491e:	b089      	sub	sp, #36	@ 0x24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004924:	4ba1      	ldr	r3, [pc, #644]	@ (8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800492e:	4b9f      	ldr	r3, [pc, #636]	@ (8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004932:	0d1b      	lsrs	r3, r3, #20
 8004934:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004938:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800493a:	4b9c      	ldr	r3, [pc, #624]	@ (8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800493c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493e:	0a1b      	lsrs	r3, r3, #8
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004946:	4b99      	ldr	r3, [pc, #612]	@ (8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800494a:	08db      	lsrs	r3, r3, #3
 800494c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	fb02 f303 	mul.w	r3, r2, r3
 8004956:	ee07 3a90 	vmov	s15, r3
 800495a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 8111 	beq.w	8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b02      	cmp	r3, #2
 800496e:	f000 8083 	beq.w	8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	2b02      	cmp	r3, #2
 8004976:	f200 80a1 	bhi.w	8004abc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d056      	beq.n	8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004986:	e099      	b.n	8004abc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004988:	4b88      	ldr	r3, [pc, #544]	@ (8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0320 	and.w	r3, r3, #32
 8004990:	2b00      	cmp	r3, #0
 8004992:	d02d      	beq.n	80049f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004994:	4b85      	ldr	r3, [pc, #532]	@ (8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	08db      	lsrs	r3, r3, #3
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	4a84      	ldr	r2, [pc, #528]	@ (8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80049a0:	fa22 f303 	lsr.w	r3, r2, r3
 80049a4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	ee07 3a90 	vmov	s15, r3
 80049ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	ee07 3a90 	vmov	s15, r3
 80049b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049be:	4b7b      	ldr	r3, [pc, #492]	@ (8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c6:	ee07 3a90 	vmov	s15, r3
 80049ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80049d2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80049ee:	e087      	b.n	8004b00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	ee07 3a90 	vmov	s15, r3
 80049f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80049fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a02:	4b6a      	ldr	r3, [pc, #424]	@ (8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a0a:	ee07 3a90 	vmov	s15, r3
 8004a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a16:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a32:	e065      	b.n	8004b00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	ee07 3a90 	vmov	s15, r3
 8004a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004bbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a46:	4b59      	ldr	r3, [pc, #356]	@ (8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4e:	ee07 3a90 	vmov	s15, r3
 8004a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a5a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a76:	e043      	b.n	8004b00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a82:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a8a:	4b48      	ldr	r3, [pc, #288]	@ (8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a9e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aba:	e021      	b.n	8004b00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	ee07 3a90 	vmov	s15, r3
 8004ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004bbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ace:	4b37      	ldr	r3, [pc, #220]	@ (8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad6:	ee07 3a90 	vmov	s15, r3
 8004ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ae2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004afa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004afe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004b00:	4b2a      	ldr	r3, [pc, #168]	@ (8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b04:	0a5b      	lsrs	r3, r3, #9
 8004b06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b26:	ee17 2a90 	vmov	r2, s15
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b32:	0c1b      	lsrs	r3, r3, #16
 8004b34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b38:	ee07 3a90 	vmov	s15, r3
 8004b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b48:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b54:	ee17 2a90 	vmov	r2, s15
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004b5c:	4b13      	ldr	r3, [pc, #76]	@ (8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b60:	0e1b      	lsrs	r3, r3, #24
 8004b62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b76:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b82:	ee17 2a90 	vmov	r2, s15
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b8a:	e008      	b.n	8004b9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	609a      	str	r2, [r3, #8]
}
 8004b9e:	bf00      	nop
 8004ba0:	3724      	adds	r7, #36	@ 0x24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	58024400 	.word	0x58024400
 8004bb0:	03d09000 	.word	0x03d09000
 8004bb4:	46000000 	.word	0x46000000
 8004bb8:	4c742400 	.word	0x4c742400
 8004bbc:	4a742400 	.word	0x4a742400
 8004bc0:	4af42400 	.word	0x4af42400

08004bc4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bd2:	4b53      	ldr	r3, [pc, #332]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	d101      	bne.n	8004be2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e099      	b.n	8004d16 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004be2:	4b4f      	ldr	r3, [pc, #316]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a4e      	ldr	r2, [pc, #312]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004be8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004bec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bee:	f7fc fa77 	bl	80010e0 <HAL_GetTick>
 8004bf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bf4:	e008      	b.n	8004c08 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004bf6:	f7fc fa73 	bl	80010e0 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e086      	b.n	8004d16 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c08:	4b45      	ldr	r3, [pc, #276]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1f0      	bne.n	8004bf6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c14:	4b42      	ldr	r3, [pc, #264]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c18:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	031b      	lsls	r3, r3, #12
 8004c22:	493f      	ldr	r1, [pc, #252]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	025b      	lsls	r3, r3, #9
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	041b      	lsls	r3, r3, #16
 8004c46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	3b01      	subs	r3, #1
 8004c52:	061b      	lsls	r3, r3, #24
 8004c54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c58:	4931      	ldr	r1, [pc, #196]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c5e:	4b30      	ldr	r3, [pc, #192]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	492d      	ldr	r1, [pc, #180]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004c70:	4b2b      	ldr	r3, [pc, #172]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c74:	f023 0220 	bic.w	r2, r3, #32
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	4928      	ldr	r1, [pc, #160]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c82:	4b27      	ldr	r3, [pc, #156]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c86:	4a26      	ldr	r2, [pc, #152]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004c88:	f023 0310 	bic.w	r3, r3, #16
 8004c8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c8e:	4b24      	ldr	r3, [pc, #144]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004c90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c92:	4b24      	ldr	r3, [pc, #144]	@ (8004d24 <RCCEx_PLL2_Config+0x160>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	69d2      	ldr	r2, [r2, #28]
 8004c9a:	00d2      	lsls	r2, r2, #3
 8004c9c:	4920      	ldr	r1, [pc, #128]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004ca8:	f043 0310 	orr.w	r3, r3, #16
 8004cac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d106      	bne.n	8004cc2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb8:	4a19      	ldr	r2, [pc, #100]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004cba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004cbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004cc0:	e00f      	b.n	8004ce2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d106      	bne.n	8004cd6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004cc8:	4b15      	ldr	r3, [pc, #84]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ccc:	4a14      	ldr	r2, [pc, #80]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004cce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004cd4:	e005      	b.n	8004ce2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004cd6:	4b12      	ldr	r3, [pc, #72]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cda:	4a11      	ldr	r2, [pc, #68]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004cdc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004ce0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a0e      	ldr	r2, [pc, #56]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004ce8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004cec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cee:	f7fc f9f7 	bl	80010e0 <HAL_GetTick>
 8004cf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004cf4:	e008      	b.n	8004d08 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cf6:	f7fc f9f3 	bl	80010e0 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d901      	bls.n	8004d08 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e006      	b.n	8004d16 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d08:	4b05      	ldr	r3, [pc, #20]	@ (8004d20 <RCCEx_PLL2_Config+0x15c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0f0      	beq.n	8004cf6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	58024400 	.word	0x58024400
 8004d24:	ffff0007 	.word	0xffff0007

08004d28 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d36:	4b53      	ldr	r3, [pc, #332]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d101      	bne.n	8004d46 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e099      	b.n	8004e7a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d46:	4b4f      	ldr	r3, [pc, #316]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a4e      	ldr	r2, [pc, #312]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004d4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d52:	f7fc f9c5 	bl	80010e0 <HAL_GetTick>
 8004d56:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d58:	e008      	b.n	8004d6c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d5a:	f7fc f9c1 	bl	80010e0 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e086      	b.n	8004e7a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d6c:	4b45      	ldr	r3, [pc, #276]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1f0      	bne.n	8004d5a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d78:	4b42      	ldr	r3, [pc, #264]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	051b      	lsls	r3, r3, #20
 8004d86:	493f      	ldr	r1, [pc, #252]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	025b      	lsls	r3, r3, #9
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	431a      	orrs	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	041b      	lsls	r3, r3, #16
 8004daa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	3b01      	subs	r3, #1
 8004db6:	061b      	lsls	r3, r3, #24
 8004db8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004dbc:	4931      	ldr	r1, [pc, #196]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004dc2:	4b30      	ldr	r3, [pc, #192]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	492d      	ldr	r1, [pc, #180]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	4928      	ldr	r1, [pc, #160]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004de6:	4b27      	ldr	r3, [pc, #156]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dea:	4a26      	ldr	r2, [pc, #152]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004dec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004df0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004df2:	4b24      	ldr	r3, [pc, #144]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004df4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004df6:	4b24      	ldr	r3, [pc, #144]	@ (8004e88 <RCCEx_PLL3_Config+0x160>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	69d2      	ldr	r2, [r2, #28]
 8004dfe:	00d2      	lsls	r2, r2, #3
 8004e00:	4920      	ldr	r1, [pc, #128]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e06:	4b1f      	ldr	r3, [pc, #124]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d106      	bne.n	8004e26 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e18:	4b1a      	ldr	r3, [pc, #104]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1c:	4a19      	ldr	r2, [pc, #100]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004e1e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e24:	e00f      	b.n	8004e46 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d106      	bne.n	8004e3a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e2c:	4b15      	ldr	r3, [pc, #84]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e30:	4a14      	ldr	r2, [pc, #80]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004e32:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e38:	e005      	b.n	8004e46 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e3a:	4b12      	ldr	r3, [pc, #72]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3e:	4a11      	ldr	r2, [pc, #68]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004e40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e44:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e46:	4b0f      	ldr	r3, [pc, #60]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a0e      	ldr	r2, [pc, #56]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004e4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e52:	f7fc f945 	bl	80010e0 <HAL_GetTick>
 8004e56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e58:	e008      	b.n	8004e6c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e5a:	f7fc f941 	bl	80010e0 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e006      	b.n	8004e7a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e6c:	4b05      	ldr	r3, [pc, #20]	@ (8004e84 <RCCEx_PLL3_Config+0x15c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0f0      	beq.n	8004e5a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	58024400 	.word	0x58024400
 8004e88:	ffff0007 	.word	0xffff0007

08004e8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e042      	b.n	8004f24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d106      	bne.n	8004eb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7fb ff4d 	bl	8000d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2224      	movs	r2, #36	@ 0x24
 8004eba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0201 	bic.w	r2, r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d002      	beq.n	8004edc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fd90 	bl	80059fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f825 	bl	8004f2c <UART_SetConfig>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d101      	bne.n	8004eec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e01b      	b.n	8004f24 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004efa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0201 	orr.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 fe0f 	bl	8005b40 <UART_CheckIdleState>
 8004f22:	4603      	mov	r3, r0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f30:	b092      	sub	sp, #72	@ 0x48
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	431a      	orrs	r2, r3
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	4bbe      	ldr	r3, [pc, #760]	@ (8005254 <UART_SetConfig+0x328>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	6812      	ldr	r2, [r2, #0]
 8004f62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f64:	430b      	orrs	r3, r1
 8004f66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4ab3      	ldr	r2, [pc, #716]	@ (8005258 <UART_SetConfig+0x32c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d004      	beq.n	8004f98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f94:	4313      	orrs	r3, r2
 8004f96:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689a      	ldr	r2, [r3, #8]
 8004f9e:	4baf      	ldr	r3, [pc, #700]	@ (800525c <UART_SetConfig+0x330>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	6812      	ldr	r2, [r2, #0]
 8004fa6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb2:	f023 010f 	bic.w	r1, r3, #15
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4aa6      	ldr	r2, [pc, #664]	@ (8005260 <UART_SetConfig+0x334>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d177      	bne.n	80050bc <UART_SetConfig+0x190>
 8004fcc:	4ba5      	ldr	r3, [pc, #660]	@ (8005264 <UART_SetConfig+0x338>)
 8004fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fd4:	2b28      	cmp	r3, #40	@ 0x28
 8004fd6:	d86d      	bhi.n	80050b4 <UART_SetConfig+0x188>
 8004fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe0 <UART_SetConfig+0xb4>)
 8004fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fde:	bf00      	nop
 8004fe0:	08005085 	.word	0x08005085
 8004fe4:	080050b5 	.word	0x080050b5
 8004fe8:	080050b5 	.word	0x080050b5
 8004fec:	080050b5 	.word	0x080050b5
 8004ff0:	080050b5 	.word	0x080050b5
 8004ff4:	080050b5 	.word	0x080050b5
 8004ff8:	080050b5 	.word	0x080050b5
 8004ffc:	080050b5 	.word	0x080050b5
 8005000:	0800508d 	.word	0x0800508d
 8005004:	080050b5 	.word	0x080050b5
 8005008:	080050b5 	.word	0x080050b5
 800500c:	080050b5 	.word	0x080050b5
 8005010:	080050b5 	.word	0x080050b5
 8005014:	080050b5 	.word	0x080050b5
 8005018:	080050b5 	.word	0x080050b5
 800501c:	080050b5 	.word	0x080050b5
 8005020:	08005095 	.word	0x08005095
 8005024:	080050b5 	.word	0x080050b5
 8005028:	080050b5 	.word	0x080050b5
 800502c:	080050b5 	.word	0x080050b5
 8005030:	080050b5 	.word	0x080050b5
 8005034:	080050b5 	.word	0x080050b5
 8005038:	080050b5 	.word	0x080050b5
 800503c:	080050b5 	.word	0x080050b5
 8005040:	0800509d 	.word	0x0800509d
 8005044:	080050b5 	.word	0x080050b5
 8005048:	080050b5 	.word	0x080050b5
 800504c:	080050b5 	.word	0x080050b5
 8005050:	080050b5 	.word	0x080050b5
 8005054:	080050b5 	.word	0x080050b5
 8005058:	080050b5 	.word	0x080050b5
 800505c:	080050b5 	.word	0x080050b5
 8005060:	080050a5 	.word	0x080050a5
 8005064:	080050b5 	.word	0x080050b5
 8005068:	080050b5 	.word	0x080050b5
 800506c:	080050b5 	.word	0x080050b5
 8005070:	080050b5 	.word	0x080050b5
 8005074:	080050b5 	.word	0x080050b5
 8005078:	080050b5 	.word	0x080050b5
 800507c:	080050b5 	.word	0x080050b5
 8005080:	080050ad 	.word	0x080050ad
 8005084:	2301      	movs	r3, #1
 8005086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800508a:	e222      	b.n	80054d2 <UART_SetConfig+0x5a6>
 800508c:	2304      	movs	r3, #4
 800508e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005092:	e21e      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005094:	2308      	movs	r3, #8
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800509a:	e21a      	b.n	80054d2 <UART_SetConfig+0x5a6>
 800509c:	2310      	movs	r3, #16
 800509e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050a2:	e216      	b.n	80054d2 <UART_SetConfig+0x5a6>
 80050a4:	2320      	movs	r3, #32
 80050a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050aa:	e212      	b.n	80054d2 <UART_SetConfig+0x5a6>
 80050ac:	2340      	movs	r3, #64	@ 0x40
 80050ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050b2:	e20e      	b.n	80054d2 <UART_SetConfig+0x5a6>
 80050b4:	2380      	movs	r3, #128	@ 0x80
 80050b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ba:	e20a      	b.n	80054d2 <UART_SetConfig+0x5a6>
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a69      	ldr	r2, [pc, #420]	@ (8005268 <UART_SetConfig+0x33c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d130      	bne.n	8005128 <UART_SetConfig+0x1fc>
 80050c6:	4b67      	ldr	r3, [pc, #412]	@ (8005264 <UART_SetConfig+0x338>)
 80050c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ca:	f003 0307 	and.w	r3, r3, #7
 80050ce:	2b05      	cmp	r3, #5
 80050d0:	d826      	bhi.n	8005120 <UART_SetConfig+0x1f4>
 80050d2:	a201      	add	r2, pc, #4	@ (adr r2, 80050d8 <UART_SetConfig+0x1ac>)
 80050d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d8:	080050f1 	.word	0x080050f1
 80050dc:	080050f9 	.word	0x080050f9
 80050e0:	08005101 	.word	0x08005101
 80050e4:	08005109 	.word	0x08005109
 80050e8:	08005111 	.word	0x08005111
 80050ec:	08005119 	.word	0x08005119
 80050f0:	2300      	movs	r3, #0
 80050f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050f6:	e1ec      	b.n	80054d2 <UART_SetConfig+0x5a6>
 80050f8:	2304      	movs	r3, #4
 80050fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050fe:	e1e8      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005100:	2308      	movs	r3, #8
 8005102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005106:	e1e4      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005108:	2310      	movs	r3, #16
 800510a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800510e:	e1e0      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005110:	2320      	movs	r3, #32
 8005112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005116:	e1dc      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005118:	2340      	movs	r3, #64	@ 0x40
 800511a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800511e:	e1d8      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005120:	2380      	movs	r3, #128	@ 0x80
 8005122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005126:	e1d4      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a4f      	ldr	r2, [pc, #316]	@ (800526c <UART_SetConfig+0x340>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d130      	bne.n	8005194 <UART_SetConfig+0x268>
 8005132:	4b4c      	ldr	r3, [pc, #304]	@ (8005264 <UART_SetConfig+0x338>)
 8005134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	2b05      	cmp	r3, #5
 800513c:	d826      	bhi.n	800518c <UART_SetConfig+0x260>
 800513e:	a201      	add	r2, pc, #4	@ (adr r2, 8005144 <UART_SetConfig+0x218>)
 8005140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005144:	0800515d 	.word	0x0800515d
 8005148:	08005165 	.word	0x08005165
 800514c:	0800516d 	.word	0x0800516d
 8005150:	08005175 	.word	0x08005175
 8005154:	0800517d 	.word	0x0800517d
 8005158:	08005185 	.word	0x08005185
 800515c:	2300      	movs	r3, #0
 800515e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005162:	e1b6      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005164:	2304      	movs	r3, #4
 8005166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800516a:	e1b2      	b.n	80054d2 <UART_SetConfig+0x5a6>
 800516c:	2308      	movs	r3, #8
 800516e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005172:	e1ae      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005174:	2310      	movs	r3, #16
 8005176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800517a:	e1aa      	b.n	80054d2 <UART_SetConfig+0x5a6>
 800517c:	2320      	movs	r3, #32
 800517e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005182:	e1a6      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005184:	2340      	movs	r3, #64	@ 0x40
 8005186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800518a:	e1a2      	b.n	80054d2 <UART_SetConfig+0x5a6>
 800518c:	2380      	movs	r3, #128	@ 0x80
 800518e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005192:	e19e      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a35      	ldr	r2, [pc, #212]	@ (8005270 <UART_SetConfig+0x344>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d130      	bne.n	8005200 <UART_SetConfig+0x2d4>
 800519e:	4b31      	ldr	r3, [pc, #196]	@ (8005264 <UART_SetConfig+0x338>)
 80051a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a2:	f003 0307 	and.w	r3, r3, #7
 80051a6:	2b05      	cmp	r3, #5
 80051a8:	d826      	bhi.n	80051f8 <UART_SetConfig+0x2cc>
 80051aa:	a201      	add	r2, pc, #4	@ (adr r2, 80051b0 <UART_SetConfig+0x284>)
 80051ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b0:	080051c9 	.word	0x080051c9
 80051b4:	080051d1 	.word	0x080051d1
 80051b8:	080051d9 	.word	0x080051d9
 80051bc:	080051e1 	.word	0x080051e1
 80051c0:	080051e9 	.word	0x080051e9
 80051c4:	080051f1 	.word	0x080051f1
 80051c8:	2300      	movs	r3, #0
 80051ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ce:	e180      	b.n	80054d2 <UART_SetConfig+0x5a6>
 80051d0:	2304      	movs	r3, #4
 80051d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051d6:	e17c      	b.n	80054d2 <UART_SetConfig+0x5a6>
 80051d8:	2308      	movs	r3, #8
 80051da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051de:	e178      	b.n	80054d2 <UART_SetConfig+0x5a6>
 80051e0:	2310      	movs	r3, #16
 80051e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051e6:	e174      	b.n	80054d2 <UART_SetConfig+0x5a6>
 80051e8:	2320      	movs	r3, #32
 80051ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ee:	e170      	b.n	80054d2 <UART_SetConfig+0x5a6>
 80051f0:	2340      	movs	r3, #64	@ 0x40
 80051f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051f6:	e16c      	b.n	80054d2 <UART_SetConfig+0x5a6>
 80051f8:	2380      	movs	r3, #128	@ 0x80
 80051fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051fe:	e168      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a1b      	ldr	r2, [pc, #108]	@ (8005274 <UART_SetConfig+0x348>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d142      	bne.n	8005290 <UART_SetConfig+0x364>
 800520a:	4b16      	ldr	r3, [pc, #88]	@ (8005264 <UART_SetConfig+0x338>)
 800520c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800520e:	f003 0307 	and.w	r3, r3, #7
 8005212:	2b05      	cmp	r3, #5
 8005214:	d838      	bhi.n	8005288 <UART_SetConfig+0x35c>
 8005216:	a201      	add	r2, pc, #4	@ (adr r2, 800521c <UART_SetConfig+0x2f0>)
 8005218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521c:	08005235 	.word	0x08005235
 8005220:	0800523d 	.word	0x0800523d
 8005224:	08005245 	.word	0x08005245
 8005228:	0800524d 	.word	0x0800524d
 800522c:	08005279 	.word	0x08005279
 8005230:	08005281 	.word	0x08005281
 8005234:	2300      	movs	r3, #0
 8005236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800523a:	e14a      	b.n	80054d2 <UART_SetConfig+0x5a6>
 800523c:	2304      	movs	r3, #4
 800523e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005242:	e146      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005244:	2308      	movs	r3, #8
 8005246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800524a:	e142      	b.n	80054d2 <UART_SetConfig+0x5a6>
 800524c:	2310      	movs	r3, #16
 800524e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005252:	e13e      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005254:	cfff69f3 	.word	0xcfff69f3
 8005258:	58000c00 	.word	0x58000c00
 800525c:	11fff4ff 	.word	0x11fff4ff
 8005260:	40011000 	.word	0x40011000
 8005264:	58024400 	.word	0x58024400
 8005268:	40004400 	.word	0x40004400
 800526c:	40004800 	.word	0x40004800
 8005270:	40004c00 	.word	0x40004c00
 8005274:	40005000 	.word	0x40005000
 8005278:	2320      	movs	r3, #32
 800527a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800527e:	e128      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005280:	2340      	movs	r3, #64	@ 0x40
 8005282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005286:	e124      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005288:	2380      	movs	r3, #128	@ 0x80
 800528a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800528e:	e120      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4acb      	ldr	r2, [pc, #812]	@ (80055c4 <UART_SetConfig+0x698>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d176      	bne.n	8005388 <UART_SetConfig+0x45c>
 800529a:	4bcb      	ldr	r3, [pc, #812]	@ (80055c8 <UART_SetConfig+0x69c>)
 800529c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800529e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052a2:	2b28      	cmp	r3, #40	@ 0x28
 80052a4:	d86c      	bhi.n	8005380 <UART_SetConfig+0x454>
 80052a6:	a201      	add	r2, pc, #4	@ (adr r2, 80052ac <UART_SetConfig+0x380>)
 80052a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ac:	08005351 	.word	0x08005351
 80052b0:	08005381 	.word	0x08005381
 80052b4:	08005381 	.word	0x08005381
 80052b8:	08005381 	.word	0x08005381
 80052bc:	08005381 	.word	0x08005381
 80052c0:	08005381 	.word	0x08005381
 80052c4:	08005381 	.word	0x08005381
 80052c8:	08005381 	.word	0x08005381
 80052cc:	08005359 	.word	0x08005359
 80052d0:	08005381 	.word	0x08005381
 80052d4:	08005381 	.word	0x08005381
 80052d8:	08005381 	.word	0x08005381
 80052dc:	08005381 	.word	0x08005381
 80052e0:	08005381 	.word	0x08005381
 80052e4:	08005381 	.word	0x08005381
 80052e8:	08005381 	.word	0x08005381
 80052ec:	08005361 	.word	0x08005361
 80052f0:	08005381 	.word	0x08005381
 80052f4:	08005381 	.word	0x08005381
 80052f8:	08005381 	.word	0x08005381
 80052fc:	08005381 	.word	0x08005381
 8005300:	08005381 	.word	0x08005381
 8005304:	08005381 	.word	0x08005381
 8005308:	08005381 	.word	0x08005381
 800530c:	08005369 	.word	0x08005369
 8005310:	08005381 	.word	0x08005381
 8005314:	08005381 	.word	0x08005381
 8005318:	08005381 	.word	0x08005381
 800531c:	08005381 	.word	0x08005381
 8005320:	08005381 	.word	0x08005381
 8005324:	08005381 	.word	0x08005381
 8005328:	08005381 	.word	0x08005381
 800532c:	08005371 	.word	0x08005371
 8005330:	08005381 	.word	0x08005381
 8005334:	08005381 	.word	0x08005381
 8005338:	08005381 	.word	0x08005381
 800533c:	08005381 	.word	0x08005381
 8005340:	08005381 	.word	0x08005381
 8005344:	08005381 	.word	0x08005381
 8005348:	08005381 	.word	0x08005381
 800534c:	08005379 	.word	0x08005379
 8005350:	2301      	movs	r3, #1
 8005352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005356:	e0bc      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005358:	2304      	movs	r3, #4
 800535a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800535e:	e0b8      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005360:	2308      	movs	r3, #8
 8005362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005366:	e0b4      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005368:	2310      	movs	r3, #16
 800536a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800536e:	e0b0      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005370:	2320      	movs	r3, #32
 8005372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005376:	e0ac      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005378:	2340      	movs	r3, #64	@ 0x40
 800537a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800537e:	e0a8      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005380:	2380      	movs	r3, #128	@ 0x80
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005386:	e0a4      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a8f      	ldr	r2, [pc, #572]	@ (80055cc <UART_SetConfig+0x6a0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d130      	bne.n	80053f4 <UART_SetConfig+0x4c8>
 8005392:	4b8d      	ldr	r3, [pc, #564]	@ (80055c8 <UART_SetConfig+0x69c>)
 8005394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	2b05      	cmp	r3, #5
 800539c:	d826      	bhi.n	80053ec <UART_SetConfig+0x4c0>
 800539e:	a201      	add	r2, pc, #4	@ (adr r2, 80053a4 <UART_SetConfig+0x478>)
 80053a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a4:	080053bd 	.word	0x080053bd
 80053a8:	080053c5 	.word	0x080053c5
 80053ac:	080053cd 	.word	0x080053cd
 80053b0:	080053d5 	.word	0x080053d5
 80053b4:	080053dd 	.word	0x080053dd
 80053b8:	080053e5 	.word	0x080053e5
 80053bc:	2300      	movs	r3, #0
 80053be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053c2:	e086      	b.n	80054d2 <UART_SetConfig+0x5a6>
 80053c4:	2304      	movs	r3, #4
 80053c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ca:	e082      	b.n	80054d2 <UART_SetConfig+0x5a6>
 80053cc:	2308      	movs	r3, #8
 80053ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053d2:	e07e      	b.n	80054d2 <UART_SetConfig+0x5a6>
 80053d4:	2310      	movs	r3, #16
 80053d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053da:	e07a      	b.n	80054d2 <UART_SetConfig+0x5a6>
 80053dc:	2320      	movs	r3, #32
 80053de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053e2:	e076      	b.n	80054d2 <UART_SetConfig+0x5a6>
 80053e4:	2340      	movs	r3, #64	@ 0x40
 80053e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ea:	e072      	b.n	80054d2 <UART_SetConfig+0x5a6>
 80053ec:	2380      	movs	r3, #128	@ 0x80
 80053ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053f2:	e06e      	b.n	80054d2 <UART_SetConfig+0x5a6>
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a75      	ldr	r2, [pc, #468]	@ (80055d0 <UART_SetConfig+0x6a4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d130      	bne.n	8005460 <UART_SetConfig+0x534>
 80053fe:	4b72      	ldr	r3, [pc, #456]	@ (80055c8 <UART_SetConfig+0x69c>)
 8005400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	2b05      	cmp	r3, #5
 8005408:	d826      	bhi.n	8005458 <UART_SetConfig+0x52c>
 800540a:	a201      	add	r2, pc, #4	@ (adr r2, 8005410 <UART_SetConfig+0x4e4>)
 800540c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005410:	08005429 	.word	0x08005429
 8005414:	08005431 	.word	0x08005431
 8005418:	08005439 	.word	0x08005439
 800541c:	08005441 	.word	0x08005441
 8005420:	08005449 	.word	0x08005449
 8005424:	08005451 	.word	0x08005451
 8005428:	2300      	movs	r3, #0
 800542a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800542e:	e050      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005430:	2304      	movs	r3, #4
 8005432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005436:	e04c      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005438:	2308      	movs	r3, #8
 800543a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800543e:	e048      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005440:	2310      	movs	r3, #16
 8005442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005446:	e044      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005448:	2320      	movs	r3, #32
 800544a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800544e:	e040      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005450:	2340      	movs	r3, #64	@ 0x40
 8005452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005456:	e03c      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005458:	2380      	movs	r3, #128	@ 0x80
 800545a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800545e:	e038      	b.n	80054d2 <UART_SetConfig+0x5a6>
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a5b      	ldr	r2, [pc, #364]	@ (80055d4 <UART_SetConfig+0x6a8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d130      	bne.n	80054cc <UART_SetConfig+0x5a0>
 800546a:	4b57      	ldr	r3, [pc, #348]	@ (80055c8 <UART_SetConfig+0x69c>)
 800546c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	2b05      	cmp	r3, #5
 8005474:	d826      	bhi.n	80054c4 <UART_SetConfig+0x598>
 8005476:	a201      	add	r2, pc, #4	@ (adr r2, 800547c <UART_SetConfig+0x550>)
 8005478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547c:	08005495 	.word	0x08005495
 8005480:	0800549d 	.word	0x0800549d
 8005484:	080054a5 	.word	0x080054a5
 8005488:	080054ad 	.word	0x080054ad
 800548c:	080054b5 	.word	0x080054b5
 8005490:	080054bd 	.word	0x080054bd
 8005494:	2302      	movs	r3, #2
 8005496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800549a:	e01a      	b.n	80054d2 <UART_SetConfig+0x5a6>
 800549c:	2304      	movs	r3, #4
 800549e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054a2:	e016      	b.n	80054d2 <UART_SetConfig+0x5a6>
 80054a4:	2308      	movs	r3, #8
 80054a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054aa:	e012      	b.n	80054d2 <UART_SetConfig+0x5a6>
 80054ac:	2310      	movs	r3, #16
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054b2:	e00e      	b.n	80054d2 <UART_SetConfig+0x5a6>
 80054b4:	2320      	movs	r3, #32
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ba:	e00a      	b.n	80054d2 <UART_SetConfig+0x5a6>
 80054bc:	2340      	movs	r3, #64	@ 0x40
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054c2:	e006      	b.n	80054d2 <UART_SetConfig+0x5a6>
 80054c4:	2380      	movs	r3, #128	@ 0x80
 80054c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ca:	e002      	b.n	80054d2 <UART_SetConfig+0x5a6>
 80054cc:	2380      	movs	r3, #128	@ 0x80
 80054ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a3f      	ldr	r2, [pc, #252]	@ (80055d4 <UART_SetConfig+0x6a8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	f040 80f8 	bne.w	80056ce <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054de:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80054e2:	2b20      	cmp	r3, #32
 80054e4:	dc46      	bgt.n	8005574 <UART_SetConfig+0x648>
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	f2c0 8082 	blt.w	80055f0 <UART_SetConfig+0x6c4>
 80054ec:	3b02      	subs	r3, #2
 80054ee:	2b1e      	cmp	r3, #30
 80054f0:	d87e      	bhi.n	80055f0 <UART_SetConfig+0x6c4>
 80054f2:	a201      	add	r2, pc, #4	@ (adr r2, 80054f8 <UART_SetConfig+0x5cc>)
 80054f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f8:	0800557b 	.word	0x0800557b
 80054fc:	080055f1 	.word	0x080055f1
 8005500:	08005583 	.word	0x08005583
 8005504:	080055f1 	.word	0x080055f1
 8005508:	080055f1 	.word	0x080055f1
 800550c:	080055f1 	.word	0x080055f1
 8005510:	08005593 	.word	0x08005593
 8005514:	080055f1 	.word	0x080055f1
 8005518:	080055f1 	.word	0x080055f1
 800551c:	080055f1 	.word	0x080055f1
 8005520:	080055f1 	.word	0x080055f1
 8005524:	080055f1 	.word	0x080055f1
 8005528:	080055f1 	.word	0x080055f1
 800552c:	080055f1 	.word	0x080055f1
 8005530:	080055a3 	.word	0x080055a3
 8005534:	080055f1 	.word	0x080055f1
 8005538:	080055f1 	.word	0x080055f1
 800553c:	080055f1 	.word	0x080055f1
 8005540:	080055f1 	.word	0x080055f1
 8005544:	080055f1 	.word	0x080055f1
 8005548:	080055f1 	.word	0x080055f1
 800554c:	080055f1 	.word	0x080055f1
 8005550:	080055f1 	.word	0x080055f1
 8005554:	080055f1 	.word	0x080055f1
 8005558:	080055f1 	.word	0x080055f1
 800555c:	080055f1 	.word	0x080055f1
 8005560:	080055f1 	.word	0x080055f1
 8005564:	080055f1 	.word	0x080055f1
 8005568:	080055f1 	.word	0x080055f1
 800556c:	080055f1 	.word	0x080055f1
 8005570:	080055e3 	.word	0x080055e3
 8005574:	2b40      	cmp	r3, #64	@ 0x40
 8005576:	d037      	beq.n	80055e8 <UART_SetConfig+0x6bc>
 8005578:	e03a      	b.n	80055f0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800557a:	f7ff f865 	bl	8004648 <HAL_RCCEx_GetD3PCLK1Freq>
 800557e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005580:	e03c      	b.n	80055fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005586:	4618      	mov	r0, r3
 8005588:	f7ff f874 	bl	8004674 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800558c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005590:	e034      	b.n	80055fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005592:	f107 0318 	add.w	r3, r7, #24
 8005596:	4618      	mov	r0, r3
 8005598:	f7ff f9c0 	bl	800491c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055a0:	e02c      	b.n	80055fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055a2:	4b09      	ldr	r3, [pc, #36]	@ (80055c8 <UART_SetConfig+0x69c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0320 	and.w	r3, r3, #32
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d016      	beq.n	80055dc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80055ae:	4b06      	ldr	r3, [pc, #24]	@ (80055c8 <UART_SetConfig+0x69c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	08db      	lsrs	r3, r3, #3
 80055b4:	f003 0303 	and.w	r3, r3, #3
 80055b8:	4a07      	ldr	r2, [pc, #28]	@ (80055d8 <UART_SetConfig+0x6ac>)
 80055ba:	fa22 f303 	lsr.w	r3, r2, r3
 80055be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80055c0:	e01c      	b.n	80055fc <UART_SetConfig+0x6d0>
 80055c2:	bf00      	nop
 80055c4:	40011400 	.word	0x40011400
 80055c8:	58024400 	.word	0x58024400
 80055cc:	40007800 	.word	0x40007800
 80055d0:	40007c00 	.word	0x40007c00
 80055d4:	58000c00 	.word	0x58000c00
 80055d8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80055dc:	4b9d      	ldr	r3, [pc, #628]	@ (8005854 <UART_SetConfig+0x928>)
 80055de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055e0:	e00c      	b.n	80055fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80055e2:	4b9d      	ldr	r3, [pc, #628]	@ (8005858 <UART_SetConfig+0x92c>)
 80055e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055e6:	e009      	b.n	80055fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055ee:	e005      	b.n	80055fc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80055fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 81de 	beq.w	80059c0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005608:	4a94      	ldr	r2, [pc, #592]	@ (800585c <UART_SetConfig+0x930>)
 800560a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800560e:	461a      	mov	r2, r3
 8005610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005612:	fbb3 f3f2 	udiv	r3, r3, r2
 8005616:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	4613      	mov	r3, r2
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	4413      	add	r3, r2
 8005622:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005624:	429a      	cmp	r2, r3
 8005626:	d305      	bcc.n	8005634 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800562e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005630:	429a      	cmp	r2, r3
 8005632:	d903      	bls.n	800563c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800563a:	e1c1      	b.n	80059c0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800563c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800563e:	2200      	movs	r2, #0
 8005640:	60bb      	str	r3, [r7, #8]
 8005642:	60fa      	str	r2, [r7, #12]
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005648:	4a84      	ldr	r2, [pc, #528]	@ (800585c <UART_SetConfig+0x930>)
 800564a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800564e:	b29b      	uxth	r3, r3
 8005650:	2200      	movs	r2, #0
 8005652:	603b      	str	r3, [r7, #0]
 8005654:	607a      	str	r2, [r7, #4]
 8005656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800565a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800565e:	f7fa fe3b 	bl	80002d8 <__aeabi_uldivmod>
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	4610      	mov	r0, r2
 8005668:	4619      	mov	r1, r3
 800566a:	f04f 0200 	mov.w	r2, #0
 800566e:	f04f 0300 	mov.w	r3, #0
 8005672:	020b      	lsls	r3, r1, #8
 8005674:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005678:	0202      	lsls	r2, r0, #8
 800567a:	6979      	ldr	r1, [r7, #20]
 800567c:	6849      	ldr	r1, [r1, #4]
 800567e:	0849      	lsrs	r1, r1, #1
 8005680:	2000      	movs	r0, #0
 8005682:	460c      	mov	r4, r1
 8005684:	4605      	mov	r5, r0
 8005686:	eb12 0804 	adds.w	r8, r2, r4
 800568a:	eb43 0905 	adc.w	r9, r3, r5
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	469a      	mov	sl, r3
 8005696:	4693      	mov	fp, r2
 8005698:	4652      	mov	r2, sl
 800569a:	465b      	mov	r3, fp
 800569c:	4640      	mov	r0, r8
 800569e:	4649      	mov	r1, r9
 80056a0:	f7fa fe1a 	bl	80002d8 <__aeabi_uldivmod>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4613      	mov	r3, r2
 80056aa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056b2:	d308      	bcc.n	80056c6 <UART_SetConfig+0x79a>
 80056b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056ba:	d204      	bcs.n	80056c6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80056c2:	60da      	str	r2, [r3, #12]
 80056c4:	e17c      	b.n	80059c0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80056cc:	e178      	b.n	80059c0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056d6:	f040 80c5 	bne.w	8005864 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80056da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80056de:	2b20      	cmp	r3, #32
 80056e0:	dc48      	bgt.n	8005774 <UART_SetConfig+0x848>
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	db7b      	blt.n	80057de <UART_SetConfig+0x8b2>
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	d879      	bhi.n	80057de <UART_SetConfig+0x8b2>
 80056ea:	a201      	add	r2, pc, #4	@ (adr r2, 80056f0 <UART_SetConfig+0x7c4>)
 80056ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f0:	0800577b 	.word	0x0800577b
 80056f4:	08005783 	.word	0x08005783
 80056f8:	080057df 	.word	0x080057df
 80056fc:	080057df 	.word	0x080057df
 8005700:	0800578b 	.word	0x0800578b
 8005704:	080057df 	.word	0x080057df
 8005708:	080057df 	.word	0x080057df
 800570c:	080057df 	.word	0x080057df
 8005710:	0800579b 	.word	0x0800579b
 8005714:	080057df 	.word	0x080057df
 8005718:	080057df 	.word	0x080057df
 800571c:	080057df 	.word	0x080057df
 8005720:	080057df 	.word	0x080057df
 8005724:	080057df 	.word	0x080057df
 8005728:	080057df 	.word	0x080057df
 800572c:	080057df 	.word	0x080057df
 8005730:	080057ab 	.word	0x080057ab
 8005734:	080057df 	.word	0x080057df
 8005738:	080057df 	.word	0x080057df
 800573c:	080057df 	.word	0x080057df
 8005740:	080057df 	.word	0x080057df
 8005744:	080057df 	.word	0x080057df
 8005748:	080057df 	.word	0x080057df
 800574c:	080057df 	.word	0x080057df
 8005750:	080057df 	.word	0x080057df
 8005754:	080057df 	.word	0x080057df
 8005758:	080057df 	.word	0x080057df
 800575c:	080057df 	.word	0x080057df
 8005760:	080057df 	.word	0x080057df
 8005764:	080057df 	.word	0x080057df
 8005768:	080057df 	.word	0x080057df
 800576c:	080057df 	.word	0x080057df
 8005770:	080057d1 	.word	0x080057d1
 8005774:	2b40      	cmp	r3, #64	@ 0x40
 8005776:	d02e      	beq.n	80057d6 <UART_SetConfig+0x8aa>
 8005778:	e031      	b.n	80057de <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800577a:	f7fd fd2f 	bl	80031dc <HAL_RCC_GetPCLK1Freq>
 800577e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005780:	e033      	b.n	80057ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005782:	f7fd fd41 	bl	8003208 <HAL_RCC_GetPCLK2Freq>
 8005786:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005788:	e02f      	b.n	80057ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800578a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800578e:	4618      	mov	r0, r3
 8005790:	f7fe ff70 	bl	8004674 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005798:	e027      	b.n	80057ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800579a:	f107 0318 	add.w	r3, r7, #24
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff f8bc 	bl	800491c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057a8:	e01f      	b.n	80057ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057aa:	4b2d      	ldr	r3, [pc, #180]	@ (8005860 <UART_SetConfig+0x934>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0320 	and.w	r3, r3, #32
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d009      	beq.n	80057ca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005860 <UART_SetConfig+0x934>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	08db      	lsrs	r3, r3, #3
 80057bc:	f003 0303 	and.w	r3, r3, #3
 80057c0:	4a24      	ldr	r2, [pc, #144]	@ (8005854 <UART_SetConfig+0x928>)
 80057c2:	fa22 f303 	lsr.w	r3, r2, r3
 80057c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057c8:	e00f      	b.n	80057ea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80057ca:	4b22      	ldr	r3, [pc, #136]	@ (8005854 <UART_SetConfig+0x928>)
 80057cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057ce:	e00c      	b.n	80057ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80057d0:	4b21      	ldr	r3, [pc, #132]	@ (8005858 <UART_SetConfig+0x92c>)
 80057d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057d4:	e009      	b.n	80057ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057dc:	e005      	b.n	80057ea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80057de:	2300      	movs	r3, #0
 80057e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80057e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 80e7 	beq.w	80059c0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f6:	4a19      	ldr	r2, [pc, #100]	@ (800585c <UART_SetConfig+0x930>)
 80057f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057fc:	461a      	mov	r2, r3
 80057fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005800:	fbb3 f3f2 	udiv	r3, r3, r2
 8005804:	005a      	lsls	r2, r3, #1
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	085b      	lsrs	r3, r3, #1
 800580c:	441a      	add	r2, r3
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	fbb2 f3f3 	udiv	r3, r2, r3
 8005816:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800581a:	2b0f      	cmp	r3, #15
 800581c:	d916      	bls.n	800584c <UART_SetConfig+0x920>
 800581e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005824:	d212      	bcs.n	800584c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005828:	b29b      	uxth	r3, r3
 800582a:	f023 030f 	bic.w	r3, r3, #15
 800582e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005832:	085b      	lsrs	r3, r3, #1
 8005834:	b29b      	uxth	r3, r3
 8005836:	f003 0307 	and.w	r3, r3, #7
 800583a:	b29a      	uxth	r2, r3
 800583c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800583e:	4313      	orrs	r3, r2
 8005840:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005848:	60da      	str	r2, [r3, #12]
 800584a:	e0b9      	b.n	80059c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005852:	e0b5      	b.n	80059c0 <UART_SetConfig+0xa94>
 8005854:	03d09000 	.word	0x03d09000
 8005858:	003d0900 	.word	0x003d0900
 800585c:	080066d4 	.word	0x080066d4
 8005860:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005864:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005868:	2b20      	cmp	r3, #32
 800586a:	dc49      	bgt.n	8005900 <UART_SetConfig+0x9d4>
 800586c:	2b00      	cmp	r3, #0
 800586e:	db7c      	blt.n	800596a <UART_SetConfig+0xa3e>
 8005870:	2b20      	cmp	r3, #32
 8005872:	d87a      	bhi.n	800596a <UART_SetConfig+0xa3e>
 8005874:	a201      	add	r2, pc, #4	@ (adr r2, 800587c <UART_SetConfig+0x950>)
 8005876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587a:	bf00      	nop
 800587c:	08005907 	.word	0x08005907
 8005880:	0800590f 	.word	0x0800590f
 8005884:	0800596b 	.word	0x0800596b
 8005888:	0800596b 	.word	0x0800596b
 800588c:	08005917 	.word	0x08005917
 8005890:	0800596b 	.word	0x0800596b
 8005894:	0800596b 	.word	0x0800596b
 8005898:	0800596b 	.word	0x0800596b
 800589c:	08005927 	.word	0x08005927
 80058a0:	0800596b 	.word	0x0800596b
 80058a4:	0800596b 	.word	0x0800596b
 80058a8:	0800596b 	.word	0x0800596b
 80058ac:	0800596b 	.word	0x0800596b
 80058b0:	0800596b 	.word	0x0800596b
 80058b4:	0800596b 	.word	0x0800596b
 80058b8:	0800596b 	.word	0x0800596b
 80058bc:	08005937 	.word	0x08005937
 80058c0:	0800596b 	.word	0x0800596b
 80058c4:	0800596b 	.word	0x0800596b
 80058c8:	0800596b 	.word	0x0800596b
 80058cc:	0800596b 	.word	0x0800596b
 80058d0:	0800596b 	.word	0x0800596b
 80058d4:	0800596b 	.word	0x0800596b
 80058d8:	0800596b 	.word	0x0800596b
 80058dc:	0800596b 	.word	0x0800596b
 80058e0:	0800596b 	.word	0x0800596b
 80058e4:	0800596b 	.word	0x0800596b
 80058e8:	0800596b 	.word	0x0800596b
 80058ec:	0800596b 	.word	0x0800596b
 80058f0:	0800596b 	.word	0x0800596b
 80058f4:	0800596b 	.word	0x0800596b
 80058f8:	0800596b 	.word	0x0800596b
 80058fc:	0800595d 	.word	0x0800595d
 8005900:	2b40      	cmp	r3, #64	@ 0x40
 8005902:	d02e      	beq.n	8005962 <UART_SetConfig+0xa36>
 8005904:	e031      	b.n	800596a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005906:	f7fd fc69 	bl	80031dc <HAL_RCC_GetPCLK1Freq>
 800590a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800590c:	e033      	b.n	8005976 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800590e:	f7fd fc7b 	bl	8003208 <HAL_RCC_GetPCLK2Freq>
 8005912:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005914:	e02f      	b.n	8005976 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005916:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800591a:	4618      	mov	r0, r3
 800591c:	f7fe feaa 	bl	8004674 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005924:	e027      	b.n	8005976 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005926:	f107 0318 	add.w	r3, r7, #24
 800592a:	4618      	mov	r0, r3
 800592c:	f7fe fff6 	bl	800491c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005934:	e01f      	b.n	8005976 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005936:	4b2d      	ldr	r3, [pc, #180]	@ (80059ec <UART_SetConfig+0xac0>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0320 	and.w	r3, r3, #32
 800593e:	2b00      	cmp	r3, #0
 8005940:	d009      	beq.n	8005956 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005942:	4b2a      	ldr	r3, [pc, #168]	@ (80059ec <UART_SetConfig+0xac0>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	08db      	lsrs	r3, r3, #3
 8005948:	f003 0303 	and.w	r3, r3, #3
 800594c:	4a28      	ldr	r2, [pc, #160]	@ (80059f0 <UART_SetConfig+0xac4>)
 800594e:	fa22 f303 	lsr.w	r3, r2, r3
 8005952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005954:	e00f      	b.n	8005976 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005956:	4b26      	ldr	r3, [pc, #152]	@ (80059f0 <UART_SetConfig+0xac4>)
 8005958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800595a:	e00c      	b.n	8005976 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800595c:	4b25      	ldr	r3, [pc, #148]	@ (80059f4 <UART_SetConfig+0xac8>)
 800595e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005960:	e009      	b.n	8005976 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005968:	e005      	b.n	8005976 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005974:	bf00      	nop
    }

    if (pclk != 0U)
 8005976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005978:	2b00      	cmp	r3, #0
 800597a:	d021      	beq.n	80059c0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005980:	4a1d      	ldr	r2, [pc, #116]	@ (80059f8 <UART_SetConfig+0xacc>)
 8005982:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005986:	461a      	mov	r2, r3
 8005988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800598a:	fbb3 f2f2 	udiv	r2, r3, r2
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	085b      	lsrs	r3, r3, #1
 8005994:	441a      	add	r2, r3
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	fbb2 f3f3 	udiv	r3, r2, r3
 800599e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a2:	2b0f      	cmp	r3, #15
 80059a4:	d909      	bls.n	80059ba <UART_SetConfig+0xa8e>
 80059a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059ac:	d205      	bcs.n	80059ba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	60da      	str	r2, [r3, #12]
 80059b8:	e002      	b.n	80059c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2200      	movs	r2, #0
 80059d4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2200      	movs	r2, #0
 80059da:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80059dc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3748      	adds	r7, #72	@ 0x48
 80059e4:	46bd      	mov	sp, r7
 80059e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059ea:	bf00      	nop
 80059ec:	58024400 	.word	0x58024400
 80059f0:	03d09000 	.word	0x03d09000
 80059f4:	003d0900 	.word	0x003d0900
 80059f8:	080066d4 	.word	0x080066d4

080059fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a08:	f003 0308 	and.w	r3, r3, #8
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00a      	beq.n	8005a26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00a      	beq.n	8005a6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a6e:	f003 0304 	and.w	r3, r3, #4
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a90:	f003 0310 	and.w	r3, r3, #16
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00a      	beq.n	8005aae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab2:	f003 0320 	and.w	r3, r3, #32
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d01a      	beq.n	8005b12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005af6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005afa:	d10a      	bne.n	8005b12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00a      	beq.n	8005b34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	605a      	str	r2, [r3, #4]
  }
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b098      	sub	sp, #96	@ 0x60
 8005b44:	af02      	add	r7, sp, #8
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b50:	f7fb fac6 	bl	80010e0 <HAL_GetTick>
 8005b54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0308 	and.w	r3, r3, #8
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d12f      	bne.n	8005bc4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f88e 	bl	8005c94 <UART_WaitOnFlagUntilTimeout>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d022      	beq.n	8005bc4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b86:	e853 3f00 	ldrex	r3, [r3]
 8005b8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b92:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b9e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ba2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ba4:	e841 2300 	strex	r3, r2, [r1]
 8005ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1e6      	bne.n	8005b7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e063      	b.n	8005c8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0304 	and.w	r3, r3, #4
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d149      	bne.n	8005c66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bd2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f857 	bl	8005c94 <UART_WaitOnFlagUntilTimeout>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d03c      	beq.n	8005c66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	623b      	str	r3, [r7, #32]
   return(result);
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c12:	e841 2300 	strex	r3, r2, [r1]
 8005c16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1e6      	bne.n	8005bec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3308      	adds	r3, #8
 8005c24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f023 0301 	bic.w	r3, r3, #1
 8005c34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	3308      	adds	r3, #8
 8005c3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c3e:	61fa      	str	r2, [r7, #28]
 8005c40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	69b9      	ldr	r1, [r7, #24]
 8005c44:	69fa      	ldr	r2, [r7, #28]
 8005c46:	e841 2300 	strex	r3, r2, [r1]
 8005c4a:	617b      	str	r3, [r7, #20]
   return(result);
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1e5      	bne.n	8005c1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2220      	movs	r2, #32
 8005c56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e012      	b.n	8005c8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2220      	movs	r2, #32
 8005c72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3758      	adds	r7, #88	@ 0x58
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	603b      	str	r3, [r7, #0]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ca4:	e04f      	b.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cac:	d04b      	beq.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cae:	f7fb fa17 	bl	80010e0 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d302      	bcc.n	8005cc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e04e      	b.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0304 	and.w	r3, r3, #4
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d037      	beq.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2b80      	cmp	r3, #128	@ 0x80
 8005cda:	d034      	beq.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2b40      	cmp	r3, #64	@ 0x40
 8005ce0:	d031      	beq.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	f003 0308 	and.w	r3, r3, #8
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d110      	bne.n	8005d12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2208      	movs	r2, #8
 8005cf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 f839 	bl	8005d70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2208      	movs	r2, #8
 8005d02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e029      	b.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d20:	d111      	bne.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 f81f 	bl	8005d70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e00f      	b.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	69da      	ldr	r2, [r3, #28]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	bf0c      	ite	eq
 8005d56:	2301      	moveq	r3, #1
 8005d58:	2300      	movne	r3, #0
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	79fb      	ldrb	r3, [r7, #7]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d0a0      	beq.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
	...

08005d70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b095      	sub	sp, #84	@ 0x54
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d80:	e853 3f00 	ldrex	r3, [r3]
 8005d84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	461a      	mov	r2, r3
 8005d94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d96:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d98:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d9e:	e841 2300 	strex	r3, r2, [r1]
 8005da2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1e6      	bne.n	8005d78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3308      	adds	r3, #8
 8005db0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	e853 3f00 	ldrex	r3, [r3]
 8005db8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dba:	69fa      	ldr	r2, [r7, #28]
 8005dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8005e38 <UART_EndRxTransfer+0xc8>)
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3308      	adds	r3, #8
 8005dc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dd2:	e841 2300 	strex	r3, r2, [r1]
 8005dd6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1e5      	bne.n	8005daa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d118      	bne.n	8005e18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	e853 3f00 	ldrex	r3, [r3]
 8005df2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f023 0310 	bic.w	r3, r3, #16
 8005dfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	461a      	mov	r2, r3
 8005e02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e04:	61bb      	str	r3, [r7, #24]
 8005e06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e08:	6979      	ldr	r1, [r7, #20]
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	e841 2300 	strex	r3, r2, [r1]
 8005e10:	613b      	str	r3, [r7, #16]
   return(result);
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1e6      	bne.n	8005de6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005e2c:	bf00      	nop
 8005e2e:	3754      	adds	r7, #84	@ 0x54
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	effffffe 	.word	0xeffffffe

08005e3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e027      	b.n	8005ea2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2224      	movs	r2, #36	@ 0x24
 8005e5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 0201 	bic.w	r2, r2, #1
 8005e78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005e80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d101      	bne.n	8005ec6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e02d      	b.n	8005f22 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2224      	movs	r2, #36	@ 0x24
 8005ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0201 	bic.w	r2, r2, #1
 8005eec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f850 	bl	8005fa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b084      	sub	sp, #16
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d101      	bne.n	8005f42 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f3e:	2302      	movs	r3, #2
 8005f40:	e02d      	b.n	8005f9e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2224      	movs	r2, #36	@ 0x24
 8005f4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 0201 	bic.w	r2, r2, #1
 8005f68:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f812 	bl	8005fa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d108      	bne.n	8005fca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005fc8:	e031      	b.n	800602e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005fca:	2310      	movs	r3, #16
 8005fcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005fce:	2310      	movs	r3, #16
 8005fd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	0e5b      	lsrs	r3, r3, #25
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	0f5b      	lsrs	r3, r3, #29
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ff2:	7bbb      	ldrb	r3, [r7, #14]
 8005ff4:	7b3a      	ldrb	r2, [r7, #12]
 8005ff6:	4911      	ldr	r1, [pc, #68]	@ (800603c <UARTEx_SetNbDataToProcess+0x94>)
 8005ff8:	5c8a      	ldrb	r2, [r1, r2]
 8005ffa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ffe:	7b3a      	ldrb	r2, [r7, #12]
 8006000:	490f      	ldr	r1, [pc, #60]	@ (8006040 <UARTEx_SetNbDataToProcess+0x98>)
 8006002:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006004:	fb93 f3f2 	sdiv	r3, r3, r2
 8006008:	b29a      	uxth	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	7b7a      	ldrb	r2, [r7, #13]
 8006014:	4909      	ldr	r1, [pc, #36]	@ (800603c <UARTEx_SetNbDataToProcess+0x94>)
 8006016:	5c8a      	ldrb	r2, [r1, r2]
 8006018:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800601c:	7b7a      	ldrb	r2, [r7, #13]
 800601e:	4908      	ldr	r1, [pc, #32]	@ (8006040 <UARTEx_SetNbDataToProcess+0x98>)
 8006020:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006022:	fb93 f3f2 	sdiv	r3, r3, r2
 8006026:	b29a      	uxth	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800602e:	bf00      	nop
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	080066ec 	.word	0x080066ec
 8006040:	080066f4 	.word	0x080066f4

08006044 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006044:	b084      	sub	sp, #16
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	f107 001c 	add.w	r0, r7, #28
 8006052:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006056:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800605a:	2b01      	cmp	r3, #1
 800605c:	d121      	bne.n	80060a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006062:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	4b2c      	ldr	r3, [pc, #176]	@ (8006120 <USB_CoreInit+0xdc>)
 8006070:	4013      	ands	r3, r2
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006082:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006086:	2b01      	cmp	r3, #1
 8006088:	d105      	bne.n	8006096 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 faaa 	bl	80065f0 <USB_CoreReset>
 800609c:	4603      	mov	r3, r0
 800609e:	73fb      	strb	r3, [r7, #15]
 80060a0:	e01b      	b.n	80060da <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fa9e 	bl	80065f0 <USB_CoreReset>
 80060b4:	4603      	mov	r3, r0
 80060b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80060b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d106      	bne.n	80060ce <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80060cc:	e005      	b.n	80060da <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80060da:	7fbb      	ldrb	r3, [r7, #30]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d116      	bne.n	800610e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006124 <USB_CoreInit+0xe0>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f043 0206 	orr.w	r2, r3, #6
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f043 0220 	orr.w	r2, r3, #32
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800610e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800611a:	b004      	add	sp, #16
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	ffbdffbf 	.word	0xffbdffbf
 8006124:	03ee0000 	.word	0x03ee0000

08006128 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f023 0201 	bic.w	r2, r3, #1
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b084      	sub	sp, #16
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	460b      	mov	r3, r1
 8006154:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006166:	78fb      	ldrb	r3, [r7, #3]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d115      	bne.n	8006198 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006178:	200a      	movs	r0, #10
 800617a:	f7fa ffbd 	bl	80010f8 <HAL_Delay>
      ms += 10U;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	330a      	adds	r3, #10
 8006182:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fa25 	bl	80065d4 <USB_GetMode>
 800618a:	4603      	mov	r3, r0
 800618c:	2b01      	cmp	r3, #1
 800618e:	d01e      	beq.n	80061ce <USB_SetCurrentMode+0x84>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2bc7      	cmp	r3, #199	@ 0xc7
 8006194:	d9f0      	bls.n	8006178 <USB_SetCurrentMode+0x2e>
 8006196:	e01a      	b.n	80061ce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d115      	bne.n	80061ca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061aa:	200a      	movs	r0, #10
 80061ac:	f7fa ffa4 	bl	80010f8 <HAL_Delay>
      ms += 10U;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	330a      	adds	r3, #10
 80061b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fa0c 	bl	80065d4 <USB_GetMode>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d005      	beq.n	80061ce <USB_SetCurrentMode+0x84>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2bc7      	cmp	r3, #199	@ 0xc7
 80061c6:	d9f0      	bls.n	80061aa <USB_SetCurrentMode+0x60>
 80061c8:	e001      	b.n	80061ce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e005      	b.n	80061da <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2bc8      	cmp	r3, #200	@ 0xc8
 80061d2:	d101      	bne.n	80061d8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e000      	b.n	80061da <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
	...

080061e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061e4:	b084      	sub	sp, #16
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b086      	sub	sp, #24
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80061f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061fe:	2300      	movs	r3, #0
 8006200:	613b      	str	r3, [r7, #16]
 8006202:	e009      	b.n	8006218 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	3340      	adds	r3, #64	@ 0x40
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	2200      	movs	r2, #0
 8006210:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	3301      	adds	r3, #1
 8006216:	613b      	str	r3, [r7, #16]
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	2b0e      	cmp	r3, #14
 800621c:	d9f2      	bls.n	8006204 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800621e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006222:	2b00      	cmp	r3, #0
 8006224:	d11c      	bne.n	8006260 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006234:	f043 0302 	orr.w	r3, r3, #2
 8006238:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800623e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	e005      	b.n	800626c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006264:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006272:	461a      	mov	r2, r3
 8006274:	2300      	movs	r3, #0
 8006276:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006278:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800627c:	2b01      	cmp	r3, #1
 800627e:	d10d      	bne.n	800629c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006280:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006284:	2b00      	cmp	r3, #0
 8006286:	d104      	bne.n	8006292 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006288:	2100      	movs	r1, #0
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f968 	bl	8006560 <USB_SetDevSpeed>
 8006290:	e008      	b.n	80062a4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006292:	2101      	movs	r1, #1
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f963 	bl	8006560 <USB_SetDevSpeed>
 800629a:	e003      	b.n	80062a4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800629c:	2103      	movs	r1, #3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f95e 	bl	8006560 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062a4:	2110      	movs	r1, #16
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f8fa 	bl	80064a0 <USB_FlushTxFifo>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f924 	bl	8006504 <USB_FlushRxFifo>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062cc:	461a      	mov	r2, r3
 80062ce:	2300      	movs	r3, #0
 80062d0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062d8:	461a      	mov	r2, r3
 80062da:	2300      	movs	r3, #0
 80062dc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062e4:	461a      	mov	r2, r3
 80062e6:	2300      	movs	r3, #0
 80062e8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062ea:	2300      	movs	r3, #0
 80062ec:	613b      	str	r3, [r7, #16]
 80062ee:	e043      	b.n	8006378 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006302:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006306:	d118      	bne.n	800633a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10a      	bne.n	8006324 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4413      	add	r3, r2
 8006316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800631a:	461a      	mov	r2, r3
 800631c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	e013      	b.n	800634c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006330:	461a      	mov	r2, r3
 8006332:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006336:	6013      	str	r3, [r2, #0]
 8006338:	e008      	b.n	800634c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006346:	461a      	mov	r2, r3
 8006348:	2300      	movs	r3, #0
 800634a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4413      	add	r3, r2
 8006354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006358:	461a      	mov	r2, r3
 800635a:	2300      	movs	r3, #0
 800635c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	4413      	add	r3, r2
 8006366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800636a:	461a      	mov	r2, r3
 800636c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006370:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	3301      	adds	r3, #1
 8006376:	613b      	str	r3, [r7, #16]
 8006378:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800637c:	461a      	mov	r2, r3
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	4293      	cmp	r3, r2
 8006382:	d3b5      	bcc.n	80062f0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006384:	2300      	movs	r3, #0
 8006386:	613b      	str	r3, [r7, #16]
 8006388:	e043      	b.n	8006412 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800639c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063a0:	d118      	bne.n	80063d4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10a      	bne.n	80063be <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b4:	461a      	mov	r2, r3
 80063b6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80063ba:	6013      	str	r3, [r2, #0]
 80063bc:	e013      	b.n	80063e6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ca:	461a      	mov	r2, r3
 80063cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80063d0:	6013      	str	r3, [r2, #0]
 80063d2:	e008      	b.n	80063e6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e0:	461a      	mov	r2, r3
 80063e2:	2300      	movs	r3, #0
 80063e4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f2:	461a      	mov	r2, r3
 80063f4:	2300      	movs	r3, #0
 80063f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006404:	461a      	mov	r2, r3
 8006406:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800640a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	3301      	adds	r3, #1
 8006410:	613b      	str	r3, [r7, #16]
 8006412:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006416:	461a      	mov	r2, r3
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	4293      	cmp	r3, r2
 800641c:	d3b5      	bcc.n	800638a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800642c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006430:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800643e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006440:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006444:	2b00      	cmp	r3, #0
 8006446:	d105      	bne.n	8006454 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	f043 0210 	orr.w	r2, r3, #16
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	699a      	ldr	r2, [r3, #24]
 8006458:	4b0f      	ldr	r3, [pc, #60]	@ (8006498 <USB_DevInit+0x2b4>)
 800645a:	4313      	orrs	r3, r2
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006460:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006464:	2b00      	cmp	r3, #0
 8006466:	d005      	beq.n	8006474 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	f043 0208 	orr.w	r2, r3, #8
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006474:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006478:	2b01      	cmp	r3, #1
 800647a:	d105      	bne.n	8006488 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	699a      	ldr	r2, [r3, #24]
 8006480:	4b06      	ldr	r3, [pc, #24]	@ (800649c <USB_DevInit+0x2b8>)
 8006482:	4313      	orrs	r3, r2
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006488:	7dfb      	ldrb	r3, [r7, #23]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3718      	adds	r7, #24
 800648e:	46bd      	mov	sp, r7
 8006490:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006494:	b004      	add	sp, #16
 8006496:	4770      	bx	lr
 8006498:	803c3800 	.word	0x803c3800
 800649c:	40000004 	.word	0x40000004

080064a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064aa:	2300      	movs	r3, #0
 80064ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	3301      	adds	r3, #1
 80064b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064ba:	d901      	bls.n	80064c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e01b      	b.n	80064f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	daf2      	bge.n	80064ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	019b      	lsls	r3, r3, #6
 80064d0:	f043 0220 	orr.w	r2, r3, #32
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3301      	adds	r3, #1
 80064dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064e4:	d901      	bls.n	80064ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e006      	b.n	80064f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f003 0320 	and.w	r3, r3, #32
 80064f2:	2b20      	cmp	r3, #32
 80064f4:	d0f0      	beq.n	80064d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800650c:	2300      	movs	r3, #0
 800650e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	3301      	adds	r3, #1
 8006514:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800651c:	d901      	bls.n	8006522 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e018      	b.n	8006554 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	2b00      	cmp	r3, #0
 8006528:	daf2      	bge.n	8006510 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800652a:	2300      	movs	r3, #0
 800652c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2210      	movs	r2, #16
 8006532:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3301      	adds	r3, #1
 8006538:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006540:	d901      	bls.n	8006546 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e006      	b.n	8006554 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f003 0310 	and.w	r3, r3, #16
 800654e:	2b10      	cmp	r3, #16
 8006550:	d0f0      	beq.n	8006534 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	460b      	mov	r3, r1
 800656a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	78fb      	ldrb	r3, [r7, #3]
 800657a:	68f9      	ldr	r1, [r7, #12]
 800657c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006580:	4313      	orrs	r3, r2
 8006582:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006592:	b480      	push	{r7}
 8006594:	b085      	sub	sp, #20
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80065ac:	f023 0303 	bic.w	r3, r3, #3
 80065b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065c0:	f043 0302 	orr.w	r3, r3, #2
 80065c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3714      	adds	r7, #20
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	f003 0301 	and.w	r3, r3, #1
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3301      	adds	r3, #1
 8006600:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006608:	d901      	bls.n	800660e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e01b      	b.n	8006646 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	daf2      	bge.n	80065fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006616:	2300      	movs	r3, #0
 8006618:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f043 0201 	orr.w	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3301      	adds	r3, #1
 800662a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006632:	d901      	bls.n	8006638 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e006      	b.n	8006646 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b01      	cmp	r3, #1
 8006642:	d0f0      	beq.n	8006626 <USB_CoreReset+0x36>

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <memset>:
 8006652:	4402      	add	r2, r0
 8006654:	4603      	mov	r3, r0
 8006656:	4293      	cmp	r3, r2
 8006658:	d100      	bne.n	800665c <memset+0xa>
 800665a:	4770      	bx	lr
 800665c:	f803 1b01 	strb.w	r1, [r3], #1
 8006660:	e7f9      	b.n	8006656 <memset+0x4>
	...

08006664 <__libc_init_array>:
 8006664:	b570      	push	{r4, r5, r6, lr}
 8006666:	4d0d      	ldr	r5, [pc, #52]	@ (800669c <__libc_init_array+0x38>)
 8006668:	4c0d      	ldr	r4, [pc, #52]	@ (80066a0 <__libc_init_array+0x3c>)
 800666a:	1b64      	subs	r4, r4, r5
 800666c:	10a4      	asrs	r4, r4, #2
 800666e:	2600      	movs	r6, #0
 8006670:	42a6      	cmp	r6, r4
 8006672:	d109      	bne.n	8006688 <__libc_init_array+0x24>
 8006674:	4d0b      	ldr	r5, [pc, #44]	@ (80066a4 <__libc_init_array+0x40>)
 8006676:	4c0c      	ldr	r4, [pc, #48]	@ (80066a8 <__libc_init_array+0x44>)
 8006678:	f000 f818 	bl	80066ac <_init>
 800667c:	1b64      	subs	r4, r4, r5
 800667e:	10a4      	asrs	r4, r4, #2
 8006680:	2600      	movs	r6, #0
 8006682:	42a6      	cmp	r6, r4
 8006684:	d105      	bne.n	8006692 <__libc_init_array+0x2e>
 8006686:	bd70      	pop	{r4, r5, r6, pc}
 8006688:	f855 3b04 	ldr.w	r3, [r5], #4
 800668c:	4798      	blx	r3
 800668e:	3601      	adds	r6, #1
 8006690:	e7ee      	b.n	8006670 <__libc_init_array+0xc>
 8006692:	f855 3b04 	ldr.w	r3, [r5], #4
 8006696:	4798      	blx	r3
 8006698:	3601      	adds	r6, #1
 800669a:	e7f2      	b.n	8006682 <__libc_init_array+0x1e>
 800669c:	08006704 	.word	0x08006704
 80066a0:	08006704 	.word	0x08006704
 80066a4:	08006704 	.word	0x08006704
 80066a8:	08006708 	.word	0x08006708

080066ac <_init>:
 80066ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ae:	bf00      	nop
 80066b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066b2:	bc08      	pop	{r3}
 80066b4:	469e      	mov	lr, r3
 80066b6:	4770      	bx	lr

080066b8 <_fini>:
 80066b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ba:	bf00      	nop
 80066bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066be:	bc08      	pop	{r3}
 80066c0:	469e      	mov	lr, r3
 80066c2:	4770      	bx	lr
