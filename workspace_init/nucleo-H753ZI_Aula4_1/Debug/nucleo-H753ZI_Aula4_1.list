
nucleo-H753ZI_Aula4_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009880  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08009b20  08009b20  0000ab20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009bc8  08009bc8  0000abc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009bd0  08009bd0  0000abd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009bd4  08009bd4  0000abd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  08009bd8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  08009c3c  0000b064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  08009c9c  0000b0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005204  24000124  08009cfc  0000b124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24005328  08009cfc  0000b328  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002913c  00000000  00000000  0000b152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e2d  00000000  00000000  0003428e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d88  00000000  00000000  000390c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016e8  00000000  00000000  0003ae48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c3d4  00000000  00000000  0003c530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024f8d  00000000  00000000  00078904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001775df  00000000  00000000  0009d891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00214e70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008088  00000000  00000000  00214eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0021cf3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009b08 	.word	0x08009b08

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	08009b08 	.word	0x08009b08

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000650 <MX_ETH_Init+0x80>)
 80005d6:	4a1f      	ldr	r2, [pc, #124]	@ (8000654 <MX_ETH_Init+0x84>)
 80005d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005da:	4b1f      	ldr	r3, [pc, #124]	@ (8000658 <MX_ETH_Init+0x88>)
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000658 <MX_ETH_Init+0x88>)
 80005e2:	2280      	movs	r2, #128	@ 0x80
 80005e4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000658 <MX_ETH_Init+0x88>)
 80005e8:	22e1      	movs	r2, #225	@ 0xe1
 80005ea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000658 <MX_ETH_Init+0x88>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005f2:	4b19      	ldr	r3, [pc, #100]	@ (8000658 <MX_ETH_Init+0x88>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80005f8:	4b17      	ldr	r3, [pc, #92]	@ (8000658 <MX_ETH_Init+0x88>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80005fe:	4b14      	ldr	r3, [pc, #80]	@ (8000650 <MX_ETH_Init+0x80>)
 8000600:	4a15      	ldr	r2, [pc, #84]	@ (8000658 <MX_ETH_Init+0x88>)
 8000602:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000604:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <MX_ETH_Init+0x80>)
 8000606:	2201      	movs	r2, #1
 8000608:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MX_ETH_Init+0x80>)
 800060c:	4a13      	ldr	r2, [pc, #76]	@ (800065c <MX_ETH_Init+0x8c>)
 800060e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000610:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <MX_ETH_Init+0x80>)
 8000612:	4a13      	ldr	r2, [pc, #76]	@ (8000660 <MX_ETH_Init+0x90>)
 8000614:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000616:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <MX_ETH_Init+0x80>)
 8000618:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800061c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800061e:	480c      	ldr	r0, [pc, #48]	@ (8000650 <MX_ETH_Init+0x80>)
 8000620:	f000 ff00 	bl	8001424 <HAL_ETH_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800062a:	f000 faaf 	bl	8000b8c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800062e:	2238      	movs	r2, #56	@ 0x38
 8000630:	2100      	movs	r1, #0
 8000632:	480c      	ldr	r0, [pc, #48]	@ (8000664 <MX_ETH_Init+0x94>)
 8000634:	f009 f980 	bl	8009938 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <MX_ETH_Init+0x94>)
 800063a:	2221      	movs	r2, #33	@ 0x21
 800063c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800063e:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <MX_ETH_Init+0x94>)
 8000640:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000644:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000646:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <MX_ETH_Init+0x94>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	24000178 	.word	0x24000178
 8000654:	40028000 	.word	0x40028000
 8000658:	24000228 	.word	0x24000228
 800065c:	240000c4 	.word	0x240000c4
 8000660:	24000064 	.word	0x24000064
 8000664:	24000140 	.word	0x24000140

08000668 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08e      	sub	sp, #56	@ 0x38
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a59      	ldr	r2, [pc, #356]	@ (80007ec <HAL_ETH_MspInit+0x184>)
 8000686:	4293      	cmp	r3, r2
 8000688:	f040 80ab 	bne.w	80007e2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800068c:	4b58      	ldr	r3, [pc, #352]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 800068e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000692:	4a57      	ldr	r2, [pc, #348]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000694:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000698:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800069c:	4b54      	ldr	r3, [pc, #336]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 800069e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80006a6:	623b      	str	r3, [r7, #32]
 80006a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80006aa:	4b51      	ldr	r3, [pc, #324]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006b0:	4a4f      	ldr	r2, [pc, #316]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006b6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006ba:	4b4d      	ldr	r3, [pc, #308]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006c4:	61fb      	str	r3, [r7, #28]
 80006c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80006c8:	4b49      	ldr	r3, [pc, #292]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006ce:	4a48      	ldr	r2, [pc, #288]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006d4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006d8:	4b45      	ldr	r3, [pc, #276]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006e2:	61bb      	str	r3, [r7, #24]
 80006e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	4b42      	ldr	r3, [pc, #264]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ec:	4a40      	ldr	r2, [pc, #256]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006ee:	f043 0304 	orr.w	r3, r3, #4
 80006f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006f6:	4b3e      	ldr	r3, [pc, #248]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	617b      	str	r3, [r7, #20]
 8000702:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	4b3a      	ldr	r3, [pc, #232]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800070a:	4a39      	ldr	r2, [pc, #228]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000714:	4b36      	ldr	r3, [pc, #216]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	4b33      	ldr	r3, [pc, #204]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000728:	4a31      	ldr	r2, [pc, #196]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 800072a:	f043 0302 	orr.w	r3, r3, #2
 800072e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000732:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000738:	f003 0302 	and.w	r3, r3, #2
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000740:	4b2b      	ldr	r3, [pc, #172]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000746:	4a2a      	ldr	r2, [pc, #168]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800074c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000750:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800075e:	2332      	movs	r3, #50	@ 0x32
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000762:	2302      	movs	r3, #2
 8000764:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800076e:	230b      	movs	r3, #11
 8000770:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000776:	4619      	mov	r1, r3
 8000778:	481e      	ldr	r0, [pc, #120]	@ (80007f4 <HAL_ETH_MspInit+0x18c>)
 800077a:	f001 fa87 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800077e:	2386      	movs	r3, #134	@ 0x86
 8000780:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078e:	230b      	movs	r3, #11
 8000790:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000796:	4619      	mov	r1, r3
 8000798:	4817      	ldr	r0, [pc, #92]	@ (80007f8 <HAL_ETH_MspInit+0x190>)
 800079a:	f001 fa77 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800079e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b0:	230b      	movs	r3, #11
 80007b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b8:	4619      	mov	r1, r3
 80007ba:	4810      	ldr	r0, [pc, #64]	@ (80007fc <HAL_ETH_MspInit+0x194>)
 80007bc:	f001 fa66 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80007c0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d2:	230b      	movs	r3, #11
 80007d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007da:	4619      	mov	r1, r3
 80007dc:	4808      	ldr	r0, [pc, #32]	@ (8000800 <HAL_ETH_MspInit+0x198>)
 80007de:	f001 fa55 	bl	8001c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007e2:	bf00      	nop
 80007e4:	3738      	adds	r7, #56	@ 0x38
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40028000 	.word	0x40028000
 80007f0:	58024400 	.word	0x58024400
 80007f4:	58020800 	.word	0x58020800
 80007f8:	58020000 	.word	0x58020000
 80007fc:	58020400 	.word	0x58020400
 8000800:	58021800 	.word	0x58021800

08000804 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(Task1Function, NULL, &Task1_attributes);
 8000808:	4a08      	ldr	r2, [pc, #32]	@ (800082c <MX_FREERTOS_Init+0x28>)
 800080a:	2100      	movs	r1, #0
 800080c:	4808      	ldr	r0, [pc, #32]	@ (8000830 <MX_FREERTOS_Init+0x2c>)
 800080e:	f006 fb2f 	bl	8006e70 <osThreadNew>
 8000812:	4603      	mov	r3, r0
 8000814:	4a07      	ldr	r2, [pc, #28]	@ (8000834 <MX_FREERTOS_Init+0x30>)
 8000816:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(Task2Function, NULL, &Task2_attributes);
 8000818:	4a07      	ldr	r2, [pc, #28]	@ (8000838 <MX_FREERTOS_Init+0x34>)
 800081a:	2100      	movs	r1, #0
 800081c:	4807      	ldr	r0, [pc, #28]	@ (800083c <MX_FREERTOS_Init+0x38>)
 800081e:	f006 fb27 	bl	8006e70 <osThreadNew>
 8000822:	4603      	mov	r3, r0
 8000824:	4a06      	ldr	r2, [pc, #24]	@ (8000840 <MX_FREERTOS_Init+0x3c>)
 8000826:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	08009b48 	.word	0x08009b48
 8000830:	08000845 	.word	0x08000845
 8000834:	24000230 	.word	0x24000230
 8000838:	08009b6c 	.word	0x08009b6c
 800083c:	08000865 	.word	0x08000865
 8000840:	24000234 	.word	0x24000234

08000844 <Task1Function>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1Function */
void Task1Function(void *argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task1Function */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800084c:	2101      	movs	r1, #1
 800084e:	4804      	ldr	r0, [pc, #16]	@ (8000860 <Task1Function+0x1c>)
 8000850:	f001 fbe5 	bl	800201e <HAL_GPIO_TogglePin>
	// HAL_Delay(500);
    osDelay(500);
 8000854:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000858:	f006 fb9c 	bl	8006f94 <osDelay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800085c:	bf00      	nop
 800085e:	e7f5      	b.n	800084c <Task1Function+0x8>
 8000860:	58020400 	.word	0x58020400

08000864 <Task2Function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2Function */
void Task2Function(void *argument)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2Function */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800086c:	2102      	movs	r1, #2
 800086e:	4804      	ldr	r0, [pc, #16]	@ (8000880 <Task2Function+0x1c>)
 8000870:	f001 fbd5 	bl	800201e <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000874:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000878:	f000 fcb0 	bl	80011dc <HAL_Delay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800087c:	bf00      	nop
 800087e:	e7f5      	b.n	800086c <Task2Function+0x8>
 8000880:	58021000 	.word	0x58021000

08000884 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	@ 0x30
 8000888:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	4b62      	ldr	r3, [pc, #392]	@ (8000a24 <MX_GPIO_Init+0x1a0>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a0:	4a60      	ldr	r2, [pc, #384]	@ (8000a24 <MX_GPIO_Init+0x1a0>)
 80008a2:	f043 0304 	orr.w	r3, r3, #4
 80008a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008aa:	4b5e      	ldr	r3, [pc, #376]	@ (8000a24 <MX_GPIO_Init+0x1a0>)
 80008ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b0:	f003 0304 	and.w	r3, r3, #4
 80008b4:	61bb      	str	r3, [r7, #24]
 80008b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b8:	4b5a      	ldr	r3, [pc, #360]	@ (8000a24 <MX_GPIO_Init+0x1a0>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008be:	4a59      	ldr	r2, [pc, #356]	@ (8000a24 <MX_GPIO_Init+0x1a0>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008c8:	4b56      	ldr	r3, [pc, #344]	@ (8000a24 <MX_GPIO_Init+0x1a0>)
 80008ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b53      	ldr	r3, [pc, #332]	@ (8000a24 <MX_GPIO_Init+0x1a0>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008dc:	4a51      	ldr	r2, [pc, #324]	@ (8000a24 <MX_GPIO_Init+0x1a0>)
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008e6:	4b4f      	ldr	r3, [pc, #316]	@ (8000a24 <MX_GPIO_Init+0x1a0>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f4:	4b4b      	ldr	r3, [pc, #300]	@ (8000a24 <MX_GPIO_Init+0x1a0>)
 80008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008fa:	4a4a      	ldr	r2, [pc, #296]	@ (8000a24 <MX_GPIO_Init+0x1a0>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000904:	4b47      	ldr	r3, [pc, #284]	@ (8000a24 <MX_GPIO_Init+0x1a0>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	4b44      	ldr	r3, [pc, #272]	@ (8000a24 <MX_GPIO_Init+0x1a0>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000918:	4a42      	ldr	r2, [pc, #264]	@ (8000a24 <MX_GPIO_Init+0x1a0>)
 800091a:	f043 0308 	orr.w	r3, r3, #8
 800091e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000922:	4b40      	ldr	r3, [pc, #256]	@ (8000a24 <MX_GPIO_Init+0x1a0>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000928:	f003 0308 	and.w	r3, r3, #8
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000930:	4b3c      	ldr	r3, [pc, #240]	@ (8000a24 <MX_GPIO_Init+0x1a0>)
 8000932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000936:	4a3b      	ldr	r2, [pc, #236]	@ (8000a24 <MX_GPIO_Init+0x1a0>)
 8000938:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800093c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000940:	4b38      	ldr	r3, [pc, #224]	@ (8000a24 <MX_GPIO_Init+0x1a0>)
 8000942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800094e:	4b35      	ldr	r3, [pc, #212]	@ (8000a24 <MX_GPIO_Init+0x1a0>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000954:	4a33      	ldr	r2, [pc, #204]	@ (8000a24 <MX_GPIO_Init+0x1a0>)
 8000956:	f043 0310 	orr.w	r3, r3, #16
 800095a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800095e:	4b31      	ldr	r3, [pc, #196]	@ (8000a24 <MX_GPIO_Init+0x1a0>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000964:	f003 0310 	and.w	r3, r3, #16
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000972:	482d      	ldr	r0, [pc, #180]	@ (8000a28 <MX_GPIO_Init+0x1a4>)
 8000974:	f001 fb3a 	bl	8001fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800097e:	482b      	ldr	r0, [pc, #172]	@ (8000a2c <MX_GPIO_Init+0x1a8>)
 8000980:	f001 fb34 	bl	8001fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	2102      	movs	r1, #2
 8000988:	4829      	ldr	r0, [pc, #164]	@ (8000a30 <MX_GPIO_Init+0x1ac>)
 800098a:	f001 fb2f 	bl	8001fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800098e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4824      	ldr	r0, [pc, #144]	@ (8000a34 <MX_GPIO_Init+0x1b0>)
 80009a4:	f001 f972 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009a8:	f244 0301 	movw	r3, #16385	@ 0x4001
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4819      	ldr	r0, [pc, #100]	@ (8000a28 <MX_GPIO_Init+0x1a4>)
 80009c2:	f001 f963 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80009c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	4813      	ldr	r0, [pc, #76]	@ (8000a2c <MX_GPIO_Init+0x1a8>)
 80009e0:	f001 f954 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80009e4:	2380      	movs	r3, #128	@ 0x80
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	480f      	ldr	r0, [pc, #60]	@ (8000a38 <MX_GPIO_Init+0x1b4>)
 80009fa:	f001 f947 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4806      	ldr	r0, [pc, #24]	@ (8000a30 <MX_GPIO_Init+0x1ac>)
 8000a16:	f001 f939 	bl	8001c8c <HAL_GPIO_Init>

}
 8000a1a:	bf00      	nop
 8000a1c:	3730      	adds	r7, #48	@ 0x30
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	58024400 	.word	0x58024400
 8000a28:	58020400 	.word	0x58020400
 8000a2c:	58020c00 	.word	0x58020c00
 8000a30:	58021000 	.word	0x58021000
 8000a34:	58020800 	.word	0x58020800
 8000a38:	58021800 	.word	0x58021800

08000a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a40:	f000 fb70 	bl	8001124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a44:	f000 f810 	bl	8000a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a48:	f7ff ff1c 	bl	8000884 <MX_GPIO_Init>
  MX_ETH_Init();
 8000a4c:	f7ff fdc0 	bl	80005d0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000a50:	f000 f9da 	bl	8000e08 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a54:	f000 fa8e 	bl	8000f74 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a58:	f006 f9c0 	bl	8006ddc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000a5c:	f7ff fed2 	bl	8000804 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a60:	f006 f9e0 	bl	8006e24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <main+0x28>

08000a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b09c      	sub	sp, #112	@ 0x70
 8000a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a72:	224c      	movs	r2, #76	@ 0x4c
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f008 ff5e 	bl	8009938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2220      	movs	r2, #32
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f008 ff58 	bl	8009938 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a88:	2002      	movs	r0, #2
 8000a8a:	f001 fc13 	bl	80022b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	4b33      	ldr	r3, [pc, #204]	@ (8000b60 <SystemClock_Config+0xf8>)
 8000a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a96:	4a32      	ldr	r2, [pc, #200]	@ (8000b60 <SystemClock_Config+0xf8>)
 8000a98:	f023 0301 	bic.w	r3, r3, #1
 8000a9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a9e:	4b30      	ldr	r3, [pc, #192]	@ (8000b60 <SystemClock_Config+0xf8>)
 8000aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8000b64 <SystemClock_Config+0xfc>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ab0:	4a2c      	ldr	r2, [pc, #176]	@ (8000b64 <SystemClock_Config+0xfc>)
 8000ab2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b64 <SystemClock_Config+0xfc>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ac4:	bf00      	nop
 8000ac6:	4b27      	ldr	r3, [pc, #156]	@ (8000b64 <SystemClock_Config+0xfc>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ad2:	d1f8      	bne.n	8000ac6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ad8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000adc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae2:	2340      	movs	r3, #64	@ 0x40
 8000ae4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aea:	2302      	movs	r3, #2
 8000aec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aee:	2301      	movs	r3, #1
 8000af0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000af2:	2318      	movs	r3, #24
 8000af4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000af6:	2302      	movs	r3, #2
 8000af8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000afa:	2304      	movs	r3, #4
 8000afc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000afe:	2302      	movs	r3, #2
 8000b00:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b02:	230c      	movs	r3, #12
 8000b04:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b12:	4618      	mov	r0, r3
 8000b14:	f001 fc18 	bl	8002348 <HAL_RCC_OscConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000b1e:	f000 f835 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b22:	233f      	movs	r3, #63	@ 0x3f
 8000b24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b36:	2340      	movs	r3, #64	@ 0x40
 8000b38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2101      	movs	r1, #1
 8000b46:	4618      	mov	r0, r3
 8000b48:	f002 f858 	bl	8002bfc <HAL_RCC_ClockConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000b52:	f000 f81b 	bl	8000b8c <Error_Handler>
  }
}
 8000b56:	bf00      	nop
 8000b58:	3770      	adds	r7, #112	@ 0x70
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	58000400 	.word	0x58000400
 8000b64:	58024800 	.word	0x58024800

08000b68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a04      	ldr	r2, [pc, #16]	@ (8000b88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d101      	bne.n	8000b7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b7a:	f000 fb0f 	bl	800119c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40001000 	.word	0x40001000

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <Error_Handler+0x8>

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <HAL_MspInit+0x38>)
 8000ba0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <HAL_MspInit+0x38>)
 8000ba6:	f043 0302 	orr.w	r3, r3, #2
 8000baa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000bae:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <HAL_MspInit+0x38>)
 8000bb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bb4:	f003 0302 	and.w	r3, r3, #2
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	210f      	movs	r1, #15
 8000bc0:	f06f 0001 	mvn.w	r0, #1
 8000bc4:	f000 fc06 	bl	80013d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	58024400 	.word	0x58024400

08000bd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b090      	sub	sp, #64	@ 0x40
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b0f      	cmp	r3, #15
 8000be0:	d827      	bhi.n	8000c32 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000be2:	2200      	movs	r2, #0
 8000be4:	6879      	ldr	r1, [r7, #4]
 8000be6:	2036      	movs	r0, #54	@ 0x36
 8000be8:	f000 fbf4 	bl	80013d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bec:	2036      	movs	r0, #54	@ 0x36
 8000bee:	f000 fc0b 	bl	8001408 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000bf2:	4a29      	ldr	r2, [pc, #164]	@ (8000c98 <HAL_InitTick+0xc4>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bf8:	4b28      	ldr	r3, [pc, #160]	@ (8000c9c <HAL_InitTick+0xc8>)
 8000bfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bfe:	4a27      	ldr	r2, [pc, #156]	@ (8000c9c <HAL_InitTick+0xc8>)
 8000c00:	f043 0310 	orr.w	r3, r3, #16
 8000c04:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c08:	4b24      	ldr	r3, [pc, #144]	@ (8000c9c <HAL_InitTick+0xc8>)
 8000c0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c0e:	f003 0310 	and.w	r3, r3, #16
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c16:	f107 0210 	add.w	r2, r7, #16
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f002 fb77 	bl	8003314 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c28:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d106      	bne.n	8000c3e <HAL_InitTick+0x6a>
 8000c30:	e001      	b.n	8000c36 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e02b      	b.n	8000c8e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c36:	f002 fb41 	bl	80032bc <HAL_RCC_GetPCLK1Freq>
 8000c3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000c3c:	e004      	b.n	8000c48 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c3e:	f002 fb3d 	bl	80032bc <HAL_RCC_GetPCLK1Freq>
 8000c42:	4603      	mov	r3, r0
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c4a:	4a15      	ldr	r2, [pc, #84]	@ (8000ca0 <HAL_InitTick+0xcc>)
 8000c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c50:	0c9b      	lsrs	r3, r3, #18
 8000c52:	3b01      	subs	r3, #1
 8000c54:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c56:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <HAL_InitTick+0xd0>)
 8000c58:	4a13      	ldr	r2, [pc, #76]	@ (8000ca8 <HAL_InitTick+0xd4>)
 8000c5a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <HAL_InitTick+0xd0>)
 8000c5e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c62:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c64:	4a0f      	ldr	r2, [pc, #60]	@ (8000ca4 <HAL_InitTick+0xd0>)
 8000c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c68:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <HAL_InitTick+0xd0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <HAL_InitTick+0xd0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c76:	480b      	ldr	r0, [pc, #44]	@ (8000ca4 <HAL_InitTick+0xd0>)
 8000c78:	f004 f9ba 	bl	8004ff0 <HAL_TIM_Base_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d104      	bne.n	8000c8c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c82:	4808      	ldr	r0, [pc, #32]	@ (8000ca4 <HAL_InitTick+0xd0>)
 8000c84:	f004 fa16 	bl	80050b4 <HAL_TIM_Base_Start_IT>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	e000      	b.n	8000c8e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3740      	adds	r7, #64	@ 0x40
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	24000008 	.word	0x24000008
 8000c9c:	58024400 	.word	0x58024400
 8000ca0:	431bde83 	.word	0x431bde83
 8000ca4:	24000238 	.word	0x24000238
 8000ca8:	40001000 	.word	0x40001000

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <HardFault_Handler+0x4>

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <MemManage_Handler+0x4>

08000cc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ce8:	4802      	ldr	r0, [pc, #8]	@ (8000cf4 <TIM6_DAC_IRQHandler+0x10>)
 8000cea:	f004 fa5b 	bl	80051a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	24000238 	.word	0x24000238

08000cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cfc:	4b37      	ldr	r3, [pc, #220]	@ (8000ddc <SystemInit+0xe4>)
 8000cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d02:	4a36      	ldr	r2, [pc, #216]	@ (8000ddc <SystemInit+0xe4>)
 8000d04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d0c:	4b34      	ldr	r3, [pc, #208]	@ (8000de0 <SystemInit+0xe8>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f003 030f 	and.w	r3, r3, #15
 8000d14:	2b06      	cmp	r3, #6
 8000d16:	d807      	bhi.n	8000d28 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d18:	4b31      	ldr	r3, [pc, #196]	@ (8000de0 <SystemInit+0xe8>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f023 030f 	bic.w	r3, r3, #15
 8000d20:	4a2f      	ldr	r2, [pc, #188]	@ (8000de0 <SystemInit+0xe8>)
 8000d22:	f043 0307 	orr.w	r3, r3, #7
 8000d26:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d28:	4b2e      	ldr	r3, [pc, #184]	@ (8000de4 <SystemInit+0xec>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a2d      	ldr	r2, [pc, #180]	@ (8000de4 <SystemInit+0xec>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d34:	4b2b      	ldr	r3, [pc, #172]	@ (8000de4 <SystemInit+0xec>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000de4 <SystemInit+0xec>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	4929      	ldr	r1, [pc, #164]	@ (8000de4 <SystemInit+0xec>)
 8000d40:	4b29      	ldr	r3, [pc, #164]	@ (8000de8 <SystemInit+0xf0>)
 8000d42:	4013      	ands	r3, r2
 8000d44:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d46:	4b26      	ldr	r3, [pc, #152]	@ (8000de0 <SystemInit+0xe8>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0308 	and.w	r3, r3, #8
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d007      	beq.n	8000d62 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d52:	4b23      	ldr	r3, [pc, #140]	@ (8000de0 <SystemInit+0xe8>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f023 030f 	bic.w	r3, r3, #15
 8000d5a:	4a21      	ldr	r2, [pc, #132]	@ (8000de0 <SystemInit+0xe8>)
 8000d5c:	f043 0307 	orr.w	r3, r3, #7
 8000d60:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d62:	4b20      	ldr	r3, [pc, #128]	@ (8000de4 <SystemInit+0xec>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d68:	4b1e      	ldr	r3, [pc, #120]	@ (8000de4 <SystemInit+0xec>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000de4 <SystemInit+0xec>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <SystemInit+0xec>)
 8000d76:	4a1d      	ldr	r2, [pc, #116]	@ (8000dec <SystemInit+0xf4>)
 8000d78:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <SystemInit+0xec>)
 8000d7c:	4a1c      	ldr	r2, [pc, #112]	@ (8000df0 <SystemInit+0xf8>)
 8000d7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d80:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <SystemInit+0xec>)
 8000d82:	4a1c      	ldr	r2, [pc, #112]	@ (8000df4 <SystemInit+0xfc>)
 8000d84:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d86:	4b17      	ldr	r3, [pc, #92]	@ (8000de4 <SystemInit+0xec>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d8c:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <SystemInit+0xec>)
 8000d8e:	4a19      	ldr	r2, [pc, #100]	@ (8000df4 <SystemInit+0xfc>)
 8000d90:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <SystemInit+0xec>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d98:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <SystemInit+0xec>)
 8000d9a:	4a16      	ldr	r2, [pc, #88]	@ (8000df4 <SystemInit+0xfc>)
 8000d9c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <SystemInit+0xec>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <SystemInit+0xec>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0e      	ldr	r2, [pc, #56]	@ (8000de4 <SystemInit+0xec>)
 8000daa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <SystemInit+0xec>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000db6:	4b10      	ldr	r3, [pc, #64]	@ (8000df8 <SystemInit+0x100>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <SystemInit+0x104>)
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000dc2:	d202      	bcs.n	8000dca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <SystemInit+0x108>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <SystemInit+0x10c>)
 8000dcc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000dd0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00
 8000de0:	52002000 	.word	0x52002000
 8000de4:	58024400 	.word	0x58024400
 8000de8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000dec:	02020200 	.word	0x02020200
 8000df0:	01ff0000 	.word	0x01ff0000
 8000df4:	01010280 	.word	0x01010280
 8000df8:	5c001000 	.word	0x5c001000
 8000dfc:	ffff0000 	.word	0xffff0000
 8000e00:	51008108 	.word	0x51008108
 8000e04:	52004000 	.word	0x52004000

08000e08 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e0c:	4b22      	ldr	r3, [pc, #136]	@ (8000e98 <MX_USART3_UART_Init+0x90>)
 8000e0e:	4a23      	ldr	r2, [pc, #140]	@ (8000e9c <MX_USART3_UART_Init+0x94>)
 8000e10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e12:	4b21      	ldr	r3, [pc, #132]	@ (8000e98 <MX_USART3_UART_Init+0x90>)
 8000e14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e98 <MX_USART3_UART_Init+0x90>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e20:	4b1d      	ldr	r3, [pc, #116]	@ (8000e98 <MX_USART3_UART_Init+0x90>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e26:	4b1c      	ldr	r3, [pc, #112]	@ (8000e98 <MX_USART3_UART_Init+0x90>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e98 <MX_USART3_UART_Init+0x90>)
 8000e2e:	220c      	movs	r2, #12
 8000e30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e32:	4b19      	ldr	r3, [pc, #100]	@ (8000e98 <MX_USART3_UART_Init+0x90>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e38:	4b17      	ldr	r3, [pc, #92]	@ (8000e98 <MX_USART3_UART_Init+0x90>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e3e:	4b16      	ldr	r3, [pc, #88]	@ (8000e98 <MX_USART3_UART_Init+0x90>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e44:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <MX_USART3_UART_Init+0x90>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e4a:	4b13      	ldr	r3, [pc, #76]	@ (8000e98 <MX_USART3_UART_Init+0x90>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e50:	4811      	ldr	r0, [pc, #68]	@ (8000e98 <MX_USART3_UART_Init+0x90>)
 8000e52:	f004 fb9b 	bl	800558c <HAL_UART_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e5c:	f7ff fe96 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e60:	2100      	movs	r1, #0
 8000e62:	480d      	ldr	r0, [pc, #52]	@ (8000e98 <MX_USART3_UART_Init+0x90>)
 8000e64:	f005 fba3 	bl	80065ae <HAL_UARTEx_SetTxFifoThreshold>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e6e:	f7ff fe8d 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e72:	2100      	movs	r1, #0
 8000e74:	4808      	ldr	r0, [pc, #32]	@ (8000e98 <MX_USART3_UART_Init+0x90>)
 8000e76:	f005 fbd8 	bl	800662a <HAL_UARTEx_SetRxFifoThreshold>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e80:	f7ff fe84 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e84:	4804      	ldr	r0, [pc, #16]	@ (8000e98 <MX_USART3_UART_Init+0x90>)
 8000e86:	f005 fb59 	bl	800653c <HAL_UARTEx_DisableFifoMode>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e90:	f7ff fe7c 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	24000284 	.word	0x24000284
 8000e9c:	40004800 	.word	0x40004800

08000ea0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b0ba      	sub	sp, #232	@ 0xe8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	22c0      	movs	r2, #192	@ 0xc0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f008 fd39 	bl	8009938 <memset>
  if(uartHandle->Instance==USART3)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a27      	ldr	r2, [pc, #156]	@ (8000f68 <HAL_UART_MspInit+0xc8>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d146      	bne.n	8000f5e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ed0:	f04f 0202 	mov.w	r2, #2
 8000ed4:	f04f 0300 	mov.w	r3, #0
 8000ed8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f002 fa56 	bl	8003398 <HAL_RCCEx_PeriphCLKConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ef2:	f7ff fe4b 	bl	8000b8c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f6c <HAL_UART_MspInit+0xcc>)
 8000ef8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000efc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f6c <HAL_UART_MspInit+0xcc>)
 8000efe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f02:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f06:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <HAL_UART_MspInit+0xcc>)
 8000f08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f14:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <HAL_UART_MspInit+0xcc>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1a:	4a14      	ldr	r2, [pc, #80]	@ (8000f6c <HAL_UART_MspInit+0xcc>)
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f24:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <HAL_UART_MspInit+0xcc>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2a:	f003 0308 	and.w	r3, r3, #8
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f4c:	2307      	movs	r3, #7
 8000f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f52:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	@ (8000f70 <HAL_UART_MspInit+0xd0>)
 8000f5a:	f000 fe97 	bl	8001c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f5e:	bf00      	nop
 8000f60:	37e8      	adds	r7, #232	@ 0xe8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40004800 	.word	0x40004800
 8000f6c:	58024400 	.word	0x58024400
 8000f70:	58020c00 	.word	0x58020c00

08000f74 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f78:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f7a:	4a16      	ldr	r2, [pc, #88]	@ (8000fd4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f80:	2209      	movs	r2, #9
 8000f82:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f84:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f86:	2202      	movs	r2, #2
 8000f88:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f92:	2202      	movs	r2, #2
 8000f94:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	@ (8000fd0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fae:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fba:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fbc:	f001 f849 	bl	8002052 <HAL_PCD_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000fc6:	f7ff fde1 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000318 	.word	0x24000318
 8000fd4:	40080000 	.word	0x40080000

08000fd8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b0ba      	sub	sp, #232	@ 0xe8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	22c0      	movs	r2, #192	@ 0xc0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f008 fc9d 	bl	8009938 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a30      	ldr	r2, [pc, #192]	@ (80010c4 <HAL_PCD_MspInit+0xec>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d159      	bne.n	80010bc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001008:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800100c:	f04f 0300 	mov.w	r3, #0
 8001010:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001014:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001018:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	4618      	mov	r0, r3
 8001022:	f002 f9b9 	bl	8003398 <HAL_RCCEx_PeriphCLKConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800102c:	f7ff fdae 	bl	8000b8c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001030:	f001 f97a 	bl	8002328 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001034:	4b24      	ldr	r3, [pc, #144]	@ (80010c8 <HAL_PCD_MspInit+0xf0>)
 8001036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103a:	4a23      	ldr	r2, [pc, #140]	@ (80010c8 <HAL_PCD_MspInit+0xf0>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001044:	4b20      	ldr	r3, [pc, #128]	@ (80010c8 <HAL_PCD_MspInit+0xf0>)
 8001046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001052:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001056:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800106c:	230a      	movs	r3, #10
 800106e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001076:	4619      	mov	r1, r3
 8001078:	4814      	ldr	r0, [pc, #80]	@ (80010cc <HAL_PCD_MspInit+0xf4>)
 800107a:	f000 fe07 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800107e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001082:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001086:	2300      	movs	r3, #0
 8001088:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001096:	4619      	mov	r1, r3
 8001098:	480c      	ldr	r0, [pc, #48]	@ (80010cc <HAL_PCD_MspInit+0xf4>)
 800109a:	f000 fdf7 	bl	8001c8c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800109e:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <HAL_PCD_MspInit+0xf0>)
 80010a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010a4:	4a08      	ldr	r2, [pc, #32]	@ (80010c8 <HAL_PCD_MspInit+0xf0>)
 80010a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80010aa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010ae:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <HAL_PCD_MspInit+0xf0>)
 80010b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80010bc:	bf00      	nop
 80010be:	37e8      	adds	r7, #232	@ 0xe8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40080000 	.word	0x40080000
 80010c8:	58024400 	.word	0x58024400
 80010cc:	58020000 	.word	0x58020000

080010d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001108 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010d4:	f7ff fe10 	bl	8000cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d8:	480c      	ldr	r0, [pc, #48]	@ (800110c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010da:	490d      	ldr	r1, [pc, #52]	@ (8001110 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001114 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e0:	e002      	b.n	80010e8 <LoopCopyDataInit>

080010e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e6:	3304      	adds	r3, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ec:	d3f9      	bcc.n	80010e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001118 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010f0:	4c0a      	ldr	r4, [pc, #40]	@ (800111c <LoopFillZerobss+0x22>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f4:	e001      	b.n	80010fa <LoopFillZerobss>

080010f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f8:	3204      	adds	r2, #4

080010fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010fc:	d3fb      	bcc.n	80010f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010fe:	f008 fc79 	bl	80099f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001102:	f7ff fc9b 	bl	8000a3c <main>
  bx  lr
 8001106:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001108:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800110c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001110:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001114:	08009bd8 	.word	0x08009bd8
  ldr r2, =_sbss
 8001118:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 800111c:	24005328 	.word	0x24005328

08001120 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC3_IRQHandler>
	...

08001124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112a:	2003      	movs	r0, #3
 800112c:	f000 f947 	bl	80013be <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001130:	f001 ff1a 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8001134:	4602      	mov	r2, r0
 8001136:	4b15      	ldr	r3, [pc, #84]	@ (800118c <HAL_Init+0x68>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	0a1b      	lsrs	r3, r3, #8
 800113c:	f003 030f 	and.w	r3, r3, #15
 8001140:	4913      	ldr	r1, [pc, #76]	@ (8001190 <HAL_Init+0x6c>)
 8001142:	5ccb      	ldrb	r3, [r1, r3]
 8001144:	f003 031f 	and.w	r3, r3, #31
 8001148:	fa22 f303 	lsr.w	r3, r2, r3
 800114c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800114e:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <HAL_Init+0x68>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	4a0e      	ldr	r2, [pc, #56]	@ (8001190 <HAL_Init+0x6c>)
 8001158:	5cd3      	ldrb	r3, [r2, r3]
 800115a:	f003 031f 	and.w	r3, r3, #31
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	fa22 f303 	lsr.w	r3, r2, r3
 8001164:	4a0b      	ldr	r2, [pc, #44]	@ (8001194 <HAL_Init+0x70>)
 8001166:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001168:	4a0b      	ldr	r2, [pc, #44]	@ (8001198 <HAL_Init+0x74>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800116e:	200f      	movs	r0, #15
 8001170:	f7ff fd30 	bl	8000bd4 <HAL_InitTick>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e002      	b.n	8001184 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800117e:	f7ff fd0b 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	58024400 	.word	0x58024400
 8001190:	08009b90 	.word	0x08009b90
 8001194:	24000004 	.word	0x24000004
 8001198:	24000000 	.word	0x24000000

0800119c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_IncTick+0x20>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <HAL_IncTick+0x24>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <HAL_IncTick+0x24>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	2400000c 	.word	0x2400000c
 80011c0:	240007fc 	.word	0x240007fc

080011c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;
 80011c8:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <HAL_GetTick+0x14>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	240007fc 	.word	0x240007fc

080011dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e4:	f7ff ffee 	bl	80011c4 <HAL_GetTick>
 80011e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011f4:	d005      	beq.n	8001202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <HAL_Delay+0x44>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001202:	bf00      	nop
 8001204:	f7ff ffde 	bl	80011c4 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	429a      	cmp	r2, r3
 8001212:	d8f7      	bhi.n	8001204 <HAL_Delay+0x28>
  {
  }
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2400000c 	.word	0x2400000c

08001224 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001228:	4b03      	ldr	r3, [pc, #12]	@ (8001238 <HAL_GetREVID+0x14>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	0c1b      	lsrs	r3, r3, #16
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	5c001000 	.word	0x5c001000

0800123c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800124c:	4904      	ldr	r1, [pc, #16]	@ (8001260 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4313      	orrs	r3, r2
 8001252:	604b      	str	r3, [r1, #4]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	58000400 	.word	0x58000400

08001264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001274:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001280:	4013      	ands	r3, r2
 8001282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800128c:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 800128e:	4313      	orrs	r3, r2
 8001290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001292:	4a04      	ldr	r2, [pc, #16]	@ (80012a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	60d3      	str	r3, [r2, #12]
}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000ed00 	.word	0xe000ed00
 80012a8:	05fa0000 	.word	0x05fa0000

080012ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b0:	4b04      	ldr	r3, [pc, #16]	@ (80012c4 <__NVIC_GetPriorityGrouping+0x18>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	f003 0307 	and.w	r3, r3, #7
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	db0b      	blt.n	80012f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	f003 021f 	and.w	r2, r3, #31
 80012e0:	4907      	ldr	r1, [pc, #28]	@ (8001300 <__NVIC_EnableIRQ+0x38>)
 80012e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	2001      	movs	r0, #1
 80012ea:	fa00 f202 	lsl.w	r2, r0, r2
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000e100 	.word	0xe000e100

08001304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001310:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db0a      	blt.n	800132e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	490c      	ldr	r1, [pc, #48]	@ (8001350 <__NVIC_SetPriority+0x4c>)
 800131e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800132c:	e00a      	b.n	8001344 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4908      	ldr	r1, [pc, #32]	@ (8001354 <__NVIC_SetPriority+0x50>)
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3b04      	subs	r3, #4
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	440b      	add	r3, r1
 8001342:	761a      	strb	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	@ 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1c3 0307 	rsb	r3, r3, #7
 8001372:	2b04      	cmp	r3, #4
 8001374:	bf28      	it	cs
 8001376:	2304      	movcs	r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3304      	adds	r3, #4
 800137e:	2b06      	cmp	r3, #6
 8001380:	d902      	bls.n	8001388 <NVIC_EncodePriority+0x30>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3b03      	subs	r3, #3
 8001386:	e000      	b.n	800138a <NVIC_EncodePriority+0x32>
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4313      	orrs	r3, r2
         );
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	@ 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ff4c 	bl	8001264 <__NVIC_SetPriorityGrouping>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
 80013e0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013e2:	f7ff ff63 	bl	80012ac <__NVIC_GetPriorityGrouping>
 80013e6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	68b9      	ldr	r1, [r7, #8]
 80013ec:	6978      	ldr	r0, [r7, #20]
 80013ee:	f7ff ffb3 	bl	8001358 <NVIC_EncodePriority>
 80013f2:	4602      	mov	r2, r0
 80013f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013f8:	4611      	mov	r1, r2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff82 	bl	8001304 <__NVIC_SetPriority>
}
 8001400:	bf00      	nop
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001412:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff56 	bl	80012c8 <__NVIC_EnableIRQ>
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e0e3      	b.n	80015fe <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800143c:	2b00      	cmp	r3, #0
 800143e:	d106      	bne.n	800144e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2223      	movs	r2, #35	@ 0x23
 8001444:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff f90d 	bl	8000668 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	4b6e      	ldr	r3, [pc, #440]	@ (8001608 <HAL_ETH_Init+0x1e4>)
 8001450:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001454:	4a6c      	ldr	r2, [pc, #432]	@ (8001608 <HAL_ETH_Init+0x1e4>)
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800145e:	4b6a      	ldr	r3, [pc, #424]	@ (8001608 <HAL_ETH_Init+0x1e4>)
 8001460:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7a1b      	ldrb	r3, [r3, #8]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d103      	bne.n	800147c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001474:	2000      	movs	r0, #0
 8001476:	f7ff fee1 	bl	800123c <HAL_SYSCFG_ETHInterfaceSelect>
 800147a:	e003      	b.n	8001484 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800147c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001480:	f7ff fedc 	bl	800123c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001484:	4b61      	ldr	r3, [pc, #388]	@ (800160c <HAL_ETH_Init+0x1e8>)
 8001486:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	6812      	ldr	r2, [r2, #0]
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800149e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014a0:	f7ff fe90 	bl	80011c4 <HAL_GetTick>
 80014a4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80014a6:	e011      	b.n	80014cc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014a8:	f7ff fe8c 	bl	80011c4 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014b6:	d909      	bls.n	80014cc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2204      	movs	r2, #4
 80014bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	22e0      	movs	r2, #224	@ 0xe0
 80014c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e098      	b.n	80015fe <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1e4      	bne.n	80014a8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 f89e 	bl	8001620 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80014e4:	f001 feba 	bl	800325c <HAL_RCC_GetHCLKFreq>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4a49      	ldr	r2, [pc, #292]	@ (8001610 <HAL_ETH_Init+0x1ec>)
 80014ec:	fba2 2303 	umull	r2, r3, r2, r3
 80014f0:	0c9a      	lsrs	r2, r3, #18
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3a01      	subs	r2, #1
 80014f8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 fa81 	bl	8001a04 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800150a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800150e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6812      	ldr	r2, [r2, #0]
 8001516:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800151a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800151e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d009      	beq.n	8001542 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	22e0      	movs	r2, #224	@ 0xe0
 800153a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e05d      	b.n	80015fe <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800154a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800154e:	4b31      	ldr	r3, [pc, #196]	@ (8001614 <HAL_ETH_Init+0x1f0>)
 8001550:	4013      	ands	r3, r2
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6952      	ldr	r2, [r2, #20]
 8001556:	0051      	lsls	r1, r2, #1
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	6812      	ldr	r2, [r2, #0]
 800155c:	430b      	orrs	r3, r1
 800155e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001562:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 fae9 	bl	8001b3e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 fb2f 	bl	8001bd0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	3305      	adds	r3, #5
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	021a      	lsls	r2, r3, #8
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	3304      	adds	r3, #4
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	3303      	adds	r3, #3
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	061a      	lsls	r2, r3, #24
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	3302      	adds	r3, #2
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	041b      	lsls	r3, r3, #16
 80015a4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	3301      	adds	r3, #1
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015b0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015be:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015c0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <HAL_ETH_Init+0x1f4>)
 80015d2:	430b      	orrs	r3, r1
 80015d4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b0d      	ldr	r3, [pc, #52]	@ (800161c <HAL_ETH_Init+0x1f8>)
 80015e6:	430b      	orrs	r3, r1
 80015e8:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2210      	movs	r2, #16
 80015f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	58024400 	.word	0x58024400
 800160c:	58000400 	.word	0x58000400
 8001610:	431bde83 	.word	0x431bde83
 8001614:	ffff8001 	.word	0xffff8001
 8001618:	0c020060 	.word	0x0c020060
 800161c:	0c20c000 	.word	0x0c20c000

08001620 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001630:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001638:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800163a:	f001 fe0f 	bl	800325c <HAL_RCC_GetHCLKFreq>
 800163e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	4a1a      	ldr	r2, [pc, #104]	@ (80016ac <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d804      	bhi.n	8001652 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	e022      	b.n	8001698 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	4a16      	ldr	r2, [pc, #88]	@ (80016b0 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d204      	bcs.n	8001664 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	e019      	b.n	8001698 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	4a13      	ldr	r2, [pc, #76]	@ (80016b4 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d915      	bls.n	8001698 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	4a12      	ldr	r2, [pc, #72]	@ (80016b8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d804      	bhi.n	800167e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	e00c      	b.n	8001698 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	4a0e      	ldr	r2, [pc, #56]	@ (80016bc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d804      	bhi.n	8001690 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	e003      	b.n	8001698 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001696:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	02160ebf 	.word	0x02160ebf
 80016b0:	03938700 	.word	0x03938700
 80016b4:	05f5e0ff 	.word	0x05f5e0ff
 80016b8:	08f0d17f 	.word	0x08f0d17f
 80016bc:	0ee6b27f 	.word	0x0ee6b27f

080016c0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80016d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	791b      	ldrb	r3, [r3, #4]
 80016d8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80016da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	7b1b      	ldrb	r3, [r3, #12]
 80016e0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80016e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	7b5b      	ldrb	r3, [r3, #13]
 80016e8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80016ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	7b9b      	ldrb	r3, [r3, #14]
 80016f0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80016f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	7bdb      	ldrb	r3, [r3, #15]
 80016f8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80016fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	7c12      	ldrb	r2, [r2, #16]
 8001700:	2a00      	cmp	r2, #0
 8001702:	d102      	bne.n	800170a <ETH_SetMACConfig+0x4a>
 8001704:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001708:	e000      	b.n	800170c <ETH_SetMACConfig+0x4c>
 800170a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800170c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	7c52      	ldrb	r2, [r2, #17]
 8001712:	2a00      	cmp	r2, #0
 8001714:	d102      	bne.n	800171c <ETH_SetMACConfig+0x5c>
 8001716:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800171a:	e000      	b.n	800171e <ETH_SetMACConfig+0x5e>
 800171c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800171e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	7c9b      	ldrb	r3, [r3, #18]
 8001724:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001726:	431a      	orrs	r2, r3
               macconf->Speed |
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800172c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001732:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	7f1b      	ldrb	r3, [r3, #28]
 8001738:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800173a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	7f5b      	ldrb	r3, [r3, #29]
 8001740:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001742:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	7f92      	ldrb	r2, [r2, #30]
 8001748:	2a00      	cmp	r2, #0
 800174a:	d102      	bne.n	8001752 <ETH_SetMACConfig+0x92>
 800174c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001750:	e000      	b.n	8001754 <ETH_SetMACConfig+0x94>
 8001752:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001754:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	7fdb      	ldrb	r3, [r3, #31]
 800175a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800175c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001764:	2a00      	cmp	r2, #0
 8001766:	d102      	bne.n	800176e <ETH_SetMACConfig+0xae>
 8001768:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800176c:	e000      	b.n	8001770 <ETH_SetMACConfig+0xb0>
 800176e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001770:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001776:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800177e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001780:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001786:	4313      	orrs	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b56      	ldr	r3, [pc, #344]	@ (80018ec <ETH_SetMACConfig+0x22c>)
 8001792:	4013      	ands	r3, r2
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	68f9      	ldr	r1, [r7, #12]
 800179a:	430b      	orrs	r3, r1
 800179c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017a2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80017aa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80017ac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017b4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80017b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80017be:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80017c0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80017c8:	2a00      	cmp	r2, #0
 80017ca:	d102      	bne.n	80017d2 <ETH_SetMACConfig+0x112>
 80017cc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017d0:	e000      	b.n	80017d4 <ETH_SetMACConfig+0x114>
 80017d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80017d4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80017da:	4313      	orrs	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	4b42      	ldr	r3, [pc, #264]	@ (80018f0 <ETH_SetMACConfig+0x230>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	68f9      	ldr	r1, [r7, #12]
 80017ee:	430b      	orrs	r3, r1
 80017f0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017f8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80017fe:	4313      	orrs	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	4b3a      	ldr	r3, [pc, #232]	@ (80018f4 <ETH_SetMACConfig+0x234>)
 800180a:	4013      	ands	r3, r2
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	68f9      	ldr	r1, [r7, #12]
 8001812:	430b      	orrs	r3, r1
 8001814:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800181c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001822:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800182a:	2a00      	cmp	r2, #0
 800182c:	d101      	bne.n	8001832 <ETH_SetMACConfig+0x172>
 800182e:	2280      	movs	r2, #128	@ 0x80
 8001830:	e000      	b.n	8001834 <ETH_SetMACConfig+0x174>
 8001832:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001834:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800183a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800183c:	4313      	orrs	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001846:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800184a:	4013      	ands	r3, r2
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	68f9      	ldr	r1, [r7, #12]
 8001852:	430b      	orrs	r3, r1
 8001854:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800185c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001864:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001866:	4313      	orrs	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001872:	f023 0103 	bic.w	r1, r3, #3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	430a      	orrs	r2, r1
 800187e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800188a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80018a6:	2a00      	cmp	r2, #0
 80018a8:	d101      	bne.n	80018ae <ETH_SetMACConfig+0x1ee>
 80018aa:	2240      	movs	r2, #64	@ 0x40
 80018ac:	e000      	b.n	80018b0 <ETH_SetMACConfig+0x1f0>
 80018ae:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80018b0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80018b8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80018ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80018c2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80018c4:	4313      	orrs	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80018d0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	430a      	orrs	r2, r1
 80018dc:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	00048083 	.word	0x00048083
 80018f0:	c0f88000 	.word	0xc0f88000
 80018f4:	fffffef0 	.word	0xfffffef0

080018f8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b38      	ldr	r3, [pc, #224]	@ (80019f0 <ETH_SetDMAConfig+0xf8>)
 800190e:	4013      	ands	r3, r2
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	6811      	ldr	r1, [r2, #0]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	430b      	orrs	r3, r1
 800191a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800191e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	791b      	ldrb	r3, [r3, #4]
 8001924:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800192a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	7b1b      	ldrb	r3, [r3, #12]
 8001930:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001932:	4313      	orrs	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	4b2c      	ldr	r3, [pc, #176]	@ (80019f4 <ETH_SetDMAConfig+0xfc>)
 8001942:	4013      	ands	r3, r2
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	68f9      	ldr	r1, [r7, #12]
 800194a:	430b      	orrs	r3, r1
 800194c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001950:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	7b5b      	ldrb	r3, [r3, #13]
 8001956:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800195c:	4313      	orrs	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001968:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800196c:	4b22      	ldr	r3, [pc, #136]	@ (80019f8 <ETH_SetDMAConfig+0x100>)
 800196e:	4013      	ands	r3, r2
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	68f9      	ldr	r1, [r7, #12]
 8001976:	430b      	orrs	r3, r1
 8001978:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800197c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	7d1b      	ldrb	r3, [r3, #20]
 8001988:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800198a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	7f5b      	ldrb	r3, [r3, #29]
 8001990:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001992:	4313      	orrs	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800199e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80019a2:	4b16      	ldr	r3, [pc, #88]	@ (80019fc <ETH_SetDMAConfig+0x104>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6812      	ldr	r2, [r2, #0]
 80019aa:	68f9      	ldr	r1, [r7, #12]
 80019ac:	430b      	orrs	r3, r1
 80019ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019b2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	7f1b      	ldrb	r3, [r3, #28]
 80019ba:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80019c0:	4313      	orrs	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019cc:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80019d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <ETH_SetDMAConfig+0x108>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	68f9      	ldr	r1, [r7, #12]
 80019da:	430b      	orrs	r3, r1
 80019dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019e0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	ffff87fd 	.word	0xffff87fd
 80019f4:	ffff2ffe 	.word	0xffff2ffe
 80019f8:	fffec000 	.word	0xfffec000
 80019fc:	ffc0efef 	.word	0xffc0efef
 8001a00:	7fc0ffff 	.word	0x7fc0ffff

08001a04 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b0a4      	sub	sp, #144	@ 0x90
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a12:	2300      	movs	r3, #0
 8001a14:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a22:	2301      	movs	r3, #1
 8001a24:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a44:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001a5c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001a60:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001a86:	2300      	movs	r3, #0
 8001a88:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a96:	2301      	movs	r3, #1
 8001a98:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001a9c:	2320      	movs	r3, #32
 8001a9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001aae:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001ab4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ab8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ae8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aec:	4619      	mov	r1, r3
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fde6 	bl	80016c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001af4:	2301      	movs	r3, #1
 8001af6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001af8:	2301      	movs	r3, #1
 8001afa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b0e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001b12:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b18:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001b1c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001b24:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001b28:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001b2a:	f107 0308 	add.w	r3, r7, #8
 8001b2e:	4619      	mov	r1, r3
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff fee1 	bl	80018f8 <ETH_SetDMAConfig>
}
 8001b36:	bf00      	nop
 8001b38:	3790      	adds	r7, #144	@ 0x90
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b085      	sub	sp, #20
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	e01d      	b.n	8001b88 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68d9      	ldr	r1, [r3, #12]
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	4613      	mov	r3, r2
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	4413      	add	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	440b      	add	r3, r1
 8001b5c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	2200      	movs	r2, #0
 8001b68:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2200      	movs	r2, #0
 8001b74:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b76:	68b9      	ldr	r1, [r7, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	3206      	adds	r2, #6
 8001b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	3301      	adds	r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d9de      	bls.n	8001b4c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bb0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bc0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	e023      	b.n	8001c26 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6919      	ldr	r1, [r3, #16]
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	440b      	add	r3, r1
 8001bee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2200      	movs	r2, #0
 8001c06:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2200      	movs	r2, #0
 8001c12:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	3212      	adds	r2, #18
 8001c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	3301      	adds	r3, #1
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	d9d8      	bls.n	8001bde <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c52:	461a      	mov	r2, r3
 8001c54:	2303      	movs	r3, #3
 8001c56:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691a      	ldr	r2, [r3, #16]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c66:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c7a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001c7e:	bf00      	nop
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	@ 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c9a:	4b89      	ldr	r3, [pc, #548]	@ (8001ec0 <HAL_GPIO_Init+0x234>)
 8001c9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c9e:	e194      	b.n	8001fca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8186 	beq.w	8001fc4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d005      	beq.n	8001cd0 <HAL_GPIO_Init+0x44>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d130      	bne.n	8001d32 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d06:	2201      	movs	r2, #1
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	091b      	lsrs	r3, r3, #4
 8001d1c:	f003 0201 	and.w	r2, r3, #1
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d017      	beq.n	8001d6e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	2203      	movs	r2, #3
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d123      	bne.n	8001dc2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	08da      	lsrs	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3208      	adds	r2, #8
 8001d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	220f      	movs	r2, #15
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	691a      	ldr	r2, [r3, #16]
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	08da      	lsrs	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3208      	adds	r2, #8
 8001dbc:	69b9      	ldr	r1, [r7, #24]
 8001dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	2203      	movs	r2, #3
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0203 	and.w	r2, r3, #3
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 80e0 	beq.w	8001fc4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e04:	4b2f      	ldr	r3, [pc, #188]	@ (8001ec4 <HAL_GPIO_Init+0x238>)
 8001e06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e0a:	4a2e      	ldr	r2, [pc, #184]	@ (8001ec4 <HAL_GPIO_Init+0x238>)
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e14:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec4 <HAL_GPIO_Init+0x238>)
 8001e16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e22:	4a29      	ldr	r2, [pc, #164]	@ (8001ec8 <HAL_GPIO_Init+0x23c>)
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	089b      	lsrs	r3, r3, #2
 8001e28:	3302      	adds	r3, #2
 8001e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	220f      	movs	r2, #15
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a20      	ldr	r2, [pc, #128]	@ (8001ecc <HAL_GPIO_Init+0x240>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d052      	beq.n	8001ef4 <HAL_GPIO_Init+0x268>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a1f      	ldr	r2, [pc, #124]	@ (8001ed0 <HAL_GPIO_Init+0x244>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d031      	beq.n	8001eba <HAL_GPIO_Init+0x22e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a1e      	ldr	r2, [pc, #120]	@ (8001ed4 <HAL_GPIO_Init+0x248>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d02b      	beq.n	8001eb6 <HAL_GPIO_Init+0x22a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed8 <HAL_GPIO_Init+0x24c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d025      	beq.n	8001eb2 <HAL_GPIO_Init+0x226>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a1c      	ldr	r2, [pc, #112]	@ (8001edc <HAL_GPIO_Init+0x250>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d01f      	beq.n	8001eae <HAL_GPIO_Init+0x222>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee0 <HAL_GPIO_Init+0x254>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d019      	beq.n	8001eaa <HAL_GPIO_Init+0x21e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a1a      	ldr	r2, [pc, #104]	@ (8001ee4 <HAL_GPIO_Init+0x258>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d013      	beq.n	8001ea6 <HAL_GPIO_Init+0x21a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a19      	ldr	r2, [pc, #100]	@ (8001ee8 <HAL_GPIO_Init+0x25c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d00d      	beq.n	8001ea2 <HAL_GPIO_Init+0x216>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a18      	ldr	r2, [pc, #96]	@ (8001eec <HAL_GPIO_Init+0x260>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d007      	beq.n	8001e9e <HAL_GPIO_Init+0x212>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a17      	ldr	r2, [pc, #92]	@ (8001ef0 <HAL_GPIO_Init+0x264>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d101      	bne.n	8001e9a <HAL_GPIO_Init+0x20e>
 8001e96:	2309      	movs	r3, #9
 8001e98:	e02d      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001e9a:	230a      	movs	r3, #10
 8001e9c:	e02b      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001e9e:	2308      	movs	r3, #8
 8001ea0:	e029      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	e027      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001ea6:	2306      	movs	r3, #6
 8001ea8:	e025      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001eaa:	2305      	movs	r3, #5
 8001eac:	e023      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001eae:	2304      	movs	r3, #4
 8001eb0:	e021      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e01f      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e01d      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e01b      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001ebe:	bf00      	nop
 8001ec0:	58000080 	.word	0x58000080
 8001ec4:	58024400 	.word	0x58024400
 8001ec8:	58000400 	.word	0x58000400
 8001ecc:	58020000 	.word	0x58020000
 8001ed0:	58020400 	.word	0x58020400
 8001ed4:	58020800 	.word	0x58020800
 8001ed8:	58020c00 	.word	0x58020c00
 8001edc:	58021000 	.word	0x58021000
 8001ee0:	58021400 	.word	0x58021400
 8001ee4:	58021800 	.word	0x58021800
 8001ee8:	58021c00 	.word	0x58021c00
 8001eec:	58022000 	.word	0x58022000
 8001ef0:	58022400 	.word	0x58022400
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	f002 0203 	and.w	r2, r2, #3
 8001efc:	0092      	lsls	r2, r2, #2
 8001efe:	4093      	lsls	r3, r2
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f06:	4938      	ldr	r1, [pc, #224]	@ (8001fe8 <HAL_GPIO_Init+0x35c>)
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001f68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f47f ae63 	bne.w	8001ca0 <HAL_GPIO_Init+0x14>
  }
}
 8001fda:	bf00      	nop
 8001fdc:	bf00      	nop
 8001fde:	3724      	adds	r7, #36	@ 0x24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	58000400 	.word	0x58000400

08001fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	807b      	strh	r3, [r7, #2]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ffc:	787b      	ldrb	r3, [r7, #1]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002002:	887a      	ldrh	r2, [r7, #2]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002008:	e003      	b.n	8002012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800200a:	887b      	ldrh	r3, [r7, #2]
 800200c:	041a      	lsls	r2, r3, #16
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	619a      	str	r2, [r3, #24]
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800201e:	b480      	push	{r7}
 8002020:	b085      	sub	sp, #20
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	460b      	mov	r3, r1
 8002028:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002030:	887a      	ldrh	r2, [r7, #2]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4013      	ands	r3, r2
 8002036:	041a      	lsls	r2, r3, #16
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	43d9      	mvns	r1, r3
 800203c:	887b      	ldrh	r3, [r7, #2]
 800203e:	400b      	ands	r3, r1
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	619a      	str	r2, [r3, #24]
}
 8002046:	bf00      	nop
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af02      	add	r7, sp, #8
 8002058:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0fe      	b.n	8002262 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d106      	bne.n	800207e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7fe ffad 	bl	8000fd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2203      	movs	r2, #3
 8002082:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f004 fbcc 	bl	8006828 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	7c1a      	ldrb	r2, [r3, #16]
 8002098:	f88d 2000 	strb.w	r2, [sp]
 800209c:	3304      	adds	r3, #4
 800209e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020a0:	f004 fb50 	bl	8006744 <USB_CoreInit>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d005      	beq.n	80020b6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2202      	movs	r2, #2
 80020ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e0d5      	b.n	8002262 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2100      	movs	r1, #0
 80020bc:	4618      	mov	r0, r3
 80020be:	f004 fbc4 	bl	800684a <USB_SetCurrentMode>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2202      	movs	r2, #2
 80020cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0c6      	b.n	8002262 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	73fb      	strb	r3, [r7, #15]
 80020d8:	e04a      	b.n	8002170 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020da:	7bfa      	ldrb	r2, [r7, #15]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	3315      	adds	r3, #21
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	3314      	adds	r3, #20
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	b298      	uxth	r0, r3
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	332e      	adds	r3, #46	@ 0x2e
 8002116:	4602      	mov	r2, r0
 8002118:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	3318      	adds	r3, #24
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800212e:	7bfa      	ldrb	r2, [r7, #15]
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	331c      	adds	r3, #28
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	3320      	adds	r3, #32
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002156:	7bfa      	ldrb	r2, [r7, #15]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	3324      	adds	r3, #36	@ 0x24
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800216a:	7bfb      	ldrb	r3, [r7, #15]
 800216c:	3301      	adds	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	791b      	ldrb	r3, [r3, #4]
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	429a      	cmp	r2, r3
 8002178:	d3af      	bcc.n	80020da <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800217a:	2300      	movs	r3, #0
 800217c:	73fb      	strb	r3, [r7, #15]
 800217e:	e044      	b.n	800220a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002180:	7bfa      	ldrb	r2, [r7, #15]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002196:	7bfa      	ldrb	r2, [r7, #15]
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80021a8:	7bfa      	ldrb	r2, [r7, #15]
 80021aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021ac:	7bfa      	ldrb	r2, [r7, #15]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021c2:	7bfa      	ldrb	r2, [r7, #15]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4413      	add	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021d8:	7bfa      	ldrb	r2, [r7, #15]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021ee:	7bfa      	ldrb	r2, [r7, #15]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	3301      	adds	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	791b      	ldrb	r3, [r3, #4]
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	429a      	cmp	r2, r3
 8002212:	d3b5      	bcc.n	8002180 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	7c1a      	ldrb	r2, [r3, #16]
 800221c:	f88d 2000 	strb.w	r2, [sp]
 8002220:	3304      	adds	r3, #4
 8002222:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002224:	f004 fb5e 	bl	80068e4 <USB_DevInit>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2202      	movs	r2, #2
 8002232:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e013      	b.n	8002262 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	7b1b      	ldrb	r3, [r3, #12]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d102      	bne.n	8002256 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f80b 	bl	800226c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f004 fd19 	bl	8006c92 <USB_DevDisconnect>

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800229a:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <HAL_PCDEx_ActivateLPM+0x44>)
 800229c:	4313      	orrs	r3, r2
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	10000003 	.word	0x10000003

080022b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80022bc:	4b19      	ldr	r3, [pc, #100]	@ (8002324 <HAL_PWREx_ConfigSupply+0x70>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d00a      	beq.n	80022de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022c8:	4b16      	ldr	r3, [pc, #88]	@ (8002324 <HAL_PWREx_ConfigSupply+0x70>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d001      	beq.n	80022da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e01f      	b.n	800231a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	e01d      	b.n	800231a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022de:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <HAL_PWREx_ConfigSupply+0x70>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f023 0207 	bic.w	r2, r3, #7
 80022e6:	490f      	ldr	r1, [pc, #60]	@ (8002324 <HAL_PWREx_ConfigSupply+0x70>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80022ee:	f7fe ff69 	bl	80011c4 <HAL_GetTick>
 80022f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022f4:	e009      	b.n	800230a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022f6:	f7fe ff65 	bl	80011c4 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002304:	d901      	bls.n	800230a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e007      	b.n	800231a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800230a:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <HAL_PWREx_ConfigSupply+0x70>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002312:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002316:	d1ee      	bne.n	80022f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	58024800 	.word	0x58024800

08002328 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800232c:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	4a04      	ldr	r2, [pc, #16]	@ (8002344 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002332:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002336:	60d3      	str	r3, [r2, #12]
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	58024800 	.word	0x58024800

08002348 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08c      	sub	sp, #48	@ 0x30
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d102      	bne.n	800235c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	f000 bc48 	b.w	8002bec <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 8088 	beq.w	800247a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800236a:	4b99      	ldr	r3, [pc, #612]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002372:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002374:	4b96      	ldr	r3, [pc, #600]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 8002376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002378:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800237a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800237c:	2b10      	cmp	r3, #16
 800237e:	d007      	beq.n	8002390 <HAL_RCC_OscConfig+0x48>
 8002380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002382:	2b18      	cmp	r3, #24
 8002384:	d111      	bne.n	80023aa <HAL_RCC_OscConfig+0x62>
 8002386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d10c      	bne.n	80023aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	4b8f      	ldr	r3, [pc, #572]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d06d      	beq.n	8002478 <HAL_RCC_OscConfig+0x130>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d169      	bne.n	8002478 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	f000 bc21 	b.w	8002bec <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023b2:	d106      	bne.n	80023c2 <HAL_RCC_OscConfig+0x7a>
 80023b4:	4b86      	ldr	r3, [pc, #536]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a85      	ldr	r2, [pc, #532]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80023ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	e02e      	b.n	8002420 <HAL_RCC_OscConfig+0xd8>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x9c>
 80023ca:	4b81      	ldr	r3, [pc, #516]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a80      	ldr	r2, [pc, #512]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80023d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	4b7e      	ldr	r3, [pc, #504]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a7d      	ldr	r2, [pc, #500]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80023dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e01d      	b.n	8002420 <HAL_RCC_OscConfig+0xd8>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023ec:	d10c      	bne.n	8002408 <HAL_RCC_OscConfig+0xc0>
 80023ee:	4b78      	ldr	r3, [pc, #480]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a77      	ldr	r2, [pc, #476]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80023f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	4b75      	ldr	r3, [pc, #468]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a74      	ldr	r2, [pc, #464]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 8002400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e00b      	b.n	8002420 <HAL_RCC_OscConfig+0xd8>
 8002408:	4b71      	ldr	r3, [pc, #452]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a70      	ldr	r2, [pc, #448]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 800240e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	4b6e      	ldr	r3, [pc, #440]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a6d      	ldr	r2, [pc, #436]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 800241a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800241e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d013      	beq.n	8002450 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002428:	f7fe fecc 	bl	80011c4 <HAL_GetTick>
 800242c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002430:	f7fe fec8 	bl	80011c4 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b64      	cmp	r3, #100	@ 0x64
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e3d4      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002442:	4b63      	ldr	r3, [pc, #396]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0xe8>
 800244e:	e014      	b.n	800247a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7fe feb8 	bl	80011c4 <HAL_GetTick>
 8002454:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002458:	f7fe feb4 	bl	80011c4 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	@ 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e3c0      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800246a:	4b59      	ldr	r3, [pc, #356]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x110>
 8002476:	e000      	b.n	800247a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80ca 	beq.w	800261c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002488:	4b51      	ldr	r3, [pc, #324]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002490:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002492:	4b4f      	ldr	r3, [pc, #316]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 8002494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002496:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d007      	beq.n	80024ae <HAL_RCC_OscConfig+0x166>
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	2b18      	cmp	r3, #24
 80024a2:	d156      	bne.n	8002552 <HAL_RCC_OscConfig+0x20a>
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d151      	bne.n	8002552 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024ae:	4b48      	ldr	r3, [pc, #288]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_RCC_OscConfig+0x17e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e392      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024c6:	4b42      	ldr	r3, [pc, #264]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 0219 	bic.w	r2, r3, #25
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	493f      	ldr	r1, [pc, #252]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7fe fe74 	bl	80011c4 <HAL_GetTick>
 80024dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e0:	f7fe fe70 	bl	80011c4 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e37c      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024f2:	4b37      	ldr	r3, [pc, #220]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fe:	f7fe fe91 	bl	8001224 <HAL_GetREVID>
 8002502:	4603      	mov	r3, r0
 8002504:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002508:	4293      	cmp	r3, r2
 800250a:	d817      	bhi.n	800253c <HAL_RCC_OscConfig+0x1f4>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	2b40      	cmp	r3, #64	@ 0x40
 8002512:	d108      	bne.n	8002526 <HAL_RCC_OscConfig+0x1de>
 8002514:	4b2e      	ldr	r3, [pc, #184]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800251c:	4a2c      	ldr	r2, [pc, #176]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 800251e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002522:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002524:	e07a      	b.n	800261c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002526:	4b2a      	ldr	r3, [pc, #168]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	031b      	lsls	r3, r3, #12
 8002534:	4926      	ldr	r1, [pc, #152]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 8002536:	4313      	orrs	r3, r2
 8002538:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800253a:	e06f      	b.n	800261c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253c:	4b24      	ldr	r3, [pc, #144]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	061b      	lsls	r3, r3, #24
 800254a:	4921      	ldr	r1, [pc, #132]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 800254c:	4313      	orrs	r3, r2
 800254e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002550:	e064      	b.n	800261c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d047      	beq.n	80025ea <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800255a:	4b1d      	ldr	r3, [pc, #116]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 0219 	bic.w	r2, r3, #25
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	491a      	ldr	r1, [pc, #104]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 8002568:	4313      	orrs	r3, r2
 800256a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256c:	f7fe fe2a 	bl	80011c4 <HAL_GetTick>
 8002570:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002574:	f7fe fe26 	bl	80011c4 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e332      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002586:	4b12      	ldr	r3, [pc, #72]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002592:	f7fe fe47 	bl	8001224 <HAL_GetREVID>
 8002596:	4603      	mov	r3, r0
 8002598:	f241 0203 	movw	r2, #4099	@ 0x1003
 800259c:	4293      	cmp	r3, r2
 800259e:	d819      	bhi.n	80025d4 <HAL_RCC_OscConfig+0x28c>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	2b40      	cmp	r3, #64	@ 0x40
 80025a6:	d108      	bne.n	80025ba <HAL_RCC_OscConfig+0x272>
 80025a8:	4b09      	ldr	r3, [pc, #36]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80025b0:	4a07      	ldr	r2, [pc, #28]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80025b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025b6:	6053      	str	r3, [r2, #4]
 80025b8:	e030      	b.n	800261c <HAL_RCC_OscConfig+0x2d4>
 80025ba:	4b05      	ldr	r3, [pc, #20]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	031b      	lsls	r3, r3, #12
 80025c8:	4901      	ldr	r1, [pc, #4]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	604b      	str	r3, [r1, #4]
 80025ce:	e025      	b.n	800261c <HAL_RCC_OscConfig+0x2d4>
 80025d0:	58024400 	.word	0x58024400
 80025d4:	4b9a      	ldr	r3, [pc, #616]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	061b      	lsls	r3, r3, #24
 80025e2:	4997      	ldr	r1, [pc, #604]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	604b      	str	r3, [r1, #4]
 80025e8:	e018      	b.n	800261c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ea:	4b95      	ldr	r3, [pc, #596]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a94      	ldr	r2, [pc, #592]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80025f0:	f023 0301 	bic.w	r3, r3, #1
 80025f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f6:	f7fe fde5 	bl	80011c4 <HAL_GetTick>
 80025fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025fe:	f7fe fde1 	bl	80011c4 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e2ed      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002610:	4b8b      	ldr	r3, [pc, #556]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f0      	bne.n	80025fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80a9 	beq.w	800277c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800262a:	4b85      	ldr	r3, [pc, #532]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002632:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002634:	4b82      	ldr	r3, [pc, #520]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002638:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	2b08      	cmp	r3, #8
 800263e:	d007      	beq.n	8002650 <HAL_RCC_OscConfig+0x308>
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	2b18      	cmp	r3, #24
 8002644:	d13a      	bne.n	80026bc <HAL_RCC_OscConfig+0x374>
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d135      	bne.n	80026bc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002650:	4b7b      	ldr	r3, [pc, #492]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_OscConfig+0x320>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	2b80      	cmp	r3, #128	@ 0x80
 8002662:	d001      	beq.n	8002668 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e2c1      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002668:	f7fe fddc 	bl	8001224 <HAL_GetREVID>
 800266c:	4603      	mov	r3, r0
 800266e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002672:	4293      	cmp	r3, r2
 8002674:	d817      	bhi.n	80026a6 <HAL_RCC_OscConfig+0x35e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	2b20      	cmp	r3, #32
 800267c:	d108      	bne.n	8002690 <HAL_RCC_OscConfig+0x348>
 800267e:	4b70      	ldr	r3, [pc, #448]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002686:	4a6e      	ldr	r2, [pc, #440]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002688:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800268c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800268e:	e075      	b.n	800277c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002690:	4b6b      	ldr	r3, [pc, #428]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	069b      	lsls	r3, r3, #26
 800269e:	4968      	ldr	r1, [pc, #416]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026a4:	e06a      	b.n	800277c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026a6:	4b66      	ldr	r3, [pc, #408]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	061b      	lsls	r3, r3, #24
 80026b4:	4962      	ldr	r1, [pc, #392]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026ba:	e05f      	b.n	800277c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d042      	beq.n	800274a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80026c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80026ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d0:	f7fe fd78 	bl	80011c4 <HAL_GetTick>
 80026d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026d8:	f7fe fd74 	bl	80011c4 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e280      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026ea:	4b55      	ldr	r3, [pc, #340]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026f6:	f7fe fd95 	bl	8001224 <HAL_GetREVID>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002700:	4293      	cmp	r3, r2
 8002702:	d817      	bhi.n	8002734 <HAL_RCC_OscConfig+0x3ec>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	2b20      	cmp	r3, #32
 800270a:	d108      	bne.n	800271e <HAL_RCC_OscConfig+0x3d6>
 800270c:	4b4c      	ldr	r3, [pc, #304]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002714:	4a4a      	ldr	r2, [pc, #296]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002716:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800271a:	6053      	str	r3, [r2, #4]
 800271c:	e02e      	b.n	800277c <HAL_RCC_OscConfig+0x434>
 800271e:	4b48      	ldr	r3, [pc, #288]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	069b      	lsls	r3, r3, #26
 800272c:	4944      	ldr	r1, [pc, #272]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 800272e:	4313      	orrs	r3, r2
 8002730:	604b      	str	r3, [r1, #4]
 8002732:	e023      	b.n	800277c <HAL_RCC_OscConfig+0x434>
 8002734:	4b42      	ldr	r3, [pc, #264]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	061b      	lsls	r3, r3, #24
 8002742:	493f      	ldr	r1, [pc, #252]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002744:	4313      	orrs	r3, r2
 8002746:	60cb      	str	r3, [r1, #12]
 8002748:	e018      	b.n	800277c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800274a:	4b3d      	ldr	r3, [pc, #244]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a3c      	ldr	r2, [pc, #240]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002750:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002756:	f7fe fd35 	bl	80011c4 <HAL_GetTick>
 800275a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800275e:	f7fe fd31 	bl	80011c4 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e23d      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002770:	4b33      	ldr	r3, [pc, #204]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d036      	beq.n	80027f6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d019      	beq.n	80027c4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002790:	4b2b      	ldr	r3, [pc, #172]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002794:	4a2a      	ldr	r2, [pc, #168]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279c:	f7fe fd12 	bl	80011c4 <HAL_GetTick>
 80027a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a4:	f7fe fd0e 	bl	80011c4 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e21a      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027b6:	4b22      	ldr	r3, [pc, #136]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80027b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0x45c>
 80027c2:	e018      	b.n	80027f6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80027c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80027ca:	f023 0301 	bic.w	r3, r3, #1
 80027ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d0:	f7fe fcf8 	bl	80011c4 <HAL_GetTick>
 80027d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d8:	f7fe fcf4 	bl	80011c4 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e200      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027ea:	4b15      	ldr	r3, [pc, #84]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80027ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d039      	beq.n	8002876 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d01c      	beq.n	8002844 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800280a:	4b0d      	ldr	r3, [pc, #52]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a0c      	ldr	r2, [pc, #48]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002810:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002814:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002816:	f7fe fcd5 	bl	80011c4 <HAL_GetTick>
 800281a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800281e:	f7fe fcd1 	bl	80011c4 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e1dd      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002830:	4b03      	ldr	r3, [pc, #12]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x4d6>
 800283c:	e01b      	b.n	8002876 <HAL_RCC_OscConfig+0x52e>
 800283e:	bf00      	nop
 8002840:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002844:	4b9b      	ldr	r3, [pc, #620]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a9a      	ldr	r2, [pc, #616]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 800284a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800284e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002850:	f7fe fcb8 	bl	80011c4 <HAL_GetTick>
 8002854:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002858:	f7fe fcb4 	bl	80011c4 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e1c0      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800286a:	4b92      	ldr	r3, [pc, #584]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 8081 	beq.w	8002986 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002884:	4b8c      	ldr	r3, [pc, #560]	@ (8002ab8 <HAL_RCC_OscConfig+0x770>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a8b      	ldr	r2, [pc, #556]	@ (8002ab8 <HAL_RCC_OscConfig+0x770>)
 800288a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800288e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002890:	f7fe fc98 	bl	80011c4 <HAL_GetTick>
 8002894:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002898:	f7fe fc94 	bl	80011c4 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b64      	cmp	r3, #100	@ 0x64
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e1a0      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028aa:	4b83      	ldr	r3, [pc, #524]	@ (8002ab8 <HAL_RCC_OscConfig+0x770>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d106      	bne.n	80028cc <HAL_RCC_OscConfig+0x584>
 80028be:	4b7d      	ldr	r3, [pc, #500]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80028c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c2:	4a7c      	ldr	r2, [pc, #496]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ca:	e02d      	b.n	8002928 <HAL_RCC_OscConfig+0x5e0>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10c      	bne.n	80028ee <HAL_RCC_OscConfig+0x5a6>
 80028d4:	4b77      	ldr	r3, [pc, #476]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80028d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d8:	4a76      	ldr	r2, [pc, #472]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80028da:	f023 0301 	bic.w	r3, r3, #1
 80028de:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e0:	4b74      	ldr	r3, [pc, #464]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80028e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e4:	4a73      	ldr	r2, [pc, #460]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80028e6:	f023 0304 	bic.w	r3, r3, #4
 80028ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ec:	e01c      	b.n	8002928 <HAL_RCC_OscConfig+0x5e0>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b05      	cmp	r3, #5
 80028f4:	d10c      	bne.n	8002910 <HAL_RCC_OscConfig+0x5c8>
 80028f6:	4b6f      	ldr	r3, [pc, #444]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028fa:	4a6e      	ldr	r2, [pc, #440]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80028fc:	f043 0304 	orr.w	r3, r3, #4
 8002900:	6713      	str	r3, [r2, #112]	@ 0x70
 8002902:	4b6c      	ldr	r3, [pc, #432]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002906:	4a6b      	ldr	r2, [pc, #428]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6713      	str	r3, [r2, #112]	@ 0x70
 800290e:	e00b      	b.n	8002928 <HAL_RCC_OscConfig+0x5e0>
 8002910:	4b68      	ldr	r3, [pc, #416]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002914:	4a67      	ldr	r2, [pc, #412]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002916:	f023 0301 	bic.w	r3, r3, #1
 800291a:	6713      	str	r3, [r2, #112]	@ 0x70
 800291c:	4b65      	ldr	r3, [pc, #404]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002920:	4a64      	ldr	r2, [pc, #400]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002922:	f023 0304 	bic.w	r3, r3, #4
 8002926:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d015      	beq.n	800295c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002930:	f7fe fc48 	bl	80011c4 <HAL_GetTick>
 8002934:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002936:	e00a      	b.n	800294e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002938:	f7fe fc44 	bl	80011c4 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e14e      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800294e:	4b59      	ldr	r3, [pc, #356]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0ee      	beq.n	8002938 <HAL_RCC_OscConfig+0x5f0>
 800295a:	e014      	b.n	8002986 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295c:	f7fe fc32 	bl	80011c4 <HAL_GetTick>
 8002960:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002962:	e00a      	b.n	800297a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002964:	f7fe fc2e 	bl	80011c4 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002972:	4293      	cmp	r3, r2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e138      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800297a:	4b4e      	ldr	r3, [pc, #312]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 800297c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1ee      	bne.n	8002964 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 812d 	beq.w	8002bea <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002990:	4b48      	ldr	r3, [pc, #288]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002998:	2b18      	cmp	r3, #24
 800299a:	f000 80bd 	beq.w	8002b18 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	f040 809e 	bne.w	8002ae4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a8:	4b42      	ldr	r3, [pc, #264]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a41      	ldr	r2, [pc, #260]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80029ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe fc06 	bl	80011c4 <HAL_GetTick>
 80029b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029bc:	f7fe fc02 	bl	80011c4 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e10e      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ce:	4b39      	ldr	r3, [pc, #228]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029da:	4b36      	ldr	r3, [pc, #216]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80029dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029de:	4b37      	ldr	r3, [pc, #220]	@ (8002abc <HAL_RCC_OscConfig+0x774>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029ea:	0112      	lsls	r2, r2, #4
 80029ec:	430a      	orrs	r2, r1
 80029ee:	4931      	ldr	r1, [pc, #196]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	628b      	str	r3, [r1, #40]	@ 0x28
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f8:	3b01      	subs	r3, #1
 80029fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a02:	3b01      	subs	r3, #1
 8002a04:	025b      	lsls	r3, r3, #9
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	041b      	lsls	r3, r3, #16
 8002a12:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	061b      	lsls	r3, r3, #24
 8002a20:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002a24:	4923      	ldr	r1, [pc, #140]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a2a:	4b22      	ldr	r3, [pc, #136]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2e:	4a21      	ldr	r2, [pc, #132]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a30:	f023 0301 	bic.w	r3, r3, #1
 8002a34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a36:	4b1f      	ldr	r3, [pc, #124]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a3a:	4b21      	ldr	r3, [pc, #132]	@ (8002ac0 <HAL_RCC_OscConfig+0x778>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a42:	00d2      	lsls	r2, r2, #3
 8002a44:	491b      	ldr	r1, [pc, #108]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4e:	f023 020c 	bic.w	r2, r3, #12
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a56:	4917      	ldr	r1, [pc, #92]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a5c:	4b15      	ldr	r3, [pc, #84]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a60:	f023 0202 	bic.w	r2, r3, #2
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a68:	4912      	ldr	r1, [pc, #72]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a6e:	4b11      	ldr	r3, [pc, #68]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a72:	4a10      	ldr	r2, [pc, #64]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7e:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a86:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a92:	4b08      	ldr	r3, [pc, #32]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a96:	4a07      	ldr	r2, [pc, #28]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a9e:	4b05      	ldr	r3, [pc, #20]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a04      	ldr	r2, [pc, #16]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002aa4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aaa:	f7fe fb8b 	bl	80011c4 <HAL_GetTick>
 8002aae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ab0:	e011      	b.n	8002ad6 <HAL_RCC_OscConfig+0x78e>
 8002ab2:	bf00      	nop
 8002ab4:	58024400 	.word	0x58024400
 8002ab8:	58024800 	.word	0x58024800
 8002abc:	fffffc0c 	.word	0xfffffc0c
 8002ac0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac4:	f7fe fb7e 	bl	80011c4 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e08a      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ad6:	4b47      	ldr	r3, [pc, #284]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x77c>
 8002ae2:	e082      	b.n	8002bea <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae4:	4b43      	ldr	r3, [pc, #268]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a42      	ldr	r2, [pc, #264]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002aea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7fe fb68 	bl	80011c4 <HAL_GetTick>
 8002af4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af8:	f7fe fb64 	bl	80011c4 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e070      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b0a:	4b3a      	ldr	r3, [pc, #232]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x7b0>
 8002b16:	e068      	b.n	8002bea <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b18:	4b36      	ldr	r3, [pc, #216]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b1c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b1e:	4b35      	ldr	r3, [pc, #212]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d031      	beq.n	8002b90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f003 0203 	and.w	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d12a      	bne.n	8002b90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	091b      	lsrs	r3, r3, #4
 8002b3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d122      	bne.n	8002b90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b54:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d11a      	bne.n	8002b90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	0a5b      	lsrs	r3, r3, #9
 8002b5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b66:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d111      	bne.n	8002b90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	0c1b      	lsrs	r3, r3, #16
 8002b70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b78:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d108      	bne.n	8002b90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	0e1b      	lsrs	r3, r3, #24
 8002b82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b8a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e02b      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b94:	4b17      	ldr	r3, [pc, #92]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b98:	08db      	lsrs	r3, r3, #3
 8002b9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b9e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d01f      	beq.n	8002bea <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002baa:	4b12      	ldr	r3, [pc, #72]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bae:	4a11      	ldr	r2, [pc, #68]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002bb0:	f023 0301 	bic.w	r3, r3, #1
 8002bb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bb6:	f7fe fb05 	bl	80011c4 <HAL_GetTick>
 8002bba:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002bbc:	bf00      	nop
 8002bbe:	f7fe fb01 	bl	80011c4 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d0f9      	beq.n	8002bbe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bca:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002bcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bce:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf8 <HAL_RCC_OscConfig+0x8b0>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bd6:	00d2      	lsls	r2, r2, #3
 8002bd8:	4906      	ldr	r1, [pc, #24]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002bde:	4b05      	ldr	r3, [pc, #20]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be2:	4a04      	ldr	r2, [pc, #16]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3730      	adds	r7, #48	@ 0x30
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	58024400 	.word	0x58024400
 8002bf8:	ffff0007 	.word	0xffff0007

08002bfc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e19c      	b.n	8002f4a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c10:	4b8a      	ldr	r3, [pc, #552]	@ (8002e3c <HAL_RCC_ClockConfig+0x240>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 030f 	and.w	r3, r3, #15
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d910      	bls.n	8002c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1e:	4b87      	ldr	r3, [pc, #540]	@ (8002e3c <HAL_RCC_ClockConfig+0x240>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f023 020f 	bic.w	r2, r3, #15
 8002c26:	4985      	ldr	r1, [pc, #532]	@ (8002e3c <HAL_RCC_ClockConfig+0x240>)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b83      	ldr	r3, [pc, #524]	@ (8002e3c <HAL_RCC_ClockConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e184      	b.n	8002f4a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d010      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	4b7b      	ldr	r3, [pc, #492]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d908      	bls.n	8002c6e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c5c:	4b78      	ldr	r3, [pc, #480]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	4975      	ldr	r1, [pc, #468]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d010      	beq.n	8002c9c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	4b70      	ldr	r3, [pc, #448]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d908      	bls.n	8002c9c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c8a:	4b6d      	ldr	r3, [pc, #436]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	496a      	ldr	r1, [pc, #424]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d010      	beq.n	8002cca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	699a      	ldr	r2, [r3, #24]
 8002cac:	4b64      	ldr	r3, [pc, #400]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d908      	bls.n	8002cca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cb8:	4b61      	ldr	r3, [pc, #388]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	495e      	ldr	r1, [pc, #376]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d010      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69da      	ldr	r2, [r3, #28]
 8002cda:	4b59      	ldr	r3, [pc, #356]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d908      	bls.n	8002cf8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ce6:	4b56      	ldr	r3, [pc, #344]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	4953      	ldr	r1, [pc, #332]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d010      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	4b4d      	ldr	r3, [pc, #308]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	f003 030f 	and.w	r3, r3, #15
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d908      	bls.n	8002d26 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d14:	4b4a      	ldr	r3, [pc, #296]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	f023 020f 	bic.w	r2, r3, #15
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4947      	ldr	r1, [pc, #284]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d055      	beq.n	8002dde <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d32:	4b43      	ldr	r3, [pc, #268]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	4940      	ldr	r1, [pc, #256]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d107      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d4c:	4b3c      	ldr	r3, [pc, #240]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d121      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0f6      	b.n	8002f4a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d107      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d64:	4b36      	ldr	r3, [pc, #216]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d115      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0ea      	b.n	8002f4a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d107      	bne.n	8002d8c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d7c:	4b30      	ldr	r3, [pc, #192]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d109      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0de      	b.n	8002f4a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d8c:	4b2c      	ldr	r3, [pc, #176]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0d6      	b.n	8002f4a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d9c:	4b28      	ldr	r3, [pc, #160]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	f023 0207 	bic.w	r2, r3, #7
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	4925      	ldr	r1, [pc, #148]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dae:	f7fe fa09 	bl	80011c4 <HAL_GetTick>
 8002db2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db4:	e00a      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db6:	f7fe fa05 	bl	80011c4 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e0be      	b.n	8002f4a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dcc:	4b1c      	ldr	r3, [pc, #112]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d1eb      	bne.n	8002db6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d010      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	4b14      	ldr	r3, [pc, #80]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d208      	bcs.n	8002e0c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dfa:	4b11      	ldr	r3, [pc, #68]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f023 020f 	bic.w	r2, r3, #15
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	490e      	ldr	r1, [pc, #56]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e3c <HAL_RCC_ClockConfig+0x240>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 030f 	and.w	r3, r3, #15
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d214      	bcs.n	8002e44 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1a:	4b08      	ldr	r3, [pc, #32]	@ (8002e3c <HAL_RCC_ClockConfig+0x240>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 020f 	bic.w	r2, r3, #15
 8002e22:	4906      	ldr	r1, [pc, #24]	@ (8002e3c <HAL_RCC_ClockConfig+0x240>)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2a:	4b04      	ldr	r3, [pc, #16]	@ (8002e3c <HAL_RCC_ClockConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d005      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e086      	b.n	8002f4a <HAL_RCC_ClockConfig+0x34e>
 8002e3c:	52002000 	.word	0x52002000
 8002e40:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d010      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	4b3f      	ldr	r3, [pc, #252]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d208      	bcs.n	8002e72 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e60:	4b3c      	ldr	r3, [pc, #240]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	4939      	ldr	r1, [pc, #228]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d010      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	695a      	ldr	r2, [r3, #20]
 8002e82:	4b34      	ldr	r3, [pc, #208]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d208      	bcs.n	8002ea0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e8e:	4b31      	ldr	r3, [pc, #196]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	492e      	ldr	r1, [pc, #184]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d010      	beq.n	8002ece <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	699a      	ldr	r2, [r3, #24]
 8002eb0:	4b28      	ldr	r3, [pc, #160]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d208      	bcs.n	8002ece <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ebc:	4b25      	ldr	r3, [pc, #148]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	4922      	ldr	r1, [pc, #136]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d010      	beq.n	8002efc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69da      	ldr	r2, [r3, #28]
 8002ede:	4b1d      	ldr	r3, [pc, #116]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d208      	bcs.n	8002efc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002eea:	4b1a      	ldr	r3, [pc, #104]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	4917      	ldr	r1, [pc, #92]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002efc:	f000 f834 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8002f00:	4602      	mov	r2, r0
 8002f02:	4b14      	ldr	r3, [pc, #80]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	0a1b      	lsrs	r3, r3, #8
 8002f08:	f003 030f 	and.w	r3, r3, #15
 8002f0c:	4912      	ldr	r1, [pc, #72]	@ (8002f58 <HAL_RCC_ClockConfig+0x35c>)
 8002f0e:	5ccb      	ldrb	r3, [r1, r3]
 8002f10:	f003 031f 	and.w	r3, r3, #31
 8002f14:	fa22 f303 	lsr.w	r3, r2, r3
 8002f18:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	4a0d      	ldr	r2, [pc, #52]	@ (8002f58 <HAL_RCC_ClockConfig+0x35c>)
 8002f24:	5cd3      	ldrb	r3, [r2, r3]
 8002f26:	f003 031f 	and.w	r3, r3, #31
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f30:	4a0a      	ldr	r2, [pc, #40]	@ (8002f5c <HAL_RCC_ClockConfig+0x360>)
 8002f32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f34:	4a0a      	ldr	r2, [pc, #40]	@ (8002f60 <HAL_RCC_ClockConfig+0x364>)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f64 <HAL_RCC_ClockConfig+0x368>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fd fe48 	bl	8000bd4 <HAL_InitTick>
 8002f44:	4603      	mov	r3, r0
 8002f46:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	58024400 	.word	0x58024400
 8002f58:	08009b90 	.word	0x08009b90
 8002f5c:	24000004 	.word	0x24000004
 8002f60:	24000000 	.word	0x24000000
 8002f64:	24000008 	.word	0x24000008

08002f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b089      	sub	sp, #36	@ 0x24
 8002f6c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f6e:	4bb3      	ldr	r3, [pc, #716]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f76:	2b18      	cmp	r3, #24
 8002f78:	f200 8155 	bhi.w	8003226 <HAL_RCC_GetSysClockFreq+0x2be>
 8002f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f84 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f82:	bf00      	nop
 8002f84:	08002fe9 	.word	0x08002fe9
 8002f88:	08003227 	.word	0x08003227
 8002f8c:	08003227 	.word	0x08003227
 8002f90:	08003227 	.word	0x08003227
 8002f94:	08003227 	.word	0x08003227
 8002f98:	08003227 	.word	0x08003227
 8002f9c:	08003227 	.word	0x08003227
 8002fa0:	08003227 	.word	0x08003227
 8002fa4:	0800300f 	.word	0x0800300f
 8002fa8:	08003227 	.word	0x08003227
 8002fac:	08003227 	.word	0x08003227
 8002fb0:	08003227 	.word	0x08003227
 8002fb4:	08003227 	.word	0x08003227
 8002fb8:	08003227 	.word	0x08003227
 8002fbc:	08003227 	.word	0x08003227
 8002fc0:	08003227 	.word	0x08003227
 8002fc4:	08003015 	.word	0x08003015
 8002fc8:	08003227 	.word	0x08003227
 8002fcc:	08003227 	.word	0x08003227
 8002fd0:	08003227 	.word	0x08003227
 8002fd4:	08003227 	.word	0x08003227
 8002fd8:	08003227 	.word	0x08003227
 8002fdc:	08003227 	.word	0x08003227
 8002fe0:	08003227 	.word	0x08003227
 8002fe4:	0800301b 	.word	0x0800301b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fe8:	4b94      	ldr	r3, [pc, #592]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d009      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ff4:	4b91      	ldr	r3, [pc, #580]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	08db      	lsrs	r3, r3, #3
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	4a90      	ldr	r2, [pc, #576]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
 8003004:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003006:	e111      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003008:	4b8d      	ldr	r3, [pc, #564]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800300a:	61bb      	str	r3, [r7, #24]
      break;
 800300c:	e10e      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800300e:	4b8d      	ldr	r3, [pc, #564]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003010:	61bb      	str	r3, [r7, #24]
      break;
 8003012:	e10b      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003014:	4b8c      	ldr	r3, [pc, #560]	@ (8003248 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003016:	61bb      	str	r3, [r7, #24]
      break;
 8003018:	e108      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800301a:	4b88      	ldr	r3, [pc, #544]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800301c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003024:	4b85      	ldr	r3, [pc, #532]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800302e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003030:	4b82      	ldr	r3, [pc, #520]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800303a:	4b80      	ldr	r3, [pc, #512]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800303c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800303e:	08db      	lsrs	r3, r3, #3
 8003040:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	fb02 f303 	mul.w	r3, r2, r3
 800304a:	ee07 3a90 	vmov	s15, r3
 800304e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003052:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80e1 	beq.w	8003220 <HAL_RCC_GetSysClockFreq+0x2b8>
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2b02      	cmp	r3, #2
 8003062:	f000 8083 	beq.w	800316c <HAL_RCC_GetSysClockFreq+0x204>
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2b02      	cmp	r3, #2
 800306a:	f200 80a1 	bhi.w	80031b0 <HAL_RCC_GetSysClockFreq+0x248>
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_RCC_GetSysClockFreq+0x114>
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d056      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0x1c0>
 800307a:	e099      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800307c:	4b6f      	ldr	r3, [pc, #444]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0320 	and.w	r3, r3, #32
 8003084:	2b00      	cmp	r3, #0
 8003086:	d02d      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003088:	4b6c      	ldr	r3, [pc, #432]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	08db      	lsrs	r3, r3, #3
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	4a6b      	ldr	r2, [pc, #428]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003094:	fa22 f303 	lsr.w	r3, r2, r3
 8003098:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	ee07 3a90 	vmov	s15, r3
 80030a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	ee07 3a90 	vmov	s15, r3
 80030aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030b2:	4b62      	ldr	r3, [pc, #392]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ba:	ee07 3a90 	vmov	s15, r3
 80030be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80030c6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800324c <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80030e2:	e087      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	ee07 3a90 	vmov	s15, r3
 80030ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003250 <HAL_RCC_GetSysClockFreq+0x2e8>
 80030f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030f6:	4b51      	ldr	r3, [pc, #324]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030fe:	ee07 3a90 	vmov	s15, r3
 8003102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003106:	ed97 6a02 	vldr	s12, [r7, #8]
 800310a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800324c <HAL_RCC_GetSysClockFreq+0x2e4>
 800310e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003116:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800311a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800311e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003122:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003126:	e065      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003132:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003254 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800313a:	4b40      	ldr	r3, [pc, #256]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003142:	ee07 3a90 	vmov	s15, r3
 8003146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800314a:	ed97 6a02 	vldr	s12, [r7, #8]
 800314e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800324c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800315a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800315e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003166:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800316a:	e043      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	ee07 3a90 	vmov	s15, r3
 8003172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003176:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003258 <HAL_RCC_GetSysClockFreq+0x2f0>
 800317a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800317e:	4b2f      	ldr	r3, [pc, #188]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003186:	ee07 3a90 	vmov	s15, r3
 800318a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800318e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003192:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800324c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800319a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800319e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031ae:	e021      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	ee07 3a90 	vmov	s15, r3
 80031b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003254 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031c2:	4b1e      	ldr	r3, [pc, #120]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ca:	ee07 3a90 	vmov	s15, r3
 80031ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031d6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800324c <HAL_RCC_GetSysClockFreq+0x2e4>
 80031da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80031f4:	4b11      	ldr	r3, [pc, #68]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f8:	0a5b      	lsrs	r3, r3, #9
 80031fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031fe:	3301      	adds	r3, #1
 8003200:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	ee07 3a90 	vmov	s15, r3
 8003208:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800320c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003218:	ee17 3a90 	vmov	r3, s15
 800321c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800321e:	e005      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	61bb      	str	r3, [r7, #24]
      break;
 8003224:	e002      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003226:	4b07      	ldr	r3, [pc, #28]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003228:	61bb      	str	r3, [r7, #24]
      break;
 800322a:	bf00      	nop
  }

  return sysclockfreq;
 800322c:	69bb      	ldr	r3, [r7, #24]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3724      	adds	r7, #36	@ 0x24
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	58024400 	.word	0x58024400
 8003240:	03d09000 	.word	0x03d09000
 8003244:	003d0900 	.word	0x003d0900
 8003248:	007a1200 	.word	0x007a1200
 800324c:	46000000 	.word	0x46000000
 8003250:	4c742400 	.word	0x4c742400
 8003254:	4a742400 	.word	0x4a742400
 8003258:	4af42400 	.word	0x4af42400

0800325c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003262:	f7ff fe81 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8003266:	4602      	mov	r2, r0
 8003268:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <HAL_RCC_GetHCLKFreq+0x50>)
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	0a1b      	lsrs	r3, r3, #8
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	490f      	ldr	r1, [pc, #60]	@ (80032b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003274:	5ccb      	ldrb	r3, [r1, r3]
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	fa22 f303 	lsr.w	r3, r2, r3
 800327e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003280:	4b0a      	ldr	r3, [pc, #40]	@ (80032ac <HAL_RCC_GetHCLKFreq+0x50>)
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	4a09      	ldr	r2, [pc, #36]	@ (80032b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800328a:	5cd3      	ldrb	r3, [r2, r3]
 800328c:	f003 031f 	and.w	r3, r3, #31
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	fa22 f303 	lsr.w	r3, r2, r3
 8003296:	4a07      	ldr	r2, [pc, #28]	@ (80032b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003298:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800329a:	4a07      	ldr	r2, [pc, #28]	@ (80032b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80032a0:	4b04      	ldr	r3, [pc, #16]	@ (80032b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80032a2:	681b      	ldr	r3, [r3, #0]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	58024400 	.word	0x58024400
 80032b0:	08009b90 	.word	0x08009b90
 80032b4:	24000004 	.word	0x24000004
 80032b8:	24000000 	.word	0x24000000

080032bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80032c0:	f7ff ffcc 	bl	800325c <HAL_RCC_GetHCLKFreq>
 80032c4:	4602      	mov	r2, r0
 80032c6:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	091b      	lsrs	r3, r3, #4
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	4904      	ldr	r1, [pc, #16]	@ (80032e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032d2:	5ccb      	ldrb	r3, [r1, r3]
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80032dc:	4618      	mov	r0, r3
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	58024400 	.word	0x58024400
 80032e4:	08009b90 	.word	0x08009b90

080032e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80032ec:	f7ff ffb6 	bl	800325c <HAL_RCC_GetHCLKFreq>
 80032f0:	4602      	mov	r2, r0
 80032f2:	4b06      	ldr	r3, [pc, #24]	@ (800330c <HAL_RCC_GetPCLK2Freq+0x24>)
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	0a1b      	lsrs	r3, r3, #8
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	4904      	ldr	r1, [pc, #16]	@ (8003310 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032fe:	5ccb      	ldrb	r3, [r1, r3]
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003308:	4618      	mov	r0, r3
 800330a:	bd80      	pop	{r7, pc}
 800330c:	58024400 	.word	0x58024400
 8003310:	08009b90 	.word	0x08009b90

08003314 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	223f      	movs	r2, #63	@ 0x3f
 8003322:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003324:	4b1a      	ldr	r3, [pc, #104]	@ (8003390 <HAL_RCC_GetClockConfig+0x7c>)
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	f003 0207 	and.w	r2, r3, #7
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003330:	4b17      	ldr	r3, [pc, #92]	@ (8003390 <HAL_RCC_GetClockConfig+0x7c>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800333c:	4b14      	ldr	r3, [pc, #80]	@ (8003390 <HAL_RCC_GetClockConfig+0x7c>)
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	f003 020f 	and.w	r2, r3, #15
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003348:	4b11      	ldr	r3, [pc, #68]	@ (8003390 <HAL_RCC_GetClockConfig+0x7c>)
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003354:	4b0e      	ldr	r3, [pc, #56]	@ (8003390 <HAL_RCC_GetClockConfig+0x7c>)
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003360:	4b0b      	ldr	r3, [pc, #44]	@ (8003390 <HAL_RCC_GetClockConfig+0x7c>)
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800336c:	4b08      	ldr	r3, [pc, #32]	@ (8003390 <HAL_RCC_GetClockConfig+0x7c>)
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003378:	4b06      	ldr	r3, [pc, #24]	@ (8003394 <HAL_RCC_GetClockConfig+0x80>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 020f 	and.w	r2, r3, #15
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	601a      	str	r2, [r3, #0]
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	58024400 	.word	0x58024400
 8003394:	52002000 	.word	0x52002000

08003398 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800339c:	b0ca      	sub	sp, #296	@ 0x128
 800339e:	af00      	add	r7, sp, #0
 80033a0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033a4:	2300      	movs	r3, #0
 80033a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033aa:	2300      	movs	r3, #0
 80033ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80033bc:	2500      	movs	r5, #0
 80033be:	ea54 0305 	orrs.w	r3, r4, r5
 80033c2:	d049      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80033c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033ce:	d02f      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80033d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033d4:	d828      	bhi.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033da:	d01a      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80033dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033e0:	d822      	bhi.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80033e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033ea:	d007      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033ec:	e01c      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033ee:	4bb8      	ldr	r3, [pc, #736]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f2:	4ab7      	ldr	r2, [pc, #732]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033fa:	e01a      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003400:	3308      	adds	r3, #8
 8003402:	2102      	movs	r1, #2
 8003404:	4618      	mov	r0, r3
 8003406:	f001 fc8f 	bl	8004d28 <RCCEx_PLL2_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003410:	e00f      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003416:	3328      	adds	r3, #40	@ 0x28
 8003418:	2102      	movs	r1, #2
 800341a:	4618      	mov	r0, r3
 800341c:	f001 fd36 	bl	8004e8c <RCCEx_PLL3_Config>
 8003420:	4603      	mov	r3, r0
 8003422:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003426:	e004      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800342e:	e000      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10a      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800343a:	4ba5      	ldr	r3, [pc, #660]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800343c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800343e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003446:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003448:	4aa1      	ldr	r2, [pc, #644]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800344a:	430b      	orrs	r3, r1
 800344c:	6513      	str	r3, [r2, #80]	@ 0x50
 800344e:	e003      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003450:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003454:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800345c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003460:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003464:	f04f 0900 	mov.w	r9, #0
 8003468:	ea58 0309 	orrs.w	r3, r8, r9
 800346c:	d047      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800346e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003474:	2b04      	cmp	r3, #4
 8003476:	d82a      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003478:	a201      	add	r2, pc, #4	@ (adr r2, 8003480 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800347a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347e:	bf00      	nop
 8003480:	08003495 	.word	0x08003495
 8003484:	080034a3 	.word	0x080034a3
 8003488:	080034b9 	.word	0x080034b9
 800348c:	080034d7 	.word	0x080034d7
 8003490:	080034d7 	.word	0x080034d7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003494:	4b8e      	ldr	r3, [pc, #568]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003498:	4a8d      	ldr	r2, [pc, #564]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800349a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800349e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034a0:	e01a      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a6:	3308      	adds	r3, #8
 80034a8:	2100      	movs	r1, #0
 80034aa:	4618      	mov	r0, r3
 80034ac:	f001 fc3c 	bl	8004d28 <RCCEx_PLL2_Config>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034b6:	e00f      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034bc:	3328      	adds	r3, #40	@ 0x28
 80034be:	2100      	movs	r1, #0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f001 fce3 	bl	8004e8c <RCCEx_PLL3_Config>
 80034c6:	4603      	mov	r3, r0
 80034c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034cc:	e004      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034d4:	e000      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80034d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10a      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034e0:	4b7b      	ldr	r3, [pc, #492]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e4:	f023 0107 	bic.w	r1, r3, #7
 80034e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ee:	4a78      	ldr	r2, [pc, #480]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034f0:	430b      	orrs	r3, r1
 80034f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80034f4:	e003      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80034fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003506:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800350a:	f04f 0b00 	mov.w	fp, #0
 800350e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003512:	d04c      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800351e:	d030      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003520:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003524:	d829      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003526:	2bc0      	cmp	r3, #192	@ 0xc0
 8003528:	d02d      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800352a:	2bc0      	cmp	r3, #192	@ 0xc0
 800352c:	d825      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800352e:	2b80      	cmp	r3, #128	@ 0x80
 8003530:	d018      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003532:	2b80      	cmp	r3, #128	@ 0x80
 8003534:	d821      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800353a:	2b40      	cmp	r3, #64	@ 0x40
 800353c:	d007      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800353e:	e01c      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003540:	4b63      	ldr	r3, [pc, #396]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003544:	4a62      	ldr	r2, [pc, #392]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003546:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800354a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800354c:	e01c      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800354e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003552:	3308      	adds	r3, #8
 8003554:	2100      	movs	r1, #0
 8003556:	4618      	mov	r0, r3
 8003558:	f001 fbe6 	bl	8004d28 <RCCEx_PLL2_Config>
 800355c:	4603      	mov	r3, r0
 800355e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003562:	e011      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003568:	3328      	adds	r3, #40	@ 0x28
 800356a:	2100      	movs	r1, #0
 800356c:	4618      	mov	r0, r3
 800356e:	f001 fc8d 	bl	8004e8c <RCCEx_PLL3_Config>
 8003572:	4603      	mov	r3, r0
 8003574:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003578:	e006      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003580:	e002      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003582:	bf00      	nop
 8003584:	e000      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003588:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10a      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003590:	4b4f      	ldr	r3, [pc, #316]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003594:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800359c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800359e:	4a4c      	ldr	r2, [pc, #304]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035a0:	430b      	orrs	r3, r1
 80035a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80035a4:	e003      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80035ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80035ba:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80035be:	2300      	movs	r3, #0
 80035c0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80035c4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80035c8:	460b      	mov	r3, r1
 80035ca:	4313      	orrs	r3, r2
 80035cc:	d053      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80035ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80035d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035da:	d035      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80035dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035e0:	d82e      	bhi.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035e2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80035e6:	d031      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80035e8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80035ec:	d828      	bhi.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035f2:	d01a      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80035f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035f8:	d822      	bhi.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80035fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003602:	d007      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003604:	e01c      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003606:	4b32      	ldr	r3, [pc, #200]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360a:	4a31      	ldr	r2, [pc, #196]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800360c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003610:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003612:	e01c      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003618:	3308      	adds	r3, #8
 800361a:	2100      	movs	r1, #0
 800361c:	4618      	mov	r0, r3
 800361e:	f001 fb83 	bl	8004d28 <RCCEx_PLL2_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003628:	e011      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800362a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362e:	3328      	adds	r3, #40	@ 0x28
 8003630:	2100      	movs	r1, #0
 8003632:	4618      	mov	r0, r3
 8003634:	f001 fc2a 	bl	8004e8c <RCCEx_PLL3_Config>
 8003638:	4603      	mov	r3, r0
 800363a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800363e:	e006      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003646:	e002      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003648:	bf00      	nop
 800364a:	e000      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800364c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800364e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10b      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003656:	4b1e      	ldr	r3, [pc, #120]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800365a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800365e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003662:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003666:	4a1a      	ldr	r2, [pc, #104]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003668:	430b      	orrs	r3, r1
 800366a:	6593      	str	r3, [r2, #88]	@ 0x58
 800366c:	e003      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003672:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003682:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003686:	2300      	movs	r3, #0
 8003688:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800368c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003690:	460b      	mov	r3, r1
 8003692:	4313      	orrs	r3, r2
 8003694:	d056      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800369e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036a2:	d038      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80036a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036a8:	d831      	bhi.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036ae:	d034      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80036b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036b4:	d82b      	bhi.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036ba:	d01d      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80036bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036c0:	d825      	bhi.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d006      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80036c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036ca:	d00a      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80036cc:	e01f      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036ce:	bf00      	nop
 80036d0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d4:	4ba2      	ldr	r3, [pc, #648]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d8:	4aa1      	ldr	r2, [pc, #644]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036e0:	e01c      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e6:	3308      	adds	r3, #8
 80036e8:	2100      	movs	r1, #0
 80036ea:	4618      	mov	r0, r3
 80036ec:	f001 fb1c 	bl	8004d28 <RCCEx_PLL2_Config>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80036f6:	e011      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fc:	3328      	adds	r3, #40	@ 0x28
 80036fe:	2100      	movs	r1, #0
 8003700:	4618      	mov	r0, r3
 8003702:	f001 fbc3 	bl	8004e8c <RCCEx_PLL3_Config>
 8003706:	4603      	mov	r3, r0
 8003708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800370c:	e006      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003714:	e002      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003716:	bf00      	nop
 8003718:	e000      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800371a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800371c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10b      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003724:	4b8e      	ldr	r3, [pc, #568]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003728:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800372c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003730:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003734:	4a8a      	ldr	r2, [pc, #552]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003736:	430b      	orrs	r3, r1
 8003738:	6593      	str	r3, [r2, #88]	@ 0x58
 800373a:	e003      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003740:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003750:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003754:	2300      	movs	r3, #0
 8003756:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800375a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800375e:	460b      	mov	r3, r1
 8003760:	4313      	orrs	r3, r2
 8003762:	d03a      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800376a:	2b30      	cmp	r3, #48	@ 0x30
 800376c:	d01f      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x416>
 800376e:	2b30      	cmp	r3, #48	@ 0x30
 8003770:	d819      	bhi.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003772:	2b20      	cmp	r3, #32
 8003774:	d00c      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003776:	2b20      	cmp	r3, #32
 8003778:	d815      	bhi.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800377a:	2b00      	cmp	r3, #0
 800377c:	d019      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800377e:	2b10      	cmp	r3, #16
 8003780:	d111      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003782:	4b77      	ldr	r3, [pc, #476]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003786:	4a76      	ldr	r2, [pc, #472]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800378c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800378e:	e011      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003794:	3308      	adds	r3, #8
 8003796:	2102      	movs	r1, #2
 8003798:	4618      	mov	r0, r3
 800379a:	f001 fac5 	bl	8004d28 <RCCEx_PLL2_Config>
 800379e:	4603      	mov	r3, r0
 80037a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80037a4:	e006      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037ac:	e002      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80037ae:	bf00      	nop
 80037b0:	e000      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80037b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10a      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80037bc:	4b68      	ldr	r3, [pc, #416]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037c0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80037c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ca:	4a65      	ldr	r2, [pc, #404]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037cc:	430b      	orrs	r3, r1
 80037ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037d0:	e003      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80037da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80037e6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80037ea:	2300      	movs	r3, #0
 80037ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80037f0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4313      	orrs	r3, r2
 80037f8:	d051      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80037fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003800:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003804:	d035      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003806:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800380a:	d82e      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800380c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003810:	d031      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003812:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003816:	d828      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003818:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800381c:	d01a      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800381e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003822:	d822      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003828:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800382c:	d007      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800382e:	e01c      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003830:	4b4b      	ldr	r3, [pc, #300]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003834:	4a4a      	ldr	r2, [pc, #296]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003836:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800383a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800383c:	e01c      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800383e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003842:	3308      	adds	r3, #8
 8003844:	2100      	movs	r1, #0
 8003846:	4618      	mov	r0, r3
 8003848:	f001 fa6e 	bl	8004d28 <RCCEx_PLL2_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003852:	e011      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003858:	3328      	adds	r3, #40	@ 0x28
 800385a:	2100      	movs	r1, #0
 800385c:	4618      	mov	r0, r3
 800385e:	f001 fb15 	bl	8004e8c <RCCEx_PLL3_Config>
 8003862:	4603      	mov	r3, r0
 8003864:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003868:	e006      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003870:	e002      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003872:	bf00      	nop
 8003874:	e000      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003876:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003878:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10a      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003880:	4b37      	ldr	r3, [pc, #220]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003884:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800388e:	4a34      	ldr	r2, [pc, #208]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003890:	430b      	orrs	r3, r1
 8003892:	6513      	str	r3, [r2, #80]	@ 0x50
 8003894:	e003      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003896:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800389a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800389e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80038aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038ae:	2300      	movs	r3, #0
 80038b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80038b4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80038b8:	460b      	mov	r3, r1
 80038ba:	4313      	orrs	r3, r2
 80038bc:	d056      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80038be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038c8:	d033      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80038ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038ce:	d82c      	bhi.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038d4:	d02f      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80038d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038da:	d826      	bhi.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038e0:	d02b      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80038e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038e6:	d820      	bhi.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038ec:	d012      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80038ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038f2:	d81a      	bhi.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d022      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80038f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038fc:	d115      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003902:	3308      	adds	r3, #8
 8003904:	2101      	movs	r1, #1
 8003906:	4618      	mov	r0, r3
 8003908:	f001 fa0e 	bl	8004d28 <RCCEx_PLL2_Config>
 800390c:	4603      	mov	r3, r0
 800390e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003912:	e015      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003918:	3328      	adds	r3, #40	@ 0x28
 800391a:	2101      	movs	r1, #1
 800391c:	4618      	mov	r0, r3
 800391e:	f001 fab5 	bl	8004e8c <RCCEx_PLL3_Config>
 8003922:	4603      	mov	r3, r0
 8003924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003928:	e00a      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003930:	e006      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003932:	bf00      	nop
 8003934:	e004      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003936:	bf00      	nop
 8003938:	e002      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800393a:	bf00      	nop
 800393c:	e000      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800393e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003940:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10d      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003948:	4b05      	ldr	r3, [pc, #20]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800394a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800394c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003954:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003956:	4a02      	ldr	r2, [pc, #8]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003958:	430b      	orrs	r3, r1
 800395a:	6513      	str	r3, [r2, #80]	@ 0x50
 800395c:	e006      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800395e:	bf00      	nop
 8003960:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003964:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003968:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800396c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003974:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003978:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800397c:	2300      	movs	r3, #0
 800397e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003982:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003986:	460b      	mov	r3, r1
 8003988:	4313      	orrs	r3, r2
 800398a:	d055      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800398c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003990:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003994:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003998:	d033      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800399a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800399e:	d82c      	bhi.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039a4:	d02f      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80039a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039aa:	d826      	bhi.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039b0:	d02b      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80039b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039b6:	d820      	bhi.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039bc:	d012      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80039be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039c2:	d81a      	bhi.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d022      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80039c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039cc:	d115      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d2:	3308      	adds	r3, #8
 80039d4:	2101      	movs	r1, #1
 80039d6:	4618      	mov	r0, r3
 80039d8:	f001 f9a6 	bl	8004d28 <RCCEx_PLL2_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039e2:	e015      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e8:	3328      	adds	r3, #40	@ 0x28
 80039ea:	2101      	movs	r1, #1
 80039ec:	4618      	mov	r0, r3
 80039ee:	f001 fa4d 	bl	8004e8c <RCCEx_PLL3_Config>
 80039f2:	4603      	mov	r3, r0
 80039f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039f8:	e00a      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a00:	e006      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a02:	bf00      	nop
 8003a04:	e004      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a06:	bf00      	nop
 8003a08:	e002      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a0a:	bf00      	nop
 8003a0c:	e000      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10b      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a18:	4ba3      	ldr	r3, [pc, #652]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a1c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a28:	4a9f      	ldr	r2, [pc, #636]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a2a:	430b      	orrs	r3, r1
 8003a2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a2e:	e003      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a40:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003a44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003a4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a52:	460b      	mov	r3, r1
 8003a54:	4313      	orrs	r3, r2
 8003a56:	d037      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a62:	d00e      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003a64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a68:	d816      	bhi.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d018      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003a6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a72:	d111      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a74:	4b8c      	ldr	r3, [pc, #560]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a78:	4a8b      	ldr	r2, [pc, #556]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a80:	e00f      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a86:	3308      	adds	r3, #8
 8003a88:	2101      	movs	r1, #1
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f001 f94c 	bl	8004d28 <RCCEx_PLL2_Config>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a96:	e004      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a9e:	e000      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10a      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003aaa:	4b7f      	ldr	r3, [pc, #508]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab8:	4a7b      	ldr	r2, [pc, #492]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aba:	430b      	orrs	r3, r1
 8003abc:	6513      	str	r3, [r2, #80]	@ 0x50
 8003abe:	e003      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ac4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003ade:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	d039      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d81c      	bhi.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003af2:	a201      	add	r2, pc, #4	@ (adr r2, 8003af8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af8:	08003b35 	.word	0x08003b35
 8003afc:	08003b09 	.word	0x08003b09
 8003b00:	08003b17 	.word	0x08003b17
 8003b04:	08003b35 	.word	0x08003b35
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b08:	4b67      	ldr	r3, [pc, #412]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0c:	4a66      	ldr	r2, [pc, #408]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b14:	e00f      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	2102      	movs	r1, #2
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f001 f902 	bl	8004d28 <RCCEx_PLL2_Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b2a:	e004      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b32:	e000      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10a      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b3e:	4b5a      	ldr	r3, [pc, #360]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b42:	f023 0103 	bic.w	r1, r3, #3
 8003b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b4c:	4a56      	ldr	r2, [pc, #344]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b4e:	430b      	orrs	r3, r1
 8003b50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b52:	e003      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b64:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003b68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b72:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003b76:	460b      	mov	r3, r1
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f000 809f 	beq.w	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b7e:	4b4b      	ldr	r3, [pc, #300]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a4a      	ldr	r2, [pc, #296]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b8a:	f7fd fb1b 	bl	80011c4 <HAL_GetTick>
 8003b8e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b92:	e00b      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b94:	f7fd fb16 	bl	80011c4 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b64      	cmp	r3, #100	@ 0x64
 8003ba2:	d903      	bls.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003baa:	e005      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bac:	4b3f      	ldr	r3, [pc, #252]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0ed      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d179      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003bc0:	4b39      	ldr	r3, [pc, #228]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bcc:	4053      	eors	r3, r2
 8003bce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d015      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bd6:	4b34      	ldr	r3, [pc, #208]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bde:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003be2:	4b31      	ldr	r3, [pc, #196]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be6:	4a30      	ldr	r2, [pc, #192]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bec:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bee:	4b2e      	ldr	r3, [pc, #184]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf2:	4a2d      	ldr	r2, [pc, #180]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bf8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003bfa:	4a2b      	ldr	r2, [pc, #172]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c00:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c0e:	d118      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fd fad8 	bl	80011c4 <HAL_GetTick>
 8003c14:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c18:	e00d      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1a:	f7fd fad3 	bl	80011c4 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c24:	1ad2      	subs	r2, r2, r3
 8003c26:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d903      	bls.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003c34:	e005      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c36:	4b1c      	ldr	r3, [pc, #112]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0eb      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003c42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d129      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c5a:	d10e      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003c5c:	4b12      	ldr	r3, [pc, #72]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c6c:	091a      	lsrs	r2, r3, #4
 8003c6e:	4b10      	ldr	r3, [pc, #64]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003c70:	4013      	ands	r3, r2
 8003c72:	4a0d      	ldr	r2, [pc, #52]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c74:	430b      	orrs	r3, r1
 8003c76:	6113      	str	r3, [r2, #16]
 8003c78:	e005      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c80:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c84:	6113      	str	r3, [r2, #16]
 8003c86:	4b08      	ldr	r3, [pc, #32]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c88:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c96:	4a04      	ldr	r2, [pc, #16]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c9c:	e00e      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ca2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003ca6:	e009      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003ca8:	58024400 	.word	0x58024400
 8003cac:	58024800 	.word	0x58024800
 8003cb0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	f002 0301 	and.w	r3, r2, #1
 8003cc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003cd2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f000 8089 	beq.w	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ce4:	2b28      	cmp	r3, #40	@ 0x28
 8003ce6:	d86b      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cee:	bf00      	nop
 8003cf0:	08003dc9 	.word	0x08003dc9
 8003cf4:	08003dc1 	.word	0x08003dc1
 8003cf8:	08003dc1 	.word	0x08003dc1
 8003cfc:	08003dc1 	.word	0x08003dc1
 8003d00:	08003dc1 	.word	0x08003dc1
 8003d04:	08003dc1 	.word	0x08003dc1
 8003d08:	08003dc1 	.word	0x08003dc1
 8003d0c:	08003dc1 	.word	0x08003dc1
 8003d10:	08003d95 	.word	0x08003d95
 8003d14:	08003dc1 	.word	0x08003dc1
 8003d18:	08003dc1 	.word	0x08003dc1
 8003d1c:	08003dc1 	.word	0x08003dc1
 8003d20:	08003dc1 	.word	0x08003dc1
 8003d24:	08003dc1 	.word	0x08003dc1
 8003d28:	08003dc1 	.word	0x08003dc1
 8003d2c:	08003dc1 	.word	0x08003dc1
 8003d30:	08003dab 	.word	0x08003dab
 8003d34:	08003dc1 	.word	0x08003dc1
 8003d38:	08003dc1 	.word	0x08003dc1
 8003d3c:	08003dc1 	.word	0x08003dc1
 8003d40:	08003dc1 	.word	0x08003dc1
 8003d44:	08003dc1 	.word	0x08003dc1
 8003d48:	08003dc1 	.word	0x08003dc1
 8003d4c:	08003dc1 	.word	0x08003dc1
 8003d50:	08003dc9 	.word	0x08003dc9
 8003d54:	08003dc1 	.word	0x08003dc1
 8003d58:	08003dc1 	.word	0x08003dc1
 8003d5c:	08003dc1 	.word	0x08003dc1
 8003d60:	08003dc1 	.word	0x08003dc1
 8003d64:	08003dc1 	.word	0x08003dc1
 8003d68:	08003dc1 	.word	0x08003dc1
 8003d6c:	08003dc1 	.word	0x08003dc1
 8003d70:	08003dc9 	.word	0x08003dc9
 8003d74:	08003dc1 	.word	0x08003dc1
 8003d78:	08003dc1 	.word	0x08003dc1
 8003d7c:	08003dc1 	.word	0x08003dc1
 8003d80:	08003dc1 	.word	0x08003dc1
 8003d84:	08003dc1 	.word	0x08003dc1
 8003d88:	08003dc1 	.word	0x08003dc1
 8003d8c:	08003dc1 	.word	0x08003dc1
 8003d90:	08003dc9 	.word	0x08003dc9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d98:	3308      	adds	r3, #8
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 ffc3 	bl	8004d28 <RCCEx_PLL2_Config>
 8003da2:	4603      	mov	r3, r0
 8003da4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003da8:	e00f      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dae:	3328      	adds	r3, #40	@ 0x28
 8003db0:	2101      	movs	r1, #1
 8003db2:	4618      	mov	r0, r3
 8003db4:	f001 f86a 	bl	8004e8c <RCCEx_PLL3_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003dbe:	e004      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dc6:	e000      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10a      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003dd2:	4bbf      	ldr	r3, [pc, #764]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003de0:	4abb      	ldr	r2, [pc, #748]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003de2:	430b      	orrs	r3, r1
 8003de4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003de6:	e003      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	f002 0302 	and.w	r3, r2, #2
 8003dfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e00:	2300      	movs	r3, #0
 8003e02:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003e06:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	d041      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e16:	2b05      	cmp	r3, #5
 8003e18:	d824      	bhi.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e20 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e20:	08003e6d 	.word	0x08003e6d
 8003e24:	08003e39 	.word	0x08003e39
 8003e28:	08003e4f 	.word	0x08003e4f
 8003e2c:	08003e6d 	.word	0x08003e6d
 8003e30:	08003e6d 	.word	0x08003e6d
 8003e34:	08003e6d 	.word	0x08003e6d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	2101      	movs	r1, #1
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 ff71 	bl	8004d28 <RCCEx_PLL2_Config>
 8003e46:	4603      	mov	r3, r0
 8003e48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e4c:	e00f      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e52:	3328      	adds	r3, #40	@ 0x28
 8003e54:	2101      	movs	r1, #1
 8003e56:	4618      	mov	r0, r3
 8003e58:	f001 f818 	bl	8004e8c <RCCEx_PLL3_Config>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e62:	e004      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e6a:	e000      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10a      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e76:	4b96      	ldr	r3, [pc, #600]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e7a:	f023 0107 	bic.w	r1, r3, #7
 8003e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e84:	4a92      	ldr	r2, [pc, #584]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e86:	430b      	orrs	r3, r1
 8003e88:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e8a:	e003      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9c:	f002 0304 	and.w	r3, r2, #4
 8003ea0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003eaa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	d044      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ebc:	2b05      	cmp	r3, #5
 8003ebe:	d825      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec6:	bf00      	nop
 8003ec8:	08003f15 	.word	0x08003f15
 8003ecc:	08003ee1 	.word	0x08003ee1
 8003ed0:	08003ef7 	.word	0x08003ef7
 8003ed4:	08003f15 	.word	0x08003f15
 8003ed8:	08003f15 	.word	0x08003f15
 8003edc:	08003f15 	.word	0x08003f15
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 ff1d 	bl	8004d28 <RCCEx_PLL2_Config>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ef4:	e00f      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efa:	3328      	adds	r3, #40	@ 0x28
 8003efc:	2101      	movs	r1, #1
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 ffc4 	bl	8004e8c <RCCEx_PLL3_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f0a:	e004      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f12:	e000      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10b      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f1e:	4b6c      	ldr	r3, [pc, #432]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f22:	f023 0107 	bic.w	r1, r3, #7
 8003f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f2e:	4a68      	ldr	r2, [pc, #416]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f30:	430b      	orrs	r3, r1
 8003f32:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f34:	e003      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f46:	f002 0320 	and.w	r3, r2, #32
 8003f4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f4e:	2300      	movs	r3, #0
 8003f50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	d055      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f6a:	d033      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f70:	d82c      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f76:	d02f      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f7c:	d826      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f82:	d02b      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003f84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f88:	d820      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f8e:	d012      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003f90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f94:	d81a      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d022      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003f9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f9e:	d115      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa4:	3308      	adds	r3, #8
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 febd 	bl	8004d28 <RCCEx_PLL2_Config>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fb4:	e015      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fba:	3328      	adds	r3, #40	@ 0x28
 8003fbc:	2102      	movs	r1, #2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 ff64 	bl	8004e8c <RCCEx_PLL3_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fca:	e00a      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fd2:	e006      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fd4:	bf00      	nop
 8003fd6:	e004      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fd8:	bf00      	nop
 8003fda:	e002      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fdc:	bf00      	nop
 8003fde:	e000      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10b      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fea:	4b39      	ldr	r3, [pc, #228]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ffa:	4a35      	ldr	r2, [pc, #212]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	6553      	str	r3, [r2, #84]	@ 0x54
 8004000:	e003      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004006:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800400a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004012:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004016:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800401a:	2300      	movs	r3, #0
 800401c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004020:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004024:	460b      	mov	r3, r1
 8004026:	4313      	orrs	r3, r2
 8004028:	d058      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800402a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004032:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004036:	d033      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004038:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800403c:	d82c      	bhi.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800403e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004042:	d02f      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004044:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004048:	d826      	bhi.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800404a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800404e:	d02b      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004050:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004054:	d820      	bhi.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004056:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800405a:	d012      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800405c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004060:	d81a      	bhi.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004062:	2b00      	cmp	r3, #0
 8004064:	d022      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800406a:	d115      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800406c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004070:	3308      	adds	r3, #8
 8004072:	2100      	movs	r1, #0
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fe57 	bl	8004d28 <RCCEx_PLL2_Config>
 800407a:	4603      	mov	r3, r0
 800407c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004080:	e015      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004086:	3328      	adds	r3, #40	@ 0x28
 8004088:	2102      	movs	r1, #2
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fefe 	bl	8004e8c <RCCEx_PLL3_Config>
 8004090:	4603      	mov	r3, r0
 8004092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004096:	e00a      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800409e:	e006      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040a0:	bf00      	nop
 80040a2:	e004      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040a4:	bf00      	nop
 80040a6:	e002      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040a8:	bf00      	nop
 80040aa:	e000      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10e      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040b6:	4b06      	ldr	r3, [pc, #24]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ba:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80040be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040c6:	4a02      	ldr	r2, [pc, #8]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040c8:	430b      	orrs	r3, r1
 80040ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80040cc:	e006      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80040ce:	bf00      	nop
 80040d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80040dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80040e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040ec:	2300      	movs	r3, #0
 80040ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040f2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80040f6:	460b      	mov	r3, r1
 80040f8:	4313      	orrs	r3, r2
 80040fa:	d055      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80040fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004100:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004104:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004108:	d033      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800410a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800410e:	d82c      	bhi.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004110:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004114:	d02f      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004116:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800411a:	d826      	bhi.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800411c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004120:	d02b      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004122:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004126:	d820      	bhi.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004128:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800412c:	d012      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800412e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004132:	d81a      	bhi.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004134:	2b00      	cmp	r3, #0
 8004136:	d022      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004138:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800413c:	d115      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800413e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004142:	3308      	adds	r3, #8
 8004144:	2100      	movs	r1, #0
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fdee 	bl	8004d28 <RCCEx_PLL2_Config>
 800414c:	4603      	mov	r3, r0
 800414e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004152:	e015      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004158:	3328      	adds	r3, #40	@ 0x28
 800415a:	2102      	movs	r1, #2
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fe95 	bl	8004e8c <RCCEx_PLL3_Config>
 8004162:	4603      	mov	r3, r0
 8004164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004168:	e00a      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004170:	e006      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004172:	bf00      	nop
 8004174:	e004      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004176:	bf00      	nop
 8004178:	e002      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800417a:	bf00      	nop
 800417c:	e000      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800417e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004180:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10b      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004188:	4ba1      	ldr	r3, [pc, #644]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800418a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800418c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004194:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004198:	4a9d      	ldr	r2, [pc, #628]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800419a:	430b      	orrs	r3, r1
 800419c:	6593      	str	r3, [r2, #88]	@ 0x58
 800419e:	e003      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80041a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b0:	f002 0308 	and.w	r3, r2, #8
 80041b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041b8:	2300      	movs	r3, #0
 80041ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80041be:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80041c2:	460b      	mov	r3, r1
 80041c4:	4313      	orrs	r3, r2
 80041c6:	d01e      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80041c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041d4:	d10c      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041da:	3328      	adds	r3, #40	@ 0x28
 80041dc:	2102      	movs	r1, #2
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fe54 	bl	8004e8c <RCCEx_PLL3_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80041f0:	4b87      	ldr	r3, [pc, #540]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004200:	4a83      	ldr	r2, [pc, #524]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004202:	430b      	orrs	r3, r1
 8004204:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420e:	f002 0310 	and.w	r3, r2, #16
 8004212:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004216:	2300      	movs	r3, #0
 8004218:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800421c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004220:	460b      	mov	r3, r1
 8004222:	4313      	orrs	r3, r2
 8004224:	d01e      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800422e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004232:	d10c      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004238:	3328      	adds	r3, #40	@ 0x28
 800423a:	2102      	movs	r1, #2
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fe25 	bl	8004e8c <RCCEx_PLL3_Config>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800424e:	4b70      	ldr	r3, [pc, #448]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004252:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800425e:	4a6c      	ldr	r2, [pc, #432]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004260:	430b      	orrs	r3, r1
 8004262:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004270:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004274:	2300      	movs	r3, #0
 8004276:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800427a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800427e:	460b      	mov	r3, r1
 8004280:	4313      	orrs	r3, r2
 8004282:	d03e      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004288:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800428c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004290:	d022      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004292:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004296:	d81b      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800429c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042a0:	d00b      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80042a2:	e015      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a8:	3308      	adds	r3, #8
 80042aa:	2100      	movs	r1, #0
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 fd3b 	bl	8004d28 <RCCEx_PLL2_Config>
 80042b2:	4603      	mov	r3, r0
 80042b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042b8:	e00f      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042be:	3328      	adds	r3, #40	@ 0x28
 80042c0:	2102      	movs	r1, #2
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fde2 	bl	8004e8c <RCCEx_PLL3_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042ce:	e004      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042d6:	e000      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80042d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10b      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042e2:	4b4b      	ldr	r3, [pc, #300]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80042ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042f2:	4a47      	ldr	r2, [pc, #284]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042f4:	430b      	orrs	r3, r1
 80042f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80042f8:	e003      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800430e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004310:	2300      	movs	r3, #0
 8004312:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004314:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004318:	460b      	mov	r3, r1
 800431a:	4313      	orrs	r3, r2
 800431c:	d03b      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800431e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004326:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800432a:	d01f      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800432c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004330:	d818      	bhi.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004332:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004336:	d003      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004338:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800433c:	d007      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800433e:	e011      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004340:	4b33      	ldr	r3, [pc, #204]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004344:	4a32      	ldr	r2, [pc, #200]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004346:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800434a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800434c:	e00f      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800434e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004352:	3328      	adds	r3, #40	@ 0x28
 8004354:	2101      	movs	r1, #1
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fd98 	bl	8004e8c <RCCEx_PLL3_Config>
 800435c:	4603      	mov	r3, r0
 800435e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004362:	e004      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800436a:	e000      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800436c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800436e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10b      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004376:	4b26      	ldr	r3, [pc, #152]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800437a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800437e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004386:	4a22      	ldr	r2, [pc, #136]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004388:	430b      	orrs	r3, r1
 800438a:	6553      	str	r3, [r2, #84]	@ 0x54
 800438c:	e003      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004392:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80043a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80043a4:	2300      	movs	r3, #0
 80043a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80043a8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80043ac:	460b      	mov	r3, r1
 80043ae:	4313      	orrs	r3, r2
 80043b0:	d034      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80043b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80043bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043c0:	d007      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80043c2:	e011      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043c4:	4b12      	ldr	r3, [pc, #72]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c8:	4a11      	ldr	r2, [pc, #68]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043d0:	e00e      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d6:	3308      	adds	r3, #8
 80043d8:	2102      	movs	r1, #2
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fca4 	bl	8004d28 <RCCEx_PLL2_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043e6:	e003      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10d      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80043f8:	4b05      	ldr	r3, [pc, #20]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043fc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004404:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004406:	4a02      	ldr	r2, [pc, #8]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004408:	430b      	orrs	r3, r1
 800440a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800440c:	e006      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800440e:	bf00      	nop
 8004410:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004414:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004418:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800441c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004424:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004428:	66bb      	str	r3, [r7, #104]	@ 0x68
 800442a:	2300      	movs	r3, #0
 800442c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800442e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004432:	460b      	mov	r3, r1
 8004434:	4313      	orrs	r3, r2
 8004436:	d00c      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443c:	3328      	adds	r3, #40	@ 0x28
 800443e:	2102      	movs	r1, #2
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fd23 	bl	8004e8c <RCCEx_PLL3_Config>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800445e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004460:	2300      	movs	r3, #0
 8004462:	667b      	str	r3, [r7, #100]	@ 0x64
 8004464:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004468:	460b      	mov	r3, r1
 800446a:	4313      	orrs	r3, r2
 800446c:	d038      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800446e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004476:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800447a:	d018      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800447c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004480:	d811      	bhi.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004482:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004486:	d014      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004488:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800448c:	d80b      	bhi.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800448e:	2b00      	cmp	r3, #0
 8004490:	d011      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004492:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004496:	d106      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004498:	4bc3      	ldr	r3, [pc, #780]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800449a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449c:	4ac2      	ldr	r2, [pc, #776]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800449e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80044a4:	e008      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044ac:	e004      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80044ae:	bf00      	nop
 80044b0:	e002      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80044b2:	bf00      	nop
 80044b4:	e000      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80044b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10b      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044c0:	4bb9      	ldr	r3, [pc, #740]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044d0:	4ab5      	ldr	r2, [pc, #724]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044d2:	430b      	orrs	r3, r1
 80044d4:	6553      	str	r3, [r2, #84]	@ 0x54
 80044d6:	e003      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80044ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044ee:	2300      	movs	r3, #0
 80044f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044f2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80044f6:	460b      	mov	r3, r1
 80044f8:	4313      	orrs	r3, r2
 80044fa:	d009      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044fc:	4baa      	ldr	r3, [pc, #680]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004500:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800450a:	4aa7      	ldr	r2, [pc, #668]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800450c:	430b      	orrs	r3, r1
 800450e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800451c:	653b      	str	r3, [r7, #80]	@ 0x50
 800451e:	2300      	movs	r3, #0
 8004520:	657b      	str	r3, [r7, #84]	@ 0x54
 8004522:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004526:	460b      	mov	r3, r1
 8004528:	4313      	orrs	r3, r2
 800452a:	d00a      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800452c:	4b9e      	ldr	r3, [pc, #632]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004538:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800453c:	4a9a      	ldr	r2, [pc, #616]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800453e:	430b      	orrs	r3, r1
 8004540:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800454e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004550:	2300      	movs	r3, #0
 8004552:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004554:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004558:	460b      	mov	r3, r1
 800455a:	4313      	orrs	r3, r2
 800455c:	d009      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800455e:	4b92      	ldr	r3, [pc, #584]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004562:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800456c:	4a8e      	ldr	r2, [pc, #568]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800456e:	430b      	orrs	r3, r1
 8004570:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800457e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004580:	2300      	movs	r3, #0
 8004582:	647b      	str	r3, [r7, #68]	@ 0x44
 8004584:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004588:	460b      	mov	r3, r1
 800458a:	4313      	orrs	r3, r2
 800458c:	d00e      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800458e:	4b86      	ldr	r3, [pc, #536]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	4a85      	ldr	r2, [pc, #532]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004594:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004598:	6113      	str	r3, [r2, #16]
 800459a:	4b83      	ldr	r3, [pc, #524]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800459c:	6919      	ldr	r1, [r3, #16]
 800459e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80045a6:	4a80      	ldr	r2, [pc, #512]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045a8:	430b      	orrs	r3, r1
 80045aa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80045b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045ba:	2300      	movs	r3, #0
 80045bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045be:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80045c2:	460b      	mov	r3, r1
 80045c4:	4313      	orrs	r3, r2
 80045c6:	d009      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80045c8:	4b77      	ldr	r3, [pc, #476]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045cc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80045d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d6:	4a74      	ldr	r2, [pc, #464]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045d8:	430b      	orrs	r3, r1
 80045da:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80045e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80045ea:	2300      	movs	r3, #0
 80045ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80045ee:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80045f2:	460b      	mov	r3, r1
 80045f4:	4313      	orrs	r3, r2
 80045f6:	d00a      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045f8:	4b6b      	ldr	r3, [pc, #428]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045fc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004604:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004608:	4a67      	ldr	r2, [pc, #412]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800460a:	430b      	orrs	r3, r1
 800460c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800460e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	2100      	movs	r1, #0
 8004618:	62b9      	str	r1, [r7, #40]	@ 0x28
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004620:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004624:	460b      	mov	r3, r1
 8004626:	4313      	orrs	r3, r2
 8004628:	d011      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800462a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462e:	3308      	adds	r3, #8
 8004630:	2100      	movs	r1, #0
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fb78 	bl	8004d28 <RCCEx_PLL2_Config>
 8004638:	4603      	mov	r3, r0
 800463a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800463e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004646:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800464a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800464e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004656:	2100      	movs	r1, #0
 8004658:	6239      	str	r1, [r7, #32]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004660:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004664:	460b      	mov	r3, r1
 8004666:	4313      	orrs	r3, r2
 8004668:	d011      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800466a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466e:	3308      	adds	r3, #8
 8004670:	2101      	movs	r1, #1
 8004672:	4618      	mov	r0, r3
 8004674:	f000 fb58 	bl	8004d28 <RCCEx_PLL2_Config>
 8004678:	4603      	mov	r3, r0
 800467a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800467e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800468a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800468e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	2100      	movs	r1, #0
 8004698:	61b9      	str	r1, [r7, #24]
 800469a:	f003 0304 	and.w	r3, r3, #4
 800469e:	61fb      	str	r3, [r7, #28]
 80046a0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80046a4:	460b      	mov	r3, r1
 80046a6:	4313      	orrs	r3, r2
 80046a8:	d011      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ae:	3308      	adds	r3, #8
 80046b0:	2102      	movs	r1, #2
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fb38 	bl	8004d28 <RCCEx_PLL2_Config>
 80046b8:	4603      	mov	r3, r0
 80046ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80046be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80046ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d6:	2100      	movs	r1, #0
 80046d8:	6139      	str	r1, [r7, #16]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80046e4:	460b      	mov	r3, r1
 80046e6:	4313      	orrs	r3, r2
 80046e8:	d011      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ee:	3328      	adds	r3, #40	@ 0x28
 80046f0:	2100      	movs	r1, #0
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fbca 	bl	8004e8c <RCCEx_PLL3_Config>
 80046f8:	4603      	mov	r3, r0
 80046fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80046fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004706:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800470a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800470e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004716:	2100      	movs	r1, #0
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	f003 0310 	and.w	r3, r3, #16
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004724:	460b      	mov	r3, r1
 8004726:	4313      	orrs	r3, r2
 8004728:	d011      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800472a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472e:	3328      	adds	r3, #40	@ 0x28
 8004730:	2101      	movs	r1, #1
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fbaa 	bl	8004e8c <RCCEx_PLL3_Config>
 8004738:	4603      	mov	r3, r0
 800473a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800473e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004746:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800474a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800474e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004756:	2100      	movs	r1, #0
 8004758:	6039      	str	r1, [r7, #0]
 800475a:	f003 0320 	and.w	r3, r3, #32
 800475e:	607b      	str	r3, [r7, #4]
 8004760:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004764:	460b      	mov	r3, r1
 8004766:	4313      	orrs	r3, r2
 8004768:	d011      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800476a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800476e:	3328      	adds	r3, #40	@ 0x28
 8004770:	2102      	movs	r1, #2
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fb8a 	bl	8004e8c <RCCEx_PLL3_Config>
 8004778:	4603      	mov	r3, r0
 800477a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800477e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800478a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800478e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	e000      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
}
 800479c:	4618      	mov	r0, r3
 800479e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80047a2:	46bd      	mov	sp, r7
 80047a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047a8:	58024400 	.word	0x58024400

080047ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80047b0:	f7fe fd54 	bl	800325c <HAL_RCC_GetHCLKFreq>
 80047b4:	4602      	mov	r2, r0
 80047b6:	4b06      	ldr	r3, [pc, #24]	@ (80047d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	091b      	lsrs	r3, r3, #4
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	4904      	ldr	r1, [pc, #16]	@ (80047d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80047c2:	5ccb      	ldrb	r3, [r1, r3]
 80047c4:	f003 031f 	and.w	r3, r3, #31
 80047c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	58024400 	.word	0x58024400
 80047d4:	08009b90 	.word	0x08009b90

080047d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80047d8:	b480      	push	{r7}
 80047da:	b089      	sub	sp, #36	@ 0x24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047e0:	4ba1      	ldr	r3, [pc, #644]	@ (8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e4:	f003 0303 	and.w	r3, r3, #3
 80047e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80047ea:	4b9f      	ldr	r3, [pc, #636]	@ (8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ee:	0b1b      	lsrs	r3, r3, #12
 80047f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80047f6:	4b9c      	ldr	r3, [pc, #624]	@ (8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fa:	091b      	lsrs	r3, r3, #4
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004802:	4b99      	ldr	r3, [pc, #612]	@ (8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004806:	08db      	lsrs	r3, r3, #3
 8004808:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	fb02 f303 	mul.w	r3, r2, r3
 8004812:	ee07 3a90 	vmov	s15, r3
 8004816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800481a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 8111 	beq.w	8004a48 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	2b02      	cmp	r3, #2
 800482a:	f000 8083 	beq.w	8004934 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	2b02      	cmp	r3, #2
 8004832:	f200 80a1 	bhi.w	8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d056      	beq.n	80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004842:	e099      	b.n	8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004844:	4b88      	ldr	r3, [pc, #544]	@ (8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0320 	and.w	r3, r3, #32
 800484c:	2b00      	cmp	r3, #0
 800484e:	d02d      	beq.n	80048ac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004850:	4b85      	ldr	r3, [pc, #532]	@ (8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	08db      	lsrs	r3, r3, #3
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	4a84      	ldr	r2, [pc, #528]	@ (8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800485c:	fa22 f303 	lsr.w	r3, r2, r3
 8004860:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	ee07 3a90 	vmov	s15, r3
 8004868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	ee07 3a90 	vmov	s15, r3
 8004872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800487a:	4b7b      	ldr	r3, [pc, #492]	@ (8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800487c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004882:	ee07 3a90 	vmov	s15, r3
 8004886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800488a:	ed97 6a03 	vldr	s12, [r7, #12]
 800488e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004a70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800489a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800489e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80048aa:	e087      	b.n	80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	ee07 3a90 	vmov	s15, r3
 80048b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004a74 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80048ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048be:	4b6a      	ldr	r3, [pc, #424]	@ (8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80048d2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004a70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048ee:	e065      	b.n	80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	ee07 3a90 	vmov	s15, r3
 80048f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004902:	4b59      	ldr	r3, [pc, #356]	@ (8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490a:	ee07 3a90 	vmov	s15, r3
 800490e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004912:	ed97 6a03 	vldr	s12, [r7, #12]
 8004916:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004a70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800491a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800491e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004922:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800492a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800492e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004932:	e043      	b.n	80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	ee07 3a90 	vmov	s15, r3
 800493a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004946:	4b48      	ldr	r3, [pc, #288]	@ (8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800494a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800494e:	ee07 3a90 	vmov	s15, r3
 8004952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004956:	ed97 6a03 	vldr	s12, [r7, #12]
 800495a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004a70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800495e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004966:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800496a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800496e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004972:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004976:	e021      	b.n	80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	ee07 3a90 	vmov	s15, r3
 800497e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004982:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800498a:	4b37      	ldr	r3, [pc, #220]	@ (8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800498c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004992:	ee07 3a90 	vmov	s15, r3
 8004996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800499a:	ed97 6a03 	vldr	s12, [r7, #12]
 800499e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004a70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80049bc:	4b2a      	ldr	r3, [pc, #168]	@ (8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c0:	0a5b      	lsrs	r3, r3, #9
 80049c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049c6:	ee07 3a90 	vmov	s15, r3
 80049ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80049da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049e2:	ee17 2a90 	vmov	r2, s15
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80049ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ee:	0c1b      	lsrs	r3, r3, #16
 80049f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049f4:	ee07 3a90 	vmov	s15, r3
 80049f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a04:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a10:	ee17 2a90 	vmov	r2, s15
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004a18:	4b13      	ldr	r3, [pc, #76]	@ (8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1c:	0e1b      	lsrs	r3, r3, #24
 8004a1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a22:	ee07 3a90 	vmov	s15, r3
 8004a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a32:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a3e:	ee17 2a90 	vmov	r2, s15
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a46:	e008      	b.n	8004a5a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	609a      	str	r2, [r3, #8]
}
 8004a5a:	bf00      	nop
 8004a5c:	3724      	adds	r7, #36	@ 0x24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	58024400 	.word	0x58024400
 8004a6c:	03d09000 	.word	0x03d09000
 8004a70:	46000000 	.word	0x46000000
 8004a74:	4c742400 	.word	0x4c742400
 8004a78:	4a742400 	.word	0x4a742400
 8004a7c:	4af42400 	.word	0x4af42400

08004a80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b089      	sub	sp, #36	@ 0x24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a88:	4ba1      	ldr	r3, [pc, #644]	@ (8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8c:	f003 0303 	and.w	r3, r3, #3
 8004a90:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004a92:	4b9f      	ldr	r3, [pc, #636]	@ (8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a96:	0d1b      	lsrs	r3, r3, #20
 8004a98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a9c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a9e:	4b9c      	ldr	r3, [pc, #624]	@ (8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa2:	0a1b      	lsrs	r3, r3, #8
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004aaa:	4b99      	ldr	r3, [pc, #612]	@ (8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aae:	08db      	lsrs	r3, r3, #3
 8004ab0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	fb02 f303 	mul.w	r3, r2, r3
 8004aba:	ee07 3a90 	vmov	s15, r3
 8004abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 8111 	beq.w	8004cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	f000 8083 	beq.w	8004bdc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	f200 80a1 	bhi.w	8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d056      	beq.n	8004b98 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004aea:	e099      	b.n	8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004aec:	4b88      	ldr	r3, [pc, #544]	@ (8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d02d      	beq.n	8004b54 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004af8:	4b85      	ldr	r3, [pc, #532]	@ (8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	08db      	lsrs	r3, r3, #3
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	4a84      	ldr	r2, [pc, #528]	@ (8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004b04:	fa22 f303 	lsr.w	r3, r2, r3
 8004b08:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	ee07 3a90 	vmov	s15, r3
 8004b10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	ee07 3a90 	vmov	s15, r3
 8004b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b22:	4b7b      	ldr	r3, [pc, #492]	@ (8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004d18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b52:	e087      	b.n	8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	ee07 3a90 	vmov	s15, r3
 8004b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004d1c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b66:	4b6a      	ldr	r3, [pc, #424]	@ (8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b6e:	ee07 3a90 	vmov	s15, r3
 8004b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b7a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004d18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b96:	e065      	b.n	8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004baa:	4b59      	ldr	r3, [pc, #356]	@ (8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb2:	ee07 3a90 	vmov	s15, r3
 8004bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bbe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004d18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bda:	e043      	b.n	8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	ee07 3a90 	vmov	s15, r3
 8004be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bee:	4b48      	ldr	r3, [pc, #288]	@ (8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf6:	ee07 3a90 	vmov	s15, r3
 8004bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c02:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004d18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c1e:	e021      	b.n	8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	ee07 3a90 	vmov	s15, r3
 8004c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c2a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c32:	4b37      	ldr	r3, [pc, #220]	@ (8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c3a:	ee07 3a90 	vmov	s15, r3
 8004c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c46:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004d18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c62:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c64:	4b2a      	ldr	r3, [pc, #168]	@ (8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c68:	0a5b      	lsrs	r3, r3, #9
 8004c6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c6e:	ee07 3a90 	vmov	s15, r3
 8004c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c8a:	ee17 2a90 	vmov	r2, s15
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004c92:	4b1f      	ldr	r3, [pc, #124]	@ (8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c96:	0c1b      	lsrs	r3, r3, #16
 8004c98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c9c:	ee07 3a90 	vmov	s15, r3
 8004ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ca8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cac:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cb8:	ee17 2a90 	vmov	r2, s15
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004cc0:	4b13      	ldr	r3, [pc, #76]	@ (8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc4:	0e1b      	lsrs	r3, r3, #24
 8004cc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cda:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ce6:	ee17 2a90 	vmov	r2, s15
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004cee:	e008      	b.n	8004d02 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	609a      	str	r2, [r3, #8]
}
 8004d02:	bf00      	nop
 8004d04:	3724      	adds	r7, #36	@ 0x24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	58024400 	.word	0x58024400
 8004d14:	03d09000 	.word	0x03d09000
 8004d18:	46000000 	.word	0x46000000
 8004d1c:	4c742400 	.word	0x4c742400
 8004d20:	4a742400 	.word	0x4a742400
 8004d24:	4af42400 	.word	0x4af42400

08004d28 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d36:	4b53      	ldr	r3, [pc, #332]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d101      	bne.n	8004d46 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e099      	b.n	8004e7a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d46:	4b4f      	ldr	r3, [pc, #316]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a4e      	ldr	r2, [pc, #312]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004d4c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d52:	f7fc fa37 	bl	80011c4 <HAL_GetTick>
 8004d56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d58:	e008      	b.n	8004d6c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d5a:	f7fc fa33 	bl	80011c4 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e086      	b.n	8004e7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d6c:	4b45      	ldr	r3, [pc, #276]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1f0      	bne.n	8004d5a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d78:	4b42      	ldr	r3, [pc, #264]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	031b      	lsls	r3, r3, #12
 8004d86:	493f      	ldr	r1, [pc, #252]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	025b      	lsls	r3, r3, #9
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	431a      	orrs	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	041b      	lsls	r3, r3, #16
 8004daa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	3b01      	subs	r3, #1
 8004db6:	061b      	lsls	r3, r3, #24
 8004db8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004dbc:	4931      	ldr	r1, [pc, #196]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004dc2:	4b30      	ldr	r3, [pc, #192]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	492d      	ldr	r1, [pc, #180]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd8:	f023 0220 	bic.w	r2, r3, #32
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	4928      	ldr	r1, [pc, #160]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004de6:	4b27      	ldr	r3, [pc, #156]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dea:	4a26      	ldr	r2, [pc, #152]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004dec:	f023 0310 	bic.w	r3, r3, #16
 8004df0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004df2:	4b24      	ldr	r3, [pc, #144]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004df4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004df6:	4b24      	ldr	r3, [pc, #144]	@ (8004e88 <RCCEx_PLL2_Config+0x160>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	69d2      	ldr	r2, [r2, #28]
 8004dfe:	00d2      	lsls	r2, r2, #3
 8004e00:	4920      	ldr	r1, [pc, #128]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e06:	4b1f      	ldr	r3, [pc, #124]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004e0c:	f043 0310 	orr.w	r3, r3, #16
 8004e10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d106      	bne.n	8004e26 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e18:	4b1a      	ldr	r3, [pc, #104]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1c:	4a19      	ldr	r2, [pc, #100]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004e1e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e24:	e00f      	b.n	8004e46 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d106      	bne.n	8004e3a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e2c:	4b15      	ldr	r3, [pc, #84]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e30:	4a14      	ldr	r2, [pc, #80]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004e32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e38:	e005      	b.n	8004e46 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e3a:	4b12      	ldr	r3, [pc, #72]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3e:	4a11      	ldr	r2, [pc, #68]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004e40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e44:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e46:	4b0f      	ldr	r3, [pc, #60]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a0e      	ldr	r2, [pc, #56]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004e4c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e52:	f7fc f9b7 	bl	80011c4 <HAL_GetTick>
 8004e56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e58:	e008      	b.n	8004e6c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e5a:	f7fc f9b3 	bl	80011c4 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e006      	b.n	8004e7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e6c:	4b05      	ldr	r3, [pc, #20]	@ (8004e84 <RCCEx_PLL2_Config+0x15c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0f0      	beq.n	8004e5a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	58024400 	.word	0x58024400
 8004e88:	ffff0007 	.word	0xffff0007

08004e8c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e9a:	4b53      	ldr	r3, [pc, #332]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	2b03      	cmp	r3, #3
 8004ea4:	d101      	bne.n	8004eaa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e099      	b.n	8004fde <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004eaa:	4b4f      	ldr	r3, [pc, #316]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a4e      	ldr	r2, [pc, #312]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004eb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb6:	f7fc f985 	bl	80011c4 <HAL_GetTick>
 8004eba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ebc:	e008      	b.n	8004ed0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ebe:	f7fc f981 	bl	80011c4 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e086      	b.n	8004fde <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ed0:	4b45      	ldr	r3, [pc, #276]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1f0      	bne.n	8004ebe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004edc:	4b42      	ldr	r3, [pc, #264]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	051b      	lsls	r3, r3, #20
 8004eea:	493f      	ldr	r1, [pc, #252]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	025b      	lsls	r3, r3, #9
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	041b      	lsls	r3, r3, #16
 8004f0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	061b      	lsls	r3, r3, #24
 8004f1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f20:	4931      	ldr	r1, [pc, #196]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f26:	4b30      	ldr	r3, [pc, #192]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	492d      	ldr	r1, [pc, #180]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f38:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	4928      	ldr	r1, [pc, #160]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f4a:	4b27      	ldr	r3, [pc, #156]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4e:	4a26      	ldr	r2, [pc, #152]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004f50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f56:	4b24      	ldr	r3, [pc, #144]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004f58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f5a:	4b24      	ldr	r3, [pc, #144]	@ (8004fec <RCCEx_PLL3_Config+0x160>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	69d2      	ldr	r2, [r2, #28]
 8004f62:	00d2      	lsls	r2, r2, #3
 8004f64:	4920      	ldr	r1, [pc, #128]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d106      	bne.n	8004f8a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f80:	4a19      	ldr	r2, [pc, #100]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004f82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f88:	e00f      	b.n	8004faa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d106      	bne.n	8004f9e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f90:	4b15      	ldr	r3, [pc, #84]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f94:	4a14      	ldr	r2, [pc, #80]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004f96:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f9c:	e005      	b.n	8004faa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f9e:	4b12      	ldr	r3, [pc, #72]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa2:	4a11      	ldr	r2, [pc, #68]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004fa4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fa8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004faa:	4b0f      	ldr	r3, [pc, #60]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a0e      	ldr	r2, [pc, #56]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004fb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb6:	f7fc f905 	bl	80011c4 <HAL_GetTick>
 8004fba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fbc:	e008      	b.n	8004fd0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004fbe:	f7fc f901 	bl	80011c4 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e006      	b.n	8004fde <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fd0:	4b05      	ldr	r3, [pc, #20]	@ (8004fe8 <RCCEx_PLL3_Config+0x15c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0f0      	beq.n	8004fbe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	58024400 	.word	0x58024400
 8004fec:	ffff0007 	.word	0xffff0007

08004ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e049      	b.n	8005096 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d106      	bne.n	800501c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f841 	bl	800509e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3304      	adds	r3, #4
 800502c:	4619      	mov	r1, r3
 800502e:	4610      	mov	r0, r2
 8005030:	f000 f9e8 	bl	8005404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
	...

080050b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d001      	beq.n	80050cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e054      	b.n	8005176 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0201 	orr.w	r2, r2, #1
 80050e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a26      	ldr	r2, [pc, #152]	@ (8005184 <HAL_TIM_Base_Start_IT+0xd0>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d022      	beq.n	8005134 <HAL_TIM_Base_Start_IT+0x80>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050f6:	d01d      	beq.n	8005134 <HAL_TIM_Base_Start_IT+0x80>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a22      	ldr	r2, [pc, #136]	@ (8005188 <HAL_TIM_Base_Start_IT+0xd4>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d018      	beq.n	8005134 <HAL_TIM_Base_Start_IT+0x80>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a21      	ldr	r2, [pc, #132]	@ (800518c <HAL_TIM_Base_Start_IT+0xd8>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d013      	beq.n	8005134 <HAL_TIM_Base_Start_IT+0x80>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a1f      	ldr	r2, [pc, #124]	@ (8005190 <HAL_TIM_Base_Start_IT+0xdc>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00e      	beq.n	8005134 <HAL_TIM_Base_Start_IT+0x80>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a1e      	ldr	r2, [pc, #120]	@ (8005194 <HAL_TIM_Base_Start_IT+0xe0>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d009      	beq.n	8005134 <HAL_TIM_Base_Start_IT+0x80>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a1c      	ldr	r2, [pc, #112]	@ (8005198 <HAL_TIM_Base_Start_IT+0xe4>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d004      	beq.n	8005134 <HAL_TIM_Base_Start_IT+0x80>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a1b      	ldr	r2, [pc, #108]	@ (800519c <HAL_TIM_Base_Start_IT+0xe8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d115      	bne.n	8005160 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689a      	ldr	r2, [r3, #8]
 800513a:	4b19      	ldr	r3, [pc, #100]	@ (80051a0 <HAL_TIM_Base_Start_IT+0xec>)
 800513c:	4013      	ands	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b06      	cmp	r3, #6
 8005144:	d015      	beq.n	8005172 <HAL_TIM_Base_Start_IT+0xbe>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800514c:	d011      	beq.n	8005172 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f042 0201 	orr.w	r2, r2, #1
 800515c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800515e:	e008      	b.n	8005172 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0201 	orr.w	r2, r2, #1
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	e000      	b.n	8005174 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005172:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40010000 	.word	0x40010000
 8005188:	40000400 	.word	0x40000400
 800518c:	40000800 	.word	0x40000800
 8005190:	40000c00 	.word	0x40000c00
 8005194:	40010400 	.word	0x40010400
 8005198:	40001800 	.word	0x40001800
 800519c:	40014000 	.word	0x40014000
 80051a0:	00010007 	.word	0x00010007

080051a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d020      	beq.n	8005208 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01b      	beq.n	8005208 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f06f 0202 	mvn.w	r2, #2
 80051d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	f003 0303 	and.w	r3, r3, #3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f8e9 	bl	80053c6 <HAL_TIM_IC_CaptureCallback>
 80051f4:	e005      	b.n	8005202 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f8db 	bl	80053b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f8ec 	bl	80053da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	f003 0304 	and.w	r3, r3, #4
 800520e:	2b00      	cmp	r3, #0
 8005210:	d020      	beq.n	8005254 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	d01b      	beq.n	8005254 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f06f 0204 	mvn.w	r2, #4
 8005224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2202      	movs	r2, #2
 800522a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f8c3 	bl	80053c6 <HAL_TIM_IC_CaptureCallback>
 8005240:	e005      	b.n	800524e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f8b5 	bl	80053b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 f8c6 	bl	80053da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d020      	beq.n	80052a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f003 0308 	and.w	r3, r3, #8
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01b      	beq.n	80052a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f06f 0208 	mvn.w	r2, #8
 8005270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2204      	movs	r2, #4
 8005276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f89d 	bl	80053c6 <HAL_TIM_IC_CaptureCallback>
 800528c:	e005      	b.n	800529a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f88f 	bl	80053b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f8a0 	bl	80053da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f003 0310 	and.w	r3, r3, #16
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d020      	beq.n	80052ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f003 0310 	and.w	r3, r3, #16
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d01b      	beq.n	80052ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0210 	mvn.w	r2, #16
 80052bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2208      	movs	r2, #8
 80052c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f877 	bl	80053c6 <HAL_TIM_IC_CaptureCallback>
 80052d8:	e005      	b.n	80052e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f869 	bl	80053b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f87a 	bl	80053da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00c      	beq.n	8005310 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d007      	beq.n	8005310 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0201 	mvn.w	r2, #1
 8005308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fb fc2c 	bl	8000b68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005316:	2b00      	cmp	r3, #0
 8005318:	d104      	bne.n	8005324 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00c      	beq.n	800533e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800532a:	2b00      	cmp	r3, #0
 800532c:	d007      	beq.n	800533e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f913 	bl	8005564 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00c      	beq.n	8005362 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800534e:	2b00      	cmp	r3, #0
 8005350:	d007      	beq.n	8005362 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800535a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f90b 	bl	8005578 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00c      	beq.n	8005386 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005372:	2b00      	cmp	r3, #0
 8005374:	d007      	beq.n	8005386 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800537e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f834 	bl	80053ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f003 0320 	and.w	r3, r3, #32
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00c      	beq.n	80053aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f003 0320 	and.w	r3, r3, #32
 8005396:	2b00      	cmp	r3, #0
 8005398:	d007      	beq.n	80053aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f06f 0220 	mvn.w	r2, #32
 80053a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f8d3 	bl	8005550 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053aa:	bf00      	nop
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053da:	b480      	push	{r7}
 80053dc:	b083      	sub	sp, #12
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
	...

08005404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a46      	ldr	r2, [pc, #280]	@ (8005530 <TIM_Base_SetConfig+0x12c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d013      	beq.n	8005444 <TIM_Base_SetConfig+0x40>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005422:	d00f      	beq.n	8005444 <TIM_Base_SetConfig+0x40>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a43      	ldr	r2, [pc, #268]	@ (8005534 <TIM_Base_SetConfig+0x130>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00b      	beq.n	8005444 <TIM_Base_SetConfig+0x40>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a42      	ldr	r2, [pc, #264]	@ (8005538 <TIM_Base_SetConfig+0x134>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d007      	beq.n	8005444 <TIM_Base_SetConfig+0x40>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a41      	ldr	r2, [pc, #260]	@ (800553c <TIM_Base_SetConfig+0x138>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d003      	beq.n	8005444 <TIM_Base_SetConfig+0x40>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a40      	ldr	r2, [pc, #256]	@ (8005540 <TIM_Base_SetConfig+0x13c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d108      	bne.n	8005456 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800544a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a35      	ldr	r2, [pc, #212]	@ (8005530 <TIM_Base_SetConfig+0x12c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d01f      	beq.n	800549e <TIM_Base_SetConfig+0x9a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005464:	d01b      	beq.n	800549e <TIM_Base_SetConfig+0x9a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a32      	ldr	r2, [pc, #200]	@ (8005534 <TIM_Base_SetConfig+0x130>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d017      	beq.n	800549e <TIM_Base_SetConfig+0x9a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a31      	ldr	r2, [pc, #196]	@ (8005538 <TIM_Base_SetConfig+0x134>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d013      	beq.n	800549e <TIM_Base_SetConfig+0x9a>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a30      	ldr	r2, [pc, #192]	@ (800553c <TIM_Base_SetConfig+0x138>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00f      	beq.n	800549e <TIM_Base_SetConfig+0x9a>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a2f      	ldr	r2, [pc, #188]	@ (8005540 <TIM_Base_SetConfig+0x13c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d00b      	beq.n	800549e <TIM_Base_SetConfig+0x9a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a2e      	ldr	r2, [pc, #184]	@ (8005544 <TIM_Base_SetConfig+0x140>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d007      	beq.n	800549e <TIM_Base_SetConfig+0x9a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a2d      	ldr	r2, [pc, #180]	@ (8005548 <TIM_Base_SetConfig+0x144>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d003      	beq.n	800549e <TIM_Base_SetConfig+0x9a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a2c      	ldr	r2, [pc, #176]	@ (800554c <TIM_Base_SetConfig+0x148>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d108      	bne.n	80054b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a16      	ldr	r2, [pc, #88]	@ (8005530 <TIM_Base_SetConfig+0x12c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00f      	beq.n	80054fc <TIM_Base_SetConfig+0xf8>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a18      	ldr	r2, [pc, #96]	@ (8005540 <TIM_Base_SetConfig+0x13c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d00b      	beq.n	80054fc <TIM_Base_SetConfig+0xf8>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a17      	ldr	r2, [pc, #92]	@ (8005544 <TIM_Base_SetConfig+0x140>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d007      	beq.n	80054fc <TIM_Base_SetConfig+0xf8>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a16      	ldr	r2, [pc, #88]	@ (8005548 <TIM_Base_SetConfig+0x144>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d003      	beq.n	80054fc <TIM_Base_SetConfig+0xf8>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a15      	ldr	r2, [pc, #84]	@ (800554c <TIM_Base_SetConfig+0x148>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d103      	bne.n	8005504 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b01      	cmp	r3, #1
 8005514:	d105      	bne.n	8005522 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	f023 0201 	bic.w	r2, r3, #1
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	611a      	str	r2, [r3, #16]
  }
}
 8005522:	bf00      	nop
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40010000 	.word	0x40010000
 8005534:	40000400 	.word	0x40000400
 8005538:	40000800 	.word	0x40000800
 800553c:	40000c00 	.word	0x40000c00
 8005540:	40010400 	.word	0x40010400
 8005544:	40014000 	.word	0x40014000
 8005548:	40014400 	.word	0x40014400
 800554c:	40014800 	.word	0x40014800

08005550 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e042      	b.n	8005624 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d106      	bne.n	80055b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7fb fc75 	bl	8000ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2224      	movs	r2, #36	@ 0x24
 80055ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0201 	bic.w	r2, r2, #1
 80055cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fd90 	bl	80060fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f825 	bl	800562c <UART_SetConfig>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e01b      	b.n	8005624 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689a      	ldr	r2, [r3, #8]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800560a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0201 	orr.w	r2, r2, #1
 800561a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 fe0f 	bl	8006240 <UART_CheckIdleState>
 8005622:	4603      	mov	r3, r0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800562c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005630:	b092      	sub	sp, #72	@ 0x48
 8005632:	af00      	add	r7, sp, #0
 8005634:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005636:	2300      	movs	r3, #0
 8005638:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	431a      	orrs	r2, r3
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	431a      	orrs	r2, r3
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	4313      	orrs	r3, r2
 8005652:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	4bbe      	ldr	r3, [pc, #760]	@ (8005954 <UART_SetConfig+0x328>)
 800565c:	4013      	ands	r3, r2
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	6812      	ldr	r2, [r2, #0]
 8005662:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005664:	430b      	orrs	r3, r1
 8005666:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4ab3      	ldr	r2, [pc, #716]	@ (8005958 <UART_SetConfig+0x32c>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d004      	beq.n	8005698 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005694:	4313      	orrs	r3, r2
 8005696:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689a      	ldr	r2, [r3, #8]
 800569e:	4baf      	ldr	r3, [pc, #700]	@ (800595c <UART_SetConfig+0x330>)
 80056a0:	4013      	ands	r3, r2
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	6812      	ldr	r2, [r2, #0]
 80056a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80056a8:	430b      	orrs	r3, r1
 80056aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b2:	f023 010f 	bic.w	r1, r3, #15
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4aa6      	ldr	r2, [pc, #664]	@ (8005960 <UART_SetConfig+0x334>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d177      	bne.n	80057bc <UART_SetConfig+0x190>
 80056cc:	4ba5      	ldr	r3, [pc, #660]	@ (8005964 <UART_SetConfig+0x338>)
 80056ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056d4:	2b28      	cmp	r3, #40	@ 0x28
 80056d6:	d86d      	bhi.n	80057b4 <UART_SetConfig+0x188>
 80056d8:	a201      	add	r2, pc, #4	@ (adr r2, 80056e0 <UART_SetConfig+0xb4>)
 80056da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056de:	bf00      	nop
 80056e0:	08005785 	.word	0x08005785
 80056e4:	080057b5 	.word	0x080057b5
 80056e8:	080057b5 	.word	0x080057b5
 80056ec:	080057b5 	.word	0x080057b5
 80056f0:	080057b5 	.word	0x080057b5
 80056f4:	080057b5 	.word	0x080057b5
 80056f8:	080057b5 	.word	0x080057b5
 80056fc:	080057b5 	.word	0x080057b5
 8005700:	0800578d 	.word	0x0800578d
 8005704:	080057b5 	.word	0x080057b5
 8005708:	080057b5 	.word	0x080057b5
 800570c:	080057b5 	.word	0x080057b5
 8005710:	080057b5 	.word	0x080057b5
 8005714:	080057b5 	.word	0x080057b5
 8005718:	080057b5 	.word	0x080057b5
 800571c:	080057b5 	.word	0x080057b5
 8005720:	08005795 	.word	0x08005795
 8005724:	080057b5 	.word	0x080057b5
 8005728:	080057b5 	.word	0x080057b5
 800572c:	080057b5 	.word	0x080057b5
 8005730:	080057b5 	.word	0x080057b5
 8005734:	080057b5 	.word	0x080057b5
 8005738:	080057b5 	.word	0x080057b5
 800573c:	080057b5 	.word	0x080057b5
 8005740:	0800579d 	.word	0x0800579d
 8005744:	080057b5 	.word	0x080057b5
 8005748:	080057b5 	.word	0x080057b5
 800574c:	080057b5 	.word	0x080057b5
 8005750:	080057b5 	.word	0x080057b5
 8005754:	080057b5 	.word	0x080057b5
 8005758:	080057b5 	.word	0x080057b5
 800575c:	080057b5 	.word	0x080057b5
 8005760:	080057a5 	.word	0x080057a5
 8005764:	080057b5 	.word	0x080057b5
 8005768:	080057b5 	.word	0x080057b5
 800576c:	080057b5 	.word	0x080057b5
 8005770:	080057b5 	.word	0x080057b5
 8005774:	080057b5 	.word	0x080057b5
 8005778:	080057b5 	.word	0x080057b5
 800577c:	080057b5 	.word	0x080057b5
 8005780:	080057ad 	.word	0x080057ad
 8005784:	2301      	movs	r3, #1
 8005786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800578a:	e222      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 800578c:	2304      	movs	r3, #4
 800578e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005792:	e21e      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005794:	2308      	movs	r3, #8
 8005796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800579a:	e21a      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 800579c:	2310      	movs	r3, #16
 800579e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057a2:	e216      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 80057a4:	2320      	movs	r3, #32
 80057a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057aa:	e212      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 80057ac:	2340      	movs	r3, #64	@ 0x40
 80057ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057b2:	e20e      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 80057b4:	2380      	movs	r3, #128	@ 0x80
 80057b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ba:	e20a      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a69      	ldr	r2, [pc, #420]	@ (8005968 <UART_SetConfig+0x33c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d130      	bne.n	8005828 <UART_SetConfig+0x1fc>
 80057c6:	4b67      	ldr	r3, [pc, #412]	@ (8005964 <UART_SetConfig+0x338>)
 80057c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	2b05      	cmp	r3, #5
 80057d0:	d826      	bhi.n	8005820 <UART_SetConfig+0x1f4>
 80057d2:	a201      	add	r2, pc, #4	@ (adr r2, 80057d8 <UART_SetConfig+0x1ac>)
 80057d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d8:	080057f1 	.word	0x080057f1
 80057dc:	080057f9 	.word	0x080057f9
 80057e0:	08005801 	.word	0x08005801
 80057e4:	08005809 	.word	0x08005809
 80057e8:	08005811 	.word	0x08005811
 80057ec:	08005819 	.word	0x08005819
 80057f0:	2300      	movs	r3, #0
 80057f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057f6:	e1ec      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 80057f8:	2304      	movs	r3, #4
 80057fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057fe:	e1e8      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005800:	2308      	movs	r3, #8
 8005802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005806:	e1e4      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005808:	2310      	movs	r3, #16
 800580a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800580e:	e1e0      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005810:	2320      	movs	r3, #32
 8005812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005816:	e1dc      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005818:	2340      	movs	r3, #64	@ 0x40
 800581a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800581e:	e1d8      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005820:	2380      	movs	r3, #128	@ 0x80
 8005822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005826:	e1d4      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a4f      	ldr	r2, [pc, #316]	@ (800596c <UART_SetConfig+0x340>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d130      	bne.n	8005894 <UART_SetConfig+0x268>
 8005832:	4b4c      	ldr	r3, [pc, #304]	@ (8005964 <UART_SetConfig+0x338>)
 8005834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005836:	f003 0307 	and.w	r3, r3, #7
 800583a:	2b05      	cmp	r3, #5
 800583c:	d826      	bhi.n	800588c <UART_SetConfig+0x260>
 800583e:	a201      	add	r2, pc, #4	@ (adr r2, 8005844 <UART_SetConfig+0x218>)
 8005840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005844:	0800585d 	.word	0x0800585d
 8005848:	08005865 	.word	0x08005865
 800584c:	0800586d 	.word	0x0800586d
 8005850:	08005875 	.word	0x08005875
 8005854:	0800587d 	.word	0x0800587d
 8005858:	08005885 	.word	0x08005885
 800585c:	2300      	movs	r3, #0
 800585e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005862:	e1b6      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005864:	2304      	movs	r3, #4
 8005866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800586a:	e1b2      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 800586c:	2308      	movs	r3, #8
 800586e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005872:	e1ae      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005874:	2310      	movs	r3, #16
 8005876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800587a:	e1aa      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 800587c:	2320      	movs	r3, #32
 800587e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005882:	e1a6      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005884:	2340      	movs	r3, #64	@ 0x40
 8005886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800588a:	e1a2      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 800588c:	2380      	movs	r3, #128	@ 0x80
 800588e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005892:	e19e      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a35      	ldr	r2, [pc, #212]	@ (8005970 <UART_SetConfig+0x344>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d130      	bne.n	8005900 <UART_SetConfig+0x2d4>
 800589e:	4b31      	ldr	r3, [pc, #196]	@ (8005964 <UART_SetConfig+0x338>)
 80058a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a2:	f003 0307 	and.w	r3, r3, #7
 80058a6:	2b05      	cmp	r3, #5
 80058a8:	d826      	bhi.n	80058f8 <UART_SetConfig+0x2cc>
 80058aa:	a201      	add	r2, pc, #4	@ (adr r2, 80058b0 <UART_SetConfig+0x284>)
 80058ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b0:	080058c9 	.word	0x080058c9
 80058b4:	080058d1 	.word	0x080058d1
 80058b8:	080058d9 	.word	0x080058d9
 80058bc:	080058e1 	.word	0x080058e1
 80058c0:	080058e9 	.word	0x080058e9
 80058c4:	080058f1 	.word	0x080058f1
 80058c8:	2300      	movs	r3, #0
 80058ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ce:	e180      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 80058d0:	2304      	movs	r3, #4
 80058d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058d6:	e17c      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 80058d8:	2308      	movs	r3, #8
 80058da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058de:	e178      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 80058e0:	2310      	movs	r3, #16
 80058e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058e6:	e174      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 80058e8:	2320      	movs	r3, #32
 80058ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ee:	e170      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 80058f0:	2340      	movs	r3, #64	@ 0x40
 80058f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058f6:	e16c      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 80058f8:	2380      	movs	r3, #128	@ 0x80
 80058fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058fe:	e168      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a1b      	ldr	r2, [pc, #108]	@ (8005974 <UART_SetConfig+0x348>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d142      	bne.n	8005990 <UART_SetConfig+0x364>
 800590a:	4b16      	ldr	r3, [pc, #88]	@ (8005964 <UART_SetConfig+0x338>)
 800590c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800590e:	f003 0307 	and.w	r3, r3, #7
 8005912:	2b05      	cmp	r3, #5
 8005914:	d838      	bhi.n	8005988 <UART_SetConfig+0x35c>
 8005916:	a201      	add	r2, pc, #4	@ (adr r2, 800591c <UART_SetConfig+0x2f0>)
 8005918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591c:	08005935 	.word	0x08005935
 8005920:	0800593d 	.word	0x0800593d
 8005924:	08005945 	.word	0x08005945
 8005928:	0800594d 	.word	0x0800594d
 800592c:	08005979 	.word	0x08005979
 8005930:	08005981 	.word	0x08005981
 8005934:	2300      	movs	r3, #0
 8005936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800593a:	e14a      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 800593c:	2304      	movs	r3, #4
 800593e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005942:	e146      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005944:	2308      	movs	r3, #8
 8005946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800594a:	e142      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 800594c:	2310      	movs	r3, #16
 800594e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005952:	e13e      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005954:	cfff69f3 	.word	0xcfff69f3
 8005958:	58000c00 	.word	0x58000c00
 800595c:	11fff4ff 	.word	0x11fff4ff
 8005960:	40011000 	.word	0x40011000
 8005964:	58024400 	.word	0x58024400
 8005968:	40004400 	.word	0x40004400
 800596c:	40004800 	.word	0x40004800
 8005970:	40004c00 	.word	0x40004c00
 8005974:	40005000 	.word	0x40005000
 8005978:	2320      	movs	r3, #32
 800597a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800597e:	e128      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005980:	2340      	movs	r3, #64	@ 0x40
 8005982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005986:	e124      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005988:	2380      	movs	r3, #128	@ 0x80
 800598a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800598e:	e120      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4acb      	ldr	r2, [pc, #812]	@ (8005cc4 <UART_SetConfig+0x698>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d176      	bne.n	8005a88 <UART_SetConfig+0x45c>
 800599a:	4bcb      	ldr	r3, [pc, #812]	@ (8005cc8 <UART_SetConfig+0x69c>)
 800599c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800599e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059a2:	2b28      	cmp	r3, #40	@ 0x28
 80059a4:	d86c      	bhi.n	8005a80 <UART_SetConfig+0x454>
 80059a6:	a201      	add	r2, pc, #4	@ (adr r2, 80059ac <UART_SetConfig+0x380>)
 80059a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ac:	08005a51 	.word	0x08005a51
 80059b0:	08005a81 	.word	0x08005a81
 80059b4:	08005a81 	.word	0x08005a81
 80059b8:	08005a81 	.word	0x08005a81
 80059bc:	08005a81 	.word	0x08005a81
 80059c0:	08005a81 	.word	0x08005a81
 80059c4:	08005a81 	.word	0x08005a81
 80059c8:	08005a81 	.word	0x08005a81
 80059cc:	08005a59 	.word	0x08005a59
 80059d0:	08005a81 	.word	0x08005a81
 80059d4:	08005a81 	.word	0x08005a81
 80059d8:	08005a81 	.word	0x08005a81
 80059dc:	08005a81 	.word	0x08005a81
 80059e0:	08005a81 	.word	0x08005a81
 80059e4:	08005a81 	.word	0x08005a81
 80059e8:	08005a81 	.word	0x08005a81
 80059ec:	08005a61 	.word	0x08005a61
 80059f0:	08005a81 	.word	0x08005a81
 80059f4:	08005a81 	.word	0x08005a81
 80059f8:	08005a81 	.word	0x08005a81
 80059fc:	08005a81 	.word	0x08005a81
 8005a00:	08005a81 	.word	0x08005a81
 8005a04:	08005a81 	.word	0x08005a81
 8005a08:	08005a81 	.word	0x08005a81
 8005a0c:	08005a69 	.word	0x08005a69
 8005a10:	08005a81 	.word	0x08005a81
 8005a14:	08005a81 	.word	0x08005a81
 8005a18:	08005a81 	.word	0x08005a81
 8005a1c:	08005a81 	.word	0x08005a81
 8005a20:	08005a81 	.word	0x08005a81
 8005a24:	08005a81 	.word	0x08005a81
 8005a28:	08005a81 	.word	0x08005a81
 8005a2c:	08005a71 	.word	0x08005a71
 8005a30:	08005a81 	.word	0x08005a81
 8005a34:	08005a81 	.word	0x08005a81
 8005a38:	08005a81 	.word	0x08005a81
 8005a3c:	08005a81 	.word	0x08005a81
 8005a40:	08005a81 	.word	0x08005a81
 8005a44:	08005a81 	.word	0x08005a81
 8005a48:	08005a81 	.word	0x08005a81
 8005a4c:	08005a79 	.word	0x08005a79
 8005a50:	2301      	movs	r3, #1
 8005a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a56:	e0bc      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005a58:	2304      	movs	r3, #4
 8005a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a5e:	e0b8      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005a60:	2308      	movs	r3, #8
 8005a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a66:	e0b4      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005a68:	2310      	movs	r3, #16
 8005a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a6e:	e0b0      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005a70:	2320      	movs	r3, #32
 8005a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a76:	e0ac      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005a78:	2340      	movs	r3, #64	@ 0x40
 8005a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a7e:	e0a8      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005a80:	2380      	movs	r3, #128	@ 0x80
 8005a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a86:	e0a4      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a8f      	ldr	r2, [pc, #572]	@ (8005ccc <UART_SetConfig+0x6a0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d130      	bne.n	8005af4 <UART_SetConfig+0x4c8>
 8005a92:	4b8d      	ldr	r3, [pc, #564]	@ (8005cc8 <UART_SetConfig+0x69c>)
 8005a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a96:	f003 0307 	and.w	r3, r3, #7
 8005a9a:	2b05      	cmp	r3, #5
 8005a9c:	d826      	bhi.n	8005aec <UART_SetConfig+0x4c0>
 8005a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa4 <UART_SetConfig+0x478>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005abd 	.word	0x08005abd
 8005aa8:	08005ac5 	.word	0x08005ac5
 8005aac:	08005acd 	.word	0x08005acd
 8005ab0:	08005ad5 	.word	0x08005ad5
 8005ab4:	08005add 	.word	0x08005add
 8005ab8:	08005ae5 	.word	0x08005ae5
 8005abc:	2300      	movs	r3, #0
 8005abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ac2:	e086      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005ac4:	2304      	movs	r3, #4
 8005ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aca:	e082      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005acc:	2308      	movs	r3, #8
 8005ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ad2:	e07e      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ada:	e07a      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005adc:	2320      	movs	r3, #32
 8005ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ae2:	e076      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005ae4:	2340      	movs	r3, #64	@ 0x40
 8005ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aea:	e072      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005aec:	2380      	movs	r3, #128	@ 0x80
 8005aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005af2:	e06e      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a75      	ldr	r2, [pc, #468]	@ (8005cd0 <UART_SetConfig+0x6a4>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d130      	bne.n	8005b60 <UART_SetConfig+0x534>
 8005afe:	4b72      	ldr	r3, [pc, #456]	@ (8005cc8 <UART_SetConfig+0x69c>)
 8005b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	2b05      	cmp	r3, #5
 8005b08:	d826      	bhi.n	8005b58 <UART_SetConfig+0x52c>
 8005b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b10 <UART_SetConfig+0x4e4>)
 8005b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b10:	08005b29 	.word	0x08005b29
 8005b14:	08005b31 	.word	0x08005b31
 8005b18:	08005b39 	.word	0x08005b39
 8005b1c:	08005b41 	.word	0x08005b41
 8005b20:	08005b49 	.word	0x08005b49
 8005b24:	08005b51 	.word	0x08005b51
 8005b28:	2300      	movs	r3, #0
 8005b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b2e:	e050      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005b30:	2304      	movs	r3, #4
 8005b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b36:	e04c      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005b38:	2308      	movs	r3, #8
 8005b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b3e:	e048      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005b40:	2310      	movs	r3, #16
 8005b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b46:	e044      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005b48:	2320      	movs	r3, #32
 8005b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b4e:	e040      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005b50:	2340      	movs	r3, #64	@ 0x40
 8005b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b56:	e03c      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005b58:	2380      	movs	r3, #128	@ 0x80
 8005b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b5e:	e038      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a5b      	ldr	r2, [pc, #364]	@ (8005cd4 <UART_SetConfig+0x6a8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d130      	bne.n	8005bcc <UART_SetConfig+0x5a0>
 8005b6a:	4b57      	ldr	r3, [pc, #348]	@ (8005cc8 <UART_SetConfig+0x69c>)
 8005b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b6e:	f003 0307 	and.w	r3, r3, #7
 8005b72:	2b05      	cmp	r3, #5
 8005b74:	d826      	bhi.n	8005bc4 <UART_SetConfig+0x598>
 8005b76:	a201      	add	r2, pc, #4	@ (adr r2, 8005b7c <UART_SetConfig+0x550>)
 8005b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7c:	08005b95 	.word	0x08005b95
 8005b80:	08005b9d 	.word	0x08005b9d
 8005b84:	08005ba5 	.word	0x08005ba5
 8005b88:	08005bad 	.word	0x08005bad
 8005b8c:	08005bb5 	.word	0x08005bb5
 8005b90:	08005bbd 	.word	0x08005bbd
 8005b94:	2302      	movs	r3, #2
 8005b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b9a:	e01a      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005b9c:	2304      	movs	r3, #4
 8005b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ba2:	e016      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005ba4:	2308      	movs	r3, #8
 8005ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005baa:	e012      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005bac:	2310      	movs	r3, #16
 8005bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bb2:	e00e      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005bb4:	2320      	movs	r3, #32
 8005bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bba:	e00a      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005bbc:	2340      	movs	r3, #64	@ 0x40
 8005bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bc2:	e006      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005bc4:	2380      	movs	r3, #128	@ 0x80
 8005bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bca:	e002      	b.n	8005bd2 <UART_SetConfig+0x5a6>
 8005bcc:	2380      	movs	r3, #128	@ 0x80
 8005bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a3f      	ldr	r2, [pc, #252]	@ (8005cd4 <UART_SetConfig+0x6a8>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	f040 80f8 	bne.w	8005dce <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bde:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	dc46      	bgt.n	8005c74 <UART_SetConfig+0x648>
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	f2c0 8082 	blt.w	8005cf0 <UART_SetConfig+0x6c4>
 8005bec:	3b02      	subs	r3, #2
 8005bee:	2b1e      	cmp	r3, #30
 8005bf0:	d87e      	bhi.n	8005cf0 <UART_SetConfig+0x6c4>
 8005bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bf8 <UART_SetConfig+0x5cc>)
 8005bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf8:	08005c7b 	.word	0x08005c7b
 8005bfc:	08005cf1 	.word	0x08005cf1
 8005c00:	08005c83 	.word	0x08005c83
 8005c04:	08005cf1 	.word	0x08005cf1
 8005c08:	08005cf1 	.word	0x08005cf1
 8005c0c:	08005cf1 	.word	0x08005cf1
 8005c10:	08005c93 	.word	0x08005c93
 8005c14:	08005cf1 	.word	0x08005cf1
 8005c18:	08005cf1 	.word	0x08005cf1
 8005c1c:	08005cf1 	.word	0x08005cf1
 8005c20:	08005cf1 	.word	0x08005cf1
 8005c24:	08005cf1 	.word	0x08005cf1
 8005c28:	08005cf1 	.word	0x08005cf1
 8005c2c:	08005cf1 	.word	0x08005cf1
 8005c30:	08005ca3 	.word	0x08005ca3
 8005c34:	08005cf1 	.word	0x08005cf1
 8005c38:	08005cf1 	.word	0x08005cf1
 8005c3c:	08005cf1 	.word	0x08005cf1
 8005c40:	08005cf1 	.word	0x08005cf1
 8005c44:	08005cf1 	.word	0x08005cf1
 8005c48:	08005cf1 	.word	0x08005cf1
 8005c4c:	08005cf1 	.word	0x08005cf1
 8005c50:	08005cf1 	.word	0x08005cf1
 8005c54:	08005cf1 	.word	0x08005cf1
 8005c58:	08005cf1 	.word	0x08005cf1
 8005c5c:	08005cf1 	.word	0x08005cf1
 8005c60:	08005cf1 	.word	0x08005cf1
 8005c64:	08005cf1 	.word	0x08005cf1
 8005c68:	08005cf1 	.word	0x08005cf1
 8005c6c:	08005cf1 	.word	0x08005cf1
 8005c70:	08005ce3 	.word	0x08005ce3
 8005c74:	2b40      	cmp	r3, #64	@ 0x40
 8005c76:	d037      	beq.n	8005ce8 <UART_SetConfig+0x6bc>
 8005c78:	e03a      	b.n	8005cf0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005c7a:	f7fe fd97 	bl	80047ac <HAL_RCCEx_GetD3PCLK1Freq>
 8005c7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005c80:	e03c      	b.n	8005cfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fe fda6 	bl	80047d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c90:	e034      	b.n	8005cfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c92:	f107 0318 	add.w	r3, r7, #24
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fe fef2 	bl	8004a80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ca0:	e02c      	b.n	8005cfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ca2:	4b09      	ldr	r3, [pc, #36]	@ (8005cc8 <UART_SetConfig+0x69c>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0320 	and.w	r3, r3, #32
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d016      	beq.n	8005cdc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005cae:	4b06      	ldr	r3, [pc, #24]	@ (8005cc8 <UART_SetConfig+0x69c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	08db      	lsrs	r3, r3, #3
 8005cb4:	f003 0303 	and.w	r3, r3, #3
 8005cb8:	4a07      	ldr	r2, [pc, #28]	@ (8005cd8 <UART_SetConfig+0x6ac>)
 8005cba:	fa22 f303 	lsr.w	r3, r2, r3
 8005cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cc0:	e01c      	b.n	8005cfc <UART_SetConfig+0x6d0>
 8005cc2:	bf00      	nop
 8005cc4:	40011400 	.word	0x40011400
 8005cc8:	58024400 	.word	0x58024400
 8005ccc:	40007800 	.word	0x40007800
 8005cd0:	40007c00 	.word	0x40007c00
 8005cd4:	58000c00 	.word	0x58000c00
 8005cd8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005cdc:	4b9d      	ldr	r3, [pc, #628]	@ (8005f54 <UART_SetConfig+0x928>)
 8005cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ce0:	e00c      	b.n	8005cfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ce2:	4b9d      	ldr	r3, [pc, #628]	@ (8005f58 <UART_SetConfig+0x92c>)
 8005ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ce6:	e009      	b.n	8005cfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ce8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cee:	e005      	b.n	8005cfc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005cfa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f000 81de 	beq.w	80060c0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d08:	4a94      	ldr	r2, [pc, #592]	@ (8005f5c <UART_SetConfig+0x930>)
 8005d0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d12:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d16:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	4413      	add	r3, r2
 8005d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d305      	bcc.n	8005d34 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d903      	bls.n	8005d3c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005d3a:	e1c1      	b.n	80060c0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d3e:	2200      	movs	r2, #0
 8005d40:	60bb      	str	r3, [r7, #8]
 8005d42:	60fa      	str	r2, [r7, #12]
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d48:	4a84      	ldr	r2, [pc, #528]	@ (8005f5c <UART_SetConfig+0x930>)
 8005d4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	2200      	movs	r2, #0
 8005d52:	603b      	str	r3, [r7, #0]
 8005d54:	607a      	str	r2, [r7, #4]
 8005d56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d5e:	f7fa fabf 	bl	80002e0 <__aeabi_uldivmod>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	4610      	mov	r0, r2
 8005d68:	4619      	mov	r1, r3
 8005d6a:	f04f 0200 	mov.w	r2, #0
 8005d6e:	f04f 0300 	mov.w	r3, #0
 8005d72:	020b      	lsls	r3, r1, #8
 8005d74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d78:	0202      	lsls	r2, r0, #8
 8005d7a:	6979      	ldr	r1, [r7, #20]
 8005d7c:	6849      	ldr	r1, [r1, #4]
 8005d7e:	0849      	lsrs	r1, r1, #1
 8005d80:	2000      	movs	r0, #0
 8005d82:	460c      	mov	r4, r1
 8005d84:	4605      	mov	r5, r0
 8005d86:	eb12 0804 	adds.w	r8, r2, r4
 8005d8a:	eb43 0905 	adc.w	r9, r3, r5
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	469a      	mov	sl, r3
 8005d96:	4693      	mov	fp, r2
 8005d98:	4652      	mov	r2, sl
 8005d9a:	465b      	mov	r3, fp
 8005d9c:	4640      	mov	r0, r8
 8005d9e:	4649      	mov	r1, r9
 8005da0:	f7fa fa9e 	bl	80002e0 <__aeabi_uldivmod>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4613      	mov	r3, r2
 8005daa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005db2:	d308      	bcc.n	8005dc6 <UART_SetConfig+0x79a>
 8005db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dba:	d204      	bcs.n	8005dc6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005dc2:	60da      	str	r2, [r3, #12]
 8005dc4:	e17c      	b.n	80060c0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005dcc:	e178      	b.n	80060c0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dd6:	f040 80c5 	bne.w	8005f64 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005dda:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005dde:	2b20      	cmp	r3, #32
 8005de0:	dc48      	bgt.n	8005e74 <UART_SetConfig+0x848>
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	db7b      	blt.n	8005ede <UART_SetConfig+0x8b2>
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	d879      	bhi.n	8005ede <UART_SetConfig+0x8b2>
 8005dea:	a201      	add	r2, pc, #4	@ (adr r2, 8005df0 <UART_SetConfig+0x7c4>)
 8005dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df0:	08005e7b 	.word	0x08005e7b
 8005df4:	08005e83 	.word	0x08005e83
 8005df8:	08005edf 	.word	0x08005edf
 8005dfc:	08005edf 	.word	0x08005edf
 8005e00:	08005e8b 	.word	0x08005e8b
 8005e04:	08005edf 	.word	0x08005edf
 8005e08:	08005edf 	.word	0x08005edf
 8005e0c:	08005edf 	.word	0x08005edf
 8005e10:	08005e9b 	.word	0x08005e9b
 8005e14:	08005edf 	.word	0x08005edf
 8005e18:	08005edf 	.word	0x08005edf
 8005e1c:	08005edf 	.word	0x08005edf
 8005e20:	08005edf 	.word	0x08005edf
 8005e24:	08005edf 	.word	0x08005edf
 8005e28:	08005edf 	.word	0x08005edf
 8005e2c:	08005edf 	.word	0x08005edf
 8005e30:	08005eab 	.word	0x08005eab
 8005e34:	08005edf 	.word	0x08005edf
 8005e38:	08005edf 	.word	0x08005edf
 8005e3c:	08005edf 	.word	0x08005edf
 8005e40:	08005edf 	.word	0x08005edf
 8005e44:	08005edf 	.word	0x08005edf
 8005e48:	08005edf 	.word	0x08005edf
 8005e4c:	08005edf 	.word	0x08005edf
 8005e50:	08005edf 	.word	0x08005edf
 8005e54:	08005edf 	.word	0x08005edf
 8005e58:	08005edf 	.word	0x08005edf
 8005e5c:	08005edf 	.word	0x08005edf
 8005e60:	08005edf 	.word	0x08005edf
 8005e64:	08005edf 	.word	0x08005edf
 8005e68:	08005edf 	.word	0x08005edf
 8005e6c:	08005edf 	.word	0x08005edf
 8005e70:	08005ed1 	.word	0x08005ed1
 8005e74:	2b40      	cmp	r3, #64	@ 0x40
 8005e76:	d02e      	beq.n	8005ed6 <UART_SetConfig+0x8aa>
 8005e78:	e031      	b.n	8005ede <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e7a:	f7fd fa1f 	bl	80032bc <HAL_RCC_GetPCLK1Freq>
 8005e7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e80:	e033      	b.n	8005eea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e82:	f7fd fa31 	bl	80032e8 <HAL_RCC_GetPCLK2Freq>
 8005e86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e88:	e02f      	b.n	8005eea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fe fca2 	bl	80047d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e98:	e027      	b.n	8005eea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e9a:	f107 0318 	add.w	r3, r7, #24
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fe fdee 	bl	8004a80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ea8:	e01f      	b.n	8005eea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8005f60 <UART_SetConfig+0x934>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d009      	beq.n	8005eca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8005f60 <UART_SetConfig+0x934>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	08db      	lsrs	r3, r3, #3
 8005ebc:	f003 0303 	and.w	r3, r3, #3
 8005ec0:	4a24      	ldr	r2, [pc, #144]	@ (8005f54 <UART_SetConfig+0x928>)
 8005ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ec8:	e00f      	b.n	8005eea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005eca:	4b22      	ldr	r3, [pc, #136]	@ (8005f54 <UART_SetConfig+0x928>)
 8005ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ece:	e00c      	b.n	8005eea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ed0:	4b21      	ldr	r3, [pc, #132]	@ (8005f58 <UART_SetConfig+0x92c>)
 8005ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ed4:	e009      	b.n	8005eea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ed6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005edc:	e005      	b.n	8005eea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005ee8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 80e7 	beq.w	80060c0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef6:	4a19      	ldr	r2, [pc, #100]	@ (8005f5c <UART_SetConfig+0x930>)
 8005ef8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005efc:	461a      	mov	r2, r3
 8005efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f00:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f04:	005a      	lsls	r2, r3, #1
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	085b      	lsrs	r3, r3, #1
 8005f0c:	441a      	add	r2, r3
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f16:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f1a:	2b0f      	cmp	r3, #15
 8005f1c:	d916      	bls.n	8005f4c <UART_SetConfig+0x920>
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f24:	d212      	bcs.n	8005f4c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	f023 030f 	bic.w	r3, r3, #15
 8005f2e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f32:	085b      	lsrs	r3, r3, #1
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	f003 0307 	and.w	r3, r3, #7
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005f48:	60da      	str	r2, [r3, #12]
 8005f4a:	e0b9      	b.n	80060c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005f52:	e0b5      	b.n	80060c0 <UART_SetConfig+0xa94>
 8005f54:	03d09000 	.word	0x03d09000
 8005f58:	003d0900 	.word	0x003d0900
 8005f5c:	08009ba0 	.word	0x08009ba0
 8005f60:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f64:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005f68:	2b20      	cmp	r3, #32
 8005f6a:	dc49      	bgt.n	8006000 <UART_SetConfig+0x9d4>
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	db7c      	blt.n	800606a <UART_SetConfig+0xa3e>
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d87a      	bhi.n	800606a <UART_SetConfig+0xa3e>
 8005f74:	a201      	add	r2, pc, #4	@ (adr r2, 8005f7c <UART_SetConfig+0x950>)
 8005f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7a:	bf00      	nop
 8005f7c:	08006007 	.word	0x08006007
 8005f80:	0800600f 	.word	0x0800600f
 8005f84:	0800606b 	.word	0x0800606b
 8005f88:	0800606b 	.word	0x0800606b
 8005f8c:	08006017 	.word	0x08006017
 8005f90:	0800606b 	.word	0x0800606b
 8005f94:	0800606b 	.word	0x0800606b
 8005f98:	0800606b 	.word	0x0800606b
 8005f9c:	08006027 	.word	0x08006027
 8005fa0:	0800606b 	.word	0x0800606b
 8005fa4:	0800606b 	.word	0x0800606b
 8005fa8:	0800606b 	.word	0x0800606b
 8005fac:	0800606b 	.word	0x0800606b
 8005fb0:	0800606b 	.word	0x0800606b
 8005fb4:	0800606b 	.word	0x0800606b
 8005fb8:	0800606b 	.word	0x0800606b
 8005fbc:	08006037 	.word	0x08006037
 8005fc0:	0800606b 	.word	0x0800606b
 8005fc4:	0800606b 	.word	0x0800606b
 8005fc8:	0800606b 	.word	0x0800606b
 8005fcc:	0800606b 	.word	0x0800606b
 8005fd0:	0800606b 	.word	0x0800606b
 8005fd4:	0800606b 	.word	0x0800606b
 8005fd8:	0800606b 	.word	0x0800606b
 8005fdc:	0800606b 	.word	0x0800606b
 8005fe0:	0800606b 	.word	0x0800606b
 8005fe4:	0800606b 	.word	0x0800606b
 8005fe8:	0800606b 	.word	0x0800606b
 8005fec:	0800606b 	.word	0x0800606b
 8005ff0:	0800606b 	.word	0x0800606b
 8005ff4:	0800606b 	.word	0x0800606b
 8005ff8:	0800606b 	.word	0x0800606b
 8005ffc:	0800605d 	.word	0x0800605d
 8006000:	2b40      	cmp	r3, #64	@ 0x40
 8006002:	d02e      	beq.n	8006062 <UART_SetConfig+0xa36>
 8006004:	e031      	b.n	800606a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006006:	f7fd f959 	bl	80032bc <HAL_RCC_GetPCLK1Freq>
 800600a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800600c:	e033      	b.n	8006076 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800600e:	f7fd f96b 	bl	80032e8 <HAL_RCC_GetPCLK2Freq>
 8006012:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006014:	e02f      	b.n	8006076 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006016:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800601a:	4618      	mov	r0, r3
 800601c:	f7fe fbdc 	bl	80047d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006024:	e027      	b.n	8006076 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006026:	f107 0318 	add.w	r3, r7, #24
 800602a:	4618      	mov	r0, r3
 800602c:	f7fe fd28 	bl	8004a80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006034:	e01f      	b.n	8006076 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006036:	4b2d      	ldr	r3, [pc, #180]	@ (80060ec <UART_SetConfig+0xac0>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0320 	and.w	r3, r3, #32
 800603e:	2b00      	cmp	r3, #0
 8006040:	d009      	beq.n	8006056 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006042:	4b2a      	ldr	r3, [pc, #168]	@ (80060ec <UART_SetConfig+0xac0>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	08db      	lsrs	r3, r3, #3
 8006048:	f003 0303 	and.w	r3, r3, #3
 800604c:	4a28      	ldr	r2, [pc, #160]	@ (80060f0 <UART_SetConfig+0xac4>)
 800604e:	fa22 f303 	lsr.w	r3, r2, r3
 8006052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006054:	e00f      	b.n	8006076 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006056:	4b26      	ldr	r3, [pc, #152]	@ (80060f0 <UART_SetConfig+0xac4>)
 8006058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800605a:	e00c      	b.n	8006076 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800605c:	4b25      	ldr	r3, [pc, #148]	@ (80060f4 <UART_SetConfig+0xac8>)
 800605e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006060:	e009      	b.n	8006076 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006062:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006068:	e005      	b.n	8006076 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800606a:	2300      	movs	r3, #0
 800606c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006074:	bf00      	nop
    }

    if (pclk != 0U)
 8006076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006078:	2b00      	cmp	r3, #0
 800607a:	d021      	beq.n	80060c0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006080:	4a1d      	ldr	r2, [pc, #116]	@ (80060f8 <UART_SetConfig+0xacc>)
 8006082:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006086:	461a      	mov	r2, r3
 8006088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800608a:	fbb3 f2f2 	udiv	r2, r3, r2
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	085b      	lsrs	r3, r3, #1
 8006094:	441a      	add	r2, r3
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	fbb2 f3f3 	udiv	r3, r2, r3
 800609e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a2:	2b0f      	cmp	r3, #15
 80060a4:	d909      	bls.n	80060ba <UART_SetConfig+0xa8e>
 80060a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060ac:	d205      	bcs.n	80060ba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	60da      	str	r2, [r3, #12]
 80060b8:	e002      	b.n	80060c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	2200      	movs	r2, #0
 80060d4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2200      	movs	r2, #0
 80060da:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80060dc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3748      	adds	r7, #72	@ 0x48
 80060e4:	46bd      	mov	sp, r7
 80060e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060ea:	bf00      	nop
 80060ec:	58024400 	.word	0x58024400
 80060f0:	03d09000 	.word	0x03d09000
 80060f4:	003d0900 	.word	0x003d0900
 80060f8:	08009ba0 	.word	0x08009ba0

080060fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006108:	f003 0308 	and.w	r3, r3, #8
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00a      	beq.n	8006126 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	430a      	orrs	r2, r1
 8006124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00a      	beq.n	8006148 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00a      	beq.n	800616a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800616e:	f003 0304 	and.w	r3, r3, #4
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00a      	beq.n	800618c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006190:	f003 0310 	and.w	r3, r3, #16
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00a      	beq.n	80061ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b2:	f003 0320 	and.w	r3, r3, #32
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d01a      	beq.n	8006212 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061fa:	d10a      	bne.n	8006212 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00a      	beq.n	8006234 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	605a      	str	r2, [r3, #4]
  }
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b098      	sub	sp, #96	@ 0x60
 8006244:	af02      	add	r7, sp, #8
 8006246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006250:	f7fa ffb8 	bl	80011c4 <HAL_GetTick>
 8006254:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0308 	and.w	r3, r3, #8
 8006260:	2b08      	cmp	r3, #8
 8006262:	d12f      	bne.n	80062c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006264:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800626c:	2200      	movs	r2, #0
 800626e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f88e 	bl	8006394 <UART_WaitOnFlagUntilTimeout>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d022      	beq.n	80062c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006286:	e853 3f00 	ldrex	r3, [r3]
 800628a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800628c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800628e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006292:	653b      	str	r3, [r7, #80]	@ 0x50
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	461a      	mov	r2, r3
 800629a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800629c:	647b      	str	r3, [r7, #68]	@ 0x44
 800629e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062a4:	e841 2300 	strex	r3, r2, [r1]
 80062a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1e6      	bne.n	800627e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2220      	movs	r2, #32
 80062b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e063      	b.n	800638c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0304 	and.w	r3, r3, #4
 80062ce:	2b04      	cmp	r3, #4
 80062d0:	d149      	bne.n	8006366 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062da:	2200      	movs	r2, #0
 80062dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 f857 	bl	8006394 <UART_WaitOnFlagUntilTimeout>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d03c      	beq.n	8006366 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	623b      	str	r3, [r7, #32]
   return(result);
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006300:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800630a:	633b      	str	r3, [r7, #48]	@ 0x30
 800630c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1e6      	bne.n	80062ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3308      	adds	r3, #8
 8006324:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	e853 3f00 	ldrex	r3, [r3]
 800632c:	60fb      	str	r3, [r7, #12]
   return(result);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f023 0301 	bic.w	r3, r3, #1
 8006334:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3308      	adds	r3, #8
 800633c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800633e:	61fa      	str	r2, [r7, #28]
 8006340:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006342:	69b9      	ldr	r1, [r7, #24]
 8006344:	69fa      	ldr	r2, [r7, #28]
 8006346:	e841 2300 	strex	r3, r2, [r1]
 800634a:	617b      	str	r3, [r7, #20]
   return(result);
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1e5      	bne.n	800631e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2220      	movs	r2, #32
 8006356:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e012      	b.n	800638c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2220      	movs	r2, #32
 800636a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2220      	movs	r2, #32
 8006372:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3758      	adds	r7, #88	@ 0x58
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	4613      	mov	r3, r2
 80063a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063a4:	e04f      	b.n	8006446 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063ac:	d04b      	beq.n	8006446 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ae:	f7fa ff09 	bl	80011c4 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d302      	bcc.n	80063c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e04e      	b.n	8006466 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0304 	and.w	r3, r3, #4
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d037      	beq.n	8006446 <UART_WaitOnFlagUntilTimeout+0xb2>
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2b80      	cmp	r3, #128	@ 0x80
 80063da:	d034      	beq.n	8006446 <UART_WaitOnFlagUntilTimeout+0xb2>
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2b40      	cmp	r3, #64	@ 0x40
 80063e0:	d031      	beq.n	8006446 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69db      	ldr	r3, [r3, #28]
 80063e8:	f003 0308 	and.w	r3, r3, #8
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d110      	bne.n	8006412 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2208      	movs	r2, #8
 80063f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 f839 	bl	8006470 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2208      	movs	r2, #8
 8006402:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e029      	b.n	8006466 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800641c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006420:	d111      	bne.n	8006446 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800642a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 f81f 	bl	8006470 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2220      	movs	r2, #32
 8006436:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e00f      	b.n	8006466 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69da      	ldr	r2, [r3, #28]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4013      	ands	r3, r2
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	429a      	cmp	r2, r3
 8006454:	bf0c      	ite	eq
 8006456:	2301      	moveq	r3, #1
 8006458:	2300      	movne	r3, #0
 800645a:	b2db      	uxtb	r3, r3
 800645c:	461a      	mov	r2, r3
 800645e:	79fb      	ldrb	r3, [r7, #7]
 8006460:	429a      	cmp	r2, r3
 8006462:	d0a0      	beq.n	80063a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
	...

08006470 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006470:	b480      	push	{r7}
 8006472:	b095      	sub	sp, #84	@ 0x54
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006480:	e853 3f00 	ldrex	r3, [r3]
 8006484:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006488:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800648c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	461a      	mov	r2, r3
 8006494:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006496:	643b      	str	r3, [r7, #64]	@ 0x40
 8006498:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800649c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800649e:	e841 2300 	strex	r3, r2, [r1]
 80064a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80064a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1e6      	bne.n	8006478 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	3308      	adds	r3, #8
 80064b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	e853 3f00 	ldrex	r3, [r3]
 80064b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80064ba:	69fa      	ldr	r2, [r7, #28]
 80064bc:	4b1e      	ldr	r3, [pc, #120]	@ (8006538 <UART_EndRxTransfer+0xc8>)
 80064be:	4013      	ands	r3, r2
 80064c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3308      	adds	r3, #8
 80064c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064d2:	e841 2300 	strex	r3, r2, [r1]
 80064d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1e5      	bne.n	80064aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d118      	bne.n	8006518 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	e853 3f00 	ldrex	r3, [r3]
 80064f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f023 0310 	bic.w	r3, r3, #16
 80064fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	461a      	mov	r2, r3
 8006502:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006504:	61bb      	str	r3, [r7, #24]
 8006506:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006508:	6979      	ldr	r1, [r7, #20]
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	e841 2300 	strex	r3, r2, [r1]
 8006510:	613b      	str	r3, [r7, #16]
   return(result);
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1e6      	bne.n	80064e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2220      	movs	r2, #32
 800651c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800652c:	bf00      	nop
 800652e:	3754      	adds	r7, #84	@ 0x54
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	effffffe 	.word	0xeffffffe

0800653c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800654a:	2b01      	cmp	r3, #1
 800654c:	d101      	bne.n	8006552 <HAL_UARTEx_DisableFifoMode+0x16>
 800654e:	2302      	movs	r3, #2
 8006550:	e027      	b.n	80065a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2224      	movs	r2, #36	@ 0x24
 800655e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f022 0201 	bic.w	r2, r2, #1
 8006578:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006580:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2220      	movs	r2, #32
 8006594:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b084      	sub	sp, #16
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d101      	bne.n	80065c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80065c2:	2302      	movs	r3, #2
 80065c4:	e02d      	b.n	8006622 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2224      	movs	r2, #36	@ 0x24
 80065d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 0201 	bic.w	r2, r2, #1
 80065ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f850 	bl	80066a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2220      	movs	r2, #32
 8006614:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b084      	sub	sp, #16
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800663a:	2b01      	cmp	r3, #1
 800663c:	d101      	bne.n	8006642 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800663e:	2302      	movs	r3, #2
 8006640:	e02d      	b.n	800669e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2224      	movs	r2, #36	@ 0x24
 800664e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0201 	bic.w	r2, r2, #1
 8006668:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f812 	bl	80066a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2220      	movs	r2, #32
 8006690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d108      	bne.n	80066ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80066c8:	e031      	b.n	800672e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80066ca:	2310      	movs	r3, #16
 80066cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80066ce:	2310      	movs	r3, #16
 80066d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	0e5b      	lsrs	r3, r3, #25
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	f003 0307 	and.w	r3, r3, #7
 80066e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	0f5b      	lsrs	r3, r3, #29
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	f003 0307 	and.w	r3, r3, #7
 80066f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066f2:	7bbb      	ldrb	r3, [r7, #14]
 80066f4:	7b3a      	ldrb	r2, [r7, #12]
 80066f6:	4911      	ldr	r1, [pc, #68]	@ (800673c <UARTEx_SetNbDataToProcess+0x94>)
 80066f8:	5c8a      	ldrb	r2, [r1, r2]
 80066fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80066fe:	7b3a      	ldrb	r2, [r7, #12]
 8006700:	490f      	ldr	r1, [pc, #60]	@ (8006740 <UARTEx_SetNbDataToProcess+0x98>)
 8006702:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006704:	fb93 f3f2 	sdiv	r3, r3, r2
 8006708:	b29a      	uxth	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006710:	7bfb      	ldrb	r3, [r7, #15]
 8006712:	7b7a      	ldrb	r2, [r7, #13]
 8006714:	4909      	ldr	r1, [pc, #36]	@ (800673c <UARTEx_SetNbDataToProcess+0x94>)
 8006716:	5c8a      	ldrb	r2, [r1, r2]
 8006718:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800671c:	7b7a      	ldrb	r2, [r7, #13]
 800671e:	4908      	ldr	r1, [pc, #32]	@ (8006740 <UARTEx_SetNbDataToProcess+0x98>)
 8006720:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006722:	fb93 f3f2 	sdiv	r3, r3, r2
 8006726:	b29a      	uxth	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800672e:	bf00      	nop
 8006730:	3714      	adds	r7, #20
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	08009bb8 	.word	0x08009bb8
 8006740:	08009bc0 	.word	0x08009bc0

08006744 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006744:	b084      	sub	sp, #16
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	f107 001c 	add.w	r0, r7, #28
 8006752:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006756:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800675a:	2b01      	cmp	r3, #1
 800675c:	d121      	bne.n	80067a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006762:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68da      	ldr	r2, [r3, #12]
 800676e:	4b2c      	ldr	r3, [pc, #176]	@ (8006820 <USB_CoreInit+0xdc>)
 8006770:	4013      	ands	r3, r2
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006782:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006786:	2b01      	cmp	r3, #1
 8006788:	d105      	bne.n	8006796 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 faaa 	bl	8006cf0 <USB_CoreReset>
 800679c:	4603      	mov	r3, r0
 800679e:	73fb      	strb	r3, [r7, #15]
 80067a0:	e01b      	b.n	80067da <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fa9e 	bl	8006cf0 <USB_CoreReset>
 80067b4:	4603      	mov	r3, r0
 80067b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80067b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d106      	bne.n	80067ce <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80067cc:	e005      	b.n	80067da <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80067da:	7fbb      	ldrb	r3, [r7, #30]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d116      	bne.n	800680e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80067ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006824 <USB_CoreInit+0xe0>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f043 0206 	orr.w	r2, r3, #6
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f043 0220 	orr.w	r2, r3, #32
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800680e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800681a:	b004      	add	sp, #16
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	ffbdffbf 	.word	0xffbdffbf
 8006824:	03ee0000 	.word	0x03ee0000

08006828 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f023 0201 	bic.w	r2, r3, #1
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b084      	sub	sp, #16
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	460b      	mov	r3, r1
 8006854:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006866:	78fb      	ldrb	r3, [r7, #3]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d115      	bne.n	8006898 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006878:	200a      	movs	r0, #10
 800687a:	f7fa fcaf 	bl	80011dc <HAL_Delay>
      ms += 10U;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	330a      	adds	r3, #10
 8006882:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fa25 	bl	8006cd4 <USB_GetMode>
 800688a:	4603      	mov	r3, r0
 800688c:	2b01      	cmp	r3, #1
 800688e:	d01e      	beq.n	80068ce <USB_SetCurrentMode+0x84>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2bc7      	cmp	r3, #199	@ 0xc7
 8006894:	d9f0      	bls.n	8006878 <USB_SetCurrentMode+0x2e>
 8006896:	e01a      	b.n	80068ce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006898:	78fb      	ldrb	r3, [r7, #3]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d115      	bne.n	80068ca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80068aa:	200a      	movs	r0, #10
 80068ac:	f7fa fc96 	bl	80011dc <HAL_Delay>
      ms += 10U;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	330a      	adds	r3, #10
 80068b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fa0c 	bl	8006cd4 <USB_GetMode>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d005      	beq.n	80068ce <USB_SetCurrentMode+0x84>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2bc7      	cmp	r3, #199	@ 0xc7
 80068c6:	d9f0      	bls.n	80068aa <USB_SetCurrentMode+0x60>
 80068c8:	e001      	b.n	80068ce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e005      	b.n	80068da <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2bc8      	cmp	r3, #200	@ 0xc8
 80068d2:	d101      	bne.n	80068d8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e000      	b.n	80068da <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
	...

080068e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068e4:	b084      	sub	sp, #16
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b086      	sub	sp, #24
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80068f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80068fe:	2300      	movs	r3, #0
 8006900:	613b      	str	r3, [r7, #16]
 8006902:	e009      	b.n	8006918 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	3340      	adds	r3, #64	@ 0x40
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	2200      	movs	r2, #0
 8006910:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	3301      	adds	r3, #1
 8006916:	613b      	str	r3, [r7, #16]
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	2b0e      	cmp	r3, #14
 800691c:	d9f2      	bls.n	8006904 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800691e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006922:	2b00      	cmp	r3, #0
 8006924:	d11c      	bne.n	8006960 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006934:	f043 0302 	orr.w	r3, r3, #2
 8006938:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800693e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	e005      	b.n	800696c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006964:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006972:	461a      	mov	r2, r3
 8006974:	2300      	movs	r3, #0
 8006976:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006978:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800697c:	2b01      	cmp	r3, #1
 800697e:	d10d      	bne.n	800699c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006980:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006984:	2b00      	cmp	r3, #0
 8006986:	d104      	bne.n	8006992 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006988:	2100      	movs	r1, #0
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f968 	bl	8006c60 <USB_SetDevSpeed>
 8006990:	e008      	b.n	80069a4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006992:	2101      	movs	r1, #1
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f963 	bl	8006c60 <USB_SetDevSpeed>
 800699a:	e003      	b.n	80069a4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800699c:	2103      	movs	r1, #3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f95e 	bl	8006c60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069a4:	2110      	movs	r1, #16
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f8fa 	bl	8006ba0 <USB_FlushTxFifo>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f924 	bl	8006c04 <USB_FlushRxFifo>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069cc:	461a      	mov	r2, r3
 80069ce:	2300      	movs	r3, #0
 80069d0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069d8:	461a      	mov	r2, r3
 80069da:	2300      	movs	r3, #0
 80069dc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069e4:	461a      	mov	r2, r3
 80069e6:	2300      	movs	r3, #0
 80069e8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069ea:	2300      	movs	r3, #0
 80069ec:	613b      	str	r3, [r7, #16]
 80069ee:	e043      	b.n	8006a78 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a06:	d118      	bne.n	8006a3a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10a      	bne.n	8006a24 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006a20:	6013      	str	r3, [r2, #0]
 8006a22:	e013      	b.n	8006a4c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a30:	461a      	mov	r2, r3
 8006a32:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006a36:	6013      	str	r3, [r2, #0]
 8006a38:	e008      	b.n	8006a4c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a46:	461a      	mov	r2, r3
 8006a48:	2300      	movs	r3, #0
 8006a4a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a58:	461a      	mov	r2, r3
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	3301      	adds	r3, #1
 8006a76:	613b      	str	r3, [r7, #16]
 8006a78:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d3b5      	bcc.n	80069f0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a84:	2300      	movs	r3, #0
 8006a86:	613b      	str	r3, [r7, #16]
 8006a88:	e043      	b.n	8006b12 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006aa0:	d118      	bne.n	8006ad4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10a      	bne.n	8006abe <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006aba:	6013      	str	r3, [r2, #0]
 8006abc:	e013      	b.n	8006ae6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aca:	461a      	mov	r2, r3
 8006acc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006ad0:	6013      	str	r3, [r2, #0]
 8006ad2:	e008      	b.n	8006ae6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	015a      	lsls	r2, r3, #5
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006af2:	461a      	mov	r2, r3
 8006af4:	2300      	movs	r3, #0
 8006af6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b04:	461a      	mov	r2, r3
 8006b06:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006b0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	613b      	str	r3, [r7, #16]
 8006b12:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006b16:	461a      	mov	r2, r3
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d3b5      	bcc.n	8006a8a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b30:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006b3e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d105      	bne.n	8006b54 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	f043 0210 	orr.w	r2, r3, #16
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	699a      	ldr	r2, [r3, #24]
 8006b58:	4b0f      	ldr	r3, [pc, #60]	@ (8006b98 <USB_DevInit+0x2b4>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b60:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d005      	beq.n	8006b74 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	f043 0208 	orr.w	r2, r3, #8
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b74:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d105      	bne.n	8006b88 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	699a      	ldr	r2, [r3, #24]
 8006b80:	4b06      	ldr	r3, [pc, #24]	@ (8006b9c <USB_DevInit+0x2b8>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b94:	b004      	add	sp, #16
 8006b96:	4770      	bx	lr
 8006b98:	803c3800 	.word	0x803c3800
 8006b9c:	40000004 	.word	0x40000004

08006ba0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006baa:	2300      	movs	r3, #0
 8006bac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bba:	d901      	bls.n	8006bc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e01b      	b.n	8006bf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	daf2      	bge.n	8006bae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	019b      	lsls	r3, r3, #6
 8006bd0:	f043 0220 	orr.w	r2, r3, #32
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006be4:	d901      	bls.n	8006bea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e006      	b.n	8006bf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	f003 0320 	and.w	r3, r3, #32
 8006bf2:	2b20      	cmp	r3, #32
 8006bf4:	d0f0      	beq.n	8006bd8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	3301      	adds	r3, #1
 8006c14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c1c:	d901      	bls.n	8006c22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e018      	b.n	8006c54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	daf2      	bge.n	8006c10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2210      	movs	r2, #16
 8006c32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	3301      	adds	r3, #1
 8006c38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c40:	d901      	bls.n	8006c46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e006      	b.n	8006c54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	f003 0310 	and.w	r3, r3, #16
 8006c4e:	2b10      	cmp	r3, #16
 8006c50:	d0f0      	beq.n	8006c34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3714      	adds	r7, #20
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	78fb      	ldrb	r3, [r7, #3]
 8006c7a:	68f9      	ldr	r1, [r7, #12]
 8006c7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c80:	4313      	orrs	r3, r2
 8006c82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b085      	sub	sp, #20
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006cac:	f023 0303 	bic.w	r3, r3, #3
 8006cb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cc0:	f043 0302 	orr.w	r3, r3, #2
 8006cc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	f003 0301 	and.w	r3, r3, #1
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d08:	d901      	bls.n	8006d0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e01b      	b.n	8006d46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	daf2      	bge.n	8006cfc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	f043 0201 	orr.w	r2, r3, #1
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d32:	d901      	bls.n	8006d38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e006      	b.n	8006d46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	f003 0301 	and.w	r3, r3, #1
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d0f0      	beq.n	8006d26 <USB_CoreReset+0x36>

  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
	...

08006d54 <__NVIC_SetPriority>:
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	6039      	str	r1, [r7, #0]
 8006d5e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006d60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	db0a      	blt.n	8006d7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	490c      	ldr	r1, [pc, #48]	@ (8006da0 <__NVIC_SetPriority+0x4c>)
 8006d6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d72:	0112      	lsls	r2, r2, #4
 8006d74:	b2d2      	uxtb	r2, r2
 8006d76:	440b      	add	r3, r1
 8006d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006d7c:	e00a      	b.n	8006d94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	4908      	ldr	r1, [pc, #32]	@ (8006da4 <__NVIC_SetPriority+0x50>)
 8006d84:	88fb      	ldrh	r3, [r7, #6]
 8006d86:	f003 030f 	and.w	r3, r3, #15
 8006d8a:	3b04      	subs	r3, #4
 8006d8c:	0112      	lsls	r2, r2, #4
 8006d8e:	b2d2      	uxtb	r2, r2
 8006d90:	440b      	add	r3, r1
 8006d92:	761a      	strb	r2, [r3, #24]
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	e000e100 	.word	0xe000e100
 8006da4:	e000ed00 	.word	0xe000ed00

08006da8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006da8:	b580      	push	{r7, lr}
 8006daa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006dac:	4b05      	ldr	r3, [pc, #20]	@ (8006dc4 <SysTick_Handler+0x1c>)
 8006dae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006db0:	f001 fd46 	bl	8008840 <xTaskGetSchedulerState>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d001      	beq.n	8006dbe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006dba:	f002 fb3d 	bl	8009438 <xPortSysTickHandler>
  }
}
 8006dbe:	bf00      	nop
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	e000e010 	.word	0xe000e010

08006dc8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006dcc:	2100      	movs	r1, #0
 8006dce:	f06f 0004 	mvn.w	r0, #4
 8006dd2:	f7ff ffbf 	bl	8006d54 <__NVIC_SetPriority>
#endif
}
 8006dd6:	bf00      	nop
 8006dd8:	bd80      	pop	{r7, pc}
	...

08006ddc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006de2:	f3ef 8305 	mrs	r3, IPSR
 8006de6:	603b      	str	r3, [r7, #0]
  return(result);
 8006de8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006dee:	f06f 0305 	mvn.w	r3, #5
 8006df2:	607b      	str	r3, [r7, #4]
 8006df4:	e00c      	b.n	8006e10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006df6:	4b0a      	ldr	r3, [pc, #40]	@ (8006e20 <osKernelInitialize+0x44>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d105      	bne.n	8006e0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006dfe:	4b08      	ldr	r3, [pc, #32]	@ (8006e20 <osKernelInitialize+0x44>)
 8006e00:	2201      	movs	r2, #1
 8006e02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	607b      	str	r3, [r7, #4]
 8006e08:	e002      	b.n	8006e10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006e0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e10:	687b      	ldr	r3, [r7, #4]
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	24000800 	.word	0x24000800

08006e24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e2a:	f3ef 8305 	mrs	r3, IPSR
 8006e2e:	603b      	str	r3, [r7, #0]
  return(result);
 8006e30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d003      	beq.n	8006e3e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006e36:	f06f 0305 	mvn.w	r3, #5
 8006e3a:	607b      	str	r3, [r7, #4]
 8006e3c:	e010      	b.n	8006e60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e6c <osKernelStart+0x48>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d109      	bne.n	8006e5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006e46:	f7ff ffbf 	bl	8006dc8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006e4a:	4b08      	ldr	r3, [pc, #32]	@ (8006e6c <osKernelStart+0x48>)
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006e50:	f001 f892 	bl	8007f78 <vTaskStartScheduler>
      stat = osOK;
 8006e54:	2300      	movs	r3, #0
 8006e56:	607b      	str	r3, [r7, #4]
 8006e58:	e002      	b.n	8006e60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006e5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e60:	687b      	ldr	r3, [r7, #4]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	24000800 	.word	0x24000800

08006e70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b08e      	sub	sp, #56	@ 0x38
 8006e74:	af04      	add	r7, sp, #16
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e80:	f3ef 8305 	mrs	r3, IPSR
 8006e84:	617b      	str	r3, [r7, #20]
  return(result);
 8006e86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d17e      	bne.n	8006f8a <osThreadNew+0x11a>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d07b      	beq.n	8006f8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006e92:	2380      	movs	r3, #128	@ 0x80
 8006e94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006e96:	2318      	movs	r3, #24
 8006e98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006e9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006ea2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d045      	beq.n	8006f36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d002      	beq.n	8006eb8 <osThreadNew+0x48>
        name = attr->name;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d002      	beq.n	8006ec6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d008      	beq.n	8006ede <osThreadNew+0x6e>
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	2b38      	cmp	r3, #56	@ 0x38
 8006ed0:	d805      	bhi.n	8006ede <osThreadNew+0x6e>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <osThreadNew+0x72>
        return (NULL);
 8006ede:	2300      	movs	r3, #0
 8006ee0:	e054      	b.n	8006f8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	089b      	lsrs	r3, r3, #2
 8006ef0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00e      	beq.n	8006f18 <osThreadNew+0xa8>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	2ba7      	cmp	r3, #167	@ 0xa7
 8006f00:	d90a      	bls.n	8006f18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d006      	beq.n	8006f18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d002      	beq.n	8006f18 <osThreadNew+0xa8>
        mem = 1;
 8006f12:	2301      	movs	r3, #1
 8006f14:	61bb      	str	r3, [r7, #24]
 8006f16:	e010      	b.n	8006f3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10c      	bne.n	8006f3a <osThreadNew+0xca>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d108      	bne.n	8006f3a <osThreadNew+0xca>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d104      	bne.n	8006f3a <osThreadNew+0xca>
          mem = 0;
 8006f30:	2300      	movs	r3, #0
 8006f32:	61bb      	str	r3, [r7, #24]
 8006f34:	e001      	b.n	8006f3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006f36:	2300      	movs	r3, #0
 8006f38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d110      	bne.n	8006f62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f48:	9202      	str	r2, [sp, #8]
 8006f4a:	9301      	str	r3, [sp, #4]
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	6a3a      	ldr	r2, [r7, #32]
 8006f54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f000 fe1a 	bl	8007b90 <xTaskCreateStatic>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	613b      	str	r3, [r7, #16]
 8006f60:	e013      	b.n	8006f8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d110      	bne.n	8006f8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	f107 0310 	add.w	r3, r7, #16
 8006f70:	9301      	str	r3, [sp, #4]
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 fe68 	bl	8007c50 <xTaskCreate>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d001      	beq.n	8006f8a <osThreadNew+0x11a>
            hTask = NULL;
 8006f86:	2300      	movs	r3, #0
 8006f88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006f8a:	693b      	ldr	r3, [r7, #16]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3728      	adds	r7, #40	@ 0x28
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f9c:	f3ef 8305 	mrs	r3, IPSR
 8006fa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006fa2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d003      	beq.n	8006fb0 <osDelay+0x1c>
    stat = osErrorISR;
 8006fa8:	f06f 0305 	mvn.w	r3, #5
 8006fac:	60fb      	str	r3, [r7, #12]
 8006fae:	e007      	b.n	8006fc0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d002      	beq.n	8006fc0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 ffa6 	bl	8007f0c <vTaskDelay>
    }
  }

  return (stat);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
	...

08006fcc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	4a07      	ldr	r2, [pc, #28]	@ (8006ff8 <vApplicationGetIdleTaskMemory+0x2c>)
 8006fdc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	4a06      	ldr	r2, [pc, #24]	@ (8006ffc <vApplicationGetIdleTaskMemory+0x30>)
 8006fe2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2280      	movs	r2, #128	@ 0x80
 8006fe8:	601a      	str	r2, [r3, #0]
}
 8006fea:	bf00      	nop
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	24000804 	.word	0x24000804
 8006ffc:	240008ac 	.word	0x240008ac

08007000 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	4a07      	ldr	r2, [pc, #28]	@ (800702c <vApplicationGetTimerTaskMemory+0x2c>)
 8007010:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	4a06      	ldr	r2, [pc, #24]	@ (8007030 <vApplicationGetTimerTaskMemory+0x30>)
 8007016:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800701e:	601a      	str	r2, [r3, #0]
}
 8007020:	bf00      	nop
 8007022:	3714      	adds	r7, #20
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	24000aac 	.word	0x24000aac
 8007030:	24000b54 	.word	0x24000b54

08007034 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f103 0208 	add.w	r2, r3, #8
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800704c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f103 0208 	add.w	r2, r3, #8
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f103 0208 	add.w	r2, r3, #8
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007082:	bf00      	nop
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800708e:	b480      	push	{r7}
 8007090:	b085      	sub	sp, #20
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
 8007096:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	683a      	ldr	r2, [r7, #0]
 80070b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	601a      	str	r2, [r3, #0]
}
 80070ca:	bf00      	nop
 80070cc:	3714      	adds	r7, #20
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070d6:	b480      	push	{r7}
 80070d8:	b085      	sub	sp, #20
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070ec:	d103      	bne.n	80070f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	60fb      	str	r3, [r7, #12]
 80070f4:	e00c      	b.n	8007110 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	3308      	adds	r3, #8
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	e002      	b.n	8007104 <vListInsert+0x2e>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	429a      	cmp	r2, r3
 800710e:	d2f6      	bcs.n	80070fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	685a      	ldr	r2, [r3, #4]
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	683a      	ldr	r2, [r7, #0]
 800711e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	683a      	ldr	r2, [r7, #0]
 800712a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	1c5a      	adds	r2, r3, #1
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	601a      	str	r2, [r3, #0]
}
 800713c:	bf00      	nop
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	6892      	ldr	r2, [r2, #8]
 800715e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	6852      	ldr	r2, [r2, #4]
 8007168:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	429a      	cmp	r2, r3
 8007172:	d103      	bne.n	800717c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	1e5a      	subs	r2, r3, #1
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10b      	bne.n	80071c8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80071b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b4:	f383 8811 	msr	BASEPRI, r3
 80071b8:	f3bf 8f6f 	isb	sy
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80071c2:	bf00      	nop
 80071c4:	bf00      	nop
 80071c6:	e7fd      	b.n	80071c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80071c8:	f002 f8a6 	bl	8009318 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071d4:	68f9      	ldr	r1, [r7, #12]
 80071d6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80071d8:	fb01 f303 	mul.w	r3, r1, r3
 80071dc:	441a      	add	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071f8:	3b01      	subs	r3, #1
 80071fa:	68f9      	ldr	r1, [r7, #12]
 80071fc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80071fe:	fb01 f303 	mul.w	r3, r1, r3
 8007202:	441a      	add	r2, r3
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	22ff      	movs	r2, #255	@ 0xff
 800720c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	22ff      	movs	r2, #255	@ 0xff
 8007214:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d114      	bne.n	8007248 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d01a      	beq.n	800725c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	3310      	adds	r3, #16
 800722a:	4618      	mov	r0, r3
 800722c:	f001 f942 	bl	80084b4 <xTaskRemoveFromEventList>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d012      	beq.n	800725c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007236:	4b0d      	ldr	r3, [pc, #52]	@ (800726c <xQueueGenericReset+0xd0>)
 8007238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800723c:	601a      	str	r2, [r3, #0]
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	e009      	b.n	800725c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	3310      	adds	r3, #16
 800724c:	4618      	mov	r0, r3
 800724e:	f7ff fef1 	bl	8007034 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	3324      	adds	r3, #36	@ 0x24
 8007256:	4618      	mov	r0, r3
 8007258:	f7ff feec 	bl	8007034 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800725c:	f002 f88e 	bl	800937c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007260:	2301      	movs	r3, #1
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	e000ed04 	.word	0xe000ed04

08007270 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007270:	b580      	push	{r7, lr}
 8007272:	b08e      	sub	sp, #56	@ 0x38
 8007274:	af02      	add	r7, sp, #8
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
 800727c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10b      	bne.n	800729c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007288:	f383 8811 	msr	BASEPRI, r3
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007296:	bf00      	nop
 8007298:	bf00      	nop
 800729a:	e7fd      	b.n	8007298 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10b      	bne.n	80072ba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80072a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a6:	f383 8811 	msr	BASEPRI, r3
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80072b4:	bf00      	nop
 80072b6:	bf00      	nop
 80072b8:	e7fd      	b.n	80072b6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <xQueueGenericCreateStatic+0x56>
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <xQueueGenericCreateStatic+0x5a>
 80072c6:	2301      	movs	r3, #1
 80072c8:	e000      	b.n	80072cc <xQueueGenericCreateStatic+0x5c>
 80072ca:	2300      	movs	r3, #0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10b      	bne.n	80072e8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80072d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	623b      	str	r3, [r7, #32]
}
 80072e2:	bf00      	nop
 80072e4:	bf00      	nop
 80072e6:	e7fd      	b.n	80072e4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d102      	bne.n	80072f4 <xQueueGenericCreateStatic+0x84>
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <xQueueGenericCreateStatic+0x88>
 80072f4:	2301      	movs	r3, #1
 80072f6:	e000      	b.n	80072fa <xQueueGenericCreateStatic+0x8a>
 80072f8:	2300      	movs	r3, #0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10b      	bne.n	8007316 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	61fb      	str	r3, [r7, #28]
}
 8007310:	bf00      	nop
 8007312:	bf00      	nop
 8007314:	e7fd      	b.n	8007312 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007316:	2350      	movs	r3, #80	@ 0x50
 8007318:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2b50      	cmp	r3, #80	@ 0x50
 800731e:	d00b      	beq.n	8007338 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	61bb      	str	r3, [r7, #24]
}
 8007332:	bf00      	nop
 8007334:	bf00      	nop
 8007336:	e7fd      	b.n	8007334 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007338:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800733e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00d      	beq.n	8007360 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800734c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	4613      	mov	r3, r2
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	68b9      	ldr	r1, [r7, #8]
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f000 f805 	bl	800736a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007362:	4618      	mov	r0, r3
 8007364:	3730      	adds	r7, #48	@ 0x30
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	60f8      	str	r0, [r7, #12]
 8007372:	60b9      	str	r1, [r7, #8]
 8007374:	607a      	str	r2, [r7, #4]
 8007376:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d103      	bne.n	8007386 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	69ba      	ldr	r2, [r7, #24]
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	e002      	b.n	800738c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007398:	2101      	movs	r1, #1
 800739a:	69b8      	ldr	r0, [r7, #24]
 800739c:	f7ff fefe 	bl	800719c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	78fa      	ldrb	r2, [r7, #3]
 80073a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80073a8:	bf00      	nop
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b08e      	sub	sp, #56	@ 0x38
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
 80073bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80073be:	2300      	movs	r3, #0
 80073c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80073c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10b      	bne.n	80073e4 <xQueueGenericSend+0x34>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d0:	f383 8811 	msr	BASEPRI, r3
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80073de:	bf00      	nop
 80073e0:	bf00      	nop
 80073e2:	e7fd      	b.n	80073e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d103      	bne.n	80073f2 <xQueueGenericSend+0x42>
 80073ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <xQueueGenericSend+0x46>
 80073f2:	2301      	movs	r3, #1
 80073f4:	e000      	b.n	80073f8 <xQueueGenericSend+0x48>
 80073f6:	2300      	movs	r3, #0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10b      	bne.n	8007414 <xQueueGenericSend+0x64>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800740e:	bf00      	nop
 8007410:	bf00      	nop
 8007412:	e7fd      	b.n	8007410 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	2b02      	cmp	r3, #2
 8007418:	d103      	bne.n	8007422 <xQueueGenericSend+0x72>
 800741a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800741e:	2b01      	cmp	r3, #1
 8007420:	d101      	bne.n	8007426 <xQueueGenericSend+0x76>
 8007422:	2301      	movs	r3, #1
 8007424:	e000      	b.n	8007428 <xQueueGenericSend+0x78>
 8007426:	2300      	movs	r3, #0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10b      	bne.n	8007444 <xQueueGenericSend+0x94>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	623b      	str	r3, [r7, #32]
}
 800743e:	bf00      	nop
 8007440:	bf00      	nop
 8007442:	e7fd      	b.n	8007440 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007444:	f001 f9fc 	bl	8008840 <xTaskGetSchedulerState>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d102      	bne.n	8007454 <xQueueGenericSend+0xa4>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <xQueueGenericSend+0xa8>
 8007454:	2301      	movs	r3, #1
 8007456:	e000      	b.n	800745a <xQueueGenericSend+0xaa>
 8007458:	2300      	movs	r3, #0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10b      	bne.n	8007476 <xQueueGenericSend+0xc6>
	__asm volatile
 800745e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	61fb      	str	r3, [r7, #28]
}
 8007470:	bf00      	nop
 8007472:	bf00      	nop
 8007474:	e7fd      	b.n	8007472 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007476:	f001 ff4f 	bl	8009318 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800747a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800747e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007482:	429a      	cmp	r2, r3
 8007484:	d302      	bcc.n	800748c <xQueueGenericSend+0xdc>
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b02      	cmp	r3, #2
 800748a:	d129      	bne.n	80074e0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	68b9      	ldr	r1, [r7, #8]
 8007490:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007492:	f000 fa0f 	bl	80078b4 <prvCopyDataToQueue>
 8007496:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800749c:	2b00      	cmp	r3, #0
 800749e:	d010      	beq.n	80074c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a2:	3324      	adds	r3, #36	@ 0x24
 80074a4:	4618      	mov	r0, r3
 80074a6:	f001 f805 	bl	80084b4 <xTaskRemoveFromEventList>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d013      	beq.n	80074d8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80074b0:	4b3f      	ldr	r3, [pc, #252]	@ (80075b0 <xQueueGenericSend+0x200>)
 80074b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074b6:	601a      	str	r2, [r3, #0]
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	f3bf 8f6f 	isb	sy
 80074c0:	e00a      	b.n	80074d8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80074c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d007      	beq.n	80074d8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80074c8:	4b39      	ldr	r3, [pc, #228]	@ (80075b0 <xQueueGenericSend+0x200>)
 80074ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074ce:	601a      	str	r2, [r3, #0]
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80074d8:	f001 ff50 	bl	800937c <vPortExitCritical>
				return pdPASS;
 80074dc:	2301      	movs	r3, #1
 80074de:	e063      	b.n	80075a8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d103      	bne.n	80074ee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074e6:	f001 ff49 	bl	800937c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80074ea:	2300      	movs	r3, #0
 80074ec:	e05c      	b.n	80075a8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d106      	bne.n	8007502 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074f4:	f107 0314 	add.w	r3, r7, #20
 80074f8:	4618      	mov	r0, r3
 80074fa:	f001 f83f 	bl	800857c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074fe:	2301      	movs	r3, #1
 8007500:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007502:	f001 ff3b 	bl	800937c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007506:	f000 fda7 	bl	8008058 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800750a:	f001 ff05 	bl	8009318 <vPortEnterCritical>
 800750e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007510:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007514:	b25b      	sxtb	r3, r3
 8007516:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800751a:	d103      	bne.n	8007524 <xQueueGenericSend+0x174>
 800751c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751e:	2200      	movs	r2, #0
 8007520:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007526:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800752a:	b25b      	sxtb	r3, r3
 800752c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007530:	d103      	bne.n	800753a <xQueueGenericSend+0x18a>
 8007532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800753a:	f001 ff1f 	bl	800937c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800753e:	1d3a      	adds	r2, r7, #4
 8007540:	f107 0314 	add.w	r3, r7, #20
 8007544:	4611      	mov	r1, r2
 8007546:	4618      	mov	r0, r3
 8007548:	f001 f82e 	bl	80085a8 <xTaskCheckForTimeOut>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d124      	bne.n	800759c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007552:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007554:	f000 faa6 	bl	8007aa4 <prvIsQueueFull>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d018      	beq.n	8007590 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800755e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007560:	3310      	adds	r3, #16
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	4611      	mov	r1, r2
 8007566:	4618      	mov	r0, r3
 8007568:	f000 ff52 	bl	8008410 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800756c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800756e:	f000 fa31 	bl	80079d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007572:	f000 fd7f 	bl	8008074 <xTaskResumeAll>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	f47f af7c 	bne.w	8007476 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800757e:	4b0c      	ldr	r3, [pc, #48]	@ (80075b0 <xQueueGenericSend+0x200>)
 8007580:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	e772      	b.n	8007476 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007590:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007592:	f000 fa1f 	bl	80079d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007596:	f000 fd6d 	bl	8008074 <xTaskResumeAll>
 800759a:	e76c      	b.n	8007476 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800759c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800759e:	f000 fa19 	bl	80079d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075a2:	f000 fd67 	bl	8008074 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80075a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3738      	adds	r7, #56	@ 0x38
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	e000ed04 	.word	0xe000ed04

080075b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b090      	sub	sp, #64	@ 0x40
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
 80075c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80075c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d10b      	bne.n	80075e4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80075cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80075de:	bf00      	nop
 80075e0:	bf00      	nop
 80075e2:	e7fd      	b.n	80075e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d103      	bne.n	80075f2 <xQueueGenericSendFromISR+0x3e>
 80075ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d101      	bne.n	80075f6 <xQueueGenericSendFromISR+0x42>
 80075f2:	2301      	movs	r3, #1
 80075f4:	e000      	b.n	80075f8 <xQueueGenericSendFromISR+0x44>
 80075f6:	2300      	movs	r3, #0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10b      	bne.n	8007614 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80075fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007600:	f383 8811 	msr	BASEPRI, r3
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800760e:	bf00      	nop
 8007610:	bf00      	nop
 8007612:	e7fd      	b.n	8007610 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	2b02      	cmp	r3, #2
 8007618:	d103      	bne.n	8007622 <xQueueGenericSendFromISR+0x6e>
 800761a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800761c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800761e:	2b01      	cmp	r3, #1
 8007620:	d101      	bne.n	8007626 <xQueueGenericSendFromISR+0x72>
 8007622:	2301      	movs	r3, #1
 8007624:	e000      	b.n	8007628 <xQueueGenericSendFromISR+0x74>
 8007626:	2300      	movs	r3, #0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10b      	bne.n	8007644 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800762c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007630:	f383 8811 	msr	BASEPRI, r3
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	623b      	str	r3, [r7, #32]
}
 800763e:	bf00      	nop
 8007640:	bf00      	nop
 8007642:	e7fd      	b.n	8007640 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007644:	f001 ff48 	bl	80094d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007648:	f3ef 8211 	mrs	r2, BASEPRI
 800764c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	61fa      	str	r2, [r7, #28]
 800765e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007660:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007662:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007666:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800766a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800766c:	429a      	cmp	r2, r3
 800766e:	d302      	bcc.n	8007676 <xQueueGenericSendFromISR+0xc2>
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	2b02      	cmp	r3, #2
 8007674:	d12f      	bne.n	80076d6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007678:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800767c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007684:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	68b9      	ldr	r1, [r7, #8]
 800768a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800768c:	f000 f912 	bl	80078b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007690:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007694:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007698:	d112      	bne.n	80076c0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800769a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800769c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d016      	beq.n	80076d0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a4:	3324      	adds	r3, #36	@ 0x24
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 ff04 	bl	80084b4 <xTaskRemoveFromEventList>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00e      	beq.n	80076d0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00b      	beq.n	80076d0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	e007      	b.n	80076d0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80076c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80076c4:	3301      	adds	r3, #1
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	b25a      	sxtb	r2, r3
 80076ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80076d0:	2301      	movs	r3, #1
 80076d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80076d4:	e001      	b.n	80076da <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80076d6:	2300      	movs	r3, #0
 80076d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076dc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80076e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80076e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3740      	adds	r7, #64	@ 0x40
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b08c      	sub	sp, #48	@ 0x30
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80076fc:	2300      	movs	r3, #0
 80076fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10b      	bne.n	8007722 <xQueueReceive+0x32>
	__asm volatile
 800770a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	623b      	str	r3, [r7, #32]
}
 800771c:	bf00      	nop
 800771e:	bf00      	nop
 8007720:	e7fd      	b.n	800771e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d103      	bne.n	8007730 <xQueueReceive+0x40>
 8007728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800772a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <xQueueReceive+0x44>
 8007730:	2301      	movs	r3, #1
 8007732:	e000      	b.n	8007736 <xQueueReceive+0x46>
 8007734:	2300      	movs	r3, #0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10b      	bne.n	8007752 <xQueueReceive+0x62>
	__asm volatile
 800773a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	61fb      	str	r3, [r7, #28]
}
 800774c:	bf00      	nop
 800774e:	bf00      	nop
 8007750:	e7fd      	b.n	800774e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007752:	f001 f875 	bl	8008840 <xTaskGetSchedulerState>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d102      	bne.n	8007762 <xQueueReceive+0x72>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <xQueueReceive+0x76>
 8007762:	2301      	movs	r3, #1
 8007764:	e000      	b.n	8007768 <xQueueReceive+0x78>
 8007766:	2300      	movs	r3, #0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10b      	bne.n	8007784 <xQueueReceive+0x94>
	__asm volatile
 800776c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	61bb      	str	r3, [r7, #24]
}
 800777e:	bf00      	nop
 8007780:	bf00      	nop
 8007782:	e7fd      	b.n	8007780 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007784:	f001 fdc8 	bl	8009318 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800778a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800778e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007790:	2b00      	cmp	r3, #0
 8007792:	d01f      	beq.n	80077d4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007794:	68b9      	ldr	r1, [r7, #8]
 8007796:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007798:	f000 f8f6 	bl	8007988 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800779c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779e:	1e5a      	subs	r2, r3, #1
 80077a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00f      	beq.n	80077cc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ae:	3310      	adds	r3, #16
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 fe7f 	bl	80084b4 <xTaskRemoveFromEventList>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d007      	beq.n	80077cc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80077bc:	4b3c      	ldr	r3, [pc, #240]	@ (80078b0 <xQueueReceive+0x1c0>)
 80077be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80077cc:	f001 fdd6 	bl	800937c <vPortExitCritical>
				return pdPASS;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e069      	b.n	80078a8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d103      	bne.n	80077e2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80077da:	f001 fdcf 	bl	800937c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80077de:	2300      	movs	r3, #0
 80077e0:	e062      	b.n	80078a8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d106      	bne.n	80077f6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077e8:	f107 0310 	add.w	r3, r7, #16
 80077ec:	4618      	mov	r0, r3
 80077ee:	f000 fec5 	bl	800857c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077f2:	2301      	movs	r3, #1
 80077f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077f6:	f001 fdc1 	bl	800937c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077fa:	f000 fc2d 	bl	8008058 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077fe:	f001 fd8b 	bl	8009318 <vPortEnterCritical>
 8007802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007804:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007808:	b25b      	sxtb	r3, r3
 800780a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800780e:	d103      	bne.n	8007818 <xQueueReceive+0x128>
 8007810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007812:	2200      	movs	r2, #0
 8007814:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800781a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800781e:	b25b      	sxtb	r3, r3
 8007820:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007824:	d103      	bne.n	800782e <xQueueReceive+0x13e>
 8007826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800782e:	f001 fda5 	bl	800937c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007832:	1d3a      	adds	r2, r7, #4
 8007834:	f107 0310 	add.w	r3, r7, #16
 8007838:	4611      	mov	r1, r2
 800783a:	4618      	mov	r0, r3
 800783c:	f000 feb4 	bl	80085a8 <xTaskCheckForTimeOut>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d123      	bne.n	800788e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007846:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007848:	f000 f916 	bl	8007a78 <prvIsQueueEmpty>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d017      	beq.n	8007882 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007854:	3324      	adds	r3, #36	@ 0x24
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	4611      	mov	r1, r2
 800785a:	4618      	mov	r0, r3
 800785c:	f000 fdd8 	bl	8008410 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007860:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007862:	f000 f8b7 	bl	80079d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007866:	f000 fc05 	bl	8008074 <xTaskResumeAll>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d189      	bne.n	8007784 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007870:	4b0f      	ldr	r3, [pc, #60]	@ (80078b0 <xQueueReceive+0x1c0>)
 8007872:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	e780      	b.n	8007784 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007882:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007884:	f000 f8a6 	bl	80079d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007888:	f000 fbf4 	bl	8008074 <xTaskResumeAll>
 800788c:	e77a      	b.n	8007784 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800788e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007890:	f000 f8a0 	bl	80079d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007894:	f000 fbee 	bl	8008074 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007898:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800789a:	f000 f8ed 	bl	8007a78 <prvIsQueueEmpty>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f43f af6f 	beq.w	8007784 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80078a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3730      	adds	r7, #48	@ 0x30
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	e000ed04 	.word	0xe000ed04

080078b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80078c0:	2300      	movs	r3, #0
 80078c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10d      	bne.n	80078ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d14d      	bne.n	8007976 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 ffcc 	bl	800887c <xTaskPriorityDisinherit>
 80078e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	609a      	str	r2, [r3, #8]
 80078ec:	e043      	b.n	8007976 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d119      	bne.n	8007928 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6858      	ldr	r0, [r3, #4]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078fc:	461a      	mov	r2, r3
 80078fe:	68b9      	ldr	r1, [r7, #8]
 8007900:	f002 f89e 	bl	8009a40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800790c:	441a      	add	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	429a      	cmp	r2, r3
 800791c:	d32b      	bcc.n	8007976 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	605a      	str	r2, [r3, #4]
 8007926:	e026      	b.n	8007976 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	68d8      	ldr	r0, [r3, #12]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007930:	461a      	mov	r2, r3
 8007932:	68b9      	ldr	r1, [r7, #8]
 8007934:	f002 f884 	bl	8009a40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	68da      	ldr	r2, [r3, #12]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007940:	425b      	negs	r3, r3
 8007942:	441a      	add	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	68da      	ldr	r2, [r3, #12]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	429a      	cmp	r2, r3
 8007952:	d207      	bcs.n	8007964 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	689a      	ldr	r2, [r3, #8]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800795c:	425b      	negs	r3, r3
 800795e:	441a      	add	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b02      	cmp	r3, #2
 8007968:	d105      	bne.n	8007976 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	3b01      	subs	r3, #1
 8007974:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	1c5a      	adds	r2, r3, #1
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800797e:	697b      	ldr	r3, [r7, #20]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3718      	adds	r7, #24
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007996:	2b00      	cmp	r3, #0
 8007998:	d018      	beq.n	80079cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68da      	ldr	r2, [r3, #12]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a2:	441a      	add	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	68da      	ldr	r2, [r3, #12]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d303      	bcc.n	80079bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	68d9      	ldr	r1, [r3, #12]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c4:	461a      	mov	r2, r3
 80079c6:	6838      	ldr	r0, [r7, #0]
 80079c8:	f002 f83a 	bl	8009a40 <memcpy>
	}
}
 80079cc:	bf00      	nop
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80079dc:	f001 fc9c 	bl	8009318 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079e8:	e011      	b.n	8007a0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d012      	beq.n	8007a18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	3324      	adds	r3, #36	@ 0x24
 80079f6:	4618      	mov	r0, r3
 80079f8:	f000 fd5c 	bl	80084b4 <xTaskRemoveFromEventList>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d001      	beq.n	8007a06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007a02:	f000 fe35 	bl	8008670 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	dce9      	bgt.n	80079ea <prvUnlockQueue+0x16>
 8007a16:	e000      	b.n	8007a1a <prvUnlockQueue+0x46>
					break;
 8007a18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	22ff      	movs	r2, #255	@ 0xff
 8007a1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007a22:	f001 fcab 	bl	800937c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007a26:	f001 fc77 	bl	8009318 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a32:	e011      	b.n	8007a58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d012      	beq.n	8007a62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	3310      	adds	r3, #16
 8007a40:	4618      	mov	r0, r3
 8007a42:	f000 fd37 	bl	80084b4 <xTaskRemoveFromEventList>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d001      	beq.n	8007a50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007a4c:	f000 fe10 	bl	8008670 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	3b01      	subs	r3, #1
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	dce9      	bgt.n	8007a34 <prvUnlockQueue+0x60>
 8007a60:	e000      	b.n	8007a64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007a62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	22ff      	movs	r2, #255	@ 0xff
 8007a68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007a6c:	f001 fc86 	bl	800937c <vPortExitCritical>
}
 8007a70:	bf00      	nop
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a80:	f001 fc4a 	bl	8009318 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d102      	bne.n	8007a92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	60fb      	str	r3, [r7, #12]
 8007a90:	e001      	b.n	8007a96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a92:	2300      	movs	r3, #0
 8007a94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a96:	f001 fc71 	bl	800937c <vPortExitCritical>

	return xReturn;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007aac:	f001 fc34 	bl	8009318 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d102      	bne.n	8007ac2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007abc:	2301      	movs	r3, #1
 8007abe:	60fb      	str	r3, [r7, #12]
 8007ac0:	e001      	b.n	8007ac6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ac6:	f001 fc59 	bl	800937c <vPortExitCritical>

	return xReturn;
 8007aca:	68fb      	ldr	r3, [r7, #12]
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60fb      	str	r3, [r7, #12]
 8007ae2:	e014      	b.n	8007b0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ae4:	4a0f      	ldr	r2, [pc, #60]	@ (8007b24 <vQueueAddToRegistry+0x50>)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10b      	bne.n	8007b08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007af0:	490c      	ldr	r1, [pc, #48]	@ (8007b24 <vQueueAddToRegistry+0x50>)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007afa:	4a0a      	ldr	r2, [pc, #40]	@ (8007b24 <vQueueAddToRegistry+0x50>)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	00db      	lsls	r3, r3, #3
 8007b00:	4413      	add	r3, r2
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007b06:	e006      	b.n	8007b16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	60fb      	str	r3, [r7, #12]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2b07      	cmp	r3, #7
 8007b12:	d9e7      	bls.n	8007ae4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007b14:	bf00      	nop
 8007b16:	bf00      	nop
 8007b18:	3714      	adds	r7, #20
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	24000f54 	.word	0x24000f54

08007b28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007b38:	f001 fbee 	bl	8009318 <vPortEnterCritical>
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b42:	b25b      	sxtb	r3, r3
 8007b44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b48:	d103      	bne.n	8007b52 <vQueueWaitForMessageRestricted+0x2a>
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b58:	b25b      	sxtb	r3, r3
 8007b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b5e:	d103      	bne.n	8007b68 <vQueueWaitForMessageRestricted+0x40>
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b68:	f001 fc08 	bl	800937c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d106      	bne.n	8007b82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	3324      	adds	r3, #36	@ 0x24
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	68b9      	ldr	r1, [r7, #8]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 fc6d 	bl	800845c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007b82:	6978      	ldr	r0, [r7, #20]
 8007b84:	f7ff ff26 	bl	80079d4 <prvUnlockQueue>
	}
 8007b88:	bf00      	nop
 8007b8a:	3718      	adds	r7, #24
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08e      	sub	sp, #56	@ 0x38
 8007b94:	af04      	add	r7, sp, #16
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
 8007b9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10b      	bne.n	8007bbc <xTaskCreateStatic+0x2c>
	__asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	623b      	str	r3, [r7, #32]
}
 8007bb6:	bf00      	nop
 8007bb8:	bf00      	nop
 8007bba:	e7fd      	b.n	8007bb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10b      	bne.n	8007bda <xTaskCreateStatic+0x4a>
	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	61fb      	str	r3, [r7, #28]
}
 8007bd4:	bf00      	nop
 8007bd6:	bf00      	nop
 8007bd8:	e7fd      	b.n	8007bd6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007bda:	23a8      	movs	r3, #168	@ 0xa8
 8007bdc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	2ba8      	cmp	r3, #168	@ 0xa8
 8007be2:	d00b      	beq.n	8007bfc <xTaskCreateStatic+0x6c>
	__asm volatile
 8007be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be8:	f383 8811 	msr	BASEPRI, r3
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	61bb      	str	r3, [r7, #24]
}
 8007bf6:	bf00      	nop
 8007bf8:	bf00      	nop
 8007bfa:	e7fd      	b.n	8007bf8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007bfc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d01e      	beq.n	8007c42 <xTaskCreateStatic+0xb2>
 8007c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d01b      	beq.n	8007c42 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c12:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	9303      	str	r3, [sp, #12]
 8007c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c22:	9302      	str	r3, [sp, #8]
 8007c24:	f107 0314 	add.w	r3, r7, #20
 8007c28:	9301      	str	r3, [sp, #4]
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	68b9      	ldr	r1, [r7, #8]
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f000 f851 	bl	8007cdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007c3c:	f000 f8f6 	bl	8007e2c <prvAddNewTaskToReadyList>
 8007c40:	e001      	b.n	8007c46 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007c42:	2300      	movs	r3, #0
 8007c44:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007c46:	697b      	ldr	r3, [r7, #20]
	}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3728      	adds	r7, #40	@ 0x28
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b08c      	sub	sp, #48	@ 0x30
 8007c54:	af04      	add	r7, sp, #16
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	603b      	str	r3, [r7, #0]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c60:	88fb      	ldrh	r3, [r7, #6]
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4618      	mov	r0, r3
 8007c66:	f001 fc79 	bl	800955c <pvPortMalloc>
 8007c6a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00e      	beq.n	8007c90 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c72:	20a8      	movs	r0, #168	@ 0xa8
 8007c74:	f001 fc72 	bl	800955c <pvPortMalloc>
 8007c78:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d003      	beq.n	8007c88 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	631a      	str	r2, [r3, #48]	@ 0x30
 8007c86:	e005      	b.n	8007c94 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c88:	6978      	ldr	r0, [r7, #20]
 8007c8a:	f001 fd35 	bl	80096f8 <vPortFree>
 8007c8e:	e001      	b.n	8007c94 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c90:	2300      	movs	r3, #0
 8007c92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d017      	beq.n	8007cca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ca2:	88fa      	ldrh	r2, [r7, #6]
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	9303      	str	r3, [sp, #12]
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	9302      	str	r3, [sp, #8]
 8007cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cae:	9301      	str	r3, [sp, #4]
 8007cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	68b9      	ldr	r1, [r7, #8]
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f000 f80f 	bl	8007cdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007cbe:	69f8      	ldr	r0, [r7, #28]
 8007cc0:	f000 f8b4 	bl	8007e2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	61bb      	str	r3, [r7, #24]
 8007cc8:	e002      	b.n	8007cd0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007cca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007cce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007cd0:	69bb      	ldr	r3, [r7, #24]
	}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3720      	adds	r7, #32
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
	...

08007cdc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b088      	sub	sp, #32
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
 8007ce8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cec:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	21a5      	movs	r1, #165	@ 0xa5
 8007cf6:	f001 fe1f 	bl	8009938 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cfe:	6879      	ldr	r1, [r7, #4]
 8007d00:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007d04:	440b      	add	r3, r1
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4413      	add	r3, r2
 8007d0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	f023 0307 	bic.w	r3, r3, #7
 8007d12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	f003 0307 	and.w	r3, r3, #7
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00b      	beq.n	8007d36 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	617b      	str	r3, [r7, #20]
}
 8007d30:	bf00      	nop
 8007d32:	bf00      	nop
 8007d34:	e7fd      	b.n	8007d32 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d01f      	beq.n	8007d7c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	61fb      	str	r3, [r7, #28]
 8007d40:	e012      	b.n	8007d68 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	4413      	add	r3, r2
 8007d48:	7819      	ldrb	r1, [r3, #0]
 8007d4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	4413      	add	r3, r2
 8007d50:	3334      	adds	r3, #52	@ 0x34
 8007d52:	460a      	mov	r2, r1
 8007d54:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d006      	beq.n	8007d70 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	3301      	adds	r3, #1
 8007d66:	61fb      	str	r3, [r7, #28]
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	2b0f      	cmp	r3, #15
 8007d6c:	d9e9      	bls.n	8007d42 <prvInitialiseNewTask+0x66>
 8007d6e:	e000      	b.n	8007d72 <prvInitialiseNewTask+0x96>
			{
				break;
 8007d70:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d7a:	e003      	b.n	8007d84 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d86:	2b37      	cmp	r3, #55	@ 0x37
 8007d88:	d901      	bls.n	8007d8e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d8a:	2337      	movs	r3, #55	@ 0x37
 8007d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d92:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d98:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da2:	3304      	adds	r3, #4
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7ff f965 	bl	8007074 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dac:	3318      	adds	r3, #24
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7ff f960 	bl	8007074 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007db8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dbc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dc8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ddc:	3354      	adds	r3, #84	@ 0x54
 8007dde:	224c      	movs	r2, #76	@ 0x4c
 8007de0:	2100      	movs	r1, #0
 8007de2:	4618      	mov	r0, r3
 8007de4:	f001 fda8 	bl	8009938 <memset>
 8007de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dea:	4a0d      	ldr	r2, [pc, #52]	@ (8007e20 <prvInitialiseNewTask+0x144>)
 8007dec:	659a      	str	r2, [r3, #88]	@ 0x58
 8007dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df0:	4a0c      	ldr	r2, [pc, #48]	@ (8007e24 <prvInitialiseNewTask+0x148>)
 8007df2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df6:	4a0c      	ldr	r2, [pc, #48]	@ (8007e28 <prvInitialiseNewTask+0x14c>)
 8007df8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007dfa:	683a      	ldr	r2, [r7, #0]
 8007dfc:	68f9      	ldr	r1, [r7, #12]
 8007dfe:	69b8      	ldr	r0, [r7, #24]
 8007e00:	f001 f95a 	bl	80090b8 <pxPortInitialiseStack>
 8007e04:	4602      	mov	r2, r0
 8007e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d002      	beq.n	8007e16 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e16:	bf00      	nop
 8007e18:	3720      	adds	r7, #32
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	240051e8 	.word	0x240051e8
 8007e24:	24005250 	.word	0x24005250
 8007e28:	240052b8 	.word	0x240052b8

08007e2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007e34:	f001 fa70 	bl	8009318 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007e38:	4b2d      	ldr	r3, [pc, #180]	@ (8007ef0 <prvAddNewTaskToReadyList+0xc4>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	4a2c      	ldr	r2, [pc, #176]	@ (8007ef0 <prvAddNewTaskToReadyList+0xc4>)
 8007e40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007e42:	4b2c      	ldr	r3, [pc, #176]	@ (8007ef4 <prvAddNewTaskToReadyList+0xc8>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d109      	bne.n	8007e5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8007ef4 <prvAddNewTaskToReadyList+0xc8>)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e50:	4b27      	ldr	r3, [pc, #156]	@ (8007ef0 <prvAddNewTaskToReadyList+0xc4>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d110      	bne.n	8007e7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e58:	f000 fc2e 	bl	80086b8 <prvInitialiseTaskLists>
 8007e5c:	e00d      	b.n	8007e7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e5e:	4b26      	ldr	r3, [pc, #152]	@ (8007ef8 <prvAddNewTaskToReadyList+0xcc>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d109      	bne.n	8007e7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e66:	4b23      	ldr	r3, [pc, #140]	@ (8007ef4 <prvAddNewTaskToReadyList+0xc8>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d802      	bhi.n	8007e7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e74:	4a1f      	ldr	r2, [pc, #124]	@ (8007ef4 <prvAddNewTaskToReadyList+0xc8>)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e7a:	4b20      	ldr	r3, [pc, #128]	@ (8007efc <prvAddNewTaskToReadyList+0xd0>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	4a1e      	ldr	r2, [pc, #120]	@ (8007efc <prvAddNewTaskToReadyList+0xd0>)
 8007e82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007e84:	4b1d      	ldr	r3, [pc, #116]	@ (8007efc <prvAddNewTaskToReadyList+0xd0>)
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e90:	4b1b      	ldr	r3, [pc, #108]	@ (8007f00 <prvAddNewTaskToReadyList+0xd4>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d903      	bls.n	8007ea0 <prvAddNewTaskToReadyList+0x74>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e9c:	4a18      	ldr	r2, [pc, #96]	@ (8007f00 <prvAddNewTaskToReadyList+0xd4>)
 8007e9e:	6013      	str	r3, [r2, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4a15      	ldr	r2, [pc, #84]	@ (8007f04 <prvAddNewTaskToReadyList+0xd8>)
 8007eae:	441a      	add	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	f7ff f8e9 	bl	800708e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ebc:	f001 fa5e 	bl	800937c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8007ef8 <prvAddNewTaskToReadyList+0xcc>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00e      	beq.n	8007ee6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8007ef4 <prvAddNewTaskToReadyList+0xc8>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d207      	bcs.n	8007ee6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8007f08 <prvAddNewTaskToReadyList+0xdc>)
 8007ed8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ee6:	bf00      	nop
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	24001468 	.word	0x24001468
 8007ef4:	24000f94 	.word	0x24000f94
 8007ef8:	24001474 	.word	0x24001474
 8007efc:	24001484 	.word	0x24001484
 8007f00:	24001470 	.word	0x24001470
 8007f04:	24000f98 	.word	0x24000f98
 8007f08:	e000ed04 	.word	0xe000ed04

08007f0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007f14:	2300      	movs	r3, #0
 8007f16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d018      	beq.n	8007f50 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f1e:	4b14      	ldr	r3, [pc, #80]	@ (8007f70 <vTaskDelay+0x64>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00b      	beq.n	8007f3e <vTaskDelay+0x32>
	__asm volatile
 8007f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	60bb      	str	r3, [r7, #8]
}
 8007f38:	bf00      	nop
 8007f3a:	bf00      	nop
 8007f3c:	e7fd      	b.n	8007f3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007f3e:	f000 f88b 	bl	8008058 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f42:	2100      	movs	r1, #0
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fd09 	bl	800895c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f4a:	f000 f893 	bl	8008074 <xTaskResumeAll>
 8007f4e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d107      	bne.n	8007f66 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007f56:	4b07      	ldr	r3, [pc, #28]	@ (8007f74 <vTaskDelay+0x68>)
 8007f58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f5c:	601a      	str	r2, [r3, #0]
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f66:	bf00      	nop
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	24001490 	.word	0x24001490
 8007f74:	e000ed04 	.word	0xe000ed04

08007f78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b08a      	sub	sp, #40	@ 0x28
 8007f7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f82:	2300      	movs	r3, #0
 8007f84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f86:	463a      	mov	r2, r7
 8007f88:	1d39      	adds	r1, r7, #4
 8007f8a:	f107 0308 	add.w	r3, r7, #8
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7ff f81c 	bl	8006fcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f94:	6839      	ldr	r1, [r7, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68ba      	ldr	r2, [r7, #8]
 8007f9a:	9202      	str	r2, [sp, #8]
 8007f9c:	9301      	str	r3, [sp, #4]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	460a      	mov	r2, r1
 8007fa6:	4924      	ldr	r1, [pc, #144]	@ (8008038 <vTaskStartScheduler+0xc0>)
 8007fa8:	4824      	ldr	r0, [pc, #144]	@ (800803c <vTaskStartScheduler+0xc4>)
 8007faa:	f7ff fdf1 	bl	8007b90 <xTaskCreateStatic>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	4a23      	ldr	r2, [pc, #140]	@ (8008040 <vTaskStartScheduler+0xc8>)
 8007fb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007fb4:	4b22      	ldr	r3, [pc, #136]	@ (8008040 <vTaskStartScheduler+0xc8>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d002      	beq.n	8007fc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	617b      	str	r3, [r7, #20]
 8007fc0:	e001      	b.n	8007fc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d102      	bne.n	8007fd2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007fcc:	f000 fd1a 	bl	8008a04 <xTimerCreateTimerTask>
 8007fd0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d11b      	bne.n	8008010 <vTaskStartScheduler+0x98>
	__asm volatile
 8007fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fdc:	f383 8811 	msr	BASEPRI, r3
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	613b      	str	r3, [r7, #16]
}
 8007fea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007fec:	4b15      	ldr	r3, [pc, #84]	@ (8008044 <vTaskStartScheduler+0xcc>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	3354      	adds	r3, #84	@ 0x54
 8007ff2:	4a15      	ldr	r2, [pc, #84]	@ (8008048 <vTaskStartScheduler+0xd0>)
 8007ff4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ff6:	4b15      	ldr	r3, [pc, #84]	@ (800804c <vTaskStartScheduler+0xd4>)
 8007ff8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ffc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ffe:	4b14      	ldr	r3, [pc, #80]	@ (8008050 <vTaskStartScheduler+0xd8>)
 8008000:	2201      	movs	r2, #1
 8008002:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008004:	4b13      	ldr	r3, [pc, #76]	@ (8008054 <vTaskStartScheduler+0xdc>)
 8008006:	2200      	movs	r2, #0
 8008008:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800800a:	f001 f8e1 	bl	80091d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800800e:	e00f      	b.n	8008030 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008016:	d10b      	bne.n	8008030 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801c:	f383 8811 	msr	BASEPRI, r3
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	60fb      	str	r3, [r7, #12]
}
 800802a:	bf00      	nop
 800802c:	bf00      	nop
 800802e:	e7fd      	b.n	800802c <vTaskStartScheduler+0xb4>
}
 8008030:	bf00      	nop
 8008032:	3718      	adds	r7, #24
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	08009b30 	.word	0x08009b30
 800803c:	08008689 	.word	0x08008689
 8008040:	2400148c 	.word	0x2400148c
 8008044:	24000f94 	.word	0x24000f94
 8008048:	24000014 	.word	0x24000014
 800804c:	24001488 	.word	0x24001488
 8008050:	24001474 	.word	0x24001474
 8008054:	2400146c 	.word	0x2400146c

08008058 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008058:	b480      	push	{r7}
 800805a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800805c:	4b04      	ldr	r3, [pc, #16]	@ (8008070 <vTaskSuspendAll+0x18>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3301      	adds	r3, #1
 8008062:	4a03      	ldr	r2, [pc, #12]	@ (8008070 <vTaskSuspendAll+0x18>)
 8008064:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008066:	bf00      	nop
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	24001490 	.word	0x24001490

08008074 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800807a:	2300      	movs	r3, #0
 800807c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800807e:	2300      	movs	r3, #0
 8008080:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008082:	4b42      	ldr	r3, [pc, #264]	@ (800818c <xTaskResumeAll+0x118>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10b      	bne.n	80080a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800808a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	603b      	str	r3, [r7, #0]
}
 800809c:	bf00      	nop
 800809e:	bf00      	nop
 80080a0:	e7fd      	b.n	800809e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80080a2:	f001 f939 	bl	8009318 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80080a6:	4b39      	ldr	r3, [pc, #228]	@ (800818c <xTaskResumeAll+0x118>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	3b01      	subs	r3, #1
 80080ac:	4a37      	ldr	r2, [pc, #220]	@ (800818c <xTaskResumeAll+0x118>)
 80080ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080b0:	4b36      	ldr	r3, [pc, #216]	@ (800818c <xTaskResumeAll+0x118>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d162      	bne.n	800817e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80080b8:	4b35      	ldr	r3, [pc, #212]	@ (8008190 <xTaskResumeAll+0x11c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d05e      	beq.n	800817e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080c0:	e02f      	b.n	8008122 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080c2:	4b34      	ldr	r3, [pc, #208]	@ (8008194 <xTaskResumeAll+0x120>)
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	3318      	adds	r3, #24
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7ff f83a 	bl	8007148 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	3304      	adds	r3, #4
 80080d8:	4618      	mov	r0, r3
 80080da:	f7ff f835 	bl	8007148 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080e2:	4b2d      	ldr	r3, [pc, #180]	@ (8008198 <xTaskResumeAll+0x124>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d903      	bls.n	80080f2 <xTaskResumeAll+0x7e>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ee:	4a2a      	ldr	r2, [pc, #168]	@ (8008198 <xTaskResumeAll+0x124>)
 80080f0:	6013      	str	r3, [r2, #0]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080f6:	4613      	mov	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4a27      	ldr	r2, [pc, #156]	@ (800819c <xTaskResumeAll+0x128>)
 8008100:	441a      	add	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3304      	adds	r3, #4
 8008106:	4619      	mov	r1, r3
 8008108:	4610      	mov	r0, r2
 800810a:	f7fe ffc0 	bl	800708e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008112:	4b23      	ldr	r3, [pc, #140]	@ (80081a0 <xTaskResumeAll+0x12c>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008118:	429a      	cmp	r2, r3
 800811a:	d302      	bcc.n	8008122 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800811c:	4b21      	ldr	r3, [pc, #132]	@ (80081a4 <xTaskResumeAll+0x130>)
 800811e:	2201      	movs	r2, #1
 8008120:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008122:	4b1c      	ldr	r3, [pc, #112]	@ (8008194 <xTaskResumeAll+0x120>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1cb      	bne.n	80080c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d001      	beq.n	8008134 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008130:	f000 fb66 	bl	8008800 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008134:	4b1c      	ldr	r3, [pc, #112]	@ (80081a8 <xTaskResumeAll+0x134>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d010      	beq.n	8008162 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008140:	f000 f846 	bl	80081d0 <xTaskIncrementTick>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800814a:	4b16      	ldr	r3, [pc, #88]	@ (80081a4 <xTaskResumeAll+0x130>)
 800814c:	2201      	movs	r2, #1
 800814e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	3b01      	subs	r3, #1
 8008154:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1f1      	bne.n	8008140 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800815c:	4b12      	ldr	r3, [pc, #72]	@ (80081a8 <xTaskResumeAll+0x134>)
 800815e:	2200      	movs	r2, #0
 8008160:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008162:	4b10      	ldr	r3, [pc, #64]	@ (80081a4 <xTaskResumeAll+0x130>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d009      	beq.n	800817e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800816a:	2301      	movs	r3, #1
 800816c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800816e:	4b0f      	ldr	r3, [pc, #60]	@ (80081ac <xTaskResumeAll+0x138>)
 8008170:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	f3bf 8f4f 	dsb	sy
 800817a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800817e:	f001 f8fd 	bl	800937c <vPortExitCritical>

	return xAlreadyYielded;
 8008182:	68bb      	ldr	r3, [r7, #8]
}
 8008184:	4618      	mov	r0, r3
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	24001490 	.word	0x24001490
 8008190:	24001468 	.word	0x24001468
 8008194:	24001428 	.word	0x24001428
 8008198:	24001470 	.word	0x24001470
 800819c:	24000f98 	.word	0x24000f98
 80081a0:	24000f94 	.word	0x24000f94
 80081a4:	2400147c 	.word	0x2400147c
 80081a8:	24001478 	.word	0x24001478
 80081ac:	e000ed04 	.word	0xe000ed04

080081b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80081b6:	4b05      	ldr	r3, [pc, #20]	@ (80081cc <xTaskGetTickCount+0x1c>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80081bc:	687b      	ldr	r3, [r7, #4]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	370c      	adds	r7, #12
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	2400146c 	.word	0x2400146c

080081d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80081d6:	2300      	movs	r3, #0
 80081d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081da:	4b4f      	ldr	r3, [pc, #316]	@ (8008318 <xTaskIncrementTick+0x148>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f040 8090 	bne.w	8008304 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80081e4:	4b4d      	ldr	r3, [pc, #308]	@ (800831c <xTaskIncrementTick+0x14c>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3301      	adds	r3, #1
 80081ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80081ec:	4a4b      	ldr	r2, [pc, #300]	@ (800831c <xTaskIncrementTick+0x14c>)
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d121      	bne.n	800823c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80081f8:	4b49      	ldr	r3, [pc, #292]	@ (8008320 <xTaskIncrementTick+0x150>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00b      	beq.n	800821a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	603b      	str	r3, [r7, #0]
}
 8008214:	bf00      	nop
 8008216:	bf00      	nop
 8008218:	e7fd      	b.n	8008216 <xTaskIncrementTick+0x46>
 800821a:	4b41      	ldr	r3, [pc, #260]	@ (8008320 <xTaskIncrementTick+0x150>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	60fb      	str	r3, [r7, #12]
 8008220:	4b40      	ldr	r3, [pc, #256]	@ (8008324 <xTaskIncrementTick+0x154>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a3e      	ldr	r2, [pc, #248]	@ (8008320 <xTaskIncrementTick+0x150>)
 8008226:	6013      	str	r3, [r2, #0]
 8008228:	4a3e      	ldr	r2, [pc, #248]	@ (8008324 <xTaskIncrementTick+0x154>)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	4b3e      	ldr	r3, [pc, #248]	@ (8008328 <xTaskIncrementTick+0x158>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3301      	adds	r3, #1
 8008234:	4a3c      	ldr	r2, [pc, #240]	@ (8008328 <xTaskIncrementTick+0x158>)
 8008236:	6013      	str	r3, [r2, #0]
 8008238:	f000 fae2 	bl	8008800 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800823c:	4b3b      	ldr	r3, [pc, #236]	@ (800832c <xTaskIncrementTick+0x15c>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	693a      	ldr	r2, [r7, #16]
 8008242:	429a      	cmp	r2, r3
 8008244:	d349      	bcc.n	80082da <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008246:	4b36      	ldr	r3, [pc, #216]	@ (8008320 <xTaskIncrementTick+0x150>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d104      	bne.n	800825a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008250:	4b36      	ldr	r3, [pc, #216]	@ (800832c <xTaskIncrementTick+0x15c>)
 8008252:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008256:	601a      	str	r2, [r3, #0]
					break;
 8008258:	e03f      	b.n	80082da <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800825a:	4b31      	ldr	r3, [pc, #196]	@ (8008320 <xTaskIncrementTick+0x150>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	429a      	cmp	r2, r3
 8008270:	d203      	bcs.n	800827a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008272:	4a2e      	ldr	r2, [pc, #184]	@ (800832c <xTaskIncrementTick+0x15c>)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008278:	e02f      	b.n	80082da <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	3304      	adds	r3, #4
 800827e:	4618      	mov	r0, r3
 8008280:	f7fe ff62 	bl	8007148 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008288:	2b00      	cmp	r3, #0
 800828a:	d004      	beq.n	8008296 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	3318      	adds	r3, #24
 8008290:	4618      	mov	r0, r3
 8008292:	f7fe ff59 	bl	8007148 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800829a:	4b25      	ldr	r3, [pc, #148]	@ (8008330 <xTaskIncrementTick+0x160>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d903      	bls.n	80082aa <xTaskIncrementTick+0xda>
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a6:	4a22      	ldr	r2, [pc, #136]	@ (8008330 <xTaskIncrementTick+0x160>)
 80082a8:	6013      	str	r3, [r2, #0]
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ae:	4613      	mov	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4a1f      	ldr	r2, [pc, #124]	@ (8008334 <xTaskIncrementTick+0x164>)
 80082b8:	441a      	add	r2, r3
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	3304      	adds	r3, #4
 80082be:	4619      	mov	r1, r3
 80082c0:	4610      	mov	r0, r2
 80082c2:	f7fe fee4 	bl	800708e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ca:	4b1b      	ldr	r3, [pc, #108]	@ (8008338 <xTaskIncrementTick+0x168>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d3b8      	bcc.n	8008246 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80082d4:	2301      	movs	r3, #1
 80082d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082d8:	e7b5      	b.n	8008246 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082da:	4b17      	ldr	r3, [pc, #92]	@ (8008338 <xTaskIncrementTick+0x168>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082e0:	4914      	ldr	r1, [pc, #80]	@ (8008334 <xTaskIncrementTick+0x164>)
 80082e2:	4613      	mov	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	4413      	add	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	440b      	add	r3, r1
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d901      	bls.n	80082f6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80082f2:	2301      	movs	r3, #1
 80082f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80082f6:	4b11      	ldr	r3, [pc, #68]	@ (800833c <xTaskIncrementTick+0x16c>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d007      	beq.n	800830e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80082fe:	2301      	movs	r3, #1
 8008300:	617b      	str	r3, [r7, #20]
 8008302:	e004      	b.n	800830e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008304:	4b0e      	ldr	r3, [pc, #56]	@ (8008340 <xTaskIncrementTick+0x170>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3301      	adds	r3, #1
 800830a:	4a0d      	ldr	r2, [pc, #52]	@ (8008340 <xTaskIncrementTick+0x170>)
 800830c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800830e:	697b      	ldr	r3, [r7, #20]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3718      	adds	r7, #24
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	24001490 	.word	0x24001490
 800831c:	2400146c 	.word	0x2400146c
 8008320:	24001420 	.word	0x24001420
 8008324:	24001424 	.word	0x24001424
 8008328:	24001480 	.word	0x24001480
 800832c:	24001488 	.word	0x24001488
 8008330:	24001470 	.word	0x24001470
 8008334:	24000f98 	.word	0x24000f98
 8008338:	24000f94 	.word	0x24000f94
 800833c:	2400147c 	.word	0x2400147c
 8008340:	24001478 	.word	0x24001478

08008344 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800834a:	4b2b      	ldr	r3, [pc, #172]	@ (80083f8 <vTaskSwitchContext+0xb4>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008352:	4b2a      	ldr	r3, [pc, #168]	@ (80083fc <vTaskSwitchContext+0xb8>)
 8008354:	2201      	movs	r2, #1
 8008356:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008358:	e047      	b.n	80083ea <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800835a:	4b28      	ldr	r3, [pc, #160]	@ (80083fc <vTaskSwitchContext+0xb8>)
 800835c:	2200      	movs	r2, #0
 800835e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008360:	4b27      	ldr	r3, [pc, #156]	@ (8008400 <vTaskSwitchContext+0xbc>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	60fb      	str	r3, [r7, #12]
 8008366:	e011      	b.n	800838c <vTaskSwitchContext+0x48>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10b      	bne.n	8008386 <vTaskSwitchContext+0x42>
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	607b      	str	r3, [r7, #4]
}
 8008380:	bf00      	nop
 8008382:	bf00      	nop
 8008384:	e7fd      	b.n	8008382 <vTaskSwitchContext+0x3e>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	3b01      	subs	r3, #1
 800838a:	60fb      	str	r3, [r7, #12]
 800838c:	491d      	ldr	r1, [pc, #116]	@ (8008404 <vTaskSwitchContext+0xc0>)
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	4613      	mov	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	4413      	add	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	440b      	add	r3, r1
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d0e3      	beq.n	8008368 <vTaskSwitchContext+0x24>
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	4613      	mov	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4413      	add	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4a16      	ldr	r2, [pc, #88]	@ (8008404 <vTaskSwitchContext+0xc0>)
 80083ac:	4413      	add	r3, r2
 80083ae:	60bb      	str	r3, [r7, #8]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	685a      	ldr	r2, [r3, #4]
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	605a      	str	r2, [r3, #4]
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	3308      	adds	r3, #8
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d104      	bne.n	80083d0 <vTaskSwitchContext+0x8c>
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	605a      	str	r2, [r3, #4]
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	4a0c      	ldr	r2, [pc, #48]	@ (8008408 <vTaskSwitchContext+0xc4>)
 80083d8:	6013      	str	r3, [r2, #0]
 80083da:	4a09      	ldr	r2, [pc, #36]	@ (8008400 <vTaskSwitchContext+0xbc>)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80083e0:	4b09      	ldr	r3, [pc, #36]	@ (8008408 <vTaskSwitchContext+0xc4>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	3354      	adds	r3, #84	@ 0x54
 80083e6:	4a09      	ldr	r2, [pc, #36]	@ (800840c <vTaskSwitchContext+0xc8>)
 80083e8:	6013      	str	r3, [r2, #0]
}
 80083ea:	bf00      	nop
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	24001490 	.word	0x24001490
 80083fc:	2400147c 	.word	0x2400147c
 8008400:	24001470 	.word	0x24001470
 8008404:	24000f98 	.word	0x24000f98
 8008408:	24000f94 	.word	0x24000f94
 800840c:	24000014 	.word	0x24000014

08008410 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d10b      	bne.n	8008438 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	60fb      	str	r3, [r7, #12]
}
 8008432:	bf00      	nop
 8008434:	bf00      	nop
 8008436:	e7fd      	b.n	8008434 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008438:	4b07      	ldr	r3, [pc, #28]	@ (8008458 <vTaskPlaceOnEventList+0x48>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3318      	adds	r3, #24
 800843e:	4619      	mov	r1, r3
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f7fe fe48 	bl	80070d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008446:	2101      	movs	r1, #1
 8008448:	6838      	ldr	r0, [r7, #0]
 800844a:	f000 fa87 	bl	800895c <prvAddCurrentTaskToDelayedList>
}
 800844e:	bf00      	nop
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	24000f94 	.word	0x24000f94

0800845c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800845c:	b580      	push	{r7, lr}
 800845e:	b086      	sub	sp, #24
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10b      	bne.n	8008486 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	617b      	str	r3, [r7, #20]
}
 8008480:	bf00      	nop
 8008482:	bf00      	nop
 8008484:	e7fd      	b.n	8008482 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008486:	4b0a      	ldr	r3, [pc, #40]	@ (80084b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3318      	adds	r3, #24
 800848c:	4619      	mov	r1, r3
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f7fe fdfd 	bl	800708e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d002      	beq.n	80084a0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800849a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800849e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80084a0:	6879      	ldr	r1, [r7, #4]
 80084a2:	68b8      	ldr	r0, [r7, #8]
 80084a4:	f000 fa5a 	bl	800895c <prvAddCurrentTaskToDelayedList>
	}
 80084a8:	bf00      	nop
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	24000f94 	.word	0x24000f94

080084b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10b      	bne.n	80084e2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80084ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ce:	f383 8811 	msr	BASEPRI, r3
 80084d2:	f3bf 8f6f 	isb	sy
 80084d6:	f3bf 8f4f 	dsb	sy
 80084da:	60fb      	str	r3, [r7, #12]
}
 80084dc:	bf00      	nop
 80084de:	bf00      	nop
 80084e0:	e7fd      	b.n	80084de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	3318      	adds	r3, #24
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fe fe2e 	bl	8007148 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084ec:	4b1d      	ldr	r3, [pc, #116]	@ (8008564 <xTaskRemoveFromEventList+0xb0>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d11d      	bne.n	8008530 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	3304      	adds	r3, #4
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7fe fe25 	bl	8007148 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008502:	4b19      	ldr	r3, [pc, #100]	@ (8008568 <xTaskRemoveFromEventList+0xb4>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	429a      	cmp	r2, r3
 8008508:	d903      	bls.n	8008512 <xTaskRemoveFromEventList+0x5e>
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800850e:	4a16      	ldr	r2, [pc, #88]	@ (8008568 <xTaskRemoveFromEventList+0xb4>)
 8008510:	6013      	str	r3, [r2, #0]
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008516:	4613      	mov	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4413      	add	r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	4a13      	ldr	r2, [pc, #76]	@ (800856c <xTaskRemoveFromEventList+0xb8>)
 8008520:	441a      	add	r2, r3
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	3304      	adds	r3, #4
 8008526:	4619      	mov	r1, r3
 8008528:	4610      	mov	r0, r2
 800852a:	f7fe fdb0 	bl	800708e <vListInsertEnd>
 800852e:	e005      	b.n	800853c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	3318      	adds	r3, #24
 8008534:	4619      	mov	r1, r3
 8008536:	480e      	ldr	r0, [pc, #56]	@ (8008570 <xTaskRemoveFromEventList+0xbc>)
 8008538:	f7fe fda9 	bl	800708e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008540:	4b0c      	ldr	r3, [pc, #48]	@ (8008574 <xTaskRemoveFromEventList+0xc0>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008546:	429a      	cmp	r2, r3
 8008548:	d905      	bls.n	8008556 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800854a:	2301      	movs	r3, #1
 800854c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800854e:	4b0a      	ldr	r3, [pc, #40]	@ (8008578 <xTaskRemoveFromEventList+0xc4>)
 8008550:	2201      	movs	r2, #1
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	e001      	b.n	800855a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008556:	2300      	movs	r3, #0
 8008558:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800855a:	697b      	ldr	r3, [r7, #20]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3718      	adds	r7, #24
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	24001490 	.word	0x24001490
 8008568:	24001470 	.word	0x24001470
 800856c:	24000f98 	.word	0x24000f98
 8008570:	24001428 	.word	0x24001428
 8008574:	24000f94 	.word	0x24000f94
 8008578:	2400147c 	.word	0x2400147c

0800857c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008584:	4b06      	ldr	r3, [pc, #24]	@ (80085a0 <vTaskInternalSetTimeOutState+0x24>)
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800858c:	4b05      	ldr	r3, [pc, #20]	@ (80085a4 <vTaskInternalSetTimeOutState+0x28>)
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	605a      	str	r2, [r3, #4]
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr
 80085a0:	24001480 	.word	0x24001480
 80085a4:	2400146c 	.word	0x2400146c

080085a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b088      	sub	sp, #32
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10b      	bne.n	80085d0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80085b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085bc:	f383 8811 	msr	BASEPRI, r3
 80085c0:	f3bf 8f6f 	isb	sy
 80085c4:	f3bf 8f4f 	dsb	sy
 80085c8:	613b      	str	r3, [r7, #16]
}
 80085ca:	bf00      	nop
 80085cc:	bf00      	nop
 80085ce:	e7fd      	b.n	80085cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10b      	bne.n	80085ee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80085d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	60fb      	str	r3, [r7, #12]
}
 80085e8:	bf00      	nop
 80085ea:	bf00      	nop
 80085ec:	e7fd      	b.n	80085ea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80085ee:	f000 fe93 	bl	8009318 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80085f2:	4b1d      	ldr	r3, [pc, #116]	@ (8008668 <xTaskCheckForTimeOut+0xc0>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	69ba      	ldr	r2, [r7, #24]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800860a:	d102      	bne.n	8008612 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800860c:	2300      	movs	r3, #0
 800860e:	61fb      	str	r3, [r7, #28]
 8008610:	e023      	b.n	800865a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	4b15      	ldr	r3, [pc, #84]	@ (800866c <xTaskCheckForTimeOut+0xc4>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	429a      	cmp	r2, r3
 800861c:	d007      	beq.n	800862e <xTaskCheckForTimeOut+0x86>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	69ba      	ldr	r2, [r7, #24]
 8008624:	429a      	cmp	r2, r3
 8008626:	d302      	bcc.n	800862e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008628:	2301      	movs	r3, #1
 800862a:	61fb      	str	r3, [r7, #28]
 800862c:	e015      	b.n	800865a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	697a      	ldr	r2, [r7, #20]
 8008634:	429a      	cmp	r2, r3
 8008636:	d20b      	bcs.n	8008650 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	1ad2      	subs	r2, r2, r3
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f7ff ff99 	bl	800857c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800864a:	2300      	movs	r3, #0
 800864c:	61fb      	str	r3, [r7, #28]
 800864e:	e004      	b.n	800865a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	2200      	movs	r2, #0
 8008654:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008656:	2301      	movs	r3, #1
 8008658:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800865a:	f000 fe8f 	bl	800937c <vPortExitCritical>

	return xReturn;
 800865e:	69fb      	ldr	r3, [r7, #28]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3720      	adds	r7, #32
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	2400146c 	.word	0x2400146c
 800866c:	24001480 	.word	0x24001480

08008670 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008670:	b480      	push	{r7}
 8008672:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008674:	4b03      	ldr	r3, [pc, #12]	@ (8008684 <vTaskMissedYield+0x14>)
 8008676:	2201      	movs	r2, #1
 8008678:	601a      	str	r2, [r3, #0]
}
 800867a:	bf00      	nop
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr
 8008684:	2400147c 	.word	0x2400147c

08008688 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008690:	f000 f852 	bl	8008738 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008694:	4b06      	ldr	r3, [pc, #24]	@ (80086b0 <prvIdleTask+0x28>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d9f9      	bls.n	8008690 <prvIdleTask+0x8>
			{
				taskYIELD();
 800869c:	4b05      	ldr	r3, [pc, #20]	@ (80086b4 <prvIdleTask+0x2c>)
 800869e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80086ac:	e7f0      	b.n	8008690 <prvIdleTask+0x8>
 80086ae:	bf00      	nop
 80086b0:	24000f98 	.word	0x24000f98
 80086b4:	e000ed04 	.word	0xe000ed04

080086b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086be:	2300      	movs	r3, #0
 80086c0:	607b      	str	r3, [r7, #4]
 80086c2:	e00c      	b.n	80086de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	4613      	mov	r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4413      	add	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4a12      	ldr	r2, [pc, #72]	@ (8008718 <prvInitialiseTaskLists+0x60>)
 80086d0:	4413      	add	r3, r2
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fe fcae 	bl	8007034 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	3301      	adds	r3, #1
 80086dc:	607b      	str	r3, [r7, #4]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2b37      	cmp	r3, #55	@ 0x37
 80086e2:	d9ef      	bls.n	80086c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80086e4:	480d      	ldr	r0, [pc, #52]	@ (800871c <prvInitialiseTaskLists+0x64>)
 80086e6:	f7fe fca5 	bl	8007034 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80086ea:	480d      	ldr	r0, [pc, #52]	@ (8008720 <prvInitialiseTaskLists+0x68>)
 80086ec:	f7fe fca2 	bl	8007034 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80086f0:	480c      	ldr	r0, [pc, #48]	@ (8008724 <prvInitialiseTaskLists+0x6c>)
 80086f2:	f7fe fc9f 	bl	8007034 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80086f6:	480c      	ldr	r0, [pc, #48]	@ (8008728 <prvInitialiseTaskLists+0x70>)
 80086f8:	f7fe fc9c 	bl	8007034 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80086fc:	480b      	ldr	r0, [pc, #44]	@ (800872c <prvInitialiseTaskLists+0x74>)
 80086fe:	f7fe fc99 	bl	8007034 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008702:	4b0b      	ldr	r3, [pc, #44]	@ (8008730 <prvInitialiseTaskLists+0x78>)
 8008704:	4a05      	ldr	r2, [pc, #20]	@ (800871c <prvInitialiseTaskLists+0x64>)
 8008706:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008708:	4b0a      	ldr	r3, [pc, #40]	@ (8008734 <prvInitialiseTaskLists+0x7c>)
 800870a:	4a05      	ldr	r2, [pc, #20]	@ (8008720 <prvInitialiseTaskLists+0x68>)
 800870c:	601a      	str	r2, [r3, #0]
}
 800870e:	bf00      	nop
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	24000f98 	.word	0x24000f98
 800871c:	240013f8 	.word	0x240013f8
 8008720:	2400140c 	.word	0x2400140c
 8008724:	24001428 	.word	0x24001428
 8008728:	2400143c 	.word	0x2400143c
 800872c:	24001454 	.word	0x24001454
 8008730:	24001420 	.word	0x24001420
 8008734:	24001424 	.word	0x24001424

08008738 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800873e:	e019      	b.n	8008774 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008740:	f000 fdea 	bl	8009318 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008744:	4b10      	ldr	r3, [pc, #64]	@ (8008788 <prvCheckTasksWaitingTermination+0x50>)
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	3304      	adds	r3, #4
 8008750:	4618      	mov	r0, r3
 8008752:	f7fe fcf9 	bl	8007148 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008756:	4b0d      	ldr	r3, [pc, #52]	@ (800878c <prvCheckTasksWaitingTermination+0x54>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	3b01      	subs	r3, #1
 800875c:	4a0b      	ldr	r2, [pc, #44]	@ (800878c <prvCheckTasksWaitingTermination+0x54>)
 800875e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008760:	4b0b      	ldr	r3, [pc, #44]	@ (8008790 <prvCheckTasksWaitingTermination+0x58>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	3b01      	subs	r3, #1
 8008766:	4a0a      	ldr	r2, [pc, #40]	@ (8008790 <prvCheckTasksWaitingTermination+0x58>)
 8008768:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800876a:	f000 fe07 	bl	800937c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f810 	bl	8008794 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008774:	4b06      	ldr	r3, [pc, #24]	@ (8008790 <prvCheckTasksWaitingTermination+0x58>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1e1      	bne.n	8008740 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800877c:	bf00      	nop
 800877e:	bf00      	nop
 8008780:	3708      	adds	r7, #8
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	2400143c 	.word	0x2400143c
 800878c:	24001468 	.word	0x24001468
 8008790:	24001450 	.word	0x24001450

08008794 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	3354      	adds	r3, #84	@ 0x54
 80087a0:	4618      	mov	r0, r3
 80087a2:	f001 f8d1 	bl	8009948 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d108      	bne.n	80087c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087b4:	4618      	mov	r0, r3
 80087b6:	f000 ff9f 	bl	80096f8 <vPortFree>
				vPortFree( pxTCB );
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 ff9c 	bl	80096f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80087c0:	e019      	b.n	80087f6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d103      	bne.n	80087d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 ff93 	bl	80096f8 <vPortFree>
	}
 80087d2:	e010      	b.n	80087f6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d00b      	beq.n	80087f6 <prvDeleteTCB+0x62>
	__asm volatile
 80087de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e2:	f383 8811 	msr	BASEPRI, r3
 80087e6:	f3bf 8f6f 	isb	sy
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	60fb      	str	r3, [r7, #12]
}
 80087f0:	bf00      	nop
 80087f2:	bf00      	nop
 80087f4:	e7fd      	b.n	80087f2 <prvDeleteTCB+0x5e>
	}
 80087f6:	bf00      	nop
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
	...

08008800 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008806:	4b0c      	ldr	r3, [pc, #48]	@ (8008838 <prvResetNextTaskUnblockTime+0x38>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d104      	bne.n	800881a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008810:	4b0a      	ldr	r3, [pc, #40]	@ (800883c <prvResetNextTaskUnblockTime+0x3c>)
 8008812:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008816:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008818:	e008      	b.n	800882c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800881a:	4b07      	ldr	r3, [pc, #28]	@ (8008838 <prvResetNextTaskUnblockTime+0x38>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	4a04      	ldr	r2, [pc, #16]	@ (800883c <prvResetNextTaskUnblockTime+0x3c>)
 800882a:	6013      	str	r3, [r2, #0]
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr
 8008838:	24001420 	.word	0x24001420
 800883c:	24001488 	.word	0x24001488

08008840 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008846:	4b0b      	ldr	r3, [pc, #44]	@ (8008874 <xTaskGetSchedulerState+0x34>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d102      	bne.n	8008854 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800884e:	2301      	movs	r3, #1
 8008850:	607b      	str	r3, [r7, #4]
 8008852:	e008      	b.n	8008866 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008854:	4b08      	ldr	r3, [pc, #32]	@ (8008878 <xTaskGetSchedulerState+0x38>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d102      	bne.n	8008862 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800885c:	2302      	movs	r3, #2
 800885e:	607b      	str	r3, [r7, #4]
 8008860:	e001      	b.n	8008866 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008862:	2300      	movs	r3, #0
 8008864:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008866:	687b      	ldr	r3, [r7, #4]
	}
 8008868:	4618      	mov	r0, r3
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr
 8008874:	24001474 	.word	0x24001474
 8008878:	24001490 	.word	0x24001490

0800887c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008888:	2300      	movs	r3, #0
 800888a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d058      	beq.n	8008944 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008892:	4b2f      	ldr	r3, [pc, #188]	@ (8008950 <xTaskPriorityDisinherit+0xd4>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	429a      	cmp	r2, r3
 800889a:	d00b      	beq.n	80088b4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800889c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	60fb      	str	r3, [r7, #12]
}
 80088ae:	bf00      	nop
 80088b0:	bf00      	nop
 80088b2:	e7fd      	b.n	80088b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d10b      	bne.n	80088d4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80088bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c0:	f383 8811 	msr	BASEPRI, r3
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	60bb      	str	r3, [r7, #8]
}
 80088ce:	bf00      	nop
 80088d0:	bf00      	nop
 80088d2:	e7fd      	b.n	80088d0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088d8:	1e5a      	subs	r2, r3, #1
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d02c      	beq.n	8008944 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d128      	bne.n	8008944 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	3304      	adds	r3, #4
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fe fc26 	bl	8007148 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008908:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008914:	4b0f      	ldr	r3, [pc, #60]	@ (8008954 <xTaskPriorityDisinherit+0xd8>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	429a      	cmp	r2, r3
 800891a:	d903      	bls.n	8008924 <xTaskPriorityDisinherit+0xa8>
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008920:	4a0c      	ldr	r2, [pc, #48]	@ (8008954 <xTaskPriorityDisinherit+0xd8>)
 8008922:	6013      	str	r3, [r2, #0]
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008928:	4613      	mov	r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	4413      	add	r3, r2
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	4a09      	ldr	r2, [pc, #36]	@ (8008958 <xTaskPriorityDisinherit+0xdc>)
 8008932:	441a      	add	r2, r3
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	3304      	adds	r3, #4
 8008938:	4619      	mov	r1, r3
 800893a:	4610      	mov	r0, r2
 800893c:	f7fe fba7 	bl	800708e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008940:	2301      	movs	r3, #1
 8008942:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008944:	697b      	ldr	r3, [r7, #20]
	}
 8008946:	4618      	mov	r0, r3
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	24000f94 	.word	0x24000f94
 8008954:	24001470 	.word	0x24001470
 8008958:	24000f98 	.word	0x24000f98

0800895c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008966:	4b21      	ldr	r3, [pc, #132]	@ (80089ec <prvAddCurrentTaskToDelayedList+0x90>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800896c:	4b20      	ldr	r3, [pc, #128]	@ (80089f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3304      	adds	r3, #4
 8008972:	4618      	mov	r0, r3
 8008974:	f7fe fbe8 	bl	8007148 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800897e:	d10a      	bne.n	8008996 <prvAddCurrentTaskToDelayedList+0x3a>
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d007      	beq.n	8008996 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008986:	4b1a      	ldr	r3, [pc, #104]	@ (80089f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	3304      	adds	r3, #4
 800898c:	4619      	mov	r1, r3
 800898e:	4819      	ldr	r0, [pc, #100]	@ (80089f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008990:	f7fe fb7d 	bl	800708e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008994:	e026      	b.n	80089e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4413      	add	r3, r2
 800899c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800899e:	4b14      	ldr	r3, [pc, #80]	@ (80089f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d209      	bcs.n	80089c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089ae:	4b12      	ldr	r3, [pc, #72]	@ (80089f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	4b0f      	ldr	r3, [pc, #60]	@ (80089f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	3304      	adds	r3, #4
 80089b8:	4619      	mov	r1, r3
 80089ba:	4610      	mov	r0, r2
 80089bc:	f7fe fb8b 	bl	80070d6 <vListInsert>
}
 80089c0:	e010      	b.n	80089e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089c2:	4b0e      	ldr	r3, [pc, #56]	@ (80089fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	4b0a      	ldr	r3, [pc, #40]	@ (80089f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3304      	adds	r3, #4
 80089cc:	4619      	mov	r1, r3
 80089ce:	4610      	mov	r0, r2
 80089d0:	f7fe fb81 	bl	80070d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80089d4:	4b0a      	ldr	r3, [pc, #40]	@ (8008a00 <prvAddCurrentTaskToDelayedList+0xa4>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d202      	bcs.n	80089e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80089de:	4a08      	ldr	r2, [pc, #32]	@ (8008a00 <prvAddCurrentTaskToDelayedList+0xa4>)
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	6013      	str	r3, [r2, #0]
}
 80089e4:	bf00      	nop
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	2400146c 	.word	0x2400146c
 80089f0:	24000f94 	.word	0x24000f94
 80089f4:	24001454 	.word	0x24001454
 80089f8:	24001424 	.word	0x24001424
 80089fc:	24001420 	.word	0x24001420
 8008a00:	24001488 	.word	0x24001488

08008a04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b08a      	sub	sp, #40	@ 0x28
 8008a08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008a0e:	f000 fb13 	bl	8009038 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008a12:	4b1d      	ldr	r3, [pc, #116]	@ (8008a88 <xTimerCreateTimerTask+0x84>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d021      	beq.n	8008a5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008a22:	1d3a      	adds	r2, r7, #4
 8008a24:	f107 0108 	add.w	r1, r7, #8
 8008a28:	f107 030c 	add.w	r3, r7, #12
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7fe fae7 	bl	8007000 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008a32:	6879      	ldr	r1, [r7, #4]
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	9202      	str	r2, [sp, #8]
 8008a3a:	9301      	str	r3, [sp, #4]
 8008a3c:	2302      	movs	r3, #2
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	2300      	movs	r3, #0
 8008a42:	460a      	mov	r2, r1
 8008a44:	4911      	ldr	r1, [pc, #68]	@ (8008a8c <xTimerCreateTimerTask+0x88>)
 8008a46:	4812      	ldr	r0, [pc, #72]	@ (8008a90 <xTimerCreateTimerTask+0x8c>)
 8008a48:	f7ff f8a2 	bl	8007b90 <xTaskCreateStatic>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	4a11      	ldr	r2, [pc, #68]	@ (8008a94 <xTimerCreateTimerTask+0x90>)
 8008a50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008a52:	4b10      	ldr	r3, [pc, #64]	@ (8008a94 <xTimerCreateTimerTask+0x90>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d001      	beq.n	8008a5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10b      	bne.n	8008a7c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a68:	f383 8811 	msr	BASEPRI, r3
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	613b      	str	r3, [r7, #16]
}
 8008a76:	bf00      	nop
 8008a78:	bf00      	nop
 8008a7a:	e7fd      	b.n	8008a78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008a7c:	697b      	ldr	r3, [r7, #20]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3718      	adds	r7, #24
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	240014c4 	.word	0x240014c4
 8008a8c:	08009b38 	.word	0x08009b38
 8008a90:	08008bd1 	.word	0x08008bd1
 8008a94:	240014c8 	.word	0x240014c8

08008a98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b08a      	sub	sp, #40	@ 0x28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]
 8008aa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d10b      	bne.n	8008ac8 <xTimerGenericCommand+0x30>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	623b      	str	r3, [r7, #32]
}
 8008ac2:	bf00      	nop
 8008ac4:	bf00      	nop
 8008ac6:	e7fd      	b.n	8008ac4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008ac8:	4b19      	ldr	r3, [pc, #100]	@ (8008b30 <xTimerGenericCommand+0x98>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d02a      	beq.n	8008b26 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	2b05      	cmp	r3, #5
 8008ae0:	dc18      	bgt.n	8008b14 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008ae2:	f7ff fead 	bl	8008840 <xTaskGetSchedulerState>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d109      	bne.n	8008b00 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008aec:	4b10      	ldr	r3, [pc, #64]	@ (8008b30 <xTimerGenericCommand+0x98>)
 8008aee:	6818      	ldr	r0, [r3, #0]
 8008af0:	f107 0110 	add.w	r1, r7, #16
 8008af4:	2300      	movs	r3, #0
 8008af6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008af8:	f7fe fc5a 	bl	80073b0 <xQueueGenericSend>
 8008afc:	6278      	str	r0, [r7, #36]	@ 0x24
 8008afe:	e012      	b.n	8008b26 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008b00:	4b0b      	ldr	r3, [pc, #44]	@ (8008b30 <xTimerGenericCommand+0x98>)
 8008b02:	6818      	ldr	r0, [r3, #0]
 8008b04:	f107 0110 	add.w	r1, r7, #16
 8008b08:	2300      	movs	r3, #0
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f7fe fc50 	bl	80073b0 <xQueueGenericSend>
 8008b10:	6278      	str	r0, [r7, #36]	@ 0x24
 8008b12:	e008      	b.n	8008b26 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008b14:	4b06      	ldr	r3, [pc, #24]	@ (8008b30 <xTimerGenericCommand+0x98>)
 8008b16:	6818      	ldr	r0, [r3, #0]
 8008b18:	f107 0110 	add.w	r1, r7, #16
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	f7fe fd48 	bl	80075b4 <xQueueGenericSendFromISR>
 8008b24:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3728      	adds	r7, #40	@ 0x28
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	240014c4 	.word	0x240014c4

08008b34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b088      	sub	sp, #32
 8008b38:	af02      	add	r7, sp, #8
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b3e:	4b23      	ldr	r3, [pc, #140]	@ (8008bcc <prvProcessExpiredTimer+0x98>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	3304      	adds	r3, #4
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7fe fafb 	bl	8007148 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b58:	f003 0304 	and.w	r3, r3, #4
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d023      	beq.n	8008ba8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	699a      	ldr	r2, [r3, #24]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	18d1      	adds	r1, r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	683a      	ldr	r2, [r7, #0]
 8008b6c:	6978      	ldr	r0, [r7, #20]
 8008b6e:	f000 f8d5 	bl	8008d1c <prvInsertTimerInActiveList>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d020      	beq.n	8008bba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b78:	2300      	movs	r3, #0
 8008b7a:	9300      	str	r3, [sp, #0]
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	2100      	movs	r1, #0
 8008b82:	6978      	ldr	r0, [r7, #20]
 8008b84:	f7ff ff88 	bl	8008a98 <xTimerGenericCommand>
 8008b88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d114      	bne.n	8008bba <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b94:	f383 8811 	msr	BASEPRI, r3
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	60fb      	str	r3, [r7, #12]
}
 8008ba2:	bf00      	nop
 8008ba4:	bf00      	nop
 8008ba6:	e7fd      	b.n	8008ba4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008bae:	f023 0301 	bic.w	r3, r3, #1
 8008bb2:	b2da      	uxtb	r2, r3
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	6978      	ldr	r0, [r7, #20]
 8008bc0:	4798      	blx	r3
}
 8008bc2:	bf00      	nop
 8008bc4:	3718      	adds	r7, #24
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	240014bc 	.word	0x240014bc

08008bd0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008bd8:	f107 0308 	add.w	r3, r7, #8
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f000 f859 	bl	8008c94 <prvGetNextExpireTime>
 8008be2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	4619      	mov	r1, r3
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f000 f805 	bl	8008bf8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008bee:	f000 f8d7 	bl	8008da0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008bf2:	bf00      	nop
 8008bf4:	e7f0      	b.n	8008bd8 <prvTimerTask+0x8>
	...

08008bf8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008c02:	f7ff fa29 	bl	8008058 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c06:	f107 0308 	add.w	r3, r7, #8
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 f866 	bl	8008cdc <prvSampleTimeNow>
 8008c10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d130      	bne.n	8008c7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10a      	bne.n	8008c34 <prvProcessTimerOrBlockTask+0x3c>
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d806      	bhi.n	8008c34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008c26:	f7ff fa25 	bl	8008074 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008c2a:	68f9      	ldr	r1, [r7, #12]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f7ff ff81 	bl	8008b34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008c32:	e024      	b.n	8008c7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d008      	beq.n	8008c4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008c3a:	4b13      	ldr	r3, [pc, #76]	@ (8008c88 <prvProcessTimerOrBlockTask+0x90>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d101      	bne.n	8008c48 <prvProcessTimerOrBlockTask+0x50>
 8008c44:	2301      	movs	r3, #1
 8008c46:	e000      	b.n	8008c4a <prvProcessTimerOrBlockTask+0x52>
 8008c48:	2300      	movs	r3, #0
 8008c4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8008c8c <prvProcessTimerOrBlockTask+0x94>)
 8008c4e:	6818      	ldr	r0, [r3, #0]
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	4619      	mov	r1, r3
 8008c5a:	f7fe ff65 	bl	8007b28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008c5e:	f7ff fa09 	bl	8008074 <xTaskResumeAll>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10a      	bne.n	8008c7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008c68:	4b09      	ldr	r3, [pc, #36]	@ (8008c90 <prvProcessTimerOrBlockTask+0x98>)
 8008c6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c6e:	601a      	str	r2, [r3, #0]
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	f3bf 8f6f 	isb	sy
}
 8008c78:	e001      	b.n	8008c7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008c7a:	f7ff f9fb 	bl	8008074 <xTaskResumeAll>
}
 8008c7e:	bf00      	nop
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	240014c0 	.word	0x240014c0
 8008c8c:	240014c4 	.word	0x240014c4
 8008c90:	e000ed04 	.word	0xe000ed04

08008c94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8008cd8 <prvGetNextExpireTime+0x44>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <prvGetNextExpireTime+0x16>
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	e000      	b.n	8008cac <prvGetNextExpireTime+0x18>
 8008caa:	2200      	movs	r2, #0
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d105      	bne.n	8008cc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cb8:	4b07      	ldr	r3, [pc, #28]	@ (8008cd8 <prvGetNextExpireTime+0x44>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	60fb      	str	r3, [r7, #12]
 8008cc2:	e001      	b.n	8008cc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	240014bc 	.word	0x240014bc

08008cdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008ce4:	f7ff fa64 	bl	80081b0 <xTaskGetTickCount>
 8008ce8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008cea:	4b0b      	ldr	r3, [pc, #44]	@ (8008d18 <prvSampleTimeNow+0x3c>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d205      	bcs.n	8008d00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008cf4:	f000 f93a 	bl	8008f6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	601a      	str	r2, [r3, #0]
 8008cfe:	e002      	b.n	8008d06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008d06:	4a04      	ldr	r2, [pc, #16]	@ (8008d18 <prvSampleTimeNow+0x3c>)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	240014cc 	.word	0x240014cc

08008d1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
 8008d28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d812      	bhi.n	8008d68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	1ad2      	subs	r2, r2, r3
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d302      	bcc.n	8008d56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008d50:	2301      	movs	r3, #1
 8008d52:	617b      	str	r3, [r7, #20]
 8008d54:	e01b      	b.n	8008d8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008d56:	4b10      	ldr	r3, [pc, #64]	@ (8008d98 <prvInsertTimerInActiveList+0x7c>)
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	4619      	mov	r1, r3
 8008d60:	4610      	mov	r0, r2
 8008d62:	f7fe f9b8 	bl	80070d6 <vListInsert>
 8008d66:	e012      	b.n	8008d8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d206      	bcs.n	8008d7e <prvInsertTimerInActiveList+0x62>
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d302      	bcc.n	8008d7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	617b      	str	r3, [r7, #20]
 8008d7c:	e007      	b.n	8008d8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d7e:	4b07      	ldr	r3, [pc, #28]	@ (8008d9c <prvInsertTimerInActiveList+0x80>)
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	3304      	adds	r3, #4
 8008d86:	4619      	mov	r1, r3
 8008d88:	4610      	mov	r0, r2
 8008d8a:	f7fe f9a4 	bl	80070d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008d8e:	697b      	ldr	r3, [r7, #20]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3718      	adds	r7, #24
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	240014c0 	.word	0x240014c0
 8008d9c:	240014bc 	.word	0x240014bc

08008da0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b08e      	sub	sp, #56	@ 0x38
 8008da4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008da6:	e0ce      	b.n	8008f46 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	da19      	bge.n	8008de2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008dae:	1d3b      	adds	r3, r7, #4
 8008db0:	3304      	adds	r3, #4
 8008db2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d10b      	bne.n	8008dd2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	61fb      	str	r3, [r7, #28]
}
 8008dcc:	bf00      	nop
 8008dce:	bf00      	nop
 8008dd0:	e7fd      	b.n	8008dce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008dd8:	6850      	ldr	r0, [r2, #4]
 8008dda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ddc:	6892      	ldr	r2, [r2, #8]
 8008dde:	4611      	mov	r1, r2
 8008de0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f2c0 80ae 	blt.w	8008f46 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df0:	695b      	ldr	r3, [r3, #20]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d004      	beq.n	8008e00 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df8:	3304      	adds	r3, #4
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fe f9a4 	bl	8007148 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e00:	463b      	mov	r3, r7
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7ff ff6a 	bl	8008cdc <prvSampleTimeNow>
 8008e08:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2b09      	cmp	r3, #9
 8008e0e:	f200 8097 	bhi.w	8008f40 <prvProcessReceivedCommands+0x1a0>
 8008e12:	a201      	add	r2, pc, #4	@ (adr r2, 8008e18 <prvProcessReceivedCommands+0x78>)
 8008e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e18:	08008e41 	.word	0x08008e41
 8008e1c:	08008e41 	.word	0x08008e41
 8008e20:	08008e41 	.word	0x08008e41
 8008e24:	08008eb7 	.word	0x08008eb7
 8008e28:	08008ecb 	.word	0x08008ecb
 8008e2c:	08008f17 	.word	0x08008f17
 8008e30:	08008e41 	.word	0x08008e41
 8008e34:	08008e41 	.word	0x08008e41
 8008e38:	08008eb7 	.word	0x08008eb7
 8008e3c:	08008ecb 	.word	0x08008ecb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e46:	f043 0301 	orr.w	r3, r3, #1
 8008e4a:	b2da      	uxtb	r2, r3
 8008e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	18d1      	adds	r1, r2, r3
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e60:	f7ff ff5c 	bl	8008d1c <prvInsertTimerInActiveList>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d06c      	beq.n	8008f44 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e78:	f003 0304 	and.w	r3, r3, #4
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d061      	beq.n	8008f44 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e84:	699b      	ldr	r3, [r3, #24]
 8008e86:	441a      	add	r2, r3
 8008e88:	2300      	movs	r3, #0
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	2100      	movs	r1, #0
 8008e90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e92:	f7ff fe01 	bl	8008a98 <xTimerGenericCommand>
 8008e96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008e98:	6a3b      	ldr	r3, [r7, #32]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d152      	bne.n	8008f44 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea2:	f383 8811 	msr	BASEPRI, r3
 8008ea6:	f3bf 8f6f 	isb	sy
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	61bb      	str	r3, [r7, #24]
}
 8008eb0:	bf00      	nop
 8008eb2:	bf00      	nop
 8008eb4:	e7fd      	b.n	8008eb2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ebc:	f023 0301 	bic.w	r3, r3, #1
 8008ec0:	b2da      	uxtb	r2, r3
 8008ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008ec8:	e03d      	b.n	8008f46 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ecc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ed0:	f043 0301 	orr.w	r3, r3, #1
 8008ed4:	b2da      	uxtb	r2, r3
 8008ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee4:	699b      	ldr	r3, [r3, #24]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d10b      	bne.n	8008f02 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eee:	f383 8811 	msr	BASEPRI, r3
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	f3bf 8f4f 	dsb	sy
 8008efa:	617b      	str	r3, [r7, #20]
}
 8008efc:	bf00      	nop
 8008efe:	bf00      	nop
 8008f00:	e7fd      	b.n	8008efe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f04:	699a      	ldr	r2, [r3, #24]
 8008f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f08:	18d1      	adds	r1, r2, r3
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f10:	f7ff ff04 	bl	8008d1c <prvInsertTimerInActiveList>
					break;
 8008f14:	e017      	b.n	8008f46 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f1c:	f003 0302 	and.w	r3, r3, #2
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d103      	bne.n	8008f2c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008f24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f26:	f000 fbe7 	bl	80096f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008f2a:	e00c      	b.n	8008f46 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f32:	f023 0301 	bic.w	r3, r3, #1
 8008f36:	b2da      	uxtb	r2, r3
 8008f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008f3e:	e002      	b.n	8008f46 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008f40:	bf00      	nop
 8008f42:	e000      	b.n	8008f46 <prvProcessReceivedCommands+0x1a6>
					break;
 8008f44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f46:	4b08      	ldr	r3, [pc, #32]	@ (8008f68 <prvProcessReceivedCommands+0x1c8>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	1d39      	adds	r1, r7, #4
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fe fbce 	bl	80076f0 <xQueueReceive>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f47f af26 	bne.w	8008da8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008f5c:	bf00      	nop
 8008f5e:	bf00      	nop
 8008f60:	3730      	adds	r7, #48	@ 0x30
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	240014c4 	.word	0x240014c4

08008f6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b088      	sub	sp, #32
 8008f70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f72:	e049      	b.n	8009008 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f74:	4b2e      	ldr	r3, [pc, #184]	@ (8009030 <prvSwitchTimerLists+0xc4>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f7e:	4b2c      	ldr	r3, [pc, #176]	@ (8009030 <prvSwitchTimerLists+0xc4>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	3304      	adds	r3, #4
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7fe f8db 	bl	8007148 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6a1b      	ldr	r3, [r3, #32]
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fa0:	f003 0304 	and.w	r3, r3, #4
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d02f      	beq.n	8009008 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	699b      	ldr	r3, [r3, #24]
 8008fac:	693a      	ldr	r2, [r7, #16]
 8008fae:	4413      	add	r3, r2
 8008fb0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d90e      	bls.n	8008fd8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8009030 <prvSwitchTimerLists+0xc4>)
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	3304      	adds	r3, #4
 8008fce:	4619      	mov	r1, r3
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	f7fe f880 	bl	80070d6 <vListInsert>
 8008fd6:	e017      	b.n	8009008 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008fd8:	2300      	movs	r3, #0
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	2300      	movs	r3, #0
 8008fde:	693a      	ldr	r2, [r7, #16]
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f7ff fd58 	bl	8008a98 <xTimerGenericCommand>
 8008fe8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d10b      	bne.n	8009008 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	603b      	str	r3, [r7, #0]
}
 8009002:	bf00      	nop
 8009004:	bf00      	nop
 8009006:	e7fd      	b.n	8009004 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009008:	4b09      	ldr	r3, [pc, #36]	@ (8009030 <prvSwitchTimerLists+0xc4>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d1b0      	bne.n	8008f74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009012:	4b07      	ldr	r3, [pc, #28]	@ (8009030 <prvSwitchTimerLists+0xc4>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009018:	4b06      	ldr	r3, [pc, #24]	@ (8009034 <prvSwitchTimerLists+0xc8>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a04      	ldr	r2, [pc, #16]	@ (8009030 <prvSwitchTimerLists+0xc4>)
 800901e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009020:	4a04      	ldr	r2, [pc, #16]	@ (8009034 <prvSwitchTimerLists+0xc8>)
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	6013      	str	r3, [r2, #0]
}
 8009026:	bf00      	nop
 8009028:	3718      	adds	r7, #24
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	240014bc 	.word	0x240014bc
 8009034:	240014c0 	.word	0x240014c0

08009038 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800903e:	f000 f96b 	bl	8009318 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009042:	4b15      	ldr	r3, [pc, #84]	@ (8009098 <prvCheckForValidListAndQueue+0x60>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d120      	bne.n	800908c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800904a:	4814      	ldr	r0, [pc, #80]	@ (800909c <prvCheckForValidListAndQueue+0x64>)
 800904c:	f7fd fff2 	bl	8007034 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009050:	4813      	ldr	r0, [pc, #76]	@ (80090a0 <prvCheckForValidListAndQueue+0x68>)
 8009052:	f7fd ffef 	bl	8007034 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009056:	4b13      	ldr	r3, [pc, #76]	@ (80090a4 <prvCheckForValidListAndQueue+0x6c>)
 8009058:	4a10      	ldr	r2, [pc, #64]	@ (800909c <prvCheckForValidListAndQueue+0x64>)
 800905a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800905c:	4b12      	ldr	r3, [pc, #72]	@ (80090a8 <prvCheckForValidListAndQueue+0x70>)
 800905e:	4a10      	ldr	r2, [pc, #64]	@ (80090a0 <prvCheckForValidListAndQueue+0x68>)
 8009060:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009062:	2300      	movs	r3, #0
 8009064:	9300      	str	r3, [sp, #0]
 8009066:	4b11      	ldr	r3, [pc, #68]	@ (80090ac <prvCheckForValidListAndQueue+0x74>)
 8009068:	4a11      	ldr	r2, [pc, #68]	@ (80090b0 <prvCheckForValidListAndQueue+0x78>)
 800906a:	2110      	movs	r1, #16
 800906c:	200a      	movs	r0, #10
 800906e:	f7fe f8ff 	bl	8007270 <xQueueGenericCreateStatic>
 8009072:	4603      	mov	r3, r0
 8009074:	4a08      	ldr	r2, [pc, #32]	@ (8009098 <prvCheckForValidListAndQueue+0x60>)
 8009076:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009078:	4b07      	ldr	r3, [pc, #28]	@ (8009098 <prvCheckForValidListAndQueue+0x60>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d005      	beq.n	800908c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009080:	4b05      	ldr	r3, [pc, #20]	@ (8009098 <prvCheckForValidListAndQueue+0x60>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	490b      	ldr	r1, [pc, #44]	@ (80090b4 <prvCheckForValidListAndQueue+0x7c>)
 8009086:	4618      	mov	r0, r3
 8009088:	f7fe fd24 	bl	8007ad4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800908c:	f000 f976 	bl	800937c <vPortExitCritical>
}
 8009090:	bf00      	nop
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	240014c4 	.word	0x240014c4
 800909c:	24001494 	.word	0x24001494
 80090a0:	240014a8 	.word	0x240014a8
 80090a4:	240014bc 	.word	0x240014bc
 80090a8:	240014c0 	.word	0x240014c0
 80090ac:	24001570 	.word	0x24001570
 80090b0:	240014d0 	.word	0x240014d0
 80090b4:	08009b40 	.word	0x08009b40

080090b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	3b04      	subs	r3, #4
 80090c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80090d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	3b04      	subs	r3, #4
 80090d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	f023 0201 	bic.w	r2, r3, #1
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	3b04      	subs	r3, #4
 80090e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80090e8:	4a0c      	ldr	r2, [pc, #48]	@ (800911c <pxPortInitialiseStack+0x64>)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	3b14      	subs	r3, #20
 80090f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	3b04      	subs	r3, #4
 80090fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f06f 0202 	mvn.w	r2, #2
 8009106:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	3b20      	subs	r3, #32
 800910c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800910e:	68fb      	ldr	r3, [r7, #12]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3714      	adds	r7, #20
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	08009121 	.word	0x08009121

08009120 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009126:	2300      	movs	r3, #0
 8009128:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800912a:	4b13      	ldr	r3, [pc, #76]	@ (8009178 <prvTaskExitError+0x58>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009132:	d00b      	beq.n	800914c <prvTaskExitError+0x2c>
	__asm volatile
 8009134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009138:	f383 8811 	msr	BASEPRI, r3
 800913c:	f3bf 8f6f 	isb	sy
 8009140:	f3bf 8f4f 	dsb	sy
 8009144:	60fb      	str	r3, [r7, #12]
}
 8009146:	bf00      	nop
 8009148:	bf00      	nop
 800914a:	e7fd      	b.n	8009148 <prvTaskExitError+0x28>
	__asm volatile
 800914c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009150:	f383 8811 	msr	BASEPRI, r3
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	f3bf 8f4f 	dsb	sy
 800915c:	60bb      	str	r3, [r7, #8]
}
 800915e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009160:	bf00      	nop
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d0fc      	beq.n	8009162 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009168:	bf00      	nop
 800916a:	bf00      	nop
 800916c:	3714      	adds	r7, #20
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	24000010 	.word	0x24000010
 800917c:	00000000 	.word	0x00000000

08009180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009180:	4b07      	ldr	r3, [pc, #28]	@ (80091a0 <pxCurrentTCBConst2>)
 8009182:	6819      	ldr	r1, [r3, #0]
 8009184:	6808      	ldr	r0, [r1, #0]
 8009186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918a:	f380 8809 	msr	PSP, r0
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	f04f 0000 	mov.w	r0, #0
 8009196:	f380 8811 	msr	BASEPRI, r0
 800919a:	4770      	bx	lr
 800919c:	f3af 8000 	nop.w

080091a0 <pxCurrentTCBConst2>:
 80091a0:	24000f94 	.word	0x24000f94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80091a4:	bf00      	nop
 80091a6:	bf00      	nop

080091a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80091a8:	4808      	ldr	r0, [pc, #32]	@ (80091cc <prvPortStartFirstTask+0x24>)
 80091aa:	6800      	ldr	r0, [r0, #0]
 80091ac:	6800      	ldr	r0, [r0, #0]
 80091ae:	f380 8808 	msr	MSP, r0
 80091b2:	f04f 0000 	mov.w	r0, #0
 80091b6:	f380 8814 	msr	CONTROL, r0
 80091ba:	b662      	cpsie	i
 80091bc:	b661      	cpsie	f
 80091be:	f3bf 8f4f 	dsb	sy
 80091c2:	f3bf 8f6f 	isb	sy
 80091c6:	df00      	svc	0
 80091c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80091ca:	bf00      	nop
 80091cc:	e000ed08 	.word	0xe000ed08

080091d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80091d6:	4b47      	ldr	r3, [pc, #284]	@ (80092f4 <xPortStartScheduler+0x124>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a47      	ldr	r2, [pc, #284]	@ (80092f8 <xPortStartScheduler+0x128>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d10b      	bne.n	80091f8 <xPortStartScheduler+0x28>
	__asm volatile
 80091e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	613b      	str	r3, [r7, #16]
}
 80091f2:	bf00      	nop
 80091f4:	bf00      	nop
 80091f6:	e7fd      	b.n	80091f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80091f8:	4b3e      	ldr	r3, [pc, #248]	@ (80092f4 <xPortStartScheduler+0x124>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a3f      	ldr	r2, [pc, #252]	@ (80092fc <xPortStartScheduler+0x12c>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d10b      	bne.n	800921a <xPortStartScheduler+0x4a>
	__asm volatile
 8009202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009206:	f383 8811 	msr	BASEPRI, r3
 800920a:	f3bf 8f6f 	isb	sy
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	60fb      	str	r3, [r7, #12]
}
 8009214:	bf00      	nop
 8009216:	bf00      	nop
 8009218:	e7fd      	b.n	8009216 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800921a:	4b39      	ldr	r3, [pc, #228]	@ (8009300 <xPortStartScheduler+0x130>)
 800921c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	b2db      	uxtb	r3, r3
 8009224:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	22ff      	movs	r2, #255	@ 0xff
 800922a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	b2db      	uxtb	r3, r3
 8009232:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009234:	78fb      	ldrb	r3, [r7, #3]
 8009236:	b2db      	uxtb	r3, r3
 8009238:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800923c:	b2da      	uxtb	r2, r3
 800923e:	4b31      	ldr	r3, [pc, #196]	@ (8009304 <xPortStartScheduler+0x134>)
 8009240:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009242:	4b31      	ldr	r3, [pc, #196]	@ (8009308 <xPortStartScheduler+0x138>)
 8009244:	2207      	movs	r2, #7
 8009246:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009248:	e009      	b.n	800925e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800924a:	4b2f      	ldr	r3, [pc, #188]	@ (8009308 <xPortStartScheduler+0x138>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	3b01      	subs	r3, #1
 8009250:	4a2d      	ldr	r2, [pc, #180]	@ (8009308 <xPortStartScheduler+0x138>)
 8009252:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009254:	78fb      	ldrb	r3, [r7, #3]
 8009256:	b2db      	uxtb	r3, r3
 8009258:	005b      	lsls	r3, r3, #1
 800925a:	b2db      	uxtb	r3, r3
 800925c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800925e:	78fb      	ldrb	r3, [r7, #3]
 8009260:	b2db      	uxtb	r3, r3
 8009262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009266:	2b80      	cmp	r3, #128	@ 0x80
 8009268:	d0ef      	beq.n	800924a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800926a:	4b27      	ldr	r3, [pc, #156]	@ (8009308 <xPortStartScheduler+0x138>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f1c3 0307 	rsb	r3, r3, #7
 8009272:	2b04      	cmp	r3, #4
 8009274:	d00b      	beq.n	800928e <xPortStartScheduler+0xbe>
	__asm volatile
 8009276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800927a:	f383 8811 	msr	BASEPRI, r3
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	60bb      	str	r3, [r7, #8]
}
 8009288:	bf00      	nop
 800928a:	bf00      	nop
 800928c:	e7fd      	b.n	800928a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800928e:	4b1e      	ldr	r3, [pc, #120]	@ (8009308 <xPortStartScheduler+0x138>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	021b      	lsls	r3, r3, #8
 8009294:	4a1c      	ldr	r2, [pc, #112]	@ (8009308 <xPortStartScheduler+0x138>)
 8009296:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009298:	4b1b      	ldr	r3, [pc, #108]	@ (8009308 <xPortStartScheduler+0x138>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80092a0:	4a19      	ldr	r2, [pc, #100]	@ (8009308 <xPortStartScheduler+0x138>)
 80092a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	b2da      	uxtb	r2, r3
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80092ac:	4b17      	ldr	r3, [pc, #92]	@ (800930c <xPortStartScheduler+0x13c>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a16      	ldr	r2, [pc, #88]	@ (800930c <xPortStartScheduler+0x13c>)
 80092b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80092b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80092b8:	4b14      	ldr	r3, [pc, #80]	@ (800930c <xPortStartScheduler+0x13c>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a13      	ldr	r2, [pc, #76]	@ (800930c <xPortStartScheduler+0x13c>)
 80092be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80092c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80092c4:	f000 f8da 	bl	800947c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80092c8:	4b11      	ldr	r3, [pc, #68]	@ (8009310 <xPortStartScheduler+0x140>)
 80092ca:	2200      	movs	r2, #0
 80092cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80092ce:	f000 f8f9 	bl	80094c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80092d2:	4b10      	ldr	r3, [pc, #64]	@ (8009314 <xPortStartScheduler+0x144>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a0f      	ldr	r2, [pc, #60]	@ (8009314 <xPortStartScheduler+0x144>)
 80092d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80092dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80092de:	f7ff ff63 	bl	80091a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80092e2:	f7ff f82f 	bl	8008344 <vTaskSwitchContext>
	prvTaskExitError();
 80092e6:	f7ff ff1b 	bl	8009120 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3718      	adds	r7, #24
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	e000ed00 	.word	0xe000ed00
 80092f8:	410fc271 	.word	0x410fc271
 80092fc:	410fc270 	.word	0x410fc270
 8009300:	e000e400 	.word	0xe000e400
 8009304:	240015c0 	.word	0x240015c0
 8009308:	240015c4 	.word	0x240015c4
 800930c:	e000ed20 	.word	0xe000ed20
 8009310:	24000010 	.word	0x24000010
 8009314:	e000ef34 	.word	0xe000ef34

08009318 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
	__asm volatile
 800931e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009322:	f383 8811 	msr	BASEPRI, r3
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	607b      	str	r3, [r7, #4]
}
 8009330:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009332:	4b10      	ldr	r3, [pc, #64]	@ (8009374 <vPortEnterCritical+0x5c>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	3301      	adds	r3, #1
 8009338:	4a0e      	ldr	r2, [pc, #56]	@ (8009374 <vPortEnterCritical+0x5c>)
 800933a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800933c:	4b0d      	ldr	r3, [pc, #52]	@ (8009374 <vPortEnterCritical+0x5c>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d110      	bne.n	8009366 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009344:	4b0c      	ldr	r3, [pc, #48]	@ (8009378 <vPortEnterCritical+0x60>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	b2db      	uxtb	r3, r3
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00b      	beq.n	8009366 <vPortEnterCritical+0x4e>
	__asm volatile
 800934e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009352:	f383 8811 	msr	BASEPRI, r3
 8009356:	f3bf 8f6f 	isb	sy
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	603b      	str	r3, [r7, #0]
}
 8009360:	bf00      	nop
 8009362:	bf00      	nop
 8009364:	e7fd      	b.n	8009362 <vPortEnterCritical+0x4a>
	}
}
 8009366:	bf00      	nop
 8009368:	370c      	adds	r7, #12
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	24000010 	.word	0x24000010
 8009378:	e000ed04 	.word	0xe000ed04

0800937c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009382:	4b12      	ldr	r3, [pc, #72]	@ (80093cc <vPortExitCritical+0x50>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d10b      	bne.n	80093a2 <vPortExitCritical+0x26>
	__asm volatile
 800938a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800938e:	f383 8811 	msr	BASEPRI, r3
 8009392:	f3bf 8f6f 	isb	sy
 8009396:	f3bf 8f4f 	dsb	sy
 800939a:	607b      	str	r3, [r7, #4]
}
 800939c:	bf00      	nop
 800939e:	bf00      	nop
 80093a0:	e7fd      	b.n	800939e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80093a2:	4b0a      	ldr	r3, [pc, #40]	@ (80093cc <vPortExitCritical+0x50>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	3b01      	subs	r3, #1
 80093a8:	4a08      	ldr	r2, [pc, #32]	@ (80093cc <vPortExitCritical+0x50>)
 80093aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80093ac:	4b07      	ldr	r3, [pc, #28]	@ (80093cc <vPortExitCritical+0x50>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d105      	bne.n	80093c0 <vPortExitCritical+0x44>
 80093b4:	2300      	movs	r3, #0
 80093b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	f383 8811 	msr	BASEPRI, r3
}
 80093be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr
 80093cc:	24000010 	.word	0x24000010

080093d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80093d0:	f3ef 8009 	mrs	r0, PSP
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	4b15      	ldr	r3, [pc, #84]	@ (8009430 <pxCurrentTCBConst>)
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	f01e 0f10 	tst.w	lr, #16
 80093e0:	bf08      	it	eq
 80093e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80093e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ea:	6010      	str	r0, [r2, #0]
 80093ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80093f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80093f4:	f380 8811 	msr	BASEPRI, r0
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f7fe ffa0 	bl	8008344 <vTaskSwitchContext>
 8009404:	f04f 0000 	mov.w	r0, #0
 8009408:	f380 8811 	msr	BASEPRI, r0
 800940c:	bc09      	pop	{r0, r3}
 800940e:	6819      	ldr	r1, [r3, #0]
 8009410:	6808      	ldr	r0, [r1, #0]
 8009412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009416:	f01e 0f10 	tst.w	lr, #16
 800941a:	bf08      	it	eq
 800941c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009420:	f380 8809 	msr	PSP, r0
 8009424:	f3bf 8f6f 	isb	sy
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	f3af 8000 	nop.w

08009430 <pxCurrentTCBConst>:
 8009430:	24000f94 	.word	0x24000f94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009434:	bf00      	nop
 8009436:	bf00      	nop

08009438 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
	__asm volatile
 800943e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	607b      	str	r3, [r7, #4]
}
 8009450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009452:	f7fe febd 	bl	80081d0 <xTaskIncrementTick>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d003      	beq.n	8009464 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800945c:	4b06      	ldr	r3, [pc, #24]	@ (8009478 <xPortSysTickHandler+0x40>)
 800945e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009462:	601a      	str	r2, [r3, #0]
 8009464:	2300      	movs	r3, #0
 8009466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	f383 8811 	msr	BASEPRI, r3
}
 800946e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009470:	bf00      	nop
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	e000ed04 	.word	0xe000ed04

0800947c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800947c:	b480      	push	{r7}
 800947e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009480:	4b0b      	ldr	r3, [pc, #44]	@ (80094b0 <vPortSetupTimerInterrupt+0x34>)
 8009482:	2200      	movs	r2, #0
 8009484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009486:	4b0b      	ldr	r3, [pc, #44]	@ (80094b4 <vPortSetupTimerInterrupt+0x38>)
 8009488:	2200      	movs	r2, #0
 800948a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800948c:	4b0a      	ldr	r3, [pc, #40]	@ (80094b8 <vPortSetupTimerInterrupt+0x3c>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a0a      	ldr	r2, [pc, #40]	@ (80094bc <vPortSetupTimerInterrupt+0x40>)
 8009492:	fba2 2303 	umull	r2, r3, r2, r3
 8009496:	099b      	lsrs	r3, r3, #6
 8009498:	4a09      	ldr	r2, [pc, #36]	@ (80094c0 <vPortSetupTimerInterrupt+0x44>)
 800949a:	3b01      	subs	r3, #1
 800949c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800949e:	4b04      	ldr	r3, [pc, #16]	@ (80094b0 <vPortSetupTimerInterrupt+0x34>)
 80094a0:	2207      	movs	r2, #7
 80094a2:	601a      	str	r2, [r3, #0]
}
 80094a4:	bf00      	nop
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr
 80094ae:	bf00      	nop
 80094b0:	e000e010 	.word	0xe000e010
 80094b4:	e000e018 	.word	0xe000e018
 80094b8:	24000000 	.word	0x24000000
 80094bc:	10624dd3 	.word	0x10624dd3
 80094c0:	e000e014 	.word	0xe000e014

080094c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80094c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80094d4 <vPortEnableVFP+0x10>
 80094c8:	6801      	ldr	r1, [r0, #0]
 80094ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80094ce:	6001      	str	r1, [r0, #0]
 80094d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80094d2:	bf00      	nop
 80094d4:	e000ed88 	.word	0xe000ed88

080094d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80094de:	f3ef 8305 	mrs	r3, IPSR
 80094e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2b0f      	cmp	r3, #15
 80094e8:	d915      	bls.n	8009516 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80094ea:	4a18      	ldr	r2, [pc, #96]	@ (800954c <vPortValidateInterruptPriority+0x74>)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	4413      	add	r3, r2
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80094f4:	4b16      	ldr	r3, [pc, #88]	@ (8009550 <vPortValidateInterruptPriority+0x78>)
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	7afa      	ldrb	r2, [r7, #11]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d20b      	bcs.n	8009516 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80094fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009502:	f383 8811 	msr	BASEPRI, r3
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	607b      	str	r3, [r7, #4]
}
 8009510:	bf00      	nop
 8009512:	bf00      	nop
 8009514:	e7fd      	b.n	8009512 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009516:	4b0f      	ldr	r3, [pc, #60]	@ (8009554 <vPortValidateInterruptPriority+0x7c>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800951e:	4b0e      	ldr	r3, [pc, #56]	@ (8009558 <vPortValidateInterruptPriority+0x80>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	429a      	cmp	r2, r3
 8009524:	d90b      	bls.n	800953e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800952a:	f383 8811 	msr	BASEPRI, r3
 800952e:	f3bf 8f6f 	isb	sy
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	603b      	str	r3, [r7, #0]
}
 8009538:	bf00      	nop
 800953a:	bf00      	nop
 800953c:	e7fd      	b.n	800953a <vPortValidateInterruptPriority+0x62>
	}
 800953e:	bf00      	nop
 8009540:	3714      	adds	r7, #20
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	e000e3f0 	.word	0xe000e3f0
 8009550:	240015c0 	.word	0x240015c0
 8009554:	e000ed0c 	.word	0xe000ed0c
 8009558:	240015c4 	.word	0x240015c4

0800955c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b08a      	sub	sp, #40	@ 0x28
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009564:	2300      	movs	r3, #0
 8009566:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009568:	f7fe fd76 	bl	8008058 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800956c:	4b5c      	ldr	r3, [pc, #368]	@ (80096e0 <pvPortMalloc+0x184>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d101      	bne.n	8009578 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009574:	f000 f924 	bl	80097c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009578:	4b5a      	ldr	r3, [pc, #360]	@ (80096e4 <pvPortMalloc+0x188>)
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	4013      	ands	r3, r2
 8009580:	2b00      	cmp	r3, #0
 8009582:	f040 8095 	bne.w	80096b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d01e      	beq.n	80095ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800958c:	2208      	movs	r2, #8
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4413      	add	r3, r2
 8009592:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f003 0307 	and.w	r3, r3, #7
 800959a:	2b00      	cmp	r3, #0
 800959c:	d015      	beq.n	80095ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f023 0307 	bic.w	r3, r3, #7
 80095a4:	3308      	adds	r3, #8
 80095a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f003 0307 	and.w	r3, r3, #7
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00b      	beq.n	80095ca <pvPortMalloc+0x6e>
	__asm volatile
 80095b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b6:	f383 8811 	msr	BASEPRI, r3
 80095ba:	f3bf 8f6f 	isb	sy
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	617b      	str	r3, [r7, #20]
}
 80095c4:	bf00      	nop
 80095c6:	bf00      	nop
 80095c8:	e7fd      	b.n	80095c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d06f      	beq.n	80096b0 <pvPortMalloc+0x154>
 80095d0:	4b45      	ldr	r3, [pc, #276]	@ (80096e8 <pvPortMalloc+0x18c>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d86a      	bhi.n	80096b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80095da:	4b44      	ldr	r3, [pc, #272]	@ (80096ec <pvPortMalloc+0x190>)
 80095dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80095de:	4b43      	ldr	r3, [pc, #268]	@ (80096ec <pvPortMalloc+0x190>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095e4:	e004      	b.n	80095f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80095e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80095ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d903      	bls.n	8009602 <pvPortMalloc+0xa6>
 80095fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1f1      	bne.n	80095e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009602:	4b37      	ldr	r3, [pc, #220]	@ (80096e0 <pvPortMalloc+0x184>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009608:	429a      	cmp	r2, r3
 800960a:	d051      	beq.n	80096b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800960c:	6a3b      	ldr	r3, [r7, #32]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2208      	movs	r2, #8
 8009612:	4413      	add	r3, r2
 8009614:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	6a3b      	ldr	r3, [r7, #32]
 800961c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800961e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009620:	685a      	ldr	r2, [r3, #4]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	1ad2      	subs	r2, r2, r3
 8009626:	2308      	movs	r3, #8
 8009628:	005b      	lsls	r3, r3, #1
 800962a:	429a      	cmp	r2, r3
 800962c:	d920      	bls.n	8009670 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800962e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4413      	add	r3, r2
 8009634:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	f003 0307 	and.w	r3, r3, #7
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00b      	beq.n	8009658 <pvPortMalloc+0xfc>
	__asm volatile
 8009640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	613b      	str	r3, [r7, #16]
}
 8009652:	bf00      	nop
 8009654:	bf00      	nop
 8009656:	e7fd      	b.n	8009654 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	1ad2      	subs	r2, r2, r3
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800966a:	69b8      	ldr	r0, [r7, #24]
 800966c:	f000 f90a 	bl	8009884 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009670:	4b1d      	ldr	r3, [pc, #116]	@ (80096e8 <pvPortMalloc+0x18c>)
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	1ad3      	subs	r3, r2, r3
 800967a:	4a1b      	ldr	r2, [pc, #108]	@ (80096e8 <pvPortMalloc+0x18c>)
 800967c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800967e:	4b1a      	ldr	r3, [pc, #104]	@ (80096e8 <pvPortMalloc+0x18c>)
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	4b1b      	ldr	r3, [pc, #108]	@ (80096f0 <pvPortMalloc+0x194>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	429a      	cmp	r2, r3
 8009688:	d203      	bcs.n	8009692 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800968a:	4b17      	ldr	r3, [pc, #92]	@ (80096e8 <pvPortMalloc+0x18c>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a18      	ldr	r2, [pc, #96]	@ (80096f0 <pvPortMalloc+0x194>)
 8009690:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009694:	685a      	ldr	r2, [r3, #4]
 8009696:	4b13      	ldr	r3, [pc, #76]	@ (80096e4 <pvPortMalloc+0x188>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	431a      	orrs	r2, r3
 800969c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80096a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a2:	2200      	movs	r2, #0
 80096a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80096a6:	4b13      	ldr	r3, [pc, #76]	@ (80096f4 <pvPortMalloc+0x198>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	3301      	adds	r3, #1
 80096ac:	4a11      	ldr	r2, [pc, #68]	@ (80096f4 <pvPortMalloc+0x198>)
 80096ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80096b0:	f7fe fce0 	bl	8008074 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	f003 0307 	and.w	r3, r3, #7
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00b      	beq.n	80096d6 <pvPortMalloc+0x17a>
	__asm volatile
 80096be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c2:	f383 8811 	msr	BASEPRI, r3
 80096c6:	f3bf 8f6f 	isb	sy
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	60fb      	str	r3, [r7, #12]
}
 80096d0:	bf00      	nop
 80096d2:	bf00      	nop
 80096d4:	e7fd      	b.n	80096d2 <pvPortMalloc+0x176>
	return pvReturn;
 80096d6:	69fb      	ldr	r3, [r7, #28]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3728      	adds	r7, #40	@ 0x28
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	240051d0 	.word	0x240051d0
 80096e4:	240051e4 	.word	0x240051e4
 80096e8:	240051d4 	.word	0x240051d4
 80096ec:	240051c8 	.word	0x240051c8
 80096f0:	240051d8 	.word	0x240051d8
 80096f4:	240051dc 	.word	0x240051dc

080096f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b086      	sub	sp, #24
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d04f      	beq.n	80097aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800970a:	2308      	movs	r3, #8
 800970c:	425b      	negs	r3, r3
 800970e:	697a      	ldr	r2, [r7, #20]
 8009710:	4413      	add	r3, r2
 8009712:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	685a      	ldr	r2, [r3, #4]
 800971c:	4b25      	ldr	r3, [pc, #148]	@ (80097b4 <vPortFree+0xbc>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4013      	ands	r3, r2
 8009722:	2b00      	cmp	r3, #0
 8009724:	d10b      	bne.n	800973e <vPortFree+0x46>
	__asm volatile
 8009726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800972a:	f383 8811 	msr	BASEPRI, r3
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f3bf 8f4f 	dsb	sy
 8009736:	60fb      	str	r3, [r7, #12]
}
 8009738:	bf00      	nop
 800973a:	bf00      	nop
 800973c:	e7fd      	b.n	800973a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00b      	beq.n	800975e <vPortFree+0x66>
	__asm volatile
 8009746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800974a:	f383 8811 	msr	BASEPRI, r3
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	60bb      	str	r3, [r7, #8]
}
 8009758:	bf00      	nop
 800975a:	bf00      	nop
 800975c:	e7fd      	b.n	800975a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	685a      	ldr	r2, [r3, #4]
 8009762:	4b14      	ldr	r3, [pc, #80]	@ (80097b4 <vPortFree+0xbc>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4013      	ands	r3, r2
 8009768:	2b00      	cmp	r3, #0
 800976a:	d01e      	beq.n	80097aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d11a      	bne.n	80097aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	685a      	ldr	r2, [r3, #4]
 8009778:	4b0e      	ldr	r3, [pc, #56]	@ (80097b4 <vPortFree+0xbc>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	43db      	mvns	r3, r3
 800977e:	401a      	ands	r2, r3
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009784:	f7fe fc68 	bl	8008058 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	685a      	ldr	r2, [r3, #4]
 800978c:	4b0a      	ldr	r3, [pc, #40]	@ (80097b8 <vPortFree+0xc0>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4413      	add	r3, r2
 8009792:	4a09      	ldr	r2, [pc, #36]	@ (80097b8 <vPortFree+0xc0>)
 8009794:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009796:	6938      	ldr	r0, [r7, #16]
 8009798:	f000 f874 	bl	8009884 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800979c:	4b07      	ldr	r3, [pc, #28]	@ (80097bc <vPortFree+0xc4>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	3301      	adds	r3, #1
 80097a2:	4a06      	ldr	r2, [pc, #24]	@ (80097bc <vPortFree+0xc4>)
 80097a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80097a6:	f7fe fc65 	bl	8008074 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80097aa:	bf00      	nop
 80097ac:	3718      	adds	r7, #24
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	240051e4 	.word	0x240051e4
 80097b8:	240051d4 	.word	0x240051d4
 80097bc:	240051e0 	.word	0x240051e0

080097c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80097c0:	b480      	push	{r7}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80097c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80097ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80097cc:	4b27      	ldr	r3, [pc, #156]	@ (800986c <prvHeapInit+0xac>)
 80097ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f003 0307 	and.w	r3, r3, #7
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00c      	beq.n	80097f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	3307      	adds	r3, #7
 80097de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f023 0307 	bic.w	r3, r3, #7
 80097e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80097e8:	68ba      	ldr	r2, [r7, #8]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	1ad3      	subs	r3, r2, r3
 80097ee:	4a1f      	ldr	r2, [pc, #124]	@ (800986c <prvHeapInit+0xac>)
 80097f0:	4413      	add	r3, r2
 80097f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80097f8:	4a1d      	ldr	r2, [pc, #116]	@ (8009870 <prvHeapInit+0xb0>)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80097fe:	4b1c      	ldr	r3, [pc, #112]	@ (8009870 <prvHeapInit+0xb0>)
 8009800:	2200      	movs	r2, #0
 8009802:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	68ba      	ldr	r2, [r7, #8]
 8009808:	4413      	add	r3, r2
 800980a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800980c:	2208      	movs	r2, #8
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	1a9b      	subs	r3, r3, r2
 8009812:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f023 0307 	bic.w	r3, r3, #7
 800981a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	4a15      	ldr	r2, [pc, #84]	@ (8009874 <prvHeapInit+0xb4>)
 8009820:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009822:	4b14      	ldr	r3, [pc, #80]	@ (8009874 <prvHeapInit+0xb4>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2200      	movs	r2, #0
 8009828:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800982a:	4b12      	ldr	r3, [pc, #72]	@ (8009874 <prvHeapInit+0xb4>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2200      	movs	r2, #0
 8009830:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	1ad2      	subs	r2, r2, r3
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009840:	4b0c      	ldr	r3, [pc, #48]	@ (8009874 <prvHeapInit+0xb4>)
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	4a0a      	ldr	r2, [pc, #40]	@ (8009878 <prvHeapInit+0xb8>)
 800984e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	4a09      	ldr	r2, [pc, #36]	@ (800987c <prvHeapInit+0xbc>)
 8009856:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009858:	4b09      	ldr	r3, [pc, #36]	@ (8009880 <prvHeapInit+0xc0>)
 800985a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800985e:	601a      	str	r2, [r3, #0]
}
 8009860:	bf00      	nop
 8009862:	3714      	adds	r7, #20
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr
 800986c:	240015c8 	.word	0x240015c8
 8009870:	240051c8 	.word	0x240051c8
 8009874:	240051d0 	.word	0x240051d0
 8009878:	240051d8 	.word	0x240051d8
 800987c:	240051d4 	.word	0x240051d4
 8009880:	240051e4 	.word	0x240051e4

08009884 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800988c:	4b28      	ldr	r3, [pc, #160]	@ (8009930 <prvInsertBlockIntoFreeList+0xac>)
 800988e:	60fb      	str	r3, [r7, #12]
 8009890:	e002      	b.n	8009898 <prvInsertBlockIntoFreeList+0x14>
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	60fb      	str	r3, [r7, #12]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d8f7      	bhi.n	8009892 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	4413      	add	r3, r2
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d108      	bne.n	80098c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	685a      	ldr	r2, [r3, #4]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	441a      	add	r2, r3
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	68ba      	ldr	r2, [r7, #8]
 80098d0:	441a      	add	r2, r3
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d118      	bne.n	800990c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	4b15      	ldr	r3, [pc, #84]	@ (8009934 <prvInsertBlockIntoFreeList+0xb0>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d00d      	beq.n	8009902 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	685a      	ldr	r2, [r3, #4]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	441a      	add	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	601a      	str	r2, [r3, #0]
 8009900:	e008      	b.n	8009914 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009902:	4b0c      	ldr	r3, [pc, #48]	@ (8009934 <prvInsertBlockIntoFreeList+0xb0>)
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	601a      	str	r2, [r3, #0]
 800990a:	e003      	b.n	8009914 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681a      	ldr	r2, [r3, #0]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	429a      	cmp	r2, r3
 800991a:	d002      	beq.n	8009922 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009922:	bf00      	nop
 8009924:	3714      	adds	r7, #20
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	240051c8 	.word	0x240051c8
 8009934:	240051d0 	.word	0x240051d0

08009938 <memset>:
 8009938:	4402      	add	r2, r0
 800993a:	4603      	mov	r3, r0
 800993c:	4293      	cmp	r3, r2
 800993e:	d100      	bne.n	8009942 <memset+0xa>
 8009940:	4770      	bx	lr
 8009942:	f803 1b01 	strb.w	r1, [r3], #1
 8009946:	e7f9      	b.n	800993c <memset+0x4>

08009948 <_reclaim_reent>:
 8009948:	4b29      	ldr	r3, [pc, #164]	@ (80099f0 <_reclaim_reent+0xa8>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4283      	cmp	r3, r0
 800994e:	b570      	push	{r4, r5, r6, lr}
 8009950:	4604      	mov	r4, r0
 8009952:	d04b      	beq.n	80099ec <_reclaim_reent+0xa4>
 8009954:	69c3      	ldr	r3, [r0, #28]
 8009956:	b1ab      	cbz	r3, 8009984 <_reclaim_reent+0x3c>
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	b16b      	cbz	r3, 8009978 <_reclaim_reent+0x30>
 800995c:	2500      	movs	r5, #0
 800995e:	69e3      	ldr	r3, [r4, #28]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	5959      	ldr	r1, [r3, r5]
 8009964:	2900      	cmp	r1, #0
 8009966:	d13b      	bne.n	80099e0 <_reclaim_reent+0x98>
 8009968:	3504      	adds	r5, #4
 800996a:	2d80      	cmp	r5, #128	@ 0x80
 800996c:	d1f7      	bne.n	800995e <_reclaim_reent+0x16>
 800996e:	69e3      	ldr	r3, [r4, #28]
 8009970:	4620      	mov	r0, r4
 8009972:	68d9      	ldr	r1, [r3, #12]
 8009974:	f000 f872 	bl	8009a5c <_free_r>
 8009978:	69e3      	ldr	r3, [r4, #28]
 800997a:	6819      	ldr	r1, [r3, #0]
 800997c:	b111      	cbz	r1, 8009984 <_reclaim_reent+0x3c>
 800997e:	4620      	mov	r0, r4
 8009980:	f000 f86c 	bl	8009a5c <_free_r>
 8009984:	6961      	ldr	r1, [r4, #20]
 8009986:	b111      	cbz	r1, 800998e <_reclaim_reent+0x46>
 8009988:	4620      	mov	r0, r4
 800998a:	f000 f867 	bl	8009a5c <_free_r>
 800998e:	69e1      	ldr	r1, [r4, #28]
 8009990:	b111      	cbz	r1, 8009998 <_reclaim_reent+0x50>
 8009992:	4620      	mov	r0, r4
 8009994:	f000 f862 	bl	8009a5c <_free_r>
 8009998:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800999a:	b111      	cbz	r1, 80099a2 <_reclaim_reent+0x5a>
 800999c:	4620      	mov	r0, r4
 800999e:	f000 f85d 	bl	8009a5c <_free_r>
 80099a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80099a4:	b111      	cbz	r1, 80099ac <_reclaim_reent+0x64>
 80099a6:	4620      	mov	r0, r4
 80099a8:	f000 f858 	bl	8009a5c <_free_r>
 80099ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80099ae:	b111      	cbz	r1, 80099b6 <_reclaim_reent+0x6e>
 80099b0:	4620      	mov	r0, r4
 80099b2:	f000 f853 	bl	8009a5c <_free_r>
 80099b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80099b8:	b111      	cbz	r1, 80099c0 <_reclaim_reent+0x78>
 80099ba:	4620      	mov	r0, r4
 80099bc:	f000 f84e 	bl	8009a5c <_free_r>
 80099c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80099c2:	b111      	cbz	r1, 80099ca <_reclaim_reent+0x82>
 80099c4:	4620      	mov	r0, r4
 80099c6:	f000 f849 	bl	8009a5c <_free_r>
 80099ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80099cc:	b111      	cbz	r1, 80099d4 <_reclaim_reent+0x8c>
 80099ce:	4620      	mov	r0, r4
 80099d0:	f000 f844 	bl	8009a5c <_free_r>
 80099d4:	6a23      	ldr	r3, [r4, #32]
 80099d6:	b14b      	cbz	r3, 80099ec <_reclaim_reent+0xa4>
 80099d8:	4620      	mov	r0, r4
 80099da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80099de:	4718      	bx	r3
 80099e0:	680e      	ldr	r6, [r1, #0]
 80099e2:	4620      	mov	r0, r4
 80099e4:	f000 f83a 	bl	8009a5c <_free_r>
 80099e8:	4631      	mov	r1, r6
 80099ea:	e7bb      	b.n	8009964 <_reclaim_reent+0x1c>
 80099ec:	bd70      	pop	{r4, r5, r6, pc}
 80099ee:	bf00      	nop
 80099f0:	24000014 	.word	0x24000014

080099f4 <__libc_init_array>:
 80099f4:	b570      	push	{r4, r5, r6, lr}
 80099f6:	4d0d      	ldr	r5, [pc, #52]	@ (8009a2c <__libc_init_array+0x38>)
 80099f8:	4c0d      	ldr	r4, [pc, #52]	@ (8009a30 <__libc_init_array+0x3c>)
 80099fa:	1b64      	subs	r4, r4, r5
 80099fc:	10a4      	asrs	r4, r4, #2
 80099fe:	2600      	movs	r6, #0
 8009a00:	42a6      	cmp	r6, r4
 8009a02:	d109      	bne.n	8009a18 <__libc_init_array+0x24>
 8009a04:	4d0b      	ldr	r5, [pc, #44]	@ (8009a34 <__libc_init_array+0x40>)
 8009a06:	4c0c      	ldr	r4, [pc, #48]	@ (8009a38 <__libc_init_array+0x44>)
 8009a08:	f000 f87e 	bl	8009b08 <_init>
 8009a0c:	1b64      	subs	r4, r4, r5
 8009a0e:	10a4      	asrs	r4, r4, #2
 8009a10:	2600      	movs	r6, #0
 8009a12:	42a6      	cmp	r6, r4
 8009a14:	d105      	bne.n	8009a22 <__libc_init_array+0x2e>
 8009a16:	bd70      	pop	{r4, r5, r6, pc}
 8009a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a1c:	4798      	blx	r3
 8009a1e:	3601      	adds	r6, #1
 8009a20:	e7ee      	b.n	8009a00 <__libc_init_array+0xc>
 8009a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a26:	4798      	blx	r3
 8009a28:	3601      	adds	r6, #1
 8009a2a:	e7f2      	b.n	8009a12 <__libc_init_array+0x1e>
 8009a2c:	08009bd0 	.word	0x08009bd0
 8009a30:	08009bd0 	.word	0x08009bd0
 8009a34:	08009bd0 	.word	0x08009bd0
 8009a38:	08009bd4 	.word	0x08009bd4

08009a3c <__retarget_lock_acquire_recursive>:
 8009a3c:	4770      	bx	lr

08009a3e <__retarget_lock_release_recursive>:
 8009a3e:	4770      	bx	lr

08009a40 <memcpy>:
 8009a40:	440a      	add	r2, r1
 8009a42:	4291      	cmp	r1, r2
 8009a44:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009a48:	d100      	bne.n	8009a4c <memcpy+0xc>
 8009a4a:	4770      	bx	lr
 8009a4c:	b510      	push	{r4, lr}
 8009a4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a56:	4291      	cmp	r1, r2
 8009a58:	d1f9      	bne.n	8009a4e <memcpy+0xe>
 8009a5a:	bd10      	pop	{r4, pc}

08009a5c <_free_r>:
 8009a5c:	b538      	push	{r3, r4, r5, lr}
 8009a5e:	4605      	mov	r5, r0
 8009a60:	2900      	cmp	r1, #0
 8009a62:	d041      	beq.n	8009ae8 <_free_r+0x8c>
 8009a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a68:	1f0c      	subs	r4, r1, #4
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	bfb8      	it	lt
 8009a6e:	18e4      	addlt	r4, r4, r3
 8009a70:	f000 f83e 	bl	8009af0 <__malloc_lock>
 8009a74:	4a1d      	ldr	r2, [pc, #116]	@ (8009aec <_free_r+0x90>)
 8009a76:	6813      	ldr	r3, [r2, #0]
 8009a78:	b933      	cbnz	r3, 8009a88 <_free_r+0x2c>
 8009a7a:	6063      	str	r3, [r4, #4]
 8009a7c:	6014      	str	r4, [r2, #0]
 8009a7e:	4628      	mov	r0, r5
 8009a80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a84:	f000 b83a 	b.w	8009afc <__malloc_unlock>
 8009a88:	42a3      	cmp	r3, r4
 8009a8a:	d908      	bls.n	8009a9e <_free_r+0x42>
 8009a8c:	6820      	ldr	r0, [r4, #0]
 8009a8e:	1821      	adds	r1, r4, r0
 8009a90:	428b      	cmp	r3, r1
 8009a92:	bf01      	itttt	eq
 8009a94:	6819      	ldreq	r1, [r3, #0]
 8009a96:	685b      	ldreq	r3, [r3, #4]
 8009a98:	1809      	addeq	r1, r1, r0
 8009a9a:	6021      	streq	r1, [r4, #0]
 8009a9c:	e7ed      	b.n	8009a7a <_free_r+0x1e>
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	b10b      	cbz	r3, 8009aa8 <_free_r+0x4c>
 8009aa4:	42a3      	cmp	r3, r4
 8009aa6:	d9fa      	bls.n	8009a9e <_free_r+0x42>
 8009aa8:	6811      	ldr	r1, [r2, #0]
 8009aaa:	1850      	adds	r0, r2, r1
 8009aac:	42a0      	cmp	r0, r4
 8009aae:	d10b      	bne.n	8009ac8 <_free_r+0x6c>
 8009ab0:	6820      	ldr	r0, [r4, #0]
 8009ab2:	4401      	add	r1, r0
 8009ab4:	1850      	adds	r0, r2, r1
 8009ab6:	4283      	cmp	r3, r0
 8009ab8:	6011      	str	r1, [r2, #0]
 8009aba:	d1e0      	bne.n	8009a7e <_free_r+0x22>
 8009abc:	6818      	ldr	r0, [r3, #0]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	6053      	str	r3, [r2, #4]
 8009ac2:	4408      	add	r0, r1
 8009ac4:	6010      	str	r0, [r2, #0]
 8009ac6:	e7da      	b.n	8009a7e <_free_r+0x22>
 8009ac8:	d902      	bls.n	8009ad0 <_free_r+0x74>
 8009aca:	230c      	movs	r3, #12
 8009acc:	602b      	str	r3, [r5, #0]
 8009ace:	e7d6      	b.n	8009a7e <_free_r+0x22>
 8009ad0:	6820      	ldr	r0, [r4, #0]
 8009ad2:	1821      	adds	r1, r4, r0
 8009ad4:	428b      	cmp	r3, r1
 8009ad6:	bf04      	itt	eq
 8009ad8:	6819      	ldreq	r1, [r3, #0]
 8009ada:	685b      	ldreq	r3, [r3, #4]
 8009adc:	6063      	str	r3, [r4, #4]
 8009ade:	bf04      	itt	eq
 8009ae0:	1809      	addeq	r1, r1, r0
 8009ae2:	6021      	streq	r1, [r4, #0]
 8009ae4:	6054      	str	r4, [r2, #4]
 8009ae6:	e7ca      	b.n	8009a7e <_free_r+0x22>
 8009ae8:	bd38      	pop	{r3, r4, r5, pc}
 8009aea:	bf00      	nop
 8009aec:	24005324 	.word	0x24005324

08009af0 <__malloc_lock>:
 8009af0:	4801      	ldr	r0, [pc, #4]	@ (8009af8 <__malloc_lock+0x8>)
 8009af2:	f7ff bfa3 	b.w	8009a3c <__retarget_lock_acquire_recursive>
 8009af6:	bf00      	nop
 8009af8:	24005320 	.word	0x24005320

08009afc <__malloc_unlock>:
 8009afc:	4801      	ldr	r0, [pc, #4]	@ (8009b04 <__malloc_unlock+0x8>)
 8009afe:	f7ff bf9e 	b.w	8009a3e <__retarget_lock_release_recursive>
 8009b02:	bf00      	nop
 8009b04:	24005320 	.word	0x24005320

08009b08 <_init>:
 8009b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0a:	bf00      	nop
 8009b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b0e:	bc08      	pop	{r3}
 8009b10:	469e      	mov	lr, r3
 8009b12:	4770      	bx	lr

08009b14 <_fini>:
 8009b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b16:	bf00      	nop
 8009b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b1a:	bc08      	pop	{r3}
 8009b1c:	469e      	mov	lr, r3
 8009b1e:	4770      	bx	lr
